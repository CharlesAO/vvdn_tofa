/* uhilintsys_ioctls.h	Sat May  9 2009 17:14:36 tmm */

/*

Module:  uhilintsys_ioctls.h

Function:
	IOCTLs for UHIL_INTERRUPT_SYSTEMs.

Version:
	V2.01a	Sat May  9 2009 17:14:36 tmm	Edit level 1

Copyright notice:
	This file copyright (C) 2009 by

		MCCI Corporation
		3520 Krums Corners Road
		Ithaca, NY  14850

	An unpublished work.  All rights reserved.
	
	This file is proprietary information, and may not be disclosed or
	copied without the prior permission of MCCI Corporation.
 
Author:
	Terry Moore, MCCI Corporation	May 2009

Revision history:
   2.01a  Sat May  9 2009 17:14:36  tmm
	7667: Module created.

*/

#ifndef _UHILINTSYS_IOCTLS_H_		/* prevent multiple includes */
#define _UHILINTSYS_IOCTLS_H_

#ifndef _UHILINTSYS_H_
# include "uhilintsys.h"
#endif

#ifndef _USBPUMPIOCTL_H_
# include "usbpumpioctl.h"
#endif

#define	__TMS_USBPUMP_IOCTL_CLASS_INTERRUPT_SYSTEM	'j'

/**** define the UHIL_INTERRUPT_SYSTEM in-IOCTLs ****/
#define __TMS_USBPUMP_IOCTL_INTERRUPT_SYSTEM(i, t, NAME)		\
	__TMS_CONCAT(__TMS_USBPUMP_IOCTL_, t)(				\
		__TMS_USBPUMP_IOCTL_CLASS_INTERRUPT_SYSTEM,		\
		(i),							\
		__TMS_CONCAT3(__TMS_USBPUMP_IOCTL_INTERRUPT_SYSTEM_,	\
			      NAME, _ARG)				\
		)

/**** the IOCTLs ****/
#define	__TMS_USBPUMP_IOCTL_INTERRUPT_SYSTEM_CONNECTION_QUERY		\
	__TMS_USBPUMP_IOCTL_INTERRUPT_SYSTEM(0, RW, CONNECTION_QUERY)

/*

IOCTL:	USBPUMP_IOCTL_INTERRUPT_SYSTEM_CONNECTION_QUERY

Index:	Type:	USBPUMP_IOCTL_INTERRUPT_SYSTEM_CONNECTION_QUERY_ARG
	Type:	USBPUMP_IOCTL_INTERRUPT_SYSTEM_CONNECTION_QUERY_SETUP_V1()

Function:
	Returns information about the properties of an interrupt connection
	handle.

Input:
	#include "uhilintsys_ioctls.h"

	UHIL_INTERRUPT_CONNECTION_HANDLE hConnection;
		The interrupt connection handle of interest

Output:
	UHIL_INTERRUPT_MESSAGE uMessageCount;
		The number of interrupt messages defined for this
		handle.  This will be zero for line-mode interrupts, and
		non zero for message-mode interrupts.

	BOOL fUniprocessorOK;
		TRUE if this interrupt can use a uniprocessor-model ISR.

	BOOL fMultiprocessorOK;
		TRUE if this interrupt can use a multiprocesor-model ISR.

Description:
	This routine queries the interrupt system about the properties of
	a given handle.

	To determine whether a given interrupt will be connected in message
	mode, look at uMessageCount.

	On inherently multi-processor platforms, fUniprocessorOK will be FALSE,
	and fMultiprocessorOK will be TRUE.  On old uniprocessor-only
	platofrms, fUniprocessorOK will be TRUE and fMultiprocessorOK will
	be FALSE.  On uniprocessor platforms that have been updated
	to support multi-processor-style ISRs, both flags will be TRUE.

Returns:
	This IOCTL will return the normal IOCTL results.

Setup Macro:
	VOID USBPUMP_IOCTL_INTERRUPT_SYSTEM_CONNECTION_QUERY_SETUP_V1(
		USBPUMP_IOCTL_INTERRUPT_SYSTEM_CONNECTION_QUERY_ARG *pArg,
		UHIL_INTERRUPT_CONNECTION_HANDLE hConnection
		);

Notes:
	None.

*/

/**** parameters to INTERRUPT_CONNECTION_QUERY ****/
__TMS_TYPE_DEF_STRUCT	(USBPUMP_IOCTL_INTERRUPT_SYSTEM_CONNECTION_QUERY_ARG);
struct __TMS_STRUCTNAME	(USBPUMP_IOCTL_INTERRUPT_SYSTEM_CONNECTION_QUERY_ARG)
	{
	/* in */
	__TMS_UHIL_INTERRUPT_CONNECTION_HANDLE	hConnection;
	
	/* out */
	__TMS_UHIL_INTERRUPT_MESSAGE	uMessageCount;
	__TMS_BOOL			fUniprocessorOK;
	__TMS_BOOL			fMultiprocessorOK;
	};

#define	__TMS_USBPUMP_IOCTL_INTERRUPT_SYSTEM_CONNECTION_QUERY_SETUP_V1(	\
	a_pArg,								\
	a_hConnection							\
	)								\
    do	{								\
	(a_pArg)->hConnection = (a_hConnection);			\
	(a_pArg)->uMessageCount = 0;					\
	(a_pArg)->fUniprocessorOK = __TMS_FALSE;			\
	(a_pArg)->fMultiprocessorOK = __TMS_FALSE;			\
	} while (0)

/****************************************************************************\
|
|	Uncloaked names
|
\****************************************************************************/

/**** uncloaked names generated by uncloak-defs.sh ****/
#if !__TMS_CLOAKED_NAMES_ONLY
# define USBPUMP_IOCTL_CLASS_INTERRUPT_SYSTEM	\
   __TMS_USBPUMP_IOCTL_CLASS_INTERRUPT_SYSTEM
# define USBPUMP_IOCTL_INTERRUPT_SYSTEM(i, t, NAME)	\
   __TMS_USBPUMP_IOCTL_INTERRUPT_SYSTEM(i, t, NAME)
# define USBPUMP_IOCTL_INTERRUPT_SYSTEM_CONNECTION_QUERY	\
   __TMS_USBPUMP_IOCTL_INTERRUPT_SYSTEM_CONNECTION_QUERY
# define USBPUMP_IOCTL_INTERRUPT_SYSTEM_CONNECTION_QUERY_SETUP_V1(	\
	a_pArg,								\
	a_hConnection							\
	)	\
	__TMS_USBPUMP_IOCTL_INTERRUPT_SYSTEM_CONNECTION_QUERY_SETUP_V1(	\
	a_pArg,								\
	a_hConnection							\
	)
#endif /* !__TMS_CLOAKED_NAMES_ONLY */


/**** end of uhilintsys_ioctls.h ****/
#endif /* _UHILINTSYS_IOCTLS_H_ */
