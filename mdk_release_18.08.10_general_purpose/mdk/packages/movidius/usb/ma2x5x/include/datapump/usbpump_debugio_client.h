/* usbpump_debugio_client.h	Tue Apr 21 2009 09:24:09 maw */

/*

Module:  usbpump_debugio_client.h

Function:
	Structure definitions for clients of the Debug-IO objects.

Version:
	V2.01a	Tue Apr 21 2009 09:24:09 maw	Edit level 1

Copyright notice:
	This file copyright (C) 2009 by	

		MCCI Corporation
		3520 Krums Corners Road
		Ithaca, NY  14850

	An unpublished work.  All rights reserved.
	
	This file is proprietary information, and may not be disclosed or
	copied without the prior permission of MCCI Corporation
 
Author:
	Mats Webjörn, MCCI Corporation	April 2009

Revision history:
   2.01a  Tue Apr 21 2009 09:24:09 maw
	7563: Module created from usbpump_abstract_sio_client.h EL 1

*/

#ifndef _USBPUMP_DEBUGIO_CLIENT_H_	/* prevent multiple includes */
#define _USBPUMP_DEBUGIO_CLIENT_H_

#ifndef _USBPUMP_TYPES_H_
# include "usbpump_types.h"
#endif

#ifndef _UHILALIGN_H_
# include "uhilalign.h"
#endif

#ifndef _USBPUMPOBJECT_H_
# include "usbpumpobject.h"
#endif

#ifndef _USBPUMPOBJECTNAME_H_
# include "usbpumpobjectname.h"
#endif

#ifndef _USBPUMP_DEBUGIO_TYPES_H_
# include "usbpump_debugio_types.h"
#endif

#ifndef _USBPUMP_DEBUGIO_DEFINES_H_
# include "usbpump_debugio_defines.h"
#endif

/****************************************************************************\
|
|	Constants and helper macros
|
\****************************************************************************/

/*
|| Helper macros
*/
#define __TMS_USBPUMP_DEBUGIO_EVENT_IS_USB_SUSPEND(ARG_event) \
	(((ARG_event) >= __TMS_USBPUMP_DEBUGIO_EVENT_USB_SUSPEND_WITHOUT_WAKEUP) && \
	(((ARG_event) <= __TMS_USBPUMP_DEBUGIO_EVENT_USB_SUSPEND_WITH_WAKEUP))
	
#define __TMS_USBPUMP_DEBUGIO_EVENT_IS_USB_RESUME(ARG_event) \
	((ARG_event) >= __TMS_USBPUMP_DEBUGIO_EVENT_USB_RESUME)

/****************************************************************************\
|
|	Functional API to Debug-IO components.
|
\****************************************************************************/

__TMS_BEGIN_DECLS

__TMS_BOOL
UsbPumpDebugIo_Create( 
	__TMS_PUPLATFORM			pPlatform
	);

__TMS_VOID 
UsbPumpDebugIo_OpenSession( 
	__TMS_PUSBPUMP_DEBUGIO			pDebugIo,
	__TMS_PVOID				pOpenRequestMemory,
	__TMS_BYTES				size_OpenRequestMemory,
	__TMS_PUSBPUMP_DEBUGIO_OPEN_CB_FN	pCallBack,
	__TMS_PVOID				pCallBackContext,
	__TMS_PVOID				pClientHandle,
	__TMS_PUSBPUMP_OBJECT			pClientObject,
	__TMS_PUSBPUMP_DEBUGIO_STATUS_CHANGE_CB_FN
						pStatusChangeCb,
	__TMS_PUSBPUMP_DEBUGIO_SESSION_APIS	pApiBuffer,
	__TMS_BYTES				size_ApiBuffer
	);

__TMS_BYTES
UsbPumpDebugIo_sizeOpenRequestMemory( 
	__TMS_VOID
	);

__TMS_PUSBPUMP_DEBUGIO
UsbPumpDebugIo_EnumerateInstance(
	__TMS_UINT				InstanceId
	);

__TMS_PUSBPUMP_DEBUGIO_RECV_QE
UsbPumpDebugIoI_AllocRecvQe(
	__TMS_PUSBPUMP_ABSTRACT_POOL		pAbstractPool,
	__TMS_PVOID				pClientInfo,
	__TMS_BYTES				nQe,
	__TMS_BYTES				sizeBuffer
	);
	
__TMS_VOID
UsbPumpDebugIoI_FreeRecvQe(
	__TMS_PUSBPUMP_ABSTRACT_POOL		pAbstractPool,
	__TMS_PUSBPUMP_DEBUGIO_RECV_QE		pHeadQe
	);

__TMS_PUSBPUMP_DEBUGIO_SEND_QE
UsbPumpDebugIoI_AllocSendQe(
	__TMS_PUSBPUMP_ABSTRACT_POOL		pAbstractPool,
	__TMS_PVOID				pClientInfo,
	__TMS_BYTES				nQe,
	__TMS_BYTES				sizeBuffer
	);

__TMS_VOID
UsbPumpDebugIoI_FreeSendQe(
	__TMS_PUSBPUMP_ABSTRACT_POOL		pAbstractPool,
	__TMS_PUSBPUMP_DEBUGIO_SEND_QE		pHeadQe
	);

__TMS_USBPUMP_DEBUGIO_STATUS
UsbPumpDebugIoRecvQe_Init( 
	__TMS_PUSBPUMP_DEBUGIO_RECV_QE		pRecvQe,
	__TMS_PVOID				pClientInfo,
	__TMS_PVOID				pBuffer,
	__TMS_BYTES				sizeBuffer,
	__TMS_BYTES				nBuffer
	);

__TMS_USBPUMP_DEBUGIO_STATUS
UsbPumpDebugIoSendQe_Init( 
	__TMS_PUSBPUMP_DEBUGIO_SEND_QE		pSendQe,
	__TMS_PVOID				pClientInfo,
	__TMS_PVOID				pBuffer,
	__TMS_BYTES				sizeBuffer,
	__TMS_BYTES				nBuffer
	);

__TMS_END_DECLS

/****************************************************************************\
|
|	Uncloaked names
|
\****************************************************************************/

/**** uncloaked names generated by uncloak-defs.sh ****/
#if !__TMS_CLOAKED_NAMES_ONLY
# define USBPUMP_DEBUGIO_EVENT_IS_USB_SUSPEND(ARG_event)	\
   __TMS_USBPUMP_DEBUGIO_EVENT_IS_USB_SUSPEND(ARG_event)
# define USBPUMP_DEBUGIO_EVENT_IS_USB_RESUME(ARG_event)	\
   __TMS_USBPUMP_DEBUGIO_EVENT_IS_USB_RESUME(ARG_event)
#endif /* !__TMS_CLOAKED_NAMES_ONLY */

/**** end of usbpump_debugio_client.h ****/
#endif /* _USBPUMP_DEBUGIO_CLIENT_H_ */
