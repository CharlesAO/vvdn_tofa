/* usbpump_usbphy_api.h	Mon Jun 03 2013 22:20:16 chwon */

/*

Module:  usbpump_usbphy_api.h

Function:
	Definition of the application APIs for SRP/HNP

Version:
	V3.11c	Mon Jun 03 2013 22:20:16 chwon	Edit level 3

Copyright notice:
	This file copyright (C) 2010, 2013 by

		MCCI Corporation
		3520 Krums Corners Road
		Ithaca, NY  14850

	An unpublished work.  All rights reserved.

	This file is proprietary information, and may not be disclosed or
	copied without the prior permission of MCCI Corporation

Author:
	Seonkyung Park, MCCI Corporation	October 2010

Revision history:
   3.01d  Sat Oct 23 2010 21:33:31 skpark
	11667: Module created.

   3.01d  Tue Dec 14 2010 11:00:40  skpark
	11667: Add UsbPumpUsbPhy_SetAbusRequestMode()

   3.11c  Mon Jun 03 2013 22:20:16  chwon
	17311: Add UsbPumpUsbPhy_SetAbusDrop().

*/

#ifndef _USBPUMP_USBPHY_API_H_		/* prevent multiple includes */
#define _USBPUMP_USBPHY_API_H_

#ifndef _USBPUMP_USBPHY_H_
# include "usbpump_usbphy.h"
#endif

/****************************************************************************\
|
|	USBPUMP API Status Code Definition
|
\****************************************************************************/

__TMS_TYPE_DEF_ARG	(USBPUMP_USBPHY_API_STATUS, UINT32);

/* no error */
#define	__TMS_USBPUMP_USBPHY_API_STATUS_OK				0

/* general failure */
#define	__TMS_USBPUMP_USBPHY_API_STATUS_FAILED				1

/* HNP or SRP is not supported in the HW */
#define	__TMS_USBPUMP_USBPHY_API_STATUS_NOT_SUPPORT			2

/* invalid port number for HNP/SRP */
#define	__TMS_USBPUMP_USBPHY_API_STATUS_INVALID_PARAMETER		3

/* invalid A-device state for starting HNP */
#define	__TMS_USBPUMP_USBPHY_API_STATUS_INVALID_STATE_A_HNP		4

/* invalid B-device state for starting HNP */
#define	__TMS_USBPUMP_USBPHY_API_STATUS_INVALID_STATE_B_HNP		5

/* no HNP capable port exists */
#define	__TMS_USBPUMP_USBPHY_API_STATUS_NO_HNP_PORT			6

/* HNP was not successful. UsbPumpUsbPhy_FinishHnp() will fail */
#define	__TMS_USBPUMP_USBPHY_API_STATUS_HNP_NOT_IN_SESSION		7

/* invalid OTG state for starting SRP */
#define	__TMS_USBPUMP_USBPHY_API_STATUS_INVALID_STATE_SRP		8

/* invalid OTG state for setting A_BUS_DROP */
#define	__TMS_USBPUMP_USBPHY_API_STATUS_INVALID_STATE			9

#define	__TMS_USBPUMP_USBPHY_API_STATUS_SUCCESS(Status)		\
	((Status) == __TMS_USBPUMP_USBPHY_API_STATUS_OK)


/****************************************************************************\
|
|	API functions
|
\****************************************************************************/

__TMS_BEGIN_DECLS

__TMS_USBPUMP_USBPHY_API_STATUS
UsbPumpUsbPhy_StartHnp(
	__TMS_USBPUMP_USBPHY *,		/* pUsbPhy */
	__TMS_UINT32			/* Port */
	);

__TMS_USBPUMP_USBPHY_API_STATUS
UsbPumpUsbPhy_StartSrp(
	__TMS_USBPUMP_USBPHY *		/* pUsbPhy */
	);

__TMS_USBPUMP_USBPHY_API_STATUS
UsbPumpUsbPhy_FinishHnp(
	__TMS_USBPUMP_USBPHY *,		/* pUsbPhy */
	__TMS_UINT32			/* Port */
	);

__TMS_USBPUMP_USBPHY_API_STATUS
UsbPumpUsbPhy_WaitSrpEnable(
	__TMS_USBPUMP_USBPHY *,		/* pUsbPhy */
	__TMS_UINT32,			/* Port */
	__TMS_BOOL			/* fSrpEnable */
	);

__TMS_USBPUMP_USBPHY_API_STATUS
UsbPumpUsbPhy_AutoHnpEnable(
	__TMS_USBPUMP_USBPHY *,		/* pUsbPhy */
	__TMS_BOOL			/* fHnpEnable */
	);

__TMS_USBPUMP_USBPHY_API_STATUS
UsbPumpUsbPhy_SetAbusRequestMode(
	__TMS_USBPUMP_USBPHY *,		/* pUsbPhy */
	__TMS_UINT32,			/* Port */
	__TMS_USBPUMP_USBPHY_HCD_ABUS_REQUEST_MODE	/* AbusRequestMode */
	);

__TMS_USBPUMP_USBPHY_API_STATUS
UsbPumpUsbPhy_SetAbusDrop(
	__TMS_USBPUMP_USBPHY *,		/* pUsbPhy */
	__TMS_UINT32,			/* Port */
	__TMS_BOOL			/* fAbusDrop */
	);

__TMS_END_DECLS


/****************************************************************************\
|
|	Uncloaked names
|
\****************************************************************************/

/**** uncloaked names generated by uncloak-defs.sh ****/
#if !__TMS_CLOAKED_NAMES_ONLY
# define USBPUMP_USBPHY_API_STATUS_OK	\
   __TMS_USBPUMP_USBPHY_API_STATUS_OK
# define USBPUMP_USBPHY_API_STATUS_FAILED	\
   __TMS_USBPUMP_USBPHY_API_STATUS_FAILED
# define USBPUMP_USBPHY_API_STATUS_NOT_SUPPORT	\
   __TMS_USBPUMP_USBPHY_API_STATUS_NOT_SUPPORT
# define USBPUMP_USBPHY_API_STATUS_INVALID_PARAMETER	\
   __TMS_USBPUMP_USBPHY_API_STATUS_INVALID_PARAMETER
# define USBPUMP_USBPHY_API_STATUS_INVALID_STATE_A_HNP	\
   __TMS_USBPUMP_USBPHY_API_STATUS_INVALID_STATE_A_HNP
# define USBPUMP_USBPHY_API_STATUS_INVALID_STATE_B_HNP	\
   __TMS_USBPUMP_USBPHY_API_STATUS_INVALID_STATE_B_HNP
# define USBPUMP_USBPHY_API_STATUS_NO_HNP_PORT	\
   __TMS_USBPUMP_USBPHY_API_STATUS_NO_HNP_PORT
# define USBPUMP_USBPHY_API_STATUS_HNP_NOT_IN_SESSION	\
   __TMS_USBPUMP_USBPHY_API_STATUS_HNP_NOT_IN_SESSION
# define USBPUMP_USBPHY_API_STATUS_INVALID_STATE_SRP	\
   __TMS_USBPUMP_USBPHY_API_STATUS_INVALID_STATE_SRP
# define USBPUMP_USBPHY_API_STATUS_INVALID_STATE	\
   __TMS_USBPUMP_USBPHY_API_STATUS_INVALID_STATE
# define USBPUMP_USBPHY_API_STATUS_SUCCESS(Status)	\
   __TMS_USBPUMP_USBPHY_API_STATUS_SUCCESS(Status)
#endif /* !__TMS_CLOAKED_NAMES_ONLY */

/**** end of usbpump_usbphy_api.h ****/
#endif /* _USBPUMP_USBPHY_API_H_ */
