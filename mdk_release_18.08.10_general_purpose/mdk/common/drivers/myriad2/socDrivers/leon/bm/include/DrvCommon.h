///
/// @file DrvCommon.h
/// @copyright All code copyright Movidius Ltd 2012, all rights reserved
///            For License Warranty see: common/license.txt
/// @defgroup DrvCommon Common Driver
/// @{
/// @brief     Common utilities
///
/// Common utilities to be used in all bare-metal drivers
///




#ifndef DRVCOMMON_H
#define DRVCOMMON_H

#include "SglCommon.h"

// 1: Defines
// ----------------------------------------------------------------------------
/// Common deprecation macro
#define __Deprecated__(message) __attribute__((deprecated(message)))
/// Macro to generate warning if function result is not checked by the caller
#define __Check_Func_Result__   __attribute__((warn_unused_result))

/// Offset to be applied to custom return values generated by bare-metal drivers
#define MYR_DRV_CUSTOM_CODE_START_OFFSET						50

#define MYR_DYN_INFR_START_CODE                                 7000

/// Macro to check dynamic loading infrastructure return code
#define MYR_DYN_INFR_CHECK_CODE(code)     DrvDynInfraCheckReturnCode(code)

// 2: Typedefs (types, enums, structs)
// ----------------------------------------------------------------------------

/// Common return values for all DRV layer drivers
////////////////////////////////////////////////////////////////////////////////
//                                   / \                                      //
//                                  / ! \                                     //
//                                 /_____\                                    //
//                                                                            //
// Any new error code must be added after the existing ones and before        //
// MYR_DRV_RET_NB. Moreover the test in testApps/drivers/common/test_ret_code //
// must be updated to include any new code so that the automatic verification //
// of return values' uniqueness works correctly.                              //
////////////////////////////////////////////////////////////////////////////////
typedef enum
{
	MYR_DRV_SUCCESS = SGL_SUCCESS,
	MYR_DRV_ERROR = SGL_RET_NB,
	MYR_DRV_NOT_INITIALIZED,
	MYR_DRV_ALREADY_INITIALIZED,
	MYR_DRV_RESOURCE_BUSY,
	MYR_DRV_INVALID_PARAM,
	MYR_DRV_RET_NB
} DRV_RETURN_TYPE;

typedef enum
{
    MYR_DYN_INFR_SUCCESS = MYR_DRV_SUCCESS,                  /* Successful operation */
    MYR_DYN_INFR_ERROR = MYR_DYN_INFR_START_CODE,            /* Generic error in dynamic infrastructure */
    MYR_DYN_INFR_MULTIPLE_SHAVE_ALLOCATION,                  /* Shave allocated to multiple applications */
    MYR_DYN_INFR_INVALID_PARAMETERS,                         /* Invalid function parameters */
    MYR_DYN_INFR_CANNOT_ALLOC_HEAP,                          /* Cannot allocate heap memory */
    MYR_DYN_INFR_CANNOT_ALLOC_GROUPDATA,                     /* Cannot allocate group data memory */
    MYR_DYN_INFR_RUNALGO_SHAVES_BUSY,                        /* Error running shave algo. Target shaves are busy or invalid function parameter */
    MYR_DYN_INFR_SHAVE_BUSY_OR_INVALID,                      /* Error running shave algo on assigned shave. Target shave busy or not assigned */
    MYR_DYN_INFR_INVALID_SAVED_CONFIG,                       /* Error at cleanup. Invalid saved configuration */
	MYR_DYN_INFR_ERROR_STACK_OVERFLOW,						 /* Error at running shave. Stack overflow occured */
    MYR_DYN_INFR_NUMBER_OF_FREE_SHAVE_NOT_AVAILABLE,         /* Cannot find the requested number of free shave in the system */
    MYR_DYN_INFR_SHAVE_NOT_FOUND_IN_CONTEXT_LIST,            /* Cannot find the shave in the Context list */
    MYR_DYN_INFR_HEAP_NOT_SELECTED,                          /* Heap is not selected but heap size is set */
    MYR_DYN_INFR_HEAP_SIZE_NOT_SET,                          /* Heap is selected but heap size is not set */
    MYR_DYN_INFR_FUNCTION_NOT_FOUND,                         /* The function name is not found into the application IAT*/
    MYR_DYN_INFR_LAST_CODE

} MYRIAD_DYNAMIC_INFRASTR_STATUS_CODE;

/// Function to check dynamic loading infrastructure return code
void DrvDynInfraCheckReturnCode(int code);

#endif // DRVCOMMON_H

///@}
