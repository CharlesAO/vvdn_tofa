///
/// @file
/// @copyright All code copyright Movidius Ltd 2012, all rights reserved.
///            For License Warranty see: common/license.txt
///
/// @brief     IC Driver for the External PLL CDCE913PW
///
///
///

// 1: Includes
// ----------------------------------------------------------------------------
#ifndef CDCEL_CONFIGS_H__
#define CDCEL_CONFIGS_H__

#include <mv_types.h>

#define SELECT_BYTE_ACCESS (1 << 7) // Bit 7 in the register address sets byte mode when enable.

typedef struct
{
    u8      address;
    u8      value;
} config_element_type;

static const config_element_type icExtPllCfg_74MHz[] =
{
    {0x02, 0xB4},
    {0x03, 0x03},
    {0x04, 0x02},
    {0x05, 0x00},
    {0x06, 0x40},
    {0x10, 0x00},
    {0x11, 0x00},
    {0x12, 0x00},
    {0x13, 0x00},
    {0x14, 0x65},
    {0x15, 0x02},
    {0x16, 0x00},
    {0x17, 0x00},
    {0x18, 0xFF},
    {0x19, 0xC7},
    {0x1A, 0xC2},
    {0x1B, 0x07},
    {0x1C, 0x00},
    {0x1D, 0x40},
    {0x1E, 0x02},
    {0x1F, 0x08},
};

static const config_element_type icExtPllCfg_111MHz[] =
{
    {0x02, 0xB4},
    {0x03, 0x02},
    {0x04, 0x02},
    {0x05, 0x00},
    {0x06, 0x40},
    {0x10, 0x00},
    {0x11, 0x00},
    {0x12, 0x00},
    {0x13, 0x00},
    {0x14, 0x65},
    {0x15, 0x02},
    {0x16, 0x00},
    {0x17, 0x00},
    {0x18, 0xFF},
    {0x19, 0xC7},
    {0x1A, 0xC2},
    {0x1B, 0x07},
    {0x1C, 0x00},
    {0x1D, 0x40},
    {0x1E, 0x02},
    {0x1F, 0x08},
};

static const config_element_type icExtPllCfg_148MHz[] =
{
    {0x02, 0xB4},
    {0x03, 0x01},
    {0x04, 0x02},
    {0x05, 0x50},
    {0x06, 0x40},
    {0x10, 0x00},
    {0x11, 0x00},
    {0x12, 0x00},
    {0x13, 0x00},
    {0x14, 0x65},
    {0x15, 0x02},
    {0x16, 0x00},
    {0x17, 0x00},
    {0x18, 0xaf},
    {0x19, 0x50},
    {0x1A, 0x02},
    {0x1B, 0xc9},
    {0x1C, 0x00},
    {0x1D, 0x40},
    {0x1E, 0x02},
    {0x1F, 0x08}
};

//this uses Y4 AND Y5
static const config_element_type icExtPllCfg_74_24_24MHz[] =
{
    {0x02, 0xB4},
    {0x03, 0x03},
    {0x04, 0x02},
    {0x05, 0x98},
    {0x06, 0x60},
    {0x10, 0x00},
    {0x11, 0x00},
    {0x12, 0x00},
    {0x13, 0x00},
    {0x14, 0x5D},
    {0x15, 0x02},
    {0x16, 0x00},
    {0x17, 0x00},
    {0x18, 0xFF},
    {0x19, 0xC7},
    {0x1A, 0xC2},
    {0x1B, 0x07},
    {0x1C, 0x00},
    {0x1D, 0x40},
    {0x1E, 0x02},
    {0x1F, 0x08},
    {0x20, 0x00},
    {0x21, 0x00},
    {0x22, 0x00},
    {0x23, 0x00},
    {0x24, 0x6d},
    {0x25, 0x02},
    {0x26, 0x09},
    {0x27, 0x09},
    {0x28, 0xff},
    {0x29, 0x80},
    {0x2a, 0x02},
    {0x2b, 0x07},
    {0x2c, 0x00},
    {0x2d, 0x40},
    {0x2e, 0x02},
    {0x2f, 0x08}
};

//3 different outputs:
// Y1 at 148.5 MHz (for HDMI usage)
// Y2 at 24 MHz (for cameras usage)
static const config_element_type icExtPllCfg_148_24_24MHz[] =
{
    {0x02, 0xB4},
    {0x03, 0x01},
    {0x04, 0x02},
    {0x05, 0x48},
    {0x06, 0x60},
    {0x10, 0x00},
    {0x11, 0x00},
    {0x12, 0x00},
    {0x13, 0x00},
    {0x14, 0x45},
    {0x15, 0x02},
    {0x16, 0x00},
    {0x17, 0x00},
    {0x18, 0xaF},
    {0x19, 0x50},
    {0x1A, 0x02},
    {0x1B, 0xC9},
    {0x1C, 0x00},
    {0x1D, 0x40},
    {0x1E, 0x02},
    {0x1F, 0x08},
    {0x20, 0x00},
    {0x21, 0x00},
    {0x22, 0x00},
    {0x23, 0x00},
    {0x24, 0x6D},
    {0x25, 0x02},
    {0x26, 0x06},
    {0x27, 0x06},
    {0x28, 0xAA},
    {0x29, 0x05},
    {0x2A, 0x52},
    {0x2B, 0xA9},
    {0x2C, 0x00},
    {0x2D, 0x40},
    {0x2E, 0x02},
    {0x2F, 0x08}
};

//3 different outputs:
// Y1 at 74.25 MHz (for HDMI usage)
// Y4 at 24 MHz and
// Y5 at 16MHz (for cameras usage)
static const config_element_type icExtPllCfg_74_24_16MHz[] =
{
    {0x02, 0xB4},  //first two registers skipped
    {0x03, 0x03},
    {0x04, 0x02},
    {0x05, 0x90},
    {0x06, 0x60},
    {0x07, 0x00},
    {0x08, 0x00},
    {0x09, 0x00},
    {0x0A, 0x00},
    {0x0B, 0x00},
    {0x0C, 0x00},
    {0x0D, 0x00},
    {0x0E, 0x00},
    {0x0F, 0x00},
    {0x10, 0x00},
    {0x11, 0x00},
    {0x12, 0x00},
    {0x13, 0x00},
    {0x14, 0x6D},
    {0x15, 0x00},
    {0x16, 0x00},
    {0x17, 0x00},
    {0x18, 0xFF},
    {0x19, 0xC7},
    {0x1A, 0xC2},
    {0x1B, 0x07},
    {0x1C, 0x00},
    {0x1D, 0x40},
    {0x1E, 0x02},
    {0x1F, 0x08},
    {0x20, 0x00},
    {0x21, 0x00},
    {0x22, 0x00},
    {0x23, 0x00},
    {0x24, 0x6D},
    {0x25, 0x02},
    {0x26, 0x06}, //(0x09 for 16 MHZ HERE)
    {0x27, 0x09},
    {0x28, 0xAA},
    {0x29, 0x05},
    {0x2A, 0x52},
    {0x2B, 0xA9},
    {0x2C, 0x00},
    {0x2D, 0x40},
    {0x2E, 0x02},
    {0x2F, 0x08}
};

// 2 different outputs:
// Y1 at 148.5 MHz (for HDMI usage)
// Y2 at 37.125 MHz (for camera usage)
static const config_element_type icExtPllCfg_148_37MHz[] =
{
    /// Y1 - Y2 - Y3 config
    {0x02, 0xB4}, // SCL/SDA configured, Y1 enabled
    {0x03, 0x01}, // Y1 divider
    {0x04, 0x02}, // Y1_ST0/Y1_ST1
    {0x05, 0x48}, // Capacitors [7:3] -> 9 pF
    {0x06, 0x60}, // [7:1] Bytes fron next BlockRead transfer (0x60->default value)

    {0x10, 0x00}, //*******
    {0x11, 0x00}, //*** PLL1 SSC selection (modulation amount)
    {0x12, 0x00}, //*******
    {0x13, 0x00}, // PLL1 frequency selection (0->predefined by PLL1_0)
    {0x14, 0x45}, // PLL1 mux-> PLL1, Y2 mux -> Pdiv2, Y3 mux -> Pdiv1
                 // Y3/Y2 state 0 -> disabled to hi impedance state (PLL1 on)
                 // Y3/Y2 state 1 -> disabled to hi impedance state (PLL1 on)
    {0x15, 0x02}, // Y2Y3_x output state selection (default)
    {0x16, 0x00}, // [6:0] 7bit Y2-output-divider (0->Reset+standby, 1-127-> divider value)
    {0x17, 0x00}, // [6:0] 7bit Y3-output-divider (0->Reset+standby, 1-127-> divider value)

    // PLL1_0 multiplier/divider definitions
    {0x18, 0xAF},
    {0x19, 0x50},
    {0x1A, 0x02},
    {0x1B, 0xC9},

    // PLL1_1 multiplier/divider definitions
    {0x1C, 0x00},
    {0x1D, 0x40},
    {0x1E, 0x02},
    {0x1F, 0x08},

    /// Y4 - Y5 Config

    {0x20, 0x00}, //*******
    {0x21, 0x00}, //*** SSC (Down->Off, Center->Off)
    {0x22, 0x00}, //*******
    {0x23, 0x00}, // FS2_X(0:3):PLL2 freq selection
                  // (0->fvco2_0 (predefined by PLL2_0 - mul/div value))
                  // (1->fvco2_1 (predefined by PLL2_1 - mul/div value))
    {0x24, 0x6D}, // PLL2 mux (0->PLL2, 1->PLL bypass (PLL2 power down))
                  // Y4 mux -> Pdiv4
                  // Y5 mux -> Pdiv5
                  // Y4/Y5 -> State0 Enabled PLL2:On, State1 Disabled PLL2:On
    {0x25, 0x02}, // Y4Y5_x output state selection
                  // Eight predefined control settings selected by S0, S1 & S2
    {0x26, 0x04}, // [6:0] Pdiv4 -> 1/4 * fvco2_0
    {0x27, 0x00}, // [6:0] Pdiv5 = 0, Y5 out reset and in standby
    // PLL2_0 multiplier/divider definitions
    {0x28, 0xAF}, // N = 2805, R = 0, Q = 16, P = 2, 125 MHz <= fvco2_0 < 150 Mhz
    {0x29, 0x50}, // M = 510 fvco2_0 = 148.5 MHz
    {0x2A, 0x02},
    {0x2B, 0xC9},
    // PLL2_1 multiplier/divider definitions
    {0x2C, 0x00},
    {0x2D, 0x40},
    {0x2E, 0x02},
    {0x2F, 0x08}
};

#endif
