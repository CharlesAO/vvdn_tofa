///
/// @file
/// @copyright All code copyright Movidius Ltd 2012, all rights reserved
///            For License Warranty see: common/license.txt
///
/// @defgroup dbgLogEvents Tracer Log Events
/// @ingroup  dbgTracer
/// @{
///
/// @brief Header for Event ID list
///
/// This file contains a list of event IDs for the Tracer
///

#ifndef DBG_LOG_EVENTS_H
#define DBG_LOG_EVENTS_H

//List of event IDs
typedef enum
{
    LOG_EVENT_LOS_RUN = 1,
    LOG_EVENT_LRT_RUN,
    LOG_EVENT_WAIT_FOR_LRT,

    LOG_EVENT_SHAVE_0_RESET = 10,
    LOG_EVENT_SHAVE_1_RESET,
    LOG_EVENT_SHAVE_2_RESET,
    LOG_EVENT_SHAVE_3_RESET,
    LOG_EVENT_SHAVE_4_RESET,
    LOG_EVENT_SHAVE_5_RESET,
    LOG_EVENT_SHAVE_6_RESET,
    LOG_EVENT_SHAVE_7_RESET,
    LOG_EVENT_SHAVE_8_RESET,
    LOG_EVENT_SHAVE_9_RESET,
    LOG_EVENT_SHAVE_10_RESET,
    LOG_EVENT_SHAVE_11_RESET,

    LOG_EVENT_SHAVE_0_RUN,
    LOG_EVENT_SHAVE_1_RUN,
    LOG_EVENT_SHAVE_2_RUN,
    LOG_EVENT_SHAVE_3_RUN,
    LOG_EVENT_SHAVE_4_RUN,
    LOG_EVENT_SHAVE_5_RUN,
    LOG_EVENT_SHAVE_6_RUN,
    LOG_EVENT_SHAVE_7_RUN,
    LOG_EVENT_SHAVE_8_RUN,
    LOG_EVENT_SHAVE_9_RUN,
    LOG_EVENT_SHAVE_10_RUN,
    LOG_EVENT_SHAVE_11_RUN,

    LOG_EVENT_WAIT_FOR_SHAVE_0,
    LOG_EVENT_WAIT_FOR_SHAVE_1,
    LOG_EVENT_WAIT_FOR_SHAVE_2,
    LOG_EVENT_WAIT_FOR_SHAVE_3,
    LOG_EVENT_WAIT_FOR_SHAVE_4,
    LOG_EVENT_WAIT_FOR_SHAVE_5,
    LOG_EVENT_WAIT_FOR_SHAVE_6,
    LOG_EVENT_WAIT_FOR_SHAVE_7,
    LOG_EVENT_WAIT_FOR_SHAVE_8,
    LOG_EVENT_WAIT_FOR_SHAVE_9,
    LOG_EVENT_WAIT_FOR_SHAVE_10,
    LOG_EVENT_WAIT_FOR_SHAVE_11,

    // MA2x5x power islands
    LOG_EVENT_CSS_DIGITAL_POWER,
    LOG_EVENT_CSS_ANALOG_POWER,
    LOG_EVENT_RETENTION,
    LOG_EVENT_SHAVE_0_POWER,
    LOG_EVENT_SHAVE_1_POWER,
    LOG_EVENT_SHAVE_2_POWER,
    LOG_EVENT_SHAVE_3_POWER,
    LOG_EVENT_SHAVE_4_POWER,
    LOG_EVENT_SHAVE_5_POWER,
    LOG_EVENT_SHAVE_6_POWER,
    LOG_EVENT_SHAVE_7_POWER,
    LOG_EVENT_SHAVE_8_POWER,
    LOG_EVENT_SHAVE_9_POWER,
    LOG_EVENT_SHAVE_10_POWER,
    LOG_EVENT_SHAVE_11_POWER,
    LOG_EVENT_PMB_POWER,     
    LOG_EVENT_MSS_DIGITAL_POWER,
    LOG_EVENT_MSS_ANALOG_POWER,
    LOG_EVENT_DSS_DIGITAL_POWER,
    LOG_EVENT_DSS_ANALOG_POWER,
    
    // MA2x5x specific power islands
    LOG_EVENT_POWER_M2x5x_BASE  = 70,
    LOG_EVENT_MSS_CPU_POWER     = 86,
    LOG_EVENT_MSS_AMC_POWER,
    LOG_EVENT_MSS_SIPP_POWER,
    LOG_EVENT_DSS_POWER,
    LOG_EVENT_USB_POWER,


    LOG_EVENT_198_RAIL_BASE =   100,
    LOG_EVENT_198_RAIL_VDDCV_I_MA   = LOG_EVENT_198_RAIL_BASE,
    LOG_EVENT_198_RAIL_VDDCR_I_MA,
    LOG_EVENT_198_RAIL_VDDIO_I_MA,
    LOG_EVENT_198_RAIL_MIPI_VDD_I_MA,
    LOG_EVENT_198_RAIL_PLL_AVDD_I_MA,
    LOG_EVENT_198_RAIL_DRAM_MVDDQ_I_MA,
    LOG_EVENT_198_RAIL_DRAM_MVDDA_I_MA,
    LOG_EVENT_198_RAIL_DRAM_VDD1_I_MA,
    LOG_EVENT_198_RAIL_DRAM_VDD2_I_MA,
    LOG_EVENT_198_RAIL_DRAM_VDDQ_I_MA,
    LOG_EVENT_198_RAIL_USB_VDD330_I_MA,
    LOG_EVENT_198_RAIL_USB_VP_VDD_I_MA,
    LOG_EVENT_198_RAIL_VDDCV_V_MV,
    LOG_EVENT_198_RAIL_MIPI_VDD_V_MV,
    LOG_EVENT_198_RAIL_VDDIO_B_I_MUL_I_MA_MA2150,  //used only on boards that have ma2150 chip version
    LOG_EVENT_198_TOTAL_CURRENT,
    LOG_EVENT_198_TOTAL_POWER,
    LOG_EVENT_198_DDR_CURRENT,
    LOG_EVENT_198_DDR_POWER,

    LOG_EVENT_SYS_CLK_CHANGE = 200,

    LOG_EVENT_LAST_EVENT = 9999
} Event_t;

/// @}
#endif //_LOG_EVENTS_H_
