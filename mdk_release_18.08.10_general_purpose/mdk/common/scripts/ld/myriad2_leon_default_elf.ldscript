/*  This is a Leon Default Linker script
 *  Should be used as an included linker script in top level scripts
 */

ENTRY( start );

INCLUDE myriad2_memmaps.ldscript

SECTIONS {
  /*
   * locate the special sections in correct place
   * These sections are required to ensure Myriad is initialized correctly and must be loaded first
   */
  .l2.mode    0x20FD0000 : { KEEP(*(.l2.mode)) }           /* L2 cache mode                */
  .cmx.ctrl   0x20FC0028 : { KEEP(*(.cmx.ctrl)) }          /* CMX default layout           */

  /* Locating Leon code in top 4 slices for now, to avoid conflicts with shave local slices, soon it will move to DRAM */
  . = __CMX_SLICE_C;
  .sys.traps ALIGN(0x1000) : {
    *(.sys.text.traps)
  }
  .sys.text ALIGN(4) : {
    *(.sys.text.start)
  }
  CTORS_BEGIN = .;
  .ctors : { KEEP(*(.ctors))  }
  CTORS_END = .;
  .init ALIGN(4) : {
    *(.init)
  }
  .text ALIGN(4) : {
    *(.text*)
  }
  .fini ALIGN(4) : {
    *(.fini)
  }
  .sys.rodata ALIGN(4) : { *(.sys.rodata*) }
  .rodata ALIGN(4) : { *(.rodata*) }
  .data ALIGN(4) : { *(.data*) }


  /*The LeonOS default heap section*/
  .heapSection : { *(.heapSection.data) }

  .bss  (NOLOAD): {
    . = ALIGN(8);
    __bss_start = . ;
    *(.bss*) *(COMMON)
    . = ALIGN(8);
    __bss_end = . ;
  }

  .noinit (NOLOAD) : {
    . = ALIGN(8);
    __noinit_start = . ;
    *(.noinit*) *(COMMON)
    . = ALIGN(8);
    __noinit_end = . ;
  }

  . = __CMX_SLICE_E - 0x100;
  _LEON_STACK_POINTER = .;
  .sys.bss ALIGN(4) (NOLOAD) : {
    . = ALIGN(8);
    __sys_bss_start = . ;
    *(.sys.bss*)
    . = ALIGN(8);
    __sys_bss_end = . ;
  }

  . = __CMX_SLICE_E;
  .lrt.sys.traps ALIGN(0x1000) : {
    *(.lrt.sys.text.traps)
  }
  /* LeonRT Entry point has a requirement that the bottom 12 bits
     are 0. Thus 4KB alignment is required */
  .lrt.sys.text ALIGN(0x1000): {
    *(.lrt.sys.text.start)
  }
  lrt_CTORS_BEGIN = .;
  .lrt.ctors : { KEEP(*(.lrt.ctors))  }
  lrt_CTORS_END = .;
  .lrt.init ALIGN(4) : {
    *(.lrt.init)
  }
  .lrt.text : {*(.lrt.text*)}
  .lrt.fini ALIGN(4) : {
    *(.lrt.fini)
  }
  .lrt.sys.rodata : { *(.lrt.sys.rodata*) }
  .lrt.rodata : { *(.lrt.rodata*) }
  .lrt.data : { *(.lrt.data*) }

  /*The LeonRT default section*/
  .lrt.heapSection : { *(.lrt.heapSection.data) }

  .lrt.bss (NOLOAD) : {
    . = ALIGN(8);
    lrt___bss_start = . ;
    *(.lrt.bss*) *(.lrt.COMMON)
    . = ALIGN(8);
    lrt___bss_end = . ;
  }

  /* End of CMX is at 2MB boundary (end of slice 16)*/
  __CMX_TOP = __CMX_PHYS + (2 * 1024 * 1024);

  . = __CMX_TOP - 0x100;
  lrt__LEON_STACK_POINTER = .;

  .lrt.sys.bss ALIGN(4) (NOLOAD) : {
    . = ALIGN(8);
    lrt___sys_bss_start = . ;
    *(.lrt.sys.bss*)
    . = ALIGN(8);
    lrt___sys_bss_end = . ;
  }

  __MIN_STACK_SIZE = DEFINED( __MIN_STACK_SIZE ) ? __MIN_STACK_SIZE : 3584;
  __MIN_INIT_STACK_SIZE = DEFINED( __MIN_INIT_STACK_SIZE ) ? __MIN_INIT_STACK_SIZE : 1024;

  __STACK_SIZE = ABSOLUTE(__sys_bss_start - __bss_end);
  ASSERT( (__STACK_SIZE > __MIN_STACK_SIZE) && (__STACK_SIZE < 0x80000000) , "LeonOS Code + data too big. Stack space left is smaller than the required minimum (3.5 KB)!")

  /*lrt__MIN_STACK_SIZE = DEFINED( lrt__MIN_STACK_SIZE ) ? lrt__MIN_STACK_SIZE : 3584;*/
  /*lrt__MIN_INIT_STACK_SIZE = DEFINED( lrt__MIN_INIT_STACK_SIZE ) ? lrt__MIN_INIT_STACK_SIZE : 1024;*/

  lrt__STACK_SIZE = ABSOLUTE(lrt___sys_bss_start - lrt___bss_end);
  ASSERT( (lrt__STACK_SIZE > lrt__MIN_STACK_SIZE) && (lrt__STACK_SIZE < 0x80000000) , "LeonRT Code + data too big. Stack space left is smaller than the required minimum (3.5 KB)!")

  /*lrt__INIT_STACK_SIZE = ABSOLUTE(lrt___sys_bss_start - lrt__init_text_end);*/
  /*ASSERT( (lrt__INIT_STACK_SIZE > lrt__MIN_INIT_STACK_SIZE) && (lrt__INIT_STACK_SIZE < 0x80000000) , "Stack available to the init code for LeonRT is smaller than the specified minimum (which by default is 1 KB)!")*/


  /DISCARD/ : {
    *(.stab .stabstr .comment .gnu.attributes .iplt .rela.iplt .gcc_except_table.*)
  }
}
