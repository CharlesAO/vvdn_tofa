cscope 15 $HOME/projects/microsoft/source/mdk_release_18.08.10_general_purpose/mdk/examples               0002792147
	@Demo/Cam208CvDynJpegHdmi/arch/ma2x5x/leon/los_app_config_2150.c

13 
	~"los_≠p_c⁄fig.h
"

14 
	~"DrvC¥.h
"

27 
	$blocksRe£tSûic⁄S≥cific
()

29 
	`DrvC¥SysDevi˚A˘i⁄
(
SIPP_DOMAIN
, 
ASSERT_RESET
, 
DEV_SIPP_MIPI
);

30 
	`DrvC¥SysDevi˚A˘i⁄
(
UPA_DOMAIN
, 
ASSERT_RESET
, 
APP_UPA_CLOCKS
);

31 
	`DrvC¥SysDevi˚A˘i⁄
(
MSS_DOMAIN
, 
DEASSERT_RESET
, -1);

32 
	`DrvC¥SysDevi˚A˘i⁄
(
CSS_DOMAIN
, 
DEASSERT_RESET
, -1);

33 
	`DrvC¥SysDevi˚A˘i⁄
(
SIPP_DOMAIN
, 
DEASSERT_RESET
, -1);

34 
	`DrvC¥SysDevi˚A˘i⁄
(
UPA_DOMAIN
, 
DEASSERT_RESET
, -1);

35 
	}
}

	@Demo/Cam208CvDynJpegHdmi/arch/ma2x5x/leon/los_app_config_2150.h

13 #i‚de‡
LOS_APP_CONFIG_2150_H


14 
	#LOS_APP_CONFIG_2150_H


	)

18 
	~"mv_ty≥s.h
"

19 
	~"DrvC¥Deföes.h
"

23 
	#APP_MSS_CLOCKS
 (
DEV_MSS_APB_SLV
 | \

24 
DEV_MSS_APB2_CTRL
 | \

25 
DEV_MSS_RTBRIDGE
 | \

26 
DEV_MSS_RTAHB_CTRL
 | \

27 
DEV_MSS_LRT
 | \

28 
DEV_MSS_LRT_DSU
 | \

29 
DEV_MSS_LRT_L2C
 | \

30 
DEV_MSS_LRT_ICB
 | \

31 
DEV_MSS_AXI_BRIDGE
 | \

32 
DEV_MSS_MXI_CTRL
 | \

33 
DEV_MSS_MXI_DEFSLV
 | \

34 
DEV_MSS_AXI_MON
 | \

35 
DEV_MSS_MIPI
 | \

36 
DEV_MSS_LCD
 | \

37 
DEV_MSS_AMC
 | \

38 
DEV_MSS_SIPP
 | \

39 
DEV_MSS_TIM
 )

	)

41 
	#APP_SIPP_CLOCKS
 ( 
DEV_SIPP_SIPP_ABPSLV
 | \

42 
DEV_SIPP_APB_SLV
 | \

43 
DEV_SIPP_MIPI
 | \

44 
DEV_SIPP_LUT
 | \

45 
DEV_SIPP_MIPI_RX1
 )

	)

	@Demo/Cam208CvDynJpegHdmi/leon/los_app_config.c

13 
	~"DrvDdr.h
"

14 
	~"as£π.h
"

15 
	~"DrvShaveL2Cache.h
"

16 
	~"OsDrvTimî.h
"

17 
	~"OsDrvC¥.h
"

18 
	~"los_≠p_c⁄fig.h
"

19 
	~<°dio.h
>

23 
	#L2CACHE_CFG
 (
SHAVE_L2CACHE_NORMAL_MODE
)

	)

24 
	#PARTITION_0
 (0)

	)

25 
	#SHAVES_USED
 (12)

	)

34 
tyAuxClkDividîCfg
 
	gauxClk
[] =

37 .
auxClockE«bÀMask
 = 
AUX_CLK_MASK_MEDIA
,

38 .
	gauxClockSour˚
 = 
CLK_SRC_SYS_CLK_DIV2
 ,

39 .
	gauxClockDivNumî©‹
 = 1,

40 .
	gauxClockDivDíomö©‹
 = 1,

43 .
	gauxClockE«bÀMask
 = 
CLOCKS_MIPICFG
,

44 .
	gauxClockSour˚
 = 
CLK_SRC_SYS_CLK
 ,

45 .
	gauxClockDivNumî©‹
 = 1,

46 .
	gauxClockDivDíomö©‹
 = 18,

49 .
	gauxClockE«bÀMask
 = 
AUX_CLK_MASK_SDIO
,

50 .
	gauxClockSour˚
 = 
CLK_SRC_PLL0
,

51 .
	gauxClockDivNumî©‹
 = 1,

52 .
	gauxClockDivDíomö©‹
 = 8,

64 
	$öôClocksAndMem‹y
()

66 
i
;

67 
s32
 
sc
;

70 
sc
 = 
	`OsDrvC¥Inô
();

71 if(
sc
)

72  
sc
;

73 
sc
 = 
	`OsDrvC¥O≥n
();

74 if(
sc
)

75  
sc
;

76 
sc
 = 
	`OsDrvC¥AuxClockAºayC⁄fig
(
auxClk
);

77 if(
sc
)

78  
sc
;

80 
	`blocksRe£tSûic⁄S≥cific
();

82 
sc
 = 
	`OsDrvTimîInô
();

83 if(
sc
)

84  
sc
;

85 
	`DrvDdrInôüli£
(
NULL
);

88 
sc
 = 
	`DrvShaveL2CacheSëMode
(
L2CACHE_CFG
);

89 if(
sc
)

90  
sc
;

93 
	`DrvShaveL2CacheSëupP¨tôi⁄
(
SHAVEPART256KB
);

96 
sc
 = 
	`DrvShaveL2CacheAŒoˇãSëP¨tôi⁄s
();

97 if(
sc
)

98  
sc
;

101 
i
 = 0; i < 
SHAVES_USED
; i++)

103 
	`DrvShaveL2CacheSëLSUP¨tId
(
i
, 
PARTITION_0
);

106 
	`DrvShaveL2CacheP¨tôi⁄FlushAndInvÆid©e
(
PARTITION_0
);

109 
	}
}

	@Demo/Cam208CvDynJpegHdmi/leon/los_app_config.h

13 #i‚de‡
LOS_APP_CONFIG_H


14 
	#LOS_APP_CONFIG_H


	)

18 
	~"mv_ty≥s.h
"

21 #i‡
deföed
(
MA2150
Ë|| deföed(
MA2155
Ë|| deföed(
MA2450
Ë|| deföed(
MA2455
)

22 
	~"los_≠p_c⁄fig_2150.h
"

28 
	#SYS_CLK_KHZ
 12000

29 

	)

31 
	#CLOCKS_MIPICFG
 (
AUX_CLK_MASK_MIPI_ECFG
 | 
AUX_CLK_MASK_MIPI_CFG
)

	)

33 
	#APP_UPA_CLOCKS
 (
DEV_UPA_SH0
 | \

34 
DEV_UPA_SH1
 | \

35 
DEV_UPA_SH2
 | \

36 
DEV_UPA_SH3
 | \

37 
DEV_UPA_SH4
 | \

38 
DEV_UPA_SH5
 | \

39 
DEV_UPA_SH6
 | \

40 
DEV_UPA_SHAVE_L2
 | \

41 
DEV_UPA_CDMA
 | \

42 
DEV_UPA_CTRL
 )

	)

52 
öôClocksAndMem‹y
();

53 
blocksRe£tSûic⁄S≥cific
();

	@Demo/Cam208CvDynJpegHdmi/leon/main.c

13 
	~<DrvLe⁄.h
>

14 
	~<DrvC¥.h
>

15 
	~<DrvTimî.h
>

16 
	~<DrvDdr.h
>

17 
	~<swcLe⁄Utûs.h
>

18 
	~"Le⁄IPCApi.h
"

19 
	~<°dlib.h
>

20 
	~<°dio.h
>

22 
	~<πems.h
>

23 
	~"πems_c⁄fig.h
"

24 
	~<πems/fsmou¡.h
>

25 
	~<πems/bd∑π.h
>

26 
	~<b•.h
>

27 
	~"DrvI2cMa°î.h
"

28 
	~<OsDrvSdio.h
>

29 
	~<DrvGpio.h
>

30 
	~<OsBrdMv0182.h
>

31 
	~<f˙é.h
>

32 
	~<as£π.h
>

33 
	~<î∫o.h
>

34 
	~"comm⁄Deföe.h
"

35 
	~"swcShaveLﬂdî.h
"

36 
	~"swcLe⁄Utûs.h
"

40 
	#DEFAULT_SDIO_INT_PRIORITY
 10

	)

41 
	#SDIO_SLOT_USED
 1

	)

42 
	#SDIO_DEVNAME_USED
 "/dev/sdc0"

	)

47 
u32
 *
Ãt_°¨t
;

49 
j≥gFømeBuf„r
 * vﬁ©ûê
Ãt_pToSdˇrdBuf
;

51 
	#MSG_SIZE
 1

	)

52 
	#MSG_QUEUE_SIZE
 10

	)

54 
À⁄IPCCh™√l_t
 
Ãt_LOStoLRTCh™√l
;

55 
uöt32_t
 
__©åibuã__
((
£˘i⁄
(".cmx_dúe˘.d©a"))Ë
	gmesßgePoﬁ
[
MSG_QUEUE_SIZE
 * 
MSG_SIZE
];

56 
uöt32_t
 
__©åibuã__
((
£˘i⁄
(".cmx_dúe˘.d©a"))Ë
	gmyMesßge
;

63 c⁄° 
πems_f°ab_íåy
 
	gfs_èbÀ
 [] = {

65 .
sour˚
 = "/dev/sdc0",

66 .
	gèrgë
 = "/mnt/sdcard",

67 .
	gty≥
 = "dosfs",

68 .
	g›ti⁄s
 = 
RTEMS_FILESYSTEM_READ_WRITE
,

69 .
	gªp‹t_ªas⁄s
 = 
RTEMS_FSTAB_NONE
,

70 .
	gab‹t_ªas⁄s
 = 
RTEMS_FSTAB_OK


73 .
	gsour˚
 = "/dev/sdc01",

74 .
	gèrgë
 = "/mnt/sdcard",

75 .
	gty≥
 = "dosfs",

76 .
	g›ti⁄s
 = 
RTEMS_FILESYSTEM_READ_WRITE
,

77 .
	gªp‹t_ªas⁄s
 = 
RTEMS_FSTAB_NONE
,

78 .
	gab‹t_ªas⁄s
 = 
RTEMS_FSTAB_NONE


82 
tyI2cC⁄fig
 
	gi2c2Ma°îCfg
 =

84 .
devi˚
 = 
IIC3_BASE_ADR
,

85 .
	gs˛Pö
 = 79,

86 .
	gsdaPö
 = 80,

87 .
	g•ìdKhz
 = 100,

88 .
	gaddªssSize
 = 
ADDR_7BIT
,

89 .
	gîr‹H™dÀr
 = 
NULL


91 
I2CM_Devi˚
 
	gI2cDevi˚
;

92 
u8
 
	g¥ŸocﬁWrôeSam∂e2
[] = 
I2C_PROTO_WRITE_16BA
;

93 
u8
 
	g¥ŸocﬁRódSam∂e2
[] = 
I2C_PROTO_READ_16BA
;

94 
u32
 
	gbäSœve
=0x36;

98 
wrôeSdC¨d
(
u8
 *
buff
, 
u32
 
size
);

99 *
makeJ≥gPi˘uª
();

102 
	$öôWM8325
(){

103 
s32
 
°©us
;

105 
u32
 
gpioI≈ut
=0x80C080C0;

107 
°©us
 = 
	`DrvI2cMInôFromC⁄fig
(&
I2cDevi˚
, &
i2c2Ma°îCfg
);

108 if(
°©us
) {

109 
	`¥ötf
("I2C Setup step 1 failed\n");

110 
	`exô
(1);

113 
°©us
 = 
	`DrvI2cMTønß˘i⁄
(&
I2cDevi˚
, 
bäSœve
, 0x4038, 
¥ŸocﬁWrôeSam∂e2
, (
u8
 *Ë&
gpioI≈ut
, 4);

114 if(
°©us
) {

115 
	`¥ötf
("I2C Setup step 2 failed\n");

116 
	`exô
(1);

118 
	}
}

120 
ölöe
 
u32
 
	$ªadBuâ⁄
(
u8
* 
buâ⁄s
)

122 
s32
 
°©us
;

123 
u8
 
cuºBuâ⁄
[2];

125 
°©us
 = 
	`DrvI2cMTønß˘i⁄
(&
I2cDevi˚
, 
bäSœve
, 0x400c, 
¥ŸocﬁRódSam∂e2
, 
cuºBuâ⁄
, 2);

126 *
buâ⁄s
 = 
cuºBuâ⁄
[1];

127  
°©us
;

128 
	}
}

132 *
	$POSIX_Inô
 (*
¨gs
)

134 
	`UNUSED
(
¨gs
);

135 
u32
 
°©us
, 
rc
;

136 
πems_°©us_code
 
sc
;

137 
u8
 
buâ⁄s
, 
¥evBuâ⁄s
=0;

138 
±hªad_©å_t
 
©å
;

139 
±hªad_t
 
thªad1
;

141 
°©us
 = 
	`öôClocksAndMem‹y
();

142 if(
°©us
){

143 
	`exô
(
°©us
);

146 
°©us
 = 
	`Le⁄IPCTxInô
(&
Ãt_LOStoLRTCh™√l
, 
mesßgePoﬁ
, 
MSG_QUEUE_SIZE
, 
MSG_SIZE
);

147 if(
°©us
Ë
	`exô
(status);

149 
	`DrvLe⁄RTSèπup
((
u32
)&
Ãt_°¨t
);

151 
	`DrvLe⁄RTWaôF‹BoŸ
();

152 
	`öôWM8325
();

155 
osDrvSdioE¡rõs_t
 
öfo
 = { 1,

156 
DEFAULT_SDIO_INT_PRIORITY
,

157 {{
SDIO_SLOT_USED
,

158 
SDIO_DEVNAME_USED
,

159 
SDIO_SDR50
,

160 
NULL
}}};

163 
	`¥ötf
("\nSdio driver initialising \n");

166 
°©us
 = 
	`OsDrvSdioInô
(&
öfo
);

167 if(
°©us
!
RTEMS_SUCCESSFUL
)

169 
	`¥ötf
("\nERROR: SDIO wasÇot succesfully initialised\n");

170 
	`¥ötf
("SD CardÇot found\n");

171 
	`exô
(
°©us
);

175 
	`¥ötf
("\nOsDrvSdioInô s¯%†\n", 
	`πems_°©us_ãxt
(
°©us
));

177 
sc
 = 
	`πems_bd∑π_ªgi°î_‰om_disk
(
SDIO_DEVNAME_USED
);

178 
	`¥ötf
("\ƒãms_bd∑π_ªgi°î_‰om_disk s¯%†\n", 
	`πems_°©us_ãxt
(
sc
));

181 
sc
 = 
	`πems_fsmou¡
–
fs_èbÀ
, (fs_èbÀ)/(fs_èbÀ[0]), 
NULL
);

182 
	`¥ötf
("\nMou¡ög FûêSy°em %†\n", 
	`πems_°©us_ãxt
(
sc
));

183 
sc
 = 
	`±hªad_©å_öô
(&
©å
);

184 i‡(
sc
)

186 
	`¥ötf
("pthread_attr_initÉrror");

187 
	`exô
(
sc
);

189 
sc
 = 
	`±hªad_©å_£töhîôsched
(&
©å
, 
PTHREAD_EXPLICIT_SCHED
);

190 i‡(
sc
)

192 
	`¥ötf
("pthread_attr_setinheritschedÉrror");

193 
	`exô
(
sc
);

195 
sc
 = 
	`±hªad_©å_£tschedpﬁicy
(&
©å
, 
SCHED_RR
);

196 i‡(
sc
)

198 
	`¥ötf
("pthread_attr_setschedpolicyÉrror");

199 
	`exô
(
sc
);

204 if(
	`ªadBuâ⁄
(&
buâ⁄s
))

206 
	`¥ötf
("I2C communication failed\n");

207 
	`exô
(1);

209 i‡((
buâ⁄s
 =1Ë&& (
¥evBuâ⁄s
 != buttons))

211 
	`¥ötf
("Buâ⁄Öªs£d 0x%08X\n",
buâ⁄s
);

212 
myMesßge
=0xB0050000 | 
buâ⁄s
;

213 
°©us
 = 
	`Le⁄IPCSídMesßge
(&
Ãt_LOStoLRTCh™√l
, &
myMesßge
);

214 if(
°©us
) {

215 
	`¥ötf
("IPC fail\n");

216 
	`DrvTimîSÀïMs
(200);

217 
	`exô
(
°©us
);

219 
rc
 = 
	`±hªad_¸óã
(&
thªad1
, &
©å
, &
makeJ≥gPi˘uª
, 
NULL
);

220 i‡(
rc
)

222 
	`¥ötf
("Thªad cª©i⁄ faûed: %lu\n", 
rc
);

223 
	`exô
(
rc
);

227 
	`¥ötf
("Thread created\n");

229 
sc
 = 
	`±hªad_joö
(
thªad1
, 
NULL
);

230 i‡(
sc
)

232 
	`¥ötf
("pthread_joinÉrror!");

233 
	`exô
(
sc
);

236 
¥evBuâ⁄s
=
buâ⁄s
;

240 
	}
}

242 
	$wrôeSdC¨d
(
u8
 *
buff
, 
u32
 
size
)

244 
fd
 = 0;

246 
πems_°©us_code
 
sc
;

247 
fûe
[100];

248 
u32
 
fûeNum
 = 0;

249 
·mp
[] = "/mnt/sdcard/warpCnt.tmp";

250 
txt
[10];

251 
fx
;

253 
	`¥ötf
("Checking forÇextávailable filename on SDCard\n");

255 
fx
 = 
	`›í
(
·mp
, 
O_RDWR
 | 
O_CREAT
, 
S_IRWXU
 | 
S_IRWXG
 | 
S_IRWXO
);

256 i‡(
	`ªad
(
fx
, 
txt
, 4) == 4)

258 
	`ssˇnf
(
txt
, "%04lu", &
fûeNum
);

259 
	`¥ötf
("Sˇ¬ed %lu \n", 
fûeNum
);

261 
	`l£ek
(
fx
, 0, 
SEEK_SET
);

262 
	`•rötf
(
txt
, "%04lu", 
fûeNum
 + 1);

263 
	`¥ötf
("Wrôã¿tÿfûê%lu \n", 
fûeNum
 + 1);

265 
sc
 = 
	`wrôe
(
fx
, 
txt
, 4);

266 
	`as£π
(
sc
);

267 
	`fsync
(
fx
);

268 
	`˛o£
(
fx
);

270 
fx
 = 
	`›í
(
·mp
, 
O_RDWR
 | 
O_CREAT
, 
S_IRWXU
 | 
S_IRWXG
 | 
S_IRWXO
);

271 i‡(
	`ªad
(
fx
, 
txt
, 4) == 4)

273 
	`ssˇnf
(
txt
, "%04lu", &
fûeNum
);

274 
	`¥ötf
("Sˇ¬ed %lu \n", 
fûeNum
);

276 
	`˛o£
(
fx
);

278 
	`•rötf
(
fûe
, "/m¡/sdˇrd/Cam208CvDyn_1920x1080_P422_%03lu.jpg", 
fûeNum
++);

280 
	`¥ötf
("\nCª©ög fûê%s\n", 
fûe
);

281 
fd
 = 
	`¸ót
(
fûe
, 
S_IRWXU
 | 
S_IRWXG
 | 
S_IRWXO
);

282 
	`as£π
(
fd
);

284 
	`¥ötf
("\nWrôög %lu byã†tÿfûe\n", 
size
);

285 
sc
 = 
	`wrôe
(
fd
, 
buff
, 
size
);

286 
	`as£π
(
sc
);

288 
	`¥ötf
("\nPerform fsync\n");

289 
sc
 = 
	`fsync
(
fd
);

290 i‡(
sc
 != 0)

291 
	`¥ötf
("fsyn¯Áûed,Ñë %d,Éº %s\n", 
sc
, 
	`°ªº‹
(
î∫o
));

293 
	`¥ötf
("\nClosing file\n\n");

294 
sc
 = 
	`˛o£
(
fd
);

295 i‡(
sc
 != 0)

296 
	`¥ötf
("˛o£ faûed,Ñë %d,Éº %s\n", 
sc
, 
	`°ªº‹
(
î∫o
));

297 
	}
}

299 *
	$makeJ≥gPi˘uª
()

301 
	`¥ötf
("Thread started\n");

304 
Ãt_pToSdˇrdBuf
 =
NULL
);

306 
	`wrôeSdC¨d
(
Ãt_pToSdˇrdBuf
->
buf
,Üπ_pToSdˇrdBuf->
size
);

307 
Ãt_pToSdˇrdBuf
 = 
NULL
;

309  
NULL
;

310 
	}
}

	@Demo/Cam208CvDynJpegHdmi/leon/rtems_config.h

9 #i‚de‡
_RTEMS_CONFIG_H_


10 
	#_RTEMS_CONFIG_H_


	)

12 
	~<πems.h
>

13 
	~<πems/b•Io.h
>

14 
	~"los_≠p_c⁄fig.h
"

15 
	~"ÁèlExãnsi⁄.h
"

17 #i‡
deföed
(
__RTEMS__
)

19 #i‡!
deföed
 (
__CONFIG__
)

20 
	#__CONFIG__


	)

23 
	#CONFIGURE_INIT


	)

25 #i‚de‡
RTEMS_POSIX_API


26 
	#RTEMS_POSIX_API


	)

29 
	#CONFIGURE_MICROSECONDS_PER_TICK
 1000

	)

31 
	#CONFIGURE_TICKS_PER_TIMESLICE
 50

	)

33 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

35 
	#CONFIGURE_APPLICATION_NEEDS_CLOCK_DRIVER


	)

37 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

39 
	#CONFIGURE_MINIMUM_TASK_STACK_SIZE
 (8192)

	)

41 
	#CONFIGURE_MAXIMUM_TASKS
 20

	)

43 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 5

	)

45 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 8

	)

47 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 8

	)

49 
	#CONFIGURE_MAXIMUM_POSIX_SEMAPHORES
 8

	)

51 
	#CONFIGURE_MAXIMUM_POSIX_MESSAGE_QUEUES
 8

	)

53 
	#CONFIGURE_MAXIMUM_POSIX_TIMERS
 4

	)

55 
	#CONFIGURE_MAXIMUM_TIMERS
 4

	)

57 
	#CONFIGURE_USE_IMFS_AS_BASE_FILESYSTEM


	)

59 
	#CONFIGURE_FILESYSTEM_DOSFS


	)

61 
	#CONFIGURE_MAXIMUM_DRIVERS
 10

	)

64 
	#CONFIGURE_MAXIMUM_SEMAPHORES
 
	`πems_ªsour˚_u∆imôed
(5)

	)

66 
	#CONFIGURE_LIBIO_MAXIMUM_FILE_DESCRIPTORS
 30

	)

68 
	#CONFIGURE_APPLICATION_NEEDS_LIBBLOCK


	)

70 
	#CONFIGURE_POSIX_INIT_TASKS_TABLE


	)

72 
	#CONFIGURE_BDBUF_MAX_READ_AHEAD_BLOCKS
 (16)

	)

74 
	#CONFIGURE_BDBUF_MAX_WRITE_BLOCKS
 (64)

	)

76 
	#CONFIGURE_BDBUF_BUFFER_MIN_SIZE
 (512)

	)

78 
	#CONFIGURE_BDBUF_BUFFER_MAX_SIZE
 (32 * 1024)

	)

80 
	#CONFIGURE_BDBUF_CACHE_MEMORY_SIZE
 (4 * 1024 * 1024)

	)

85 
	#CONFIGURE_MAXIMUM_USER_EXTENSIONS
 1

	)

86 
	#CONFIGURE_INITIAL_EXTENSIONS
 { .
Áèl
 = 
F©Æ_exãnsi⁄
 }

	)

88 *
POSIX_Inô
 (*
¨gs
);

90 
	~<πems/c⁄fdefs.h
>

97 
BSP_SET_CLOCK
(
SYS_CLK_KHZ
, 360000, 1, 1,
DEFAULT_CORE_CSS_DSS_CLOCKS
, 
APP_MSS_CLOCKS
, 
APP_UPA_CLOCKS
, 
APP_SIPP_CLOCKS
, 0x0);

100 
BSP_SET_L2C_CONFIG
(0, 
L2C_REPL_LRU
, 0, 
L2C_MODE_COPY_BACK
, 0, 
NULL
);

	@Demo/Cam208CvDynJpegHdmi/leon_rt/Cam208CvHdmiModel.c

13 
	~"Cam208CvHdmiModñ.h
"

15 
	~<ö˛ude/sùpHwDefs.h
>

16 
	~<fûãrs/sobñ/sobñ.h
>

17 
	~<fûãrs/îode3x3/îode3x3.h
>

18 
	~<fûãrs/dû©e3x3/dû©e3x3.h
>

19 
	~<¨ch/ma2x5x/ö˛ude/sùpHwDefs_ma2x5x.h
>

25 
	$ªadCam208CvHdmiModñI≈ut
(
Cam208CvHdmiModñ
 *
pPl
)

28 ()(
pPl
);

30 
	}
}

32 
	$wrôeCam208CvHdmiModñOuçut
(
Cam208CvHdmiModñ
 *
pPl
)

35 ()(
pPl
);

37 
	}
}

39 
	$buûdCam208CvHdmiModñ
(
Cam208CvHdmiModñ
 *
pPl
)

42 
pPl
->
∂
 = 
	`sùpCª©ePùñöe
(
NB_SHAVES_FOR_JPEGENC
, 10, 
	`SIPP_MBIN
(
mböImgSùp
));

45 
pPl
->
dmaIn0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x00, 1920, 1080, 
	`N_PL
(1), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

46 
pPl
->
sobñ0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x0, 1920, 1080, 
	`N_PL
(1), 
	`SZ
(
UI¡8
), 0, 
	`SVU_SYM
(
svuSobñ
), 0);

47 
pPl
->
îode3x30
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x0, 1920, 1080, 
	`N_PL
(1), 
	`SZ
(
UI¡8
), SZ(
Erode3x3P¨am
), 
	`SVU_SYM
(
svuErode3x3
), 0);

48 
pPl
->
dû©e3x30
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x0, 1920, 1080, 
	`N_PL
(1), 
	`SZ
(
UI¡8
), SZ(
Dû©e3x3P¨am
), 
	`SVU_SYM
(
svuDû©e3x3
), 0);

49 
pPl
->
lutMa2x5x0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x0, 1920, 1080, 
	`N_PL
(1), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_LUT_ID
, 0);

50 
pPl
->
dmaOut0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x00, 1920, 1080, 
	`N_PL
(1), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

53 
	`sùpLökFûãr
(
pPl
->
sobñ0
,ÖPl->
dmaIn0
, 3,3 );

54 
	`sùpLökFûãr
(
pPl
->
îode3x30
,ÖPl->
sobñ0
, 3,3 );

55 
	`sùpLökFûãr
(
pPl
->
dû©e3x30
,ÖPl->
îode3x30
, 3,3 );

56 
	`sùpLökFûãr
(
pPl
->
lutMa2x5x0
,ÖPl->
dû©e3x30
, 1,1 );

57 
	`sùpLökFûãr
(
pPl
->
dmaOut0
,ÖPl->
lutMa2x5x0
, 1,1 );

59 
	}
}

62 
	$c⁄figCam208CvHdmiModñ
(
Cam208CvHdmiModñ
 *
pPl
)

64 
DmaP¨am
 *
dmaIn0Cfg
 = (DmaP¨am *)
pPl
->
dmaIn0
->
∑øms
;

65 
Erode3x3P¨am
 *
îode3x30Cfg
 = (Erode3x3P¨am *)
pPl
->
îode3x30
->
∑øms
;

66 
Dû©e3x3P¨am
 *
dû©e3x30Cfg
 = (Dû©e3x3P¨am *)
pPl
->
dû©e3x30
->
∑øms
;

67 
LutP¨am
 *
lutMa2x5x0Cfg
 = (LutP¨am *)
pPl
->
lutMa2x5x0
->
∑øms
;

68 
DmaP¨am
 *
dmaOut0Cfg
 = (DmaP¨am *)
pPl
->
dmaOut0
->
∑øms
;

73 
îode3x30Cfg
->
eM©
[0]&
îodeM©
[0];

74 
îode3x30Cfg
->
eM©
[1]&
îodeM©
[3];

75 
îode3x30Cfg
->
eM©
[2]&
îodeM©
[6];

76 
dû©e3x30Cfg
->
dM©
[0]&
dû©eM©
[0];

77 
dû©e3x30Cfg
->
dM©
[1]&
dû©eM©
[3];

78 
dû©e3x30Cfg
->
dM©
[2]&
dû©eM©
[6];

79 
lutMa2x5x0Cfg
->
cfg
= (0 ) | (0 << 1) | (8 << 3) | (0 << 8);

80 
lutMa2x5x0Cfg
->
sizeA
= 0x44444444;

81 
lutMa2x5x0Cfg
->
sizeB
= 0x44444444;

82 
lutMa2x5x0Cfg
->
lut

lutTab
;

83 
lutMa2x5x0Cfg
->
lutF‹m©
=
LUT_LD_FORMAT
;

84 
lutMa2x5x0Cfg
->
m©
[0]= 0;

85 
lutMa2x5x0Cfg
->
m©
[1]= 0;

86 
lutMa2x5x0Cfg
->
m©
[2]= 0;

87 
lutMa2x5x0Cfg
->
m©
[3]= 0;

88 
lutMa2x5x0Cfg
->
m©
[4]= 0;

89 
lutMa2x5x0Cfg
->
m©
[5]= 0;

90 
lutMa2x5x0Cfg
->
m©
[6]= 0;

91 
lutMa2x5x0Cfg
->
m©
[7]= 0;

92 
lutMa2x5x0Cfg
->
m©
[8]= 0;

93 
lutMa2x5x0Cfg
->
off£t
[0]=0;

94 
lutMa2x5x0Cfg
->
off£t
[1]= 0;

95 
lutMa2x5x0Cfg
->
off£t
[2]= 0;

96 
dmaIn0Cfg
->
ddrAddr
 = (
UI¡32
)
iBuf
[0];

97 
dmaOut0Cfg
->
ddrAddr
 = (
UI¡32
)
oBuf
[0];

100 
	}
}

	@Demo/Cam208CvDynJpegHdmi/leon_rt/Cam208CvHdmiModel.h

13 #i‚de‡
__CAM208CVHDMIMODEL_H__


14 
	#__CAM208CVHDMIMODEL_H__


	)

16 
	~<sùp.h
>

17 
	~<sùpTe°Comm⁄.h
>

19 
	~"sùpModñP¨ams.h
"

22 
	#NB_SHAVES_FOR_JPEGENC
 5

	)

28 
	sCam208CvHdmiModñ


31 
SùpPùñöe
 *
	m∂
;

34 
SùpFûãr
 *
	mdmaIn0
;

35 
SùpFûãr
 *
	mîode3x30
;

36 
SùpFûãr
 *
	mdû©e3x30
;

37 
SùpFûãr
 *
	mdmaOut0
;

38 
SùpFûãr
 *
	msobñ0
;

39 
SùpFûãr
 *
	mlutMa2x5x0
;

41 } 
	tCam208CvHdmiModñ
;

43 
ªadCam208CvHdmiModñI≈ut
(
Cam208CvHdmiModñ
 *
pPl
);

44 
wrôeCam208CvHdmiModñOuçut
(
Cam208CvHdmiModñ
 *
pPl
);

46 
buûdCam208CvHdmiModñ
(
Cam208CvHdmiModñ
 *
pPl
);

47 
c⁄figCam208CvHdmiModñ
(
Cam208CvHdmiModñ
 *
pPl
);

	@Demo/Cam208CvDynJpegHdmi/leon_rt/lrt_app_config.c

13 
	~"Ãt_≠p_c⁄fig.h
"

14 
	~"DrvC¥.h
"

15 
	~"DrvTimî.h
"

19 
	#SYS_CLK_KHZ
 (12000)

20 

	)

31 
	$öôClocksAndMem‹y
()

33 
s32
 
sc
;

35 
sc
 = 
	`DrvC¥InôClocks
(
SYS_CLK_KHZ
, 0, 0, 0, 0);

36 if(
sc
)

37  
sc
;

40 
sc
 = 
	`DrvTimîInô
();

41 if(
sc
)

42  
sc
;

45 
	}
}

	@Demo/Cam208CvDynJpegHdmi/leon_rt/lrt_app_config.h

13 #i‚de‡
LRT_APP_CONFIG_H


14 
	#LRT_APP_CONFIG_H


	)

18 
	~"mv_ty≥s.h
"

30 
öôClocksAndMem‹y
();

	@Demo/Cam208CvDynJpegHdmi/leon_rt/main.c

11 
	~"Ãt_≠p_c⁄fig.h
"

12 
	~"as£π.h
"

13 #ifde‡
MV0212


14 
	~"MV0212.h
"

15 
	~"brdGpioCfgs/brdMv0182R5GpioDeÁu…s.h
"

16 #ñi‡
deföed
(
MV0182
)

17 
	~<Bﬂrd182Api.h
>

19 
	~"LcdApi.h
"

20 
	~<°dio.h
>

21 
	~<°rög.h
>

22 
	~<DrvLe⁄.h
>

23 
	~"Le⁄IPCApi.h
"

24 
	~"DrvCDCEL.h
"

25 
	~"DrvC¥.h
"

26 
	~"DrvGpio.h
"

27 
	~"DrvMss.h
"

28 
	~<DrvTimî.h
>

29 
	~"ªgi°îsMyrüd.h
"

30 
	~<sùp.h
>

31 
	~<sùpTe°Comm⁄.h
>

32 
	~"DrvADV7513.h
"

33 
	~"LcdCEA1080p60.h
"

34 
	~"CamGíîicApi.h
"

35 
	~"imx208_2L_1936x1096_Raw10C⁄vîãd8_60Hz.h
"

36 
	~"Cam208CvHdmiModñ.h
"

37 
	~"comm⁄Deföe.h
"

39 
	~"À⁄/J≥gEncodîApi.h
"

44 
	#MAX_USED_BUF
 3

	)

45 
	#FIRST_INCOMING_BUF_ID
 1

	)

46 
	#FIRST_OUTGOING_BUF_ID
 0

	)

48 
	#CAM_WINDOW_START_COLUMN
 (0)

	)

49 
	#CAM_WINDOW_START_ROW
 (8)

50 

	)

51 
	#CAM_WINDOW_WIDTH
 1920

	)

52 
	#CAM_WINDOW_HEIGHT
 1080

	)

54 
	#LCD_WINDOW_WIDTH
 
CAM_WINDOW_WIDTH


	)

55 
	#LCD_WINDOW_HEIGHT
 
CAM_WINDOW_HEIGHT


	)

56 
	#CAM_BPP
 1

57 
	#LCD_BPP
 1

58 

	)

59 
	#CAM_FRAME_SIZE_BYTES
 (
CAM_WINDOW_WIDTH
 * 
CAM_WINDOW_HEIGHT
 * 
CAM_BPP
)

60 
	#LCD_FRAME_SIZE_BYTES
 (
LCD_WINDOW_WIDTH
 * 
LCD_WINDOW_HEIGHT
 * 
LCD_BPP
)

61 

	)

62 
	#DDR_AREA
 
	`__©åibuã__
((
	`£˘i⁄
(".ddr.bss")))

	)

63 
	#DDR_UNCACHED
 
	`__©åibuã__
((
	`£˘i⁄
(".ddr_dúe˘.bss")))

	)

65 #ifde‡
MV0212


66 
	#NUM_I2C_DEVS
 3

	)

69 
	#BUFF_SIZE_SHAVE
 32*1024

	)

73 
I2CM_Devi˚
 * 
	gi2c0H™dÀ
;

74 
I2CM_Devi˚
 * 
	gi2c2H™dÀ
;

76 
À⁄IPCCh™√l_t
 
__©åibuã__
((
£˘i⁄
(".cmx_dúe˘.d©a"))Ë
	gLOStoLRTCh™√l
;

77 
uöt32_t
 
__©åibuã__
((
£˘i⁄
(".cmx_dúe˘.d©a"))Ë
	gª˚ived
;

79 
uöt32_t
 
__©åibuã__
((
£˘i⁄
(".cmx_dúe˘.d©a"))Ë
	gßveJ≥g
;

82 
uöt8_t
 
DDR_AREA
 
	gjpgbuff
[
LCD_WINDOW_WIDTH
 * 
LCD_WINDOW_HEIGHT
 * 2];

84 vﬁ©ûê
j≥gFømeBuf„r
 
DDR_UNCACHED
 *
	gpToSdˇrdBuf
;

88 
GíîicCamS≥c
 *
	gˇmC⁄fig
 = &
imx208_2L_1936x1096_RAW10CONV8_60Hz_ˇmCfg
;

90 vﬁ©ûê
	$ALIGNED
(4Ë
u32
 
√wCamFømeCå
 = 
FIRST_INCOMING_BUF_ID
;

91 vﬁ©ûê
	$ALIGNED
(4Ë
u32
 
lcdFømeCå
 = 
FIRST_OUTGOING_BUF_ID
;

92 vﬁ©ûê
	$ALIGNED
(4Ë
u32
 
lcdFømeC¡
 = 0;

94 
u8
 
DDR_AREA
 
	$ALIGNED
(8Ë
ˇmBuf
[
MAX_USED_BUF
][
CAM_FRAME_SIZE_BYTES
];

95 
u8
 
DDR_AREA
 
	$ALIGNED
(8Ë
lcdBuf
[
MAX_USED_BUF
][
LCD_FRAME_SIZE_BYTES
];

96 
u8
 
DDR_AREA
 
lcdDummyChroma
[
LCD_FRAME_SIZE_BYTES
];

98 
u8
 
DDR_AREA
 
toSdˇrdBuf
[
LCD_FRAME_SIZE_BYTES
];

100 
uöt32_t
 
iBuf
[2];

101 
uöt32_t
 
oBuf
[2];

103 
	#LAST_SVU
 6

	)

104 
	#SVU_MASK
 0x7F

105 
ADV7513C⁄tfigMode_t
 
ADV7513C⁄fig
 = 
ADV7513_1080P60
;

	)

107 
dbgLevñ
 = 1;

109 
GíîicCamîaH™dÀ
 
ˇmHndl
;

110 
CamU£rS≥c
 
u£rC⁄fig
;

111 
‰ameS≥c
 
ˇmFømeS≥c
;

112 
‰ameBuf„r
 
ˇmFøme
[
MAX_USED_BUF
];

114 
‰ameBuf„r
 
sdC¨dFøme
;

115 vﬁ©ûê
j≥gFømeBuf„r
 
DDR_UNCACHED
 
j≥g
;

118 
ˇŒbacksLi°Såu˘
 
ˇŒbacks
 = {0
	}
};

119 
öãºu±sCÆlbacksLi°Ty≥
 
	gi§CÆlbacks
 = {0};

122 
‰ameS≥c
 
	glcdFømeS≥c
;

123 
‰ameBuf„r
 
	glcdFøme
[
MAX_USED_BUF
];

125 
LCDH™dÀ
 
	glcdHndl
;

127 vﬁ©ûê
u32
 
	$ALIGNED
(4Ë
¥o˚ssögFømeCå
;

132 
‰ameBuf„r
* 
	`AŒoˇãNextCamFømeBuf
();

136 
	$¥ï¨eDrivîD©a
()

138 
ibuf
;

141 
u£rC⁄fig
.
mùiC⁄åﬁÀrNb
 = 
CAM_B1_MIPICTRL
;

142 
u£rC⁄fig
.
ª˚ivîId
 = 
SIPP_DEVICE1
;

143 #ifde‡
MV0212


144 
u£rC⁄fig
.
£ns‹Re£tPö
 = 
MV0212_MV0200_SENSOR_RIGHT_RST_GPIO
;

145 #ñi‡
	`deföed
(
MV0182
)

146 
u£rC⁄fig
.
£ns‹Re£tPö
 = 
MV0182_MV0200_SENSOR_RIGHT_RST_GPIO
;

148 
u£rC⁄fig
.
°îeoPaúIndex
 = 
CAM_B1_RIGHT_ADDR
;

150 
u£rC⁄fig
.
wödowCﬁumnSèπ
 = 
CAM_WINDOW_START_COLUMN
;

151 
u£rC⁄fig
.
wödowRowSèπ
 = 
CAM_WINDOW_START_ROW
;

152 
u£rC⁄fig
.
wödowWidth
 = 
CAM_WINDOW_WIDTH
;

153 
u£rC⁄fig
.
wödowHeight
 = 
CAM_WINDOW_HEIGHT
;

154 
u£rC⁄fig
.
gíî©eSync
 = 
NULL
;

157 
ˇmFømeS≥c
.
width
 = 
CAM_WINDOW_WIDTH
;

158 
ˇmFømeS≥c
.
height
 = 
CAM_WINDOW_HEIGHT
;

159 
ˇmFømeS≥c
.
byãsPP
 = 
CAM_BPP
;

160 
ˇmFømeS≥c
.
°ride
 = 
CAM_WINDOW_WIDTH
 * 
CAM_BPP
;

161 
ˇmFømeS≥c
.
ty≥
 = 
RAW16
;

164 
ibuf
 = 0; ibu‡< 
MAX_USED_BUF
;ibuf++)

166 
ˇmFøme
[
ibuf
].
p1
 = (*)
ˇmBuf
[ibuf];

167 
ˇmFøme
[
ibuf
].
p2
 = 
NULL
;

168 
ˇmFøme
[
ibuf
].
p3
 = 
NULL
;

169 
ˇmFøme
[
ibuf
].
•ec
 = 
ˇmFømeS≥c
;

172 
i§CÆlbacks
.
gëBlock
 = 
NULL
;

173 
i§CÆlbacks
.
gëFøme
 = 
AŒoˇãNextCamFømeBuf
;

174 
i§CÆlbacks
.
nŸifiˇti⁄
 = 
NULL
;

175 
ˇŒbacks
.
i§CbfLi°
 = &
i§CÆlbacks
;

176 
ˇŒbacks
.
£ns‹CbfLi°
 = 
NULL
;

180 
lcdFømeS≥c
.
width
 = 
LCD_WINDOW_WIDTH
;

181 
lcdFømeS≥c
.
height
 = 
LCD_WINDOW_HEIGHT
;

182 
lcdFømeS≥c
.
°ride
 = 
LCD_WINDOW_WIDTH
 * 
LCD_BPP
;

183 
lcdFømeS≥c
.
byãsPP
 = 
LCD_BPP
;

184 
lcdFømeS≥c
.
ty≥
 = 
YUV422p
;

186 
ibuf
 = 0; ibu‡< 
MAX_USED_BUF
; ibuf++)

188 
lcdFøme
[
ibuf
].
•ec
 = 
lcdFømeS≥c
;

189 
lcdFøme
[
ibuf
].
p1
 = &
lcdBuf
[ibuf][0];

190 
lcdFøme
[
ibuf
].
p2
 = &
lcdDummyChroma
[0];

191 
lcdFøme
[
ibuf
].
p3
 = &
lcdDummyChroma
[
LCD_WINDOW_WIDTH
 * 
LCD_WINDOW_HEIGHT
 / 2];

195 
	}
}

197 
‰ameBuf„r
* 
	$AŒoˇãNextCamFømeBuf
()

199 ++
√wCamFømeCå
;

200  ( &
ˇmFøme
[
√wCamFømeCå
 % 
MAX_USED_BUF
] );

201 
	}
}

203 
‰ameBuf„r
* 
	$ÆloˇãLcdFøme
(
œyî
)

205 (Ë
œyî
;

207 
lcdFømeC¡
++;

208  ( &
lcdFøme
[
lcdFømeCå
 % 
MAX_USED_BUF
] );

209 
	}
}

211 
	$c⁄figSùpModñAµ
(
Cam208CvHdmiModñ
 *
pPl
, 
UI¡32
 
öBuff
, UI¡32 
outBuff
)

213 
DmaP¨am
 *
dmaIn0Cfg
 = (DmaP¨am *)
pPl
->
dmaIn0
->
∑øms
;

214 
DmaP¨am
 *
dmaOut0Cfg
 = (DmaP¨am *)
pPl
->
dmaOut0
->
∑øms
;

219 
dmaIn0Cfg
->
ddrAddr
 = 
öBuff
;

220 
dmaOut0Cfg
->
ddrAddr
 = 
outBuff
;

221 
	}
}

223 
	$Re˚iveIPC
(
À⁄IPCCh™√l_t
 *
ch™√l
)

225 
uöt32_t
 
msgNo
, 
i
;

226 
s32
 
sc
;

227 
	`Le⁄IPCNumbîOfPídögMesßges
(
ch™√l
, &
msgNo
);

228 
i
 = 0; i < 
msgNo
; i++)

230 
sc
 = 
	`Le⁄IPCRódMesßge
(
ch™√l
, &
ª˚ived
);

231 i‡(
sc
 =
IPC_SUCCESS
)

233 
ª˚ived
)

236 
ßveJ≥g
=1;

241 
	`¥ötf
("Re˚ived 0x%8lX\n",
ª˚ived
);

247 
	`exô
(
sc
);

251 
	}
}

253 
	$maö
()

255 
Cam208CvHdmiModñ
 
sùp
;

256 
u32
 
°©us
;

257 
s32
 
bﬂrdSètus
;

258 
ˇmEº‹Ty≥
 
ˇmSètus
;

259 
LCDLayîOff£t
 
lcdLayîSèπOff£t
 = {0, 0};

260 
s32
 
sc
;

262 
pToSdˇrdBuf
 = 
NULL
;

264 
sc
 = 
	`öôClocksAndMem‹y
();

265 if(
sc
)

266  
sc
;

268 
	`DrvC¥SèπAŒClocks
();

270 
ßveJ≥g
=0;

271 
j≥g
.
buf
 = 
jpgbuff
;

272 
j≥g
.
size
 = (
jpgbuff
);

274 
°©us
 = 
	`Le⁄IPCRxInô
(&
LOStoLRTCh™√l
, &
Re˚iveIPC
, 
IRQ_DYNAMIC_5
, 5);

275 if(
°©us
)  status;

276 #ifde‡
MV0212


277 
öt32_t
 
rc
;

278 
uöt32_t
 
ªv
;

279 
BﬂrdI2CInfo
 
öfo
[
NUM_I2C_DEVS
];

280 
BﬂrdC⁄figDesc
 
c⁄fig
[] =

283 
BRDCONFIG_GPIO
,

285 (*)
brdMV0182R5GpioCfgDeÁu…


288 
BRDCONFIG_END
,

289 
NULL


293 
rc
 = 
	`BﬂrdInô
(
c⁄fig
);

294 i‡(
rc
!=
BRDCONFIG_SUCCESS
)

296 
	`¥ötf
("Error: board initialization failed with %ld status\n",

297 
rc
);

298  
rc
;

301 
rc
 = 
	`BﬂrdGëPCBRevisi⁄
(&
ªv
);

302 i‡(
rc
!=
BRDCONFIG_SUCCESS
)

304 
	`¥ötf
("Error: board configurationÑead failed with %ld status\n",

305 
rc
);

306  
rc
;

308 
	`¥ötf
("Bﬂrd Mv0212 inôülized,Ñevisi⁄ = %lu \n", 
ªv
);

310 
bﬂrdSètus
 = 
	`BﬂrdInôExtPŒ
(
EXT_PLL_CFG_148_24_24MHZ
);

311 i‡(
bﬂrdSètus
 !
BRDCONFIG_SUCCESS
)

313 
	`¥ötf
("Error: board initialization failed with %ld status\n",

314 
bﬂrdSètus
);

317 
rc
 = 
	`BﬂrdGëI2CInfo
(
öfo
, 
NUM_I2C_DEVS
);

318 
i2c0H™dÀ
=
öfo
[0].
h™dÀr
;

319 
i2c2H™dÀ
=
öfo
[2].
h™dÀr
;

320 #ñi‡
	`deföed
(
MV0182
)

321 
bﬂrdSètus
 = 
	`BﬂrdInôüli£
(
EXT_PLL_CFG_148_24_24MHZ
);

322 
i2c0H™dÀ
=
gAµDevHndls
.i2c0Handle;

323 
i2c2H™dÀ
=
gAµDevHndls
.i2c2Handle;

324 i‡(
bﬂrdSètus
 !
B_SUCCESS
)

326 
	`¥ötf
("Error: board initialization failed with %ld status\n",

327 
bﬂrdSètus
);

331 
	`swcLe⁄SëPIL
(0);

333 
	`¥ï¨eDrivîD©a
();

334 
	`mem£t
(
lcdDummyChroma
, 0x80, (lcdDummyChroma));

336 
	`¥ötf
("Initializing SIPPÖipe\n");

337 
	`sùpInôülize
();

339 
	`buûdCam208CvHdmiModñ
(&
sùp
);

340 
iBuf
[0] = (
UI¡32
)&
ˇmBuf
[0];

341 
oBuf
[0] = (
UI¡32
)&
lcdBuf
[0];

342 
	`c⁄figCam208CvHdmiModñ
(&
sùp
);

344 
	`sùpFöÆizePùñöe
(
sùp
.
∂
);

347 
	`DrvMssC⁄√˘LcdToGpio
();

349 
	`¥ötf
("Configuring cameraánd datapath\n");

350 
ˇmSètus
 = 
	`CamInô
(&
ˇmHndl
, 
ˇmC⁄fig
, &
u£rC⁄fig
, &
ˇŒbacks
, 
i2c0H™dÀ
);

352 i‡(
ˇmSètus
 !
CAM_SUCCESS
)

354 
	`¥ötf
("\¿Camî®c⁄figuøti⁄ faûed (%d).\n", 
ˇmSètus
);

358 
	`¥ötf
(" Starting camera ...\n");

359 
ˇmSètus
 = 
	`CamSèπ
(&
ˇmHndl
);

361 i‡(
ˇmSètus
 !
CAM_SUCCESS
)

363 
	`¥ötf
("\¿Camî®ÁûedÅÿ°¨à(%d).\n", 
ˇmSètus
);

367 
	`¥ötf
("Configuring HDMI chip ADV7513...\n\n");

368 
°©us
 = 
	`öôADV7513ªg
(
i2c2H™dÀ
, 
ADV7513C⁄fig
);

370 i‡(
°©us
 == 0)

371 
	`¥ötf
("ADV7513 Configured\n");

373 
	`¥ötf
("ADV7513 C⁄figuøti⁄ faûed %lu \n", 
°©us
);

377 
	`LCDInô
(&
lcdHndl
, &
lcdS≥c1080p60
, 
NULL
, 
LCD1
);

378 
	`LCDInôLayî
(&
lcdHndl
, 
VL1
, &
lcdFømeS≥c
, 
lcdLayîSèπOff£t
);

379 
	`LCDSëupCÆlbacks
(&
lcdHndl
, &
ÆloˇãLcdFøme
, 
NULL
, NULL, NULL);

381 
	`¥ötf
("Starting LCD...\n");

382 
	`LCDSèπ
(&
lcdHndl
);

384 
¥o˚ssögFømeCå
 = 
√wCamFømeCå
;

385 
	`¥ötf
("Loop ...\n");

386 
	`DrvLe⁄RTSig«lBoŸCom∂ëed
();

390 i‡(
√wCamFømeCå
 !
¥o˚ssögFømeCå
) {

392 
¥o˚ssögFømeCå
 = 
√wCamFømeCå
;

393 
	`c⁄figSùpModñAµ
(&
sùp
, (
UI¡32
)&
ˇmBuf
[(
¥o˚ssögFømeCå
 -2Ë% 
MAX_USED_BUF
], (UI¡32)&
lcdBuf
[(
lcdFømeCå
 + 1) % MAX_USED_BUF]);

394 
	`sùpPro˚ssFøme
(
sùp
.
∂
);

395 
lcdFømeCå
++;

397 i‡((
ßveJ≥g
Ë&& (
pToSdˇrdBuf
==
NULL
)) {

399 
i
=0;i<12;i++){

400 
	`swcWaôShave
(
i
);

403 
	`sùpSt›Svus
(
sùp
.
∂
);

405 
	`mem˝y
(
toSdˇrdBuf
,
lcdFøme
[(
lcdFømeCå
 + 1Ë% 
MAX_USED_BUF
].
p1
,
LCD_FRAME_SIZE_BYTES
);

406 
sdC¨dFøme
.
p1
=
toSdˇrdBuf
;

407 
sdC¨dFøme
.
p2
=
lcdDummyChroma
;

408 
sdC¨dFøme
.
p3
=
lcdDummyChroma
;

409 
sdC¨dFøme
.
•ec
=
lcdFømeS≥c
;

411 
ßveJ≥g
=0;

412 
	`¥ötf
("StartÉncoding JPEG\n");

413 
	`JPEG_ícode
(
sdC¨dFøme
, 
jpgbuff
, 
NB_SHAVES_FOR_JPEGENC
, 
BUFF_SIZE_SHAVE
, 
JPEG_422_PLANAR
);

414 
	`¥ötf
("EndedÉncoding JPEG\n");

416 
	`¥ötf
("Triggering sdCard writing on LeonOS\n");

417 
pToSdˇrdBuf
 = &
j≥g
;

419 
	`sùpRescheduÀPùñöe
(
sùp
.
∂
);

424 
	}
}

	@Demo/Cam208CvDynJpegHdmi/leon_rt/sippModelParams.c

6 
	~<sùp.h
>

7 
	~<sùpTe°Comm⁄.h
>

9 
	~<°döt.h
>

10 
	~"sùpPœtf‹m.h
"

12 
I¡8
 
	gc€fX
[6] = { -1, 1, -2, 2, -1, 1 };

13 
I¡8
 
	gc€fY
[6] = { -1, -2, -1, 1, 2, 1 };

16 
UI¡8
 
	gîodeM©
[3*3] =

23 
UI¡8
 
	gdû©eM©
[3*3] =

31 
UI¡16
 
	glutTab
[256] 
ALIGNED
(8) =

	@Demo/Cam208CvDynJpegHdmi/leon_rt/sippModelParams.h

7 #i‚de‡
LEON_RT_SIPPMODELPARAMS_H_


8 
	#LEON_RT_SIPPMODELPARAMS_H_


	)

9 
	~<°döt.h
>

10 
	~"sùpPœtf‹m.h
"

12 
I¡8
 
c€fX
[6];

13 
I¡8
 
c€fY
[6];

16 
UI¡8
 
îodeM©
[3*3];

18 
UI¡8
 
dû©eM©
[3*3];

22 
UI¡16
 
lutTab
[256];

23 
uöt32_t
 
iBuf
[2];

24 
uöt32_t
 
oBuf
[2];

27 
	#SIPP_FORMAT_8BIT
 0x1

	)

28 
	#SIPP_FORMAT_16BIT
 0x2

	)

29 
	#SIPP_FORMAT_32BIT
 0x4

	)

30 
	#SIPP_FORMAT_PACK10
 0x5

	)

31 
	#SIPP_FORMAT_PACK12
 0x3

	)

33 
	#LUT_IN_FORMAT
 
SIPP_FORMAT_16BIT


	)

34 
	#LUT_LD_FORMAT
 
SIPP_FORMAT_16BIT


	)

35 
	#LUT_OUT_FORMAT
 
SIPP_FORMAT_8BIT


	)

	@Demo/Cam208CvDynJpegHdmi/shared/commonDefine.h

11 
	~<mv_ty≥s.h
>

15 
u32
 
	msize
;

16 
u8
 *
	mbuf
;

17 }
	tj≥gFømeBuf„r
;

	@Demo/Cam208CvHdmi/arch/ma2x5x/leon/los_app_config_2150.c

13 
	~"los_≠p_c⁄fig.h
"

14 
	~"DrvC¥.h
"

27 
	$blocksRe£tSûic⁄S≥cific
()

29 
	`DrvC¥SysDevi˚A˘i⁄
(
SIPP_DOMAIN
, 
ASSERT_RESET
, 
DEV_SIPP_MIPI
);

30 
	`DrvC¥SysDevi˚A˘i⁄
(
UPA_DOMAIN
, 
ASSERT_RESET
, 
APP_UPA_CLOCKS
);

31 
	`DrvC¥SysDevi˚A˘i⁄
(
MSS_DOMAIN
, 
DEASSERT_RESET
, -1);

32 
	`DrvC¥SysDevi˚A˘i⁄
(
CSS_DOMAIN
, 
DEASSERT_RESET
, -1);

33 
	`DrvC¥SysDevi˚A˘i⁄
(
SIPP_DOMAIN
, 
DEASSERT_RESET
, -1);

34 
	`DrvC¥SysDevi˚A˘i⁄
(
UPA_DOMAIN
, 
DEASSERT_RESET
, -1);

35 
	}
}

	@Demo/Cam208CvHdmi/arch/ma2x5x/leon/los_app_config_2150.h

13 #i‚de‡
LOS_APP_CONFIG_2150_H


14 
	#LOS_APP_CONFIG_2150_H


	)

18 
	~"mv_ty≥s.h
"

19 
	~"DrvC¥Deföes.h
"

23 
	#APP_MSS_CLOCKS
 (
DEV_MSS_APB_SLV
 | \

24 
DEV_MSS_APB2_CTRL
 | \

25 
DEV_MSS_RTBRIDGE
 | \

26 
DEV_MSS_RTAHB_CTRL
 | \

27 
DEV_MSS_LRT
 | \

28 
DEV_MSS_LRT_DSU
 | \

29 
DEV_MSS_LRT_L2C
 | \

30 
DEV_MSS_LRT_ICB
 | \

31 
DEV_MSS_AXI_BRIDGE
 | \

32 
DEV_MSS_MXI_CTRL
 | \

33 
DEV_MSS_MXI_DEFSLV
 | \

34 
DEV_MSS_AXI_MON
 | \

35 
DEV_MSS_MIPI
 | \

36 
DEV_MSS_LCD
 | \

37 
DEV_MSS_AMC
 | \

38 
DEV_MSS_SIPP
 | \

39 
DEV_MSS_TIM
 )

	)

41 
	#APP_SIPP_CLOCKS
 ( 
DEV_SIPP_SIPP_ABPSLV
 | \

42 
DEV_SIPP_APB_SLV
 | \

43 
DEV_SIPP_MIPI
 | \

44 
DEV_SIPP_LUT
 | \

45 
DEV_SIPP_MIPI_RX1
 )

	)

	@Demo/Cam208CvHdmi/leon/los_app_config.c

13 
	~"DrvDdr.h
"

14 
	~"as£π.h
"

15 
	~"DrvShaveL2Cache.h
"

16 
	~"OsDrvTimî.h
"

17 
	~"OsDrvC¥.h
"

18 
	~"los_≠p_c⁄fig.h
"

19 
	~<°dio.h
>

23 
	#L2CACHE_CFG
 (
SHAVE_L2CACHE_NORMAL_MODE
)

	)

24 
	#PARTITION_0
 (0)

	)

25 
	#SHAVES_USED
 (12)

	)

34 
tyAuxClkDividîCfg
 
	gauxClk
[] =

37 .
auxClockE«bÀMask
 = 
AUX_CLK_MASK_MEDIA
,

38 .
	gauxClockSour˚
 = 
CLK_SRC_SYS_CLK_DIV2
 ,

39 .
	gauxClockDivNumî©‹
 = 1,

40 .
	gauxClockDivDíomö©‹
 = 1,

43 .
	gauxClockE«bÀMask
 = 
CLOCKS_MIPICFG
,

44 .
	gauxClockSour˚
 = 
CLK_SRC_SYS_CLK
 ,

45 .
	gauxClockDivNumî©‹
 = 1,

46 .
	gauxClockDivDíomö©‹
 = 18,

58 
	$öôClocksAndMem‹y
()

60 
i
;

61 
s32
 
sc
;

64 
sc
 = 
	`OsDrvC¥Inô
();

65 if(
sc
)

66  
sc
;

67 
sc
 = 
	`OsDrvC¥O≥n
();

68 if(
sc
)

69  
sc
;

70 
sc
 = 
	`OsDrvC¥AuxClockAºayC⁄fig
(
auxClk
);

71 if(
sc
)

72  
sc
;

74 
	`blocksRe£tSûic⁄S≥cific
();

76 
sc
 = 
	`OsDrvTimîInô
();

77 if(
sc
)

78  
sc
;

79 
	`DrvDdrInôüli£
(
NULL
);

82 
sc
 = 
	`DrvShaveL2CacheSëMode
(
L2CACHE_CFG
);

83 if(
sc
)

84  
sc
;

87 
	`DrvShaveL2CacheSëupP¨tôi⁄
(
SHAVEPART256KB
);

90 
sc
 = 
	`DrvShaveL2CacheAŒoˇãSëP¨tôi⁄s
();

91 if(
sc
)

92  
sc
;

95 
i
 = 0; i < 
SHAVES_USED
; i++)

97 
	`DrvShaveL2CacheSëLSUP¨tId
(
i
, 
PARTITION_0
);

100 
	`DrvShaveL2CacheP¨tôi⁄FlushAndInvÆid©e
(
PARTITION_0
);

103 
	}
}

	@Demo/Cam208CvHdmi/leon/los_app_config.h

13 #i‚de‡
LOS_APP_CONFIG_H


14 
	#LOS_APP_CONFIG_H


	)

18 
	~"mv_ty≥s.h
"

21 #i‡
deföed
(
MA2150
Ë|| deföed(
MA2155
Ë|| deföed(
MA2450
Ë|| deföed(
MA2455
)

22 
	~"los_≠p_c⁄fig_2150.h
"

28 
	#SYS_CLK_KHZ
 12000

29 

	)

31 
	#CLOCKS_MIPICFG
 (
AUX_CLK_MASK_MIPI_ECFG
 | 
AUX_CLK_MASK_MIPI_CFG
)

	)

33 
	#APP_UPA_CLOCKS
 (
DEV_UPA_SH0
 | \

34 
DEV_UPA_SH1
 | \

35 
DEV_UPA_SH2
 | \

36 
DEV_UPA_SH3
 | \

37 
DEV_UPA_SH4
 | \

38 
DEV_UPA_SH5
 | \

39 
DEV_UPA_SH6
 | \

40 
DEV_UPA_SHAVE_L2
 | \

41 
DEV_UPA_CDMA
 | \

42 
DEV_UPA_CTRL
 )

	)

52 
öôClocksAndMem‹y
();

53 
blocksRe£tSûic⁄S≥cific
();

	@Demo/Cam208CvHdmi/leon/main.c

13 
	~<DrvLe⁄.h
>

14 
	~<DrvC¥.h
>

15 
	~<DrvTimî.h
>

16 
	~<DrvDdr.h
>

17 
	~<swcLe⁄Utûs.h
>

18 
	~<°dlib.h
>

19 
	~<°dio.h
>

20 
	~<°rög.h
>

21 
	~<b•.h
>

22 
	~"πems_c⁄fig.h
"

30 
u32
 *
Ãt_°¨t
;

39 *
	$POSIX_Inô
 (*
¨gs
)

41 
	`UNUSED
(
¨gs
);

43 
s32
 
sc
;

45 
sc
 = 
	`öôClocksAndMem‹y
();

46 if(
sc
){

47 
	`exô
(
sc
);

49 
	`DrvLe⁄RTSèπup
((
u32
)&
Ãt_°¨t
);

50 
	`DrvLe⁄RTWaôExecuti⁄
();

52 
	`exô
(0);

53 
	}
}

	@Demo/Cam208CvHdmi/leon/rtems_config.h

9 #i‚de‡
_RTEMS_CONFIG_H_


10 
	#_RTEMS_CONFIG_H_


	)

12 
	~<πems.h
>

13 
	~<πems/b•Io.h
>

14 
	~"los_≠p_c⁄fig.h
"

15 
	~"ÁèlExãnsi⁄.h
"

17 #i‡
deföed
(
__RTEMS__
)

19 #i‡!
deföed
 (
__CONFIG__
)

20 
	#__CONFIG__


	)

23 
	#CONFIGURE_INIT


	)

25 #i‚de‡
RTEMS_POSIX_API


26 
	#RTEMS_POSIX_API


	)

29 
	#CONFIGURE_MICROSECONDS_PER_TICK
 1000

	)

31 
	#CONFIGURE_TICKS_PER_TIMESLICE
 10

	)

33 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

35 
	#CONFIGURE_APPLICATION_NEEDS_CLOCK_DRIVER


	)

37 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

39 
	#CONFIGURE_MINIMUM_TASK_STACK_SIZE
 4096

	)

41 
	#CONFIGURE_MAXIMUM_TASKS
 4

	)

43 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 4

	)

45 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 8

	)

47 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 8

	)

49 
	#CONFIGURE_MAXIMUM_POSIX_SEMAPHORES
 8

	)

51 
	#CONFIGURE_MAXIMUM_SEMAPHORES
 4

	)

53 
	#CONFIGURE_MAXIMUM_POSIX_MESSAGE_QUEUES
 8

	)

55 
	#CONFIGURE_MAXIMUM_POSIX_TIMERS
 4

	)

57 
	#CONFIGURE_MAXIMUM_TIMERS
 4

	)

61 
	#CONFIGURE_MAXIMUM_USER_EXTENSIONS
 1

	)

62 
	#CONFIGURE_INITIAL_EXTENSIONS
 { .
Áèl
 = 
F©Æ_exãnsi⁄
 }

	)

64 *
POSIX_Inô
 (*
¨gs
);

66 
	~<πems/c⁄fdefs.h
>

71 
BSP_SET_CLOCK
(12000, 360000, 1, 1,
DEFAULT_CORE_CSS_DSS_CLOCKS
, 
APP_MSS_CLOCKS
, 
APP_UPA_CLOCKS
, 
APP_SIPP_CLOCKS
, 0x0);

74 
BSP_SET_L2C_CONFIG
(0, 
L2C_REPL_LRU
, 0, 
L2C_MODE_COPY_BACK
, 0, 
NULL
);

	@Demo/Cam208CvHdmi/leon_rt/Cam208CvHdmiModel.c

13 
	~"Cam208CvHdmiModñ.h
"

15 
	~<ö˛ude/sùpHwDefs.h
>

16 
	~<fûãrs/sobñ/sobñ.h
>

17 
	~<fûãrs/îode3x3/îode3x3.h
>

18 
	~<fûãrs/dû©e3x3/dû©e3x3.h
>

19 
	~<¨ch/ma2x5x/ö˛ude/sùpHwDefs_ma2x5x.h
>

25 
	$ªadCam208CvHdmiModñI≈ut
(
Cam208CvHdmiModñ
 *
pPl
)

28 ()(
pPl
);

30 
	}
}

32 
	$wrôeCam208CvHdmiModñOuçut
(
Cam208CvHdmiModñ
 *
pPl
)

35 ()(
pPl
);

37 
	}
}

39 
	$buûdCam208CvHdmiModñ
(
Cam208CvHdmiModñ
 *
pPl
)

42 
pPl
->
∂
 = 
	`sùpCª©ePùñöe
(0, 6, 
	`SIPP_MBIN
(
mböImgSùp
));

45 
pPl
->
dmaIn0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x00, 1920, 1080, 
	`N_PL
(1), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

46 
pPl
->
sobñ0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x0, 1920, 1080, 
	`N_PL
(1), 
	`SZ
(
UI¡8
), 0, 
	`SVU_SYM
(
svuSobñ
), 0);

47 
pPl
->
îode3x30
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x0, 1920, 1080, 
	`N_PL
(1), 
	`SZ
(
UI¡8
), SZ(
Erode3x3P¨am
), 
	`SVU_SYM
(
svuErode3x3
), 0);

48 
pPl
->
dû©e3x30
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x0, 1920, 1080, 
	`N_PL
(1), 
	`SZ
(
UI¡8
), SZ(
Dû©e3x3P¨am
), 
	`SVU_SYM
(
svuDû©e3x3
), 0);

49 
pPl
->
lutMa2x5x0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x0, 1920, 1080, 
	`N_PL
(1), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_LUT_ID
, 0);

50 
pPl
->
dmaOut0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x00, 1920, 1080, 
	`N_PL
(1), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

53 
	`sùpLökFûãr
(
pPl
->
sobñ0
,ÖPl->
dmaIn0
, 3,3 );

54 
	`sùpLökFûãr
(
pPl
->
îode3x30
,ÖPl->
sobñ0
, 3,3 );

55 
	`sùpLökFûãr
(
pPl
->
dû©e3x30
,ÖPl->
îode3x30
, 3,3 );

56 
	`sùpLökFûãr
(
pPl
->
lutMa2x5x0
,ÖPl->
dû©e3x30
, 1,1 );

57 
	`sùpLökFûãr
(
pPl
->
dmaOut0
,ÖPl->
lutMa2x5x0
, 1,1 );

59 
	}
}

62 
	$c⁄figCam208CvHdmiModñ
(
Cam208CvHdmiModñ
 *
pPl
)

64 
DmaP¨am
 *
dmaIn0Cfg
 = (DmaP¨am *)
pPl
->
dmaIn0
->
∑øms
;

65 
Erode3x3P¨am
 *
îode3x30Cfg
 = (Erode3x3P¨am *)
pPl
->
îode3x30
->
∑øms
;

66 
Dû©e3x3P¨am
 *
dû©e3x30Cfg
 = (Dû©e3x3P¨am *)
pPl
->
dû©e3x30
->
∑øms
;

67 
LutP¨am
 *
lutMa2x5x0Cfg
 = (LutP¨am *)
pPl
->
lutMa2x5x0
->
∑øms
;

68 
DmaP¨am
 *
dmaOut0Cfg
 = (DmaP¨am *)
pPl
->
dmaOut0
->
∑øms
;

73 
îode3x30Cfg
->
eM©
[0]&
îodeM©
[0];

74 
îode3x30Cfg
->
eM©
[1]&
îodeM©
[3];

75 
îode3x30Cfg
->
eM©
[2]&
îodeM©
[6];

76 
dû©e3x30Cfg
->
dM©
[0]&
dû©eM©
[0];

77 
dû©e3x30Cfg
->
dM©
[1]&
dû©eM©
[3];

78 
dû©e3x30Cfg
->
dM©
[2]&
dû©eM©
[6];

79 
lutMa2x5x0Cfg
->
cfg
= (0 ) | (0 << 1) | (8 << 3) | (0 << 8);

80 
lutMa2x5x0Cfg
->
sizeA
= 0x44444444;

81 
lutMa2x5x0Cfg
->
sizeB
= 0x44444444;

82 
lutMa2x5x0Cfg
->
lut

lutTab
;

83 
lutMa2x5x0Cfg
->
lutF‹m©
=
LUT_LD_FORMAT
;

84 
lutMa2x5x0Cfg
->
m©
[0]= 0;

85 
lutMa2x5x0Cfg
->
m©
[1]= 0;

86 
lutMa2x5x0Cfg
->
m©
[2]= 0;

87 
lutMa2x5x0Cfg
->
m©
[3]= 0;

88 
lutMa2x5x0Cfg
->
m©
[4]= 0;

89 
lutMa2x5x0Cfg
->
m©
[5]= 0;

90 
lutMa2x5x0Cfg
->
m©
[6]= 0;

91 
lutMa2x5x0Cfg
->
m©
[7]= 0;

92 
lutMa2x5x0Cfg
->
m©
[8]= 0;

93 
lutMa2x5x0Cfg
->
off£t
[0]=0;

94 
lutMa2x5x0Cfg
->
off£t
[1]= 0;

95 
lutMa2x5x0Cfg
->
off£t
[2]= 0;

96 
dmaIn0Cfg
->
ddrAddr
 = (
UI¡32
)
iBuf
[0];

97 
dmaOut0Cfg
->
ddrAddr
 = (
UI¡32
)
oBuf
[0];

100 
	}
}

	@Demo/Cam208CvHdmi/leon_rt/Cam208CvHdmiModel.h

13 #i‚de‡
__CAM208CVHDMIMODEL_H__


14 
	#__CAM208CVHDMIMODEL_H__


	)

16 
	~<sùp.h
>

17 
	~<sùpTe°Comm⁄.h
>

19 
	~"sùpModñP¨ams.h
"

26 
	sCam208CvHdmiModñ


29 
SùpPùñöe
 *
	m∂
;

32 
SùpFûãr
 *
	mdmaIn0
;

33 
SùpFûãr
 *
	mîode3x30
;

34 
SùpFûãr
 *
	mdû©e3x30
;

35 
SùpFûãr
 *
	mdmaOut0
;

36 
SùpFûãr
 *
	msobñ0
;

37 
SùpFûãr
 *
	mlutMa2x5x0
;

39 } 
	tCam208CvHdmiModñ
;

41 
ªadCam208CvHdmiModñI≈ut
(
Cam208CvHdmiModñ
 *
pPl
);

42 
wrôeCam208CvHdmiModñOuçut
(
Cam208CvHdmiModñ
 *
pPl
);

44 
buûdCam208CvHdmiModñ
(
Cam208CvHdmiModñ
 *
pPl
);

45 
c⁄figCam208CvHdmiModñ
(
Cam208CvHdmiModñ
 *
pPl
);

	@Demo/Cam208CvHdmi/leon_rt/lrt_app_config.c

13 
	~"Ãt_≠p_c⁄fig.h
"

14 
	~"DrvC¥.h
"

15 
	~"DrvTimî.h
"

19 
	#SYS_CLK_KHZ
 (12000)

20 

	)

31 
	$öôClocksAndMem‹y
()

33 
s32
 
sc
;

35 
sc
 = 
	`DrvC¥InôClocks
(
SYS_CLK_KHZ
, 0, 0, 0, 0);

36 if(
sc
)

37  
sc
;

40 
sc
 = 
	`DrvTimîInô
();

41 if(
sc
)

42  
sc
;

45 
	}
}

	@Demo/Cam208CvHdmi/leon_rt/lrt_app_config.h

13 #i‚de‡
LRT_APP_CONFIG_H


14 
	#LRT_APP_CONFIG_H


	)

18 
	~"mv_ty≥s.h
"

30 
öôClocksAndMem‹y
();

	@Demo/Cam208CvHdmi/leon_rt/main.c

11 
	~"Ãt_≠p_c⁄fig.h
"

12 
	~"as£π.h
"

13 #ifde‡
MV0212


14 
	~"MV0212.h
"

15 
	~"brdGpioCfgs/brdMv0182R5GpioDeÁu…s.h
"

16 #ñi‡
deföed
(
MV0182
)

17 
	~<Bﬂrd182Api.h
>

19 
	~"LcdApi.h
"

20 
	~<°dio.h
>

21 
	~<°rög.h
>

22 
	~"DrvCDCEL.h
"

23 
	~"DrvC¥.h
"

24 
	~"DrvGpio.h
"

25 
	~"DrvMss.h
"

26 
	~"ªgi°îsMyrüd.h
"

27 
	~<sùp.h
>

28 
	~<sùpTe°Comm⁄.h
>

29 
	~"DrvADV7513.h
"

30 
	~"LcdCEA1080p60.h
"

31 
	~"CamGíîicApi.h
"

32 
	~"imx208_2L_1936x1096_Raw10C⁄vîãd8_60Hz.h
"

33 
	~"Cam208CvHdmiModñ.h
"

37 
	#MAX_USED_BUF
 3

	)

38 
	#FIRST_INCOMING_BUF_ID
 1

	)

39 
	#FIRST_OUTGOING_BUF_ID
 0

	)

41 
	#CAM_WINDOW_START_COLUMN
 (0)

	)

42 
	#CAM_WINDOW_START_ROW
 (8)

43 

	)

44 
	#CAM_WINDOW_WIDTH
 1920

	)

45 
	#CAM_WINDOW_HEIGHT
 1080

	)

47 
	#LCD_WINDOW_WIDTH
 
CAM_WINDOW_WIDTH


	)

48 
	#LCD_WINDOW_HEIGHT
 
CAM_WINDOW_HEIGHT


	)

49 
	#CAM_BPP
 1

50 
	#LCD_BPP
 1

51 

	)

52 
	#CAM_FRAME_SIZE_BYTES
 (
CAM_WINDOW_WIDTH
 * 
CAM_WINDOW_HEIGHT
 * 
CAM_BPP
)

53 
	#LCD_FRAME_SIZE_BYTES
 (
LCD_WINDOW_WIDTH
 * 
LCD_WINDOW_HEIGHT
 * 
LCD_BPP
)

54 

	)

55 
	#DDR_AREA
 
	`__©åibuã__
((
	`£˘i⁄
(".ddr.bss")))

	)

57 #ifde‡
MV0212


58 
	#NUM_I2C_DEVS
 3

	)

62 
I2CM_Devi˚
 * 
	gi2c0H™dÀ
;

63 
I2CM_Devi˚
 * 
	gi2c2H™dÀ
;

68 
GíîicCamS≥c
 *
	gˇmC⁄fig
 = &
imx208_2L_1936x1096_RAW10CONV8_60Hz_ˇmCfg
;

70 vﬁ©ûê
	$ALIGNED
(4Ë
u32
 
√wCamFømeCå
 = 
FIRST_INCOMING_BUF_ID
;

71 vﬁ©ûê
	$ALIGNED
(4Ë
u32
 
lcdFømeCå
 = 
FIRST_OUTGOING_BUF_ID
;

72 vﬁ©ûê
	$ALIGNED
(4Ë
u32
 
lcdFømeC¡
 = 0;

74 
u8
 
DDR_AREA
 
	$ALIGNED
(8Ë
ˇmBuf
[
MAX_USED_BUF
][
CAM_FRAME_SIZE_BYTES
];

75 
u8
 
DDR_AREA
 
	$ALIGNED
(8Ë
lcdBuf
[
MAX_USED_BUF
][
LCD_FRAME_SIZE_BYTES
];

76 
u8
 
DDR_AREA
 
lcdDummyChroma
[
LCD_FRAME_SIZE_BYTES
];

78 
uöt32_t
 
iBuf
[2];

79 
uöt32_t
 
oBuf
[2];

81 
	#LAST_SVU
 6

	)

82 
	#SVU_MASK
 0x7F

83 
ADV7513C⁄tfigMode_t
 
ADV7513C⁄fig
 = 
ADV7513_1080P60
;

	)

85 
dbgLevñ
 = 1;

87 
GíîicCamîaH™dÀ
 
ˇmHndl
;

88 
CamU£rS≥c
 
u£rC⁄fig
;

89 
‰ameS≥c
 
ˇmFømeS≥c
;

90 
‰ameBuf„r
 
ˇmFøme
[
MAX_USED_BUF
];

92 
ˇŒbacksLi°Såu˘
 
ˇŒbacks
 = {0
	}
};

93 
öãºu±sCÆlbacksLi°Ty≥
 
	gi§CÆlbacks
 = {0};

96 
‰ameS≥c
 
	glcdFømeS≥c
;

97 
‰ameBuf„r
 
	glcdFøme
[
MAX_USED_BUF
];

99 
LCDH™dÀ
 
	glcdHndl
;

101 vﬁ©ûê
u32
 
	$ALIGNED
(4Ë
¥o˚ssögFømeCå
;

106 
‰ameBuf„r
* 
	`AŒoˇãNextCamFømeBuf
();

110 
	$¥ï¨eDrivîD©a
()

112 
ibuf
;

115 
u£rC⁄fig
.
mùiC⁄åﬁÀrNb
 = 
CAM_B1_MIPICTRL
;

116 
u£rC⁄fig
.
ª˚ivîId
 = 
SIPP_DEVICE1
;

117 #ifde‡
MV0212


118 
u£rC⁄fig
.
£ns‹Re£tPö
 = 
MV0212_MV0200_SENSOR_RIGHT_RST_GPIO
;

119 #ñi‡
	`deföed
(
MV0182
)

120 
u£rC⁄fig
.
£ns‹Re£tPö
 = 
MV0182_MV0200_SENSOR_RIGHT_RST_GPIO
;

122 
u£rC⁄fig
.
°îeoPaúIndex
 = 
CAM_B1_RIGHT_ADDR
;

124 
u£rC⁄fig
.
wödowCﬁumnSèπ
 = 
CAM_WINDOW_START_COLUMN
;

125 
u£rC⁄fig
.
wödowRowSèπ
 = 
CAM_WINDOW_START_ROW
;

126 
u£rC⁄fig
.
wödowWidth
 = 
CAM_WINDOW_WIDTH
;

127 
u£rC⁄fig
.
wödowHeight
 = 
CAM_WINDOW_HEIGHT
;

128 
u£rC⁄fig
.
gíî©eSync
 = 
NULL
;

131 
ˇmFømeS≥c
.
width
 = 
CAM_WINDOW_WIDTH
;

132 
ˇmFømeS≥c
.
height
 = 
CAM_WINDOW_HEIGHT
;

133 
ˇmFømeS≥c
.
byãsPP
 = 
CAM_BPP
;

134 
ˇmFømeS≥c
.
°ride
 = 
CAM_WINDOW_WIDTH
 * 
CAM_BPP
;

135 
ˇmFømeS≥c
.
ty≥
 = 
RAW16
;

138 
ibuf
 = 0; ibu‡< 
MAX_USED_BUF
;ibuf++)

140 
ˇmFøme
[
ibuf
].
p1
 = (*)
ˇmBuf
[ibuf];

141 
ˇmFøme
[
ibuf
].
p2
 = 
NULL
;

142 
ˇmFøme
[
ibuf
].
p3
 = 
NULL
;

143 
ˇmFøme
[
ibuf
].
•ec
 = 
ˇmFømeS≥c
;

146 
i§CÆlbacks
.
gëBlock
 = 
NULL
;

147 
i§CÆlbacks
.
gëFøme
 = 
AŒoˇãNextCamFømeBuf
;

148 
i§CÆlbacks
.
nŸifiˇti⁄
 = 
NULL
;

149 
ˇŒbacks
.
i§CbfLi°
 = &
i§CÆlbacks
;

150 
ˇŒbacks
.
£ns‹CbfLi°
 = 
NULL
;

154 
lcdFømeS≥c
.
width
 = 
LCD_WINDOW_WIDTH
;

155 
lcdFømeS≥c
.
height
 = 
LCD_WINDOW_HEIGHT
;

156 
lcdFømeS≥c
.
°ride
 = 
LCD_WINDOW_WIDTH
 * 
LCD_BPP
;

157 
lcdFømeS≥c
.
byãsPP
 = 
LCD_BPP
;

158 
lcdFømeS≥c
.
ty≥
 = 
YUV422p
;

160 
ibuf
 = 0; ibu‡< 
MAX_USED_BUF
; ibuf++)

162 
lcdFøme
[
ibuf
].
•ec
 = 
lcdFømeS≥c
;

163 
lcdFøme
[
ibuf
].
p1
 = &
lcdBuf
[ibuf][0];

164 
lcdFøme
[
ibuf
].
p2
 = &
lcdDummyChroma
[0];

165 
lcdFøme
[
ibuf
].
p3
 = &
lcdDummyChroma
[
LCD_WINDOW_WIDTH
 * 
LCD_WINDOW_HEIGHT
 / 2];

169 
	}
}

171 
‰ameBuf„r
* 
	$AŒoˇãNextCamFømeBuf
()

173 ++
√wCamFømeCå
;

174  ( &
ˇmFøme
[
√wCamFømeCå
 % 
MAX_USED_BUF
] );

175 
	}
}

177 
‰ameBuf„r
* 
	$ÆloˇãLcdFøme
(
œyî
)

179 (Ë
œyî
;

181 
lcdFømeC¡
++;

182  ( &
lcdFøme
[
lcdFømeCå
 % 
MAX_USED_BUF
] );

183 
	}
}

185 
	$c⁄figSùpModñAµ
(
Cam208CvHdmiModñ
 *
pPl
, 
UI¡32
 
öBuff
, UI¡32 
outBuff
)

187 
DmaP¨am
 *
dmaIn0Cfg
 = (DmaP¨am *)
pPl
->
dmaIn0
->
∑øms
;

188 
DmaP¨am
 *
dmaOut0Cfg
 = (DmaP¨am *)
pPl
->
dmaOut0
->
∑øms
;

193 
dmaIn0Cfg
->
ddrAddr
 = 
öBuff
;

194 
dmaOut0Cfg
->
ddrAddr
 = 
outBuff
;

195 
	}
}

197 
	$maö
()

199 
Cam208CvHdmiModñ
 
sùp
;

200 
u32
 
°©us
;

201 
s32
 
bﬂrdSètus
;

202 
ˇmEº‹Ty≥
 
ˇmSètus
;

203 
LCDLayîOff£t
 
lcdLayîSèπOff£t
 = {0, 0};

204 
s32
 
sc
;

206 
sc
 = 
	`öôClocksAndMem‹y
();

207 if(
sc
)

208  
sc
;

209 #ifde‡
MV0212


210 
öt32_t
 
rc
;

211 
uöt32_t
 
ªv
;

212 
BﬂrdI2CInfo
 
öfo
[
NUM_I2C_DEVS
];

213 
BﬂrdC⁄figDesc
 
c⁄fig
[] =

216 
BRDCONFIG_GPIO
,

218 (*)
brdMV0182R5GpioCfgDeÁu…


221 
BRDCONFIG_END
,

222 
NULL


226 
rc
 = 
	`BﬂrdInô
(
c⁄fig
);

227 i‡(
rc
!=
BRDCONFIG_SUCCESS
)

229 
	`¥ötf
("Error: board initialization failed with %ld status\n",

230 
rc
);

231  
rc
;

234 
rc
 = 
	`BﬂrdGëPCBRevisi⁄
(&
ªv
);

235 i‡(
rc
!=
BRDCONFIG_SUCCESS
)

237 
	`¥ötf
("Error: board configurationÑead failed with %ld status\n",

238 
rc
);

239  
rc
;

241 
	`¥ötf
("Bﬂrd Mv0212 inôülized,Ñevisi⁄ = %lu \n", 
ªv
);

243 
bﬂrdSètus
 = 
	`BﬂrdInôExtPŒ
(
EXT_PLL_CFG_148_24_24MHZ
);

244 i‡(
bﬂrdSètus
 !
BRDCONFIG_SUCCESS
)

246 
	`¥ötf
("Error: board initialization failed with %ld status\n",

247 
bﬂrdSètus
);

250 
rc
 = 
	`BﬂrdGëI2CInfo
(
öfo
, 
NUM_I2C_DEVS
);

251 
i2c0H™dÀ
=
öfo
[0].
h™dÀr
;

252 
i2c2H™dÀ
=
öfo
[2].
h™dÀr
;

253 #ñi‡
	`deföed
(
MV0182
)

254 
bﬂrdSètus
 = 
	`BﬂrdInôüli£
(
EXT_PLL_CFG_148_24_24MHZ
);

255 
i2c0H™dÀ
=
gAµDevHndls
.i2c0Handle;

256 
i2c2H™dÀ
=
gAµDevHndls
.i2c2Handle;

257 i‡(
bﬂrdSètus
 !
B_SUCCESS
)

259 
	`¥ötf
("Error: board initialization failed with %ld status\n",

260 
bﬂrdSètus
);

264 
	`swcLe⁄SëPIL
(0);

266 
	`¥ï¨eDrivîD©a
();

267 
	`mem£t
(
lcdDummyChroma
, 0x80, (lcdDummyChroma));

269 
	`¥ötf
("Initializing SIPPÖipe\n");

270 
	`sùpInôülize
();

272 
	`buûdCam208CvHdmiModñ
(&
sùp
);

273 
iBuf
[0] = (
UI¡32
)&
ˇmBuf
[0];

274 
oBuf
[0] = (
UI¡32
)&
lcdBuf
[0];

275 
	`c⁄figCam208CvHdmiModñ
(&
sùp
);

277 
	`sùpFöÆizePùñöe
(
sùp
.
∂
);

280 
	`DrvMssC⁄√˘LcdToGpio
();

282 
	`¥ötf
("Configuring cameraánd datapath\n");

283 
ˇmSètus
 = 
	`CamInô
(&
ˇmHndl
, 
ˇmC⁄fig
, &
u£rC⁄fig
, &
ˇŒbacks
, 
i2c0H™dÀ
);

285 i‡(
ˇmSètus
 !
CAM_SUCCESS
)

287 
	`¥ötf
("\¿Camî®c⁄figuøti⁄ faûed (%d).\n", 
ˇmSètus
);

291 
	`¥ötf
(" Starting camera ...\n");

292 
ˇmSètus
 = 
	`CamSèπ
(&
ˇmHndl
);

294 i‡(
ˇmSètus
 !
CAM_SUCCESS
)

296 
	`¥ötf
("\¿Camî®ÁûedÅÿ°¨à(%d).\n", 
ˇmSètus
);

300 
	`¥ötf
("Configuring HDMI chip ADV7513...\n\n");

301 
°©us
 = 
	`öôADV7513ªg
(
i2c2H™dÀ
, 
ADV7513C⁄fig
);

303 i‡(
°©us
 == 0)

304 
	`¥ötf
("ADV7513 Configured\n");

306 
	`¥ötf
("ADV7513 C⁄figuøti⁄ faûed %lu \n", 
°©us
);

310 
	`LCDInô
(&
lcdHndl
, &
lcdS≥c1080p60
, 
NULL
, 
LCD1
);

311 
	`LCDInôLayî
(&
lcdHndl
, 
VL1
, &
lcdFømeS≥c
, 
lcdLayîSèπOff£t
);

312 
	`LCDSëupCÆlbacks
(&
lcdHndl
, &
ÆloˇãLcdFøme
, 
NULL
, NULL, NULL);

314 
	`¥ötf
("Starting LCD...\n");

315 
	`LCDSèπ
(&
lcdHndl
);

317 
¥o˚ssögFømeCå
 = 
√wCamFømeCå
;

319 
	`¥ötf
("Loop ...\n");

322 i‡(
√wCamFømeCå
 !
¥o˚ssögFømeCå
)

324 
¥o˚ssögFømeCå
 = 
√wCamFømeCå
;

325 
	`c⁄figSùpModñAµ
(&
sùp
, (
UI¡32
)&
ˇmBuf
[(
¥o˚ssögFømeCå
 -2Ë% 
MAX_USED_BUF
], (UI¡32)&
lcdBuf
[(
lcdFømeCå
 + 1) % MAX_USED_BUF]);

326 
	`sùpPro˚ssFøme
(
sùp
.
∂
);

327 
lcdFømeCå
++;

332 
	}
}

	@Demo/Cam208CvHdmi/leon_rt/sippModelParams.c

6 
	~<sùp.h
>

7 
	~<sùpTe°Comm⁄.h
>

9 
	~<°döt.h
>

10 
	~"sùpPœtf‹m.h
"

12 
I¡8
 
	gc€fX
[6] = { -1, 1, -2, 2, -1, 1 };

13 
I¡8
 
	gc€fY
[6] = { -1, -2, -1, 1, 2, 1 };

16 
UI¡8
 
	gîodeM©
[3*3] =

23 
UI¡8
 
	gdû©eM©
[3*3] =

31 
UI¡16
 
	glutTab
[256] 
ALIGNED
(8) =

	@Demo/Cam208CvHdmi/leon_rt/sippModelParams.h

7 #i‚de‡
LEON_RT_SIPPMODELPARAMS_H_


8 
	#LEON_RT_SIPPMODELPARAMS_H_


	)

9 
	~<°döt.h
>

10 
	~"sùpPœtf‹m.h
"

12 
I¡8
 
c€fX
[6];

13 
I¡8
 
c€fY
[6];

16 
UI¡8
 
îodeM©
[3*3];

18 
UI¡8
 
dû©eM©
[3*3];

22 
UI¡16
 
lutTab
[256];

23 
uöt32_t
 
iBuf
[2];

24 
uöt32_t
 
oBuf
[2];

27 
	#SIPP_FORMAT_8BIT
 0x1

	)

28 
	#SIPP_FORMAT_16BIT
 0x2

	)

29 
	#SIPP_FORMAT_32BIT
 0x4

	)

30 
	#SIPP_FORMAT_PACK10
 0x5

	)

31 
	#SIPP_FORMAT_PACK12
 0x3

	)

33 
	#LUT_IN_FORMAT
 
SIPP_FORMAT_16BIT


	)

34 
	#LUT_LD_FORMAT
 
SIPP_FORMAT_16BIT


	)

35 
	#LUT_OUT_FORMAT
 
SIPP_FORMAT_8BIT


	)

	@Demo/Cam208WarpEffectsHdmi/arch/ma2x5x/leon/app_config.c

13 
	~"≠p_c⁄fig.h
"

14 
	~"DrvC¥.h
"

15 
	~"DrvDdr.h
"

16 
	~"swcLe⁄Utûs.h
"

17 
	~"DrvShaveL2Cache.h
"

18 
	~"DrvTimî.h
"

22 
	#SYS_CLK_KHZ
 12000

23 

	)

24 
	#L2CACHE_CFG
 (
SHAVE_L2CACHE_NORMAL_MODE
)

	)

25 
	#SHAVES_USED
 (12)

	)

28 
	#AUX_CLOCKS_MIPICFG
 (
AUX_CLK_MASK_MIPI_ECFG
 | 
AUX_CLK_MASK_MIPI_CFG
)

	)

29 
	#AUX_CLOCKS_VIDEO
 (
AUX_CLK_MASK_MEDIA
 | 
AUX_CLK_MASK_LCD
)

	)

31 
	#MSS_CLOCKS
 ( 
DEV_MSS_APB_SLV
 | \

32 
DEV_MSS_APB2_CTRL
 | \

33 
DEV_MSS_RTBRIDGE
 | \

34 
DEV_MSS_RTAHB_CTRL
 | \

35 
DEV_MSS_LRT
 | \

36 
DEV_MSS_LRT_DSU
 | \

37 
DEV_MSS_LRT_L2C
 | \

38 
DEV_MSS_LRT_ICB
 | \

39 
DEV_MSS_AXI_BRIDGE
 | \

40 
DEV_MSS_MXI_CTRL
 | \

41 
DEV_MSS_MXI_DEFSLV
 | \

42 
DEV_MSS_AXI_MON
 | \

43 
DEV_MSS_LCD
 | \

44 
DEV_MSS_AMC
 | \

45 
DEV_MSS_SIPP
 | \

46 
DEV_MSS_TIM
 )

	)

48 
	#SIPP_CLOCKS
 ( 
DEV_SIPP_SIPP_ABPSLV
 | \

49 
DEV_SIPP_MIPI
 | \

50 
DEV_SIPP_MIPI_RX1
 )

	)

52 
	#APP_UPA_CLOCKS
 (
DEV_UPA_SH0
 | \

53 
DEV_UPA_SHAVE_L2
 | \

54 
DEV_UPA_CDMA
 | \

55 
DEV_UPA_CTRL
 )

	)

64 
tyAuxClkDividîCfg
 
	gauxClk
[] =

67 .
auxClockE«bÀMask
 = 
AUX_CLOCKS_VIDEO
,

68 .
	gauxClockSour˚
 = 
CLK_SRC_SYS_CLK_DIV2
 ,

69 .
	gauxClockDivNumî©‹
 = 1,

70 .
	gauxClockDivDíomö©‹
 = 1,

73 .
	gauxClockE«bÀMask
 = 
AUX_CLOCKS_MIPICFG
,

74 .
	gauxClockSour˚
 = 
CLK_SRC_SYS_CLK
 ,

75 .
	gauxClockDivNumî©‹
 = 1,

76 .
	gauxClockDivDíomö©‹
 = 18,

84 
tySocClockC⁄fig
 
	g˛ocksC⁄fig
 =

86 .
ªfClk0I≈utKhz
 = 
SYS_CLK_KHZ
 ,

87 .
	gªfClk1I≈utKhz
 = 0,

88 .
	gèrgëPŒ0FªqKhz
 = 360000,

89 .
	gèrgëPŒ1FªqKhz
 = 0,

90 .
	g˛kSrcPŒ1
 = 
CLK_SRC_REFCLK0
,

91 .
	gma°îClkDivNumî©‹
 = 1,

92 .
	gma°îClkDivDíomö©‹
 = 1,

93 .
	gcssDssClockE«bÀMask
 = 
DEFAULT_CORE_CSS_DSS_CLOCKS
,

94 .
	gmssClockE«bÀMask
 = 
MSS_CLOCKS
,

95 .
	gsùpClockE«bÀMask
 = 
SIPP_CLOCKS
,

96 .
	gu∑ClockE«bÀMask
 = 
APP_UPA_CLOCKS
,

97 .
	gpAuxClkCfg
 = 
auxClk
,

106 
	$öôClocksAndMem‹y
()

108 
i
;

109 
s32
 
sc
;

112 
sc
 = 
	`DrvC¥Inô
();

113 if(
sc
)

114  
sc
;

116 
	`DrvC¥SysDevi˚A˘i⁄
(
SIPP_DOMAIN
, 
ASSERT_RESET
, 
DEV_SIPP_MIPI
);

117 
	`DrvC¥SysDevi˚A˘i⁄
(
MSS_DOMAIN
, 
ASSERT_RESET
, 
DEV_MSS_SIPP
 | 
DEV_MSS_AMC
 | 
DEV_MSS_LCD
 );

119 
sc
 = 
	`DrvC¥SëupClocks
(&
˛ocksC⁄fig
);

120 if(
sc
)

121  
sc
;

123 
	`DrvC¥SysDevi˚A˘i⁄
(
MSS_DOMAIN
, 
DEASSERT_RESET
, -1);

124 
	`DrvC¥SysDevi˚A˘i⁄
(
CSS_DOMAIN
, 
DEASSERT_RESET
, -1);

125 
	`DrvC¥SysDevi˚A˘i⁄
(
SIPP_DOMAIN
, 
DEASSERT_RESET
, -1);

126 
	`DrvC¥SysDevi˚A˘i⁄
(
UPA_DOMAIN
, 
DEASSERT_RESET
, -1);

128 
	`swcLe⁄SëPIL
(0);

130 
	`DrvDdrInôüli£
(
NULL
);

133 
sc
 = 
	`DrvShaveL2CacheSëMode
(
L2CACHE_CFG
);

134 if(
sc
)

135  
sc
;

138 
	`DrvShaveL2CacheSëupP¨tôi⁄
(
SHAVEPART256KB
);

141 
sc
 = 
	`DrvShaveL2CacheAŒoˇãSëP¨tôi⁄s
();

142 if(
sc
)

143  
sc
;

146 
i
 = 0; i < 
SHAVES_USED
; i++)

148 
	`DrvShaveL2CacheSëLSUP¨tId
(
i
, 
PARTITION_0
);

151 
	`DrvShaveL2CacheP¨tôi⁄FlushAndInvÆid©e
(
PARTITION_0
);

154 
	}
}

	@Demo/Cam208WarpEffectsHdmi/leon/app_config.h

13 #i‚de‡
APP_CONFIG_H


14 
	#APP_CONFIG_H


	)

18 
	~"mv_ty≥s.h
"

24 
	#PARTITION_0
 (0)

	)

35 
öôClocksAndMem‹y
();

	@Demo/Cam208WarpEffectsHdmi/leon/fisheye_mesh.h

1 #i‚de‡
FISHEYE_MESH_H_


2 
	#FISHEYE_MESH_H_


	)

4 
Â32
 
	gfisheyeMesh_x
[
MESH_HEIGHT
][
MESH_WIDTH
] = {{173.887512, 178.151413, 182.84613, 187.934616, 193.384537, 199.166977, 205.257553, 211.636032, 218.285477, 225.193298, 232.350311, 239.750671, 247.391678, 255.273407, 263.39859, 271.771942, 280.40036, 289.292236, 298.45694, 307.904877, 317.647308, 327.695557, 338.06073, 348.75412, 359.786194, 371.166779, 382.904785, 395.007904, 407.482635, 420.334045, 433.565582, 447.179169, 461.175049, 475.551575, 490.305634, 505.432037, 520.924194, 536.773071, 552.968811, 569.499207, 586.35083, 603.508301, 620.955322, 638.673706, 656.644287, 674.846619, 693.259094, 711.859192, 730.623657, 749.528442, 768.548645, 787.659302, 806.834778, 826.049377, 845.277222, 864.492676, 883.6698, 902.783752, 921.809387, 940.722656, 959.499939, 978.118774, 996.557251, 1014.795044, 1032.812744, 1050.592407, 1068.117432, 1085.373169, 1102.346313, 1119.025391, 1135.400757, 1151.464722, 1167.21167, 1182.637695, 1197.741089, 1212.522461, 1226.984009, 1241.130127, 1254.967041, 1268.50293, 1281.747803, 1294.712646, 1307.410645, 1319.855591, 1332.0625, 1344.046753, 1355.824585, 1367.412354, 1378.825562, 1390.079468, 1401.188354, 1412.165283, 1423.021118, 1433.764893, 1444.403076, 1454.939575, 1465.374268, 1475.70459, 1485.92334, 1496.019775, 1505.978882, 1515.781616, 1525.404053, 1534.818237, 1543.991699, 1552.887451, 1561.464844, 1569.678833, 1577.480103, 1428.958984, 1438.862427, 1448.682739, 1458.409302, 1468.031372, 1477.537354, 1486.915771, 1496.154419, 1505.241211, 1514.16272, 1522.90564, 1531.456665},

73 
Â32
 
	gfisheyeMesh_y
[
MESH_HEIGHT
][
MESH_WIDTH
] = {{353111.40625, 351994.15625, 350854.6875, 349655.75, 348370.09375, 346981.15625, 345482.9375, 343879.28125, 342183.71875, 340418.0625, 338611.125, 336797.53125, 335016.1875, 333309.1875, 331720.0625, 330293.125, 329072.34375, 328100.40625, 327418.3125, 327064.4375, 327074.625, 327481.40625, 328314.34375, 329599.25, 331358.65625, 333611.4375, 336373.09375, 339655.5625, 343467.5, 347814.03125, 352697.21875, 358116.09375, 364066.5, 370541.40625, 377531.34375, 385023.75, 393003.875, 401454.65625, 410356.5, 419688.09375, 429425.96875, 439544.875, 450017.84375, 460816.5, 471911.0, 483270.25, 494862.0625, 506653.25, 518609.6875, 530696.9375, 542879.5, 555122.0, 567388.25, 579642.25, 591848.0625, 603969.8125, 615971.9375, 627819.125, 639476.9375, 650911.5625, 662090.0, 672980.25, 683551.3125, 693773.9375, 703619.75, 713062.0625, 722076.0, 730638.4375, 738728.3125, 746326.375, 753415.9375, 759982.125, 766013.25, 771499.375, 776433.9375, 780812.6875, 784634.5625, 787901.1875, 790617.75, 792792.0, 794435.0, 795561.1875, 796188.125, 796336.25, 796029.5625, 795294.875, 794161.625, 792662.0, 790830.625, 788703.875, 786319.8125, 783717.25, 780935.375, 778012.8125, 774987.0625, 771893.0625, 768762.625, 765623.0625, 762496.125, 759397.4375, 756334.8125, 753307.8125, 750307.4375, 747315.25, 744303.5, 741235.375, 738065.5625, 734740.8125, 731201.5, 69.434242, 72.611801, 75.863327, 79.189232, 82.590385, 86.067421, 89.621124, 93.252228, 96.961441, 100.749565, 104.617439, 108.565926},

	@Demo/Cam208WarpEffectsHdmi/leon/identity_mesh.h

1 #i‚de‡
IDENTITY_MESH_H_


2 
	#IDENTITY_MESH_H_


	)

4 
Â32
 
	gidítôyMesh_x
[
MESH_HEIGHT
][
MESH_WIDTH
] = {{0.0, 16.0, 32.0, 48.0, 64.0, 80.0, 96.0, 112.0, 128.0, 144.0, 160.0, 176.0, 192.0, 208.0, 224.0, 240.0, 256.0, 272.0, 288.0, 304.0, 320.0, 336.0, 352.0, 368.0, 384.0, 400.0, 416.0, 432.0, 448.0, 464.0, 480.0, 496.0, 512.0, 528.0, 544.0, 560.0, 576.0, 592.0, 608.0, 624.0, 640.0, 656.0, 672.0, 688.0, 704.0, 720.0, 736.0, 752.0, 768.0, 784.0, 800.0, 816.0, 832.0, 848.0, 864.0, 880.0, 896.0, 912.0, 928.0, 944.0, 960.0, 976.0, 992.0, 1008.0, 1024.0, 1040.0, 1056.0, 1072.0, 1088.0, 1104.0, 1120.0, 1136.0, 1152.0, 1168.0, 1184.0, 1200.0, 1216.0, 1232.0, 1248.0, 1264.0, 1280.0, 1296.0, 1312.0, 1328.0, 1344.0, 1360.0, 1376.0, 1392.0, 1408.0, 1424.0, 1440.0, 1456.0, 1472.0, 1488.0, 1504.0, 1520.0, 1536.0, 1552.0, 1568.0, 1584.0, 1600.0, 1616.0, 1632.0, 1648.0, 1664.0, 1680.0, 1696.0, 1712.0, 1728.0, 1744.0, 1760.0, 1776.0, 1792.0, 1808.0, 1824.0, 1840.0, 1856.0, 1872.0, 1888.0, 1904.0, 1920.0},

73 
Â32
 
	gidítôyMesh_y
[
MESH_HEIGHT
][
MESH_WIDTH
] = {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},

	@Demo/Cam208WarpEffectsHdmi/leon/main_code.c

11 
	~<°dio.h
>

12 
	~<°rög.h
>

14 
	~"≠p_c⁄fig.h
"

15 #ifde‡
MV0212


16 
	~"MV0212.h
"

17 
	~"brdGpioCfgs/brdMv0182R5GpioDeÁu…s.h
"

18 #ñi‡
deföed
(
MV0182
)

19 
	~<Bﬂrd182Api.h
>

21 
	~"DrvCDCEL.h
"

22 
	~"DrvC¥.h
"

23 
	~"DrvADV7513.h
"

24 
	~"CamGíîicApi.h
"

25 
	~"LcdApi.h
"

26 
	~"DrvMss.h
"

27 
	~"DrvShaveL2Cache.h
"

28 
	~"swcShaveLﬂdî.h
"

29 
	~"LcdCEA1080p60.h
"

30 
	~"imx208_2L_1936x1096_Raw10C⁄vîãd8_60Hz.h
"

32 
	~"mesh.h
"

37 
	#FRAMES_PER_WARP
 45

38 
	#WARP_EFFECTS
 4

39 

	)

40 
	#MAX_USED_BUF
 31

41 
	#FIRST_INCOMING_BUF_ID
 1

	)

42 
	#FIRST_OUTGOING_BUF_ID
 0

	)

44 
	#CAM_WINDOW_START_COLUMN
 0

	)

45 
	#CAM_WINDOW_START_ROW
 8

46 

	)

47 
	#WINDOW_WIDTH
 1920

	)

48 
	#WINDOW_HEIGHT
 1080

	)

49 
	#WINDOW_MARGIN
 160

	)

51 
	#CAM_BPP
 1

54 
	#LCD_BPP
 1

57 

	)

58 
	#CAM_FRAME_SIZE_BYTES
 (
WINDOW_WIDTH
 * 
WINDOW_HEIGHT
 * 
CAM_BPP
)

	)

59 
	#LCD_CHROMA_SIZE_BYTES
 (
WINDOW_WIDTH
 * 
WINDOW_HEIGHT
 * 
LCD_BPP
 )

	)

61 
	#DDR_AREA
 
	`__©åibuã__
((
	`£˘i⁄
(".ddr.bss")))

	)

63 
	#SHAVE_NUMBER
 0

	)

65 
	ew¨pEf„˘
 {

66 
	mIDENTITY_WARP
,

67 
	mFISHEYE_WARP
,

68 
	mWAVE_WARP
,

69 
	mPERSPECTIVE_WARP
,

72 #ifde‡
MV0212


73 
	#NUM_I2C_DEVS
 3

	)

77 
I2CM_Devi˚
 * 
	gi2c0H™dÀ
;

78 
I2CM_Devi˚
 * 
	gi2c2H™dÀ
;

82 
GíîicCamS≥c
 *
	gˇmC⁄fig
 = &
imx208_2L_1936x1096_RAW10CONV8_60Hz_ˇmCfg
;

83 
ADV7513C⁄tfigMode_t
 
	gADV7513C⁄fig
 = 
ADV7513_1080P60
;

85 vﬁ©ûê
u32
 
	g√wCamFømeCå
 = 
FIRST_INCOMING_BUF_ID
;

86 vﬁ©ûê
u32
 
	glcdFømeCå
 = 
FIRST_OUTGOING_BUF_ID
;

88 
u8
 
DDR_AREA
 
	gˇmBuf
[
MAX_USED_BUF
][
CAM_FRAME_SIZE_BYTES
];

89 
u8
 
DDR_AREA
 
	glcdBuf
[
MAX_USED_BUF
][
CAM_FRAME_SIZE_BYTES
];

90 
u8
 
DDR_AREA
 
	glcdDummyChroma
[
LCD_CHROMA_SIZE_BYTES
];

92 
GíîicCamîaH™dÀ
 
	gˇmHndl
;

93 
CamU£rS≥c
 
	gu£rC⁄fig
;

94 
‰ameS≥c
 
	gˇmFømeS≥c
;

95 
‰ameBuf„r
 
	gˇmFøme
[
MAX_USED_BUF
];

96 
‰ameS≥c
 
	glcdFømeS≥c
;

97 
‰ameBuf„r
 
	glcdFøme
[
MAX_USED_BUF
];

98 
LCDH™dÀ
 
	glcdHndl
;

100 
ˇŒbacksLi°Såu˘
 
	gˇŒbacks
 = {0};

101 
öãºu±sCÆlbacksLi°Ty≥
 
	gi§CÆlbacks
 = {0};

104 
u32
 
w¨pEff0_imageW¨p
;

106 
u32
 
	gFnImageW¨p
 = (u32)&
w¨pEff0_imageW¨p
;

108 vﬁ©ûê
u32
 
	g¥o˚ssögFømeCå
;

109 
tûeLi°
 
	gtûeNodes
[
MESH_HEIGHT
 * 
MESH_WIDTH
];

114 
runW¨p
(
swcShaveUnô_t
 
svu
, 
meshSåu˘
* 
mesh
,

115 
‰ameBuf„r
 *
öputFb
,

116 
‰ameBuf„r
 *
ouçutFb
,

117 
∑ddögvÆue
);

118 
¥ï¨eDrivîD©a
();

119 
‰ameBuf„r
* 
AŒoˇãNextCamFømeBuf
();

120 
‰ameBuf„r
* 
ÆloˇãLcdFøme
(
œyî
);

125 
	$runW¨p
(
swcShaveUnô_t
 
svu
, 
meshSåu˘
* 
mesh
,

126 
‰ameBuf„r
 *
öputFb
,

127 
‰ameBuf„r
 *
ouçutFb
,

128 
∑ddögvÆue
)

130 
	`swcRe£tShave
(
svu
);

131 
	`swcSëAbsﬁuãDeÁu…Sèck
(
svu
);

132 
	`swcSèπShaveCC
(
svu
, 
FnImageW¨p
, "iiiiiii", 
mesh
,

133 
öputFb
,

134 
ouçutFb
,

135 
tûeNodes
,

136 
∑ddögvÆue
,0,0);

137 
	`swcWaôShave
(
svu
);

138 
	`DrvShaveL2CacheP¨tôi⁄FlushAndInvÆid©e
(
PARTITION_0
);

139 
	}
}

141 
	$¥ï¨eDrivîD©a
()

143 
s32
 
ibuf
;

147 
u£rC⁄fig
.
mùiC⁄åﬁÀrNb
 = 
CAM_B1_MIPICTRL
;

148 
u£rC⁄fig
.
ª˚ivîId
 = 
SIPP_DEVICE1
;

149 #ifde‡
MV0212


150 
u£rC⁄fig
.
£ns‹Re£tPö
 = 
MV0212_MV0200_SENSOR_RIGHT_RST_GPIO
;

151 #ñi‡
	`deföed
(
MV0182
)

152 
u£rC⁄fig
.
£ns‹Re£tPö
 = 
MV0182_MV0200_SENSOR_RIGHT_RST_GPIO
;

154 
u£rC⁄fig
.
°îeoPaúIndex
 = 
CAM_B1_RIGHT_ADDR
;

155 
u£rC⁄fig
.
wödowCﬁumnSèπ
 = 
CAM_WINDOW_START_COLUMN
;

156 
u£rC⁄fig
.
wödowRowSèπ
 = 
CAM_WINDOW_START_ROW
;

157 
u£rC⁄fig
.
wödowWidth
 = 
WINDOW_WIDTH
;

158 
u£rC⁄fig
.
wödowHeight
 = 
WINDOW_HEIGHT
;

159 
u£rC⁄fig
.
gíî©eSync
 = 
NULL
;

162 
ˇmFømeS≥c
.
width
 = 
WINDOW_WIDTH
;

163 
ˇmFømeS≥c
.
height
 = 
WINDOW_HEIGHT
;

164 
ˇmFømeS≥c
.
byãsPP
 = 
CAM_BPP
;

165 
ˇmFømeS≥c
.
°ride
 = 
WINDOW_WIDTH
 * 
CAM_BPP
;

166 
ˇmFømeS≥c
.
ty≥
 = 
RAW16
;

169 
ibuf
 = 0; ibu‡< 
MAX_USED_BUF
;ibuf++)

171 
ˇmFøme
[
ibuf
].
p1
 = (*)
ˇmBuf
[ibuf];

172 
ˇmFøme
[
ibuf
].
p2
 = 
NULL
;

173 
ˇmFøme
[
ibuf
].
p3
 = 
NULL
;

174 
ˇmFøme
[
ibuf
].
•ec
 = 
ˇmFømeS≥c
;

177 
i§CÆlbacks
.
gëBlock
 = 
NULL
;

178 
i§CÆlbacks
.
gëFøme
 = 
AŒoˇãNextCamFømeBuf
;

179 
i§CÆlbacks
.
nŸifiˇti⁄
 = 
NULL
;

180 
ˇŒbacks
.
i§CbfLi°
 = &
i§CÆlbacks
;

181 
ˇŒbacks
.
£ns‹CbfLi°
 = 
NULL
;

184 
lcdFømeS≥c
.
width
 = 
WINDOW_WIDTH
;

185 
lcdFømeS≥c
.
height
 = 
WINDOW_HEIGHT
;

186 
lcdFømeS≥c
.
°ride
 = 
WINDOW_WIDTH
 * 
LCD_BPP
;

187 
lcdFømeS≥c
.
byãsPP
 = 
LCD_BPP
;

188 
lcdFømeS≥c
.
ty≥
 = 
YUV422p
;

190 
ibuf
 = 0; ibu‡< 
MAX_USED_BUF
;ibuf++)

192 
lcdFøme
[
ibuf
].
•ec
 = 
lcdFømeS≥c
;

193 
lcdFøme
[
ibuf
].
p1
 = &
lcdBuf
[ibuf][0];

194 
lcdFøme
[
ibuf
].
p2
 = 
lcdDummyChroma
;

195 
lcdFøme
[
ibuf
].
p3
 = 
lcdDummyChroma
;

199 
	}
}

202 
‰ameBuf„r
* 
	$AŒoˇãNextCamFømeBuf
()

204 
√wCamFømeCå
++;

205  ( &
ˇmFøme
[
√wCamFømeCå
 % 
MAX_USED_BUF
] );

206 
	}
}

208 
‰ameBuf„r
* 
	$ÆloˇãLcdFøme
(
œyî
)

210 (Ë
œyî
;

212  ( &
lcdFøme
[
lcdFømeCå
 % 
MAX_USED_BUF
] );

213 
	}
}

215 
	$maö
()

217 
s32
 
°©us
;

218 
u32
 
löe
;

219 
u32
 
w¨pEf„˘StyÀ
 = 
IDENTITY_WARP
;

220 
ˇmEº‹Ty≥
 
ˇmSètus
;

221 
LCDLayîOff£t
 
lcdLayîSèπOff£t
 = {0, 0};

222 
s32
 
bﬂrdSètus
;

223 
meshSåu˘
 
mesh
;

224 
‰ameBuf„r
* 
cuºFøme
;

225 
s32
 
buffcou¡
;

227 
°©us
 = 
	`öôClocksAndMem‹y
();

228 if(
°©us
)

229  
°©us
;

230 #ifde‡
MV0212


231 
öt32_t
 
rc
;

232 
uöt32_t
 
ªv
;

233 
BﬂrdI2CInfo
 
öfo
[
NUM_I2C_DEVS
];

234 
BﬂrdC⁄figDesc
 
c⁄fig
[] =

237 
BRDCONFIG_GPIO
,

239 (*)
brdMV0182R5GpioCfgDeÁu…


242 
BRDCONFIG_END
,

243 
NULL


247 
rc
 = 
	`BﬂrdInô
(
c⁄fig
);

248 i‡(
rc
!=
BRDCONFIG_SUCCESS
)

250 
	`¥ötf
("Error: board initialization failed with %ld status\n",

251 
rc
);

252  
rc
;

255 
rc
 = 
	`BﬂrdGëPCBRevisi⁄
(&
ªv
);

256 i‡(
rc
!=
BRDCONFIG_SUCCESS
)

258 
	`¥ötf
("Error: board configurationÑead failed with %ld status\n",

259 
rc
);

260  
rc
;

262 
	`¥ötf
("Bﬂrd Mv0212 inôülized,Ñevisi⁄ = %lu \n", 
ªv
);

264 
bﬂrdSètus
 = 
	`BﬂrdInôExtPŒ
(
EXT_PLL_CFG_148_24_24MHZ
);

265 i‡(
bﬂrdSètus
 !
BRDCONFIG_SUCCESS
)

267 
	`¥ötf
("Error: board initialization failed with %ld status\n",

268 
bﬂrdSètus
);

271 
rc
 = 
	`BﬂrdGëI2CInfo
(
öfo
, 
NUM_I2C_DEVS
);

272 
i2c0H™dÀ
=
öfo
[0].
h™dÀr
;

273 
i2c2H™dÀ
=
öfo
[2].
h™dÀr
;

274 #ñi‡
	`deföed
(
MV0182
)

275 
bﬂrdSètus
 = 
	`BﬂrdInôüli£
(
EXT_PLL_CFG_148_24_24MHZ
);

276 
i2c0H™dÀ
=
gAµDevHndls
.i2c0Handle;

277 
i2c2H™dÀ
=
gAµDevHndls
.i2c2Handle;

278 i‡(
bﬂrdSètus
 !
B_SUCCESS
)

280 
	`¥ötf
("Error: board initialization failed with %ld status\n",

281 
bﬂrdSètus
);

286 
	`¥ötf
("Configuring cameraánd datapath\n");

287 
	`¥ï¨eDrivîD©a
();

293 
	`mem£t
(
lcdDummyChroma
, 0x80, (lcdDummyChroma));

296 
	`DrvMssC⁄√˘LcdToGpio
();

298 
ˇmSètus
 = 
	`CamInô
–&
ˇmHndl
, 
ˇmC⁄fig
, &
u£rC⁄fig
,

299 &
ˇŒbacks
, 
i2c0H™dÀ
 );

300 i‡(
ˇmSètus
 !
CAM_SUCCESS
)

302 
	`¥ötf
("\¿Camî®c⁄figuøti⁄ faûed (%d).\n", 
ˇmSètus
);

306 
ˇmSètus
 = 
	`CamSèπ
–&
ˇmHndl
 );

307 i‡(
ˇmSètus
 !
CAM_SUCCESS
)

309 
	`¥ötf
("\¿Camî®ÁûedÅÿ°¨à(%d).\n", 
ˇmSètus
);

313 
	`¥ötf
("ConfiguringÅhe HDMI chip ADV7513\n");

314 
°©us
 = 
	`öôADV7513ªg
(
i2c2H™dÀ
, 
ADV7513C⁄fig
);

316 i‡(
°©us
 != 0)

318 
	`¥ötf
("\¿ADV7513 chù c⁄figuøti⁄ faûed wôh codê%ld.\n", 
°©us
);

322 
	`¥ötf
("ConfiguringÅhe LCD\n");

323 
	`LCDInô
(&
lcdHndl
, &
lcdS≥c1080p60
, 
NULL
, 
LCD1
);

324 
	`LCDInôLayî
(&
lcdHndl
, 
VL1
, &
lcdFømeS≥c
, 
lcdLayîSèπOff£t
);

325 
	`LCDSëupCÆlbacks
(&
lcdHndl
, &
ÆloˇãLcdFøme
, 
NULL
, NULL, NULL);

328 
buffcou¡
=0; buffcou¡<
MAX_USED_BUF
;buffcount++)

330 
	`mem£t
(
lcdFøme
[
buffcou¡
].
p1
, 0x0, 
WINDOW_WIDTH
 * 
WINDOW_HEIGHT
);

333 
	`LCDSèπ
(&
lcdHndl
);

336 
mesh
.
meshWidth
 = 
MESH_WIDTH
;

337 
mesh
.
meshHeight
 = 
MESH_HEIGHT
;

339 
	`¥ötf
("\n Streaming ... \n");

344 
¥o˚ssögFømeCå
 = 
√wCamFømeCå
 - 1;

346 
	`DrvShaveL2CacheP¨tôi⁄FlushAndInvÆid©e
(
PARTITION_0
);

348 
cuºFøme
 = &
ˇmFøme
[
¥o˚ssögFømeCå
 % 
MAX_USED_BUF
];

351 
	`mem£t
(
cuºFøme
->
p1
, 0x00, 
WINDOW_WIDTH
 * 
WINDOW_MARGIN
);

352 
	`mem£t
(
cuºFøme
->
p1
 + (
WINDOW_HEIGHT
 - 
WINDOW_MARGIN
Ë* 
WINDOW_WIDTH
,

353 0x0, 
WINDOW_WIDTH
 * 
WINDOW_MARGIN
);

354 
löe
 = 0;Üöê< 
WINDOW_HEIGHT
;Üine++)

356 
	`mem£t
(
cuºFøme
->
p1
 + 
löe
 * 
WINDOW_WIDTH
, 0x00, 
WINDOW_MARGIN
);

357 
	`mem£t
(
cuºFøme
->
p1
 + 
löe
 * 
WINDOW_WIDTH
 + (WINDOW_WIDTH - 
WINDOW_MARGIN
),

358 0x00, 
WINDOW_MARGIN
);

361 if–
lcdFømeCå
 % 
FRAMES_PER_WARP
 == 0)

362 
w¨pEf„˘StyÀ
++;

365 
w¨pEf„˘StyÀ
 % 
WARP_EFFECTS
)

367 
IDENTITY_WARP
:

368 
mesh
.
meshX
 = (*)
idítôyMesh_x
;

369 
mesh
.
meshY
 = (*)
idítôyMesh_y
;

370 
mesh
.
co‹d_mö_y
 = 0;

371 
mesh
.
co‹d_mö_x
 = 0;

372 
mesh
.
co‹d_max_x
 = 
WINDOW_WIDTH
;

373 
mesh
.
co‹d_max_y
 = 
WINDOW_HEIGHT
;

375 
FISHEYE_WARP
:

376 
mesh
.
meshX
 = (*)
fisheyeMesh_x
;

377 
mesh
.
meshY
 = (*)
fisheyeMesh_y
;

378 
mesh
.
co‹d_mö_y
 = 0;

379 
mesh
.
co‹d_mö_x
 = 0;

380 
mesh
.
co‹d_max_x
 = 
WINDOW_WIDTH
;

381 
mesh
.
co‹d_max_y
 = 
WINDOW_HEIGHT
;

383 
WAVE_WARP
:

384 
mesh
.
meshX
 = (*)
waveMesh_x
;

385 
mesh
.
meshY
 = (*)
waveMesh_y
;

386 
mesh
.
co‹d_mö_y
 = 0;

387 
mesh
.
co‹d_mö_x
 = 0;

388 
mesh
.
co‹d_max_x
 = 
WINDOW_WIDTH
;

389 
mesh
.
co‹d_max_y
 = 
WINDOW_HEIGHT
;

391 
PERSPECTIVE_WARP
:

392 
mesh
.
meshX
 = (*)
≥r•e˘iveMesh_x
;

393 
mesh
.
meshY
 = (*)
≥r•e˘iveMesh_y
;

394 
mesh
.
co‹d_mö_y
 = 0;

395 
mesh
.
co‹d_mö_x
 = 0;

396 
mesh
.
co‹d_max_x
 = 
WINDOW_WIDTH
;

397 
mesh
.
co‹d_max_y
 = 
WINDOW_HEIGHT
;

402 
	`mem£t
(
lcdFøme
[(
lcdFømeCå
 + 1Ë% 
MAX_USED_BUF
].
p1
,0,(
WINDOW_WIDTH
+
WINDOW_MARGIN
*2)*(
WINDOW_HEIGHT
+WINDOW_MARGIN*2));

404 
	`runW¨p
(
SHAVE_NUMBER
, &
mesh
, 
cuºFøme
,

405 &
lcdFøme
[(
lcdFømeCå
 + 1Ë% 
MAX_USED_BUF
],0);

407 
lcdFømeCå
++;

411 
	}
}

	@Demo/Cam208WarpEffectsHdmi/leon/mesh.h

1 #i‚de‡
MESH_H_


2 
	#MESH_H_


	)

4 
	~"mv_ty≥s.h
"

5 
	~"imageW¨pDeföes.h
"

7 
	#WINDOW_WIDTH
 1920

	)

8 
	#WINDOW_HEIGHT
 1080

	)

10 
	#MESH_WIDTH
 (
WINDOW_WIDTH
 / 
MESH_CELL_SIZE
 + 1)

	)

11 
	#MESH_HEIGHT
 (
WINDOW_HEIGHT
 / 
MESH_CELL_SIZE
 + 2)

	)

13 
	~"idítôy_mesh.h
"

14 
	~"fisheye_mesh.h
"

15 
	~"≥r•e˘ive_mesh.h
"

16 
	~"wave_mesh.h
"

	@Demo/Cam208WarpEffectsHdmi/leon/perspective_mesh.h

1 #i‚de‡
PERSPECTIVE_MESH_H_


2 
	#PERSPECTIVE_MESH_H_


	)

5 
Â32
 
	g≥r•e˘iveMesh_x
[
MESH_HEIGHT
][
MESH_WIDTH
] = {{-336.015839, -311.844116, -287.812622, -263.920166, -240.165512, -216.547516, -193.064957, -169.716705, -146.501587, -123.41848, -100.466263, -77.643837, -54.950077, -32.383907, -9.944279, 12.369907, 34.559685, 56.626087, 78.570137, 100.39286, 122.095253, 143.678268, 165.142975, 186.490295, 207.721191, 228.836594, 249.837494, 270.724762, 291.499329, 312.16217, 332.714081, 353.156067, 373.488892, 393.71344, 413.830719, 433.841431, 453.74649, 473.546661, 493.242859, 512.835815, 532.326416, 551.715454, 571.003662, 590.191833, 609.280823, 628.271301, 647.164062, 665.9599, 684.659546, 703.263672, 721.773071, 740.188416, 758.510498, 776.739929, 794.877502, 812.923889, 830.8797, 848.745605, 866.522522, 884.210815, 901.811279, 919.324463, 936.751343, 954.092163, 971.347656, 988.518494, 1005.605347, 1022.608948, 1039.529541, 1056.368042, 1073.125, 1089.800781, 1106.396362, 1122.911865, 1139.348267, 1155.705811, 1171.985352, 1188.187378, 1204.312256, 1220.360718, 1236.333374, 1252.230347, 1268.052734, 1283.800537, 1299.474731, 1315.075684, 1330.603516, 1346.059448, 1361.443359, 1376.756226, 1391.998169, 1407.1698, 1422.271851, 1437.304199, 1452.268066, 1467.163574, 1481.990723, 1496.750854, 1511.443604, 1526.070312, 1540.630859, 1555.125488, 1569.555298, 1583.920166, 1598.220581, 1612.457275, 1626.630371, 1640.740601, 1654.788208, 1668.77356, 1682.697266, 1696.559204, 1710.360474, 1724.10144, 1737.781738, 1751.402466, 1764.964111, 1778.466187, 1791.909912, 1805.295532, 1818.623169},

74 
Â32
 
	g≥r•e˘iveMesh_y
[
MESH_HEIGHT
][
MESH_WIDTH
] = {{-209.302124, -207.277695, -205.264984, -203.263962, -201.274445, -199.296387, -197.329666, -195.374191, -193.429871, -191.496613, -189.574326, -187.662888, -185.762238, -183.872269, -181.992889, -180.124039, -178.265594, -176.417496, -174.57962, -172.751923, -170.934296, -169.126663, -167.328949, -165.541077, -163.762939, -161.994461, -160.235596, -158.486237, -156.746338, -155.015778, -153.294495, -151.582443, -149.879517, -148.185654, -146.500793, -144.82486, -143.157761, -141.499451, -139.849854, -138.208908, -136.576508, -134.952652, -133.337219, -131.730164, -130.131424, -128.540924, -126.958611, -125.384422, -123.818283, -122.260147, -120.709938, -119.16761, -117.633095, -116.106346, -114.58728, -113.075859, -111.572021, -110.075699, -108.586853, -107.105415, -105.631348, -104.164566, -102.705032, -101.252708, -99.807518, -98.369408, -96.938347, -95.514275, -94.097122, -92.686867, -91.28344, -89.886795, -88.496895, -87.11367, -85.737091, -84.367104, -83.003654, -81.646706, -80.296211, -78.95211, -77.61438, -76.282967, -74.957809, -73.638885, -72.326141, -71.019539, -69.719025, -68.424576, -67.136124, -65.853645, -64.577103, -63.306435, -62.041618, -60.782608, -59.529362, -58.281841, -57.040012, -55.803825, -54.57325, -53.348248, -52.128784, -50.914806, -49.706299, -48.503212, -47.305504, -46.113148, -44.926121, -43.744358, -42.567837, -41.396542, -40.230408, -39.069412, -37.913528, -36.762718, -35.616943, -34.476181, -33.340389, -32.209534, -31.08359, -29.962538, -28.846317},

	@Demo/Cam208WarpEffectsHdmi/leon/wave_mesh.h

1 #i‚de‡
WAVE_MESH_H_


2 
	#WAVE_MESH_H_


	)

4 
Â32
 
	gwaveMesh_x
[
MESH_HEIGHT
][
MESH_WIDTH
] = {{0.0, 16.0, 32.0, 48.0, 64.0, 80.0, 96.0, 112.0, 128.0, 144.0, 160.0, 176.0, 192.0, 208.0, 224.0, 240.0, 256.0, 272.0, 288.0, 304.0, 320.0, 336.0, 352.0, 368.0, 384.0, 400.0, 416.0, 432.0, 448.0, 464.0, 480.0, 496.0, 512.0, 528.0, 544.0, 560.0, 576.0, 592.0, 608.0, 624.0, 640.0, 656.0, 672.0, 688.0, 704.0, 720.0, 736.0, 752.0, 768.0, 784.0, 800.0, 816.0, 832.0, 848.0, 864.0, 880.0, 896.0, 912.0, 928.0, 944.0, 960.0, 976.0, 992.0, 1008.0, 1024.0, 1040.0, 1056.0, 1072.0, 1088.0, 1104.0, 1120.0, 1136.0, 1152.0, 1168.0, 1184.0, 1200.0, 1216.0, 1232.0, 1248.0, 1264.0, 1280.0, 1296.0, 1312.0, 1328.0, 1344.0, 1360.0, 1376.0, 1392.0, 1408.0, 1424.0, 1440.0, 1456.0, 1472.0, 1488.0, 1504.0, 1520.0, 1536.0, 1552.0, 1568.0, 1584.0, 1600.0, 1616.0, 1632.0, 1648.0, 1664.0, 1680.0, 1696.0, 1712.0, 1728.0, 1744.0, 1760.0, 1776.0, 1792.0, 1808.0, 1824.0, 1840.0, 1856.0, 1872.0, 1888.0, 1904.0, 1920.0},

73 
Â32
 
	gwaveMesh_y
[
MESH_HEIGHT
][
MESH_WIDTH
] = {{0.0, 7.316992, 14.553819, 21.631189, 28.471565, 35.0, 41.144966, 46.839142, 52.020138, 56.631191, 60.621777, 63.948181, 66.573959, 68.470329, 69.616531, 70.0, 69.616531, 68.470329, 66.573959, 63.948181, 60.621777, 56.631191, 52.020138, 46.839142, 41.144966, 35.0, 28.471565, 21.631189, 14.553819, 7.316992, 0.0, -7.316992, -14.553819, -21.631189, -28.471565, -35.0, -41.144966, -46.839142, -52.020138, -56.631191, -60.621777, -63.948181, -66.573959, -68.470329, -69.616531, -70.0, -69.616531, -68.470329, -66.573959, -63.948181, -60.621777, -56.631191, -52.020138, -46.839142, -41.144966, -35.0, -28.471565, -21.631189, -14.553819, -7.316992, -0.0, 7.316992, 14.553819, 21.631189, 28.471565, 35.0, 41.144966, 46.839142, 52.020138, 56.631191, 60.621777, 63.948181, 66.573959, 68.470329, 69.616531, 70.0, 69.616531, 68.470329, 66.573959, 63.948181, 60.621777, 56.631191, 52.020138, 46.839142, 41.144966, 35.0, 28.471565, 21.631189, 14.553819, 7.316992, 0.0, -7.316992, -14.553819, -21.631189, -28.471565, -35.0, -41.144966, -46.839142, -52.020138, -56.631191, -60.621777, -63.948181, -66.573959, -68.470329, -69.616531, -70.0, -69.616531, -68.470329, -66.573959, -63.948181, -60.621777, -56.631191, -52.020138, -46.839142, -41.144966, -35.0, -28.471565, -21.631189, -14.553819, -7.316992, -0.0},

	@Demo/Cam378OpipeHdmi/leon/app_config.c

13 
	~"≠p_c⁄fig.h
"

14 
	~"OsDrvC¥.h
"

15 
	~"DrvDdr.h
"

16 
	~"as£π.h
"

17 
	~"ªgi°îsMyrüd.h
"

18 
	~"DrvRegUtûs.h
"

19 
	~"DrvGpioDeföes.h
"

20 
	~"DrvGpio.h
"

21 
	~"ªgi°îsMyrüd.h
"

22 
	~"brdGpioCfgs/brdMv0182R2GpioDeÁu…s.h
"

23 
	~"DrvShaveL2Cache.h
"

24 
	~"OsDrvTimî.h
"

28 
	#SYS_CLK_KHZ
 12000

29 

	)

32 
	#L2CACHE_CFG
 (
SHAVE_L2CACHE_NORMAL_MODE
)

	)

33 
	#CLOCKS_MIPICFG
 (
AUX_CLK_MASK_MIPI_ECFG
 | 
AUX_CLK_MASK_MIPI_CFG
)

	)

38 
u32
 
__l2_c⁄fig
 
__©åibuã__
((
£˘i⁄
(".l2.mode"))Ë
L2CACHE_CFG
;

42 
tyAuxClkDividîCfg
 
	gauxClk
[] =

45 .
auxClockE«bÀMask
 = 
AUX_CLK_MASK_MEDIA
,

46 .
	gauxClockSour˚
 = 
CLK_SRC_SYS_CLK
,

47 .
	gauxClockDivNumî©‹
 = 1,

48 .
	gauxClockDivDíomö©‹
 = 1,

51 .
	gauxClockE«bÀMask
 = (
AUX_CLK_MASK_LCD
),

52 .
	gauxClockSour˚
 = 
CLK_SRC_SYS_CLK
,

53 .
	gauxClockDivNumî©‹
 = 1,

54 .
	gauxClockDivDíomö©‹
 = 1,

57 .
	gauxClockE«bÀMask
 = 
CLOCKS_MIPICFG
,

58 .
	gauxClockSour˚
 = 
CLK_SRC_SYS_CLK
,

59 .
	gauxClockDivNumî©‹
 = 1,

60 .
	gauxClockDivDíomö©‹
 = 18,

66 
tySocClockC⁄fig
 
	g˛ocksC⁄fig
 =

68 .
ªfClk0I≈utKhz
 = 
SYS_CLK_KHZ
 ,

69 .
	gªfClk1I≈utKhz
 = 0 ,

70 .
	gèrgëPŒ0FªqKhz
 = 580000,

71 .
	gèrgëPŒ1FªqKhz
 = 0,

72 .
	g˛kSrcPŒ1
 = 
CLK_SRC_REFCLK0
,

73 .
	gma°îClkDivNumî©‹
 = 1,

74 .
	gma°îClkDivDíomö©‹
 = 1,

75 .
	gcssDssClockE«bÀMask
 = 
DEFAULT_CORE_CSS_DSS_CLOCKS
,

76 .
	gu∑ClockE«bÀMask
 = 
DEFAULT_UPA_CLOCKS
,

77 .
	gmssClockE«bÀMask
 = 
MSS_CLOCKS
,

78 .
	gsùpClockE«bÀMask
 = 
OPIPE_CLOCKS
,

79 .
	gpAuxClkCfg
 = 
auxClk
,

87 
	$öôClocksAndMem‹y
()

89 
i
;

91 
	`OsDrvC¥Inô
();

92 
	`OsDrvC¥O≥n
();

94 
	`DrvC¥SysDevi˚A˘i⁄
(
SIPP_DOMAIN
, 
ASSERT_RESET
, 
DEV_SIPP_MIPI
 | 
DEV_SIPP_APB_SLV
 | 
DEV_SIPP_MIPI_RX0
 | 
DEV_SIPP_MIPI_RX1
 );

95 
	`DrvC¥SysDevi˚A˘i⁄
(
MSS_DOMAIN
, 
ASSERT_RESET
, 
DEV_MSS_SIPP
 | 
DEV_MSS_AMC
 | 
DEV_MSS_LCD
);

97 
	`OsDrvC¥SëupClocks
(&
˛ocksC⁄fig
);

99 
	`DrvC¥SysDevi˚A˘i⁄
(
MSS_DOMAIN
, 
DEASSERT_RESET
, -1);

100 
	`DrvC¥SysDevi˚A˘i⁄
(
CSS_DOMAIN
, 
DEASSERT_RESET
, -1);

101 
	`DrvC¥SysDevi˚A˘i⁄
(
SIPP_DOMAIN
, 
DEASSERT_RESET
, -1);

102 
	`DrvC¥SysDevi˚A˘i⁄
(
UPA_DOMAIN
, 
DEASSERT_RESET
, -1);

104 
	`OsDrvTimîInô
();

105 
	`DrvDdrInôüli£
(
NULL
);

108 
	`DrvShaveL2CacheSëupP¨tôi⁄
(
SHAVEPART256KB
);

111 
	`DrvShaveL2CacheAŒoˇãSëP¨tôi⁄s
();

114 
i
 = 0; i < 12; i++)

116 
	`DrvShaveL2CacheSëLSUP¨tId
(
i
, 0);

120 
	`DrvGpioInôüli£R™ge
(
brdMV0182R2GpioCfgDeÁu…
);

123 
	}
}

	@Demo/Cam378OpipeHdmi/leon/app_config.h

13 #i‚de‡
APP_CONFIG_H


14 
	#APP_CONFIG_H


	)

18 
	~"mv_ty≥s.h
"

19 
	~"DrvC¥.h
"

22 
	#OPIPE_CLOCKS
 (
DEV_SIPP_SIGMA
 | \

23 
DEV_SIPP_LSC
 | \

24 
DEV_SIPP_RAW
 | \

25 
DEV_SIPP_DBYR
 | \

26 
DEV_SIPP_DOGL
 | \

27 
DEV_SIPP_LUMA
 | \

28 
DEV_SIPP_SHARPEN
 | \

29 
DEV_SIPP_CGEN
 | \

30 
DEV_SIPP_MED
 | \

31 
DEV_SIPP_CHROMA
 | \

32 
DEV_SIPP_CC
 | \

33 
DEV_SIPP_LUT
 | \

34 
DEV_SIPP_UPFIRDN0
 | \

35 
DEV_SIPP_UPFIRDN1
 | \

36 
DEV_SIPP_UPFIRDN2
 | \

37 
DEV_SIPP_MIPI_RX0
 | \

38 
DEV_MSS_SIPP_CLK_GATES
 | \

39 
DEV_SIPP_MIPI
 | \

40 
DEV_SIPP_SIPP_ABPSLV
 | \

41 
DEV_SIPP_APB_SLV
)

	)

43 
	#MSS_CLOCKS
 ( 
DEV_MSS_APB_SLV
 | \

44 
DEV_MSS_APB2_CTRL
 | \

45 
DEV_MSS_RTBRIDGE
 | \

46 
DEV_MSS_RTAHB_CTRL
 | \

47 
DEV_MSS_LRT
 | \

48 
DEV_MSS_LRT_DSU
 | \

49 
DEV_MSS_LRT_L2C
 | \

50 
DEV_MSS_LRT_ICB
 | \

51 
DEV_MSS_AXI_BRIDGE
 | \

52 
DEV_MSS_MXI_CTRL
 | \

53 
DEV_MSS_MXI_DEFSLV
 | \

54 
DEV_MSS_AXI_MON
 | \

55 
DEV_MSS_CIF0
 | \

56 
DEV_MSS_LCD
 | \

57 
DEV_MSS_AMC
 | \

58 
DEV_MSS_SIPP
 | \

59 
DEV_MSS_TIM
)

	)

61 
	#CLOCKS_MIPICFG
 (
AUX_CLK_MASK_MIPI_ECFG
 | 
AUX_CLK_MASK_MIPI_CFG
)

	)

67 
u32
 
__l2_c⁄fig
 ;

75 
öôClocksAndMem‹y
();

	@Demo/Cam378OpipeHdmi/leon/main.c

13 
	~<°dlib.h
>

14 
	~<DrvLe⁄.h
>

15 
	~<DrvC¥.h
>

16 
	~<DrvTimî.h
>

17 
	~<πems/˝uu£.h
>

18 
	~<b•.h
>

19 
	~"πems_c⁄fig.h
"

26 
u32
 *
Ãt_°¨t
;

33 *
	$POSIX_Inô
 (*
¨gs
)

35 (Ë
¨gs
;

37 
s32
 
sc
;

38 
sc
 = 
	`öôClocksAndMem‹y
();

39 if(
sc
)

40 
	`exô
(
sc
);

42 
	`DrvLe⁄RTSèπup
((
u32
)&
Ãt_°¨t
);

43 
	`DrvLe⁄RTWaôExecuti⁄
();

45 
	`exô
(0);

46 
	}
}

	@Demo/Cam378OpipeHdmi/leon/rtems_config.h

9 #i‚de‡
_RTEMS_CONFIG_H_


10 
	#_RTEMS_CONFIG_H_


	)

14 
	~<πems.h
>

15 
	~<πems/b•Io.h
>

16 
	~"≠p_c⁄fig.h
"

17 
	~"ÁèlExãnsi⁄.h
"

22 #i‡
deföed
(
__RTEMS__
)

24 #i‡!
deföed
 (
__CONFIG__
)

25 
	#__CONFIG__


	)

28 
	#CONFIGURE_INIT


	)

30 #i‚de‡
RTEMS_POSIX_API


31 
	#RTEMS_POSIX_API


	)

34 
	#CONFIGURE_MICROSECONDS_PER_TICK
 1000

	)

36 
	#CONFIGURE_TICKS_PER_TIMESLICE
 10

	)

38 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

40 
	#CONFIGURE_APPLICATION_NEEDS_CLOCK_DRIVER


	)

42 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

44 
	#CONFIGURE_MINIMUM_TASK_STACK_SIZE
 4096

	)

46 
	#CONFIGURE_MAXIMUM_TASKS
 4

	)

48 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 4

	)

50 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 8

	)

52 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 8

	)

54 
	#CONFIGURE_MAXIMUM_POSIX_SEMAPHORES
 8

	)

56 
	#CONFIGURE_MAXIMUM_POSIX_MESSAGE_QUEUES
 8

	)

58 
	#CONFIGURE_MAXIMUM_POSIX_TIMERS
 4

	)

60 
	#CONFIGURE_MAXIMUM_TIMERS
 4

	)

62 
	#CONFIGURE_MAXIMUM_SEMAPHORES
 1

	)

64 
	#CONFIGURE_MAXIMUM_USER_EXTENSIONS
 1

	)

65 
	#CONFIGURE_INITIAL_EXTENSIONS
 { .
Áèl
 = 
F©Æ_exãnsi⁄
 }

	)

67 *
POSIX_Inô
 (*
¨gs
);

69 
	~<πems/c⁄fdefs.h
>

76 
BSP_SET_CLOCK
(12000, 580000, 1, 1, 
DEFAULT_CORE_CSS_DSS_CLOCKS
, 
MSS_CLOCKS
, 
DEFAULT_UPA_CLOCKS
, 
OPIPE_CLOCKS
, 0x00);

79 
BSP_SET_L2C_CONFIG
(0, 
L2C_REPL_LRU
, 0, 
L2C_MODE_COPY_BACK
, 0, 
NULL
);

	@Demo/Cam378OpipeHdmi/leon_rt/app_config.c

13 
	~"≠p_c⁄fig.h
"

14 
	~"as£π.h
"

15 
	~"DrvC¥.h
"

16 
	~"DrvTimî.h
"

17 
	~"ªgi°îsMyrüd.h
"

18 
	~"DrvGpio.h
"

19 
	~"DrvLe⁄L2C.h
"

23 
	#SYS_CLK_KHZ
 (12000)

24 
	#PLL_DESIRED_FREQ_KHZ
 (580000)

	)

35 
	$öô
()

37 
s32
 
sc
;

39 
sc
 = 
	`DrvC¥InôClocks
(
SYS_CLK_KHZ
, 0, 
PLL_DESIRED_FREQ_KHZ
, 0, PLL_DESIRED_FREQ_KHZ);

40 if(
sc
)

41  
sc
;

44 
sc
 = 
	`DrvTimîInô
();

45 if(
sc
)

46  
sc
;

48 
	`DrvLL2CInôWrôeThrough
();

51 
	}
}

	@Demo/Cam378OpipeHdmi/leon_rt/app_config.h

13 #i‚de‡
APP_CONFIG_H


14 
	#APP_CONFIG_H


	)

18 
	~"mv_ty≥s.h
"

29 
öô
();

	@Demo/Cam378OpipeHdmi/leon_rt/main.c

8 
	~<°dio.h
>

9 
	~<°dboﬁ.h
>

10 
	~<DrvC¥.h
>

11 
	~<DrvDdr.h
>

12 
	~<DrvTimî.h
>

13 
	~"Opùe.h
"

14 
	~"OpùeAµs.h
"

15 
	~"i•_∑øms_wøp.h
"

16 
	~"≠p_c⁄fig.h
"

17 
	~"LcdApi.h
"

18 
	~"DrvCDCEL.h
"

19 
	~"DrvADV7513.h
"

20 
	~"DrvGpio.h
"

22 
	~"MV0212.h
"

23 
	~"brdGpioCfgs/brdMv0182R5GpioDeÁu…s.h
"

27 
	~"imx378_4L_4056x3040_Raw10_30Hz.h
"

31 
	~"CamGíîicApi.h
"

32 
	~"LcdCEA1080p60.h
"

36 
	#MAX_USED_BUF
 3

37 
	#FIRST_INCOMING_BUF_ID
 1

38 

	)

39 
	#CAM_BPP
 2

	)

40 
	#LCD_BPP
 1

	)

43 
	#IMG_W
 
ISPC_BAYER_W


	)

44 
	#IMG_H
 
ISPC_BAYER_H


	)

47 
	#O_IMG_W
 ((
IMG_W
 * 
N
 -1)/
D
 + 1)

	)

48 
	#O_IMG_H
 ((
IMG_H
 * 
N
 -1)/
D
 + 1)

	)

51 
	#LCD_WINDOW_WIDTH
 1920

	)

52 
	#LCD_WINDOW_HEIGHT
 1080

	)

54 
	#NUM_I2C_DEVS
 3

	)

61 
uöt8_t
 
	gyuvBufY
 [
MAX_USED_BUF
][ 
O_IMG_W
*
O_IMG_H
 ] 
SECTION
(".ddr.bss"Ë
ALIGNED
(8);

62 
uöt8_t
 
	gyuvBufUV
[
MAX_USED_BUF
][2*(
O_IMG_W
*
O_IMG_H
/4)] 
SECTION
(".ddr.bss"Ë
ALIGNED
(8);

63 
uöt8_t
 
	gˇmBuf
 [
MAX_USED_BUF
][
IMG_W
 * 
IMG_H
 * 
CAM_BPP
] 
SECTION
(".ddr.bss"Ë
ALIGNED
(8);

66 
uöt16_t
 
	goCúcBuffCmx7
[
O_CBUFF_H
 *
IMG_W
] 
SECTION
(".cmx.d©a"Ë
ALIGNED
(16);

67 
uöt16_t
 
	gcSigma
 [ 
IMG_W
 * 
I_CBUFF_H
 ] 
SECTION
(".cmx.d©a"Ë
ALIGNED
(16);

68 
uöt16_t
 
	gcDbyrY
 [ 
IMG_W
 * 
DBYR_Y_H
 ] 
SECTION
(".cmx.d©a"Ë
ALIGNED
(16);

69 
uöt16_t
 
	gcSh¨pY
 [ 
IMG_W
 * 
SHARP_Y_H
 ] 
SECTION
(".cmx.d©a"Ë
ALIGNED
(16);

70 
uöt8_t
 
	gcLut
 [ 
IMG_W
 * 
O_CBUFF_H
 * 3] 
SECTION
(".cmx.d©a"Ë
ALIGNED
(16);

71 
uöt8_t
 
	gcUpfúDn
[
O_IMG_W
 * 
O_CBUFF_H
 * 3] 
SECTION
(".cmx.d©a"Ë
ALIGNED
(16);

73 
OpùeMF
 
	g›MF
;

74 
OpùeRx
 
	gpRx
;

78 
GíîicCamS≥c
 *
	gˇmC⁄fig
 = &
imx378_4L_4056x3040_RAW10_30Hz_ˇmCfg
;

79 
ADV7513C⁄tfigMode_t
 
	gADV7513C⁄fig
 = 
ADV7513_1080P60
;

81 vﬁ©ûê
u32
 
	g√wCamFømeCå
 = 
FIRST_INCOMING_BUF_ID
;

83 
GíîicCamîaH™dÀ
 
	gˇmHndl
;

84 
CamU£rS≥c
 
	gu£rC⁄fig
;

85 
‰ameS≥c
 
	gˇmFømeS≥c
;

86 
‰ameBuf„r
 
	gˇmFøme
[
MAX_USED_BUF
];

87 
‰ameS≥c
 
	glcdFømeS≥c
;

88 
‰ameBuf„r
 
	glcdFøme
[
MAX_USED_BUF
];

90 
ˇŒbacksLi°Såu˘
 
	gˇŒbacks
 = {0};

94 
≠pSëP¨amsMFPùe
(
Opùe
 *
p
);

95 
≠pSëP¨amsRxPùe
(
Opùe
 *
p
);

96 
upd©eFps
();

102 
	$≠pBuûdPùeMF
()

105 
›MF
.
ö
.
cBufSigma
.
ba£
 = (
uöt32_t
)
cSigma
; opMF.ö.cBufSigma.
h
 = 
I_CBUFF_H
;

106 
›MF
.
cBufDbyrY
.
ba£
 = (
uöt32_t
)
cDbyrY
; opMF.cBufDbyrY.
h
 = 
DBYR_Y_H
;

107 
›MF
.
cBufSh¨p
.
ba£
 = (
uöt32_t
)
cSh¨pY
; opMF.cBufSh¨p.
h
 = 
SHARP_Y_H
;

108 
›MF
.
cBufLut
.
ba£
 = (
uöt32_t
)
cLut
; opMF.cBufLut.
h
 = 
O_CBUFF_H
;

110 #i‡(
CANCEL_UPFIRDN
)

111 
›MF
.
cBufPﬁy
.
ba£
 = 0x00000000;

113 
›MF
.
cBufPﬁy
.
ba£
 = (
uöt32_t
)
cUpfúDn
; opMF.cBufPﬁy.
h
 = 
O_CBUFF_H
;

116 
	`OpùeCª©eFuŒ
(&
›MF
, 
	`BPP
(2));

117 
	}
}

119 
	$¥ï¨eDrivîD©a
()

121 
ibuf
;

124 
u£rC⁄fig
.
mùiC⁄åﬁÀrNb
 = 
CAM_A1_MIPICTRL
;

125 
u£rC⁄fig
.
ª˚ivîId
 = 
SIPP_DEVICE0
;

126 
u£rC⁄fig
.
£ns‹Re£tPö
 = 
MV0212_MV0201_SENSOR_RST_GPIO
;

127 
u£rC⁄fig
.
°îeoPaúIndex
 = 
CAM_A_ADDR
;

128 
u£rC⁄fig
.
gíî©eSync
 = 
NULL
;

131 
ˇmFømeS≥c
.
width
 = 
IMG_W
;

132 
ˇmFømeS≥c
.
height
 = 
IMG_H
;

133 
ˇmFømeS≥c
.
byãsPP
 = 
CAM_BPP
;

134 
ˇmFømeS≥c
.
°ride
 = 
IMG_W
 * 
CAM_BPP
;

135 
ˇmFømeS≥c
.
ty≥
 = 
RAW16
;

138 
ibuf
 = 0; ibu‡< 
MAX_USED_BUF
;ibuf++)

140 
ˇmFøme
[
ibuf
].
p1
 = (*)
ˇmBuf
[ibuf];

141 
ˇmFøme
[
ibuf
].
p2
 = 
NULL
;

142 
ˇmFøme
[
ibuf
].
p3
 = 
NULL
;

143 
ˇmFøme
[
ibuf
].
•ec
 = 
ˇmFømeS≥c
;

146 
ˇŒbacks
.
i§CbfLi°
 = 
NULL
;

147 
ˇŒbacks
.
£ns‹CbfLi°
 = 
NULL
;

150 
lcdFømeS≥c
.
width
 = 
LCD_WINDOW_WIDTH
;

151 
lcdFømeS≥c
.
height
 = 
LCD_WINDOW_HEIGHT
;

152 
lcdFømeS≥c
.
°ride
 = 
O_IMG_W
 * 
LCD_BPP
;

153 
lcdFømeS≥c
.
byãsPP
 = 
LCD_BPP
;

154 
lcdFømeS≥c
.
ty≥
 = 
YUV420p
;

156 
ibuf
 = 0; ibu‡< 
MAX_USED_BUF
;ibuf++)

158 
lcdFøme
[
ibuf
].
•ec
 = 
lcdFømeS≥c
;

159 
lcdFøme
[
ibuf
].
p1
 = &
yuvBufY
[ibuf][0];

160 
lcdFøme
[
ibuf
].
p2
 = &
yuvBufUV
[ibuf][0];

161 
lcdFøme
[
ibuf
].
p3
 = &
yuvBufUV
[ibuf][
O_IMG_W
*
O_IMG_H
/4];

165 
	}
}

167 
‰ameBuf„r
* 
	$ÆloˇãLcdFøme
(
œyî
)

169 (Ë
œyî
;

171  ( &
lcdFøme
[(
√wCamFømeCå
 - 1Ë% 
MAX_USED_BUF
] );

172 
	}
}

174 
	$RxEofCÆlback
(
Opùe
 *
p
)

176 (Ë
p
;

178 
	`upd©eFps
();

179 
√wCamFømeCå
++;

180 
pRx
.
pOut
->
ddr
.
ba£
 = (
uöt32_t
)
ˇmBuf
[
√wCamFømeCå
 % 
MAX_USED_BUF
];

181 
	`OpùeSèπ
(&
pRx
.
p
);

183 
	}
}

186 
	$maö
()

188 
u8
 
°©us
;

189 
LCDH™dÀ
 
lcdHndl
;

190 
LCDLayîOff£t
 
lcdLayîSèπOff£t
 = {0, 0};

191 
ˇmEº‹Ty≥
 
ˇmSètus
;

192 
s32
 
bﬂrdSètus
;

194 
I2CM_Devi˚
 * 
i2c1H™dÀ
;

195 
I2CM_Devi˚
 * 
i2c2H™dÀ
;

197 
	`öô
();

199 
öt32_t
 
rc
;

200 
uöt32_t
 
ªv
;

201 
BﬂrdI2CInfo
 
öfo
[
NUM_I2C_DEVS
];

202 
BﬂrdC⁄figDesc
 
c⁄fig
[] =

205 
BRDCONFIG_GPIO
,

207 (*)
brdMV0182R5GpioCfgDeÁu…


210 
BRDCONFIG_END
,

211 
NULL


215 
rc
 = 
	`BﬂrdInô
(
c⁄fig
);

216 i‡(
rc
!=
BRDCONFIG_SUCCESS
)

218 
	`¥ötf
("Error: board initialization failed with %ld status\n",

219 
rc
);

220  
rc
;

223 
rc
 = 
	`BﬂrdGëPCBRevisi⁄
(&
ªv
);

224 i‡(
rc
!=
BRDCONFIG_SUCCESS
)

226 
	`¥ötf
("Error: board configurationÑead failed with %ld status\n",

227 
rc
);

228  
rc
;

230 
	`¥ötf
("Bﬂrd Mv0212 inôülized,Ñevisi⁄ = %lu \n", 
ªv
);

232 
bﬂrdSètus
 = 
	`BﬂrdInôExtPŒ
(
EXT_PLL_CFG_148_24_24MHZ
);

233 i‡(
bﬂrdSètus
 !
BRDCONFIG_SUCCESS
)

235 
	`¥ötf
("Error: board initialization failed with %ld status\n",

236 
bﬂrdSètus
);

239 
rc
 = 
	`BﬂrdGëI2CInfo
(
öfo
, 
NUM_I2C_DEVS
);

240 
i2c1H™dÀ
=
öfo
[1].
h™dÀr
;

241 
i2c2H™dÀ
=
öfo
[2].
h™dÀr
;

243 
	`¥ötf
("ConfiguringÅhe HDMI chip ADV7513\n");

244 
°©us
 = 
	`öôADV7513ªg
(
i2c2H™dÀ
, 
ADV7513C⁄fig
);

246 i‡(
°©us
 == 0)

247 
	`¥ötf
("ADV7513 Configured\n");

249 
	`¥ötf
("ADV7513 C⁄figuøti⁄ faûed %d \n", 
°©us
);

253 
	`swcLe⁄SëPIL
(0);

254 
	`¥ötf
("Configuring cameraánd datapath\n");

255 
	`¥ï¨eDrivîD©a
();

257 
ˇmSètus
 = 
	`CamInô
–&
ˇmHndl
, 
ˇmC⁄fig
, &
u£rC⁄fig
, &
ˇŒbacks
, 
i2c1H™dÀ
 );

258 
	`CamSëupI¡îru±s
(&
ˇmHndl
, 0, 0, 0, 
NULL
, 1, 0, 0);

259 i‡(
ˇmSètus
 !
CAM_SUCCESS
)

261 
	`¥ötf
("\¿Camî®c⁄figuøti⁄ faûed (%d).\n", 
ˇmSètus
);

265 
ˇmSètus
 = 
	`CamSèπ
–&
ˇmHndl
 );

266 i‡(
ˇmSètus
 !
CAM_SUCCESS
)

268 
	`¥ötf
("\¿Camî®ÁûedÅÿ°¨à(%d).\n", 
ˇmSètus
);

272 
	`OpùeRe£t
 ();

275 
	`OpùeCª©eRx
(&
pRx
, 
IMG_W
, 
IMG_H
 - 8,

276 
SIPP_MIPI_RX0_ID
, 
	`BPP
(2),

277 (
uöt32_t
)
oCúcBuffCmx7
, 
O_CBUFF_H
);

279 
	`≠pSëP¨amsRxPùe
(&
pRx
.
p
);

280 
pRx
.
pOut
->
ddr
.
ba£
 = (
uöt32_t
)
ˇmBuf
[
√wCamFømeCå
 % 
MAX_USED_BUF
];

281 
pRx
.
p
.
cbEndOfFøme
 = 
RxEofCÆlback
;

283 
	`≠pBuûdPùeMF
();

284 
	`≠pSëP¨amsMFPùe
(&
›MF
.
p
);

285 
	`OpùeSëSizeMF
 (&
›MF
, 
IMG_W
, 
IMG_H
);

287 
	`¥ötf
("ConfiguringÅhe LCD\n");

288 
	`LCDInô
(&
lcdHndl
, &
lcdS≥c1080p60
, 
NULL
, 
LCD1
);

289 
	`LCDInôLayî
(&
lcdHndl
, 
VL1
, &
lcdFømeS≥c
, 
lcdLayîSèπOff£t
);

290 
	`LCDSëupCÆlbacks
(&
lcdHndl
, &
ÆloˇãLcdFøme
, 
NULL
, NULL, NULL);

293 
	`LCDEnYuv422i
();

295 
	`LCDSèπ
(&
lcdHndl
);

296 
	`¥ötf
("\nStreaming ... \n");

298 
	`OpùeSèπ
(&
pRx
.
p
);

300 
u32
 
ﬁdCamFømeCå
 = 1;

304 if(
√wCamFømeCå
 !
ﬁdCamFømeCå
)

306 
ﬁdCamFømeCå
 = 
√wCamFømeCå
;

309 
›MF
.
pIn
->
ddr
.
ba£
 = (
uöt32_t
)
ˇmBuf
[
√wCamFømeCå
 % 
MAX_USED_BUF
];

310 
›MF
.
pOutY
->
ddr
.
ba£
 = (
uöt32_t
)
yuvBufY
[
√wCamFømeCå
 % 
MAX_USED_BUF
];

311 
›MF
.
pOutUV
->
ddr
.
ba£
 = (
uöt32_t
)
yuvBufUV
[
√wCamFømeCå
 % 
MAX_USED_BUF
];

313 
	`OpùeSèπ
 (&
›MF
.
p
);

314 
	`OpùeWaô
 (&
›MF
.
p
);

319 
	}
}

324 
	$upd©eFps
() {

326 c⁄° 
cMósuªI¡îvÆ
 = 10000.0;

327 
boﬁ
 
bGëTSèmp
 = 
åue
;

328 
uöt32_t
 
‰mC¡r
;

329 
tyTimeSèmp
 
timeSèmp
;

330 
uöt64_t
 
cuºTime
;

331 
cuºTimeMS
;

334 
‰mC¡r
++;

335 i‡(
bGëTSèmp
){

336 
	`DrvTimîSèπTicksCou¡
(&
timeSèmp
);

337 
bGëTSèmp
 = 
Ál£
;

340 
	`DrvTimîGëEœp£dTicks
(&
timeSèmp
, &
cuºTime
);

341 
cuºTimeMS
 = 
	`DrvTimîTicksToMs
(
cuºTime
);

343 i‡(
cuºTimeMS
 >
cMósuªI¡îvÆ
){

344 
	`¥ötf
("Sís‹ fømî©e: %.3‡FPS\n", 
‰mC¡r
 / (
cuºTimeMS
 / 1000.0f));

345 
bGëTSèmp
 = 
åue
;

346 
‰mC¡r
 = 0;

351 
	}
}

	@Demo/Cam378OpipeHdmi/leon_rt/opipe_app_cfg.c

1 
	~<°dio.h
>

2 
	~<°rög.h
>

3 
	~<Fp16C⁄vît.h
>

4 
	~"i•_∑øms_wøp.h
"

5 
	~"Opùe.h
"

6 
	~"OpùeAµs.h
"

9 
SigmaDnsCfg
 
	gsigCfg
;

10 
BlcCfg
 
	gblcCfg
;

11 
LscCfg
 
	glscCfg
;

12 
RawCfg
 
	gøwCfg
;

13 
DbyrCfg
 
	gdbyrCfg
;

14 
LtmCfg
 
	g…mCfg
;

15 
DogCfg
 
	gdogCfg
;

16 
LumaDnsCfg
 
	glumaDnsCfg
;

17 
LumaDnsRefCfg
 
	glumaDnsRefCfg
;

18 
Sh¨≥nCfg
 
	gsh¨pCfg
;

19 
ChromaGíCfg
 
	gcGíCfg
;

20 
MedünCfg
 
	gmedCfg
;

21 
ChromaDnsCfg
 
	gchrDnsCfg
;

22 
CﬁCombCfg
 
	gccCfg
;

23 
LutCfg
 
	glutCfg
;

24 
CﬁC⁄vCfg
 
	gcﬁC⁄vCfg
;

25 
UpfúdnCfg
 
	gupdnCfg0
;

26 
UpfúdnCfg
 
	gupdnCfg12
;

28 
	$≠pSëP¨amsMFPùe
(
Opùe
 *
p
)

31 
p
->
øwBôs
 = 
ISPC_BAYER_BITS
;

32 
p
->
bayîP©ã∫
 = 
BAYER_PATTERN
;

38 
p
->
pBlcCfg
 = &
blcCfg
;

39 
blcCfg
.
r
 = 
ISPC_D65_A_TL84_BLACK_LEVEL_P0
;

40 
blcCfg
.
b
 = 
ISPC_D65_A_TL84_BLACK_LEVEL_P1
;

41 
blcCfg
.
gr
 = 
ISPC_D65_A_TL84_BLACK_LEVEL_P2
;

42 
blcCfg
.
gb
 = 
ISPC_D65_A_TL84_BLACK_LEVEL_P3
;

46 
p
->
pSigmaCfg
 = &
sigCfg
;

47 
sigCfg
.
noi£Flo‹
 = 
ISPC_D65_A_TL84_SIGMA_NOISE_FLOOR
;

48 
sigCfg
.
thªsh1P0
 = 
ISPC_D65_A_TL84_SIGMA_THRESH1_P0
;

49 
sigCfg
.
thªsh2P0
 = 
ISPC_D65_A_TL84_SIGMA_THRESH2_P0
;

50 
sigCfg
.
thªsh1P1
 = 
ISPC_D65_A_TL84_SIGMA_THRESH1_P1
;

51 
sigCfg
.
thªsh2P1
 = 
ISPC_D65_A_TL84_SIGMA_THRESH2_P1
;

52 
sigCfg
.
thªsh1P2
 = 
ISPC_D65_A_TL84_SIGMA_THRESH1_P2
;

53 
sigCfg
.
thªsh2P2
 = 
ISPC_D65_A_TL84_SIGMA_THRESH2_P2
;

54 
sigCfg
.
thªsh1P3
 = 
ISPC_D65_A_TL84_SIGMA_THRESH1_P3
;

55 
sigCfg
.
thªsh2P3
 = 
ISPC_D65_A_TL84_SIGMA_THRESH2_P3
;

59 
p
->
pLscCfg
 = &
lscCfg
;

60 
lscCfg
.
lscWidth
 = 
ISPC_D65_A_TL84_LSC_GAIN_MAP_W
;

61 
lscCfg
.
lscSåide
 = 
ISPC_D65_A_TL84_LSC_GAIN_MAP_STRIDE
;

62 
lscCfg
.
lscHeight
 = 
ISPC_D65_A_TL84_LSC_GAIN_MAP_H
;

63 
lscCfg
.
pLscTabÀ
 = (
uöt16_t
*)
i•cTL84LscMesh
;

67 
p
->
pRawCfg
 = &
øwCfg
;

68 
øwCfg
.
gaöR
 = 
ISPC_TL84_RAW_GAIN_0
;

69 
øwCfg
.
gaöGr
 = 
ISPC_TL84_RAW_GAIN_1
;

70 
øwCfg
.
gaöGb
 = 
ISPC_TL84_RAW_GAIN_2
;

71 
øwCfg
.
gaöB
 = 
ISPC_TL84_RAW_GAIN_3
;

73 
øwCfg
.
˛ampGr
 = 
ISPC_D65_A_TL84_RAW_CLAMP_0
;

74 
øwCfg
.
˛ampR
 = 
ISPC_D65_A_TL84_RAW_CLAMP_1
;

75 
øwCfg
.
˛ampB
 = 
ISPC_D65_A_TL84_RAW_CLAMP_2
;

76 
øwCfg
.
˛ampGb
 = 
ISPC_D65_A_TL84_RAW_CLAMP_3
;

78 
øwCfg
.
grgbImbÆPœtD¨k
 = 
ISPC_D65_A_TL84_GRGB_IMBAL_PLAT_DARK
;

79 
øwCfg
.
grgbImbÆDeˇyD¨k
 = 
ISPC_D65_A_TL84_GRGB_IMBAL_DECAY_DARK
;

80 
øwCfg
.
grgbImbÆPœtBright
 = 
ISPC_D65_A_TL84_GRGB_IMBAL_PLAT_BRIGHT
;

81 
øwCfg
.
grgbImbÆDeˇyBright
 = 
ISPC_D65_A_TL84_GRGB_IMBAL_DECAY_BRIGHT
;

83 
øwCfg
.
grgbImbÆThr
 = 
ISPC_D65_A_TL84_GRGB_IMBAL_THRESHOLD
;

85 
øwCfg
.
dpcAÕhaHŸG
 = 
ISPC_D65_A_TL84_BAD_PIX_ALPHA_G_HOT
;

86 
øwCfg
.
dpcAÕhaHŸRb
 = 
ISPC_D65_A_TL84_BAD_PIX_ALPHA_RB_HOT
;

87 
øwCfg
.
dpcAÕhaCﬁdG
 = 
ISPC_D65_A_TL84_BAD_PIX_ALPHA_G_COLD
;

88 
øwCfg
.
dpcAÕhaCﬁdRb
 = 
ISPC_D65_A_TL84_BAD_PIX_ALPHA_RB_COLD
;

89 
øwCfg
.
dpcNoi£Levñ
 = 
ISPC_D65_A_TL84_BAD_PIX_NOISE_LEVEL
;

93 
p
->
pDbyrCfg
 = &
dbyrCfg
;

94 
dbyrCfg
.
dew‹mGødõ¡Mul
 = 
ISPC_D65_A_TL84_DEMOSAIC_MIX_GRADIENT_MUL
;

95 
dbyrCfg
.
dew‹mSl›e
 = 
ISPC_D65_A_TL84_DEMOSAIC_MIX_SLOPE
;

96 
dbyrCfg
.
dew‹mOff£t
 = 
ISPC_D65_A_TL84_DEMOSAIC_MIX_OFFSET
;

97 
dbyrCfg
.
lumaWeightR
 = 
ISPC_D65_A_TL84_DEMOSAIC_LUMA_WEIGHT_RED
;

98 
dbyrCfg
.
lumaWeightG
 = 
ISPC_D65_A_TL84_DEMOSAIC_LUMA_WEIGHT_GREEN
;

99 
dbyrCfg
.
lumaWeightB
 = 
ISPC_D65_A_TL84_DEMOSAIC_LUMA_WEIGHT_BLUE
;

103 
p
->
pLtmCfg
 = &
…mCfg
;

104 
…mCfg
.
thr
 = 
ISPC_D65_A_TL84_LTM_FILTER_TH1
;

107 
curve
, 
poöt
, 
ªgoff
;

108 
ªgoff
 = 0;

109 
curve
 = 0; curve < 8; curve++) {

110 
poöt
 = 0;Öoint < 16;Öoint += 2) {

111 
off
 = 
curve
 + 
poöt
 * 8;

112 
…mCfg
.
curves
[
off
 ] = 
i•cLtmCurves
[off] * 0xfff;

113 
…mCfg
.
curves
[
off
+8] = 
i•cLtmCurves
[off+8] * 0xfff;

114 
ªgoff
 += 4;

120 
p
->
pDogCfg
 = &
dogCfg
;

121 
dogCfg
.
thr
 = 
ISPC_D65_A_TL84_DOG_THR
;

122 
dogCfg
.
°ªngth
 = 
ISPC_D65_A_TL84_DOG_STRENGTH
;

123 
dogCfg
.
sigma11
 = 
ISPC_D65_A_TL84_DOG_SIGMA11
;

124 
dogCfg
.
sigma15
 = 
ISPC_D65_A_TL84_DOG_SIGMA15
;

125 
	`mem˝y
(
dogCfg
.
c€ffs11
, 
dogC€ffs11
, (dogCoeffs11));

126 
	`mem˝y
(
dogCfg
.
c€ffs15
, 
dogC€ffs15
, (dogCoeffs15));

130 
p
->
pLumaDnsCfg
 = &
lumaDnsCfg
;

131 
lumaDnsCfg
.
bôpos
 = 
ISPC_D65_A_TL84_LUMA_DNS_BITPOS
;

132 
lumaDnsCfg
.
Æpha
 = 
ISPC_D65_A_TL84_LUMA_DNS_ALPHA
;

133 
lumaDnsCfg
.
f2
 = 
ISPC_D65_A_TL84_LUMA_DNS_F2
;

134 
lumaDnsCfg
.
°ªngth
 = 
ISPC_D65_A_TL84_LUMA_DNS_STRENGTH
;

135 
	`mem˝y
(
lumaDnsCfg
.
lut
, 
i•cLumaDnsLut
, (ispcLumaDnsLut));

137 
p
->
pLumaDnsRefCfg
 = &
lumaDnsRefCfg
;

138 
lumaDnsRefCfg
.
shi·
 = 
ISPC_D65_A_TL84_LUMA_DNS_REF_SHIFT
;

139 
lumaDnsRefCfg
.
gamma
 = 
ISPC_D65_A_TL84_LUMA_DNS_GAMMA
;

140 
lumaDnsRefCfg
.
™gÀ_of_võw
 = 
ISPC_D65_A_TL84_LUMA_DNS_ANGLE_OF_VIEW
;

141 
	`mem˝y
(
lumaDnsRefCfg
.
lutGamma0_32
 , 
i•cGammaLut0_32
 , (ispcGammaLut0_32 ));

142 
	`mem˝y
(
lumaDnsRefCfg
.
lutGamma32_255
, 
i•cGammaLut32_255
, (ispcGammaLut32_255));

143 
	`mem˝y
(
lumaDnsRefCfg
.
lutDi°
 , 
i•cYDnsDi°Lut
 , (ispcYDnsDistLut ));

147 
p
->
pSh¨pCfg
 = &
sh¨pCfg
;

148 
sh¨pCfg
.
sigma
 = 
ISPC_D65_A_TL84_SHARP_SIGMA
;

149 
sh¨pCfg
.
°ªngthLighãn
 = 
ISPC_D65_A_TL84_SHARP_STRENGTH_LIGHTEN
;

150 
sh¨pCfg
.
°ªngthD¨kí
 = 
ISPC_D65_A_TL84_SHARP_STRENGTH_DARKEN
;

151 
sh¨pCfg
.
möThr
 = 
	`f32Tof16
(
ISPC_D65_A_TL84_SHARP_MIN_THR
);

152 
sh¨pCfg
.
Æpha
 = 
ISPC_D65_A_TL84_SHARP_ALPHA
;

153 
sh¨pCfg
.
undîshoŸ
 = 
ISPC_D65_A_TL84_SHARP_UNDERSHOOT
;

154 
sh¨pCfg
.
ovîshoŸ
 = 
ISPC_D65_A_TL84_SHARP_OVERSHOOT
;

156 
sh¨pCfg
.
øngeSt›0
 = 
ISPC_D65_A_TL84_SHARP_RANGE_STOP_0
;

157 
sh¨pCfg
.
øngeSt›1
 = 
ISPC_D65_A_TL84_SHARP_RANGE_STOP_1
;

158 
sh¨pCfg
.
øngeSt›2
 = 
ISPC_D65_A_TL84_SHARP_RANGE_STOP_2
;

159 
sh¨pCfg
.
øngeSt›3
 = 
ISPC_D65_A_TL84_SHARP_RANGE_STOP_3
;

161 
sh¨pCfg
.
sh¨≥nC€ffs
[0] = 
ISPC_D65_A_TL84_SHARP_COEF0
;

162 
sh¨pCfg
.
sh¨≥nC€ffs
[1] = 
ISPC_D65_A_TL84_SHARP_COEF1
;

163 
sh¨pCfg
.
sh¨≥nC€ffs
[2] = 
ISPC_D65_A_TL84_SHARP_COEF2
;

164 
sh¨pCfg
.
sh¨≥nC€ffs
[3] = 
ISPC_D65_A_TL84_SHARP_COEF3
;

168 
p
->
pChrGíCfg
 = &
cGíCfg
;

169 
cGíCfg
.
deßtOff£t
 = 
ISPC_D65_A_TL84_CGEN_DESAT_OFFSET
;

170 
cGíCfg
.
deßtSl›e
 = 
ISPC_D65_A_TL84_CGEN_DESAT_SLOPE
;

171 
cGíCfg
.
p‰Såígth
 = 
ISPC_D65_A_TL84_CGEN_PFR_STRENGTH
;

173 
cGíCfg
.
lumaC€ffR
 = 
ISPC_D65_A_TL84_CGEN_LUMA_COEFF_R
;

174 
cGíCfg
.
lumaC€ffG
 = 
ISPC_D65_A_TL84_CGEN_LUMA_COEFF_G
;

175 
cGíCfg
.
lumaC€ffB
 = 
ISPC_D65_A_TL84_CGEN_LUMA_COEFF_B
;

177 
cGíCfg
.
ïsû⁄
 = 
ISPC_D65_A_TL84_CGEN_EPSILON
;

178 
cGíCfg
.
kr
 = 
ISPC_D65_A_TL84_CGEN_KR
;

179 
cGíCfg
.
kg
 = 
ISPC_D65_A_TL84_CGEN_KG
;

180 
cGíCfg
.
kb
 = 
ISPC_D65_A_TL84_CGEN_KB
;

184 
p
->
pMedCfg
 = &
medCfg
;

185 
medCfg
.
kî√lSize
 = 
ISPC_D65_A_TL84_CHROMA_MEDIAN_SIZE
;

186 
medCfg
.
¶›e
 = 
ISPC_D65_A_TL84_CHROMA_MEDIAN_MIX_SLOPE
;

187 
medCfg
.
off£t
 = 
ISPC_D65_A_TL84_CHROMA_MEDIAN_MIX_OFFSET
;

191 
p
->
pChromaDnsCfg
 = &
chrDnsCfg
;

193 
chrDnsCfg
.
hE«b
 = 
ISPC_D65_A_TL84_CHROMA_DNS_H_ENAB
;

194 
chrDnsCfg
.
limô
 = 
ISPC_D65_A_TL84_CHROMA_DNS_LIMIT
;

195 
chrDnsCfg
.
gªyDeßtOff£t
 = 
ISPC_D65_A_TL84_GREY_DESAT_OFFSET
;

196 
chrDnsCfg
.
gªyDeßtSl›e
 = 
ISPC_D65_A_TL84_GREY_DESAT_SLOPE
;

198 
chrDnsCfg
.
th_r
 = 
ISPC_D65_A_TL84_CHROMA_DNS_TH_R
;

199 
chrDnsCfg
.
th_g
 = 
ISPC_D65_A_TL84_CHROMA_DNS_TH_G
;

200 
chrDnsCfg
.
th_b
 = 
ISPC_D65_A_TL84_CHROMA_DNS_TH_B
;

202 
chrDnsCfg
.
gªyCb
 = 
ISPC_D65_A_TL84_GREY_POINT_B
;

203 
chrDnsCfg
.
gªyCg
 = 
ISPC_D65_A_TL84_GREY_POINT_G
;

204 
chrDnsCfg
.
gªyCr
 = 
ISPC_D65_A_TL84_GREY_POINT_R
;

206 
chrDnsCfg
.
c⁄vC€ffC‹√r
 = 
i•cLow∑ssKî√l
[0];

207 
chrDnsCfg
.
c⁄vC€ffEdge
 = 
i•cLow∑ssKî√l
[1];

208 
chrDnsCfg
.
c⁄vC€ffCíãr
 = 
i•cLow∑ssKî√l
[4];

212 
p
->
pCﬁCombCfg
 = &
ccCfg
;

213 
ccCfg
.
kr
 = 
ISPC_D65_A_TL84_CC_KR
;

214 
ccCfg
.
kg
 = 
ISPC_D65_A_TL84_CC_KG
;

215 
ccCfg
.
kb
 = 
ISPC_D65_A_TL84_CC_KB
;

216 
	`mem˝y
(
ccCfg
.
ccm
 , 
i•c_TL84_CCM
 , (ispc_TL84_CCM ));

217 
	`mem˝y
(
ccCfg
.
ccmOff
, 
i•cCCMOff
, (ispcCCMOff));

221 
p
->
pLutCfg
 = &
lutCfg
;

222 
lutCfg
.
èbÀ
 = 
gammaLutFp16
;

223 
lutCfg
.
size
 = 512;

224 
lutCfg
.
rgnSize
[0] = 0x55555555;

225 
lutCfg
.
rgnSize
[1] = 0x55555555;

227 
p
->
pCﬁC⁄vCfg
 = &
cﬁC⁄vCfg
;

228 
	`mem˝y
(
cﬁC⁄vCfg
.
m©
 , 
i•cCSC
 , (ispcCSC ));

229 
	`mem˝y
(
cﬁC⁄vCfg
.
off£t
, 
i•cCSCOff
, (ispcCSCOff));

233 
p
->
pUpfúdn0Cfg
 = &
updnCfg0
;

234 
updnCfg0
.
vN
 = 
N
;

235 
updnCfg0
.
vD
 = 
D
;

236 
updnCfg0
.
hN
 = 
N
;

237 
updnCfg0
.
hD
 = 
D
;

238 
updnCfg0
.
kîSz
 = 7;

239 
updnCfg0
.
vC€fs
 = vCoefs;

240 
updnCfg0
.
hC€fs
 = hCoefs;

244 
p
->
pUpfúdn12Cfg
 = &
updnCfg12
;

245 
updnCfg12
.
vN
 = 
N
;

246 
updnCfg12
.
vD
 = (
D
 << 1);

247 
updnCfg12
.
hN
 = 
N
;

248 
updnCfg12
.
hD
 = (
D
 << 1);

249 
updnCfg12
.
kîSz
 = 7;

250 
updnCfg12
.
vC€fs
 = vCoefs;

251 
updnCfg12
.
hC€fs
 = hCoefs;

255 
	`OpùeDeÁu…Cfg
(
p
, 
SIPP_SIGMA_ID
 );

256 
	`OpùeDeÁu…Cfg
(
p
, 
SIPP_RAW_ID
 );

257 
	`OpùeDeÁu…Cfg
(
p
, 
SIPP_DBYR_ID
 );

258 
	`OpùeDeÁu…Cfg
(
p
, 
SIPP_DOGL_ID
 );

259 
	`OpùeDeÁu…Cfg
(
p
, 
SIPP_SHARPEN_ID
);

260 
	`OpùeDeÁu…Cfg
(
p
, 
SIPP_CGEN_ID
 );

261 
	`OpùeDeÁu…Cfg
(
p
, 
SIPP_MED_ID
 );

262 
	`OpùeDeÁu…Cfg
(
p
, 
SIPP_CHROMA_ID
 );

263 
	`OpùeDeÁu…Cfg
(
p
, 
SIPP_CC_ID
 );

264 
	`OpùeDeÁu…Cfg
(
p
, 
SIPP_LUT_ID
 );

265 
	}
}

	@Demo/Cam378OpipeHdmi/leon_rt/opipe_app_cfg_rx.c

1 
	~<°dio.h
>

2 
	~"Opùe.h
"

3 
	~"i•_∑øms_wøp.h
"

5 
MùiRxCfg
 
	gmùiCfg
;

8 
	$≠pSëP¨amsRxPùe
(
Opùe
 *
p
)

12 
p
->
øwBôs
 = 
ISPC_BAYER_BITS
;

13 
p
->
bayîP©ã∫
 = 
BAYER_PATTERN
;

16 
p
->
pMùiRxCfg
[0] = &
mùiCfg
;

17 
mùiCfg
.
cfg
 = 1;

18 
mùiCfg
.
xSèπWidth
 [0] = (
p
->
width
 << 16) | 0x0000;

19 
mùiCfg
.
ySèπHeight
[0] = ((
p
->
height
 - 2) << 16) | 0x0000;

20 
mùiCfg
.
£l01
 = 0xF << 8;

21 
mùiCfg
.
mask
 [0] = (1 << 
ISPC_BAYER_BITS
) - 1;

22 
	}
}

	@Demo/Cam378OpipeHdmi/leon_rt/params/isp_gamma_lut_fp16.c

1 
	~<°döt.h
>

2 
	~"i•_∑øms_wøp.h
"

7 
uöt16_t
 
	ggammaLutFp16
[512*4] 
ALIGNED
(8) = {

	@Demo/Cam378OpipeHdmi/leon_rt/params/isp_params_pp.c

1 
	~<°döt.h
>

3 
	~"i•_∑øms_wøp.h
"

6 
uöt16_t
 
	gi•cD65LscMesh
[
ISPC_D65_A_TL84_LSC_GAIN_MAP_STRIDE
 * 
ISPC_D65_A_TL84_LSC_GAIN_MAP_H
] 
ALIGNED
(8) =

42 
uöt16_t
 
	gi•cALscMesh
[
ISPC_D65_A_TL84_LSC_GAIN_MAP_STRIDE
 * 
ISPC_D65_A_TL84_LSC_GAIN_MAP_H
] 
ALIGNED
(8) =

78 
uöt16_t
 
	gi•cTL84LscMesh
[
ISPC_D65_A_TL84_LSC_GAIN_MAP_STRIDE
 * 
ISPC_D65_A_TL84_LSC_GAIN_MAP_H
] 
ALIGNED
(8) =

	@Demo/Cam378OpipeHdmi/leon_rt/params/isp_params_pp.h

3 
	#ISPC_INPUT_IMAGE
 "S˚√_2800K_5L_1_10bô.øw"

	)

6 
	#ISPC_BAYER_BITS
 10

	)

8 
	#ISPC_D65_A_TL84_BLACK_LEVEL_P0
 64

	)

9 
	#ISPC_D65_A_TL84_BLACK_LEVEL_P1
 64

	)

10 
	#ISPC_D65_A_TL84_BLACK_LEVEL_P2
 64

	)

11 
	#ISPC_D65_A_TL84_BLACK_LEVEL_P3
 64

	)

13 
	#ISPC_D65_A_TL84_SIGMA_NOISE_FLOOR
 0

	)

14 
	#ISPC_D65_A_TL84_SIGMA_THRESH1_P0
 0

	)

15 
	#ISPC_D65_A_TL84_SIGMA_THRESH2_P0
 0

	)

16 
	#ISPC_D65_A_TL84_SIGMA_THRESH1_P1
 0

	)

17 
	#ISPC_D65_A_TL84_SIGMA_THRESH2_P1
 0

	)

18 
	#ISPC_D65_A_TL84_SIGMA_THRESH1_P2
 0

	)

19 
	#ISPC_D65_A_TL84_SIGMA_THRESH2_P2
 0

	)

20 
	#ISPC_D65_A_TL84_SIGMA_THRESH1_P3
 0

	)

21 
	#ISPC_D65_A_TL84_SIGMA_THRESH2_P3
 0

	)

24 
	#ISPC_D65_A_TL84_LSC_GAIN_MAP_W
 34

	)

25 
	#ISPC_D65_A_TL84_LSC_GAIN_MAP_H
 26

	)

26 
	#ISPC_D65_A_TL84_LSC_GAIN_MAP_STRIDE
 40

	)

28 
uöt16_t
 
i•cD65LscMesh
[
ISPC_D65_A_TL84_LSC_GAIN_MAP_STRIDE
 * 
ISPC_D65_A_TL84_LSC_GAIN_MAP_H
];

29 
uöt16_t
 
i•cALscMesh
[
ISPC_D65_A_TL84_LSC_GAIN_MAP_STRIDE
 * 
ISPC_D65_A_TL84_LSC_GAIN_MAP_H
] ;

30 
uöt16_t
 
i•cTL84LscMesh
[
ISPC_D65_A_TL84_LSC_GAIN_MAP_STRIDE
 * 
ISPC_D65_A_TL84_LSC_GAIN_MAP_H
] ;

33 
	#ISPC_D65_A_TL84_BAD_PIX_ALPHA_G_HOT
 0x06

34 
	#ISPC_D65_A_TL84_BAD_PIX_ALPHA_RB_HOT
 0x06

35 
	#ISPC_D65_A_TL84_BAD_PIX_ALPHA_G_COLD
 0x06

36 
	#ISPC_D65_A_TL84_BAD_PIX_ALPHA_RB_COLD
 0x06

37 
	#ISPC_D65_A_TL84_BAD_PIX_NOISE_LEVEL
 0x0000

38 

	)

40 
	#ISPC_D65_A_TL84_GRGB_IMBAL_PLAT_DARK
 60

	)

41 
	#ISPC_D65_A_TL84_GRGB_IMBAL_DECAY_DARK
 75

	)

42 
	#ISPC_D65_A_TL84_GRGB_IMBAL_PLAT_BRIGHT
 300

	)

43 
	#ISPC_D65_A_TL84_GRGB_IMBAL_DECAY_BRIGHT
 360

	)

44 
	#ISPC_D65_A_TL84_GRGB_IMBAL_THRESHOLD
 16

45 

	)

46 
	#ISPC_D65_RAW_GAIN_0
 0x026f

47 
	#ISPC_D65_RAW_GAIN_1
 0x0111

48 
	#ISPC_D65_RAW_GAIN_2
 0x0111

49 
	#ISPC_D65_RAW_GAIN_3
 0x016b

50 

	)

51 
	#ISPC_A_RAW_GAIN_0
 0x016b

52 
	#ISPC_A_RAW_GAIN_1
 0x0111

53 
	#ISPC_A_RAW_GAIN_2
 0x0111

54 
	#ISPC_A_RAW_GAIN_3
 0x0293

55 

	)

56 
	#ISPC_TL84_RAW_GAIN_0
 0x01d3

57 
	#ISPC_TL84_RAW_GAIN_1
 0x0111

58 
	#ISPC_TL84_RAW_GAIN_2
 0x0111

59 
	#ISPC_TL84_RAW_GAIN_3
 0x01f7

60 

	)

62 
	#ISPC_D65_A_TL84_RAW_CLAMP_0
 0x03ff

63 
	#ISPC_D65_A_TL84_RAW_CLAMP_1
 0x03ff

64 
	#ISPC_D65_A_TL84_RAW_CLAMP_2
 0x03ff

65 
	#ISPC_D65_A_TL84_RAW_CLAMP_3
 0x03ff

66 

	)

67 
	#ISPC_D65_A_TL84_RAW_OUTPUT_BITS
 10

	)

	@Demo/Cam378OpipeHdmi/leon_rt/params/isp_params_still.c

1 
	~<°döt.h
>

3 
	~"i•_∑øms_°ûl.h
"

5 
uöt8_t
 
	gi•cLow∑ssKî√l
[9] = {

11 
uöt8_t
 
	gi•cLumaDnsLut
[32] = {

16 
uöt8_t
 
	gi•cYDnsDi°Lut
[256] 
__©åibuã__
((
Æig√d
(8))) = {

51 
uöt8_t
 
	gi•cGammaLut0_32
[9] = {

55 
uöt8_t
 
	gi•cGammaLut32_255
[9] = {

60 
	gi•cLtmCurves
[16*8] = {

80 
uöt8_t
 
	gdogC€ffs11
[6] = {

83 
uöt8_t
 
	gdogC€ffs15
[8] = {

88 
	gi•c_D65_CCM
[9] = {

95 
	gi•c_A_CCM
[9] = {

102 
	gi•c_TL84_CCM
[9] = {

108 
	gi•cCCMOff
[3] = {

112 
uöt16_t
 
	glut3d
[16*16*16*4] = {

372 
	gi•cGammaTabÀ
[8192] = {

1400 
	gi•cCSC
[9] = {

1406 
	gi•cCSCOff
[3] = {

1411 
uöt8_t
 
	ghC€fs
[] 
__©åibuã__
((
Æig√d
(8))) = {

1422 
uöt8_t
 
	gvC€fs
[] 
__©åibuã__
((
Æig√d
(8))) = {

	@Demo/Cam378OpipeHdmi/leon_rt/params/isp_params_still.h

4 
	#ISPC_BAYER_BITS_STILL
 10

	)

7 
	#ISPC_D65_A_TL84_DEMOSAIC_MIX_SLOPE
 1800

	)

8 
	#ISPC_D65_A_TL84_DEMOSAIC_MIX_OFFSET
 254

	)

9 
	#ISPC_D65_A_TL84_DEMOSAIC_MIX_GRADIENT_MUL
 238

	)

10 
	#ISPC_D65_A_TL84_DEMOSAIC_LUMA_WEIGHT_RED
 64

	)

11 
	#ISPC_D65_A_TL84_DEMOSAIC_LUMA_WEIGHT_GREEN
 127

	)

12 
	#ISPC_D65_A_TL84_DEMOSAIC_LUMA_WEIGHT_BLUE
 64

	)

15 
	#ISPC_D65_A_TL84_CGEN_EPSILON
 2

	)

16 
	#ISPC_D65_A_TL84_CGEN_KR
 106

	)

17 
	#ISPC_D65_A_TL84_CGEN_KG
 191

	)

18 
	#ISPC_D65_A_TL84_CGEN_KB
 149

	)

19 
	#ISPC_D65_A_TL84_CGEN_LUMA_COEFF_R
 64

	)

20 
	#ISPC_D65_A_TL84_CGEN_LUMA_COEFF_G
 127

	)

21 
	#ISPC_D65_A_TL84_CGEN_LUMA_COEFF_B
 64

	)

22 
	#ISPC_D65_A_TL84_CGEN_PFR_STRENGTH
 80

	)

23 
	#ISPC_D65_A_TL84_CGEN_DESAT_OFFSET
 0

	)

24 
	#ISPC_D65_A_TL84_CGEN_DESAT_SLOPE
 232

	)

27 
	#ISPC_D65_A_TL84_CHROMA_MEDIAN_SIZE
 7

	)

30 
	#ISPC_D65_A_TL84_CHROMA_MEDIAN_MIX_SLOPE
 166

	)

31 
	#ISPC_D65_A_TL84_CHROMA_MEDIAN_MIX_OFFSET
 3

	)

34 
uöt8_t
 
i•cLow∑ssKî√l
[9];

37 
	#ISPC_D65_A_TL84_SHARP_SIGMA
 0.643838

	)

38 
	#ISPC_D65_A_TL84_SHARP_STRENGTH_DARKEN
 1.933594

	)

39 
	#ISPC_D65_A_TL84_SHARP_STRENGTH_LIGHTEN
 1.223633

	)

40 
	#ISPC_D65_A_TL84_SHARP_ALPHA
 0.003012

	)

41 
	#ISPC_D65_A_TL84_SHARP_OVERSHOOT
 1.023438

	)

42 
	#ISPC_D65_A_TL84_SHARP_UNDERSHOOT
 0.921387

	)

43 
	#ISPC_D65_A_TL84_SHARP_RANGE_STOP_0
 0.000000

	)

44 
	#ISPC_D65_A_TL84_SHARP_RANGE_STOP_1
 0.000408

	)

45 
	#ISPC_D65_A_TL84_SHARP_RANGE_STOP_2
 0.991699

	)

46 
	#ISPC_D65_A_TL84_SHARP_RANGE_STOP_3
 0.999023

	)

47 
	#ISPC_D65_A_TL84_SHARP_MIN_THR
 0.000375

	)

48 
	#ISPC_D65_A_TL84_SHARP_COEF0
 0.070159

	)

49 
	#ISPC_D65_A_TL84_SHARP_COEF1
 0.131075

	)

50 
	#ISPC_D65_A_TL84_SHARP_COEF2
 0.190713

	)

51 
	#ISPC_D65_A_TL84_SHARP_COEF3
 0.216106

	)

54 
	#ISPC_D65_A_TL84_LUMA_DNS_STRENGTH
 22.750000

	)

55 
	#ISPC_D65_A_TL84_LUMA_DNS_ALPHA
 72

56 
	#ISPC_D65_A_TL84_LUMA_DNS_GAMMA
 0.700000

	)

57 
	#ISPC_D65_A_TL84_LUMA_DNS_ANGLE_OF_VIEW
 25.000000

	)

63 
	#ISPC_D65_A_TL84_LUMA_DNS_F2
 0x00000000

	)

64 
	#ISPC_D65_A_TL84_LUMA_DNS_BITPOS
 7

	)

66 
uöt8_t
 
i•cLumaDnsLut
[32];

68 
uöt8_t
 
i•cYDnsDi°Lut
[256];

70 
uöt8_t
 
i•cGammaLut0_32
[9];

71 
uöt8_t
 
i•cGammaLut32_255
[9];

73 
	#ISPC_D65_A_TL84_LUMA_DNS_REF_SHIFT
 15

	)

75 
i•cLtmCurves
[16*8];

78 
	#ISPC_D65_A_TL84_LTM_FILTER_TH1
 32

	)

81 
	#ISPC_D65_A_TL84_DOG_THR
 0

	)

82 
	#ISPC_D65_A_TL84_DOG_STRENGTH
 0

	)

83 
	#ISPC_D65_A_TL84_DOG_SIGMA11
 1.5

	)

84 
	#ISPC_D65_A_TL84_DOG_SIGMA15
 4.5

	)

86 
uöt8_t
 
dogC€ffs11
[6];

87 
uöt8_t
 
dogC€ffs15
[8];

90 
	#ISPC_D65_A_TL84_CHROMA_DNS_TH_R
 6

	)

91 
	#ISPC_D65_A_TL84_CHROMA_DNS_TH_G
 7

	)

92 
	#ISPC_D65_A_TL84_CHROMA_DNS_TH_B
 8

	)

93 
	#ISPC_D65_A_TL84_CHROMA_DNS_LIMIT
 7

	)

94 
	#ISPC_D65_A_TL84_CHROMA_DNS_H_ENAB
 1

	)

97 
	#ISPC_D65_A_TL84_GREY_DESAT_OFFSET
 0

	)

98 
	#ISPC_D65_A_TL84_GREY_DESAT_SLOPE
 203

	)

99 
	#ISPC_D65_A_TL84_GREY_POINT_R
 106

	)

100 
	#ISPC_D65_A_TL84_GREY_POINT_G
 191

	)

101 
	#ISPC_D65_A_TL84_GREY_POINT_B
 149

	)

105 
	#ISPC_D65_A_TL84_CC_KR
 615

	)

106 
	#ISPC_D65_A_TL84_CC_KG
 342

	)

107 
	#ISPC_D65_A_TL84_CC_KB
 438

	)

109 
i•c_D65_CCM
[9];

110 
i•c_A_CCM
[9];

111 
i•c_TL84_CCM
[9];

113 
i•cCCMOff
[3];

115 
uöt16_t
 
lut3d
[16*16*16*4];

117 
i•cGammaTabÀ
[8192];

118 
i•cCSC
[9];

120 
i•cCSCOff
[3];

123 
	#N
 1

124 
	#D
 2

125 
uöt8_t
 
hC€fs
[];

126 
uöt8_t
 
vC€fs
[];

	)

	@Demo/Cam378OpipeHdmi/leon_rt/params/isp_params_wrap.h

1 #i‚de‡
__ISP_PARAMS_WRAP_H__


2 
	#__ISP_PARAMS_WRAP_H__


	)

5 #i‡
deföed
(
__•¨c
)

6 
	#ALIGNED
(
x
Ë
	`__©åibuã__
((
	`Æig√d
(x)))

	)

8 
	#ALIGNED
(
x
)

10 

	)

13 
	#BAYER_PATTERN
 
RGGB


	)

16 
	~"i•_∑øms_µ.h
"

19 #unde‡
ISPC_BAYER_W


20 #unde‡
ISPC_BAYER_H


22 
	#ISPC_BAYER_W
 4032

	)

23 
	#ISPC_BAYER_H
 3048

	)

26 
	~"i•_∑øms_°ûl.h
"

29 #unde‡
ISPC_BAYER_W_STILL


30 #unde‡
ISPC_BAYER_H_STILL


31 
	#ISPC_BAYER_W_STILL
 
ISPC_BAYER_W


	)

32 
	#ISPC_BAYER_H_STILL
 
ISPC_BAYER_H


	)

36 
	#GammaLutTabÀ
 (512 * 4)

	)

37 
uöt16_t
 
gammaLutFp16
[
GammaLutTabÀ
];

	@Demo/CamOpipeDebayerHdmi/leon/app_config.c

13 
	~"≠p_c⁄fig.h
"

14 
	~"OsDrvC¥.h
"

15 
	~"DrvDdr.h
"

16 
	~"as£π.h
"

17 
	~"ªgi°îsMyrüd.h
"

18 
	~"DrvRegUtûs.h
"

19 
	~"DrvGpioDeföes.h
"

20 
	~"DrvGpio.h
"

21 
	~"ªgi°îsMyrüd.h
"

22 
	~"brdGpioCfgs/brdMv0182R2GpioDeÁu…s.h
"

23 
	~"DrvShaveL2Cache.h
"

24 
	~"OsDrvTimî.h
"

28 
	#SYS_CLK_KHZ
 12000

29 

	)

30 
	#L2CACHE_CFG
 (
SHAVE_L2CACHE_NORMAL_MODE
)

	)

31 
	#CLOCKS_MIPICFG
 (
AUX_CLK_MASK_MIPI_ECFG
 | 
AUX_CLK_MASK_MIPI_CFG
)

	)

36 
u32
 
__l2_c⁄fig
 
__©åibuã__
((
£˘i⁄
(".l2.mode"))Ë
L2CACHE_CFG
;

40 
tyAuxClkDividîCfg
 
	gauxClk
[] =

43 .
auxClockE«bÀMask
 = 
AUX_CLK_MASK_MEDIA
,

44 .
	gauxClockSour˚
 = 
CLK_SRC_SYS_CLK
,

45 .
	gauxClockDivNumî©‹
 = 1,

46 .
	gauxClockDivDíomö©‹
 = 1,

49 .
	gauxClockE«bÀMask
 = (
AUX_CLK_MASK_LCD
),

50 .
	gauxClockSour˚
 = 
CLK_SRC_SYS_CLK
,

51 .
	gauxClockDivNumî©‹
 = 1,

52 .
	gauxClockDivDíomö©‹
 = 1,

55 .
	gauxClockE«bÀMask
 = 
CLOCKS_MIPICFG
,

56 .
	gauxClockSour˚
 = 
CLK_SRC_SYS_CLK
,

57 .
	gauxClockDivNumî©‹
 = 1,

58 .
	gauxClockDivDíomö©‹
 = 18,

64 
tySocClockC⁄fig
 
	g˛ocksC⁄fig
 =

66 .
ªfClk0I≈utKhz
 = 
SYS_CLK_KHZ
 ,

67 .
	gªfClk1I≈utKhz
 = 0 ,

68 .
	gèrgëPŒ0FªqKhz
 = 580000,

69 .
	gèrgëPŒ1FªqKhz
 = 0,

70 .
	g˛kSrcPŒ1
 = 
CLK_SRC_REFCLK0
,

71 .
	gma°îClkDivNumî©‹
 = 1,

72 .
	gma°îClkDivDíomö©‹
 = 1,

73 .
	gcssDssClockE«bÀMask
 = 
DEFAULT_CORE_CSS_DSS_CLOCKS
,

74 .
	gu∑ClockE«bÀMask
 = 
DEFAULT_UPA_CLOCKS
,

75 .
	gmssClockE«bÀMask
 = 
MSS_CLOCKS
,

76 .
	gsùpClockE«bÀMask
 = 
OPIPE_CLOCKS
,

77 .
	gpAuxClkCfg
 = 
auxClk
,

85 
	$öôClocksAndMem‹y
()

87 
i
;

89 
	`OsDrvC¥Inô
();

90 
	`OsDrvC¥O≥n
();

92 
	`DrvC¥SysDevi˚A˘i⁄
(
SIPP_DOMAIN
, 
ASSERT_RESET
, 
DEV_SIPP_MIPI
 | 
DEV_SIPP_APB_SLV
 | 
DEV_SIPP_MIPI_RX0
 | 
DEV_SIPP_MIPI_RX1
 );

93 
	`DrvC¥SysDevi˚A˘i⁄
(
MSS_DOMAIN
, 
ASSERT_RESET
, 
DEV_MSS_SIPP
 | 
DEV_MSS_AMC
 | 
DEV_MSS_LCD
);

95 
	`OsDrvC¥SëupClocks
(&
˛ocksC⁄fig
);

97 
	`DrvC¥SysDevi˚A˘i⁄
(
MSS_DOMAIN
, 
DEASSERT_RESET
, -1);

98 
	`DrvC¥SysDevi˚A˘i⁄
(
CSS_DOMAIN
, 
DEASSERT_RESET
, -1);

99 
	`DrvC¥SysDevi˚A˘i⁄
(
SIPP_DOMAIN
, 
DEASSERT_RESET
, -1);

100 
	`DrvC¥SysDevi˚A˘i⁄
(
UPA_DOMAIN
, 
DEASSERT_RESET
, -1);

102 
	`OsDrvTimîInô
();

103 
	`DrvDdrInôüli£
(
NULL
);

106 
	`DrvShaveL2CacheSëupP¨tôi⁄
(
SHAVEPART256KB
);

109 
	`DrvShaveL2CacheAŒoˇãSëP¨tôi⁄s
();

112 
i
 = 0; i < 12; i++)

114 
	`DrvShaveL2CacheSëLSUP¨tId
(
i
, 0);

118 
	`DrvGpioInôüli£R™ge
(
brdMV0182R2GpioCfgDeÁu…
);

121 
	}
}

	@Demo/CamOpipeDebayerHdmi/leon/app_config.h

13 #i‚de‡
APP_CONFIG_H


14 
	#APP_CONFIG_H


	)

18 
	~"mv_ty≥s.h
"

19 
	~"DrvC¥.h
"

22 
	#OPIPE_CLOCKS
 (
DEV_SIPP_SIGMA
 | \

23 
DEV_SIPP_LSC
 | \

24 
DEV_SIPP_RAW
 | \

25 
DEV_SIPP_DBYR
 | \

26 
DEV_SIPP_DOGL
 | \

27 
DEV_SIPP_LUMA
 | \

28 
DEV_SIPP_SHARPEN
 | \

29 
DEV_SIPP_CGEN
 | \

30 
DEV_SIPP_MED
 | \

31 
DEV_SIPP_CHROMA
 | \

32 
DEV_SIPP_CC
 | \

33 
DEV_SIPP_LUT
 | \

34 
DEV_SIPP_UPFIRDN0
 | \

35 
DEV_SIPP_UPFIRDN1
 | \

36 
DEV_SIPP_UPFIRDN2
 | \

37 
DEV_SIPP_MIPI_RX0
 | \

38 
DEV_MSS_SIPP_CLK_GATES
 | \

39 
DEV_SIPP_MIPI
 | \

40 
DEV_SIPP_SIPP_ABPSLV
 | \

41 
DEV_SIPP_APB_SLV
)

	)

43 
	#MSS_CLOCKS
 ( 
DEV_MSS_APB_SLV
 | \

44 
DEV_MSS_APB2_CTRL
 | \

45 
DEV_MSS_RTBRIDGE
 | \

46 
DEV_MSS_RTAHB_CTRL
 | \

47 
DEV_MSS_LRT
 | \

48 
DEV_MSS_LRT_DSU
 | \

49 
DEV_MSS_LRT_L2C
 | \

50 
DEV_MSS_LRT_ICB
 | \

51 
DEV_MSS_AXI_BRIDGE
 | \

52 
DEV_MSS_MXI_CTRL
 | \

53 
DEV_MSS_MXI_DEFSLV
 | \

54 
DEV_MSS_AXI_MON
 | \

55 
DEV_MSS_CIF0
 | \

56 
DEV_MSS_LCD
 | \

57 
DEV_MSS_AMC
 | \

58 
DEV_MSS_SIPP
 | \

59 
DEV_MSS_TIM
)

	)

61 
	#CLOCKS_MIPICFG
 (
AUX_CLK_MASK_MIPI_ECFG
 | 
AUX_CLK_MASK_MIPI_CFG
)

	)

67 
u32
 
__l2_c⁄fig
 ;

75 
öôClocksAndMem‹y
();

	@Demo/CamOpipeDebayerHdmi/leon/main.c

13 
	~<°dlib.h
>

14 
	~<DrvLe⁄.h
>

15 
	~<DrvC¥.h
>

16 
	~<DrvTimî.h
>

17 
	~<πems/˝uu£.h
>

18 
	~<b•.h
>

19 
	~"πems_c⁄fig.h
"

26 
u32
 *
Ãt_°¨t
;

33 *
	$POSIX_Inô
 (*
¨gs
)

35 (Ë
¨gs
;

37 
s32
 
sc
;

38 
sc
 = 
	`öôClocksAndMem‹y
();

39 if(
sc
)

40 
	`exô
(
sc
);

42 
	`DrvLe⁄RTSèπup
((
u32
)&
Ãt_°¨t
);

43 
	`DrvLe⁄RTWaôExecuti⁄
();

45 
	`exô
(0);

46 
	}
}

	@Demo/CamOpipeDebayerHdmi/leon/rtems_config.h

9 #i‚de‡
_RTEMS_CONFIG_H_


10 
	#_RTEMS_CONFIG_H_


	)

14 
	~<πems.h
>

15 
	~<πems/b•Io.h
>

16 
	~"≠p_c⁄fig.h
"

17 
	~"ÁèlExãnsi⁄.h
"

22 #i‡
deföed
(
__RTEMS__
)

24 #i‡!
deföed
 (
__CONFIG__
)

25 
	#__CONFIG__


	)

28 
	#CONFIGURE_INIT


	)

30 #i‚de‡
RTEMS_POSIX_API


31 
	#RTEMS_POSIX_API


	)

34 
	#CONFIGURE_MICROSECONDS_PER_TICK
 1000

	)

36 
	#CONFIGURE_TICKS_PER_TIMESLICE
 10

	)

38 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

40 
	#CONFIGURE_APPLICATION_NEEDS_CLOCK_DRIVER


	)

42 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

44 
	#CONFIGURE_MINIMUM_TASK_STACK_SIZE
 4096

	)

46 
	#CONFIGURE_MAXIMUM_TASKS
 4

	)

48 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 4

	)

50 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 8

	)

52 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 8

	)

54 
	#CONFIGURE_MAXIMUM_POSIX_SEMAPHORES
 8

	)

56 
	#CONFIGURE_MAXIMUM_POSIX_MESSAGE_QUEUES
 8

	)

58 
	#CONFIGURE_MAXIMUM_POSIX_TIMERS
 4

	)

60 
	#CONFIGURE_MAXIMUM_TIMERS
 4

	)

62 
	#CONFIGURE_MAXIMUM_SEMAPHORES
 1

	)

66 
	#CONFIGURE_MAXIMUM_USER_EXTENSIONS
 1

	)

67 
	#CONFIGURE_INITIAL_EXTENSIONS
 { .
Áèl
 = 
F©Æ_exãnsi⁄
 }

	)

69 *
POSIX_Inô
 (*
¨gs
);

71 
	~<πems/c⁄fdefs.h
>

78 
BSP_SET_CLOCK
(12000, 580000, 1, 1, 
DEFAULT_CORE_CSS_DSS_CLOCKS
, 
MSS_CLOCKS
, 
DEFAULT_UPA_CLOCKS
, 
OPIPE_CLOCKS
, 0x00);

81 
BSP_SET_L2C_CONFIG
(0, 
L2C_REPL_LRU
, 0, 
L2C_MODE_COPY_BACK
, 0, 
NULL
);

	@Demo/CamOpipeDebayerHdmi/leon_rt/app_config.c

13 
	~"≠p_c⁄fig.h
"

14 
	~"as£π.h
"

15 
	~"DrvC¥.h
"

16 
	~"DrvTimî.h
"

17 
	~"ªgi°îsMyrüd.h
"

18 
	~"DrvGpio.h
"

19 
	~"DrvLe⁄L2C.h
"

23 
	#SYS_CLK_KHZ
 (12000)

24 

	)

34 
	$öô
()

36 
s32
 
sc
;

38 
sc
 = 
	`DrvC¥InôClocks
(
SYS_CLK_KHZ
, 0, 0, 0, 0);

39 if(
sc
)

40  
sc
;

43 
sc
 = 
	`DrvTimîInô
();

44 if(
sc
)

45  
sc
;

47 
	`DrvLL2CInôWrôeThrough
();

50 
	}
}

	@Demo/CamOpipeDebayerHdmi/leon_rt/app_config.h

13 #i‚de‡
APP_CONFIG_H


14 
	#APP_CONFIG_H


	)

18 
	~"mv_ty≥s.h
"

29 
öô
();

	@Demo/CamOpipeDebayerHdmi/leon_rt/main.c

8 
	~<°dio.h
>

9 
	~<DrvC¥.h
>

10 
	~<DrvDdr.h
>

11 
	~<DrvTimî.h
>

12 
	~"Opùe.h
"

13 
	~"OpùeAµs.h
"

14 
	~"i•_∑øms_wøp.h
"

15 
	~"≠p_c⁄fig.h
"

16 
	~"LcdApi.h
"

17 
	~"DrvCDCEL.h
"

18 
	~"DrvADV7513.h
"

19 
	~"DrvGpio.h
"

20 #ifde‡
MV0212


21 
	~"MV0212.h
"

22 
	~"brdGpioCfgs/brdMv0182R5GpioDeÁu…s.h
"

23 #ñi‡
deföed
(
MV0182
)

24 
	~<Bﬂrd182Api.h
>

26 
	~"imx214_2L_2104x1560_Raw10_30Hz_bönög.h
"

27 
	~"imx378_4L_4056x3040_Raw10_30Hz.h
"

29 
	~"CamGíîicApi.h
"

30 
	~"LcdCEA1080p60.h
"

31 
	~"brdMv0182.h
"

35 
	#MAX_USED_BUF
 3

36 
	#FIRST_INCOMING_BUF_ID
 1

37 

	)

38 
	#CAM_BPP
 2

	)

39 
	#LCD_BPP
 1

	)

42 
	#IMG_W_IMX214
 
ISPC_BAYER_W_IMX214


	)

43 
	#IMG_H_IMX214
 
ISPC_BAYER_H_IMX214


	)

45 
	#IMG_W_IMX378
 
ISPC_BAYER_W_IMX378


	)

46 
	#IMG_H_IMX378
 
ISPC_BAYER_H_IMX378


	)

49 
	#O_IMG_W_IMX214
 ((
IMG_W_IMX214
 * 
N
 -1)/
D_IMX214
 + 1)

	)

50 
	#O_IMG_H_IMX214
 ((
IMG_H_IMX214
 * 
N
 -1)/
D_IMX214
 + 1)

	)

52 
	#O_IMG_W_IMX378
 ((
IMG_W_IMX378
 * 
N
 -1)/
D_IMX378
 + 1)

	)

53 
	#O_IMG_H_IMX378
 ((
IMG_H_IMX378
 * 
N
 -1)/
D_IMX378
 + 1)

	)

56 
	#LCD_WINDOW_WIDTH
 1920

	)

57 
	#LCD_WINDOW_HEIGHT
 1080

	)

59 #ifde‡
MV0212


60 
	#NUM_I2C_DEVS
 3

	)

69 
uöt8_t
 
	gyuvBufY
 [
MAX_USED_BUF
][ 
O_IMG_W_IMX378
*
O_IMG_H_IMX378
 ] 
SECTION
(".ddr.bss"Ë
ALIGNED
(8);

70 
uöt8_t
 
	gyuvBufUV
[
MAX_USED_BUF
][2*(
O_IMG_W_IMX378
*
O_IMG_H_IMX378
/4)] 
SECTION
(".ddr.bss"Ë
ALIGNED
(8);

71 
uöt8_t
 
	gˇmBuf
 [
MAX_USED_BUF
][
IMG_W_IMX378
 * 
IMG_H_IMX378
 * 
CAM_BPP
] 
SECTION
(".ddr.bss"Ë
ALIGNED
(8);

74 
uöt16_t
 
	goCúcBuffCmx7
[
O_CBUFF_H
 *
IMG_W_IMX378
] 
SECTION
(".cmx.d©a"Ë
ALIGNED
(16);

75 
uöt16_t
 
	gcSigma
 [ 
IMG_W_IMX378
 * 
I_CBUFF_H
 ] 
SECTION
(".cmx.d©a"Ë
ALIGNED
(16);

76 
uöt16_t
 
	gcDbyrY
 [ 
IMG_W_IMX378
 * 
DBYR_Y_H
 ] 
SECTION
(".cmx.d©a"Ë
ALIGNED
(16);

77 
uöt16_t
 
	gcSh¨pY
 [ 
IMG_W_IMX378
 * 
SHARP_Y_H
 ] 
SECTION
(".cmx.d©a"Ë
ALIGNED
(16);

78 
uöt8_t
 
	gcLut
 [ 
IMG_W_IMX378
 * 
O_CBUFF_H
 * 3] 
SECTION
(".cmx.d©a"Ë
ALIGNED
(16);

79 
uöt8_t
 
	gcUpfúDn
[
O_IMG_W_IMX378
 * 
O_CBUFF_H
 * 3] 
SECTION
(".cmx.d©a"Ë
ALIGNED
(16);

80 
u8
 
	g£ns‹
=0;

81 
OpùeMF
 
	g›MF
;

82 
OpùeRx
 
	gpRx
;

84 
GíîicCamS≥c
 *
	gˇmC⁄fig
;

85 
ADV7513C⁄tfigMode_t
 
	gADV7513C⁄fig
 = 
ADV7513_1080P60
;

87 vﬁ©ûê
u32
 
	g√wCamFømeCå
 = 
FIRST_INCOMING_BUF_ID
;

89 
GíîicCamîaH™dÀ
 
	gˇmHndl
;

90 
CamU£rS≥c
 
	gu£rC⁄fig
;

91 
‰ameS≥c
 
	gˇmFømeS≥c
;

92 
‰ameBuf„r
 
	gˇmFøme
[
MAX_USED_BUF
];

93 
‰ameS≥c
 
	glcdFømeS≥c
;

94 
‰ameBuf„r
 
	glcdFøme
[
MAX_USED_BUF
];

96 
ˇŒbacksLi°Såu˘
 
	gˇŒbacks
 = {0};

98 
u8
 
	g¥ŸocﬁRódSam∂e2
[] = 
I2C_PROTO_READ_16BA
;

101 
	s•ecs


103 
	mwidth
;

104 
	mheight
;

105 
	mo_width
;

106 
	mo_height
;

108 
•ecs
 
	gˇmS≥c
;

112 
≠pSëP¨amsMFPùe
(
Opùe
 *
p
,
£ns‹
);

113 
≠pSëP¨amsRxPùe
(
Opùe
 *
p
);

119 
	$≠pBuûdPùeMF
()

122 
›MF
.
ö
.
cBufSigma
.
ba£
 = (
uöt32_t
)
cSigma
; opMF.ö.cBufSigma.
h
 = 
I_CBUFF_H
;

123 
›MF
.
cBufDbyrY
.
ba£
 = (
uöt32_t
)
cDbyrY
; opMF.cBufDbyrY.
h
 = 
DBYR_Y_H
;

124 
›MF
.
cBufSh¨p
.
ba£
 = (
uöt32_t
)
cSh¨pY
; opMF.cBufSh¨p.
h
 = 
SHARP_Y_H
;

125 
›MF
.
cBufLut
.
ba£
 = (
uöt32_t
)
cLut
; opMF.cBufLut.
h
 = 
O_CBUFF_H
;

127 #i‡(
CANCEL_UPFIRDN
)

128 
›MF
.
cBufPﬁy
.
ba£
 = 0x00000000;

130 
›MF
.
cBufPﬁy
.
ba£
 = (
uöt32_t
)
cUpfúDn
; opMF.cBufPﬁy.
h
 = 
O_CBUFF_H
;

133 
	`OpùeCª©eFuŒ
(&
›MF
, 
	`BPP
(2));

134 
	}
}

136 
	$¥ï¨eDrivîD©a
()

138 
ibuf
;

141 
u£rC⁄fig
.
mùiC⁄åﬁÀrNb
 = 
CAM_A1_MIPICTRL
;

142 
u£rC⁄fig
.
ª˚ivîId
 = 
SIPP_DEVICE0
;

143 #ifde‡
MV0212


144 
u£rC⁄fig
.
£ns‹Re£tPö
 = 
MV0212_MV0201_SENSOR_RST_GPIO
;

145 #ñi‡
	`deföed
(
MV0182
)

146 
u£rC⁄fig
.
£ns‹Re£tPö
 = 
MV0182_MV0201_SENSOR_RST_GPIO
;

148 
u£rC⁄fig
.
°îeoPaúIndex
 = 
CAM_A_ADDR
;

149 
u£rC⁄fig
.
gíî©eSync
 = 
NULL
;

152 
ˇmFømeS≥c
.
width
 = 
ˇmS≥c
.width;

153 
ˇmFømeS≥c
.
height
 = 
ˇmS≥c
.height;

154 
ˇmFømeS≥c
.
byãsPP
 = 
CAM_BPP
;

155 
ˇmFømeS≥c
.
°ride
 = 
ˇmS≥c
.
width
 * 
CAM_BPP
;

156 
ˇmFømeS≥c
.
ty≥
 = 
RAW16
;

159 
ibuf
 = 0; ibu‡< 
MAX_USED_BUF
;ibuf++)

161 
ˇmFøme
[
ibuf
].
p1
 = (*)
ˇmBuf
[ibuf];

162 
ˇmFøme
[
ibuf
].
p2
 = 
NULL
;

163 
ˇmFøme
[
ibuf
].
p3
 = 
NULL
;

164 
ˇmFøme
[
ibuf
].
•ec
 = 
ˇmFømeS≥c
;

167 
ˇŒbacks
.
i§CbfLi°
 = 
NULL
;

168 
ˇŒbacks
.
£ns‹CbfLi°
 = 
NULL
;

171 
lcdFømeS≥c
.
width
 = 
LCD_WINDOW_WIDTH
;

172 
lcdFømeS≥c
.
height
 = 
LCD_WINDOW_HEIGHT
;

173 
lcdFømeS≥c
.
°ride
 = 
ˇmS≥c
.
o_width
 * 
LCD_BPP
;

174 
lcdFømeS≥c
.
byãsPP
 = 
LCD_BPP
;

175 
lcdFømeS≥c
.
ty≥
 = 
YUV420p
;

177 
ibuf
 = 0; ibu‡< 
MAX_USED_BUF
;ibuf++)

179 
lcdFøme
[
ibuf
].
•ec
 = 
lcdFømeS≥c
;

180 
lcdFøme
[
ibuf
].
p1
 = &
yuvBufY
[ibuf][0];

181 
lcdFøme
[
ibuf
].
p2
 = &
yuvBufUV
[ibuf][0];

182 
lcdFøme
[
ibuf
].
p3
 = &
yuvBufUV
[ibuf][
ˇmS≥c
.
o_width
*ˇmS≥c.
o_height
/4];

186 
	}
}

187 #ifde‡
MV0182


188 
u32
 
I2CEº‹H™dÀrIgn‹e
(
I2CM_SètusTy≥
 
i2cCommsEº‹
, u32 
__©åibuã__
((
unu£d
)Ë
¶aveAddr
, u32 __©åibuã__((unu£d)Ë
ªgAddr
)

190 
UNUSED
(
i2cCommsEº‹
);

191  
	gI2CM_STAT_OK
;

194 
‰ameBuf„r
* 
	$ÆloˇãLcdFøme
(
œyî
)

196 (Ë
œyî
;

198  ( &
lcdFøme
[(
√wCamFømeCå
 - 1Ë% 
MAX_USED_BUF
] );

199 
	}
}

201 
	$RxEofCÆlback
(
Opùe
 *
p
)

203 (Ë
p
;

205 
√wCamFømeCå
++;

206 
pRx
.
pOut
->
ddr
.
ba£
 = (
uöt32_t
)
ˇmBuf
[
√wCamFømeCå
 % 
MAX_USED_BUF
];

207 
	`OpùeSèπ
(&
pRx
.
p
);

209 
	}
}

212 
	$maö
()

214 
u8
 
°©us
;

215 
LCDH™dÀ
 
lcdHndl
;

216 
LCDLayîOff£t
 
lcdLayîSèπOff£t
 = {0, 0};

217 
ˇmEº‹Ty≥
 
ˇmSètus
;

218 
s32
 
bﬂrdSètus
;

220 
I2CM_Devi˚
 * 
i2c1H™dÀ
;

221 
I2CM_Devi˚
 * 
i2c2H™dÀ
;

222 
ˇmID
 = 0;

223 
°©usI2c
=0;

224 
u8
 
byãs
[2];

226 
	`swcLe⁄SëPIL
(0);

228 
	`öô
();

230 #ifde‡
MV0212


231 
öt32_t
 
rc
;

232 
uöt32_t
 
ªv
;

233 
BﬂrdI2CInfo
 
öfo
[
NUM_I2C_DEVS
];

234 
BﬂrdC⁄figDesc
 
c⁄fig
[] =

237 
BRDCONFIG_GPIO
,

239 (*)
brdMV0182R5GpioCfgDeÁu…


242 
BRDCONFIG_END
,

243 
NULL


247 
rc
 = 
	`BﬂrdInô
(
c⁄fig
);

248 i‡(
rc
!=
BRDCONFIG_SUCCESS
)

250 
	`¥ötf
("Error: board initialization failed with %ld status\n",

251 
rc
);

252  
rc
;

255 
rc
 = 
	`BﬂrdGëPCBRevisi⁄
(&
ªv
);

256 i‡(
rc
!=
BRDCONFIG_SUCCESS
)

258 
	`¥ötf
("Error: board configurationÑead failed with %ld status\n",

259 
rc
);

260  
rc
;

262 
	`¥ötf
("Bﬂrd Mv0212 inôülized,Ñevisi⁄ = %lu \n", 
ªv
);

264 
bﬂrdSètus
 = 
	`BﬂrdInôExtPŒ
(
EXT_PLL_CFG_148_24_24MHZ
);

265 i‡(
bﬂrdSètus
 !
BRDCONFIG_SUCCESS
)

267 
	`¥ötf
("Error: board initialization failed with %ld status\n",

268 
bﬂrdSètus
);

271 
rc
 = 
	`BﬂrdGëI2CInfo
(
öfo
, 
NUM_I2C_DEVS
);

272 i‡(
rc
!=
BRDCONFIG_SUCCESS
)

274 
	`¥ötf
("Error: board configurationÑead failed with %ld status\n",

275 
rc
);

276  
rc
;

278 
i2c1H™dÀ
=
öfo
[1].
h™dÀr
;

279 
i2c2H™dÀ
=
öfo
[2].
h™dÀr
;

280 #ñi‡
	`deföed
(
MV0182
)

281 
bﬂrdSètus
 = 
	`BﬂrdInôüli£
(
EXT_PLL_CFG_148_24_24MHZ
);

282 
i2c1H™dÀ
=
gAµDevHndls
.i2c1Handle;

283 
i2c2H™dÀ
=
gAµDevHndls
.i2c2Handle;

284 i‡(
bﬂrdSètus
 !
B_SUCCESS
)

286 
	`¥ötf
("Error: board initialization failed with %ld status\n",

287 
bﬂrdSètus
);

290 
	`DrvI2cMSëEº‹H™dÀr
(
i2c1H™dÀ
,
I2CEº‹H™dÀrIgn‹e
);

293 
	`¥ötf
("ConfiguringÅhe HDMI chip ADV7513\n");

294 
°©us
 = 
	`öôADV7513ªg
(
i2c2H™dÀ
, 
ADV7513C⁄fig
);

296 i‡(
°©us
 == 0)

297 
	`¥ötf
("ADV7513 Configured\n");

299 
	`¥ötf
("ADV7513 C⁄figuøti⁄ faûed %d \n", 
°©us
);

302 
	`¥ötf
("Configuring cameraánd datapath\n");

304 
	`DrvGpioSëPö
(
MV0182_MV0201_SENSOR_RST_GPIO
, 1);

305 
	`DrvTimîSÀïMs
(5);

306 
	`DrvGpioSëPö
(
MV0182_MV0201_SENSOR_RST_GPIO
, 0);

307 
	`DrvTimîSÀïMs
(5);

308 
	`DrvGpioSëPö
(
MV0182_MV0201_SENSOR_RST_GPIO
, 1);

309 
	`DrvTimîSÀïMs
(5);

311 
°©usI2c
=
	`DrvI2cMTønß˘i⁄
(
i2c1H™dÀ
, 
IMX378_I2C_ADDRESS
, 
IMX378_REG_ID
, 
¥ŸocﬁRódSam∂e2
, 
byãs
, 2);

312 
ˇmID
=
byãs
[0]<<8 | (bytes[1]);

314 i‡((
°©usI2c
 !
I2CM_STAT_OK
Ë|| 
ˇmID
 !
IMX378_ID
)

316 
ˇmID
=0;

319 if(
ˇmID
==0)

321 
°©usI2c
=
	`DrvI2cMTønß˘i⁄
(
i2c1H™dÀ
, 
IMX214_I2C_ADDRESS
, 
IMX214_REG_ID
, 
¥ŸocﬁRódSam∂e2
, 
byãs
, 2);

322 
ˇmID
=
byãs
[0]<<8 | (bytes[1]);

324 i‡(
°©usI2c
 !
I2CM_STAT_OK
)

326 
	`¥ötf
("\¿Camî®£ns‹Ñód faû wôh sètu†(%d).\n", 
°©usI2c
);

327 
ˇmID
=0;

331 
ˇmID
) {

333 
IMX378_ID
 :

334 
	`¥ötf
("Camera sensor: IMX378 \n");

335 
£ns‹
=2;

336 
ˇmC⁄fig
 = &
imx378_4L_4056x3040_RAW10_30Hz_ˇmCfg
;

337 
ˇmS≥c
.
width

IMG_W_IMX378
;

338 
ˇmS≥c
.
height

IMG_H_IMX378
;

339 
ˇmS≥c
.
o_width

O_IMG_W_IMX378
;

340 
ˇmS≥c
.
o_height

O_IMG_H_IMX378
;

343 
IMX214_ID
 :

344 
	`¥ötf
("Camera sensor: IMX214 \n");

345 
£ns‹
=1;

346 
ˇmC⁄fig
 = &
imx214_2L_2104x1560_RAW10_30Hz_bön_ˇmCfg
;

347 
ˇmS≥c
.
width

IMG_W_IMX214
;

348 
ˇmS≥c
.
height

IMG_H_IMX214
;

349 
ˇmS≥c
.
o_width

O_IMG_W_IMX214
;

350 
ˇmS≥c
.
o_height

O_IMG_H_IMX214
;

355 
	`¥ötf
("Camera sensor isÇot supported forÅhis board!\n");

360 
	`swcLe⁄SëPIL
(0);

361 
	`¥ï¨eDrivîD©a
();

363 
ˇmSètus
 = 
	`CamInô
–&
ˇmHndl
, 
ˇmC⁄fig
, &
u£rC⁄fig
, &
ˇŒbacks
, 
i2c1H™dÀ
 );

364 
	`CamSëupI¡îru±s
(&
ˇmHndl
, 0, 0, 0, 
NULL
, 1, 0, 0);

365 i‡(
ˇmSètus
 !
CAM_SUCCESS
)

367 
	`¥ötf
("\¿Camî®c⁄figuøti⁄ faûed (%d).\n", 
ˇmSètus
);

371 
ˇmSètus
 = 
	`CamSèπ
–&
ˇmHndl
 );

372 i‡(
ˇmSètus
 !
CAM_SUCCESS
)

374 
	`¥ötf
("\¿Camî®ÁûedÅÿ°¨à(%d).\n", 
ˇmSètus
);

378 
	`OpùeRe£t
 ();

381 
	`OpùeCª©eRx
(&
pRx
, 
ˇmS≥c
.
width
, camS≥c.
height
 - 12,

382 
SIPP_MIPI_RX0_ID
, 
	`BPP
(2),

383 (
uöt32_t
)
oCúcBuffCmx7
, 
O_CBUFF_H
);

385 
	`≠pSëP¨amsRxPùe
(&
pRx
.
p
);

386 
pRx
.
pOut
->
ddr
.
ba£
 = (
uöt32_t
)
ˇmBuf
[
√wCamFømeCå
 % 
MAX_USED_BUF
];

387 
pRx
.
p
.
cbEndOfFøme
 = 
RxEofCÆlback
;

389 
	`≠pBuûdPùeMF
();

390 
	`≠pSëP¨amsMFPùe
(&
›MF
.
p
, 
£ns‹
);

391 
	`OpùeSëSizeMF
 (&
›MF
, 
ˇmS≥c
.
width
, camS≥c.
height
);

393 
	`¥ötf
("ConfiguringÅhe LCD\n");

394 
	`LCDInô
(&
lcdHndl
, &
lcdS≥c1080p60
, 
NULL
, 
LCD1
);

395 
	`LCDInôLayî
(&
lcdHndl
, 
VL1
, &
lcdFømeS≥c
, 
lcdLayîSèπOff£t
);

396 
	`LCDSëupCÆlbacks
(&
lcdHndl
, &
ÆloˇãLcdFøme
, 
NULL
, NULL, NULL);

399 
	`LCDEnYuv422i
();

401 
	`LCDSèπ
(&
lcdHndl
);

402 
	`¥ötf
("\nStreaming ... \n");

404 
	`OpùeSèπ
(&
pRx
.
p
);

406 
u32
 
ﬁdCamFømeCå
 = 1;

410 if(
√wCamFømeCå
 !
ﬁdCamFømeCå
)

412 
ﬁdCamFømeCå
 = 
√wCamFømeCå
;

415 
›MF
.
pIn
->
ddr
.
ba£
 = (
uöt32_t
)
ˇmBuf
[
√wCamFømeCå
 % 
MAX_USED_BUF
];

416 
›MF
.
pOutY
->
ddr
.
ba£
 = (
uöt32_t
)
yuvBufY
[
√wCamFømeCå
 % 
MAX_USED_BUF
];

417 
›MF
.
pOutUV
->
ddr
.
ba£
 = (
uöt32_t
)
yuvBufUV
[
√wCamFømeCå
 % 
MAX_USED_BUF
];

419 
	`OpùeSèπ
 (&
›MF
.
p
);

420 
	`OpùeWaô
 (&
›MF
.
p
);

425 
	}
}

	@Demo/CamOpipeDebayerHdmi/leon_rt/opipe_app_cfg.c

1 
	~<°dio.h
>

2 
	~<°rög.h
>

3 
	~<Fp16C⁄vît.h
>

4 
	~"i•_∑øms_wøp.h
"

5 
	~"Opùe.h
"

6 
	~"OpùeAµs.h
"

9 
SigmaDnsCfg
 
	gsigCfg
;

10 
BlcCfg
 
	gblcCfg
;

11 
LscCfg
 
	glscCfg
;

12 
RawCfg
 
	gøwCfg
;

13 
DbyrCfg
 
	gdbyrCfg
;

14 
LtmCfg
 
	g…mCfg
;

15 
DogCfg
 
	gdogCfg
;

16 
LumaDnsCfg
 
	glumaDnsCfg
;

17 
LumaDnsRefCfg
 
	glumaDnsRefCfg
;

18 
Sh¨≥nCfg
 
	gsh¨pCfg
;

19 
ChromaGíCfg
 
	gcGíCfg
;

20 
MedünCfg
 
	gmedCfg
;

21 
ChromaDnsCfg
 
	gchrDnsCfg
;

22 
CﬁCombCfg
 
	gccCfg
;

23 
LutCfg
 
	glutCfg
;

24 
CﬁC⁄vCfg
 
	gcﬁC⁄vCfg
;

25 
UpfúdnCfg
 
	gupdnCfg0
;

26 
UpfúdnCfg
 
	gupdnCfg12
;

28 
	$≠pSëP¨amsMFPùe
(
Opùe
 *
p
, 
£ns‹
)

31 
p
->
øwBôs
 = 
ISPC_BAYER_BITS
;

32 
p
->
bayîP©ã∫
 = 
BAYER_PATTERN
;

38 
p
->
pBlcCfg
 = &
blcCfg
;

39 
blcCfg
.
r
 = 
ISPC_D65_A_TL84_BLACK_LEVEL_P0
;

40 
blcCfg
.
b
 = 
ISPC_D65_A_TL84_BLACK_LEVEL_P1
;

41 
blcCfg
.
gr
 = 
ISPC_D65_A_TL84_BLACK_LEVEL_P2
;

42 
blcCfg
.
gb
 = 
ISPC_D65_A_TL84_BLACK_LEVEL_P3
;

46 
p
->
pSigmaCfg
 = &
sigCfg
;

47 
sigCfg
.
noi£Flo‹
 = 
ISPC_D65_A_TL84_SIGMA_NOISE_FLOOR
;

48 
sigCfg
.
thªsh1P0
 = 
ISPC_D65_A_TL84_SIGMA_THRESH1_P0
;

49 
sigCfg
.
thªsh2P0
 = 
ISPC_D65_A_TL84_SIGMA_THRESH2_P0
;

50 
sigCfg
.
thªsh1P1
 = 
ISPC_D65_A_TL84_SIGMA_THRESH1_P1
;

51 
sigCfg
.
thªsh2P1
 = 
ISPC_D65_A_TL84_SIGMA_THRESH2_P1
;

52 
sigCfg
.
thªsh1P2
 = 
ISPC_D65_A_TL84_SIGMA_THRESH1_P2
;

53 
sigCfg
.
thªsh2P2
 = 
ISPC_D65_A_TL84_SIGMA_THRESH2_P2
;

54 
sigCfg
.
thªsh1P3
 = 
ISPC_D65_A_TL84_SIGMA_THRESH1_P3
;

55 
sigCfg
.
thªsh2P3
 = 
ISPC_D65_A_TL84_SIGMA_THRESH2_P3
;

59 
p
->
pLscCfg
 = &
lscCfg
;

60 
lscCfg
.
lscWidth
 = 
ISPC_D65_A_TL84_LSC_GAIN_MAP_W
;

61 
lscCfg
.
lscSåide
 = 
ISPC_D65_A_TL84_LSC_GAIN_MAP_STRIDE
;

62 
lscCfg
.
lscHeight
 = 
ISPC_D65_A_TL84_LSC_GAIN_MAP_H
;

63 
lscCfg
.
pLscTabÀ
 = (
uöt16_t
*)
i•cTL84LscMesh
;

67 
p
->
pRawCfg
 = &
øwCfg
;

68 
øwCfg
.
gaöR
 = 
ISPC_TL84_RAW_GAIN_0
;

69 
øwCfg
.
gaöGr
 = 
ISPC_TL84_RAW_GAIN_1
;

70 
øwCfg
.
gaöGb
 = 
ISPC_TL84_RAW_GAIN_2
;

71 
øwCfg
.
gaöB
 = 
ISPC_TL84_RAW_GAIN_3
;

73 
øwCfg
.
˛ampGr
 = 
ISPC_D65_A_TL84_RAW_CLAMP_0
;

74 
øwCfg
.
˛ampR
 = 
ISPC_D65_A_TL84_RAW_CLAMP_1
;

75 
øwCfg
.
˛ampB
 = 
ISPC_D65_A_TL84_RAW_CLAMP_2
;

76 
øwCfg
.
˛ampGb
 = 
ISPC_D65_A_TL84_RAW_CLAMP_3
;

78 
øwCfg
.
grgbImbÆPœtD¨k
 = 
ISPC_D65_A_TL84_GRGB_IMBAL_PLAT_DARK
;

79 
øwCfg
.
grgbImbÆDeˇyD¨k
 = 
ISPC_D65_A_TL84_GRGB_IMBAL_DECAY_DARK
;

80 
øwCfg
.
grgbImbÆPœtBright
 = 
ISPC_D65_A_TL84_GRGB_IMBAL_PLAT_BRIGHT
;

81 
øwCfg
.
grgbImbÆDeˇyBright
 = 
ISPC_D65_A_TL84_GRGB_IMBAL_DECAY_BRIGHT
;

83 
øwCfg
.
grgbImbÆThr
 = 
ISPC_D65_A_TL84_GRGB_IMBAL_THRESHOLD
;

85 
øwCfg
.
dpcAÕhaHŸG
 = 
ISPC_D65_A_TL84_BAD_PIX_ALPHA_G_HOT
;

86 
øwCfg
.
dpcAÕhaHŸRb
 = 
ISPC_D65_A_TL84_BAD_PIX_ALPHA_RB_HOT
;

87 
øwCfg
.
dpcAÕhaCﬁdG
 = 
ISPC_D65_A_TL84_BAD_PIX_ALPHA_G_COLD
;

88 
øwCfg
.
dpcAÕhaCﬁdRb
 = 
ISPC_D65_A_TL84_BAD_PIX_ALPHA_RB_COLD
;

89 
øwCfg
.
dpcNoi£Levñ
 = 
ISPC_D65_A_TL84_BAD_PIX_NOISE_LEVEL
;

93 
p
->
pDbyrCfg
 = &
dbyrCfg
;

94 
dbyrCfg
.
dew‹mGødõ¡Mul
 = 
ISPC_D65_A_TL84_DEMOSAIC_MIX_GRADIENT_MUL
;

95 
dbyrCfg
.
dew‹mSl›e
 = 
ISPC_D65_A_TL84_DEMOSAIC_MIX_SLOPE
;

96 
dbyrCfg
.
dew‹mOff£t
 = 
ISPC_D65_A_TL84_DEMOSAIC_MIX_OFFSET
;

97 
dbyrCfg
.
lumaWeightR
 = 
ISPC_D65_A_TL84_DEMOSAIC_LUMA_WEIGHT_RED
;

98 
dbyrCfg
.
lumaWeightG
 = 
ISPC_D65_A_TL84_DEMOSAIC_LUMA_WEIGHT_GREEN
;

99 
dbyrCfg
.
lumaWeightB
 = 
ISPC_D65_A_TL84_DEMOSAIC_LUMA_WEIGHT_BLUE
;

103 
p
->
pLtmCfg
 = &
…mCfg
;

104 
…mCfg
.
thr
 = 
ISPC_D65_A_TL84_LTM_FILTER_TH1
;

107 
curve
, 
poöt
, 
ªgoff
;

108 
ªgoff
 = 0;

109 
curve
 = 0; curve < 8; curve++) {

110 
poöt
 = 0;Öoint < 16;Öoint += 2) {

111 
off
 = 
curve
 + 
poöt
 * 8;

112 
…mCfg
.
curves
[
off
 ] = 
i•cLtmCurves
[off] * 0xfff;

113 
…mCfg
.
curves
[
off
+8] = 
i•cLtmCurves
[off+8] * 0xfff;

114 
ªgoff
 += 4;

120 
p
->
pDogCfg
 = &
dogCfg
;

121 
dogCfg
.
thr
 = 
ISPC_D65_A_TL84_DOG_THR
;

122 
dogCfg
.
°ªngth
 = 
ISPC_D65_A_TL84_DOG_STRENGTH
;

123 
dogCfg
.
sigma11
 = 
ISPC_D65_A_TL84_DOG_SIGMA11
;

124 
dogCfg
.
sigma15
 = 
ISPC_D65_A_TL84_DOG_SIGMA15
;

125 
	`mem˝y
(
dogCfg
.
c€ffs11
, 
dogC€ffs11
, (dogCoeffs11));

126 
	`mem˝y
(
dogCfg
.
c€ffs15
, 
dogC€ffs15
, (dogCoeffs15));

130 
p
->
pLumaDnsCfg
 = &
lumaDnsCfg
;

131 
lumaDnsCfg
.
bôpos
 = 
ISPC_D65_A_TL84_LUMA_DNS_BITPOS
;

132 
lumaDnsCfg
.
Æpha
 = 
ISPC_D65_A_TL84_LUMA_DNS_ALPHA
;

133 
lumaDnsCfg
.
f2
 = 
ISPC_D65_A_TL84_LUMA_DNS_F2
;

134 
lumaDnsCfg
.
°ªngth
 = 
ISPC_D65_A_TL84_LUMA_DNS_STRENGTH
;

135 
	`mem˝y
(
lumaDnsCfg
.
lut
, 
i•cLumaDnsLut
, (ispcLumaDnsLut));

137 
p
->
pLumaDnsRefCfg
 = &
lumaDnsRefCfg
;

138 
lumaDnsRefCfg
.
shi·
 = 
ISPC_D65_A_TL84_LUMA_DNS_REF_SHIFT
;

139 
lumaDnsRefCfg
.
gamma
 = 
ISPC_D65_A_TL84_LUMA_DNS_GAMMA
;

140 
lumaDnsRefCfg
.
™gÀ_of_võw
 = 
ISPC_D65_A_TL84_LUMA_DNS_ANGLE_OF_VIEW
;

141 
	`mem˝y
(
lumaDnsRefCfg
.
lutGamma0_32
 , 
i•cGammaLut0_32
 , (ispcGammaLut0_32 ));

142 
	`mem˝y
(
lumaDnsRefCfg
.
lutGamma32_255
, 
i•cGammaLut32_255
, (ispcGammaLut32_255));

143 
	`mem˝y
(
lumaDnsRefCfg
.
lutDi°
 , 
i•cYDnsDi°Lut
 , (ispcYDnsDistLut ));

147 
p
->
pSh¨pCfg
 = &
sh¨pCfg
;

148 
sh¨pCfg
.
sigma
 = 
ISPC_D65_A_TL84_SHARP_SIGMA
;

149 
sh¨pCfg
.
°ªngthLighãn
 = 
ISPC_D65_A_TL84_SHARP_STRENGTH_LIGHTEN
;

150 
sh¨pCfg
.
°ªngthD¨kí
 = 
ISPC_D65_A_TL84_SHARP_STRENGTH_DARKEN
;

151 
sh¨pCfg
.
möThr
 = 
	`f32Tof16
(
ISPC_D65_A_TL84_SHARP_MIN_THR
);

152 
sh¨pCfg
.
Æpha
 = 
ISPC_D65_A_TL84_SHARP_ALPHA
;

153 
sh¨pCfg
.
undîshoŸ
 = 
ISPC_D65_A_TL84_SHARP_UNDERSHOOT
;

154 
sh¨pCfg
.
ovîshoŸ
 = 
ISPC_D65_A_TL84_SHARP_OVERSHOOT
;

156 
sh¨pCfg
.
øngeSt›0
 = 
ISPC_D65_A_TL84_SHARP_RANGE_STOP_0
;

157 
sh¨pCfg
.
øngeSt›1
 = 
ISPC_D65_A_TL84_SHARP_RANGE_STOP_1
;

158 
sh¨pCfg
.
øngeSt›2
 = 
ISPC_D65_A_TL84_SHARP_RANGE_STOP_2
;

159 
sh¨pCfg
.
øngeSt›3
 = 
ISPC_D65_A_TL84_SHARP_RANGE_STOP_3
;

161 
sh¨pCfg
.
sh¨≥nC€ffs
[0] = 
ISPC_D65_A_TL84_SHARP_COEF0
;

162 
sh¨pCfg
.
sh¨≥nC€ffs
[1] = 
ISPC_D65_A_TL84_SHARP_COEF1
;

163 
sh¨pCfg
.
sh¨≥nC€ffs
[2] = 
ISPC_D65_A_TL84_SHARP_COEF2
;

164 
sh¨pCfg
.
sh¨≥nC€ffs
[3] = 
ISPC_D65_A_TL84_SHARP_COEF3
;

168 
p
->
pChrGíCfg
 = &
cGíCfg
;

169 
cGíCfg
.
deßtOff£t
 = 
ISPC_D65_A_TL84_CGEN_DESAT_OFFSET
;

170 
cGíCfg
.
deßtSl›e
 = 
ISPC_D65_A_TL84_CGEN_DESAT_SLOPE
;

171 
cGíCfg
.
p‰Såígth
 = 
ISPC_D65_A_TL84_CGEN_PFR_STRENGTH
;

173 
cGíCfg
.
lumaC€ffR
 = 
ISPC_D65_A_TL84_CGEN_LUMA_COEFF_R
;

174 
cGíCfg
.
lumaC€ffG
 = 
ISPC_D65_A_TL84_CGEN_LUMA_COEFF_G
;

175 
cGíCfg
.
lumaC€ffB
 = 
ISPC_D65_A_TL84_CGEN_LUMA_COEFF_B
;

177 
cGíCfg
.
ïsû⁄
 = 
ISPC_D65_A_TL84_CGEN_EPSILON
;

178 
cGíCfg
.
kr
 = 
ISPC_D65_A_TL84_CGEN_KR
;

179 
cGíCfg
.
kg
 = 
ISPC_D65_A_TL84_CGEN_KG
;

180 
cGíCfg
.
kb
 = 
ISPC_D65_A_TL84_CGEN_KB
;

184 
p
->
pMedCfg
 = &
medCfg
;

185 
medCfg
.
kî√lSize
 = 
ISPC_D65_A_TL84_CHROMA_MEDIAN_SIZE
;

186 
medCfg
.
¶›e
 = 
ISPC_D65_A_TL84_CHROMA_MEDIAN_MIX_SLOPE
;

187 
medCfg
.
off£t
 = 
ISPC_D65_A_TL84_CHROMA_MEDIAN_MIX_OFFSET
;

191 
p
->
pChromaDnsCfg
 = &
chrDnsCfg
;

193 
chrDnsCfg
.
hE«b
 = 
ISPC_D65_A_TL84_CHROMA_DNS_H_ENAB
;

194 
chrDnsCfg
.
limô
 = 
ISPC_D65_A_TL84_CHROMA_DNS_LIMIT
;

195 
chrDnsCfg
.
gªyDeßtOff£t
 = 
ISPC_D65_A_TL84_GREY_DESAT_OFFSET
;

196 
chrDnsCfg
.
gªyDeßtSl›e
 = 
ISPC_D65_A_TL84_GREY_DESAT_SLOPE
;

198 
chrDnsCfg
.
th_r
 = 
ISPC_D65_A_TL84_CHROMA_DNS_TH_R
;

199 
chrDnsCfg
.
th_g
 = 
ISPC_D65_A_TL84_CHROMA_DNS_TH_G
;

200 
chrDnsCfg
.
th_b
 = 
ISPC_D65_A_TL84_CHROMA_DNS_TH_B
;

202 
chrDnsCfg
.
gªyCb
 = 
ISPC_D65_A_TL84_GREY_POINT_B
;

203 
chrDnsCfg
.
gªyCg
 = 
ISPC_D65_A_TL84_GREY_POINT_G
;

204 
chrDnsCfg
.
gªyCr
 = 
ISPC_D65_A_TL84_GREY_POINT_R
;

206 
chrDnsCfg
.
c⁄vC€ffC‹√r
 = 
i•cLow∑ssKî√l
[0];

207 
chrDnsCfg
.
c⁄vC€ffEdge
 = 
i•cLow∑ssKî√l
[1];

208 
chrDnsCfg
.
c⁄vC€ffCíãr
 = 
i•cLow∑ssKî√l
[4];

212 
p
->
pCﬁCombCfg
 = &
ccCfg
;

213 
ccCfg
.
kr
 = 
ISPC_D65_A_TL84_CC_KR
;

214 
ccCfg
.
kg
 = 
ISPC_D65_A_TL84_CC_KG
;

215 
ccCfg
.
kb
 = 
ISPC_D65_A_TL84_CC_KB
;

216 
	`mem˝y
(
ccCfg
.
ccm
 , 
i•c_TL84_CCM
 , (ispc_TL84_CCM ));

217 
	`mem˝y
(
ccCfg
.
ccmOff
, 
i•cCCMOff
, (ispcCCMOff));

221 
p
->
pLutCfg
 = &
lutCfg
;

222 
lutCfg
.
èbÀ
 = 
gammaLutFp16
;

223 
lutCfg
.
size
 = 512;

224 
lutCfg
.
rgnSize
[0] = 0x55555555;

225 
lutCfg
.
rgnSize
[1] = 0x55555555;

227 
p
->
pCﬁC⁄vCfg
 = &
cﬁC⁄vCfg
;

228 
	`mem˝y
(
cﬁC⁄vCfg
.
m©
 , 
i•cCSC
 , (ispcCSC ));

229 
	`mem˝y
(
cﬁC⁄vCfg
.
off£t
, 
i•cCSCOff
, (ispcCSCOff));

233 
p
->
pUpfúdn0Cfg
 = &
updnCfg0
;

234 if(
£ns‹
==1)

236 
updnCfg0
.
vN
 = 
N
; updnCfg0.
vD
 = 
D_IMX214
;

237 
updnCfg0
.
hN
 = 
N
; updnCfg0.
hD
 = 
D_IMX214
;

241 
updnCfg0
.
vN
 = 
N
; updnCfg0.
vD
 = 
D_IMX378
;

242 
updnCfg0
.
hN
 = 
N
; updnCfg0.
hD
 = 
D_IMX378
;

244 
updnCfg0
.
kîSz
 = 7;

245 
updnCfg0
.
vC€fs
 = vCoefs;

246 
updnCfg0
.
hC€fs
 = hCoefs;

250 
p
->
pUpfúdn12Cfg
 = &
updnCfg12
;

251 if(
£ns‹
==1)

253 
updnCfg12
.
vN
 = 
N
; updnCfg12.
vD
 = (
D_IMX214
<<1);

254 
updnCfg12
.
hN
 = 
N
; updnCfg12.
hD
 = (
D_IMX214
<<1);

258 
updnCfg12
.
vN
 = 
N
; updnCfg12.
vD
 = (
D_IMX378
<<1);

259 
updnCfg12
.
hN
 = 
N
; updnCfg12.
hD
 = (
D_IMX378
<<1);

262 
updnCfg12
.
kîSz
 = 7;

263 
updnCfg12
.
vC€fs
 = vCoefs;

264 
updnCfg12
.
hC€fs
 = hCoefs;

268 
	`OpùeDeÁu…Cfg
(
p
, 
SIPP_SIGMA_ID
 );

269 
	`OpùeDeÁu…Cfg
(
p
, 
SIPP_RAW_ID
 );

270 
	`OpùeDeÁu…Cfg
(
p
, 
SIPP_DBYR_ID
 );

271 
	`OpùeDeÁu…Cfg
(
p
, 
SIPP_DOGL_ID
 );

272 
	`OpùeDeÁu…Cfg
(
p
, 
SIPP_SHARPEN_ID
);

273 
	`OpùeDeÁu…Cfg
(
p
, 
SIPP_CGEN_ID
 );

274 
	`OpùeDeÁu…Cfg
(
p
, 
SIPP_MED_ID
 );

275 
	`OpùeDeÁu…Cfg
(
p
, 
SIPP_CHROMA_ID
 );

276 
	`OpùeDeÁu…Cfg
(
p
, 
SIPP_CC_ID
 );

277 
	`OpùeDeÁu…Cfg
(
p
, 
SIPP_LUT_ID
 );

278 
	}
}

	@Demo/CamOpipeDebayerHdmi/leon_rt/opipe_app_cfg_rx.c

1 
	~<°dio.h
>

2 
	~"Opùe.h
"

3 
	~"i•_∑øms_wøp.h
"

5 
MùiRxCfg
 
	gmùiCfg
;

8 
	$≠pSëP¨amsRxPùe
(
Opùe
 *
p
)

12 
p
->
øwBôs
 = 
ISPC_BAYER_BITS
;

13 
p
->
bayîP©ã∫
 = 
BAYER_PATTERN
;

16 
p
->
pMùiRxCfg
[0] = &
mùiCfg
;

17 
mùiCfg
.
cfg
 = 1;

18 
mùiCfg
.
xSèπWidth
 [0] = (
p
->
width
 << 16) | 0x0000;

19 
mùiCfg
.
ySèπHeight
[0] = ((
p
->
height
 - 2) << 16) | 0x0000;

20 
mùiCfg
.
£l01
 = 0xF << 8;

21 
mùiCfg
.
mask
 [0] = (1 << 
ISPC_BAYER_BITS
) - 1;

22 
	}
}

	@Demo/CamOpipeDebayerHdmi/leon_rt/params/isp_gamma_lut_fp16.c

1 
	~<°döt.h
>

2 
	~"i•_∑øms_wøp.h
"

7 
uöt16_t
 
	ggammaLutFp16
[512*4] 
ALIGNED
(8) = {

	@Demo/CamOpipeDebayerHdmi/leon_rt/params/isp_params_pp.c

1 
	~<°döt.h
>

3 
	~"i•_∑øms_wøp.h
"

6 
uöt16_t
 
	gi•cD65LscMesh
[
ISPC_D65_A_TL84_LSC_GAIN_MAP_STRIDE
 * 
ISPC_D65_A_TL84_LSC_GAIN_MAP_H
] 
ALIGNED
(8) =

42 
uöt16_t
 
	gi•cALscMesh
[
ISPC_D65_A_TL84_LSC_GAIN_MAP_STRIDE
 * 
ISPC_D65_A_TL84_LSC_GAIN_MAP_H
] 
ALIGNED
(8) =

78 
uöt16_t
 
	gi•cTL84LscMesh
[
ISPC_D65_A_TL84_LSC_GAIN_MAP_STRIDE
 * 
ISPC_D65_A_TL84_LSC_GAIN_MAP_H
] 
ALIGNED
(8) =

	@Demo/CamOpipeDebayerHdmi/leon_rt/params/isp_params_pp.h

3 
	#ISPC_INPUT_IMAGE
 "S˚√_2800K_5L_1_10bô.øw"

	)

6 
	#ISPC_BAYER_W_IMX214
 4208

	)

7 
	#ISPC_BAYER_H_IMX214
 3120

	)

8 
	#ISPC_BAYER_W_IMX378
 4208

	)

9 
	#ISPC_BAYER_H_IMX378
 3120

	)

10 
	#ISPC_BAYER_BITS
 10

	)

12 
	#ISPC_D65_A_TL84_BLACK_LEVEL_P0
 64

	)

13 
	#ISPC_D65_A_TL84_BLACK_LEVEL_P1
 64

	)

14 
	#ISPC_D65_A_TL84_BLACK_LEVEL_P2
 64

	)

15 
	#ISPC_D65_A_TL84_BLACK_LEVEL_P3
 64

	)

17 
	#ISPC_D65_A_TL84_SIGMA_NOISE_FLOOR
 0

	)

18 
	#ISPC_D65_A_TL84_SIGMA_THRESH1_P0
 0

	)

19 
	#ISPC_D65_A_TL84_SIGMA_THRESH2_P0
 0

	)

20 
	#ISPC_D65_A_TL84_SIGMA_THRESH1_P1
 0

	)

21 
	#ISPC_D65_A_TL84_SIGMA_THRESH2_P1
 0

	)

22 
	#ISPC_D65_A_TL84_SIGMA_THRESH1_P2
 0

	)

23 
	#ISPC_D65_A_TL84_SIGMA_THRESH2_P2
 0

	)

24 
	#ISPC_D65_A_TL84_SIGMA_THRESH1_P3
 0

	)

25 
	#ISPC_D65_A_TL84_SIGMA_THRESH2_P3
 0

	)

28 
	#ISPC_D65_A_TL84_LSC_GAIN_MAP_W
 34

	)

29 
	#ISPC_D65_A_TL84_LSC_GAIN_MAP_H
 26

	)

30 
	#ISPC_D65_A_TL84_LSC_GAIN_MAP_STRIDE
 40

	)

32 
uöt16_t
 
i•cD65LscMesh
[
ISPC_D65_A_TL84_LSC_GAIN_MAP_STRIDE
 * 
ISPC_D65_A_TL84_LSC_GAIN_MAP_H
];

33 
uöt16_t
 
i•cALscMesh
[
ISPC_D65_A_TL84_LSC_GAIN_MAP_STRIDE
 * 
ISPC_D65_A_TL84_LSC_GAIN_MAP_H
] ;

34 
uöt16_t
 
i•cTL84LscMesh
[
ISPC_D65_A_TL84_LSC_GAIN_MAP_STRIDE
 * 
ISPC_D65_A_TL84_LSC_GAIN_MAP_H
] ;

37 
	#ISPC_D65_A_TL84_BAD_PIX_ALPHA_G_HOT
 0x06

38 
	#ISPC_D65_A_TL84_BAD_PIX_ALPHA_RB_HOT
 0x06

39 
	#ISPC_D65_A_TL84_BAD_PIX_ALPHA_G_COLD
 0x06

40 
	#ISPC_D65_A_TL84_BAD_PIX_ALPHA_RB_COLD
 0x06

41 
	#ISPC_D65_A_TL84_BAD_PIX_NOISE_LEVEL
 0x0000

42 

	)

44 
	#ISPC_D65_A_TL84_GRGB_IMBAL_PLAT_DARK
 60

	)

45 
	#ISPC_D65_A_TL84_GRGB_IMBAL_DECAY_DARK
 75

	)

46 
	#ISPC_D65_A_TL84_GRGB_IMBAL_PLAT_BRIGHT
 300

	)

47 
	#ISPC_D65_A_TL84_GRGB_IMBAL_DECAY_BRIGHT
 360

	)

48 
	#ISPC_D65_A_TL84_GRGB_IMBAL_THRESHOLD
 16

49 

	)

50 
	#ISPC_D65_RAW_GAIN_0
 0x026f

51 
	#ISPC_D65_RAW_GAIN_1
 0x0111

52 
	#ISPC_D65_RAW_GAIN_2
 0x0111

53 
	#ISPC_D65_RAW_GAIN_3
 0x016b

54 

	)

55 
	#ISPC_A_RAW_GAIN_0
 0x016b

56 
	#ISPC_A_RAW_GAIN_1
 0x0111

57 
	#ISPC_A_RAW_GAIN_2
 0x0111

58 
	#ISPC_A_RAW_GAIN_3
 0x0293

59 

	)

60 
	#ISPC_TL84_RAW_GAIN_0
 0x01d3

61 
	#ISPC_TL84_RAW_GAIN_1
 0x0111

62 
	#ISPC_TL84_RAW_GAIN_2
 0x0111

63 
	#ISPC_TL84_RAW_GAIN_3
 0x01f7

64 

	)

66 
	#ISPC_D65_A_TL84_RAW_CLAMP_0
 0x03ff

67 
	#ISPC_D65_A_TL84_RAW_CLAMP_1
 0x03ff

68 
	#ISPC_D65_A_TL84_RAW_CLAMP_2
 0x03ff

69 
	#ISPC_D65_A_TL84_RAW_CLAMP_3
 0x03ff

70 

	)

71 
	#ISPC_D65_A_TL84_RAW_OUTPUT_BITS
 10

	)

	@Demo/CamOpipeDebayerHdmi/leon_rt/params/isp_params_still.c

1 
	~<°döt.h
>

3 
	~"i•_∑øms_°ûl.h
"

5 
uöt8_t
 
	gi•cLow∑ssKî√l
[9] = {

11 
uöt8_t
 
	gi•cLumaDnsLut
[32] = {

16 
uöt8_t
 
	gi•cYDnsDi°Lut
[256] 
__©åibuã__
((
Æig√d
(8))) = {

51 
uöt8_t
 
	gi•cGammaLut0_32
[9] = {

55 
uöt8_t
 
	gi•cGammaLut32_255
[9] = {

60 
	gi•cLtmCurves
[16*8] = {

80 
uöt8_t
 
	gdogC€ffs11
[6] = {

83 
uöt8_t
 
	gdogC€ffs15
[8] = {

88 
	gi•c_D65_CCM
[9] = {

95 
	gi•c_A_CCM
[9] = {

102 
	gi•c_TL84_CCM
[9] = {

108 
	gi•cCCMOff
[3] = {

112 
uöt16_t
 
	glut3d
[16*16*16*4] = {

372 
	gi•cGammaTabÀ
[8192] = {

1400 
	gi•cCSC
[9] = {

1406 
	gi•cCSCOff
[3] = {

1411 
uöt8_t
 
	ghC€fs
[] 
__©åibuã__
((
Æig√d
(8))) = {

1422 
uöt8_t
 
	gvC€fs
[] 
__©åibuã__
((
Æig√d
(8))) = {

	@Demo/CamOpipeDebayerHdmi/leon_rt/params/isp_params_still.h

4 
	#ISPC_BAYER_W_STILL_IMX214
 4208

	)

5 
	#ISPC_BAYER_H_STILL_IMX214
 3120

	)

6 
	#ISPC_BAYER_W_STILL_IMX378
 4208

	)

7 
	#ISPC_BAYER_H_STILL_IMX378
 3120

	)

8 
	#ISPC_BAYER_BITS_STILL
 10

	)

11 
	#ISPC_D65_A_TL84_DEMOSAIC_MIX_SLOPE
 1800

	)

12 
	#ISPC_D65_A_TL84_DEMOSAIC_MIX_OFFSET
 254

	)

13 
	#ISPC_D65_A_TL84_DEMOSAIC_MIX_GRADIENT_MUL
 238

	)

14 
	#ISPC_D65_A_TL84_DEMOSAIC_LUMA_WEIGHT_RED
 64

	)

15 
	#ISPC_D65_A_TL84_DEMOSAIC_LUMA_WEIGHT_GREEN
 127

	)

16 
	#ISPC_D65_A_TL84_DEMOSAIC_LUMA_WEIGHT_BLUE
 64

	)

19 
	#ISPC_D65_A_TL84_CGEN_EPSILON
 2

	)

20 
	#ISPC_D65_A_TL84_CGEN_KR
 106

	)

21 
	#ISPC_D65_A_TL84_CGEN_KG
 191

	)

22 
	#ISPC_D65_A_TL84_CGEN_KB
 149

	)

23 
	#ISPC_D65_A_TL84_CGEN_LUMA_COEFF_R
 64

	)

24 
	#ISPC_D65_A_TL84_CGEN_LUMA_COEFF_G
 127

	)

25 
	#ISPC_D65_A_TL84_CGEN_LUMA_COEFF_B
 64

	)

26 
	#ISPC_D65_A_TL84_CGEN_PFR_STRENGTH
 80

	)

27 
	#ISPC_D65_A_TL84_CGEN_DESAT_OFFSET
 0

	)

28 
	#ISPC_D65_A_TL84_CGEN_DESAT_SLOPE
 232

	)

31 
	#ISPC_D65_A_TL84_CHROMA_MEDIAN_SIZE
 7

	)

34 
	#ISPC_D65_A_TL84_CHROMA_MEDIAN_MIX_SLOPE
 166

	)

35 
	#ISPC_D65_A_TL84_CHROMA_MEDIAN_MIX_OFFSET
 3

	)

38 
uöt8_t
 
i•cLow∑ssKî√l
[9];

41 
	#ISPC_D65_A_TL84_SHARP_SIGMA
 0.643838

	)

42 
	#ISPC_D65_A_TL84_SHARP_STRENGTH_DARKEN
 1.933594

	)

43 
	#ISPC_D65_A_TL84_SHARP_STRENGTH_LIGHTEN
 1.223633

	)

44 
	#ISPC_D65_A_TL84_SHARP_ALPHA
 0.003012

	)

45 
	#ISPC_D65_A_TL84_SHARP_OVERSHOOT
 1.023438

	)

46 
	#ISPC_D65_A_TL84_SHARP_UNDERSHOOT
 0.921387

	)

47 
	#ISPC_D65_A_TL84_SHARP_RANGE_STOP_0
 0.000000

	)

48 
	#ISPC_D65_A_TL84_SHARP_RANGE_STOP_1
 0.000408

	)

49 
	#ISPC_D65_A_TL84_SHARP_RANGE_STOP_2
 0.991699

	)

50 
	#ISPC_D65_A_TL84_SHARP_RANGE_STOP_3
 0.999023

	)

51 
	#ISPC_D65_A_TL84_SHARP_MIN_THR
 0.000375

	)

52 
	#ISPC_D65_A_TL84_SHARP_COEF0
 0.070159

	)

53 
	#ISPC_D65_A_TL84_SHARP_COEF1
 0.131075

	)

54 
	#ISPC_D65_A_TL84_SHARP_COEF2
 0.190713

	)

55 
	#ISPC_D65_A_TL84_SHARP_COEF3
 0.216106

	)

58 
	#ISPC_D65_A_TL84_LUMA_DNS_STRENGTH
 22.750000

	)

59 
	#ISPC_D65_A_TL84_LUMA_DNS_ALPHA
 72

60 
	#ISPC_D65_A_TL84_LUMA_DNS_GAMMA
 0.700000

	)

61 
	#ISPC_D65_A_TL84_LUMA_DNS_ANGLE_OF_VIEW
 25.000000

	)

67 
	#ISPC_D65_A_TL84_LUMA_DNS_F2
 0x00000000

	)

68 
	#ISPC_D65_A_TL84_LUMA_DNS_BITPOS
 7

	)

70 
uöt8_t
 
i•cLumaDnsLut
[32];

72 
uöt8_t
 
i•cYDnsDi°Lut
[256];

74 
uöt8_t
 
i•cGammaLut0_32
[9];

75 
uöt8_t
 
i•cGammaLut32_255
[9];

77 
	#ISPC_D65_A_TL84_LUMA_DNS_REF_SHIFT
 15

	)

79 
i•cLtmCurves
[16*8];

82 
	#ISPC_D65_A_TL84_LTM_FILTER_TH1
 32

	)

85 
	#ISPC_D65_A_TL84_DOG_THR
 0

	)

86 
	#ISPC_D65_A_TL84_DOG_STRENGTH
 0

	)

87 
	#ISPC_D65_A_TL84_DOG_SIGMA11
 1.5

	)

88 
	#ISPC_D65_A_TL84_DOG_SIGMA15
 4.5

	)

90 
uöt8_t
 
dogC€ffs11
[6];

91 
uöt8_t
 
dogC€ffs15
[8];

94 
	#ISPC_D65_A_TL84_CHROMA_DNS_TH_R
 6

	)

95 
	#ISPC_D65_A_TL84_CHROMA_DNS_TH_G
 7

	)

96 
	#ISPC_D65_A_TL84_CHROMA_DNS_TH_B
 8

	)

97 
	#ISPC_D65_A_TL84_CHROMA_DNS_LIMIT
 7

	)

98 
	#ISPC_D65_A_TL84_CHROMA_DNS_H_ENAB
 1

	)

101 
	#ISPC_D65_A_TL84_GREY_DESAT_OFFSET
 0

	)

102 
	#ISPC_D65_A_TL84_GREY_DESAT_SLOPE
 203

	)

103 
	#ISPC_D65_A_TL84_GREY_POINT_R
 106

	)

104 
	#ISPC_D65_A_TL84_GREY_POINT_G
 191

	)

105 
	#ISPC_D65_A_TL84_GREY_POINT_B
 149

	)

109 
	#ISPC_D65_A_TL84_CC_KR
 615

	)

110 
	#ISPC_D65_A_TL84_CC_KG
 342

	)

111 
	#ISPC_D65_A_TL84_CC_KB
 438

	)

113 
i•c_D65_CCM
[9];

114 
i•c_A_CCM
[9];

115 
i•c_TL84_CCM
[9];

117 
i•cCCMOff
[3];

119 
uöt16_t
 
lut3d
[16*16*16*4];

121 
i•cGammaTabÀ
[8192];

122 
i•cCSC
[9];

124 
i•cCSCOff
[3];

127 
	#N
 1

128 
	#D_IMX214
 1

129 
	#D_IMX378
 2

130 
uöt8_t
 
hC€fs
[];

131 
uöt8_t
 
vC€fs
[];

	)

	@Demo/CamOpipeDebayerHdmi/leon_rt/params/isp_params_wrap.h

1 #i‚de‡
__ISP_PARAMS_WRAP_H__


2 
	#__ISP_PARAMS_WRAP_H__


	)

5 #i‡
deföed
(
__•¨c
)

6 
	#ALIGNED
(
x
Ë
	`__©åibuã__
((
	`Æig√d
(x)))

	)

8 
	#ALIGNED
(
x
)

10 

	)

13 
	#BAYER_PATTERN
 
RGGB


	)

16 
	~"i•_∑øms_µ.h
"

19 #unde‡
ISPC_BAYER_W_IMX214


20 #unde‡
ISPC_BAYER_H_IMX214


22 #unde‡
ISPC_BAYER_W_IMX378


23 #unde‡
ISPC_BAYER_H_IMX378


25 
	#ISPC_BAYER_W_IMX214
 2080

	)

26 
	#ISPC_BAYER_H_IMX214
 1564

	)

28 
	#ISPC_BAYER_W_IMX378
 4032

	)

29 
	#ISPC_BAYER_H_IMX378
 3048

	)

33 
	~"i•_∑øms_°ûl.h
"

37 #unde‡
ISPC_BAYER_W_STILL_IMX214


38 #unde‡
ISPC_BAYER_H_STILL_IMX214


40 #unde‡
ISPC_BAYER_W_STILL_IMX378


41 #unde‡
ISPC_BAYER_H_STILL_IMX378


43 
	#ISPC_BAYER_W_STILL_IMX214
 
ISPC_BAYER_W_IMX214


	)

44 
	#ISPC_BAYER_H_STILL_IMX214
 
ISPC_BAYER_H_IMX214


	)

46 
	#ISPC_BAYER_W_STILL_IMX378
 
ISPC_BAYER_W_IMX378


	)

47 
	#ISPC_BAYER_H_STILL_IMX378
 
ISPC_BAYER_H_IMX378


	)

51 
	#GammaLutTabÀ
 512*4

	)

52 
uöt16_t
 
gammaLutFp16
[
GammaLutTabÀ
];

	@Demo/CamSIPPDebayerHdmi/leon/app_config.c

13 
	~"DrvDdr.h
"

14 
	~"as£π.h
"

15 
	~"DrvShaveL2Cache.h
"

16 
	~"OsDrvTimî.h
"

17 
	~"OsDrvC¥.h
"

18 
	~"≠p_c⁄fig.h
"

19 
	~"swcLe⁄Utûs.h
"

23 
	#L2CACHE_CFG
 (
SHAVE_L2CACHE_NORMAL_MODE
)

	)

24 
	#PARTITION_0
 (0)

	)

25 
	#SHAVES_USED
 (12)

	)

33 
tyAuxClkDividîCfg
 
	gauxClk
[] =

36 .
auxClockE«bÀMask
 = 
AUX_CLK_MASK_MEDIA
,

37 .
	gauxClockSour˚
 = 
CLK_SRC_SYS_CLK
 ,

38 .
	gauxClockDivNumî©‹
 = 1,

39 .
	gauxClockDivDíomö©‹
 = 1,

42 .
	gauxClockE«bÀMask
 = (
AUX_CLK_MASK_CIF0
 | 
AUX_CLK_MASK_CIF1
),

43 .
	gauxClockSour˚
 = 
CLK_SRC_SYS_CLK
,

44 .
	gauxClockDivNumî©‹
 = 1,

45 .
	gauxClockDivDíomö©‹
 = 1,

48 .
	gauxClockE«bÀMask
 = 
CLOCKS_MIPICFG
,

49 .
	gauxClockSour˚
 = 
CLK_SRC_SYS_CLK
 ,

50 .
	gauxClockDivNumî©‹
 = 1,

51 .
	gauxClockDivDíomö©‹
 = 24,

60 
tySocClockC⁄fig
 
	g˛ocksC⁄fig
 =

62 .
ªfClk0I≈utKhz
 = 
SYS_CLK_KHZ
 ,

63 .
	gªfClk1I≈utKhz
 = 0 ,

64 .
	gèrgëPŒ0FªqKhz
 = 
PLL_DESIRED_FREQ_KHZ
,

65 .
	gèrgëPŒ1FªqKhz
 = 0,

66 .
	g˛kSrcPŒ1
 = 
CLK_SRC_REFCLK0
,

67 .
	gma°îClkDivNumî©‹
 = 1,

68 .
	gma°îClkDivDíomö©‹
 = 1,

69 .
	gcssDssClockE«bÀMask
 = 
DEFAULT_CORE_CSS_DSS_CLOCKS
,

70 .
	gu∑ClockE«bÀMask
 = 
DEFAULT_UPA_CLOCKS
,

71 .
	gmssClockE«bÀMask
 = 
MSS_CLOCKS
,

72 .
	gsùpClockE«bÀMask
 = 
APP_SIPP_CLOCKS
,

73 .
	gpAuxClkCfg
 = 
auxClk
,

76 
	$öôClocksAndMem‹y
()

78 
u32
 
i
;

79 
s32
 
sc
;

81 
sc
 = 
	`OsDrvC¥Inô
();

82 if(
sc
)

83  
sc
;

84 
sc
 = 
	`OsDrvC¥O≥n
();

85 if(
sc
)

86  
sc
;

88 
	`DrvC¥SysDevi˚A˘i⁄
(
SIPP_DOMAIN
, 
ASSERT_RESET
, 
DEV_SIPP_MIPI
 | 
DEV_SIPP_APB_SLV
 | 
DEV_SIPP_MIPI_RX0
 | 
DEV_SIPP_MIPI_RX1
 );

89 
	`DrvC¥SysDevi˚A˘i⁄
(
MSS_DOMAIN
, 
ASSERT_RESET
, 
DEV_MSS_SIPP
 | 
DEV_MSS_AMC
 | 
DEV_MSS_LCD
 | 
DEV_MSS_CIF0
);

91 
	`OsDrvC¥SëupClocks
(&
˛ocksC⁄fig
);

93 
	`DrvC¥SysDevi˚A˘i⁄
(
MSS_DOMAIN
, 
DEASSERT_RESET
, -1);

94 
	`DrvC¥SysDevi˚A˘i⁄
(
CSS_DOMAIN
, 
DEASSERT_RESET
, -1);

95 
	`DrvC¥SysDevi˚A˘i⁄
(
SIPP_DOMAIN
, 
DEASSERT_RESET
, -1);

96 
	`DrvC¥SysDevi˚A˘i⁄
(
UPA_DOMAIN
, 
DEASSERT_RESET
, -1);

98 
sc
 = 
	`OsDrvTimîInô
();

99 if(
sc
)

100  
sc
;

102 
	`DrvDdrInôüli£
(
NULL
);

105 
	`DrvShaveL2CacheSëMode
(
L2CACHE_CFG
);

108 
	`DrvShaveL2CacheSëupP¨tôi⁄
(
SHAVEPART256KB
);

111 
sc
 = 
	`DrvShaveL2CacheAŒoˇãSëP¨tôi⁄s
();

112 if(
sc
)

113  
sc
;

116 
i
 = 0; i < 
SHAVES_USED
; i++)

118 
	`DrvShaveL2CacheSëLSUP¨tId
(
i
, 
PARTITION_0
);

121 
	`DrvShaveL2CacheP¨tôi⁄FlushAndInvÆid©e
(
PARTITION_0
);

123 
	}
}

	@Demo/CamSIPPDebayerHdmi/leon/app_config.h

13 #i‚de‡
APP_CONFIG_H


14 
	#APP_CONFIG_H


	)

18 
	~"mv_ty≥s.h
"

22 
	#SYS_CLK_KHZ
 (12000)

23 
	#PLL_DESIRED_FREQ_KHZ
 (580000)

	)

25 
	#MSS_CLOCKS
 ( 
DEV_MSS_APB_SLV
 | \

26 
DEV_MSS_APB2_CTRL
 | \

27 
DEV_MSS_RTBRIDGE
 | \

28 
DEV_MSS_RTAHB_CTRL
 | \

29 
DEV_MSS_LRT
 | \

30 
DEV_MSS_LRT_DSU
 | \

31 
DEV_MSS_LRT_L2C
 | \

32 
DEV_MSS_LRT_ICB
 | \

33 
DEV_MSS_AXI_BRIDGE
 | \

34 
DEV_MSS_MXI_CTRL
 | \

35 
DEV_MSS_MXI_DEFSLV
 | \

36 
DEV_MSS_AXI_MON
 | \

37 
DEV_MSS_CIF0
 | \

38 
DEV_MSS_CIF1
 | \

39 
DEV_MSS_LCD
 | \

40 
DEV_MSS_AMC
 | \

41 
DEV_MSS_SIPP
 | \

42 
DEV_MSS_TIM
)

	)

44 
	#APP_UPA_CLOCKS
 (
DEV_UPA_SH0
 | \

45 
DEV_UPA_SH1
 | \

46 
DEV_UPA_SH2
 | \

47 
DEV_UPA_SH3
 | \

48 
DEV_UPA_SH4
 | \

49 
DEV_UPA_SH5
 | \

50 
DEV_UPA_SH6
 | \

51 
DEV_UPA_SHAVE_L2
 | \

52 
DEV_UPA_CDMA
 | \

53 
DEV_UPA_CTRL
 )

	)

56 
	#APP_SIPP_CLOCKS
 (
DEV_SIPP_SIGMA
 | \

57 
DEV_SIPP_LSC
 | \

58 
DEV_SIPP_RAW
 | \

59 
DEV_SIPP_DBYR
 | \

60 
DEV_SIPP_DOGL
 | \

61 
DEV_SIPP_LUMA
 | \

62 
DEV_SIPP_SHARPEN
 | \

63 
DEV_SIPP_CGEN
 | \

64 
DEV_SIPP_MED
 | \

65 
DEV_SIPP_CHROMA
 | \

66 
DEV_SIPP_CC
 | \

67 
DEV_SIPP_LUT
 | \

68 
DEV_SIPP_UPFIRDN0
 | \

69 
DEV_SIPP_UPFIRDN1
 | \

70 
DEV_SIPP_UPFIRDN2
 | \

71 
DEV_SIPP_MIPI_RX0
 | \

72 
DEV_MSS_SIPP_CLK_GATES
 | \

73 
DEV_SIPP_MIPI
 | \

74 
DEV_SIPP_SIPP_ABPSLV
 | \

75 
DEV_SIPP_APB_SLV
)

	)

77 
	#CLOCKS_MIPICFG
 (
AUX_CLK_MASK_MIPI_ECFG
 | 
AUX_CLK_MASK_MIPI_CFG
)

	)

80 
	#CLOCKS_MIPICFG
 (
AUX_CLK_MASK_MIPI_ECFG
 | 
AUX_CLK_MASK_MIPI_CFG
)

	)

90 
öôClocksAndMem‹y
();

	@Demo/CamSIPPDebayerHdmi/leon/main.c

13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~<DrvLe⁄.h
>

16 
	~<DrvC¥.h
>

17 
	~<DrvTimî.h
>

18 
	~<b•.h
>

19 
	~"πems_c⁄fig.h
"

26 
u32
 *
Ãt_°¨t
;

33 *
	$POSIX_Inô
 (*
¨gs
)

35 (Ë
¨gs
;

37 
s32
 
sc
;

39 
	`¥ötf
("Init clocks..\n");

40 
sc
 = 
	`öôClocksAndMem‹y
();

41 if(
sc
)

42 
	`exô
(
sc
);

44 
	`¥ötf
("Starting LRT..\n");

45 
	`DrvLe⁄RTSèπup
((
u32
)&
Ãt_°¨t
);

46 
	`DrvLe⁄RTWaôExecuti⁄
();

48 
	`exô
(0);

49 
	}
}

	@Demo/CamSIPPDebayerHdmi/leon/rtems_config.h

9 #i‚de‡
_RTEMS_CONFIG_H_


10 
	#_RTEMS_CONFIG_H_


	)

14 
	~<πems.h
>

15 
	~<πems/b•Io.h
>

16 
	~"≠p_c⁄fig.h
"

17 
	~"ÁèlExãnsi⁄.h
"

22 #i‡
deföed
(
__RTEMS__
)

24 #i‡!
deföed
 (
__CONFIG__
)

25 
	#__CONFIG__


	)

28 
	#CONFIGURE_INIT


	)

30 #i‚de‡
RTEMS_POSIX_API


31 
	#RTEMS_POSIX_API


	)

34 
	#CONFIGURE_MICROSECONDS_PER_TICK
 1000

	)

36 
	#CONFIGURE_TICKS_PER_TIMESLICE
 10

	)

38 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

40 
	#CONFIGURE_APPLICATION_NEEDS_CLOCK_DRIVER


	)

42 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

44 
	#CONFIGURE_MINIMUM_TASK_STACK_SIZE
 4096

	)

46 
	#CONFIGURE_MAXIMUM_TASKS
 4

	)

48 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 4

	)

50 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 8

	)

52 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 8

	)

54 
	#CONFIGURE_MAXIMUM_POSIX_SEMAPHORES
 8

	)

56 
	#CONFIGURE_MAXIMUM_POSIX_MESSAGE_QUEUES
 8

	)

58 
	#CONFIGURE_MAXIMUM_POSIX_TIMERS
 4

	)

60 
	#CONFIGURE_MAXIMUM_TIMERS
 4

	)

62 
	#CONFIGURE_MAXIMUM_SEMAPHORES
 1

	)

66 
	#CONFIGURE_MAXIMUM_USER_EXTENSIONS
 1

	)

67 
	#CONFIGURE_INITIAL_EXTENSIONS
 { .
Áèl
 = 
F©Æ_exãnsi⁄
 }

	)

69 *
POSIX_Inô
 (*
¨gs
);

71 
	~<πems/c⁄fdefs.h
>

76 
BSP_SET_CLOCK
(
SYS_CLK_KHZ
, 
PLL_DESIRED_FREQ_KHZ
, 1, 1, 
DEFAULT_CORE_CSS_DSS_CLOCKS
, 
MSS_CLOCKS
, 
APP_UPA_CLOCKS
, 
APP_SIPP_CLOCKS
, 0x0);

79 
BSP_SET_L2C_CONFIG
(0, 
L2C_REPL_LRU
, 0, 
L2C_MODE_COPY_BACK
, 0, 
NULL
);

	@Demo/CamSIPPDebayerHdmi/leon_rt/Cam214SIPPDebayerHdmi.c

13 
	~"Cam214SIPPDebayîHdmi.h
"

15 
	~<ö˛ude/sùpHwDefs.h
>

16 
	~<¨ch/ma2x5x/ö˛ude/sùpHwDefs_ma2x5x.h
>

18 
u8
 
£ns‹
;

22 
	$ªadCam214SIPPDebayîHdmiI≈ut
(
Cam214SIPPDebayîHdmi
 *
pPl
)

25 ()(
pPl
);

27 
	}
}

29 
	$wrôeCam214SIPPDebayîHdmiOuçut
(
Cam214SIPPDebayîHdmi
 *
pPl
)

32 ()(
pPl
);

34 
	}
}

36 
	$buûdCam214SIPPDebayîHdmi
(
Cam214SIPPDebayîHdmi
 *
pPl
)

39 
pPl
->
∂
 = 
	`sùpCª©ePùñöe
(1, 12, 
	`SIPP_MBIN
(
mböImgSùp
));

42 i‡(
£ns‹
==1)

44 
pPl
->
dmaIn0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x00, 
SIPP_ISP_PIPE_BUFFER_WIDTH_IMX214
, 
SIPP_ISP_PIPE_BUFFER_HEIGHT_IMX214
, 
	`N_PL
(
SIPP_ISP_PIPE_BUFFER_INPUT_NUM_PLANES
), 
	`SZ
(
UI¡16
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

45 
pPl
->
sigmaDnsMa2x5x0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x0, 
SIPP_ISP_PIPE_BUFFER_WIDTH_IMX214
, 
SIPP_ISP_PIPE_BUFFER_HEIGHT_IMX214
, 
	`N_PL
(
SIPP_ISP_PIPE_BUFFER_INPUT_NUM_PLANES
), 
	`SZ
(
UI¡16
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_SIGMA_ID
, 0);

46 
pPl
->
lscMa2x5x0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x0, 
SIPP_ISP_PIPE_BUFFER_WIDTH_IMX214
, 
SIPP_ISP_PIPE_BUFFER_HEIGHT_IMX214
, 
	`N_PL
(
SIPP_ISP_PIPE_BUFFER_INPUT_NUM_PLANES
), 
	`SZ
(
UI¡16
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_LSC_ID
, 0);

47 
pPl
->
øwMa2x5x0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x0, 
SIPP_ISP_PIPE_BUFFER_WIDTH_IMX214
, 
SIPP_ISP_PIPE_BUFFER_HEIGHT_IMX214
, 
	`N_PL
(
SIPP_ISP_PIPE_BUFFER_INPUT_NUM_PLANES
), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_RAW_ID
, 0);

48 
pPl
->
debayîMa2x5x0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x0, 
SIPP_ISP_PIPE_BUFFER_WIDTH_IMX214
, 
SIPP_ISP_PIPE_BUFFER_HEIGHT_IMX214
, 
	`N_PL
(3), 
	`SZ
(
UI¡16
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DBYR_ID
, 0);

49 
	`sùpFûãrAddOBuf
(
pPl
->
debayîMa2x5x0
, 
SIPP_ISP_PIPE_BUFFER_INPUT_NUM_PLANES
, (
Â16
));

50 
pPl
->
dogLtmMa2x5x0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x0, 
SIPP_ISP_PIPE_BUFFER_WIDTH_IMX214
, 
SIPP_ISP_PIPE_BUFFER_HEIGHT_IMX214
, 
	`N_PL
(
SIPP_ISP_PIPE_BUFFER_INPUT_NUM_PLANES
), 
	`SZ
(
Â16
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DOGL_ID
, 0);

51 
pPl
->
ydnsMa2x5x0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x0, 
SIPP_ISP_PIPE_BUFFER_WIDTH_IMX214
, 
SIPP_ISP_PIPE_BUFFER_HEIGHT_IMX214
, 
	`N_PL
(
SIPP_ISP_PIPE_BUFFER_INPUT_NUM_PLANES
), 
	`SZ
(
Â16
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_LUMA_ID
, 0);

52 
pPl
->
sh¨≥nMa2x5x0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x0, 
SIPP_ISP_PIPE_BUFFER_WIDTH_IMX214
, 
SIPP_ISP_PIPE_BUFFER_HEIGHT_IMX214
, 
	`N_PL
(
SIPP_ISP_PIPE_BUFFER_INPUT_NUM_PLANES
), 
	`SZ
(
Â16
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_SHARPEN_ID
, 0);

53 
pPl
->
chromaGíMa2x5x0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 
SIPP_RESIZE
, 
ISPC_CHROMA_PIPE_WIDTH_IMX214
, 
ISPC_CHROMA_PIPE_HEIGHT_IMX214
, 
	`N_PL
(3), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_CGEN_ID
, 0);

54 
pPl
->
medünMa2x5x0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x0, 
ISPC_CHROMA_PIPE_WIDTH_IMX214
, 
ISPC_CHROMA_PIPE_HEIGHT_IMX214
, 
	`N_PL
(3), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_MED_ID
, 0);

55 
pPl
->
chromadnsMa2x5x0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x0, 
ISPC_CHROMA_PIPE_WIDTH_IMX214
, 
ISPC_CHROMA_PIPE_HEIGHT_IMX214
, 
	`N_PL
(3), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_CHROMA_ID
, 0);

56 
pPl
->
cﬁ‹combMa2x5x0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x0, 
SIPP_ISP_PIPE_BUFFER_WIDTH_IMX214
, 
SIPP_ISP_PIPE_BUFFER_HEIGHT_IMX214
, 
	`N_PL
(3), 
	`SZ
(
UI¡16
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_CC_ID
, 0);

57 
pPl
->
lutMa2x5x0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x0, 
SIPP_ISP_PIPE_BUFFER_WIDTH_IMX214
, 
SIPP_ISP_PIPE_BUFFER_HEIGHT_IMX214
, 
	`N_PL
(3), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_LUT_ID
, 0);

58 
pPl
->
pﬁypha£fúMa2x5xY
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 
SIPP_RESIZE
, 
POLY_Y_IMAGE_WIDTH_IMX214
, 
POLY_Y_IMAGE_HEIGHT_IMX214
, 
	`N_PL
(1), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_UPFIRDN_ID
, 0);

59 
pPl
->
pﬁypha£fúMa2x5xU
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 
SIPP_RESIZE
, 
POLY_UV_IMAGE_WIDTH_IMX214
, 
POLY_UV_IMAGE_HEIGHT_IMX214
, 
	`N_PL
(1), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_UPFIRDN_ID
, 0);

60 
pPl
->
pﬁypha£fúMa2x5xV
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 
SIPP_RESIZE
, 
POLY_UV_IMAGE_WIDTH_IMX214
, 
POLY_UV_IMAGE_HEIGHT_IMX214
, 
	`N_PL
(1), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_UPFIRDN_ID
, 0);

61 
pPl
->
dmaOutY
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x00, 
POLY_Y_IMAGE_WIDTH_IMX214
, 
POLY_Y_IMAGE_HEIGHT_IMX214
, 
	`N_PL
(1), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

62 
pPl
->
dmaOutU
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x00, 
POLY_UV_IMAGE_WIDTH_IMX214
, 
POLY_UV_IMAGE_HEIGHT_IMX214
, 
	`N_PL
(1), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

63 
pPl
->
dmaOutV
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x00, 
POLY_UV_IMAGE_WIDTH_IMX214
, 
POLY_UV_IMAGE_HEIGHT_IMX214
, 
	`N_PL
(1), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

65 if(
£ns‹
==2)

67 
pPl
->
dmaIn0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x00, 
SIPP_ISP_PIPE_BUFFER_WIDTH_IMX378
, 
SIPP_ISP_PIPE_BUFFER_HEIGHT_IMX378
, 
	`N_PL
(
SIPP_ISP_PIPE_BUFFER_INPUT_NUM_PLANES
), 
	`SZ
(
UI¡16
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

68 
pPl
->
sigmaDnsMa2x5x0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x0, 
SIPP_ISP_PIPE_BUFFER_WIDTH_IMX378
, 
SIPP_ISP_PIPE_BUFFER_HEIGHT_IMX378
, 
	`N_PL
(
SIPP_ISP_PIPE_BUFFER_INPUT_NUM_PLANES
), 
	`SZ
(
UI¡16
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_SIGMA_ID
, 0);

69 
pPl
->
lscMa2x5x0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x0, 
SIPP_ISP_PIPE_BUFFER_WIDTH_IMX378
, 
SIPP_ISP_PIPE_BUFFER_HEIGHT_IMX378
, 
	`N_PL
(
SIPP_ISP_PIPE_BUFFER_INPUT_NUM_PLANES
), 
	`SZ
(
UI¡16
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_LSC_ID
, 0);

70 
pPl
->
øwMa2x5x0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x0, 
SIPP_ISP_PIPE_BUFFER_WIDTH_IMX378
, 
SIPP_ISP_PIPE_BUFFER_HEIGHT_IMX378
, 
	`N_PL
(
SIPP_ISP_PIPE_BUFFER_INPUT_NUM_PLANES
), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_RAW_ID
, 0);

71 
pPl
->
debayîMa2x5x0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x0, 
SIPP_ISP_PIPE_BUFFER_WIDTH_IMX378
, 
SIPP_ISP_PIPE_BUFFER_HEIGHT_IMX378
, 
	`N_PL
(3), 
	`SZ
(
UI¡16
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DBYR_ID
, 0);

72 
	`sùpFûãrAddOBuf
(
pPl
->
debayîMa2x5x0
, 
SIPP_ISP_PIPE_BUFFER_INPUT_NUM_PLANES
, (
Â16
));

73 
pPl
->
dogLtmMa2x5x0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x0, 
SIPP_ISP_PIPE_BUFFER_WIDTH_IMX378
, 
SIPP_ISP_PIPE_BUFFER_HEIGHT_IMX378
, 
	`N_PL
(
SIPP_ISP_PIPE_BUFFER_INPUT_NUM_PLANES
), 
	`SZ
(
Â16
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DOGL_ID
, 0);

74 
pPl
->
ydnsMa2x5x0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x0, 
SIPP_ISP_PIPE_BUFFER_WIDTH_IMX378
, 
SIPP_ISP_PIPE_BUFFER_HEIGHT_IMX378
, 
	`N_PL
(
SIPP_ISP_PIPE_BUFFER_INPUT_NUM_PLANES
), 
	`SZ
(
Â16
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_LUMA_ID
, 0);

75 
pPl
->
sh¨≥nMa2x5x0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x0, 
SIPP_ISP_PIPE_BUFFER_WIDTH_IMX378
, 
SIPP_ISP_PIPE_BUFFER_HEIGHT_IMX378
, 
	`N_PL
(
SIPP_ISP_PIPE_BUFFER_INPUT_NUM_PLANES
), 
	`SZ
(
Â16
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_SHARPEN_ID
, 0);

76 
pPl
->
chromaGíMa2x5x0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 
SIPP_RESIZE
, 
ISPC_CHROMA_PIPE_WIDTH_IMX378
, 
ISPC_CHROMA_PIPE_HEIGHT_IMX378
, 
	`N_PL
(3), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_CGEN_ID
, 0);

77 
pPl
->
medünMa2x5x0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x0, 
ISPC_CHROMA_PIPE_WIDTH_IMX378
, 
ISPC_CHROMA_PIPE_HEIGHT_IMX378
, 
	`N_PL
(3), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_MED_ID
, 0);

78 
pPl
->
chromadnsMa2x5x0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x0, 
ISPC_CHROMA_PIPE_WIDTH_IMX378
, 
ISPC_CHROMA_PIPE_HEIGHT_IMX378
, 
	`N_PL
(3), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_CHROMA_ID
, 0);

79 
pPl
->
cﬁ‹combMa2x5x0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x0, 
SIPP_ISP_PIPE_BUFFER_WIDTH_IMX378
, 
SIPP_ISP_PIPE_BUFFER_HEIGHT_IMX378
, 
	`N_PL
(3), 
	`SZ
(
UI¡16
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_CC_ID
, 0);

80 
pPl
->
lutMa2x5x0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x0, 
SIPP_ISP_PIPE_BUFFER_WIDTH_IMX378
, 
SIPP_ISP_PIPE_BUFFER_HEIGHT_IMX378
, 
	`N_PL
(3), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_LUT_ID
, 0);

81 
pPl
->
pﬁypha£fúMa2x5xY
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 
SIPP_RESIZE
, 
POLY_Y_IMAGE_WIDTH_IMX378
, 
POLY_Y_IMAGE_HEIGHT_IMX378
, 
	`N_PL
(1), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_UPFIRDN_ID
, 0);

82 
pPl
->
pﬁypha£fúMa2x5xU
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 
SIPP_RESIZE
, 
POLY_UV_IMAGE_WIDTH_IMX378
, 
POLY_UV_IMAGE_HEIGHT_IMX378
, 
	`N_PL
(1), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_UPFIRDN_ID
, 0);

83 
pPl
->
pﬁypha£fúMa2x5xV
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 
SIPP_RESIZE
, 
POLY_UV_IMAGE_WIDTH_IMX378
, 
POLY_UV_IMAGE_HEIGHT_IMX378
, 
	`N_PL
(1), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_UPFIRDN_ID
, 0);

84 
pPl
->
dmaOutY
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x00, 
POLY_Y_IMAGE_WIDTH_IMX378
, 
POLY_Y_IMAGE_HEIGHT_IMX378
, 
	`N_PL
(1), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

85 
pPl
->
dmaOutU
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x00, 
POLY_UV_IMAGE_WIDTH_IMX378
, 
POLY_UV_IMAGE_HEIGHT_IMX378
, 
	`N_PL
(1), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

86 
pPl
->
dmaOutV
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x00, 
POLY_UV_IMAGE_WIDTH_IMX378
, 
POLY_UV_IMAGE_HEIGHT_IMX378
, 
	`N_PL
(1), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

89 
	`sùpLökFûãr
(
pPl
->
sigmaDnsMa2x5x0
,ÖPl->
dmaIn0
, 5,5 );

90 
	`sùpLökFûãr
(
pPl
->
lscMa2x5x0
,ÖPl->
sigmaDnsMa2x5x0
, 1,1 );

91 
	`sùpLökFûãr
(
pPl
->
øwMa2x5x0
,ÖPl->
lscMa2x5x0
, 5,5 );

92 
	`sùpLökFûãr
(
pPl
->
debayîMa2x5x0
,ÖPl->
øwMa2x5x0
, 11,11 );

93 
	`sùpLökFûãr
(
pPl
->
dogLtmMa2x5x0
,ÖPl->
debayîMa2x5x0
, 15,15 );

94 
	`sùpLökFûãrSëOBuf
(
pPl
->
dogLtmMa2x5x0
,ÖPl->
debayîMa2x5x0
, 1);

95 
	`sùpLökFûãr
(
pPl
->
ydnsMa2x5x0
,ÖPl->
dogLtmMa2x5x0
, 11,11 );

96 
	`sùpLökFûãr
(
pPl
->
sh¨≥nMa2x5x0
,ÖPl->
ydnsMa2x5x0
, 7,7 );

97 
	`sùpLökFûãr
(
pPl
->
chromaGíMa2x5x0
,ÖPl->
debayîMa2x5x0
, 6,6 );

98 
	`sùpLökFûãr
(
pPl
->
medünMa2x5x0
,ÖPl->
chromaGíMa2x5x0
, 7,7 );

99 
	`sùpLökFûãr
(
pPl
->
medünMa2x5x0
,ÖPl->
debayîMa2x5x0
, 1,0 );

100 
	`sùpLökFûãrSëOBuf
(
pPl
->
medünMa2x5x0
,ÖPl->
debayîMa2x5x0
, 1);

101 
	`sùpLökFûãr
(
pPl
->
chromadnsMa2x5x0
,ÖPl->
medünMa2x5x0
, 3,3 );

102 
	`sùpLökFûãr
(
pPl
->
cﬁ‹combMa2x5x0
,ÖPl->
sh¨≥nMa2x5x0
, 1,1 );

103 
	`sùpLökFûãr
(
pPl
->
cﬁ‹combMa2x5x0
,ÖPl->
chromadnsMa2x5x0
, 5,5 );

104 
	`sùpLökFûãr
(
pPl
->
lutMa2x5x0
,ÖPl->
cﬁ‹combMa2x5x0
, 1,1 );

105 
	`sùpLökFûãr
(
pPl
->
pﬁypha£fúMa2x5xY
,ÖPl->
lutMa2x5x0
, 7,7 );

106 
	`sùpLökFûãr
(
pPl
->
pﬁypha£fúMa2x5xU
,ÖPl->
lutMa2x5x0
, 7,7 );

107 
	`sùpLökFûãr
(
pPl
->
pﬁypha£fúMa2x5xV
,ÖPl->
lutMa2x5x0
, 7,7 );

108 
	`sùpLökFûãr
(
pPl
->
dmaOutY
,ÖPl->
pﬁypha£fúMa2x5xY
, 1,1 );

109 
	`sùpLökFûãr
(
pPl
->
dmaOutU
,ÖPl->
pﬁypha£fúMa2x5xU
, 1,1 );

110 
	`sùpLökFûãr
(
pPl
->
dmaOutV
,ÖPl->
pﬁypha£fúMa2x5xV
, 1,1 );

112 
	}
}

115 
	$c⁄figCam214SIPPDebayîHdmi
(
Cam214SIPPDebayîHdmi
 *
pPl
)

117 
DmaP¨am
 *
dmaIn0Cfg
 = (DmaP¨am *)
pPl
->
dmaIn0
->
∑øms
;

118 
SigmaP¨am
 *
sigmaDnsMa2x5x0Cfg
 = (SigmaP¨am *)
pPl
->
sigmaDnsMa2x5x0
->
∑øms
;

119 
LscP¨am
 *
lscMa2x5x0Cfg
 = (LscP¨am *)
pPl
->
lscMa2x5x0
->
∑øms
;

120 
RawP¨am
 *
øwMa2x5x0Cfg
 = (RawP¨am *)
pPl
->
øwMa2x5x0
->
∑øms
;

121 
DbyrP¨am
 *
debayîMa2x5x0Cfg
 = (DbyrP¨am *)
pPl
->
debayîMa2x5x0
->
∑øms
;

122 
DogLtmP¨am
 *
dogLtmMa2x5x0Cfg
 = (DogLtmP¨am *)
pPl
->
dogLtmMa2x5x0
->
∑øms
;

123 
YDnsP¨am
 *
ydnsMa2x5x0Cfg
 = (YDnsP¨am *)
pPl
->
ydnsMa2x5x0
->
∑øms
;

124 
UsmP¨am
 *
sh¨≥nMa2x5x0Cfg
 = (UsmP¨am *)
pPl
->
sh¨≥nMa2x5x0
->
∑øms
;

125 
GíChrP¨am
 *
chromaGíMa2x5x0Cfg
(GíChrP¨am *)
pPl
->
chromaGíMa2x5x0
->
∑øms
;

126 
MedP¨am
 *
medünMa2x5x0Cfg
 = (MedP¨am *)
pPl
->
medünMa2x5x0
->
∑øms
;

127 
ChrDnsP¨am
 *
chromadnsMa2x5x0Cfg
(ChrDnsP¨am *)
pPl
->
chromadnsMa2x5x0
->
∑øms
;

128 
CﬁCombP¨am
 *
cﬁ‹combMa2x5x0Cfg
(CﬁCombP¨am *)
pPl
->
cﬁ‹combMa2x5x0
->
∑øms
;

129 
LutP¨am
 *
lutMa2x5x0Cfg
 = (LutP¨am *)
pPl
->
lutMa2x5x0
->
∑øms
;

130 
PﬁyFúP¨am
 *
pﬁypha£fúMa2x5xYCfg
(PﬁyFúP¨am *)
pPl
->
pﬁypha£fúMa2x5xY
->
∑øms
;

131 
PﬁyFúP¨am
 *
pﬁypha£fúMa2x5xUCfg
(PﬁyFúP¨am *)
pPl
->
pﬁypha£fúMa2x5xU
->
∑øms
;

132 
PﬁyFúP¨am
 *
pﬁypha£fúMa2x5xVCfg
(PﬁyFúP¨am *)
pPl
->
pﬁypha£fúMa2x5xV
->
∑øms
;

133 
DmaP¨am
 *
dmaOutYCfg
 = (DmaP¨am *)
pPl
->
dmaOutY
->
∑øms
;

134 
DmaP¨am
 *
dmaOutUCfg
 = (DmaP¨am *)
pPl
->
dmaOutU
->
∑øms
;

135 
DmaP¨am
 *
dmaOutVCfg
 = (DmaP¨am *)
pPl
->
dmaOutV
->
∑øms
;

140 
sigmaDnsMa2x5x0Cfg
->
thªsh
[0]=(
ISPC_SIGMA_THRESH1_P0
 << 0 | 
ISPC_SIGMA_THRESH2_P0
 << 8 | 
ISPC_SIGMA_THRESH1_P1
 << 16 | 
ISPC_SIGMA_THRESH2_P1
 << 24);

141 
sigmaDnsMa2x5x0Cfg
->
thªsh
[1]=(
ISPC_SIGMA_THRESH1_P2
 << 0 | 
ISPC_SIGMA_THRESH2_P2
 << 8 | 
ISPC_SIGMA_THRESH1_P3
 << 16 | 
ISPC_SIGMA_THRESH2_P3
 << 24);

142 
sigmaDnsMa2x5x0Cfg
->
cfg

	`SIGMA_DNS_CFG
(
ISPC_SIGMA_NOISE_FLOOR
, (
ISPC_BAYER_BITS
 - 1), 
SIGMA_DNS_PASSTHRU_BIT
,
FORMAT
);

143 
sigmaDnsMa2x5x0Cfg
->
bayîP©ã∫
=
BAYER_PATTERN
;

144 
sigmaDnsMa2x5x0Cfg
->
blcGR
=64;

145 
sigmaDnsMa2x5x0Cfg
->
blcR
=64;

146 
sigmaDnsMa2x5x0Cfg
->
blcB
=64;

147 
sigmaDnsMa2x5x0Cfg
->
blcGB
=64;

148 
lscMa2x5x0Cfg
->
gmBa£

i•cLscMesh
;

149 
lscMa2x5x0Cfg
->
gmWidth

ISPC_LSC_GAIN_MAP_W
;

150 
lscMa2x5x0Cfg
->
gmHeight

ISPC_LSC_GAIN_MAP_H
;

151 
lscMa2x5x0Cfg
->
d©aF‹m©
=
	`SIPP_LSC_CFG_FORMAT
(
BAYER
);

152 
lscMa2x5x0Cfg
->
d©aWidth
=
ISPC_BAYER_BITS
;

153 
øwMa2x5x0Cfg
->
grgbPœt

	`RAW_GRGB_PLATO
(
ISPC_GRGB_IMBAL_PLAT_DARK
,
ISPC_GRGB_IMBAL_PLAT_BRIGHT
);

154 
øwMa2x5x0Cfg
->
grgbDeˇy
=
	`RAW_GRGB_DECAY
(
ISPC_GRGB_IMBAL_DECAY_BRIGHT
, 
ISPC_GRGB_IMBAL_DECAY_DARK
);

155 
øwMa2x5x0Cfg
->
badPixCfg
=
	`RAW_BAD_PIX_CFG
(
ISPC_BAD_PIX_NOISE_LEVEL
, 
ISPC_BAD_PIX_ALPHA_G_HOT
, 
ISPC_BAD_PIX_ALPHA_G_COLD
, 
ISPC_BAD_PIX_ALPHA_RB_HOT
, 
ISPC_BAD_PIX_ALPHA_RB_COLD
);

156 
øwMa2x5x0Cfg
->
cfg

	`RAW_CFG
(
BAYER
,
BAYER_PATTERN
,
GRGB_IMBAL_EN
,0,
AE_PATCH_STATS_EN
,
AE_RGB_HIST_STATS_EN
,(
ISPC_BAYER_BITS
 - 1),
ISPC_GRGB_IMBAL_THRESHOLD
,0,
AF_PATCH_STATS_EN
,
BAYER_2x2_MODE
,
AE_Y_HIST_STATS_EN
,
HOT_COLD_PIX_SUPPRESS_EN
);

157 if(
£ns‹
==1){

158 
øwMa2x5x0Cfg
->
gaöS©
[0]=((
ISPC_RAW_CLAMP_0
<<16Ë| 
ISPC_RAW_GAIN_GR_IMX214
 );

159 
øwMa2x5x0Cfg
->
gaöS©
[1]((
ISPC_RAW_CLAMP_1
<<16Ë| 
ISPC_RAW_GAIN_R_IMX214
 );

160 
øwMa2x5x0Cfg
->
gaöS©
[2]((
ISPC_RAW_CLAMP_2
<<16Ë| 
ISPC_RAW_GAIN_B_IMX214
 );

161 
øwMa2x5x0Cfg
->
gaöS©
[3]((
ISPC_RAW_CLAMP_3
<<16Ë| 
ISPC_RAW_GAIN_GB_IMX214
 );

163 if(
£ns‹
==2)

165 
øwMa2x5x0Cfg
->
gaöS©
[0]=((
ISPC_RAW_CLAMP_0
<<16Ë| 
ISPC_RAW_GAIN_GR_IMX378
 );

166 
øwMa2x5x0Cfg
->
gaöS©
[1]((
ISPC_RAW_CLAMP_1
<<16Ë| 
ISPC_RAW_GAIN_R_IMX378
 );

167 
øwMa2x5x0Cfg
->
gaöS©
[2]((
ISPC_RAW_CLAMP_2
<<16Ë| 
ISPC_RAW_GAIN_B_IMX378
 );

168 
øwMa2x5x0Cfg
->
gaöS©
[3]((
ISPC_RAW_CLAMP_3
<<16Ë| 
ISPC_RAW_GAIN_GB_IMX378
 );

170 
øwMa2x5x0Cfg
->
°©sBa£
=0;

171 
øwMa2x5x0Cfg
->
°©sPœ√s
=0;

172 
øwMa2x5x0Cfg
->
°©sP©chCfg
=0;

173 
øwMa2x5x0Cfg
->
°©sP©chSèπ
=0;

174 
øwMa2x5x0Cfg
->
°©sP©chSkù
=0;

175 
øwMa2x5x0Cfg
->
°©sThªsh
=0;

176 
øwMa2x5x0Cfg
->
afF1c€fs
[0]=0;

177 
øwMa2x5x0Cfg
->
afF1c€fs
[1]=0;

178 
øwMa2x5x0Cfg
->
afF1c€fs
[2]=0;

179 
øwMa2x5x0Cfg
->
afF1c€fs
[3]=0;

180 
øwMa2x5x0Cfg
->
afF1c€fs
[4]=0;

181 
øwMa2x5x0Cfg
->
afF1c€fs
[5]=0;

182 
øwMa2x5x0Cfg
->
afF1c€fs
[6]=0;

183 
øwMa2x5x0Cfg
->
afF1c€fs
[7]=0;

184 
øwMa2x5x0Cfg
->
afF1c€fs
[8]=0;

185 
øwMa2x5x0Cfg
->
afF1c€fs
[9]=0;

186 
øwMa2x5x0Cfg
->
afF1c€fs
[10]=0;

187 
øwMa2x5x0Cfg
->
afF2c€fs
[0]=0;

188 
øwMa2x5x0Cfg
->
afF2c€fs
[1]=0;

189 
øwMa2x5x0Cfg
->
afF2c€fs
[2]=0;

190 
øwMa2x5x0Cfg
->
afF2c€fs
[3]=0;

191 
øwMa2x5x0Cfg
->
afF2c€fs
[4]=0;

192 
øwMa2x5x0Cfg
->
afF2c€fs
[5]=0;

193 
øwMa2x5x0Cfg
->
afF2c€fs
[6]=0;

194 
øwMa2x5x0Cfg
->
afF2c€fs
[7]=0;

195 
øwMa2x5x0Cfg
->
afF2c€fs
[8]=0;

196 
øwMa2x5x0Cfg
->
afF2c€fs
[9]=0;

197 
øwMa2x5x0Cfg
->
afF2c€fs
[10]=0;

198 
øwMa2x5x0Cfg
->
afMöThªsh
=0;

199 
øwMa2x5x0Cfg
->
afSubåa˘
=0;

200 
øwMa2x5x0Cfg
->
afP©chCfg
=0;

201 
øwMa2x5x0Cfg
->
afP©chSèπ
=0;

202 
øwMa2x5x0Cfg
->
afSètsBa£
=0;

203 
øwMa2x5x0Cfg
->
hi°LumaBa£
=0;

204 
øwMa2x5x0Cfg
->
hi°RgbBa£
=0;

205 
debayîMa2x5x0Cfg
->
cfg

	`DEBAYER_CFG
(
BAYER_PATTERN
,0,0,
ISPC_BAYER_BITS
,
ISPC_DEBAYER_BITS
,
IMAGE_ORDER_OUT
, 
OUTPUT_PLANE_NO
,0);

206 
debayîMa2x5x0Cfg
->
thªsh
=
	`DEBAYER_THRESH
(0,0,1,1,1,0) ;

207 
debayîMa2x5x0Cfg
->
dew‹mCfg
=
	`DEBAYER_DEWORM
(
ISPC_DEMOSAIC_MIX_OFFSET
,
ISPC_DEMOSAIC_MIX_SLOPE
);

208 
debayîMa2x5x0Cfg
->
lumaWeight
=
	`DEBAYER_LUMA_COEFS_CFG
(
ISPC_DEMOSAIC_LUMA_WEIGHT_RED
 , 
ISPC_DEMOSAIC_LUMA_WEIGHT_GREEN
, 
ISPC_DEMOSAIC_LUMA_WEIGHT_BLUE
);

209 
dogLtmMa2x5x0Cfg
->
cfg

	`DOGL_CFG_SET
(
DOG_LTM_MODE
,
ISPC_DOG_THR
,
DOG_OUTPUT_CLAMP
,
DS_MODE
,
ISPC_LTM_FILTER_TH1
,0,
DOG_HEIGHT
);;

210 
dogLtmMa2x5x0Cfg
->
dogC€ffs11
=dogCoeffs11;

211 
dogLtmMa2x5x0Cfg
->
dogC€ffs15
=dogCoeffs15;

212 
dogLtmMa2x5x0Cfg
->
dogSåígth
=
ISPC_DOG_STRENGTH
;

213 
dogLtmMa2x5x0Cfg
->
…mCurves
=(
u16
 *)
…m_curves
;

214 
ydnsMa2x5x0Cfg
->
cfg

	`LUMA_DNS_CFG
(0x1, 
ISPC_LUMA_DNS_REF_SHIFT
, 
ISPC_LUMA_DNS_ALPHA
, 
ISPC_LUMA_DNS_BITPOS
);

215 
ydnsMa2x5x0Cfg
->
gaussLut
[0]=gaussLut[0];

216 
ydnsMa2x5x0Cfg
->
gaussLut
[1]=gaussLut[1];

217 
ydnsMa2x5x0Cfg
->
gaussLut
[2]=gaussLut[2];

218 
ydnsMa2x5x0Cfg
->
gaussLut
[3]=gaussLut[3];

219 
ydnsMa2x5x0Cfg
->
f2

ISPC_LUMA_DNS_F2
;

220 
ydnsMa2x5x0Cfg
->
gammaLut
[0]=gammaLut[0];

221 
ydnsMa2x5x0Cfg
->
gammaLut
[1]=gammaLut[1];

222 
ydnsMa2x5x0Cfg
->
gammaLut
[2]=gammaLut[2];

223 
ydnsMa2x5x0Cfg
->
gammaLut
[3]=gammaLut[3];

224 
ydnsMa2x5x0Cfg
->
gammaLut
[4]=gammaLut[4];

225 
ydnsMa2x5x0Cfg
->
di°Cfg
(
u32
)
i•cYDnsDi°Lut
;

226 
ydnsMa2x5x0Cfg
->
di°Off£ts
=
X_OFFSET
 | (
Y_OFFSET
 << 16);

227 i‡(
£ns‹
==1)

229 
ydnsMa2x5x0Cfg
->
fuŒFrmDim
=(
FULL_IMAGE_HEIGHT_IMX214
 << 16 ) | FULL_IMAGE_HEIGHT_IMX214;

231 if(
£ns‹
==2)

233 
ydnsMa2x5x0Cfg
->
fuŒFrmDim
=(
FULL_IMAGE_HEIGHT_IMX378
 << 16 ) | FULL_IMAGE_HEIGHT_IMX378;

235 
sh¨≥nMa2x5x0Cfg
->
cfg

	`SHARPEN_CFG
–
THR
, 
SHARPEN_KERNEL_SIZE
,
OUTPUT_CLAMP
 ,
SHARPEN_MODE
,
OUTPUT_DELTAS
);

236 
sh¨≥nMa2x5x0Cfg
->
°ªngth
=
	`SHARPEN_STRENGTH_CFG
(
SHARPEN_STRENGTH_LIGHTEN
, 
SHARPEN_STRENGTH_DARKEN
 );

237 
sh¨≥nMa2x5x0Cfg
->
˛ù

SHARPEN_CLIPPING_ALPHA
;

238 
sh¨≥nMa2x5x0Cfg
->
limô

	`SHARPEN_LIMITS_CFG
(0x0,0x4000);

239 
sh¨≥nMa2x5x0Cfg
->
rgnSt›01
=
	`SHARPEN_RANGESTOP01_CFG
(
SHARPEN_RANGE_STOP0
, 
SHARPEN_RANGE_STOP1
);

240 
sh¨≥nMa2x5x0Cfg
->
rgnSt›23

	`SHARPEN_RANGESTOP01_CFG
(
SHARPEN_RANGE_STOP2
, 
SHARPEN_RANGE_STOP3
);

241 
sh¨≥nMa2x5x0Cfg
->
c€f01
=
	`SHARPEN_COEFS01_CFG
(0x0,0x0);

242 
sh¨≥nMa2x5x0Cfg
->
c€f23
=
	`SHARPEN_COEFS23_CFG
(0x0,0x0);

243 
chromaGíMa2x5x0Cfg
->
cfg
=
	`CGEN_CFG_SET
(
ISPC_CGEN_PFR_STRENGTH
,
ISPC_CGEN_DESAT_OFFSET
,
ISPC_CGEN_DESAT_SLOPE
,
ISPC_DEBAYER_BITS
,
BYPASS_PF_DAD
,
DS_MODE
);

244 
chromaGíMa2x5x0Cfg
->
yC€fs
=
	`CGEN_LUMA_COEFF_SET
(
ISPC_CGEN_LUMA_COEFF_R
,
ISPC_CGEN_LUMA_COEFF_G
,
ISPC_CGEN_LUMA_COEFF_B
) ;

245 
chromaGíMa2x5x0Cfg
->
chrC€fs
=
	`CGEN_CHROMA_COEFF_SET
(
ISPC_CGEN_EPSILON
,
ISPC_CGEN_KR
,
ISPC_CGEN_KG
,
ISPC_CGEN_KB
);

246 
medünMa2x5x0Cfg
->
cfg

	`MED_CFG
(
MEDIAN_KERNEL_SIZE
,
MEDIAN_OUT_SEL
,
MEDIAN_THRESHOLD
,
MEDIAN_LUMA_ABLEND_EN
,
MEDIAN_LUMA_SAMPLE_EN
,0);

247 
medünMa2x5x0Cfg
->
lumaAÕha
=
	`MED_LUMA_ALPHA
(
ISPC_CHROMA_MEDIAN_MIX_SLOPE
,
ISPC_CHROMA_MEDIAN_MIX_OFFSET
);

248 
chromadnsMa2x5x0Cfg
->
cfg
=
	`CHROMA_DNS_CFG
(
ISPC_CHROMA_DNS_H_ENAB
,
ISPC_CHROMA_DNS_LIMIT
,
FORCE_WT_H
,
FORCE_WT_V
,(
PLANES_PER_CYCLE
-1),
ISPC_GREY_DESAT_OFFSET
,
ISPC_GREY_DESAT_SLOPE
);

249 
chromadnsMa2x5x0Cfg
->
thr
[0]=
CHROMA_DNS_THRESH0
;

250 
chromadnsMa2x5x0Cfg
->
thr
[1]=
CHROMA_DNS_THRESH1
;

251 
chromadnsMa2x5x0Cfg
->
gªyPt
=
	`CHORMA_GREY_PT_SET
(
ISPC_GREY_POINT_B
,
ISPC_GREY_POINT_G
,
ISPC_GREY_POINT_R
,
GREY_PT_EN
);

252 
chromadnsMa2x5x0Cfg
->
chrC€fs
=
	`CHROMA_DNS_COEFFS_SET
(
i•cLow∑ssKî√l
[4],ispcLowpassKernel[1],ispcLowpassKernel[0]);

253 
cﬁ‹combMa2x5x0Cfg
->
cfg
=
	`CC_CFG
(
FORCE_LUMA_ONE
,0,
LUT_3D_BYPASS
,
LUT_3D_LOAD
,
U12F_OUTPUT
,
CC_OUTPUT_PLANE
);

254 
cﬁ‹combMa2x5x0Cfg
->
krgb
[0]=
ISPC_CC_KR
 | (
ISPC_CC_KG
 << 16);

255 
cﬁ‹combMa2x5x0Cfg
->
krgb
[1]=(
ISPC_CC_KB
 | (
ISPC_CGEN_EPSILON
 << 16));

256 
cﬁ‹combMa2x5x0Cfg
->
ccm
[0]=(
ccm_lut_c€ffs
[0] | (ccm_lut_coeffs[3] << 16));

257 
cﬁ‹combMa2x5x0Cfg
->
ccm
[1]=(
ccm_lut_c€ffs
[6] | (ccm_lut_coeffs[1] << 16));

258 
cﬁ‹combMa2x5x0Cfg
->
ccm
[2]=(
ccm_lut_c€ffs
[4] | (ccm_lut_coeffs[7] << 16));

259 
cﬁ‹combMa2x5x0Cfg
->
ccm
[3]=(
ccm_lut_c€ffs
[2] | (ccm_lut_coeffs[5] << 16));

260 
cﬁ‹combMa2x5x0Cfg
->
ccm
[4]=(
ccm_lut_c€ffs
[8] | (
ccm_lut_off£ts
[0] << 16));

261 
cﬁ‹combMa2x5x0Cfg
->
ccOffs
=(
ccm_lut_off£ts
[1] | (ccm_lut_offsets[2] << 16));

262 
cﬁ‹combMa2x5x0Cfg
->
thªeDLut
=0x0;

263 
cﬁ‹combMa2x5x0Cfg
->
lutF‹m©
=0x0;

264 
lutMa2x5x0Cfg
->
cfg

INTERP_MODE
 | 
CHANNEL_MODE
<< 1 | (
CHANNELS_NO
 - 1Ë<< 12 | 
LUT_LOAD
 << 14 | 
CSC_ENABLE
<< 16;

265 
lutMa2x5x0Cfg
->
sizeA

LUT_REGION0_SIZE_I
 | (
LUT_REGION1_SIZE_I
 << 4Ë| (
LUT_REGION2_SIZE_I
 << 8Ë| (
LUT_REGION3_SIZE_I
 << 12Ë| (
LUT_REGION4_SIZE_I
 << 16Ë| (
LUT_REGION5_SIZE_I
 << 20Ë| (
LUT_REGION6_SIZE_I
 << 24Ë| (
LUT_REGION7_SIZE_I
 << 28);

266 
lutMa2x5x0Cfg
->
sizeB

LUT_REGION8_SIZE_I
 | (
LUT_REGION9_SIZE_I
 << 4Ë| (
LUT_REGION10_SIZE_I
 << 8Ë| (
LUT_REGION11_SIZE_I
 << 12Ë| (
LUT_REGION12_SIZE_I
 << 16Ë| (
LUT_REGION13_SIZE_I
 << 20Ë| (
LUT_REGION14_SIZE_I
 << 24Ë| (
LUT_REGION15_SIZE_I
 << 28);

267 
lutMa2x5x0Cfg
->
lut
(*)
gammaLutFp16
;

268 
lutMa2x5x0Cfg
->
lutF‹m©
=
LUT_LD_FORMAT
;

269 
lutMa2x5x0Cfg
->
m©
[0]
LUT_MAT_11
;

270 
lutMa2x5x0Cfg
->
m©
[1]
LUT_MAT_12
;

271 
lutMa2x5x0Cfg
->
m©
[2]
LUT_MAT_13
;

272 
lutMa2x5x0Cfg
->
m©
[3]
LUT_MAT_21
;

273 
lutMa2x5x0Cfg
->
m©
[4]
LUT_MAT_22
;

274 
lutMa2x5x0Cfg
->
m©
[5]
LUT_MAT_23
;

275 
lutMa2x5x0Cfg
->
m©
[6]
LUT_MAT_31
;

276 
lutMa2x5x0Cfg
->
m©
[7]
LUT_MAT_32
;

277 
lutMa2x5x0Cfg
->
m©
[8]
LUT_MAT_33
;

278 
lutMa2x5x0Cfg
->
off£t
[0]=
LUT_OFF_1
;

279 
lutMa2x5x0Cfg
->
off£t
[1]=
LUT_OFF_2
;

280 
lutMa2x5x0Cfg
->
off£t
[2]=
LUT_OFF_3
;

281 
pﬁypha£fúMa2x5xYCfg
->
˛amp
=0;

282 
pﬁypha£fúMa2x5xYCfg
->
h‹zC€fs
=(
UI¡8
*)
hC€fs
;

283 
pﬁypha£fúMa2x5xYCfg
->
vîtC€fs
=(
UI¡8
*)
vC€fs
;

284 
pﬁypha£fúMa2x5xYCfg
->
∂™eMode
=
POLY_PLANE_Y
;

285 
pﬁypha£fúMa2x5xUCfg
->
˛amp
=0;

286 
pﬁypha£fúMa2x5xUCfg
->
h‹zC€fs
=(
UI¡8
*)
hC€fs
;

287 
pﬁypha£fúMa2x5xUCfg
->
vîtC€fs
=(
UI¡8
*)
vC€fs
;

288 
pﬁypha£fúMa2x5xUCfg
->
∂™eMode
=
POLY_PLANE_U
;

289 
pﬁypha£fúMa2x5xVCfg
->
˛amp
=0;

290 if(
£ns‹
==1)

292 
pﬁypha£fúMa2x5xYCfg
->
h‹zD
=
POLYFIR_Y_H_DEN_IMX214
;

293 
pﬁypha£fúMa2x5xYCfg
->
h‹zN
=
POLYFIR_Y_H_NUM_IMX214
;

294 
pﬁypha£fúMa2x5xYCfg
->
vîtD
=
POLYFIR_Y_V_DEN_IMX214
;

295 
pﬁypha£fúMa2x5xYCfg
->
vîtN
=
POLYFIR_Y_V_NUM_IMX214
;

296 
pﬁypha£fúMa2x5xUCfg
->
h‹zD
=
POLYFIR_U_H_DEN_IMX214
;

297 
pﬁypha£fúMa2x5xUCfg
->
h‹zN
=
POLYFIR_U_H_NUM_IMX214
;

298 
pﬁypha£fúMa2x5xUCfg
->
vîtD
=
POLYFIR_U_V_DEN_IMX214
;

299 
pﬁypha£fúMa2x5xUCfg
->
vîtN
=
POLYFIR_U_V_NUM_IMX214
;

300 
pﬁypha£fúMa2x5xVCfg
->
h‹zD
=
POLYFIR_V_H_DEN_IMX214
;

301 
pﬁypha£fúMa2x5xVCfg
->
h‹zN
=
POLYFIR_V_H_NUM_IMX214
;

302 
pﬁypha£fúMa2x5xVCfg
->
vîtD
=
POLYFIR_V_V_DEN_IMX214
;

303 
pﬁypha£fúMa2x5xVCfg
->
vîtN
=
POLYFIR_V_V_NUM_IMX214
;

305 if(
£ns‹
==2)

307 
pﬁypha£fúMa2x5xYCfg
->
h‹zD
=
POLYFIR_Y_H_DEN_IMX378
;

308 
pﬁypha£fúMa2x5xYCfg
->
h‹zN
=
POLYFIR_Y_H_NUM_IMX378
;

309 
pﬁypha£fúMa2x5xYCfg
->
vîtD
=
POLYFIR_Y_V_DEN_IMX378
;

310 
pﬁypha£fúMa2x5xYCfg
->
vîtN
=
POLYFIR_Y_V_NUM_IMX378
;

311 
pﬁypha£fúMa2x5xUCfg
->
h‹zD
=
POLYFIR_U_H_DEN_IMX378
;

312 
pﬁypha£fúMa2x5xUCfg
->
h‹zN
=
POLYFIR_U_H_NUM_IMX378
;

313 
pﬁypha£fúMa2x5xUCfg
->
vîtD
=
POLYFIR_U_V_DEN_IMX378
;

314 
pﬁypha£fúMa2x5xUCfg
->
vîtN
=
POLYFIR_U_V_NUM_IMX378
;

315 
pﬁypha£fúMa2x5xVCfg
->
h‹zD
=
POLYFIR_V_H_DEN_IMX378
;

316 
pﬁypha£fúMa2x5xVCfg
->
h‹zN
=
POLYFIR_V_H_NUM_IMX378
;

317 
pﬁypha£fúMa2x5xVCfg
->
vîtD
=
POLYFIR_V_V_DEN_IMX378
;

318 
pﬁypha£fúMa2x5xVCfg
->
vîtN
=
POLYFIR_V_V_NUM_IMX378
;

320 
pﬁypha£fúMa2x5xVCfg
->
h‹zC€fs
=(
UI¡8
*)
hC€fs
;

321 
pﬁypha£fúMa2x5xVCfg
->
vîtC€fs
=(
UI¡8
*)
vC€fs
;

322 
pﬁypha£fúMa2x5xVCfg
->
∂™eMode
=
POLY_PLANE_V
;

323 
dmaIn0Cfg
->
ddrAddr
 = (
UI¡32
)
NULL
;

324 
dmaOutYCfg
->
ddrAddr
 = (
UI¡32
)
NULL
;

325 
dmaOutUCfg
->
ddrAddr
 = (
UI¡32
)
NULL
;

326 
dmaOutVCfg
->
ddrAddr
 = (
UI¡32
)
NULL
;

329 
	}
}

	@Demo/CamSIPPDebayerHdmi/leon_rt/Cam214SIPPDebayerHdmi.h

13 #i‚de‡
__CAM214SIPPDEBAYERHDMI_H__


14 
	#__CAM214SIPPDEBAYERHDMI_H__


	)

16 
	~<sùp.h
>

17 
	~<sùpTe°Comm⁄.h
>

19 
	~"ISPPùeSëtögs.h
"

26 
	sCam214SIPPDebayîHdmi


29 
SùpPùñöe
 *
	m∂
;

32 
SùpFûãr
 *
	mdmaIn0
;

33 
SùpFûãr
 *
	msigmaDnsMa2x5x0
;

34 
SùpFûãr
 *
	mlscMa2x5x0
;

35 
SùpFûãr
 *
	møwMa2x5x0
;

36 
SùpFûãr
 *
	mdebayîMa2x5x0
;

37 
SùpFûãr
 *
	mdogLtmMa2x5x0
;

38 
SùpFûãr
 *
	mydnsMa2x5x0
;

39 
SùpFûãr
 *
	msh¨≥nMa2x5x0
;

40 
SùpFûãr
 *
	mchromaGíMa2x5x0
;

41 
SùpFûãr
 *
	mmedünMa2x5x0
;

42 
SùpFûãr
 *
	mchromadnsMa2x5x0
;

43 
SùpFûãr
 *
	mcﬁ‹combMa2x5x0
;

44 
SùpFûãr
 *
	mlutMa2x5x0
;

45 
SùpFûãr
 *
	mpﬁypha£fúMa2x5xY
;

46 
SùpFûãr
 *
	mpﬁypha£fúMa2x5xU
;

47 
SùpFûãr
 *
	mpﬁypha£fúMa2x5xV
;

48 
SùpFûãr
 *
	mdmaOutY
;

49 
SùpFûãr
 *
	mdmaOutU
;

50 
SùpFûãr
 *
	mdmaOutV
;

52 } 
	tCam214SIPPDebayîHdmi
;

54 
ªadCam214SIPPDebayîHdmiI≈ut
(
Cam214SIPPDebayîHdmi
 *
pPl
);

55 
wrôeCam214SIPPDebayîHdmiOuçut
(
Cam214SIPPDebayîHdmi
 *
pPl
);

57 
buûdCam214SIPPDebayîHdmi
(
Cam214SIPPDebayîHdmi
 *
pPl
);

58 
c⁄figCam214SIPPDebayîHdmi
(
Cam214SIPPDebayîHdmi
 *
pPl
);

	@Demo/CamSIPPDebayerHdmi/leon_rt/ISPParamsPP.c

11 
	~<°döt.h
>

12 
	~"Cam214SIPPDebayîHdmi.h
"

19 
uöt16_t
 
	gi•cLscMesh
[
ISPC_LSC_GAIN_MAP_W
 * 
ISPC_LSC_GAIN_MAP_H
] 
ALIGNED
(8) =

	@Demo/CamSIPPDebayerHdmi/leon_rt/ISPParamsStill.c

11 
	~<°döt.h
>

12 
	~"Cam214SIPPDebayîHdmi.h
"

18 
uöt8_t
 
	gi•cLow∑ssKî√l
[9] = {

24 
uöt8_t
 
	gi•cLumaDnsLut
[32] = {

29 
uöt8_t
 
	gi•cYDnsDi°Lut
[256] 
__©åibuã__
((
Æig√d
(8))) = {

64 
uöt8_t
 
	gi•cGammaLut0_32
[9] = {

68 
uöt8_t
 
	gi•cGammaLut32_255
[9] = {

73 
	gi•cLtmCurves
[16*8] = {

93 
uöt8_t
 
	gdogC€ffs11
[6] = {

96 
uöt8_t
 
	gdogC€ffs15
[8] = {

101 
	gi•cCCM
[9] = {

107 
	gi•cCCMOff
[3] = {

111 
uöt16_t
 
	glut3d
[16*16*16*4] = {

371 
	gi•cGammaTabÀ
[8192] = {

1398 
uöt16_t
 
	ggammaLutFp16
[512*4] 
ALIGNED
(8) = {

1914 
	gi•cCSC
[9] = {

1920 
	gi•cCSCOff
[3] = {

1924 
u16
 
	g…m_curves
[16*8];

1925 
u32
 
	ggaussLut
[4];

1926 
u32
 
	ggammaLut
[5];

1928 
u16
 
	gcsc_lut_c€ffs
[9];

1929 
u16
 
	gcsc_lut_off£ts
[3];

1931 
u16
 
	gccm_lut_c€ffs
[9];

1932 
u16
 
	gccm_lut_off£ts
[3];

1935 
uöt8_t
 
	ghC€fs
[] 
__©åibuã__
((
Æig√d
(8))) = {

1948 
uöt8_t
 
	gvC€fs
[] 
__©åibuã__
((
Æig√d
(8))) = {

1971 
	$dog…mC⁄vîtCurves
()

1973 
curve
, 
poöt
, 
ªgoff
;

1974 
ªgoff
 = 0;

1975 
curve
 = 0; curve < 8; curve++) {

1976 
poöt
 = 0;Öoint < 16;Öoint += 2) {

1977 
off
 = 
curve
 + 
poöt
 * 8;

1978 
…m_curves
[
off
 ] = 
i•cLtmCurves
[off] * 0xfff;

1979 
…m_curves
[
off
+8] = 
i•cLtmCurves
[off+8] * 0xfff;

1980 
ªgoff
 += 4;

1983 
	}
}

1985 
	$dog…mCª©eLuts
 ()

1987 
u32
 
idx
;

1989 
idx
 = 0; idx < 4; idx++)

1991 
gaussLut
[
idx
] = 
i•cLumaDnsLut
[(idx<< 3) + 0] |

1992 (
i•cLumaDnsLut
[(
idx
<< 3) + 1] << 4 ) |

1993 (
i•cLumaDnsLut
[(
idx
<< 3) + 2] << 8 ) |

1994 (
i•cLumaDnsLut
[(
idx
<< 3) + 3] << 12) |

1995 (
i•cLumaDnsLut
[(
idx
<< 3) + 4] << 16) |

1996 (
i•cLumaDnsLut
[(
idx
<< 3) + 5] << 20) |

1997 (
i•cLumaDnsLut
[(
idx
<< 3) + 6] << 24) |

1998 (
i•cLumaDnsLut
[(
idx
<< 3) + 7] << 28);

2001 
gammaLut
[0] = 
i•cGammaLut0_32
[0] | ispcGammaLut0_32[1] << 8 |

2002 
i•cGammaLut0_32
[2] << 16 | ispcGammaLut0_32[3] << 24;

2003 
gammaLut
[1] = 
i•cGammaLut0_32
[4] | ispcGammaLut0_32[5] << 8 |

2004 
i•cGammaLut0_32
[6] << 16 | ispcGammaLut0_32[7] << 24;

2005 
gammaLut
[2] = 
i•cGammaLut0_32
[8] | 
i•cGammaLut32_255
[0] << 8 |

2006 
i•cGammaLut32_255
[1] << 16 | ispcGammaLut32_255[2] << 24;

2007 
gammaLut
[3] = 
i•cGammaLut32_255
[3] | ispcGammaLut32_255[4] << 8 |

2008 
i•cGammaLut32_255
[5] << 16 | ispcGammaLut32_255[6] << 24;

2009 
gammaLut
[4] = 
i•cGammaLut32_255
[7] | ispcGammaLut32_255[8] << 8;

2010 
	}
}

2012 
	#CCVT
(
f
Ë(()((fË* 1024 + .5Ë& 0xfff)

	)

2013 
	#OCVT
(
f
Ë(()((fË* 4096 + .5Ë& 0x1ffff)

	)

2015 
	$lutCª©eLuts
 ()

2017 
u32
 
idx
;

2019 
idx
 = 0; idx < 9; idx++)

2021 
csc_lut_c€ffs
[
idx
] = 
	`CCVT
(
i•cCSC
[idx]);

2023 
idx
 = 0; idx < 3; idx++)

2025 
csc_lut_off£ts
[
idx
] = 
	`OCVT
(
i•cCSCOff
[idx]);

2027 
	}
}

2030 
	#CCMC
(
f
) (()((f * 0x400) + .5) & 0xffff)

2031 
	#CCMO
(
f
) (()((f * 0x1000) + .5) & 0x1fff)

2032 

	)

2033 
	$ccombCª©eC€ffs
 ()

2035 
u32
 
idx
;

2037 
idx
 = 0; idx < 9; idx++)

2039 
ccm_lut_c€ffs
[
idx
] = 
	`CCMC
(
i•cCCM
[idx]);

2041 
idx
 = 0; idx < 3; idx++)

2043 
ccm_lut_off£ts
[
idx
] = 
	`CCMO
(
i•cCCMOff
[idx]);

2045 
	}
}

2047 
	$ISPPùeCª©eP¨ams
 ()

2049 
	`ccombCª©eC€ffs
();

2050 
	`lutCª©eLuts
 ();

2051 
	`dog…mC⁄vîtCurves
 ();

2052 
	`dog…mCª©eLuts
 ();

2053 
	}
}

	@Demo/CamSIPPDebayerHdmi/leon_rt/ISPPipeSettings.h

4 #i‚de‡
_ISP_PIPE_SETTINGS_H_


5 
	#_ISP_PIPE_SETTINGS_H_


	)

12 
	#ISPC_BAYER_BITS
 10

	)

13 
	#BAYER_PATTERN
 
RGGB


	)

14 
	#FORMAT
 
BAYER


	)

15 
	#SIPP_ISP_PIPE_BUFFER_INPUT_NUM_PLANES
 1

	)

17 
	#SIPP_ISP_PIPE_BUFFER_WIDTH_IMX378
 4032

	)

18 
	#SIPP_ISP_PIPE_BUFFER_HEIGHT_IMX378
 2376

	)

19 
	#FULL_IMAGE_WIDTH_IMX378
 
SIPP_ISP_PIPE_BUFFER_WIDTH_IMX378


	)

20 
	#FULL_IMAGE_HEIGHT_IMX378
 
SIPP_ISP_PIPE_BUFFER_HEIGHT_IMX378


	)

21 
	#ISPC_CHROMA_PIPE_WIDTH_IMX378
 (
SIPP_ISP_PIPE_BUFFER_WIDTH_IMX378
 >> 0x1)

	)

22 
	#ISPC_CHROMA_PIPE_HEIGHT_IMX378
 (
SIPP_ISP_PIPE_BUFFER_HEIGHT_IMX378
 >> 0x1)

	)

24 
	#SIPP_ISP_PIPE_BUFFER_WIDTH_IMX214
 1920

	)

25 
	#SIPP_ISP_PIPE_BUFFER_HEIGHT_IMX214
 1080

	)

26 
	#FULL_IMAGE_WIDTH_IMX214
 
SIPP_ISP_PIPE_BUFFER_WIDTH_IMX214


	)

27 
	#FULL_IMAGE_HEIGHT_IMX214
 
SIPP_ISP_PIPE_BUFFER_HEIGHT_IMX214


	)

28 
	#ISPC_CHROMA_PIPE_WIDTH_IMX214
 (
FULL_IMAGE_WIDTH_IMX214
 >> 0x1)

	)

29 
	#ISPC_CHROMA_PIPE_HEIGHT_IMX214
 (
FULL_IMAGE_HEIGHT_IMX214
 >> 0x1)

	)

36 
	#ISPC_SIGMA_NOISE_FLOOR
 51

	)

37 
	#ISPC_SIGMA_THRESH1_P0
 9

	)

38 
	#ISPC_SIGMA_THRESH2_P0
 18

	)

39 
	#ISPC_SIGMA_THRESH1_P1
 9

	)

40 
	#ISPC_SIGMA_THRESH2_P1
 18

	)

41 
	#ISPC_SIGMA_THRESH1_P2
 9

	)

42 
	#ISPC_SIGMA_THRESH2_P2
 18

	)

43 
	#ISPC_SIGMA_THRESH1_P3
 9

	)

44 
	#ISPC_SIGMA_THRESH2_P3
 18

	)

46 
	#SIGMA_DNS_PASSTHRU_BIT
 
DISABLED


	)

52 
	#ISPC_LSC_GAIN_MAP_W
 60

	)

53 
	#ISPC_LSC_GAIN_MAP_H
 44

	)

55 
uöt16_t
 
i•cLscMesh
[
ISPC_LSC_GAIN_MAP_W
 * 
ISPC_LSC_GAIN_MAP_H
];

61 
	#ISPC_BAD_PIX_ALPHA_G_HOT
 0x6

62 
	#ISPC_BAD_PIX_ALPHA_RB_HOT
 0x6

63 
	#ISPC_BAD_PIX_ALPHA_G_COLD
 0x6

64 
	#ISPC_BAD_PIX_ALPHA_RB_COLD
 0x6

65 
	#ISPC_BAD_PIX_NOISE_LEVEL
 0x0

66 

	)

68 
	#ISPC_GRGB_IMBAL_PLAT_DARK
 144

	)

69 
	#ISPC_GRGB_IMBAL_DECAY_DARK
 160

	)

70 
	#ISPC_GRGB_IMBAL_PLAT_BRIGHT
 200

	)

71 
	#ISPC_GRGB_IMBAL_DECAY_BRIGHT
 240

	)

72 
	#ISPC_GRGB_IMBAL_THRESHOLD
 1000

73 

	)

74 
	#ISPC_RAW_GAIN_R_IMX378
 1948

75 
	#ISPC_RAW_GAIN_GR_IMX378
 730

76 
	#ISPC_RAW_GAIN_GB_IMX378
 888

77 
	#ISPC_RAW_GAIN_B_IMX378
 1873

78 

	)

79 
	#ISPC_RAW_GAIN_R_IMX214
 0x0100

80 
	#ISPC_RAW_GAIN_GR_IMX214
 0x0070

81 
	#ISPC_RAW_GAIN_GB_IMX214
 0x0090

82 
	#ISPC_RAW_GAIN_B_IMX214
 0x0100

83 

	)

84 
	#ISPC_RAW_CLAMP_0
 1023

85 
	#ISPC_RAW_CLAMP_1
 1023

86 
	#ISPC_RAW_CLAMP_2
 1023

87 
	#ISPC_RAW_CLAMP_3
 1023

88 

	)

89 
	#ISPC_RAW_OUTPUT_BITS
 10

	)

92 
	#GRGB_IMBAL_EN
 
ENABLED


	)

93 
	#AE_PATCH_STATS_EN
 
DISABLED


	)

94 
	#AF_PATCH_STATS_EN
 
DISABLED


	)

95 
	#AE_Y_HIST_STATS_EN
 
DISABLED


	)

96 
	#AE_RGB_HIST_STATS_EN
 
DISABLED


	)

97 
	#HOT_COLD_PIX_SUPPRESS_EN
 
ENABLED


	)

98 
	#BAYER_2x2_MODE
 1

	)

103 
	#ISPC_DEBAYER_BITS
 10

	)

104 
	#RGB_EN
 1

	)

105 
	#FORCE_RB_ZERO
 0

	)

106 
	#IMAGE_ORDER_OUT
 
P_RGB


	)

107 
	#OUTPUT_PLANE_NO
 3

	)

109 
	#ISPC_DEMOSAIC_MIX_SLOPE
 0

	)

110 
	#ISPC_DEMOSAIC_MIX_OFFSET
 0

	)

111 
	#ISPC_DEMOSAIC_MIX_GRADIENT_MUL
 0

	)

112 
	#ISPC_DEMOSAIC_LUMA_WEIGHT_RED
 77

	)

113 
	#ISPC_DEMOSAIC_LUMA_WEIGHT_GREEN
 150

	)

114 
	#ISPC_DEMOSAIC_LUMA_WEIGHT_BLUE
 29

	)

119 
	#MODE_DOG_ONLY
 0x0

	)

120 
	#MODE_LTM_ONLY
 0x1

	)

121 
	#MODE_DOG_DENOISE
 0x2

	)

122 
	#MODE_DOG_LTM
 0x3

	)

123 
	#DOG_LTM_MODE
 
MODE_DOG_LTM


	)

125 
	#DOG_OUTPUT_CLAMP
 
DISABLED


	)

126 
	#DOG_HEIGHT
 15

	)

128 
i•cLtmCurves
[16*8];

131 
	#ISPC_LTM_FILTER_TH1
 35

	)

134 
	#ISPC_DOG_THR
 4

	)

135 
	#ISPC_DOG_STRENGTH
 191

	)

137 
uöt8_t
 
dogC€ffs11
[6];

138 
uöt8_t
 
dogC€ffs15
[8];

139 
u16
 
…m_curves
[16*8];

141 
	#DSMODE_CARRY
 0x0

	)

142 
	#DSMODE_DOWN
 0x1

	)

143 
	#DSMODE_UPDN
 0x2

	)

144 
	#DS_MODE
 
DSMODE_DOWN


	)

153 
	#ISPC_LUMA_DNS_F2
 0xØØa9a4

	)

154 
	#ISPC_LUMA_DNS_BITPOS
 7

	)

156 
uöt8_t
 
i•cLumaDnsLut
[32];

158 
uöt8_t
 
i•cYDnsDi°Lut
[256];

160 
uöt8_t
 
i•cGammaLut0_32
[9];

161 
uöt8_t
 
i•cGammaLut32_255
[9];

163 
	#ISPC_LUMA_DNS_REF_SHIFT
 15

	)

164 
	#X_OFFSET
 0

	)

165 
	#Y_OFFSET
 0

	)

167 
u32
 
gaussLut
[4];

168 
u32
 
gammaLut
[5];

170 
	#ISPC_LUMA_DNS_STRENGTH
 150.000000

	)

171 
	#ISPC_LUMA_DNS_ALPHA
 128

172 

	)

176 
	#SHARPEN_KERNEL_SIZE
 7

	)

178 
	#SHARPEN_STRENGTH_DARKEN
 0x0000

179 
	#SHARPEN_STRENGTH_LIGHTEN
 0x0000

180 
	#SHARPEN_CLIPPING_ALPHA
 0x0000

181 
	#SHARPEN_RANGE_STOP0
 0x0000

	)

182 
	#SHARPEN_RANGE_STOP1
 0x0000

	)

183 
	#SHARPEN_RANGE_STOP2
 0x0000

	)

184 
	#SHARPEN_RANGE_STOP3
 0x0000

	)

185 
	#SHARPENING
 0

	)

186 
	#BLURRING
 1

	)

187 
	#SHARPEN_MODE
 
SHARPENING


	)

188 
	#OUTPUT_DELTAS
 0

	)

189 
	#THR
 0x0

	)

190 
	#OUTPUT_CLAMP
 1

	)

193 
	#ISPC_SHARP_SIGMA
 2.000000

	)

196 
	#ISPC_SHARP_ALPHA
 0.700000

	)

197 
	#ISPC_SHARP_OVERSHOOT
 1.050000

	)

198 
	#ISPC_SHARP_UNDERSHOOT
 1.000000

	)

199 
	#ISPC_SHARP_RANGE_STOP_0
 0.003922

	)

200 
	#ISPC_SHARP_RANGE_STOP_1
 0.019608

	)

201 
	#ISPC_SHARP_RANGE_STOP_2
 0.980392

	)

202 
	#ISPC_SHARP_RANGE_STOP_3
 1.000000

	)

203 
	#ISPC_SHARP_MIN_THR
 0.000000

	)

204 
	#ISPC_SHARP_COEF0
 0.070159

	)

205 
	#ISPC_SHARP_COEF1
 0.131075

	)

206 
	#ISPC_SHARP_COEF2
 0.190713

	)

207 
	#ISPC_SHARP_COEF3
 0.216106

	)

213 
	#ISPC_CGEN_EPSILON
 1

	)

214 
	#ISPC_CGEN_KR
 106

	)

215 
	#ISPC_CGEN_KG
 191

	)

216 
	#ISPC_CGEN_KB
 149

	)

217 
	#ISPC_CGEN_LUMA_COEFF_R
 76

	)

218 
	#ISPC_CGEN_LUMA_COEFF_G
 150

	)

219 
	#ISPC_CGEN_LUMA_COEFF_B
 29

	)

220 
	#ISPC_CGEN_PFR_STRENGTH
 80

	)

221 
	#ISPC_CGEN_DESAT_OFFSET
 4

	)

222 
	#ISPC_CGEN_DESAT_SLOPE
 43

	)

224 
	#BYPASS_PF_DAD
 
DISABLED


	)

225 
	#DSMODE_CARRY
 0x0

	)

226 
	#DSMODE_DOWN
 0x1

	)

227 
	#DSMODE_UPDN
 0x2

	)

228 
	#DS_MODE
 
DSMODE_DOWN


	)

233 
	#MEDIAN_KERNEL_SIZE
 0x7

234 
	#MEDIAN_THRESHOLD
 0x1FF

	)

235 
	#MEDIAN_OUT_SEL
 ((
MEDIAN_KERNEL_SIZE
 >> 1Ë* (MEDIAN_KERNEL_SIZEË+ (MEDIAN_KERNEL_SIZE >> 1))

	)

236 
	#MEDIAN_LUMA_ABLEND_EN
 
ENABLED


	)

237 
	#MEDIAN_LUMA_SAMPLE_EN
 
ENABLED


	)

239 
	#ISPC_CHROMA_MEDIAN_MIX_SLOPE
 10

	)

240 
	#ISPC_CHROMA_MEDIAN_MIX_OFFSET
 -26

	)

245 
	#ISPC_CHROMA_DNS_TH_R
 20

	)

246 
	#ISPC_CHROMA_DNS_TH_G
 15

	)

247 
	#ISPC_CHROMA_DNS_TH_B
 38

	)

248 
	#ISPC_CHROMA_DNS_LIMIT
 100

	)

249 
	#ISPC_CHROMA_DNS_H_ENAB
 7

	)

250 
	#PLANES_PER_CYCLE
 3

	)

251 
	#FORCE_WT_H
 0

	)

252 
	#FORCE_WT_V
 0

	)

255 
	#ISPC_GREY_DESAT_OFFSET
 -35

	)

256 
	#ISPC_GREY_DESAT_SLOPE
 7

	)

257 
	#ISPC_GREY_POINT_R
 106

	)

258 
	#ISPC_GREY_POINT_G
 137

	)

259 
	#ISPC_GREY_POINT_B
 75

	)

260 
	#GREY_PT_EN
 
DISABLED


	)

262 
uöt8_t
 
i•cLow∑ssKî√l
[9];

264 
	#ISPC_CHROMA_DNS_TH_R
 20

	)

265 
	#ISPC_CHROMA_DNS_TH_G
 15

	)

266 
	#ISPC_CHROMA_DNS_TH_B
 38

	)

268 
	#CHROMA_DNS_THRESH0
 (
ISPC_CHROMA_DNS_TH_R
 | (ISPC_CHROMA_DNS_TH_R << 18Ë| (
ISPC_CHROMA_DNS_TH_G
 << 10Ë| (ISPC_CHROMA_DNS_TH_G << 26))

	)

269 
	#CHROMA_DNS_THRESH1
 (
ISPC_CHROMA_DNS_TH_B
 | (ISPC_CHROMA_DNS_TH_B << 18))

	)

273 
i•cCCM
[9];

274 
i•cCCMOff
[3];

276 
	#FORCE_LUMA_ONE
 
DISABLED


	)

277 
	#LUT_3D_BYPASS
 
ENABLED


	)

278 
	#LUT_3D_LOAD
 
DISABLED


	)

279 
	#U12F_OUTPUT
 
DISABLED


	)

280 
	#MUL
 255

	)

281 
	#CC_OUTPUT_PLANE
 3

	)

283 
	#T1
 2

	)

285 
	#ISPC_CC_KR
 460

	)

286 
	#ISPC_CC_KG
 343

	)

287 
	#ISPC_CC_KB
 355

	)

289 
u16
 
ccm_lut_c€ffs
[9];

290 
u16
 
ccm_lut_off£ts
[3];

295 
	#INTERP_MODE
 
ENABLED


	)

296 
	#CHANNEL_MODE
 
ENABLED


	)

297 
	#INT_WIDTH
 12

	)

298 
	#LUTS_NO
 2

	)

299 
	#LUT_LOAD
 
ENABLED


	)

300 
	#APB_ACCESS
 
DISABLED


	)

301 
	#CSC_ENABLE
 
ENABLED


	)

302 
	#CHANNELS_NO
 3

	)

304 
i•cGammaTabÀ
[8192];

305 
uöt16_t
 
gammaLutFp16
[512*4];

306 
i•cCSC
[9];

307 
i•cCSCOff
[3];

309 
uöt16_t
 
lut3d
[16*16*16*4];

311 
u16
 
csc_lut_c€ffs
[9];

312 
u16
 
csc_lut_off£ts
[3];

314 
	#LUT_LD_FORMAT
 0

	)

316 
	#LUT_MAT_11
 
csc_lut_c€ffs
[0]

	)

317 
	#LUT_MAT_12
 
csc_lut_c€ffs
[1]

	)

318 
	#LUT_MAT_13
 
csc_lut_c€ffs
[2]

	)

319 
	#LUT_MAT_21
 
csc_lut_c€ffs
[3]

	)

320 
	#LUT_MAT_22
 
csc_lut_c€ffs
[4]

	)

321 
	#LUT_MAT_23
 
csc_lut_c€ffs
[5]

	)

322 
	#LUT_MAT_31
 
csc_lut_c€ffs
[6]

	)

323 
	#LUT_MAT_32
 
csc_lut_c€ffs
[7]

	)

324 
	#LUT_MAT_33
 
csc_lut_c€ffs
[8]

	)

325 
	#LUT_OFF_1
 
csc_lut_off£ts
[0]

	)

326 
	#LUT_OFF_2
 
csc_lut_off£ts
[1]

	)

327 
	#LUT_OFF_3
 
csc_lut_off£ts
[2]

	)

329 
	#LUT_REGION0_SIZE_I
 5

	)

330 
	#LUT_REGION1_SIZE_I
 5

	)

331 
	#LUT_REGION2_SIZE_I
 5

	)

332 
	#LUT_REGION3_SIZE_I
 5

	)

333 
	#LUT_REGION4_SIZE_I
 5

	)

334 
	#LUT_REGION5_SIZE_I
 5

	)

335 
	#LUT_REGION6_SIZE_I
 5

	)

336 
	#LUT_REGION7_SIZE_I
 5

	)

338 
	#LUT_REGION8_SIZE_I
 5

	)

339 
	#LUT_REGION9_SIZE_I
 5

	)

340 
	#LUT_REGION10_SIZE_I
 5

	)

341 
	#LUT_REGION11_SIZE_I
 5

	)

342 
	#LUT_REGION12_SIZE_I
 5

	)

343 
	#LUT_REGION13_SIZE_I
 5

	)

344 
	#LUT_REGION14_SIZE_I
 5

	)

345 
	#LUT_REGION15_SIZE_I
 5

	)

350 
	#POLYFIR_Y_H_NUM_IMX378
 10

	)

351 
	#POLYFIR_Y_H_DEN_IMX378
 21

	)

352 
	#POLYFIR_Y_V_NUM_IMX378
 5

	)

353 
	#POLYFIR_Y_V_DEN_IMX378
 11

	)

354 
	#POLYFIR_U_H_NUM_IMX378
 5

	)

355 
	#POLYFIR_U_H_DEN_IMX378
 21

	)

356 
	#POLYFIR_U_V_NUM_IMX378
 5

	)

357 
	#POLYFIR_U_V_DEN_IMX378
 22

	)

358 
	#POLYFIR_V_H_NUM_IMX378
 5

	)

359 
	#POLYFIR_V_H_DEN_IMX378
 21

	)

360 
	#POLYFIR_V_V_NUM_IMX378
 5

	)

361 
	#POLYFIR_V_V_DEN_IMX378
 22

	)

363 
	#POLYFIR_Y_H_NUM_IMX214
 1

	)

364 
	#POLYFIR_Y_H_DEN_IMX214
 1

	)

365 
	#POLYFIR_Y_V_NUM_IMX214
 1

	)

366 
	#POLYFIR_Y_V_DEN_IMX214
 1

	)

367 
	#POLYFIR_U_H_NUM_IMX214
 1

	)

368 
	#POLYFIR_U_H_DEN_IMX214
 2

	)

369 
	#POLYFIR_U_V_NUM_IMX214
 1

	)

370 
	#POLYFIR_U_V_DEN_IMX214
 2

	)

371 
	#POLYFIR_V_H_NUM_IMX214
 1

	)

372 
	#POLYFIR_V_H_DEN_IMX214
 2

	)

373 
	#POLYFIR_V_V_NUM_IMX214
 1

	)

374 
	#POLYFIR_V_V_DEN_IMX214
 2

	)

378 
uöt8_t
 
hC€fs
[];

379 
uöt8_t
 
vC€fs
[];

381 
	#POLY_Y_IMAGE_WIDTH_IMX378
 ((((
FULL_IMAGE_WIDTH_IMX378
 * 
POLYFIR_Y_H_NUM_IMX378
Ë- 1Ë/ 
POLYFIR_Y_H_DEN_IMX378
Ë+ 1)

	)

382 
	#POLY_Y_IMAGE_HEIGHT_IMX378
 ((((
FULL_IMAGE_HEIGHT_IMX378
 * 
POLYFIR_Y_V_NUM_IMX378
Ë- 1Ë/ 
POLYFIR_Y_V_DEN_IMX378
Ë+ 1)

	)

383 
	#POLY_UV_IMAGE_WIDTH_IMX378
 ((((
FULL_IMAGE_WIDTH_IMX378
 * 
POLYFIR_U_H_NUM_IMX378
Ë- 1Ë/ 
POLYFIR_U_H_DEN_IMX378
Ë+ 1)

	)

384 
	#POLY_UV_IMAGE_HEIGHT_IMX378
 ((((
FULL_IMAGE_HEIGHT_IMX378
 * 
POLYFIR_U_V_NUM_IMX378
Ë- 1Ë/ 
POLYFIR_U_V_DEN_IMX378
Ë+ 1)

	)

386 
	#POLY_Y_IMAGE_WIDTH_IMX214
 ((((
FULL_IMAGE_WIDTH_IMX214
 * 
POLYFIR_Y_H_NUM_IMX214
Ë- 1Ë/ 
POLYFIR_Y_H_DEN_IMX214
Ë+ 1)

	)

387 
	#POLY_Y_IMAGE_HEIGHT_IMX214
 ((((
FULL_IMAGE_HEIGHT_IMX214
 * 
POLYFIR_Y_V_NUM_IMX214
Ë- 1Ë/ 
POLYFIR_Y_V_DEN_IMX214
Ë+ 1)

	)

388 
	#POLY_UV_IMAGE_WIDTH_IMX214
 ((((
FULL_IMAGE_WIDTH_IMX214
 * 
POLYFIR_U_H_NUM_IMX214
Ë- 1Ë/ 
POLYFIR_U_H_DEN_IMX214
Ë+ 1)

	)

389 
	#POLY_UV_IMAGE_HEIGHT_IMX214
 ((((
FULL_IMAGE_HEIGHT_IMX214
 * 
POLYFIR_U_V_NUM_IMX214
Ë- 1Ë/ 
POLYFIR_U_V_DEN_IMX214
Ë+ 1)

	)

391 
	#SIPP_HW_EDGE_OP_BUFFER_WIDTH
 1296

	)

392 
	#SIPP_HW_EDGE_OP_BUFFER_HEIGHT
 972

	)

393 
	#SIPP_HW_EDGE_OP_BUFFER_NUM_PLANES
 1

	)

394 
	#SIPP_HW_EDGE_OP_BUFFER_SIZE
 (
SIPP_HW_EDGE_OP_BUFFER_WIDTH
 * \

395 
SIPP_HW_EDGE_OP_BUFFER_HEIGHT
 * 
SIPP_HW_EDGE_OP_BUFFER_NUM_PLANES
)

	)

398 
	#INPUT_MODE
 
NORMAL_MODE


	)

399 
	#OUTPUT_MODE
 
ORIENT_8BIT


	)

400 
	#THETA_MODE
 
NORMAL_THETA


	)

401 
	#THETA_OVX
 
ENABLED


	)

402 
	#MAGN_SCALE_FACT
 0x3C00

	)

404 
ISPPùeCª©eP¨ams
 ();

	@Demo/CamSIPPDebayerHdmi/leon_rt/app_config.c

13 
	~"≠p_c⁄fig.h
"

14 
	~"as£π.h
"

15 
	~"DrvC¥.h
"

16 
	~"DrvTimî.h
"

17 
	~"ªgi°îsMyrüd.h
"

18 
	~"DrvGpio.h
"

22 
	#SYS_CLK_KHZ
 (12000)

23 

	)

33 
	$öô
()

35 
s32
 
sc
;

37 
sc
 = 
	`DrvC¥InôClocks
(
SYS_CLK_KHZ
, 0, 0, 0, 0);

38 if(
sc
)

39  
sc
;

41 
sc
 = 
	`DrvTimîInô
();

42 if(
sc
)

43  
sc
;

46 
	}
}

	@Demo/CamSIPPDebayerHdmi/leon_rt/app_config.h

13 #i‚de‡
APP_CONFIG_H


14 
	#APP_CONFIG_H


	)

18 
	~"mv_ty≥s.h
"

22 #i‡
deföed
(
__•¨c
)

23 
	#ALIGNED
(
x
Ë
	`__©åibuã__
((
	`Æig√d
(x)))

	)

25 
	#ALIGNED
(
x
)

27 

	)

28 
	#DDR_AREA
 
	`__©åibuã__
((
	`£˘i⁄
(".ddr.bss")))

	)

35 
öô
();

	@Demo/CamSIPPDebayerHdmi/leon_rt/main.c

9 
	~<°dio.h
>

10 
	~<°dlib.h
>

11 
	~<°rög.h
>

12 
	~"mv_ty≥s.h
"

13 
	~"DrvDdr.h
"

14 
	~<DrvTimî.h
>

15 
	~"brdMv0182.h
"

17 
	~"≠p_c⁄fig.h
"

19 
	~"Cam214SIPPDebayîHdmi.h
"

21 
	~"ISPPùeSëtögs.h
"

23 
	~<DrvGpio.h
>

24 
	~"brdGpioCfgs/brdMv0182GpioDeÁu…s.h
"

27 #ifde‡
MV0212


28 
	~"MV0212.h
"

29 
	~"brdGpioCfgs/brdMv0182R5GpioDeÁu…s.h
"

30 #ñi‡
deföed
(
MV0182
)

31 
	~<Bﬂrd182Api.h
>

35 
	~"imx214_2L_2104x1560_Raw10_30Hz_bönög.h
"

36 
	~"imx378_4L_4056x3040_Raw10_30Hz.h
"

37 
	~"CamGíîicApi.h
"

40 
	~"LcdApi.h
"

41 
	~"DrvADV7513.h
"

42 
	~"LcdCEA1080p60.h
"

44 
	~"DrvCDCEL.h
"

48 
	#NR_OF_USED_CAM_BUFS
 4

	)

49 
	#NR_OF_USED_LCD_BUFS
 4

	)

52 
	#CAM_WINDOW_START_COLUMN
 0

	)

53 
	#CAM_WINDOW_START_ROW
 0

	)

54 
	#CAM_IMAGE_WIDTH_IMX214
 1920

	)

55 
	#CAM_IMAGE_HEIGHT_IMX214
 1080

	)

56 
	#CAM_IMAGE_WIDTH_IMX378
 4032

	)

57 
	#CAM_IMAGE_HEIGHT_IMX378
 2376

	)

58 
	#CAM_BPP
 2

	)

59 
	#CAM_BUFFER_SIZE_IMX214
 ((
CAM_IMAGE_WIDTH_IMX214
 * 
CAM_IMAGE_HEIGHT_IMX214
Ë* 
CAM_BPP
)

	)

60 
	#CAM_BUFFER_SIZE_IMX378
 ((
CAM_IMAGE_WIDTH_IMX378
 * 
CAM_IMAGE_HEIGHT_IMX378
Ë* 
CAM_BPP
)

	)

64 
	#LCD_IMAGE_WIDTH
 1920

	)

65 
	#LCD_IMAGE_HEIGHT
 1080

	)

66 
	#LCD_BPP
 1

	)

67 
	#LCD_OUTPUT_FORMAT
 
YUV420p


	)

69 
	#LCD_Y_BUFFER_SIZE
 ((
LCD_IMAGE_WIDTH
 * 
LCD_IMAGE_HEIGHT
Ë* 
LCD_BPP
)

	)

70 
	#LCD_U_BUFFER_SIZE
 (((
LCD_IMAGE_WIDTH
 * 
LCD_IMAGE_HEIGHT
Ë* 
LCD_BPP
)/4)

	)

71 
	#LCD_V_BUFFER_SIZE
 (((
LCD_IMAGE_WIDTH
 * 
LCD_IMAGE_HEIGHT
Ë* 
LCD_BPP
)/4)

	)

72 
	#LCD_IMAGE_STRIDE
 (
LCD_IMAGE_WIDTH
 * 
LCD_BPP
)

	)

74 #ifde‡
MV0212


75 
	#NUM_I2C_DEVS
 3

	)

80 
GíîicCamS≥c
 *
	gˇmC⁄fig
;

81 
GíîicCamîaH™dÀ
 
	gˇmHndl
;

82 
CamU£rS≥c
 
	gu£rC⁄fig
;

83 
‰ameS≥c
 
	gˇmFømeS≥c
;

84 
ˇŒbacksLi°Såu˘
 
	gˇŒbacks
 = {0};

85 
öãºu±sCÆlbacksLi°Ty≥
 
	gi§CÆlbacks
 = {0};

86 
u8
 
	g£ns‹
=0;

88 
ADV7513C⁄tfigMode_t
 
	gADV7513C⁄fig
 = 
ADV7513_1080P60
;

89 
LCDH™dÀ
 
	glcdHndl
;

90 
‰ameS≥c
 
	glcdFømeS≥c
;

93 
	$ALIGNED
(64Ë
DDR_AREA
 
UI¡8
 
ˇmBuf
[
NR_OF_USED_CAM_BUFS
][
CAM_BUFFER_SIZE_IMX378
];

95 
‰ameBuf„r
 
ˇmFøme
[
NR_OF_USED_CAM_BUFS
];

98 
	$ALIGNED
(64Ë
DDR_AREA
 
UI¡8
 
lcdBufY
[
NR_OF_USED_LCD_BUFS
][
LCD_Y_BUFFER_SIZE
];

99 
	$ALIGNED
(64Ë
DDR_AREA
 
UI¡8
 
lcdBufU
[
NR_OF_USED_LCD_BUFS
][
LCD_U_BUFFER_SIZE
];

100 
	$ALIGNED
(64Ë
DDR_AREA
 
UI¡8
 
lcdBufV
[
NR_OF_USED_LCD_BUFS
][
LCD_V_BUFFER_SIZE
];

102 
‰ameBuf„r
 
lcdFøme
[
NR_OF_USED_LCD_BUFS
];

105 
	$ALIGNED
(64Ëvﬁ©ûê
u32
 
CamFømeCå
 = 1;

107 
	$ALIGNED
(64Ëvﬁ©ûê
u32
 
LcdFømeCå
 = 0;

111 
	$ALIGNED
(64Ë
Cam214SIPPDebayîHdmi
 
myPl
;

114 vﬁ©ûê
ˇmFømeRe˚ivedSync
 = 0;

116 
u8
 
¥ŸocﬁRódSam∂e2
[] = 
I2C_PROTO_READ_16BA
;

117 
	s•ecs


119 
width
;

120 
height
;

122 
•ecs
 
ˇmS≥c
;

125 
‰ameBuf„r
* 
	`AŒoˇãNextCamFømeBuf
();

126 * 
	`CheckCamNŸifiˇti⁄
(
u32
 
nŸifiˇti⁄Ty≥
);

130 
	$C⁄figuªCamLcdDrivî
()

132 
ibuf
;

135 
u£rC⁄fig
.
mùiC⁄åﬁÀrNb
 = 
CAM_A1_MIPICTRL
;

136 
u£rC⁄fig
.
ª˚ivîId
 = 
CIF_DEVICE0
;

137 #ifde‡
MV0212


138 
u£rC⁄fig
.
£ns‹Re£tPö
 = 
MV0212_MV0201_SENSOR_RST_GPIO
;

139 #ñi‡
	`deföed
(
MV0182
)

140 
u£rC⁄fig
.
£ns‹Re£tPö
 = 
MV0182_MV0201_SENSOR_RST_GPIO
;

143 
u£rC⁄fig
.
wödowCﬁumnSèπ
 = 
CAM_WINDOW_START_COLUMN
;

144 
u£rC⁄fig
.
wödowRowSèπ
 = 
CAM_WINDOW_START_ROW
;

145 
u£rC⁄fig
.
wödowWidth
 = 
ˇmS≥c
.
width
;

146 
u£rC⁄fig
.
wödowHeight
 = 
ˇmS≥c
.
height
;

147 
u£rC⁄fig
.
gíî©eSync
 = 
NULL
;

150 
ˇmFømeS≥c
.
width
 = 
ˇmS≥c
.width;

151 
ˇmFømeS≥c
.
height
 = 
ˇmS≥c
.height;

152 
ˇmFømeS≥c
.
byãsPP
 = 
CAM_BPP
;

153 
ˇmFømeS≥c
.
°ride
 = 
ˇmS≥c
.
width
 * 
CAM_BPP
;

154 
ˇmFømeS≥c
.
ty≥
 = 
RAW16
;

157 
	`mem£t
(
ˇmBuf
,0,(camBuf));

160 
ibuf
 = 0; ibu‡< 
NR_OF_USED_CAM_BUFS
; ibuf++)

162 
ˇmFøme
[
ibuf
].
p1
 = (*)&
ˇmBuf
[ibuf][0];

163 
ˇmFøme
[
ibuf
].
p2
 = 
NULL
;

164 
ˇmFøme
[
ibuf
].
p3
 = 
NULL
;

165 
ˇmFøme
[
ibuf
].
•ec
 = 
ˇmFømeS≥c
;

168 
i§CÆlbacks
.
gëBlock
 = 
NULL
;

169 
i§CÆlbacks
.
gëFøme
 = 
AŒoˇãNextCamFømeBuf
;

170 
i§CÆlbacks
.
nŸifiˇti⁄
 = 
NULL
;

171 
ˇŒbacks
.
i§CbfLi°
 = &
i§CÆlbacks
;

172 
ˇŒbacks
.
£ns‹CbfLi°
 = 
NULL
;

175 
lcdFømeS≥c
.
width
 = 
LCD_IMAGE_WIDTH
;

176 
lcdFømeS≥c
.
height
 = 
LCD_IMAGE_HEIGHT
;

177 
lcdFømeS≥c
.
°ride
 = 
LCD_IMAGE_STRIDE
;

178 
lcdFømeS≥c
.
byãsPP
 = 
LCD_BPP
;

179 
lcdFømeS≥c
.
ty≥
 = 
LCD_OUTPUT_FORMAT
;

182 
	`mem£t
(
lcdBufY
,0,(lcdBufY));

183 
	`mem£t
(
lcdBufU
,0,(lcdBufU));

184 
	`mem£t
(
lcdBufV
,0,(lcdBufV));

186 
ibuf
 = 0; ibu‡< 
NR_OF_USED_LCD_BUFS
; ibuf++)

188 
lcdFøme
[
ibuf
].
•ec
 = 
lcdFømeS≥c
;

189 
lcdFøme
[
ibuf
].
p1
 = (*Ë&
lcdBufY
[ibuf][0];

190 
lcdFøme
[
ibuf
].
p2
 = (*Ë&
lcdBufU
[ibuf][0];

191 
lcdFøme
[
ibuf
].
p3
 = (*Ë&
lcdBufV
[ibuf][0];

195 
	}
}

197 
	$c⁄figIOBuf„r
(
Cam214SIPPDebayîHdmi
 *
pVideo
, 
UI¡8
 *
öputBuf
,

198 
UI¡8
 *
ouçutYBuf
,

199 
UI¡8
 *
ouçutUBuf
,

200 
UI¡8
 *
ouçutVBuf
)

202 
DmaP¨am
 *
dmaInCfg
 = (DmaP¨am *)
pVideo
->
dmaIn0
->
∑øms
;

203 
DmaP¨am
 *
dmaOutYCfg
 = (DmaP¨am *)
pVideo
->
dmaOutY
->
∑øms
;

204 
DmaP¨am
 *
dmaOutUCfg
 = (DmaP¨am *)
pVideo
->
dmaOutU
->
∑øms
;

205 
DmaP¨am
 *
dmaOutVCfg
 = (DmaP¨am *)
pVideo
->
dmaOutV
->
∑øms
;

209 
dmaInCfg
->
ddrAddr
 = (
UI¡32
)
öputBuf
;

213 
dmaOutYCfg
->
ddrAddr
 = (
UI¡32
)
ouçutYBuf
;

214 
dmaOutUCfg
->
ddrAddr
 = (
UI¡32
)
ouçutUBuf
;

215 
dmaOutVCfg
->
ddrAddr
 = (
UI¡32
)
ouçutVBuf
;

216 
	}
}

218 #ifde‡
MV0182


219 
u32
 
I2CEº‹H™dÀrIgn‹e
(
I2CM_SètusTy≥
 
i2cCommsEº‹
, u32 
__©åibuã__
((
unu£d
)Ë
¶aveAddr
, u32 __©åibuã__((unu£d)Ë
ªgAddr
)

221 
UNUSED
(
i2cCommsEº‹
);

222  
	gI2CM_STAT_OK
;

226 
‰ameBuf„r
* 
	$AŒoˇãNextCamFømeBuf
()

228 ++
CamFømeCå
;

229 
ˇmFømeRe˚ivedSync
 = 1;

230  ( &
ˇmFøme
[
CamFømeCå
 % 
NR_OF_USED_CAM_BUFS
] );

231 
	}
}

233 
‰ameBuf„r
* 
	$ÆloˇãLcdFøme
(
œyî
)

235 
	`UNUSED
(
œyî
);

236  ( &
lcdFøme
[(
LcdFømeCå
-2Ë% 
NR_OF_USED_LCD_BUFS
] );

237 
	}
}

240 
	$maö
()

243 
I2CM_Devi˚
 * 
i2c1H™dÀ
;

244 
I2CM_Devi˚
 * 
i2c2H™dÀ
;

246 
LCDH™dÀ
 
lcdHndl
;

247 
LCDLayîOff£t
 
lcdLayîSèπOff£t
 = {0, 0};

249 
ˇmEº‹Ty≥
 
ˇmSètus
;

250 
s32
 
bﬂrdSètus
;

251 
u8
 
hdmiSètus
;

252 
ˇmID
 = 0;

253 
°©usI2c
=0;

254 
u8
 
byãs
[2];

257 
	`öô
();

259 
	`swcLe⁄SëPIL
(0);

261 #ifde‡
MV0212


262 
öt32_t
 
rc
;

263 
uöt32_t
 
ªv
;

264 
BﬂrdI2CInfo
 
öfo
[
NUM_I2C_DEVS
];

265 
BﬂrdC⁄figDesc
 
c⁄fig
[] =

268 
BRDCONFIG_GPIO
,

270 (*)
brdMV0182R5GpioCfgDeÁu…


273 
BRDCONFIG_END
,

274 
NULL


278 
rc
 = 
	`BﬂrdInô
(
c⁄fig
);

279 i‡(
rc
!=
BRDCONFIG_SUCCESS
)

281 
	`¥ötf
("Error: mv0212 board initialization failed with %ld status\n",

282 
rc
);

283  
rc
;

286 
rc
 = 
	`BﬂrdGëPCBRevisi⁄
(&
ªv
);

287 i‡(
rc
!=
BRDCONFIG_SUCCESS
)

289 
	`¥ötf
("Error: mv0212 board configurationÑead failed with %ld status\n",

290 
rc
);

291  
rc
;

293 
	`¥ötf
("Bﬂrd Mv0212 inôülized,Ñevisi⁄ = %lu \n", 
ªv
);

295 
bﬂrdSètus
 = 
	`BﬂrdInôExtPŒ
(
EXT_PLL_CFG_148_24_24MHZ
);

296 i‡(
bﬂrdSètus
 !
BRDCONFIG_SUCCESS
)

298 
	`¥ötf
("Error: mv0212 boardÉxtÖll initialization failed with %ld status\n",

299 
bﬂrdSètus
);

302 
rc
 = 
	`BﬂrdGëI2CInfo
(
öfo
, 
NUM_I2C_DEVS
);

303 
i2c1H™dÀ
=
öfo
[1].
h™dÀr
;

304 
i2c2H™dÀ
=
öfo
[2].
h™dÀr
;

305 #ñi‡
	`deföed
(
MV0182
)

306 
	`¥ötf
("Board initialize\n");

307 
	`DrvGpioInôüli£R™ge
(
brdMV0182GpioCfgDeÁu…
);

308 
bﬂrdSètus
 = 
	`BﬂrdInôüli£
(
EXT_PLL_CFG_148_24_24MHZ
);

309 
i2c1H™dÀ
=
gAµDevHndls
.i2c1Handle;

310 
i2c2H™dÀ
=
gAµDevHndls
.i2c2Handle;

311 i‡(
bﬂrdSètus
 !
B_SUCCESS
)

313 
	`¥ötf
("Error: mv0182 board initialization failed with %ld status\n",

314 
bﬂrdSètus
);

317 
	`¥ötf
("Board initialized\n");

318 
	`DrvI2cMSëEº‹H™dÀr
(
i2c1H™dÀ
,
I2CEº‹H™dÀrIgn‹e
);

321 
	`¥ötf
("Configuring cameraándÜcd drivers\n");

323 
	`DrvGpioSëPö
(
MV0182_MV0201_SENSOR_RST_GPIO
, 1);

324 
	`DrvTimîSÀïMs
(5);

325 
	`DrvGpioSëPö
(
MV0182_MV0201_SENSOR_RST_GPIO
, 0);

326 
	`DrvTimîSÀïMs
(5);

327 
	`DrvGpioSëPö
(
MV0182_MV0201_SENSOR_RST_GPIO
, 1);

328 
	`DrvTimîSÀïMs
(5);

330 
°©usI2c
=
	`DrvI2cMTønß˘i⁄
(
i2c1H™dÀ
, 
IMX378_I2C_ADDRESS
, 
IMX378_REG_ID
, 
¥ŸocﬁRódSam∂e2
, 
byãs
, 2);

331 
ˇmID
=
byãs
[0]<<8 | (bytes[1]);

333 i‡((
°©usI2c
 !
I2CM_STAT_OK
Ë|| 
ˇmID
 !
IMX378_ID
)

335 
ˇmID
=0;

338 if(
ˇmID
==0)

340 
°©usI2c
=
	`DrvI2cMTønß˘i⁄
(
i2c1H™dÀ
, 
IMX214_I2C_ADDRESS
, 
IMX214_REG_ID
, 
¥ŸocﬁRódSam∂e2
, 
byãs
, 2);

341 
ˇmID
=
byãs
[0]<<8 | (bytes[1]);

343 i‡(
°©usI2c
 !
I2CM_STAT_OK
)

345 
	`¥ötf
("\¿Camî®£ns‹Ñód faû wôh sètu†(%d).\n", 
°©usI2c
);

346 
ˇmID
=0;

350 
ˇmID
) {

352 
IMX378_ID
 :

353 
	`¥ötf
("Camera sensor: IMX378 \n");

354 
£ns‹
=2;

355 
ˇmC⁄fig
 = &
imx378_4L_4056x3040_RAW10_30Hz_ˇmCfg
;

356 
ˇmS≥c
.
width

CAM_IMAGE_WIDTH_IMX378
;

357 
ˇmS≥c
.
height

CAM_IMAGE_HEIGHT_IMX378
;

360 
IMX214_ID
 :

361 
	`¥ötf
("Camera sensor: IMX214 \n");

362 
£ns‹
=1;

363 
ˇmC⁄fig
 = &
imx214_2L_2104x1560_RAW10_30Hz_bön_ˇmCfg
;

364 
ˇmS≥c
.
width

CAM_IMAGE_WIDTH_IMX214
;

365 
ˇmS≥c
.
height

CAM_IMAGE_HEIGHT_IMX214
;

369 
	`¥ötf
("Camera sensor isÇot supported forÅhis board!\n");

373 
	`C⁄figuªCamLcdDrivî
();

375 
ˇmSètus
 = 
	`CamInô
–&
ˇmHndl
, 
ˇmC⁄fig
, &
u£rC⁄fig
, &
ˇŒbacks
, 
i2c1H™dÀ
 );

376 i‡(
ˇmSètus
 !
CAM_SUCCESS
)

378 
	`¥ötf
("\¿Camî®c⁄figuøti⁄ faûed (%d).\n", 
ˇmSètus
);

382 
ˇmSètus
 = 
	`CamSèπ
–&
ˇmHndl
 );

383 i‡(
ˇmSètus
 !
CAM_SUCCESS
)

385 
	`¥ötf
("\¿Camî®ÁûedÅÿ°¨à(%d).\n", 
ˇmSètus
);

388 
	`¥ötf
("ConfiguringÅhe HDMI chip ADV7513\n");

389 
hdmiSètus
 = 
	`öôADV7513ªg
(
i2c2H™dÀ
, 
ADV7513C⁄fig
);

391 i‡(
hdmiSètus
 == 0)

392 
	`¥ötf
("ADV7513 Configured\n");

394 
	`¥ötf
("ADV7513 C⁄figuøti⁄ faûed %d \n", 
hdmiSètus
);

397 
	`¥ötf
("ConfiguringÅhe LCD\n");

398 
	`LCDInô
(&
lcdHndl
, &
lcdS≥c1080p60
, 
NULL
, 
LCD1
);

399 
	`LCDInôLayî
(&
lcdHndl
, 
VL1
, &
lcdFømeS≥c
, 
lcdLayîSèπOff£t
);

400 
	`LCDSëupCÆlbacks
(&
lcdHndl
, &
ÆloˇãLcdFøme
, 
NULL
, NULL, NULL);

402 
ˇmFømeRe˚ivedSync
 = 0;

403 
ˇmFømeRe˚ivedSync
 == 0);

405 
	`¥ötf
("Init SippÖlatform..\n");

406 
	`sùpPœtf‹mInô
();

408 
	`¥ötf
("Build SIPPÖipe..\n");

409 
	`buûdCam214SIPPDebayîHdmi
(&
myPl
);

411 
	`¥ötf
("Configure ISPÖarameters..\n");

412 
	`ISPPùeCª©eP¨ams
();

414 
	`¥ötf
("Configure SIPPÖipe..\n");

415 
	`c⁄figCam214SIPPDebayîHdmi
(&
myPl
);

417 
	`¥ötf
("Configure initial sipp buffers \n");

418 
	`c⁄figIOBuf„r
(&
myPl
, 
ˇmBuf
[((
CamFømeCå
 - 2Ë% 
NR_OF_USED_CAM_BUFS
)],

419 
lcdBufY
[(
LcdFømeCå
 % 
NR_OF_USED_LCD_BUFS
)],

420 
lcdBufU
[(
LcdFømeCå
 % 
NR_OF_USED_LCD_BUFS
)],

421 
lcdBufV
[(
LcdFømeCå
 % 
NR_OF_USED_LCD_BUFS
)]);

423 
	`LCDSèπ
(&
lcdHndl
);

424 
	`¥ötf
("Entering infiniteÜoop..\n\n");

427 i‡(
ˇmFømeRe˚ivedSync
 != 0)

429 
ˇmFømeRe˚ivedSync
 = 0;

431 
LcdFømeCå
++;

433 
	`c⁄figIOBuf„r
(&
myPl
, 
ˇmBuf
[((
CamFømeCå
 - 2Ë% 
NR_OF_USED_CAM_BUFS
)],

434 
lcdBufY
[(
LcdFømeCå
 % 
NR_OF_USED_LCD_BUFS
)],

435 
lcdBufU
[(
LcdFømeCå
 % 
NR_OF_USED_LCD_BUFS
)],

436 
lcdBufV
[(
LcdFømeCå
 % 
NR_OF_USED_LCD_BUFS
)]);

438 
	`sùpPro˚ssFøme
(
myPl
.
∂
);

443 
	}
}

	@Demo/DisparityMap/myriad/arch/ma2x5x/leon/los_app_config_2150.c

13 
	~"los_≠p_c⁄fig.h
"

14 
	~"DrvC¥.h
"

27 
	$blocksRe£tSûic⁄S≥cific
()

29 
	`DrvC¥SysDevi˚A˘i⁄
(
SIPP_DOMAIN
, 
ASSERT_RESET
, 
DEV_SIPP_MIPI
);

30 
	`DrvC¥SysDevi˚A˘i⁄
(
UPA_DOMAIN
, 
ASSERT_RESET
, 
APP_UPA_CLOCKS
);

32 
	`DrvC¥SysDevi˚A˘i⁄
(
MSS_DOMAIN
, 
DEASSERT_RESET
, -1);

36 
	`DrvC¥SysDevi˚A˘i⁄
(
CSS_DOMAIN
, 
DEASSERT_RESET
, -1);

37 
	`DrvC¥SysDevi˚A˘i⁄
(
SIPP_DOMAIN
, 
DEASSERT_RESET
, -1);

38 
	`DrvC¥SysDevi˚A˘i⁄
(
UPA_DOMAIN
, 
DEASSERT_RESET
, -1);

39 
	}
}

	@Demo/DisparityMap/myriad/arch/ma2x5x/leon/los_app_config_2150.h

13 #i‚de‡
LOS_APP_CONFIG_2150_H


14 
	#LOS_APP_CONFIG_2150_H


	)

18 
	~"mv_ty≥s.h
"

19 
	~"DrvC¥Deföes.h
"

23 
	#MSS_CLOCKS
 ( 
DEV_MSS_APB_SLV
 | \

24 
DEV_MSS_APB2_CTRL
 | \

25 
DEV_MSS_RTBRIDGE
 | \

26 
DEV_MSS_RTAHB_CTRL
 | \

27 
DEV_MSS_LRT
 | \

28 
DEV_MSS_LRT_DSU
 | \

29 
DEV_MSS_LRT_L2C
 | \

30 
DEV_MSS_LRT_ICB
 | \

31 
DEV_MSS_AXI_BRIDGE
 | \

32 
DEV_MSS_MXI_CTRL
 | \

33 
DEV_MSS_MXI_DEFSLV
 | \

34 
DEV_MSS_AXI_MON
 | \

35 
DEV_MSS_MIPI
 | \

36 
DEV_MSS_CIF0
 | \

37 
DEV_MSS_LCD
 | \

38 
DEV_MSS_AMC
 | \

39 
DEV_MSS_SIPP
 | \

40 
DEV_MSS_TIM
 )

	)

42 
	#APP_SIPP_CLOCKS
 ( 
DEV_SIPP_SIPP_ABPSLV
 | \

43 
DEV_SIPP_APB_SLV
 | \

44 
DEV_SIPP_MIPI
 | \

45 
DEV_SIPP_LUT
 | \

46 
DEV_SIPP_MED
 | \

47 
DEV_SIPP_MIPI_RX1
 )

	)

	@Demo/DisparityMap/myriad/arch/ma2x5x/leon_rt/lrt_app_config_2150.c

2 
	~"mv_ty≥s.h
"

3 
	~"sùp.h
"

5 
u16
 
	glutTabÀ
[256] 
__©åibuã__
((
Æig√d
(8)));

7 
	$c⁄figuªLutFûãrSûic⁄S≥cific
(
LutP¨am
* 
lutCfg
)

9 
lutCfg
->
lutF‹m©
 = 2;

10 
	}
}

	@Demo/DisparityMap/myriad/arch/ma2x5x/leon_rt/lrt_app_config_2150.h

13 #i‚de‡
LRT_APP_CONFIG_2150_H


14 
	#LRT_APP_CONFIG_2150_H


	)

24 
u16
 
lutTabÀ
[256];

	@Demo/DisparityMap/myriad/leon/los_app_config.c

13 
	~"DrvC¥.h
"

14 
	~"DrvDdr.h
"

15 
	~"as£π.h
"

16 
	~"ªgi°îsMyrüd.h
"

17 
	~"DrvRegUtûs.h
"

18 
	~"DrvGpioDeföes.h
"

19 
	~"DrvGpio.h
"

20 
	~"DrvShaveL2Cache.h
"

21 
	~"OsDrvTimî.h
"

22 
	~"DrvMssDeföes.h
"

23 
	~"OsDrvC¥.h
"

24 
	~"los_≠p_c⁄fig.h
"

29 
	#L2CACHE_CFG
 (
SHAVE_L2CACHE_NORMAL_MODE
)

	)

30 
	#SHAVES_USED
 (12)

	)

35 
u32
 
__l2_c⁄fig
 
__©åibuã__
((
£˘i⁄
(".l2.mode"))Ë
L2CACHE_CFG
;

40 
tyAuxClkDividîCfg
 
	gauxClk
[] =

43 .
auxClockE«bÀMask
 = 
AUX_CLK_MASK_MEDIA
,

44 .
	gauxClockSour˚
 = 
CLK_SRC_SYS_CLK_DIV2
 ,

45 .
	gauxClockDivNumî©‹
 = 1,

46 .
	gauxClockDivDíomö©‹
 = 1,

49 .
	gauxClockE«bÀMask
 = (
AUX_CLK_MASK_CIF0
 | 
AUX_CLK_MASK_CIF1
),

50 .
	gauxClockSour˚
 = 
CLK_SRC_SYS_CLK
,

51 .
	gauxClockDivNumî©‹
 = 1,

52 .
	gauxClockDivDíomö©‹
 = 1,

55 .
	gauxClockE«bÀMask
 = 
CLOCKS_MIPICFG
,

56 .
	gauxClockSour˚
 = 
CLK_SRC_SYS_CLK
 ,

57 .
	gauxClockDivNumî©‹
 = 1,

58 .
	gauxClockDivDíomö©‹
 = 24,

61 .
	gauxClockE«bÀMask
 = 
AUX_CLK_MASK_USB_CTRL_SUSPEND_CLK
,

62 .
	gauxClockSour˚
 = 
CLK_SRC_PLL0
,

63 .
	gauxClockDivNumî©‹
 = 1,

64 .
	gauxClockDivDíomö©‹
 = 30

74 
	$öôClocksAndMem‹y
()

76 
i
;

77 
s32
 
sc
;

80 
sc
 = 
	`OsDrvC¥Inô
();

81 if(
sc
)

82  
sc
;

83 
sc
 = 
	`OsDrvC¥O≥n
();

84 if(
sc
)

85  
sc
;

86 
sc
 = 
	`OsDrvC¥AuxClockAºayC⁄fig
(
auxClk
);

87 if(
sc
)

88  
sc
;

90 
	`blocksRe£tSûic⁄S≥cific
();

92 
sc
 = 
	`OsDrvTimîInô
();

93 if(
sc
)

94  
sc
;

95 
	`DrvDdrInôüli£
(
NULL
);

98 
sc
 = 
	`DrvShaveL2CacheSëMode
(
L2CACHE_CFG
);

99 if(
sc
)

100  
sc
;

102 
	`DrvShaveL2CacheSëupP¨tôi⁄
(
SHAVEPART256KB
);

105 
sc
 = 
	`DrvShaveL2CacheAŒoˇãSëP¨tôi⁄s
();

106 if(
sc
)

107  
sc
;

109 
i
 = 0; i < 
SHAVES_USED
; i++)

111 
	`DrvShaveL2CacheSëLSUP¨tId
(
i
, 
PARTITION_0
);

113 
	`DrvShaveL2CacheP¨tôi⁄FlushAndInvÆid©e
(
PARTITION_0
);

115 
	}
}

	@Demo/DisparityMap/myriad/leon/los_app_config.h

13 #i‚de‡
LOS_APP_CONFIG_H


14 
	#LOS_APP_CONFIG_H


	)

18 
	~"mv_ty≥s.h
"

21 #i‡
deföed
(
MA2150
Ë|| deföed(
MA2155
Ë|| deföed(
MA2450
Ë|| deföed(
MA2455
)

22 
	~"los_≠p_c⁄fig_2150.h
"

27 
	#SYS_CLK_KHZ
 12000

28 

	)

29 
	#APP_UPA_CLOCKS
 (
DEV_UPA_SH0
 | \

30 
DEV_UPA_SH1
 | \

31 
DEV_UPA_SH2
 | \

32 
DEV_UPA_SH3
 | \

33 
DEV_UPA_SH4
 | \

34 
DEV_UPA_SHAVE_L2
 | \

35 
DEV_UPA_CDMA
 | \

36 
DEV_UPA_BIC
 | \

37 
DEV_UPA_CTRL
 )

	)

40 
	#CLOCKS_MIPICFG
 (
AUX_CLK_MASK_MIPI_ECFG
 | 
AUX_CLK_MASK_MIPI_CFG
)

	)

43 
	#PARTITION_0
 (0)

	)

49 
u32
 
__l2_c⁄fig
 ;

57 
öôClocksAndMem‹y
();

58 
blocksRe£tSûic⁄S≥cific
();

	@Demo/DisparityMap/myriad/leon/main.c

13 
	~<DrvRegUtûsDeföes.h
>

14 
	~<DrvLe⁄.h
>

15 
	~<DrvC¥.h
>

16 
	~<DrvTimî.h
>

17 
	~<DrvDdr.h
>

18 
	~<swcLe⁄Utûs.h
>

20 
	~<°dlib.h
>

21 
	~<°dio.h
>

22 
	~<°rög.h
>

23 
	~<î∫o.h
>

25 
	~<£m≠h‹e.h
>

26 
	~<±hªad.h
>

27 
	~<sched.h
>

28 
	~<f˙é.h
>

29 
	~<mv_ty≥s.h
>

30 
	~<πems/˝uu£.h
>

32 
	~<DrvShaveL2Cache.h
>

33 
	~<b•.h
>

34 
	~"πems_c⁄fig.h
"

35 
	~"OsDrvUsbPhy.h
"

36 
	~"usbpump_≠∂iˇti⁄_πems_≠i.h
"

37 
	~"DrvCmxDma.h
"

41 #i‚de‡
DISABLE_LEON_DCACHE


42 
	#USBPUMP_MDK_CACHE_ENABLE
 1

	)

44 
	#USBPUMP_MDK_CACHE_ENABLE
 0

	)

47 
	#INTERRUPT_LEVEL
 14

	)

48 
	#INTERRUPT_OFFSET
 13

	)

49 
	#NUMBER_OF_AGENTS
 0

	)

50 
	#STARTING_FROM
 1

	)

54 vﬁ©ûê
u32
 
	gv¨_debug
 = 0x33333333;

55 
u32
 *
Ãt_°¨t
;

61 
USBPUMP_APPLICATION_RTEMS_CONFIGURATION
 
	gsg_D©aPump_AµC⁄fig
 =

62 
USBPUMP_APPLICATION_RTEMS_CONFIGURATION_INIT_V1
(

64  
NULL
,

69  
NULL
,

70  
NULL
,

71  
USBPUMP_MDK_CACHE_ENABLE
,

80 *
	$POSIX_Inô
 (*
¨gs
)

82 
	`UNUSED
(
¨gs
);

84 
s32
 
sc
;

85 
osDrvUsbPhyP¨am_t
 
öôP¨am
 =

87 .
íabÀOtgBlock
 = 
USB_PHY_OTG_DISABLED
,

88 .
u£Exã∫ÆClock
 = 
USB_PHY_USE_EXT_CLK
,

89 .
fSñ
 = 
USB_REFCLK_20MHZ
,

90 .
ªfClkSñ0
 = 
USB_SUPER_SPEED_CLK_CONFIG
,

91 .
f‹˚HsO∆y
 = 
USB_PHY_HS_ONLY_OFF


94 
sc
 = 
	`öôClocksAndMem‹y
();

95 if(
sc
)

96 
	`exô
(
sc
);

99 
	`DrvLe⁄RTSèπup
((
u32
)&
Ãt_°¨t
);

100 
	`DrvLe⁄RTWaôF‹BoŸ
();

102 
	`OsDrvUsbPhyInô
(&
öôP¨am
);

104 if(
	`UsbPump_Rãms_D©aPump_Sèπup
(&
sg_D©aPump_AµC⁄fig
Ë!
NULL
)

106 
	`¥ötf
("\n\nUsbPump_Rtems_DataPump_Startup()!\n\n\n");

110 
	`¥ötf
("\n\nUsbPump_Rtems_DataPump_Startup() failed!\n\n\n");

111 
	`exô
(1);

114 
	`DrvLe⁄RTWaôExecuti⁄
();

116 
	`exô
(0);

117 
	}
}

	@Demo/DisparityMap/myriad/leon/rtems_config.h

9 #i‚de‡
_RTEMS_CONFIG_H_


10 
	#_RTEMS_CONFIG_H_


	)

14 
	~<πems.h
>

15 
	~<πems/b•Io.h
>

16 
	~"los_≠p_c⁄fig.h
"

17 
	~"ÁèlExãnsi⁄.h
"

21 #i‡
deföed
(
__RTEMS__
)

23 #i‡!
deföed
 (
__CONFIG__
)

24 
	#__CONFIG__


	)

27 
	#CONFIGURE_INIT


	)

29 #i‚de‡
RTEMS_POSIX_API


30 
	#RTEMS_POSIX_API


	)

33 
	#CONFIGURE_MICROSECONDS_PER_TICK
 1000

	)

35 
	#CONFIGURE_TICKS_PER_TIMESLICE
 10

	)

37 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

39 
	#CONFIGURE_APPLICATION_NEEDS_CLOCK_DRIVER


	)

41 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

43 
	#CONFIGURE_MINIMUM_TASK_STACK_SIZE
 4096

	)

45 
	#CONFIGURE_MAXIMUM_TASKS
 4

	)

47 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 4

	)

49 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 8

	)

51 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 8

	)

53 
	#CONFIGURE_MAXIMUM_SEMAPHORES
 8

	)

55 
	#CONFIGURE_MAXIMUM_POSIX_MESSAGE_QUEUES
 8

	)

57 
	#CONFIGURE_MAXIMUM_POSIX_TIMERS
 4

	)

59 
	#CONFIGURE_MAXIMUM_TIMERS
 4

	)

63 
	#CONFIGURE_MAXIMUM_USER_EXTENSIONS
 1

	)

64 
	#CONFIGURE_INITIAL_EXTENSIONS
 { .
Áèl
 = 
F©Æ_exãnsi⁄
 }

	)

66 *
POSIX_Inô
 (*
¨gs
);

68 
	~<πems/c⁄fdefs.h
>

73 
BSP_SET_CLOCK
(12000, 600000, 1, 1,
DEFAULT_CORE_CSS_DSS_CLOCKS
, 
MSS_CLOCKS
, 
APP_UPA_CLOCKS
, 
APP_SIPP_CLOCKS
, 0x0);

76 
BSP_SET_L2C_CONFIG
(1, 
L2C_REPL_LRU
, 0, 
L2C_MODE_COPY_BACK
, 0, 
NULL
);

	@Demo/DisparityMap/myriad/leon/videodemo.h

9 #i‚de‡
_VIDEODEMO_H_


10 
	#_VIDEODEMO_H_


	)

14 
	~"¥Ÿovideo.h
"

15 
	~"uˇŒback.h
"

16 
	~"mv_ty≥s.h
"

18 
__TMS_TYPE_DEF_STRUCT
(
VIDEODEMO_CONTEXT
);

19 
__TMS_TYPE_DEF_STRUCT
(
VIDEODEMO_BUFFER_HDR
);

20 
__TMS_TYPE_DEF_STRUCT
(
VIDEODEMO_BUFFER
);

21 
__TMS_TYPE_DEF_STRUCT
(
PROCESSING_UNIT
);

22 
__TMS_TYPE_DEF_STRUCT
(
PROBE_COMMIT
);

23 
__TMS_TYPE_DEF_STRUCT
(
STILL_PROBE_COMMIT
);

27 #i‚def 
VIDEODEMO_CONFIG_CONTROLBUFFER_SIZE


28 
	#VIDEODEMO_CONFIG_CONTROLBUFFER_SIZE
 (32)

	)

31 #i‚def 
VIDEODEMO_CONFIG_MAXQUEUED_BUFFER


32 
	#VIDEODEMO_CONFIG_MAXQUEUED_BUFFER
 (16)

	)

36 
	#PAYLOAD_HEADER_SIZE
 (12)

	)

38 
	#UNCOMPRESSED_HDR_HLE_OFFSET
 0

	)

39 
	#UNCOMPRESSED_HDR_BFH_OFFSET
 1

	)

40 
	#UNCOMPRESSED_HDR_PTS_OFFSET
 2

	)

41 
	#UNCOMPRESSED_HDR_SCR_STC_OFFSET
 6

	)

42 
	#UNCOMPRESSED_HDR_SCR_SOF_OFFSET
 10

	)

43 
	#UNCOMPRESSED_HDR_EOH
 (1 << 7)

	)

44 
	#UNCOMPRESSED_HDR_ERR
 (1 << 6)

	)

45 
	#UNCOMPRESSED_HDR_STI
 (1 << 5)

	)

46 
	#UNCOMPRESSED_HDR_RES
 (1 << 4)

	)

47 
	#UNCOMPRESSED_HDR_SCR
 (1 << 3)

	)

48 
	#UNCOMPRESSED_HDR_PTS
 (1 << 2)

	)

49 
	#UNCOMPRESSED_HDR_EOF
 (1 << 1)

	)

50 
	#UNCOMPRESSED_HDR_FID
 (1 << 0)

	)

53 
	#PU_BACKLIGHT_COMPENSATION_CONTROL_INFO
 0x03

	)

54 
	#PU_BACKLIGHT_COMPENSATION_CONTROL_MIN
 0x0000

	)

55 
	#PU_BACKLIGHT_COMPENSATION_CONTROL_MAX
 0x0003

	)

56 
	#PU_BACKLIGHT_COMPENSATION_CONTROL_RES
 0x0001

	)

57 
	#PU_BACKLIGHT_COMPENSATION_CONTROL_DEF
 0x0000

	)

59 
	#PU_BRIGHTNESS_CONTROL_INFO
 0x03

	)

60 
	#PU_BRIGHTNESS_CONTROL_MIN
 0x0000

	)

61 
	#PU_BRIGHTNESS_CONTROL_MAX
 0x00FF

	)

62 
	#PU_BRIGHTNESS_CONTROL_RES
 0x0001

	)

63 
	#PU_BRIGHTNESS_CONTROL_DEF
 0x007F

	)

65 
	#PU_CONTRAST_CONTROL_INFO
 0x03

	)

66 
	#PU_CONTRAST_CONTROL_MIN
 0x0000

	)

67 
	#PU_CONTRAST_CONTROL_MAX
 0x00FF

	)

68 
	#PU_CONTRAST_CONTROL_RES
 0x0001

	)

69 
	#PU_CONTRAST_CONTROL_DEF
 0x007F

	)

71 
	#PU_POWER_LINE_FREQUENCY_CONTROL_INFO
 0x03

	)

72 
	#PU_POWER_LINE_FREQUENCY_CONTROL_MIN
 0x00

	)

73 
	#PU_POWER_LINE_FREQUENCY_CONTROL_MAX
 0x02

	)

74 
	#PU_POWER_LINE_FREQUENCY_CONTROL_RES
 0x01

	)

75 
	#PU_POWER_LINE_FREQUENCY_CONTROL_DEF
 0x01

	)

77 
	#PU_HUE_CONTROL_INFO
 0x03

	)

78 
	#PU_HUE_CONTROL_MIN
 0x0000

	)

79 
	#PU_HUE_CONTROL_MAX
 0x0168

	)

80 
	#PU_HUE_CONTROL_RES
 0x0064

	)

81 
	#PU_HUE_CONTROL_DEF
 0x0000

	)

83 
	#PU_SATURATION_CONTROL_INFO
 0x03

	)

84 
	#PU_SATURATION_CONTROL_MIN
 0x0000

	)

85 
	#PU_SATURATION_CONTROL_MAX
 0x00FF

	)

86 
	#PU_SATURATION_CONTROL_RES
 0x0001

	)

87 
	#PU_SATURATION_CONTROL_DEF
 0x007F

	)

89 
	#PU_SHARPNESS_CONTROL_INFO
 0x03

	)

90 
	#PU_SHARPNESS_CONTROL_MIN
 0x0000

	)

91 
	#PU_SHARPNESS_CONTROL_MAX
 0x000F

	)

92 
	#PU_SHARPNESS_CONTROL_RES
 0x0001

	)

93 
	#PU_SHARPNESS_CONTROL_DEF
 0x0000

	)

95 
	#PU_GAMMA_CONTROL_INFO
 0x03

	)

96 
	#PU_GAMMA_CONTROL_MIN
 0x0064

	)

97 
	#PU_GAMMA_CONTROL_MAX
 0x00DC

	)

98 
	#PU_GAMMA_CONTROL_RES
 0x003C

	)

99 
	#PU_GAMMA_CONTROL_DEF
 0x00A0

	)

101 
	#PU_WHITE_BALANCE_TEMPERATURE_CONTROL_INFO
 0x03

	)

102 
	#PU_WHITE_BALANCE_TEMPERATURE_CONTROL_MIN
 0x0AFA

	)

103 
	#PU_WHITE_BALANCE_TEMPERATURE_CONTROL_MAX
 0x1964

	)

104 
	#PU_WHITE_BALANCE_TEMPERATURE_CONTROL_RES
 0x03E8

	)

105 
	#PU_WHITE_BALANCE_TEMPERATURE_CONTROL_DEF
 0x16A8

	)

107 
	#PU_HUE_AUTO_CONTROL_DEF
 0x01

	)

109 
	#PU_WHITE_BALANCE_TEMPERATURE_AUTO_CONTROL_DEF
 0x01

	)

112 
	#PROBE_DEFAULT_bmHöt
 0x0000

	)

113 
	#PROBE_DEFAULT_bF‹m©Index
 0x01

	)

114 
	#PROBE_DEFAULT_bFømeIndex
 0x01

	)

115 
	#PROBE_DEFAULT_dwFømeI¡îvÆ
 0x0007A120

	)

116 
	#PROBE_DEFAULT_wKeyFømeR©e
 0x0001

	)

117 
	#PROBE_DEFAULT_wPFømeR©e
 0x0000

	)

118 
	#PROBE_DEFAULT_wCompQuÆôy
 0x0000

	)

119 
	#PROBE_DEFAULT_wCompWödowSize
 0x0000

	)

120 
	#PROBE_DEFAULT_wDñay
 0x000

	)

122 
	#PROBE_DEFAULT_dwMaxVideoFømeSize
 0x9600C

	)

123 
	#PROBE_DEFAULT_dwMaxPaylﬂdTøns„rSize
 0x9600C

	)

125 
	#PROBE_DEFAULT_dwClockFªquícy
 0x00000000

	)

126 
	#PROBE_DEFAULT_bmFømögInfo
 0x00

	)

127 
	#PROBE_DEFAULT_bPª„ªdVîsi⁄
 0x00

	)

128 
	#PROBE_DEFAULT_bMöVîsi⁄
 0x00

	)

129 
	#PROBE_DEFAULT_bMaxVîsi⁄
 0x00

	)

132 
	#STILL_PROBE_DEFAULT_bF‹m©Index
 0x01

	)

133 
	#STILL_PROBE_DEFAULT_bFømeIndex
 0x01

	)

134 
	#STILL_PROBE_DEFAULT_bCom¥essi⁄Index
 0x00

	)

135 
	#STILL_PROBE_DEFAULT_dwMaxVideoFømeSize
 0x96000

	)

136 
	#STILL_PROBE_DEFAULT_dwMaxPayLﬂdTøns„rSize
 0x96000

	)

139 
	#STILL_IMAGE_NORMAL_OPERATION
 0x00

	)

140 
	#STILL_IMAGE_TRANSMIT
 0x01

	)

141 
	#STILL_IMAGE_TRANSMIT_VIA_DIDICATED
 0x02

	)

142 
	#STILL_IMAGE_TRANSMISSION_ABORT
 0x03

	)

144 
	#START_VIDEO_FRAME_INDEX
 0

	)

146 
	$__TMS_STRUCTNAME
(
PROCESSING_UNIT
)

148 
u16
 
wBackLightCom≥nßti⁄
;

149 
u16
 
wBrighäess
;

150 
u16
 
wC⁄åa°
;

151 
u8
 
bPowîLöeFªquícy
;

152 
u16
 
wHue
;

153 
u16
 
wS©uøti⁄
;

154 
u16
 
wSh¨≤ess
;

155 
u16
 
wGamma
;

156 
u16
 
wWhôeBÆ™˚Tem≥øtuª
;

157 
u8
 
bHueAuto
;

158 
u8
 
bWhôeBÆ™˚Tem≥øtuªAuto
;

159 
	}
};

161 
	$__TMS_STRUCTNAME
(
PROBE_COMMIT
)

163 
u16
 
bmHöt
;

164 
u8
 
bF‹m©Index
;

165 
u8
 
bFømeIndex
;

166 
u32
 
dwFømeI¡îvÆ
;

167 
u16
 
wKeyFømeR©e
;

168 
u16
 
wPFømeR©e
;

169 
u16
 
wCompQuÆôy
;

170 
u16
 
wCompWödowSize
;

171 
u16
 
wDñay
;

172 
u32
 
dwMaxVideoFømeSize
;

173 
u32
 
dwMaxPaylﬂdTøns„rSize
;

174 
u32
 
dwClockFªquícy
;

175 
u8
 
bmFømögInfo
;

176 
u8
 
bPª„ªdVîsi⁄
;

177 
u8
 
bMöVîsi⁄
;

178 
u8
 
bMaxVîsi⁄
;

179 
	}
};

181 
	$__TMS_STRUCTNAME
(
STILL_PROBE_COMMIT
)

183 
u8
 
bF‹m©Index
;

184 
u8
 
bFømeIndex
;

185 
u8
 
bCom¥essi⁄Index
;

186 
u32
 
dwMaxVideoFømeSize
;

187 
u32
 
dwMaxPaylﬂdTøns„rSize
;

188 
	}
};

190 
	$__TMS_STRUCTNAME
(
VIDEODEMO_CONTEXT
)

192 
__TMS_UPROTO_VIDEO
 * 
pVideo
;

193 
__TMS_UPLATFORM
 * 
pPœtf‹m
;

195 
__TMS_VOID
 * 
pAµC⁄ãxt
;

198 
__TMS_UPROTO_VIDEO_STREAM_HANDLE
 
hVideoIn
;

199 
__TMS_UPROTO_VIDEO_STREAM_HANDLE
 
hVideoOut
;

201 
u32
 
wVideoInMaxPackëSize
;

202 
u32
 
wVideoOutMaxPackëSize
;

204 
u16
 
wTøn•‹tHódîSize
;

205 
u16
 
wISOPackëNumbî
;

207 
__TMS_BOOL
 
fI≈utA˘iv©e
;

208 
__TMS_BOOL
 
fOuçutA˘iv©e
;

210 
__TMS_VIDEODEMO_BUFFER_HDR
 * 
pRódBuf„rHdr
;

211 
u16
 
nRódBuf„rHdr
;

213 
__TMS_VIDEODEMO_BUFFER_HDR
 * 
pWrôeBuf„rHdr
;

214 
u16
 
nWrôeBuf„rHdr
;

217 
__TMS_PROCESSING_UNIT
 
ProcUnôCur
;

220 
__TMS_PROBE_COMMIT
 
ProbeCur
;

223 
__TMS_PROBE_COMMIT
 
ProbeMö
;

226 
__TMS_PROBE_COMMIT
 
ProbeMax
;

229 
__TMS_PROBE_COMMIT
 
ProbeDef
;

232 
__TMS_PROBE_COMMIT
 
CommôCur
;

235 
__TMS_PROBE_COMMIT
 
CommôMö
;

238 
__TMS_PROBE_COMMIT
 
CommôMax
;

241 
__TMS_PROBE_COMMIT
 
CommôDef
;

244 
__TMS_STILL_PROBE_COMMIT
 
StûlProbeCur
;

247 
__TMS_STILL_PROBE_COMMIT
 
StûlCommôCur
;

249 
u8
 
bStûlTriggî
;

250 
u8
 
nVideoFømeIndex
;

253 
__TMS_UCALLBACKCOMPLETION
 
InôCom∂ëi⁄
;

255 
__TMS_UCALLBACKCOMPLETION
 
SëupCom∂ëi⁄
;

256 
__TMS_UPROTO_VIDEO_CONTROL_REQUEST
 
C⁄åﬁReque°
;

257 
__TMS_UPROTO_VIDEO_STREAM_HANDLE
 
hSåómReque°
;

258 
__TMS_UPROTO_VIDEO_STREAM_REQUEST
 
SåómReque°
;

259 
	}
};

261 
	$__TMS_STRUCTNAME
(
VIDEODEMO_BUFFER_HDR
)

263 
__TMS_VIDEODEMO_BUFFER_HDR
 * 
pNext
;

264 
__TMS_VIDEODEMO_BUFFER_HDR
 * 
pLa°
;

265 
u32
 
nBuf„r
;

266 
u32
 
nD©a
;

267 
	}
};

269 
	$__TMS_STRUCTNAME
(
VIDEODEMO_BUFFER
)

271 
__TMS_VIDEODEMO_BUFFER_HDR
 
Hdr
;

272 
u8
 
pBuf„r
[1];

273 
	}
};

277 
__TMS_CONST
 
__TMS_UPROTO_VIDEO_CONFIG
 
gk_VideoDemo_PrŸoC⁄fig
;

278 
__TMS_CONST
 
__TMS_UPROTO_VIDEO_OUTSWITCH
 
gk_VideoDemo_OutSwôch
;

280 
__TMS_CONST
 
__TMS_TEXT
 * __TMS_CONST 
gk_VideoDemo_Eº‹Name
[];

281 
__TMS_CONST
 
__TMS_TEXT
 * __TMS_CONST 
gk_VideoDemo_SètusName
[];

286 
__TMS_BEGIN_DECLS


288 
__TMS_VIDEODEMO_CONTEXT
 *

289 
VideoDemo_Uncom¥es£dDemoInô
(
__TMS_UPLATFORM
 * 
pPœtf‹m
,

290 
__TMS_USBPUMP_OBJECT_HEADER
 * 
pVideoFun˘i⁄
);

292 
__TMS_VOID
 
VideoDemo_WrôeO√Føme
(
__TMS_VIDEODEMO_CONTEXT
 * 
pVideoDemoCtx
,

293 
u8
 * 
pD©a
, 
u32
 
wNumbîOfByã
, u32 
dwPTS
, 
u16
 
wSofCou¡î
);

295 
__TMS_VOID
 
VideoDemo_Sèπ
(
__TMS_VIDEODEMO_CONTEXT
 * 
pVideoDemoCtx
);

297 
__TMS_UPROTO_VIDEO_CONTROL_STATUS_EVENT_CB_FN
 
	gVideoDemo_C⁄åﬁSètusEvít
;

298 
__TMS_UPROTO_VIDEO_CONTROL_REQUEST_CB_FN
 
	gVideoDemo_Pro˚ssögUnôEvít
;

299 
__TMS_UPROTO_VIDEO_STREAM_STATUS_EVENT_CB_FN
 
	gVideoDemo_SåómSètusEvít
;

300 
__TMS_UPROTO_VIDEO_STREAM_REQUEST_CB_FN
 
	gVideoDemo_SåómI¡îÁ˚Evít
;

302 
	g__TMS_END_DECLS


	@Demo/DisparityMap/myriad/leon/videodemo_appinit.c

11 #i‚de‡
_USBPUMP_H_


12 
	~"usbpump.h
"

15 
	~"videodemo.h
"

17 
	~"¥Ÿovideo.h
"

18 
	~"usb≠pöô.h
"

19 
	~"usb¥Ÿoöô.h
"

20 
	~"usbvideo11.h
"

25 
	#EXTERN_USBRC_ROOTTABLE
(
NAME
Ë\

	)

26 
CONST
 
USBRC_ROOTTABLE
 
NAME
;

28 #ifde‡
DESCRIPTOR_ROOT_0


29 
	$EXTERN_USBRC_ROOTTABLE
(
DESCRIPTOR_ROOT_0
)

31 #ifde‡
DESCRIPTOR_ROOT_1


32 
	$EXTERN_USBRC_ROOTTABLE
(
DESCRIPTOR_ROOT_1
)

34 #ifde‡
DESCRIPTOR_ROOT_2


35 
	$EXTERN_USBRC_ROOTTABLE
(
DESCRIPTOR_ROOT_2
)

37 #ifde‡
DESCRIPTOR_ROOT_3


38 
	$EXTERN_USBRC_ROOTTABLE
(
DESCRIPTOR_ROOT_3
)

40 #ifde‡
DESCRIPTOR_ROOT_4


41 
	$EXTERN_USBRC_ROOTTABLE
(
DESCRIPTOR_ROOT_4
)

43 #ifde‡
DESCRIPTOR_ROOT_5


44 
	$EXTERN_USBRC_ROOTTABLE
(
DESCRIPTOR_ROOT_5
)

46 #ifde‡
DESCRIPTOR_ROOT_6


47 
	$EXTERN_USBRC_ROOTTABLE
(
DESCRIPTOR_ROOT_6
)

49 #ifde‡
DESCRIPTOR_ROOT_7


50 
	$EXTERN_USBRC_ROOTTABLE
(
DESCRIPTOR_ROOT_7
)

52 #ifde‡
DESCRIPTOR_ROOT_8


53 
	$EXTERN_USBRC_ROOTTABLE
(
DESCRIPTOR_ROOT_8
)

55 #ifde‡
DESCRIPTOR_ROOT_9


56 
	$EXTERN_USBRC_ROOTTABLE
(
DESCRIPTOR_ROOT_9
)

58 #i‚def 
DESCRIPTOR_ROOT_0


59 #i‚de‡
DESCRIPTOR_ROOT_1


60 #i‚de‡
DESCRIPTOR_ROOT_2


61 #i‚de‡
DESCRIPTOR_ROOT_3


62 #i‚de‡
DESCRIPTOR_ROOT_4


63 #i‚de‡
DESCRIPTOR_ROOT_5


64 #i‚de‡
DESCRIPTOR_ROOT_6


65 #i‚de‡
DESCRIPTOR_ROOT_7


66 #i‚de‡
DESCRIPTOR_ROOT_8


67 #i‚de‡
DESCRIPTOR_ROOT_9


68 
	$EXTERN_USBRC_ROOTTABLE
(
gk_UsbDes¸ùt‹RoŸ
)

84 
CONST
 
USBRC_ROOTTABLE
 
gk_UsbDes¸ùt‹RoŸ
;

85 
	`VideoDemo_Clõ¡Cª©e
(
UPLATFORM
 * 
pPœtf‹m
);

89 
USB_DATAPUMP_APPLICATION_INIT_VECTOR_FINISH_FN
 
VideoDemoI_AµInô_Ve˘‹Föish
;

93 
CONST
 
USBPUMP_PROTOCOL_INIT_NODE
 
InôNodes
[] =

95 
	`USBPUMP_PROTOCOL_INIT_NODE_INIT_V2
( \

97  
USB_bI¡îÁ˚Cœss_Video
, \

98  
USB_bI¡îÁ˚SubCœss_VideoC⁄åﬁ
, \

102  
USBPUMP_PROTOCOL_INIT_FLAG_AUTO_ADD
, \

103  
UsbPumpVideo_PrŸocﬁProbe
, \

104  
UsbPumpVideo_PrŸocﬁCª©e
, \

105  
NULL
, \

106  
UsbPumpVideo_PrŸocﬁAddI¡îÁ˚
, \

107  &
gk_VideoDemo_PrŸoC⁄fig
 \

109 
	}
};

111 
CONST
 
USBPUMP_PROTOCOL_INIT_NODE_VECTOR
 
	gInôHódî
 =

112 
USBPUMP_PROTOCOL_INIT_NODE_VECTOR_INIT_V1
(

113  
InôNodes
,

114  
NULL
,

115  
NULL


122 
	#INIT_VECTOR_NODE
(
a__UsbDes¸ùt‹RoŸ
Ë\

	)

123 
USB_DATAPUMP_APPLICATION_INIT_VECTOR_INIT_V2
( \

124  &
a__UsbDes¸ùt‹RoŸ
, \

125  
UDMASK_ERRORS
 | 
UDMASK_PROTO
, \

126  
NULL
, \

128 
UsbPump_GíîicAµliˇti⁄Inô_PrŸocﬁs
, \

129  &
InôHódî
 \

132 
CONST
 
USB_DATAPUMP_APPLICATION_INIT_VECTOR
 
	gUsbPumpAµliˇti⁄InôVe˘‹
[] =

134 #ifde‡
DESCRIPTOR_ROOT_0


135 
INIT_VECTOR_NODE
(
DESCRIPTOR_ROOT_0
),

137 #ifde‡
DESCRIPTOR_ROOT_1


138 
INIT_VECTOR_NODE
(
DESCRIPTOR_ROOT_1
),

140 #ifde‡
DESCRIPTOR_ROOT_2


141 
INIT_VECTOR_NODE
(
DESCRIPTOR_ROOT_2
),

143 #ifde‡
DESCRIPTOR_ROOT_3


144 
INIT_VECTOR_NODE
(
DESCRIPTOR_ROOT_3
),

146 #ifde‡
DESCRIPTOR_ROOT_4


147 
INIT_VECTOR_NODE
(
DESCRIPTOR_ROOT_4
),

149 #ifde‡
DESCRIPTOR_ROOT_5


150 
INIT_VECTOR_NODE
(
DESCRIPTOR_ROOT_5
),

152 #ifde‡
DESCRIPTOR_ROOT_6


153 
INIT_VECTOR_NODE
(
DESCRIPTOR_ROOT_6
),

155 #ifde‡
DESCRIPTOR_ROOT_7


156 
INIT_VECTOR_NODE
(
DESCRIPTOR_ROOT_7
),

158 #ifde‡
DESCRIPTOR_ROOT_8


159 
INIT_VECTOR_NODE
(
DESCRIPTOR_ROOT_8
),

161 #ifde‡
DESCRIPTOR_ROOT_9


162 
INIT_VECTOR_NODE
(
DESCRIPTOR_ROOT_9
),

164 #i‚def 
DESCRIPTOR_ROOT_0


165 #i‚de‡
DESCRIPTOR_ROOT_1


166 #i‚de‡
DESCRIPTOR_ROOT_2


167 #i‚de‡
DESCRIPTOR_ROOT_3


168 #i‚de‡
DESCRIPTOR_ROOT_4


169 #i‚de‡
DESCRIPTOR_ROOT_5


170 #i‚de‡
DESCRIPTOR_ROOT_6


171 #i‚de‡
DESCRIPTOR_ROOT_7


172 #i‚de‡
DESCRIPTOR_ROOT_8


173 #i‚de‡
DESCRIPTOR_ROOT_9


174 
INIT_VECTOR_NODE
(
gk_UsbDes¸ùt‹RoŸ
)

187 
CONST
 
USB_DATAPUMP_APPLICATION_INIT_VECTOR_HDR
 
	ggk_UsbPumpAµliˇti⁄InôHdr
 =

188 
USB_DATAPUMP_APPLICATION_INIT_VECTOR_HDR_INIT_V1
(

189 
UsbPumpAµliˇti⁄InôVe˘‹
,

190  
NULL
,

191  
VideoDemoI_AµInô_Ve˘‹Föish


200 
	$VideoDemoI_AµInô_Ve˘‹Föish
(

201 
UPLATFORM
 *
pPœtf‹m
,

202 
CONST
 
USB_DATAPUMP_APPLICATION_INIT_VECTOR_HDR
 *
pVecHdr
,

203 *
pAµInôC⁄ãxt
,

204 
UINT
 
nP‹ts
)

206 
	`USBPUMP_UNREFERENCED_PARAMETER
(
pVecHdr
);

207 
	`USBPUMP_UNREFERENCED_PARAMETER
(
pAµInôC⁄ãxt
);

208 
	`USBPUMP_UNREFERENCED_PARAMETER
(
nP‹ts
);

210 
	`VideoDemo_Clõ¡Cª©e
(
pPœtf‹m
);

211 
	}
}

	@Demo/DisparityMap/myriad/leon/videodemo_create.c

1 
	~"videodemo.h
"

3 
	~"usbpum∑pi.h
"

4 
	~"usbpumpobje˘.h
"

5 
	~"usbpumpobje˘≠i.h
"

6 
	~"usbpum¥oŸ.h
"

7 
	~"u∂©f‹m.h
"

9 
VideoDemo_Clõ¡Cª©e
(
UPLATFORM
 * 
pPœtf‹m
);

11 
VIDEODEMO_CONTEXT
 * 
	gg_pVidemoDemoC⁄ãxt
;

30 
	$VideoDemo_Clõ¡Cª©e
(
UPLATFORM
 * 
pPœtf‹m
)

32 
USBPUMP_OBJECT_ROOT
 * 
CONST
 
pPumpRoŸ
 =

33 
	`UsbPumpObje˘_GëRoŸ
(&
pPœtf‹m
->
upf_Hódî
);

35 
USBPUMP_OBJECT_HEADER
 * 
pFun˘i⁄Obje˘
 = 
NULL
;

40 (
pFun˘i⁄Obje˘
 = 
	`UsbPumpObje˘_Enumî©eM©chögNames
(

41 &
pPumpRoŸ
->
Hódî
,

42 
pFun˘i⁄Obje˘
,

43 
USBPUMP_OBJECT_NAME_ENUM_VIDEO


44 )Ë!
NULL
)

46 
g_pVidemoDemoC⁄ãxt
 = 
	`VideoDemo_Uncom¥es£dDemoInô
(

47 
pPœtf‹m
,

48 
pFun˘i⁄Obje˘


51 
	}
}

	@Demo/DisparityMap/myriad/leon/videodemo_init.c

12 
	~<°dlib.h
>

13 
	~"videodemo.h
"

14 
	~"udevi˚.h
"

15 
	~"¥Ÿovideo.h
"

16 
	~"video˛õ¡lib.h
"

17 
	~"u∂©f‹m≠i.h
"

18 
	~"usbpumpdebug.h
"

19 
	~"usbpum∂i°.h
"

20 
	~"usbpump_ty≥s.h
"

21 
	~"uisobufhdr.h
"

22 
	~"usbpum∂ib.h
"

23 
	~"usbpum∑pi.h
"

24 
	~"CamîaC⁄fig.h
"

25 
	~"mv_ty≥s.h
"

26 
	~<°dio.h
>

27 
	~<OsDrvTimî.h
>

28 
	~<swcLe⁄Utûs.h
>

29 
	~<DrvLe⁄L2C.h
>

30 
	~<Le⁄IPCApi.h
>

31 
	~"DrvIcb.h
"

35 
	#MSG_QUEUE_SIZE
 500

	)

36 
	#MSG_SIZE
 1

	)

37 
uöt32_t
 
__©åibuã__
((
£˘i⁄
(".cmx_dúe˘.d©a"))Ë
	gª˚ivedMsg
[
MSG_QUEUE_SIZE
 * 
MSG_SIZE
];

41 
À⁄IPCCh™√l_t
 
Ãt_LRTtoLOSCh™√l
;

42 
uöt32_t
 
__©åibuã__
((
£˘i⁄
(".cmx_dúe˘.d©a"))Ë
	gmesßgePoﬁ
[
MSG_QUEUE_SIZE
 * 
MSG_SIZE
];

45 
u32
 
Ãt_usbFømeCå
;

46 
u32
 
Ãt_toSíd
;

47 
u32
 *
	gpToSíd
;

48 vﬁ©ûê
u32
 
	gusbFømeCå_¥ev
 = 1;

49 
u8
* 
Ãt_usbBufPå
[
MAX_USED_BUF
];

50 
u64
 
	gticks
;

52 
__TMS_TYPE_DEF_STRUCT
(
UNCOMPRESSED_APP_CONTEXT
);

54 
	$__TMS_STRUCTNAME
(
UNCOMPRESSED_APP_CONTEXT
)

56 
VIDEODEMO_CONTEXT
 * 
pVideoDemoCtx
;

57 
UINT32
 
VideoBufSize
;

61 
UINT32
 
dwPTS
;

65 
UINT16
 
wSofCou¡î
;

66 
UINT8
 
HódîToggÀ
;

67 
UINT32
 
wVideoByãIndex
;

68 
UINT32
 
wNumbîOfByã
;

69 
UCALLBACKCOMPLETION
 
WrôeFømeCom∂ëi⁄
;

70 
	}
};

77 
CONST
 
UPROTO_VIDEO_CONFIG
 
	ggk_VideoDemo_PrŸoC⁄fig
 =

78 
UPROTO_VIDEO_CONFIG_INIT_V1
(

79 &
gk_UsbPumpVideo_InSwôch
,

80 
VIDEODEMO_CONFIG_CONTROLBUFFER_SIZE
,

81 
VIDEODEMO_CONFIG_MAXQUEUED_BUFFER
,

87 
CONST
 
TEXT
 * CONST 
	ggk_VideoDemo_Eº‹Name
[] = 
UPROTO_VIDEO_ERROR__INIT
;

89 
CONST
 
TEXT
 * CONST 
	ggk_VideoDemo_SètusName
[] = 
UPROTO_VIDEO_STATUS__INIT
;

94 
UPROTO_VIDEO_CONTROL_OPEN_CB_FN
 
	gVideoClõ¡LibI_C⁄åﬁO≥n_CÆlback
;

95 
UPROTO_VIDEO_STREAM_OPEN_CB_FN
 
	gVideoClõ¡LibI_SåómO≥n_CÆlback
;

96 
UPROTO_VIDEO_STREAM_GET_INFO_CB_FN
 
	gVideoClõ¡LibI_SåómGëInfo_CÆlback
;

97 
UPROTO_VIDEO_STREAM_CLOSE_CB_FN
 
	gVideoClõ¡LibI_SåómClo£_D⁄e
;

98 
UPROTO_VIDEO_STREAM_WRITE_CB_FN
 
	gVideoDemo_WrôeO√Føme_D⁄e
;

100 
CALLBACKFN
 
	gVideoClõ¡LibI_SåómO≥n_Sync
;

101 
CALLBACKFN
 
	gVideoDemoI_SídAnŸhîFøme
;

127 
VIDEODEMO_CONTEXT
 * 
	$VideoDemo_Uncom¥es£dDemoInô
(

128 
UPLATFORM
 *
pPœtf‹m
,

129 
USBPUMP_OBJECT_HEADER
 *
pFun˘i⁄Obje˘
)

131 
PUNCOMPRESSED_APP_CONTEXT
 
pAµC⁄ãxt
;

132 
VIDEODEMO_CONTEXT
 *
pVideoDemoCtx
;

134 
UPROTO_VIDEO
 * 
CONST
 
pVideo
 = 
	`__TMS_CONTAINER_OF
(

135 
pFun˘i⁄Obje˘
,

136 
UPROTO_VIDEO
,

137 
Obje˘Hódî


142 
pAµC⁄ãxt
 = 
	`UsbPumpPœtf‹m_MÆlocZîo
(
pPœtf‹m
, (*pAppContext));

144 i‡(
pAµC⁄ãxt
 =
NULL
)

146 
	`TTUSB_OBJPRINTF
((&
pVideo
->
Obje˘Hódî
, 
UDMASK_ERRORS
,

151  
NULL
;

156 
pVideoDemoCtx
 = 
	`UsbPumpPœtf‹m_MÆlocZîo
(
pPœtf‹m
, (*pVideoDemoCtx));

158 i‡(
pVideoDemoCtx
 =
NULL
)

160 
	`UsbPumpPœtf‹m_Fªe
(

161 
pPœtf‹m
,

162 
pAµC⁄ãxt
,

163 (*
pAµC⁄ãxt
)

166 
	`TTUSB_OBJPRINTF
((&
pVideo
->
Obje˘Hódî
, 
UDMASK_ERRORS
,

170  
NULL
;

173 
pAµC⁄ãxt
->
pVideoDemoCtx
 =ÖVideoDemoCtx;

174 
pAµC⁄ãxt
->
dwPTS
 = 0;

175 
pAµC⁄ãxt
->
wSofCou¡î
 = 0;

177 
pVideoDemoCtx
->
pVideo
 =ÖVideo;

178 
pVideoDemoCtx
->
pPœtf‹m
 =ÖPlatform;

179 
pVideoDemoCtx
->
pAµC⁄ãxt
 =ÖAppContext;

180 
pVideoDemoCtx
->
hVideoIn
 = 
UPROTO_VIDEO_STREAM_INVALID_HANDLE
;

181 
pVideoDemoCtx
->
hVideoOut
 = 
UPROTO_VIDEO_STREAM_INVALID_HANDLE
;

184 
pVideoDemoCtx
->
ProcUnôCur
.
wBackLightCom≥nßti⁄
 =

185 
PU_BACKLIGHT_COMPENSATION_CONTROL_DEF
;

186 
pVideoDemoCtx
->
ProcUnôCur
.
wBrighäess
 =

187 
PU_BRIGHTNESS_CONTROL_DEF
;

188 
pVideoDemoCtx
->
ProcUnôCur
.
wC⁄åa°
 =

189 
PU_CONTRAST_CONTROL_DEF
;

190 
pVideoDemoCtx
->
ProcUnôCur
.
bPowîLöeFªquícy
 =

191 
PU_POWER_LINE_FREQUENCY_CONTROL_DEF
;

192 
pVideoDemoCtx
->
ProcUnôCur
.
wHue
 =

193 
PU_HUE_CONTROL_DEF
;

194 
pVideoDemoCtx
->
ProcUnôCur
.
wS©uøti⁄
 =

195 
PU_SATURATION_CONTROL_DEF
;

196 
pVideoDemoCtx
->
ProcUnôCur
.
wSh¨≤ess
 =

197 
PU_SHARPNESS_CONTROL_DEF
;

198 
pVideoDemoCtx
->
ProcUnôCur
.
wGamma
 =

199 
PU_GAMMA_CONTROL_DEF
;

200 
pVideoDemoCtx
->
ProcUnôCur
.
wWhôeBÆ™˚Tem≥øtuª
 =

201 
PU_WHITE_BALANCE_TEMPERATURE_CONTROL_DEF
;

202 
pVideoDemoCtx
->
ProcUnôCur
.
bHueAuto
 =

203 
PU_HUE_AUTO_CONTROL_DEF
;

204 
pVideoDemoCtx
->
ProcUnôCur
.
bWhôeBÆ™˚Tem≥øtuªAuto
 =

205 
PU_WHITE_BALANCE_TEMPERATURE_AUTO_CONTROL_DEF
;

208 
pVideoDemoCtx
->
ProbeCur
.
bmHöt
 =

209 
pVideoDemoCtx
->
CommôCur
.
bmHöt
 =

210 
pVideoDemoCtx
->
ProbeMö
.
bmHöt
 =

211 
pVideoDemoCtx
->
CommôMö
.
bmHöt
 =

212 
pVideoDemoCtx
->
ProbeMax
.
bmHöt
 =

213 
pVideoDemoCtx
->
CommôMax
.
bmHöt
 =

214 
pVideoDemoCtx
->
ProbeDef
.
bmHöt
 =

215 
pVideoDemoCtx
->
CommôDef
.
bmHöt
 =

216 
PROBE_DEFAULT_bmHöt
;

217 
pVideoDemoCtx
->
ProbeCur
.
bF‹m©Index
 =

218 
pVideoDemoCtx
->
CommôCur
.
bF‹m©Index
 =

219 
pVideoDemoCtx
->
ProbeMö
.
bF‹m©Index
 =

220 
pVideoDemoCtx
->
CommôMö
.
bF‹m©Index
 =

221 
pVideoDemoCtx
->
ProbeMax
.
bF‹m©Index
 =

222 
pVideoDemoCtx
->
CommôMax
.
bF‹m©Index
 =

223 
pVideoDemoCtx
->
ProbeDef
.
bF‹m©Index
 =

224 
pVideoDemoCtx
->
CommôDef
.
bF‹m©Index
 =

225 
PROBE_DEFAULT_bF‹m©Index
;

226 
pVideoDemoCtx
->
ProbeCur
.
bFømeIndex
 =

227 
pVideoDemoCtx
->
CommôCur
.
bFømeIndex
 =

228 
pVideoDemoCtx
->
ProbeMö
.
bFømeIndex
 =

229 
pVideoDemoCtx
->
CommôMö
.
bFømeIndex
 =

230 
pVideoDemoCtx
->
ProbeMax
.
bFømeIndex
 =

231 
pVideoDemoCtx
->
CommôMax
.
bFømeIndex
 =

232 
pVideoDemoCtx
->
ProbeDef
.
bFømeIndex
 =

233 
pVideoDemoCtx
->
CommôDef
.
bFømeIndex
 =

234 
PROBE_DEFAULT_bFømeIndex
;

235 
pVideoDemoCtx
->
ProbeCur
.
dwFømeI¡îvÆ
 =

236 
pVideoDemoCtx
->
CommôCur
.
dwFømeI¡îvÆ
 =

237 
pVideoDemoCtx
->
ProbeMö
.
dwFømeI¡îvÆ
 =

238 
pVideoDemoCtx
->
CommôMö
.
dwFømeI¡îvÆ
 =

239 
pVideoDemoCtx
->
ProbeMax
.
dwFømeI¡îvÆ
 =

240 
pVideoDemoCtx
->
CommôMax
.
dwFømeI¡îvÆ
 =

241 
pVideoDemoCtx
->
ProbeDef
.
dwFømeI¡îvÆ
 =

242 
pVideoDemoCtx
->
CommôDef
.
dwFømeI¡îvÆ
 =

243 
PROBE_DEFAULT_dwFømeI¡îvÆ
;

244 
pVideoDemoCtx
->
ProbeCur
.
wKeyFømeR©e
 =

245 
pVideoDemoCtx
->
CommôCur
.
wKeyFømeR©e
 =

246 
pVideoDemoCtx
->
ProbeMö
.
wKeyFømeR©e
 =

247 
pVideoDemoCtx
->
CommôMö
.
wKeyFømeR©e
 =

248 
pVideoDemoCtx
->
ProbeMax
.
wKeyFømeR©e
 =

249 
pVideoDemoCtx
->
CommôMax
.
wKeyFømeR©e
 =

250 
pVideoDemoCtx
->
ProbeDef
.
wKeyFømeR©e
 =

251 
pVideoDemoCtx
->
CommôDef
.
wKeyFømeR©e
 =

252 
PROBE_DEFAULT_wKeyFømeR©e
;

253 
pVideoDemoCtx
->
ProbeCur
.
wPFømeR©e
 =

254 
pVideoDemoCtx
->
CommôCur
.
wPFømeR©e
 =

255 
pVideoDemoCtx
->
ProbeMö
.
wPFømeR©e
 =

256 
pVideoDemoCtx
->
CommôMö
.
wPFømeR©e
 =

257 
pVideoDemoCtx
->
ProbeMax
.
wPFømeR©e
 =

258 
pVideoDemoCtx
->
CommôMax
.
wPFømeR©e
 =

259 
pVideoDemoCtx
->
ProbeDef
.
wPFømeR©e
 =

260 
pVideoDemoCtx
->
CommôDef
.
wPFømeR©e
 =

261 
PROBE_DEFAULT_wPFømeR©e
;

262 
pVideoDemoCtx
->
ProbeCur
.
wCompQuÆôy
 =

263 
pVideoDemoCtx
->
CommôCur
.
wCompQuÆôy
 =

264 
pVideoDemoCtx
->
ProbeMö
.
wCompQuÆôy
 =

265 
pVideoDemoCtx
->
CommôMö
.
wCompQuÆôy
 =

266 
pVideoDemoCtx
->
ProbeMax
.
wCompQuÆôy
 =

267 
pVideoDemoCtx
->
CommôMax
.
wCompQuÆôy
 =

268 
pVideoDemoCtx
->
ProbeDef
.
wCompQuÆôy
 =

269 
pVideoDemoCtx
->
CommôDef
.
wCompQuÆôy
 =

270 
PROBE_DEFAULT_wCompQuÆôy
;

271 
pVideoDemoCtx
->
ProbeCur
.
wCompWödowSize
 =

272 
pVideoDemoCtx
->
CommôCur
.
wCompWödowSize
 =

273 
pVideoDemoCtx
->
ProbeMö
.
wCompWödowSize
 =

274 
pVideoDemoCtx
->
CommôMö
.
wCompWödowSize
 =

275 
pVideoDemoCtx
->
ProbeMax
.
wCompWödowSize
 =

276 
pVideoDemoCtx
->
CommôMax
.
wCompWödowSize
 =

277 
pVideoDemoCtx
->
ProbeDef
.
wCompWödowSize
 =

278 
pVideoDemoCtx
->
CommôDef
.
wCompWödowSize
 =

279 
PROBE_DEFAULT_wCompWödowSize
;

280 
pVideoDemoCtx
->
ProbeCur
.
wDñay
 =

281 
pVideoDemoCtx
->
CommôCur
.
wDñay
 =

282 
pVideoDemoCtx
->
ProbeMö
.
wDñay
 =

283 
pVideoDemoCtx
->
CommôMö
.
wDñay
 =

284 
pVideoDemoCtx
->
ProbeMax
.
wDñay
 =

285 
pVideoDemoCtx
->
CommôMax
.
wDñay
 =

286 
pVideoDemoCtx
->
ProbeDef
.
wDñay
 =

287 
pVideoDemoCtx
->
CommôDef
.
wDñay
 =

288 
PROBE_DEFAULT_wDñay
;

289 
pVideoDemoCtx
->
ProbeCur
.
dwMaxVideoFømeSize
 =

290 
pVideoDemoCtx
->
CommôCur
.
dwMaxVideoFømeSize
 =

291 
pVideoDemoCtx
->
ProbeMö
.
dwMaxVideoFømeSize
 =

292 
pVideoDemoCtx
->
CommôMö
.
dwMaxVideoFømeSize
 =

293 
pVideoDemoCtx
->
ProbeMax
.
dwMaxVideoFømeSize
 =

294 
pVideoDemoCtx
->
CommôMax
.
dwMaxVideoFømeSize
 =

295 
pVideoDemoCtx
->
ProbeDef
.
dwMaxVideoFømeSize
 =

296 
pVideoDemoCtx
->
CommôDef
.
dwMaxVideoFømeSize
 =

297 
PROBE_DEFAULT_dwMaxVideoFømeSize
;

298 
pVideoDemoCtx
->
ProbeCur
.
dwMaxPaylﬂdTøns„rSize
 =

299 
pVideoDemoCtx
->
CommôCur
.
dwMaxPaylﬂdTøns„rSize
 =

300 
pVideoDemoCtx
->
ProbeMö
.
dwMaxPaylﬂdTøns„rSize
 =

301 
pVideoDemoCtx
->
CommôMö
.
dwMaxPaylﬂdTøns„rSize
 =

302 
pVideoDemoCtx
->
ProbeMax
.
dwMaxPaylﬂdTøns„rSize
 =

303 
pVideoDemoCtx
->
CommôMax
.
dwMaxPaylﬂdTøns„rSize
 =

304 
pVideoDemoCtx
->
ProbeDef
.
dwMaxPaylﬂdTøns„rSize
 =

305 
pVideoDemoCtx
->
CommôDef
.
dwMaxPaylﬂdTøns„rSize
 =

306 
PROBE_DEFAULT_dwMaxPaylﬂdTøns„rSize
;

307 
pVideoDemoCtx
->
ProbeCur
.
dwClockFªquícy
 =

308 
pVideoDemoCtx
->
CommôCur
.
dwClockFªquícy
 =

309 
pVideoDemoCtx
->
ProbeMö
.
dwClockFªquícy
 =

310 
pVideoDemoCtx
->
CommôMö
.
dwClockFªquícy
 =

311 
pVideoDemoCtx
->
ProbeMax
.
dwClockFªquícy
 =

312 
pVideoDemoCtx
->
CommôMax
.
dwClockFªquícy
 =

313 
pVideoDemoCtx
->
ProbeDef
.
dwClockFªquícy
 =

314 
pVideoDemoCtx
->
CommôDef
.
dwClockFªquícy
 =

315 
PROBE_DEFAULT_dwClockFªquícy
;

316 
pVideoDemoCtx
->
ProbeCur
.
bmFømögInfo
 =

317 
pVideoDemoCtx
->
CommôCur
.
bmFømögInfo
 =

318 
pVideoDemoCtx
->
ProbeMö
.
bmFømögInfo
 =

319 
pVideoDemoCtx
->
CommôMö
.
bmFømögInfo
 =

320 
pVideoDemoCtx
->
ProbeMax
.
bmFømögInfo
 =

321 
pVideoDemoCtx
->
CommôMax
.
bmFømögInfo
 =

322 
pVideoDemoCtx
->
ProbeDef
.
bmFømögInfo
 =

323 
pVideoDemoCtx
->
CommôDef
.
bmFømögInfo
 =

324 
PROBE_DEFAULT_bmFømögInfo
;

325 
pVideoDemoCtx
->
ProbeCur
.
bPª„ªdVîsi⁄
 =

326 
pVideoDemoCtx
->
CommôCur
.
bPª„ªdVîsi⁄
 =

327 
pVideoDemoCtx
->
ProbeMö
.
bPª„ªdVîsi⁄
 =

328 
pVideoDemoCtx
->
CommôMö
.
bPª„ªdVîsi⁄
 =

329 
pVideoDemoCtx
->
ProbeMax
.
bPª„ªdVîsi⁄
 =

330 
pVideoDemoCtx
->
CommôMax
.
bPª„ªdVîsi⁄
 =

331 
pVideoDemoCtx
->
ProbeDef
.
bPª„ªdVîsi⁄
 =

332 
pVideoDemoCtx
->
CommôDef
.
bPª„ªdVîsi⁄
 =

333 
PROBE_DEFAULT_bPª„ªdVîsi⁄
;

334 
pVideoDemoCtx
->
ProbeCur
.
bMöVîsi⁄
 =

335 
pVideoDemoCtx
->
CommôCur
.
bMöVîsi⁄
 =

336 
pVideoDemoCtx
->
ProbeMö
.
bMöVîsi⁄
 =

337 
pVideoDemoCtx
->
CommôMö
.
bMöVîsi⁄
 =

338 
pVideoDemoCtx
->
ProbeMax
.
bMöVîsi⁄
 =

339 
pVideoDemoCtx
->
CommôMax
.
bMöVîsi⁄
 =

340 
pVideoDemoCtx
->
ProbeDef
.
bMöVîsi⁄
 =

341 
pVideoDemoCtx
->
CommôDef
.
bMöVîsi⁄
 =

342 
PROBE_DEFAULT_bMöVîsi⁄
;

343 
pVideoDemoCtx
->
ProbeCur
.
bMaxVîsi⁄
 =

344 
pVideoDemoCtx
->
CommôCur
.
bMaxVîsi⁄
 =

345 
pVideoDemoCtx
->
ProbeMö
.
bMaxVîsi⁄
 =

346 
pVideoDemoCtx
->
CommôMö
.
bMaxVîsi⁄
 =

347 
pVideoDemoCtx
->
ProbeMax
.
bMaxVîsi⁄
 =

348 
pVideoDemoCtx
->
CommôMax
.
bMaxVîsi⁄
 =

349 
pVideoDemoCtx
->
ProbeDef
.
bMaxVîsi⁄
 =

350 
pVideoDemoCtx
->
CommôDef
.
bMaxVîsi⁄
 =

351 
PROBE_DEFAULT_bMaxVîsi⁄
;

354 
pVideoDemoCtx
->
StûlProbeCur
.
bF‹m©Index
 =

355 
pVideoDemoCtx
->
StûlCommôCur
.
bF‹m©Index
 =

356 
STILL_PROBE_DEFAULT_bF‹m©Index
;

357 
pVideoDemoCtx
->
StûlProbeCur
.
bFømeIndex
 =

358 
pVideoDemoCtx
->
StûlCommôCur
.
bFømeIndex
 =

359 
STILL_PROBE_DEFAULT_bFømeIndex
;

360 
pVideoDemoCtx
->
StûlProbeCur
.
bCom¥essi⁄Index
 =

361 
pVideoDemoCtx
->
StûlCommôCur
.
bCom¥essi⁄Index
 =

362 
STILL_PROBE_DEFAULT_bCom¥essi⁄Index
;

363 
pVideoDemoCtx
->
StûlProbeCur
.
dwMaxVideoFømeSize
 =

364 
pVideoDemoCtx
->
StûlCommôCur
.
dwMaxVideoFømeSize
 =

365 
STILL_PROBE_DEFAULT_dwMaxVideoFømeSize
;

366 
pVideoDemoCtx
->
StûlProbeCur
.
dwMaxPaylﬂdTøns„rSize
 =

367 
pVideoDemoCtx
->
StûlCommôCur
.
dwMaxPaylﬂdTøns„rSize
 =

368 
STILL_PROBE_DEFAULT_dwMaxPayLﬂdTøns„rSize
;

370 
pVideoDemoCtx
->
bStûlTriggî
 = 
STILL_IMAGE_NORMAL_OPERATION
;

371 
pVideoDemoCtx
->
nVideoFømeIndex
 = 
START_VIDEO_FRAME_INDEX
;

374 
	`USBPUMP_CALLBACKCOMPLETION_INIT
(

375 &
pVideoDemoCtx
->
InôCom∂ëi⁄
,

376 
VideoClõ¡LibI_SåómO≥n_Sync
,

377 
NULL


380 
	`USBPUMP_CALLBACKCOMPLETION_INIT
(

381 &
pAµC⁄ãxt
->
WrôeFømeCom∂ëi⁄
,

382 
VideoDemoI_SídAnŸhîFøme
,

383 
NULL


386 
°©us
 = 
	`Le⁄IPCRxInô
(&
Ãt_LRTtoLOSCh™√l
, 
NULL
, 
IRQ_DYNAMIC_5
, 5);

387 i‡(
°©us
)

389 
	`¥ötf
("CouldÇŸ inôülizêLe⁄ IPC Rx. Eº‹: %d\n", 
°©us
);

392 
	`VideoClõ¡Lib_C⁄åﬁO≥n
(

393 
pVideoDemoCtx
->
pVideo
,

394 
VideoClõ¡LibI_C⁄åﬁO≥n_CÆlback
,

395 
pAµC⁄ãxt
,

396 
pVideoDemoCtx
,

397 &
gk_VideoDemo_OutSwôch


400  
pVideoDemoCtx
;

401 
	}
}

403 
	$VideoClõ¡LibI_C⁄åﬁO≥n_CÆlback
(* 
pCÆlbackCtx
, 
UINT32
 
Eº‹Code
)

405 
PUNCOMPRESSED_APP_CONTEXT
 
CONST
 
pAµC⁄ãxt
 = 
pCÆlbackCtx
;

406 
VIDEODEMO_CONTEXT
 * 
CONST
 
pVideoDemoCtx
 = 
pAµC⁄ãxt
->pVideoDemoCtx;

408 i‡(
Eº‹Code
 !
UPROTO_VIDEO_ERROR_OK
)

410 
	`TTUSB_OBJPRINTF
((&
pVideoDemoCtx
->
pVideo
->
Obje˘Hódî
,

411 
UDMASK_ERRORS
,

414 
gk_VideoDemo_Eº‹Name
[
Eº‹Code
]

419 
	`UsbPumpPœtf‹m_Po°IfNŸBusy
(

420 
pVideoDemoCtx
->
pPœtf‹m
,

421 &
pVideoDemoCtx
->
InôCom∂ëi⁄
,

422 
pAµC⁄ãxt


425 
	}
}

427 
	$VideoClõ¡LibI_SåómO≥n_Sync
(*
pClõ¡C⁄ãxt
)

429 
PUNCOMPRESSED_APP_CONTEXT
 
CONST
 
pAµC⁄ãxt
 = 
pClõ¡C⁄ãxt
;

430 
VIDEODEMO_CONTEXT
 * 
pVideoDemoCtx
 = 
pAµC⁄ãxt
->pVideoDemoCtx;

433 
	`VideoClõ¡Lib_SåómO≥n
(

434 
pVideoDemoCtx
->
pVideo
,

435 
VideoClõ¡LibI_SåómO≥n_CÆlback
,

436 
pAµC⁄ãxt
,

437 (
INT8
)(-1),

438 (
INT8
)(-1),

439 (
INT8
)(-1),

440 
FALSE


442 
	}
}

444 
	$VideoClõ¡LibI_SåómO≥n_CÆlback
(

445 * 
pCÆlbackCtx
,

446 
UINT32
 
Eº‹Code
,

447 
UPROTO_VIDEO_STREAM_HANDLE
 
hVideoSåóm


450 
PUNCOMPRESSED_APP_CONTEXT
 
CONST
 
pAµC⁄ãxt
 = 
pCÆlbackCtx
;

451 
VIDEODEMO_CONTEXT
 * 
pVideoDemoCtx
 = 
pAµC⁄ãxt
->pVideoDemoCtx;

453 i‡(
Eº‹Code
 !
UPROTO_VIDEO_ERROR_OK
)

455 
	`TTUSB_OBJPRINTF
((

456 &
pVideoDemoCtx
->
pVideo
->
Obje˘Hódî
,

457 
UDMASK_ERRORS
,

460 
gk_VideoDemo_Eº‹Name
[
Eº‹Code
]

465 
pVideoDemoCtx
->
hVideoOut
 = 
hVideoSåóm
;

467 
	}
}

469 
	$VideoDemo_Sèπ
(
VIDEODEMO_CONTEXT
 * 
pVideoDemoCtx
)

471 
	`VideoClõ¡Lib_SåómGëInfo
(

472 
pVideoDemoCtx
->
pVideo
,

473 
VideoClõ¡LibI_SåómGëInfo_CÆlback
,

474 
pVideoDemoCtx
->
pAµC⁄ãxt
,

475 
pVideoDemoCtx
->
hVideoOut


477 
	}
}

479 
	$VideoClõ¡LibI_SåómGëInfo_CÆlback
(

480 * 
pCÆlbackCtx
,

481 
UINT32
 
Eº‹Code
,

482 
UINT8
 
bI¡îÁ˚Numbî
,

483 
UINT8
 
bA…î«ãSëtög
,

484 
UINT8
 
bTîmöÆLök
,

485 
UINT16
 
wMaxPackëSize
,

486 
UINT16
 
wTøn•‹tHódîSize


489 
	`UNUSED
(
wMaxPackëSize
);

490 
	`UNUSED
(
wTøn•‹tHódîSize
);

492 
PUNCOMPRESSED_APP_CONTEXT
 
CONST
 
pAµC⁄ãxt
 = 
pCÆlbackCtx
;

493 
VIDEODEMO_CONTEXT
 * 
CONST
 
pVideoDemoCtx
 = 
pAµC⁄ãxt
->pVideoDemoCtx;

494 
UPROTO_VIDEO
 * 
CONST
 
pVideo
 = 
pAµC⁄ãxt
->
pVideoDemoCtx
->pVideo;

495 
BOOL
 
fResu…
;

497 
	`USBPUMP_TRACE_PARAMETER
(
pVideo
);

498 
	`USBPUMP_UNREFERENCED_PARAMETER
(
bI¡îÁ˚Numbî
);

499 
	`USBPUMP_UNREFERENCED_PARAMETER
(
bA…î«ãSëtög
);

500 
	`USBPUMP_UNREFERENCED_PARAMETER
(
bTîmöÆLök
);

502 
fResu…
 = 
TRUE
;

504 i‡(
Eº‹Code
 !
UPROTO_VIDEO_ERROR_OK
)

506 
	`TTUSB_OBJPRINTF
((

507 &
pVideo
->
Obje˘Hódî
,

508 
UDMASK_ERRORS
,

511 
gk_VideoDemo_Eº‹Name
[
Eº‹Code
]

514 
fResu…
 = 
FALSE
;

517 i‡(
fResu…
)

519 
pAµC⁄ãxt
->
HódîToggÀ
 = 0;

520 
pAµC⁄ãxt
->
wVideoByãIndex
 = 0;

521 
pAµC⁄ãxt
->
wNumbîOfByã
 = 0;

523 
	`VideoDemo_WrôeO√Føme_D⁄e
(

524 
pVideoDemoCtx
,

525 
UPROTO_VIDEO_ERROR_OK
,

526 
NULL
,

532 i‡(
pVideoDemoCtx
->
hVideoOut
 !=

533 
UPROTO_VIDEO_STREAM_INVALID_HANDLE
)

535 
	`VideoClõ¡Lib_SåómClo£
(

536 
pVideoDemoCtx
->
pVideo
,

537 
VideoClõ¡LibI_SåómClo£_D⁄e
,

538 
pVideoDemoCtx
,

539 
pVideoDemoCtx
->
hVideoOut


543 i‡(
pVideoDemoCtx
)

545 
	`UsbPumpPœtf‹m_Fªe
(

546 
pVideoDemoCtx
->
pPœtf‹m
,

547 
pVideoDemoCtx
,

548 (*
pVideoDemoCtx
)

552 
	}
}

554 
	$VideoClõ¡LibI_SåómClo£_D⁄e
(*
pClõ¡C⁄ãxt
, 
UINT32
 
Eº‹Code
)

556 
	`USBPUMP_UNREFERENCED_PARAMETER
(
pClõ¡C⁄ãxt
);

557 
	`USBPUMP_UNREFERENCED_PARAMETER
(
Eº‹Code
);

558 
	}
}

586 
tyTimeSèmp
 
	gtimîWrôe
;

587 
u32
 
	g˙tWrôe
;

588 
u32
 
	gcy˛esWrôe
[200];

590 
	$VideoDemo_WrôeO√Føme
(

591 
VIDEODEMO_CONTEXT
 * 
pVideoDemoCtx
,

592 
u8
* 
pBuf„r
,

593 
u32
 
wNumbîOfByã
,

594 
u32
 
dwPTS
,

595 
u16
 
wSofCou¡î


598 
PUNCOMPRESSED_APP_CONTEXT
 
CONST
 
pAµC⁄ãxt
 = 
pVideoDemoCtx
->pAppContext;

599 
BOOL
 
fEndofFøme
 = 
TRUE
;

601 
pAµC⁄ãxt
->
wVideoByãIndex
 = 0;

602 
pAµC⁄ãxt
->
dwPTS
 = dwPTS;

603 
pAµC⁄ãxt
->
wSofCou¡î
 = wSofCounter;

604 
pAµC⁄ãxt
->
wNumbîOfByã
 = wNumberOfByte;

605 i‡(
pAµC⁄ãxt
->
HódîToggÀ
 == 0)

607 
pAµC⁄ãxt
->
HódîToggÀ
 = 1;

611 
pAµC⁄ãxt
->
HódîToggÀ
 = 0;

614 
pVideoDemoCtx
->
nWrôeBuf„rHdr
 = 1;

617 *(
pBuf„r
 + 
UNCOMPRESSED_HDR_HLE_OFFSET
Ë
PAYLOAD_HEADER_SIZE
;

619 *(
pBuf„r
 + 
UNCOMPRESSED_HDR_BFH_OFFSET
) =

620 
UNCOMPRESSED_HDR_PTS
 +

621 
UNCOMPRESSED_HDR_SCR
 +

622 
pAµC⁄ãxt
->
HódîToggÀ
;

624 *(
pBuf„r
 + 
UNCOMPRESSED_HDR_BFH_OFFSET
Ë+
UNCOMPRESSED_HDR_EOF
;

626 
	`UHIL_LE_PUTUINT32
(
pBuf„r
 + 
UNCOMPRESSED_HDR_PTS_OFFSET
, 
pAµC⁄ãxt
->
dwPTS
);

627 
	`UHIL_LE_PUTUINT32
(
pBuf„r
 + 
UNCOMPRESSED_HDR_SCR_STC_OFFSET
, 
pAµC⁄ãxt
->
dwPTS
);

628 
	`UHIL_LE_PUTUINT16
(
pBuf„r
 + 
UNCOMPRESSED_HDR_SCR_SOF_OFFSET
, 
pAµC⁄ãxt
->
wSofCou¡î
);

644 
	`VideoClõ¡Lib_SåómWrôe
(

645 
pVideoDemoCtx
->
pVideo
,

646 
VideoDemo_WrôeO√Føme_D⁄e
,

647 
pVideoDemoCtx
,

648 
pVideoDemoCtx
->
hVideoOut
,

649 
pBuf„r
,

650 
wNumbîOfByã
,

651 
fEndofFøme


653 
	}
}

678 
	$VideoDemo_WrôeO√Føme_D⁄e
(

679 *
pC⁄ãxt
,

680 
UINT32
 
Eº‹Code
,

681 
UINT8
 *
pD©a
,

682 
BYTES
 
nD©a


685 
VIDEODEMO_CONTEXT
 * 
CONST
 
pVideoDemoCtx
 = 
pC⁄ãxt
;

686 
PUNCOMPRESSED_APP_CONTEXT
 
CONST
 
pAµC⁄ãxt
 = 
pVideoDemoCtx
->pAppContext;

688 
	`USBPUMP_UNREFERENCED_PARAMETER
(
nD©a
);

689 
	`USBPUMP_UNREFERENCED_PARAMETER
(
pD©a
);

691 i‡(
Eº‹Code
 !
UPROTO_VIDEO_ERROR_OK
)

693 
	`TTUSB_OBJPRINTF
((&
pVideoDemoCtx
->
pVideo
->
Obje˘Hódî
,

694 
UDMASK_ERRORS
,

697 
gk_VideoDemo_Eº‹Name
[
Eº‹Code
]

702 i‡(
pVideoDemoCtx
->
fOuçutA˘iv©e
)

704 
	`UsbPumpPœtf‹m_Po°IfNŸBusy
(

705 
pVideoDemoCtx
->
pPœtf‹m
,

706 &
pAµC⁄ãxt
->
WrôeFømeCom∂ëi⁄
,

707 
pAµC⁄ãxt


710 
	}
}

711 
tyTimeSèmp
 
	gtimî_d©a
;

712 
u32
 
	gcy˛es
[200];

713 
u32
 
	g˙t
;

715 vﬁ©ûê
u32
 
	g‰ameC¡
[200];

716 vﬁ©ûê
u32
 
	gcou¡î
;

717 
u32
 
	gcy˛es
[200];

718 
u32
 
	gcou¡Mesßges
;

720 
	$VideoDemoI_SídAnŸhîFøme
(*
pClõ¡C⁄ãxt
)

722 
°©us
;

723 
u32
 
msg
;

725 
PUNCOMPRESSED_APP_CONTEXT
 
CONST
 
pAµC⁄ãxt
 = 
pClõ¡C⁄ãxt
;

726 
VIDEODEMO_CONTEXT
 * 
CONST
 
pVideoDemoCtx
 = 
pAµC⁄ãxt
->pVideoDemoCtx;

728 
	`UsbPumpPœtf‹m_M¨kCom∂ëi⁄NŸBusy
(

729 
pVideoDemoCtx
->
pPœtf‹m
,

730 &
pAµC⁄ãxt
->
WrôeFømeCom∂ëi⁄


733 
pAµC⁄ãxt
->
dwPTS
 += 1;

734 
pAµC⁄ãxt
->
wSofCou¡î
 += 1;

741 
°©us
 = 
	`Le⁄IPCWaôMesßge
(&
Ãt_LRTtoLOSCh™√l
, 
IPC_WAIT_FOREVER
);

742 i‡(
°©us
)

744 
	`¥ötf
("CouldÇŸ inôülizêLe⁄ IPC Rx. Eº‹: %d\n", 
°©us
);

745 
	`exô
(1);

747 
°©us
 = 
	`Le⁄IPCNumbîOfPídögMesßges
(&
Ãt_LRTtoLOSCh™√l
, &
cou¡Mesßges
);

748 
cou¡Mesßges
 > 0)

750 
°©us
 = 
	`Le⁄IPCRódMesßge
(&
Ãt_LRTtoLOSCh™√l
, &
msg
);

751 
cou¡Mesßges
--;

754 i‡(
cou¡î
 < 200)

755 
‰ameC¡
[
cou¡î
++] = 
Ãt_usbFømeCå
;

757 
	`VideoDemo_WrôeO√Føme
(

758 
pVideoDemoCtx
,

759 
Ãt_usbBufPå
[(
Ãt_usbFømeCå
)% 
MAX_USED_BUF
] + 
PAYLOAD_HEADER_OFFSET
 - 
PAYLOAD_HEADER_SIZE
,

760 
CAM_FRAME_SIZE_BYTES
 + 
PAYLOAD_HEADER_SIZE
,

761 
pAµC⁄ãxt
->
dwPTS
,

762 
pAµC⁄ãxt
->
wSofCou¡î


765 
pVideoDemoCtx
->
nVideoFømeIndex
 = 1;

766 
	}
}

	@Demo/DisparityMap/myriad/leon/videodemo_outswitch.c

11 
	~"videodemo.h
"

13 
	~"¥Ÿovideo.h
"

14 
	~"video˛õ¡lib.h
"

15 
	~"usbpumpdebug.h
"

16 
	~"usbvideo11.h
"

17 
	~"u∂©f‹m≠i.h
"

18 
	~"usbpum∂ib.h
"

20 
CALLBACKFN
 
	gVideoDemoI_Pro˚ssögUnôEvít_Sync
;

21 
UPROTO_VIDEO_CONTROL_REQUEST_REPLY_CB_FN
 
	gVideoDemoI_C⁄åﬁReque°_D⁄e
;

23 
CALLBACKFN
 
	gVideoDemoI_SåómI¡îÁ˚Evít_Sync
;

24 
UPROTO_VIDEO_STREAM_REQUEST_REPLY_CB_FN
 
	gVideoDemoI_SåómReque°_D⁄e
;

28 
CONST
 
UPROTO_VIDEO_OUTSWITCH
 
	ggk_VideoDemo_OutSwôch
 =

29 
UPROTO_VIDEO_OUTSWITCH_INIT_V1
( \

30 
VideoDemo_C⁄åﬁSètusEvít
, \

31 
VideoDemo_Pro˚ssögUnôEvít
, \

32 
VideoDemo_SåómSètusEvít
, \

33 
VideoDemo_SåómI¡îÁ˚Evít
 \

55 
	$VideoDemo_C⁄åﬁSètusEvít
(*
pClõ¡C⁄ãxt
, 
UPROTO_VIDEO_STATUS
 
VideoSètusCode
)

57 
VIDEODEMO_CONTEXT
 * 
CONST
 
pVideoDemoCtx
 = 
pClõ¡C⁄ãxt
;

58 
UPROTO_VIDEO
 * 
CONST
 
pVideo
 = 
pVideoDemoCtx
->pVideo;

60 
	`USBPUMP_TRACE_PARAMETER
(
pVideo
);

61 
	`USBPUMP_TRACE_PARAMETER
(
VideoSètusCode
);

63 
	`TTUSB_OBJPRINTF
((&
pVideo
->
Obje˘Hódî
, 
UDMASK_PROTO
,

65 
gk_VideoDemo_SètusName
[
VideoSètusCode
]

67 
	}
}

88 
	$VideoDemo_Pro˚ssögUnôEvít
(*
pClõ¡C⁄ãxt
, 
UPROTO_VIDEO_CONTROL_REQUEST
 *
pReque°
)

90 
VIDEODEMO_CONTEXT
 * 
CONST
 
pVideoDemoCtx
 = 
pClõ¡C⁄ãxt
;

92 
	`UHIL_˝ybuf
(&
pVideoDemoCtx
->
C⁄åﬁReque°
, 
pReque°
, (*pRequest));

94 
	`USBPUMP_CALLBACKCOMPLETION_INIT
(

95 &
pVideoDemoCtx
->
SëupCom∂ëi⁄
,

96 
VideoDemoI_Pro˚ssögUnôEvít_Sync
,

97 
NULL


100 
	`UsbPumpPœtf‹m_Po°IfNŸBusy
(

101 
pVideoDemoCtx
->
pPœtf‹m
,

102 &
pVideoDemoCtx
->
SëupCom∂ëi⁄
,

103 
pVideoDemoCtx


105 
	}
}

107 
	$VideoDemoI_Pro˚ssögUnôEvít_Sync
(*
pClõ¡C⁄ãxt
)

109 
VIDEODEMO_CONTEXT
 * 
CONST
 
pVideoDemoCtx
 = 
pClõ¡C⁄ãxt
;

110 
UPROTO_VIDEO_CONTROL_REQUEST
 * 
pReque°
 = &
pVideoDemoCtx
->
C⁄åﬁReque°
;

112 
	`UsbPumpPœtf‹m_M¨kCom∂ëi⁄NŸBusy
(
pVideoDemoCtx
->
pPœtf‹m
,

113 &
pVideoDemoCtx
->
SëupCom∂ëi⁄
);

115 
pReque°
->
Hdr
.
bAc˚±Reque°
 = 
TRUE
;

116 
pReque°
->
Hdr
.
bC⁄åﬁSñe˘‹
)

118 
USBVIDEO_bC⁄åﬁSñe˘‹_PU_BACKLIGHT_COMPENSATION_CONTROL
:

119 
pReque°
->
Hdr
.
bReque°
)

121 
USB_bReque°_Video_GET_INFO
:

122 
pReque°
->
Backlight
.
wBacklightCom≥nßti⁄
 =

123 
PU_BACKLIGHT_COMPENSATION_CONTROL_INFO
;

125 
USB_bReque°_Video_GET_MIN
:

126 
pReque°
->
Backlight
.
wBacklightCom≥nßti⁄
 =

127 
PU_BACKLIGHT_COMPENSATION_CONTROL_MIN
;

129 
USB_bReque°_Video_GET_MAX
:

130 
pReque°
->
Backlight
.
wBacklightCom≥nßti⁄
 =

131 
PU_BACKLIGHT_COMPENSATION_CONTROL_MAX
;

133 
USB_bReque°_Video_GET_RES
:

134 
pReque°
->
Backlight
.
wBacklightCom≥nßti⁄
 =

135 
PU_BACKLIGHT_COMPENSATION_CONTROL_RES
;

137 
USB_bReque°_Video_GET_DEF
:

138 
pReque°
->
Backlight
.
wBacklightCom≥nßti⁄
 =

139 
PU_BACKLIGHT_COMPENSATION_CONTROL_DEF
;

141 
USB_bReque°_Video_GET_CUR
:

142 
pReque°
->
Backlight
.
wBacklightCom≥nßti⁄
 =

143 
pVideoDemoCtx
->
ProcUnôCur
.
wBackLightCom≥nßti⁄
;

145 
USB_bReque°_Video_SET_CUR
:

147 
pVideoDemoCtx
->
ProcUnôCur
.
wBackLightCom≥nßti⁄
 =

148 
pReque°
->
Backlight
.
wBacklightCom≥nßti⁄
;

151 
pReque°
->
Hdr
.
bAc˚±Reque°
 = 
FALSE
;

156 
USBVIDEO_bC⁄åﬁSñe˘‹_PU_BRIGHTNESS_CONTROL
:

157 
pReque°
->
Hdr
.
bReque°
)

159 
USB_bReque°_Video_GET_INFO
:

160 
pReque°
->
Brighäess
.
wBrighäess
 = 
PU_BRIGHTNESS_CONTROL_INFO
;

162 
USB_bReque°_Video_GET_MIN
:

163 
pReque°
->
Brighäess
.
wBrighäess
 = 
PU_BRIGHTNESS_CONTROL_MIN
;

165 
USB_bReque°_Video_GET_MAX
:

166 
pReque°
->
Brighäess
.
wBrighäess
 = 
PU_BRIGHTNESS_CONTROL_MAX
;

168 
USB_bReque°_Video_GET_RES
:

169 
pReque°
->
Brighäess
.
wBrighäess
 = 
PU_BRIGHTNESS_CONTROL_RES
;

171 
USB_bReque°_Video_GET_DEF
:

172 
pReque°
->
Brighäess
.
wBrighäess
 = 
PU_BRIGHTNESS_CONTROL_DEF
;

174 
USB_bReque°_Video_GET_CUR
:

175 
pReque°
->
Brighäess
.
wBrighäess
 =

176 
pVideoDemoCtx
->
ProcUnôCur
.
wBrighäess
;

178 
USB_bReque°_Video_SET_CUR
:

180 
pVideoDemoCtx
->
ProcUnôCur
.
wBrighäess
 =

181 
pReque°
->
Brighäess
.
wBrighäess
;

184 
pReque°
->
Hdr
.
bAc˚±Reque°
 = 
FALSE
;

189 
USBVIDEO_bC⁄åﬁSñe˘‹_PU_CONTRAST_CONTROL
:

190 
pReque°
->
Hdr
.
bReque°
)

192 
USB_bReque°_Video_GET_INFO
:

193 
pReque°
->
C⁄åa°
.
wC⁄åa°
 = 
PU_CONTRAST_CONTROL_INFO
;

195 
USB_bReque°_Video_GET_MIN
:

196 
pReque°
->
C⁄åa°
.
wC⁄åa°
 = 
PU_CONTRAST_CONTROL_MIN
;

198 
USB_bReque°_Video_GET_MAX
:

199 
pReque°
->
C⁄åa°
.
wC⁄åa°
 = 
PU_CONTRAST_CONTROL_MAX
;

201 
USB_bReque°_Video_GET_RES
:

202 
pReque°
->
C⁄åa°
.
wC⁄åa°
 = 
PU_CONTRAST_CONTROL_RES
;

204 
USB_bReque°_Video_GET_DEF
:

205 
pReque°
->
C⁄åa°
.
wC⁄åa°
 = 
PU_CONTRAST_CONTROL_DEF
;

207 
USB_bReque°_Video_GET_CUR
:

208 
pReque°
->
C⁄åa°
.
wC⁄åa°
 = 
pVideoDemoCtx
->
ProcUnôCur
.wContrast;

210 
USB_bReque°_Video_SET_CUR
:

212 
pVideoDemoCtx
->
ProcUnôCur
.
wC⁄åa°
 = 
pReque°
->
C⁄åa°
.wContrast;

215 
pReque°
->
Hdr
.
bAc˚±Reque°
 = 
FALSE
;

220 
USBVIDEO_bC⁄åﬁSñe˘‹_PU_POWER_LINE_FREQUENCY_CONTROL
:

221 
pReque°
->
Hdr
.
bReque°
)

223 
USB_bReque°_Video_GET_INFO
:

224 
pReque°
->
PowîLöe
.
bPowîLöeFªquícy
 =

225 
PU_POWER_LINE_FREQUENCY_CONTROL_INFO
;

227 
USB_bReque°_Video_GET_MIN
:

228 
pReque°
->
PowîLöe
.
bPowîLöeFªquícy
 =

229 
PU_POWER_LINE_FREQUENCY_CONTROL_MIN
;

231 
USB_bReque°_Video_GET_MAX
:

232 
pReque°
->
PowîLöe
.
bPowîLöeFªquícy
 =

233 
PU_POWER_LINE_FREQUENCY_CONTROL_MAX
;

235 
USB_bReque°_Video_GET_RES
:

236 
pReque°
->
PowîLöe
.
bPowîLöeFªquícy
 =

237 
PU_POWER_LINE_FREQUENCY_CONTROL_RES
;

239 
USB_bReque°_Video_GET_DEF
:

240 
pReque°
->
PowîLöe
.
bPowîLöeFªquícy
 =

241 
PU_POWER_LINE_FREQUENCY_CONTROL_DEF
;

243 
USB_bReque°_Video_GET_CUR
:

244 
pReque°
->
PowîLöe
.
bPowîLöeFªquícy
 =

245 
pVideoDemoCtx
->
ProcUnôCur
.
bPowîLöeFªquícy
;

247 
USB_bReque°_Video_SET_CUR
:

249 
pVideoDemoCtx
->
ProcUnôCur
.
bPowîLöeFªquícy
 =

250 
pReque°
->
PowîLöe
.
bPowîLöeFªquícy
;

253 
pReque°
->
Hdr
.
bAc˚±Reque°
 = 
FALSE
;

258 
USBVIDEO_bC⁄åﬁSñe˘‹_PU_HUE_CONTROL
:

259 
pReque°
->
Hdr
.
bReque°
)

261 
USB_bReque°_Video_GET_INFO
:

262 
pReque°
->
Hue
.
wHue
 = 
PU_HUE_CONTROL_INFO
;

264 
USB_bReque°_Video_GET_MIN
:

265 
pReque°
->
Hue
.
wHue
 = 
PU_HUE_CONTROL_MIN
;

267 
USB_bReque°_Video_GET_MAX
:

268 
pReque°
->
Hue
.
wHue
 = 
PU_HUE_CONTROL_MAX
;

270 
USB_bReque°_Video_GET_RES
:

271 
pReque°
->
Hue
.
wHue
 = 
PU_HUE_CONTROL_RES
;

273 
USB_bReque°_Video_GET_DEF
:

274 
pReque°
->
Hue
.
wHue
 = 
PU_HUE_CONTROL_DEF
;

276 
USB_bReque°_Video_GET_CUR
:

277 
pReque°
->
Hue
.
wHue
 = 
pVideoDemoCtx
->
ProcUnôCur
.wHue;

279 
USB_bReque°_Video_SET_CUR
:

281 
pVideoDemoCtx
->
ProcUnôCur
.
wHue
 = 
pReque°
->
Hue
.wHue;

284 
pReque°
->
Hdr
.
bAc˚±Reque°
 = 
FALSE
;

289 
USBVIDEO_bC⁄åﬁSñe˘‹_PU_SATURATION_CONTROL
:

290 
pReque°
->
Hdr
.
bReque°
)

292 
USB_bReque°_Video_GET_INFO
:

293 
pReque°
->
S©uøti⁄
.
wS©uøti⁄
 = 
PU_SATURATION_CONTROL_INFO
;

295 
USB_bReque°_Video_GET_MIN
:

296 
pReque°
->
S©uøti⁄
.
wS©uøti⁄
 = 
PU_SATURATION_CONTROL_MIN
;

298 
USB_bReque°_Video_GET_MAX
:

299 
pReque°
->
S©uøti⁄
.
wS©uøti⁄
 = 
PU_SATURATION_CONTROL_MAX
;

301 
USB_bReque°_Video_GET_RES
:

302 
pReque°
->
S©uøti⁄
.
wS©uøti⁄
 = 
PU_SATURATION_CONTROL_RES
;

304 
USB_bReque°_Video_GET_DEF
:

305 
pReque°
->
S©uøti⁄
.
wS©uøti⁄
 = 
PU_SATURATION_CONTROL_DEF
;

307 
USB_bReque°_Video_GET_CUR
:

308 
pReque°
->
S©uøti⁄
.
wS©uøti⁄
 =

309 
pVideoDemoCtx
->
ProcUnôCur
.
wS©uøti⁄
;

311 
USB_bReque°_Video_SET_CUR
:

313 
pVideoDemoCtx
->
ProcUnôCur
.
wS©uøti⁄
 =

314 
pReque°
->
S©uøti⁄
.
wS©uøti⁄
;

317 
pReque°
->
Hdr
.
bAc˚±Reque°
 = 
FALSE
;

322 
USBVIDEO_bC⁄åﬁSñe˘‹_PU_SHARPNESS_CONTROL
:

323 
pReque°
->
Hdr
.
bReque°
)

325 
USB_bReque°_Video_GET_INFO
:

326 
pReque°
->
Sh¨≤ess
.
wSh¨≤ess
 = 
PU_SHARPNESS_CONTROL_INFO
;

328 
USB_bReque°_Video_GET_MIN
:

329 
pReque°
->
Sh¨≤ess
.
wSh¨≤ess
 = 
PU_SHARPNESS_CONTROL_MIN
;

331 
USB_bReque°_Video_GET_MAX
:

332 
pReque°
->
Sh¨≤ess
.
wSh¨≤ess
 = 
PU_SHARPNESS_CONTROL_MAX
;

334 
USB_bReque°_Video_GET_RES
:

335 
pReque°
->
Sh¨≤ess
.
wSh¨≤ess
 = 
PU_SHARPNESS_CONTROL_RES
;

337 
USB_bReque°_Video_GET_DEF
:

338 
pReque°
->
Sh¨≤ess
.
wSh¨≤ess
 = 
PU_SHARPNESS_CONTROL_DEF
;

340 
USB_bReque°_Video_GET_CUR
:

341 
pReque°
->
Sh¨≤ess
.
wSh¨≤ess
 =

342 
pVideoDemoCtx
->
ProcUnôCur
.
wSh¨≤ess
;

344 
USB_bReque°_Video_SET_CUR
:

346 
pVideoDemoCtx
->
ProcUnôCur
.
wSh¨≤ess
 =

347 
pReque°
->
Sh¨≤ess
.
wSh¨≤ess
;

350 
pReque°
->
Hdr
.
bAc˚±Reque°
 = 
FALSE
;

355 
USBVIDEO_bC⁄åﬁSñe˘‹_PU_GAMMA_CONTROL
:

356 
pReque°
->
Hdr
.
bReque°
)

358 
USB_bReque°_Video_GET_INFO
:

359 
pReque°
->
Gamma
.
wGamma
 = 
PU_GAMMA_CONTROL_INFO
;

361 
USB_bReque°_Video_GET_MIN
:

362 
pReque°
->
Gamma
.
wGamma
 = 
PU_GAMMA_CONTROL_MIN
;

364 
USB_bReque°_Video_GET_MAX
:

365 
pReque°
->
Gamma
.
wGamma
 = 
PU_GAMMA_CONTROL_MAX
;

367 
USB_bReque°_Video_GET_RES
:

368 
pReque°
->
Gamma
.
wGamma
 = 
PU_GAMMA_CONTROL_RES
;

370 
USB_bReque°_Video_GET_DEF
:

371 
pReque°
->
Gamma
.
wGamma
 = 
PU_GAMMA_CONTROL_DEF
;

373 
USB_bReque°_Video_GET_CUR
:

374 
pReque°
->
Gamma
.
wGamma
 = 
pVideoDemoCtx
->
ProcUnôCur
.wGamma;

376 
USB_bReque°_Video_SET_CUR
:

378 
pVideoDemoCtx
->
ProcUnôCur
.
wGamma
 = 
pReque°
->
Gamma
.wGamma;

381 
pReque°
->
Hdr
.
bAc˚±Reque°
 = 
FALSE
;

386 
USBVIDEO_bC⁄åﬁSñe˘‹_PU_WHITE_BALANCE_TEMPERATURE_CONTROL
:

387 
pReque°
->
Hdr
.
bReque°
)

389 
USB_bReque°_Video_GET_INFO
:

390 
pReque°
->
WhôeTemp
.
wWhôeBÆ™˚Tem≥øtuª
 =

391 
PU_WHITE_BALANCE_TEMPERATURE_CONTROL_INFO
;

393 
USB_bReque°_Video_GET_MIN
:

394 
pReque°
->
WhôeTemp
.
wWhôeBÆ™˚Tem≥øtuª
 =

395 
PU_WHITE_BALANCE_TEMPERATURE_CONTROL_MIN
;

397 
USB_bReque°_Video_GET_MAX
:

398 
pReque°
->
WhôeTemp
.
wWhôeBÆ™˚Tem≥øtuª
 =

399 
PU_WHITE_BALANCE_TEMPERATURE_CONTROL_MAX
;

401 
USB_bReque°_Video_GET_RES
:

402 
pReque°
->
WhôeTemp
.
wWhôeBÆ™˚Tem≥øtuª
 =

403 
PU_WHITE_BALANCE_TEMPERATURE_CONTROL_RES
;

405 
USB_bReque°_Video_GET_DEF
:

406 
pReque°
->
WhôeTemp
.
wWhôeBÆ™˚Tem≥øtuª
 =

407 
PU_WHITE_BALANCE_TEMPERATURE_CONTROL_DEF
;

409 
USB_bReque°_Video_GET_CUR
:

410 
pReque°
->
WhôeTemp
.
wWhôeBÆ™˚Tem≥øtuª
 =

411 
pVideoDemoCtx
->
ProcUnôCur
.
wWhôeBÆ™˚Tem≥øtuª
;

413 
USB_bReque°_Video_SET_CUR
:

415 
pVideoDemoCtx
->
ProcUnôCur
.
wWhôeBÆ™˚Tem≥øtuª
 =

416 
pReque°
->
WhôeTemp
.
wWhôeBÆ™˚Tem≥øtuª
;

419 
pReque°
->
Hdr
.
bAc˚±Reque°
 = 
FALSE
;

424 
USBVIDEO_bC⁄åﬁSñe˘‹_PU_HUE_AUTO_CONTROL
:

425 
pReque°
->
Hdr
.
bReque°
)

427 
USB_bReque°_Video_GET_CUR
:

428 
pReque°
->
HueAuto
.
bHueAuto
 = 
pVideoDemoCtx
->
ProcUnôCur
.bHueAuto;

431 
pReque°
->
Hdr
.
bAc˚±Reque°
 = 
FALSE
;

436 
USBVIDEO_bC⁄åﬁSñe˘‹_PU_WHITE_BALANCE_TEMPERATURE_AUTO_CONTROL
:

437 
pReque°
->
Hdr
.
bReque°
)

439 
USB_bReque°_Video_GET_CUR
:

440 
pReque°
->
WhôeTempAuto
.
bWhôeBÆ™˚Tem≥øtuªAuto
 =

441 
pVideoDemoCtx
->
ProcUnôCur
.
bWhôeBÆ™˚Tem≥øtuªAuto
;

444 
pReque°
->
Hdr
.
bAc˚±Reque°
 = 
FALSE
;

450 
pReque°
->
Hdr
.
bAc˚±Reque°
 = 
FALSE
;

455 
	`VideoClõ¡Lib_C⁄åﬁReque°Rïly
(

456 
pVideoDemoCtx
->
pVideo
,

457 
VideoDemoI_C⁄åﬁReque°_D⁄e
,

458 
pVideoDemoCtx
,

459 
pReque°


461 
	}
}

463 
	$VideoDemoI_C⁄åﬁReque°_D⁄e
(*
pClõ¡C⁄ãxt
, 
UINT32
 
Eº‹Code
)

465 
	`USBPUMP_UNREFERENCED_PARAMETER
(
pClõ¡C⁄ãxt
);

466 
	`USBPUMP_UNREFERENCED_PARAMETER
(
Eº‹Code
);

467 
	}
}

488 
	$VideoDemo_SåómSètusEvít
(

489 *
pClõ¡C⁄ãxt
,

490 
UPROTO_VIDEO_STREAM_HANDLE
 
hVideoSåóm
,

491 
BOOL
 
fA˘iv©e


494 
VIDEODEMO_CONTEXT
 * 
CONST
 
pVideoDemoCtx
 = 
pClõ¡C⁄ãxt
;

495 
UPROTO_VIDEO
 * 
CONST
 
pVideo
 = 
pVideoDemoCtx
->pVideo;

497 
	`USBPUMP_TRACE_PARAMETER
(
pVideo
);

499 i‡(
hVideoSåóm
 =
pVideoDemoCtx
->
hVideoIn
)

501 
pVideoDemoCtx
->
fI≈utA˘iv©e
 = 
fA˘iv©e
;

503 
	`TTUSB_OBJPRINTF
((&
pVideo
->
Obje˘Hódî
, 
UDMASK_PROTO
,

505 
fA˘iv©e
 ? "ACTIVATE" : "DEACTIVATE"

509 i‡(
hVideoSåóm
 =
pVideoDemoCtx
->
hVideoOut
)

511 
pVideoDemoCtx
->
fOuçutA˘iv©e
 = 
fA˘iv©e
;

513 
	`TTUSB_OBJPRINTF
((&
pVideo
->
Obje˘Hódî
, 
UDMASK_PROTO
,

515 
fA˘iv©e
 ? "ACTIVATE" : "DEACTIVATE"

522 i‡(
fA˘iv©e
)

524 
	`VideoDemo_Sèπ
(
pVideoDemoCtx
);

527 
	}
}

550 
	$VideoDemo_SåómI¡îÁ˚Evít
(

551 *
pClõ¡C⁄ãxt
,

552 
UPROTO_VIDEO_STREAM_HANDLE
 
hVideoSåóm
,

553 
UPROTO_VIDEO_STREAM_REQUEST
 * 
pReque°


556 
VIDEODEMO_CONTEXT
 * 
CONST
 
pVideoDemoCtx
 = 
pClõ¡C⁄ãxt
;

558 
pVideoDemoCtx
->
hSåómReque°
 = 
hVideoSåóm
;

559 
	`UHIL_˝ybuf
(&
pVideoDemoCtx
->
SåómReque°
, 
pReque°
, (*pRequest));

561 
	`USBPUMP_CALLBACKCOMPLETION_INIT
(

562 &
pVideoDemoCtx
->
SëupCom∂ëi⁄
,

563 
VideoDemoI_SåómI¡îÁ˚Evít_Sync
,

564 
NULL


567 
	`UsbPumpPœtf‹m_Po°IfNŸBusy
(

568 
pVideoDemoCtx
->
pPœtf‹m
,

569 &
pVideoDemoCtx
->
SëupCom∂ëi⁄
,

570 
pVideoDemoCtx


572 
	}
}

574 
	$VideoDemoI_SåómI¡îÁ˚Evít_Sync
(*
pClõ¡C⁄ãxt
)

576 
VIDEODEMO_CONTEXT
 * 
CONST
 
pVideoDemoCtx
 = 
pClõ¡C⁄ãxt
;

577 
UPROTO_VIDEO_STREAM_REQUEST
 * 
pReque°
 = &
pVideoDemoCtx
->
SåómReque°
;

579 
	`UsbPumpPœtf‹m_M¨kCom∂ëi⁄NŸBusy
(
pVideoDemoCtx
->
pPœtf‹m
,

580 &
pVideoDemoCtx
->
SëupCom∂ëi⁄
);

582 
pReque°
->
Hdr
.
bAc˚±Reque°
 = 
TRUE
;

583 
pReque°
->
Hdr
.
bC⁄åﬁSñe˘‹
)

585 
USBVIDEO_bC⁄åﬁSñe˘‹_VS_PROBE_CONTROL
:

586 
pReque°
->
Hdr
.
bReque°
)

588 
USB_bReque°_Video_GET_CUR
:

589 
pReque°
->
Video
.
bmHöt
 = 
pVideoDemoCtx
->
ProbeCur
.bmHint;

590 
pReque°
->
Video
.
bF‹m©Index
 = 
pVideoDemoCtx
->
ProbeCur
.bFormatIndex;

591 
pReque°
->
Video
.
bFømeIndex
 = 
pVideoDemoCtx
->
ProbeCur
.bFrameIndex;

592 
pReque°
->
Video
.
dwFømeI¡îvÆ
 =

593 
pVideoDemoCtx
->
ProbeCur
.
dwFømeI¡îvÆ
;

594 
pReque°
->
Video
.
wKeyFømeR©e
 =

595 
pVideoDemoCtx
->
ProbeCur
.
wKeyFømeR©e
;

596 
pReque°
->
Video
.
wPFømeR©e
 = 
pVideoDemoCtx
->
ProbeCur
.wPFrameRate;

597 
pReque°
->
Video
.
wCompQuÆôy
 = 
pVideoDemoCtx
->
ProbeCur
.wCompQuality;

598 
pReque°
->
Video
.
wCompWödowSize
 =

599 
pVideoDemoCtx
->
ProbeCur
.
wCompWödowSize
;

600 
pReque°
->
Video
.
wDñay
 = 
pVideoDemoCtx
->
ProbeCur
.wDelay;

601 
pReque°
->
Video
.
dwMaxVideoFømeSize
 =

602 
pVideoDemoCtx
->
ProbeCur
.
dwMaxVideoFømeSize
;

603 
pReque°
->
Video
.
dwMaxPaylﬂdTøns„rSize
 =

604 
pVideoDemoCtx
->
ProbeCur
.
dwMaxPaylﬂdTøns„rSize
;

605 
pReque°
->
Video
.
dwClockFªquícy
 =

606 
pVideoDemoCtx
->
ProbeCur
.
dwClockFªquícy
;

607 
pReque°
->
Video
.
bmFømögInfo
 =

608 
pVideoDemoCtx
->
ProbeCur
.
bmFømögInfo
;

609 
pReque°
->
Video
.
bPª„ªdVîsi⁄
 =

610 
pVideoDemoCtx
->
ProbeCur
.
bPª„ªdVîsi⁄
;

611 
pReque°
->
Video
.
bMöVîsi⁄
 = 
pVideoDemoCtx
->
ProbeCur
.bMinVersion;

612 
pReque°
->
Video
.
bMaxVîsi⁄
 = 
pVideoDemoCtx
->
ProbeCur
.bMaxVersion;

614 
USB_bReque°_Video_SET_CUR
:

617 i‡(
pReque°
->
Video
.
bmHöt
 != 0)

618 
pVideoDemoCtx
->
ProbeCur
.
bmHöt
 = 
pReque°
->
Video
.bmHint;

619 i‡(
pReque°
->
Video
.
bF‹m©Index
 != 0)

620 
pVideoDemoCtx
->
ProbeCur
.
bF‹m©Index
 =

621 
pReque°
->
Video
.
bF‹m©Index
;

622 i‡(
pReque°
->
Video
.
bFømeIndex
 != 0)

623 
pVideoDemoCtx
->
ProbeCur
.
bFømeIndex
 =

624 
pReque°
->
Video
.
bFømeIndex
;

625 i‡(
pReque°
->
Video
.
dwFømeI¡îvÆ
 != 0)

626 
pVideoDemoCtx
->
ProbeCur
.
dwFømeI¡îvÆ
 =

627 
pReque°
->
Video
.
dwFømeI¡îvÆ
;

628 i‡(
pReque°
->
Video
.
wKeyFømeR©e
 != 0)

629 
pVideoDemoCtx
->
ProbeCur
.
wKeyFømeR©e
 =

630 
pReque°
->
Video
.
wKeyFømeR©e
;

631 i‡(
pReque°
->
Video
.
wPFømeR©e
 != 0)

632 
pVideoDemoCtx
->
ProbeCur
.
wPFømeR©e
 =

633 
pReque°
->
Video
.
wPFømeR©e
;

634 i‡(
pReque°
->
Video
.
wCompQuÆôy
 != 0)

635 
pVideoDemoCtx
->
ProbeCur
.
wCompQuÆôy
 =

636 
pReque°
->
Video
.
wCompQuÆôy
;

637 i‡(
pReque°
->
Video
.
wCompWödowSize
 != 0)

638 
pVideoDemoCtx
->
ProbeCur
.
wCompWödowSize
 =

639 
pReque°
->
Video
.
wCompWödowSize
;

640 i‡(
pReque°
->
Video
.
wDñay
 != 0)

641 
pVideoDemoCtx
->
ProbeCur
.
wDñay
 = 
pReque°
->
Video
.wDelay;

642 i‡(
pReque°
->
Video
.
dwMaxVideoFømeSize
 != 0)

643 
pVideoDemoCtx
->
ProbeCur
.
dwMaxVideoFømeSize
 =

644 
pReque°
->
Video
.
dwMaxVideoFømeSize
;

645 i‡(
pReque°
->
Video
.
dwMaxPaylﬂdTøns„rSize
 != 0)

646 
pVideoDemoCtx
->
ProbeCur
.
dwMaxPaylﬂdTøns„rSize
 =

647 
pReque°
->
Video
.
dwMaxPaylﬂdTøns„rSize
;

648 i‡(
pReque°
->
Video
.
dwClockFªquícy
 != 0)

649 
pVideoDemoCtx
->
ProbeCur
.
dwClockFªquícy
 =

650 
pReque°
->
Video
.
dwClockFªquícy
;

651 i‡(
pReque°
->
Video
.
bmFømögInfo
 != 0)

652 
pVideoDemoCtx
->
ProbeCur
.
bmFømögInfo
 =

653 
pReque°
->
Video
.
bmFømögInfo
;

654 i‡(
pReque°
->
Video
.
bPª„ªdVîsi⁄
 != 0)

655 
pVideoDemoCtx
->
ProbeCur
.
bPª„ªdVîsi⁄
 =

656 
pReque°
->
Video
.
bPª„ªdVîsi⁄
;

657 i‡(
pReque°
->
Video
.
bMöVîsi⁄
 != 0)

658 
pVideoDemoCtx
->
ProbeCur
.
bMöVîsi⁄
 =

659 
pReque°
->
Video
.
bMöVîsi⁄
;

660 i‡(
pReque°
->
Video
.
bMaxVîsi⁄
 != 0)

661 
pVideoDemoCtx
->
ProbeCur
.
bMaxVîsi⁄
 =

662 
pReque°
->
Video
.
bMaxVîsi⁄
;

664 
USB_bReque°_Video_GET_MIN
:

665 
pReque°
->
Video
.
bmHöt
 = 
pVideoDemoCtx
->
ProbeMö
.bmHint;

666 
pReque°
->
Video
.
bF‹m©Index
 = 
pVideoDemoCtx
->
ProbeMö
.bFormatIndex;

667 
pReque°
->
Video
.
bFømeIndex
 = 
pVideoDemoCtx
->
ProbeMö
.bFrameIndex;

668 
pReque°
->
Video
.
dwFømeI¡îvÆ
 =

669 
pVideoDemoCtx
->
ProbeMö
.
dwFømeI¡îvÆ
;

670 
pReque°
->
Video
.
wKeyFømeR©e
 =

671 
pVideoDemoCtx
->
ProbeMö
.
wKeyFømeR©e
;

672 
pReque°
->
Video
.
wPFømeR©e
 = 
pVideoDemoCtx
->
ProbeMö
.wPFrameRate;

673 
pReque°
->
Video
.
wCompQuÆôy
 = 
pVideoDemoCtx
->
ProbeMö
.wCompQuality;

674 
pReque°
->
Video
.
wCompWödowSize
 =

675 
pVideoDemoCtx
->
ProbeMö
.
wCompWödowSize
;

676 
pReque°
->
Video
.
wDñay
 = 
pVideoDemoCtx
->
ProbeMö
.wDelay;

677 
pReque°
->
Video
.
dwMaxVideoFømeSize
 =

678 
pVideoDemoCtx
->
ProbeMö
.
dwMaxVideoFømeSize
;

679 
pReque°
->
Video
.
dwMaxPaylﬂdTøns„rSize
 =

680 
pVideoDemoCtx
->
ProbeMö
.
dwMaxPaylﬂdTøns„rSize
;

681 
pReque°
->
Video
.
dwClockFªquícy
 =

682 
pVideoDemoCtx
->
ProbeMö
.
dwClockFªquícy
;

683 
pReque°
->
Video
.
bmFømögInfo
 =

684 
pVideoDemoCtx
->
ProbeMö
.
bmFømögInfo
;

685 
pReque°
->
Video
.
bPª„ªdVîsi⁄
 =

686 
pVideoDemoCtx
->
ProbeMö
.
bPª„ªdVîsi⁄
;

687 
pReque°
->
Video
.
bMöVîsi⁄
 = 
pVideoDemoCtx
->
ProbeMö
.bMinVersion;

688 
pReque°
->
Video
.
bMaxVîsi⁄
 = 
pVideoDemoCtx
->
ProbeMö
.bMaxVersion;

691 
USB_bReque°_Video_GET_MAX
:

692 
pReque°
->
Video
.
bmHöt
 = 
pVideoDemoCtx
->
ProbeMax
.bmHint;

693 
pReque°
->
Video
.
bF‹m©Index
 = 
pVideoDemoCtx
->
ProbeMax
.bFormatIndex;

694 
pReque°
->
Video
.
bFømeIndex
 = 
pVideoDemoCtx
->
ProbeMax
.bFrameIndex;

695 
pReque°
->
Video
.
dwFømeI¡îvÆ
 =

696 
pVideoDemoCtx
->
ProbeMax
.
dwFømeI¡îvÆ
;

697 
pReque°
->
Video
.
wKeyFømeR©e
 =

698 
pVideoDemoCtx
->
ProbeMax
.
wKeyFømeR©e
;

699 
pReque°
->
Video
.
wPFømeR©e
 = 
pVideoDemoCtx
->
ProbeMax
.wPFrameRate;

700 
pReque°
->
Video
.
wCompQuÆôy
 = 
pVideoDemoCtx
->
ProbeMax
.wCompQuality;

701 
pReque°
->
Video
.
wCompWödowSize
 =

702 
pVideoDemoCtx
->
ProbeMax
.
wCompWödowSize
;

703 
pReque°
->
Video
.
wDñay
 = 
pVideoDemoCtx
->
ProbeMax
.wDelay;

704 
pReque°
->
Video
.
dwMaxVideoFømeSize
 =

705 
pVideoDemoCtx
->
ProbeMax
.
dwMaxVideoFømeSize
;

706 
pReque°
->
Video
.
dwMaxPaylﬂdTøns„rSize
 =

707 
pVideoDemoCtx
->
ProbeMax
.
dwMaxPaylﬂdTøns„rSize
;

708 
pReque°
->
Video
.
dwClockFªquícy
 =

709 
pVideoDemoCtx
->
ProbeMax
.
dwClockFªquícy
;

710 
pReque°
->
Video
.
bmFømögInfo
 =

711 
pVideoDemoCtx
->
ProbeMax
.
bmFømögInfo
;

712 
pReque°
->
Video
.
bPª„ªdVîsi⁄
 =

713 
pVideoDemoCtx
->
ProbeMax
.
bPª„ªdVîsi⁄
;

714 
pReque°
->
Video
.
bMöVîsi⁄
 = 
pVideoDemoCtx
->
ProbeMax
.bMinVersion;

715 
pReque°
->
Video
.
bMaxVîsi⁄
 = 
pVideoDemoCtx
->
ProbeMax
.bMaxVersion;

718 
USB_bReque°_Video_GET_DEF
:

719 
pReque°
->
Video
.
bmHöt
 = 
pVideoDemoCtx
->
ProbeDef
.bmHint;

720 
pReque°
->
Video
.
bF‹m©Index
 = 
pVideoDemoCtx
->
ProbeDef
.bFormatIndex;

721 
pReque°
->
Video
.
bFømeIndex
 = 
pVideoDemoCtx
->
ProbeDef
.bFrameIndex;

722 
pReque°
->
Video
.
dwFømeI¡îvÆ
 =

723 
pVideoDemoCtx
->
ProbeDef
.
dwFømeI¡îvÆ
;

724 
pReque°
->
Video
.
wKeyFømeR©e
 =

725 
pVideoDemoCtx
->
ProbeDef
.
wKeyFømeR©e
;

726 
pReque°
->
Video
.
wPFømeR©e
 = 
pVideoDemoCtx
->
ProbeDef
.wPFrameRate;

727 
pReque°
->
Video
.
wCompQuÆôy
 = 
pVideoDemoCtx
->
ProbeDef
.wCompQuality;

728 
pReque°
->
Video
.
wCompWödowSize
 =

729 
pVideoDemoCtx
->
ProbeDef
.
wCompWödowSize
;

730 
pReque°
->
Video
.
wDñay
 = 
pVideoDemoCtx
->
ProbeDef
.wDelay;

731 
pReque°
->
Video
.
dwMaxVideoFømeSize
 =

732 
pVideoDemoCtx
->
ProbeDef
.
dwMaxVideoFømeSize
;

733 
pReque°
->
Video
.
dwMaxPaylﬂdTøns„rSize
 =

734 
pVideoDemoCtx
->
ProbeDef
.
dwMaxPaylﬂdTøns„rSize
;

735 
pReque°
->
Video
.
dwClockFªquícy
 =

736 
pVideoDemoCtx
->
ProbeDef
.
dwClockFªquícy
;

737 
pReque°
->
Video
.
bmFømögInfo
 =

738 
pVideoDemoCtx
->
ProbeDef
.
bmFømögInfo
;

739 
pReque°
->
Video
.
bPª„ªdVîsi⁄
 =

740 
pVideoDemoCtx
->
ProbeDef
.
bPª„ªdVîsi⁄
;

741 
pReque°
->
Video
.
bMöVîsi⁄
 = 
pVideoDemoCtx
->
ProbeDef
.bMinVersion;

742 
pReque°
->
Video
.
bMaxVîsi⁄
 = 
pVideoDemoCtx
->
ProbeDef
.bMaxVersion;

746 
pReque°
->
Hdr
.
bAc˚±Reque°
 = 
FALSE
;

751 
USBVIDEO_bC⁄åﬁSñe˘‹_VS_COMMIT_CONTROL
:

752 
pReque°
->
Hdr
.
bReque°
)

754 
USB_bReque°_Video_GET_CUR
:

755 
pReque°
->
Video
.
bmHöt
 = 
pVideoDemoCtx
->
CommôCur
.bmHint;

756 
pReque°
->
Video
.
bF‹m©Index
 =

757 
pVideoDemoCtx
->
CommôCur
.
bF‹m©Index
;

758 
pReque°
->
Video
.
bFømeIndex
 = 
pVideoDemoCtx
->
CommôCur
.bFrameIndex;

759 
pReque°
->
Video
.
dwFømeI¡îvÆ
 =

760 
pVideoDemoCtx
->
CommôCur
.
dwFømeI¡îvÆ
;

761 
pReque°
->
Video
.
wKeyFømeR©e
 =

762 
pVideoDemoCtx
->
CommôCur
.
wKeyFømeR©e
;

763 
pReque°
->
Video
.
wPFømeR©e
 = 
pVideoDemoCtx
->
CommôCur
.wPFrameRate;

764 
pReque°
->
Video
.
wCompQuÆôy
 =

765 
pVideoDemoCtx
->
CommôCur
.
wCompQuÆôy
;

766 
pReque°
->
Video
.
wCompWödowSize
 =

767 
pVideoDemoCtx
->
CommôCur
.
wCompWödowSize
;

768 
pReque°
->
Video
.
wDñay
 = 
pVideoDemoCtx
->
CommôCur
.wDelay;

769 
pReque°
->
Video
.
dwMaxVideoFømeSize
 =

770 
pVideoDemoCtx
->
CommôCur
.
dwMaxVideoFømeSize
;

771 
pReque°
->
Video
.
dwMaxPaylﬂdTøns„rSize
 =

772 
pVideoDemoCtx
->
CommôCur
.
dwMaxPaylﬂdTøns„rSize
;

773 
pReque°
->
Video
.
dwClockFªquícy
 =

774 
pVideoDemoCtx
->
CommôCur
.
dwClockFªquícy
;

775 
pReque°
->
Video
.
bmFømögInfo
 =

776 
pVideoDemoCtx
->
CommôCur
.
bmFømögInfo
;

777 
pReque°
->
Video
.
bPª„ªdVîsi⁄
 =

778 
pVideoDemoCtx
->
CommôCur
.
bPª„ªdVîsi⁄
;

779 
pReque°
->
Video
.
bMöVîsi⁄
 = 
pVideoDemoCtx
->
CommôCur
.bMinVersion;

780 
pReque°
->
Video
.
bMaxVîsi⁄
 = 
pVideoDemoCtx
->
CommôCur
.bMaxVersion;

782 
USB_bReque°_Video_SET_CUR
:

785 i‡(
pReque°
->
Video
.
bmHöt
 != 0)

786 
pVideoDemoCtx
->
CommôCur
.
bmHöt
 = 
pReque°
->
Video
.bmHint;

787 i‡(
pReque°
->
Video
.
bF‹m©Index
 != 0)

788 
pVideoDemoCtx
->
CommôCur
.
bF‹m©Index
 =

789 
pReque°
->
Video
.
bF‹m©Index
;

790 i‡(
pReque°
->
Video
.
bFømeIndex
 != 0)

791 
pVideoDemoCtx
->
CommôCur
.
bFømeIndex
 =

792 
pReque°
->
Video
.
bFømeIndex
;

793 i‡(
pReque°
->
Video
.
dwFømeI¡îvÆ
 != 0)

794 
pVideoDemoCtx
->
CommôCur
.
dwFømeI¡îvÆ
 =

795 
pReque°
->
Video
.
dwFømeI¡îvÆ
;

796 i‡(
pReque°
->
Video
.
wKeyFømeR©e
 != 0)

797 
pVideoDemoCtx
->
CommôCur
.
wKeyFømeR©e
 =

798 
pReque°
->
Video
.
wKeyFømeR©e
;

799 i‡(
pReque°
->
Video
.
wPFømeR©e
 != 0)

800 
pVideoDemoCtx
->
CommôCur
.
wPFømeR©e
 =

801 
pReque°
->
Video
.
wPFømeR©e
;

802 i‡(
pReque°
->
Video
.
wCompQuÆôy
 != 0)

803 
pVideoDemoCtx
->
CommôCur
.
wCompQuÆôy
 =

804 
pReque°
->
Video
.
wCompQuÆôy
;

805 i‡(
pReque°
->
Video
.
wCompWödowSize
 != 0)

806 
pVideoDemoCtx
->
CommôCur
.
wCompWödowSize
 =

807 
pReque°
->
Video
.
wCompWödowSize
;

808 i‡(
pReque°
->
Video
.
wDñay
 != 0)

809 
pVideoDemoCtx
->
CommôCur
.
wDñay
 = 
pReque°
->
Video
.wDelay;

810 i‡(
pReque°
->
Video
.
dwMaxVideoFømeSize
 != 0)

811 
pVideoDemoCtx
->
CommôCur
.
dwMaxVideoFømeSize
 =

812 
pReque°
->
Video
.
dwMaxVideoFømeSize
;

813 i‡(
pReque°
->
Video
.
dwMaxPaylﬂdTøns„rSize
 != 0)

814 
pVideoDemoCtx
->
CommôCur
.
dwMaxPaylﬂdTøns„rSize
 =

815 
pReque°
->
Video
.
dwMaxPaylﬂdTøns„rSize
;

816 i‡(
pReque°
->
Video
.
dwClockFªquícy
 != 0)

817 
pVideoDemoCtx
->
CommôCur
.
dwClockFªquícy
 =

818 
pReque°
->
Video
.
dwClockFªquícy
;

819 i‡(
pReque°
->
Video
.
bmFømögInfo
 != 0)

820 
pVideoDemoCtx
->
CommôCur
.
bmFømögInfo
 =

821 
pReque°
->
Video
.
bmFømögInfo
;

822 i‡(
pReque°
->
Video
.
bPª„ªdVîsi⁄
 != 0)

823 
pVideoDemoCtx
->
CommôCur
.
bPª„ªdVîsi⁄
 =

824 
pReque°
->
Video
.
bPª„ªdVîsi⁄
;

825 i‡(
pReque°
->
Video
.
bMöVîsi⁄
 != 0)

826 
pVideoDemoCtx
->
CommôCur
.
bMöVîsi⁄
 =

827 
pReque°
->
Video
.
bMöVîsi⁄
;

828 i‡(
pReque°
->
Video
.
bMaxVîsi⁄
 != 0)

829 
pVideoDemoCtx
->
CommôCur
.
bMaxVîsi⁄
 =

830 
pReque°
->
Video
.
bMaxVîsi⁄
;

833 
pReque°
->
Hdr
.
bAc˚±Reque°
 = 
FALSE
;

838 
USBVIDEO_bC⁄åﬁSñe˘‹_VS_STILL_PROBE_CONTROL
:

839 
pReque°
->
Hdr
.
bReque°
)

841 
USB_bReque°_Video_GET_CUR
:

842 
pReque°
->
Stûl
.
bF‹m©Index
 =

843 
pVideoDemoCtx
->
StûlProbeCur
.
bF‹m©Index
;

844 
pReque°
->
Stûl
.
bFømeIndex
 =

845 
pVideoDemoCtx
->
StûlProbeCur
.
bFømeIndex
;

846 
pReque°
->
Stûl
.
bCom¥essi⁄Index
 =

847 
pVideoDemoCtx
->
StûlProbeCur
.
bCom¥essi⁄Index
;

848 
pReque°
->
Stûl
.
dwMaxVideoFømeSize
 =

849 
pVideoDemoCtx
->
StûlProbeCur
.
dwMaxVideoFømeSize
;

850 
pReque°
->
Stûl
.
dwMaxPaylﬂdTøns„rSize
 =

851 
pVideoDemoCtx
->
StûlProbeCur
.
dwMaxPaylﬂdTøns„rSize
;

853 
USB_bReque°_Video_SET_CUR
:

856 i‡(
pReque°
->
Stûl
.
bF‹m©Index
 != 0)

857 
pVideoDemoCtx
->
StûlProbeCur
.
bF‹m©Index
 =

858 
pReque°
->
Stûl
.
bF‹m©Index
;

859 i‡(
pReque°
->
Stûl
.
bFømeIndex
 != 0)

860 
pVideoDemoCtx
->
StûlProbeCur
.
bFømeIndex
 =

861 
pReque°
->
Stûl
.
bFømeIndex
;

862 i‡(
pReque°
->
Stûl
.
bCom¥essi⁄Index
 != 0)

863 
pVideoDemoCtx
->
StûlProbeCur
.
bCom¥essi⁄Index
 =

864 
pReque°
->
Stûl
.
bCom¥essi⁄Index
;

865 i‡(
pReque°
->
Stûl
.
dwMaxVideoFømeSize
 != 0)

866 
pVideoDemoCtx
->
StûlProbeCur
.
dwMaxVideoFømeSize
 =

867 
pReque°
->
Stûl
.
dwMaxVideoFømeSize
;

868 i‡(
pReque°
->
Stûl
.
dwMaxPaylﬂdTøns„rSize
 != 0)

869 
pVideoDemoCtx
->
StûlProbeCur
.
dwMaxPaylﬂdTøns„rSize
 =

870 
pReque°
->
Stûl
.
dwMaxPaylﬂdTøns„rSize
;

873 
pReque°
->
Hdr
.
bAc˚±Reque°
 = 
FALSE
;

878 
USBVIDEO_bC⁄åﬁSñe˘‹_VS_STILL_COMMIT_CONTROL
:

879 
pReque°
->
Hdr
.
bReque°
)

881 
USB_bReque°_Video_GET_CUR
:

882 
pReque°
->
Stûl
.
bF‹m©Index
 =

883 
pVideoDemoCtx
->
StûlCommôCur
.
bF‹m©Index
;

884 
pReque°
->
Stûl
.
bFømeIndex
 =

885 
pVideoDemoCtx
->
StûlCommôCur
.
bFømeIndex
;

886 
pReque°
->
Stûl
.
bCom¥essi⁄Index
 =

887 
pVideoDemoCtx
->
StûlCommôCur
.
bCom¥essi⁄Index
;

888 
pReque°
->
Stûl
.
dwMaxVideoFømeSize
 =

889 
pVideoDemoCtx
->
StûlCommôCur
.
dwMaxVideoFømeSize
;

890 
pReque°
->
Stûl
.
dwMaxPaylﬂdTøns„rSize
 =

891 
pVideoDemoCtx
->
StûlCommôCur
.
dwMaxPaylﬂdTøns„rSize
;

893 
USB_bReque°_Video_SET_CUR
:

896 i‡(
pReque°
->
Stûl
.
bF‹m©Index
 != 0)

897 
pVideoDemoCtx
->
StûlCommôCur
.
bF‹m©Index
 =

898 
pReque°
->
Stûl
.
bF‹m©Index
;

899 i‡(
pReque°
->
Stûl
.
bFømeIndex
 != 0)

900 
pVideoDemoCtx
->
StûlCommôCur
.
bFømeIndex
 =

901 
pReque°
->
Stûl
.
bFømeIndex
;

902 i‡(
pReque°
->
Stûl
.
bCom¥essi⁄Index
 != 0)

903 
pVideoDemoCtx
->
StûlCommôCur
.
bCom¥essi⁄Index
 =

904 
pReque°
->
Stûl
.
bCom¥essi⁄Index
;

905 i‡(
pReque°
->
Stûl
.
dwMaxVideoFømeSize
 != 0)

906 
pVideoDemoCtx
->
StûlCommôCur
.
dwMaxVideoFømeSize
 =

907 
pReque°
->
Stûl
.
dwMaxVideoFømeSize
;

908 i‡(
pReque°
->
Stûl
.
dwMaxPaylﬂdTøns„rSize
 != 0)

909 
pVideoDemoCtx
->
StûlCommôCur
.
dwMaxPaylﬂdTøns„rSize
 =

910 
pReque°
->
Stûl
.
dwMaxPaylﬂdTøns„rSize
;

913 
pReque°
->
Hdr
.
bAc˚±Reque°
 = 
FALSE
;

918 
USBVIDEO_bC⁄åﬁSñe˘‹_VS_STILL_IMAGE_TRIGGER_CONTROL
:

919 
pReque°
->
Hdr
.
bReque°
)

921 
USB_bReque°_Video_GET_CUR
:

922 
pReque°
->
StûlImage
.
bTriggî
 = 
pVideoDemoCtx
->
bStûlTriggî
;

924 
USB_bReque°_Video_SET_CUR
:

926 i‡(
pReque°
->
StûlImage
.
bTriggî
 != 0)

927 
pVideoDemoCtx
->
bStûlTriggî
 = 
pReque°
->
StûlImage
.
bTriggî
;

930 
pReque°
->
Hdr
.
bAc˚±Reque°
 = 
FALSE
;

936 
pReque°
->
Hdr
.
bAc˚±Reque°
 = 
FALSE
;

940 
	`VideoClõ¡Lib_SåómReque°Rïly
(
pVideoDemoCtx
->
pVideo
,

941 
VideoDemoI_SåómReque°_D⁄e
, 
pVideoDemoCtx
, 
pReque°
);

942 
	}
}

944 
	$VideoDemoI_SåómReque°_D⁄e
(*
pClõ¡C⁄ãxt
, 
UINT32
 
Eº‹Code
)

946 
	`USBPUMP_UNREFERENCED_PARAMETER
(
pClõ¡C⁄ãxt
);

947 
	`USBPUMP_UNREFERENCED_PARAMETER
(
Eº‹Code
);

948 
	}
}

	@Demo/DisparityMap/myriad/leon_rt/lrt_app_config.c

12 
	~"los_≠p_c⁄fig.h
"

13 
	~<ªgi°îsMyrüd.h
>

14 
	~<DrvC¥.h
>

16 
	~<DrvRegUtûs.h
>

17 
	~<DrvShaveL2Cache.h
>

18 
	~<DrvTimî.h
>

19 
	~"DrvDdr.h
"

20 
	~"DrvMssDeföes.h
"

21 
	~"DrvGpio.h
"

25 
	#SYS_CLK_KHZ_APP
 12000

26 

	)

40 
	$öôClocksAndMem‹y
()

42 
s32
 
sc
;

44 
sc
 = 
	`DrvC¥InôClocks
(
SYS_CLK_KHZ_APP
, 0, 0, 0, 0);

46 if(
sc
)

47  
sc
;

49 
sc
 = 
	`DrvTimîInô
();

50 if(
sc
)

51  
sc
;

54 
	}
}

	@Demo/DisparityMap/myriad/leon_rt/lrt_app_config.h

9 #i‚de‡
_LRT_APP_CONFIG_H_


10 
	#_LRT_APP_CONFIG_H_


	)

12 
	~<mv_ty≥s.h
>

13 
	~<sùp.h
>

16 #i‡
deföed
(
MA2150
Ë|| deföed(
MA2155
Ë|| deföed(
MA2450
Ë|| deföed(
MA2455
)

17 
	~"Ãt_≠p_c⁄fig_2150.h
"

21 
u32
 
__l2_c⁄fig
 ;

23 
	#L2CACHE_CFG
 (
SHAVE_L2CACHE_NORMAL_MODE
)

	)

28 
öôClocksAndMem‹y
();

29 
c⁄figuªLutFûãrSûic⁄S≥cific
(
LutP¨am
* 
lutCfg
);

	@Demo/DisparityMap/myriad/leon_rt/main.c

3 
	~"los_≠p_c⁄fig.h
"

4 
	~"Ãt_≠p_c⁄fig.h
"

5 
	~"£tup.h
"

6 
	~<CamîaC⁄fig.h
>

7 
	~<Se˘i⁄s.h
>

8 
	~<Buf„rs.h
>

10 
	~<°dio.h
>

11 
	~<°rög.h
>

13 
	~<swcShaveLﬂdî.h
>

14 
	~<swcTe°Utûs.h
>

15 
	~<DrvShaveL2Cache.h
>

16 
	~<swcCrc.h
>

17 
	~<UnôTe°Api.h
>

18 
	~<bicubicW¨pApi.h
>

19 
	~<VcsHooksApi.h
>

20 #ifde‡
MV0212


21 
	~"MV0212.h
"

22 
	~"brdGpioCfgs/brdMv0182R5GpioDeÁu…s.h
"

23 #ñi‡
deföed
(
MV0182
)

24 
	~<Bﬂrd182Api.h
>

26 
	~<DrvCDCEL.h
>

27 
	~<DrvC¥.h
>

28 
	~<DrvLe⁄.h
>

29 
	~<DrvGpioDeföes.h
>

30 
	~<ªgi°îsMyrüd.h
>

31 
	~<DrvADV7513.h
>

32 
	~<CamGíîicApi.h
>

33 
	~<DrvMss.h
>

34 
	~<sùp.h
>

35 
	~<sùpTe°Comm⁄.h
>

36 
	~<Le⁄IPCApi.h
>

37 
	~<imx208_2L_1936x1096_Raw10_30Hz.h
>

41 
	#PROF_PRINT
 
¥ötf


	)

42 
	#MSG_QUEUE_SIZE
 1000

	)

43 
	#MSG_SIZE
 1

	)

45 
	#INVERSION_SHAVE
 0

	)

46 
	#CONVERSION_SHAVE
 0

	)

47 
	#PROFILING_SHAVE
 0

	)

48 
	#SIPP_SHAVE
 4

	)

50 #ifde‡
MV0212


51 
	#NUM_I2C_DEVS
 3

	)

55 
I2CM_Devi˚
 * 
	gi2cH™dÀ
;

56 vﬁ©ûê
u32
 
	gv¨_debug
 = 0x55555555;

58 
u8
 
	gˇmLe·Buf
[
MAX_USED_BUF
][
CAM_FRAME_SIZE_BYTES
] 
DDR_BSS
 
ALIGNED
(8);

59 
u8
 
	gˇmRightBuf
[
MAX_USED_BUF
][
CAM_FRAME_SIZE_BYTES
] 
DDR_BSS
 
ALIGNED
(8);

60 
u8
 
	glutLe·Buf
[
MAX_USED_BUF
][
ALGO_FRAME_SIZE_BYTES
] 
DDR_BSS
 
ALIGNED
(8);

61 
u8
 
	glutRightBuf
[
MAX_USED_BUF
][
ALGO_FRAME_SIZE_BYTES
] 
DDR_BSS
 
ALIGNED
(8);

62 
u8
 
	glutRightBufRe˘ifõd
[
MAX_USED_BUF
][
ALGO_FRAME_SIZE_BYTES
] 
DDR_BSS
 
ALIGNED
(8);

65 
u8
 
	gdi•M≠1
[
PATCH_WIDTH
 * 
PATCH_HEIGHT
] 
DDR_BSS
 
ALIGNED
(8);

66 
u8
 
	gdi•M≠2
[
PATCH_WIDTH
 * 
PATCH_HEIGHT
] 
DDR_BSS
 
ALIGNED
(8);

67 
u8
 
	gdi•M≠3
[
PATCH_WIDTH
 * 
PATCH_HEIGHT
] 
DDR_BSS
 
ALIGNED
(8);

68 
u8
 
	gdi•M≠4
[
PATCH_WIDTH
 * 
PATCH_HEIGHT
] 
DDR_BSS
 
ALIGNED
(8);

70 
u8
* 
	gdi•¨ôyM≠
[
MAX_PATCHES
] = {
di•M≠1
, 
di•M≠2
, 
di•M≠3
, 
di•M≠4
};

72 
Â32
* 
	gxyRe˘ifõdBuf„r
[
ALGO_FRAME_SIZE_BYTES
 * 2] 
DDR_BSS
 
ALIGNED
(8);

73 
u8
 
	g‰ameBuf„rDi•¨ôõs
[
ALGO_FRAME_SIZE_BYTES
] 
DDR_BSS
 
ALIGNED
(8);

74 
u8
 
	g‰ameBuf„rDi•¨ôõsMedün
[
MAX_USED_BUF
][
ALGO_FRAME_SIZE_BYTES
] 
DDR_BSS
 
ALIGNED
(8);

77 
u8
 
	gusbDi•¨ôõs1
[
USB_FRAME_SIZE_BYTES
 + 
PAYLOAD_HEADER_OFFSET
] 
DDR_BSS
 
ALIGNED
(128);

78 
u8
 
	gusbDi•¨ôõs2
[
USB_FRAME_SIZE_BYTES
 + 
PAYLOAD_HEADER_OFFSET
] 
DDR_BSS
 
ALIGNED
(128);

79 
u8
 
	gusbDi•¨ôõs3
[
USB_FRAME_SIZE_BYTES
 + 
PAYLOAD_HEADER_OFFSET
] 
DDR_BSS
 
ALIGNED
(128);

81 
u8
* 
	gusbBufPå
[
MAX_USED_BUF
] = {
usbDi•¨ôõs1
, 
usbDi•¨ôõs2
, 
usbDi•¨ôõs3
};

84 
À⁄IPCCh™√l_t
 
LRTtoLOSCh™√l
 
	gCMX_DIRECT_DATA
;

85 
uöt32_t
 
	gmesßgePoﬁ
[
MSG_QUEUE_SIZE
 * 
MSG_SIZE
] 
	gCMX_DIRECT_DATA
;

88 
GíîicCamS≥c
 *
	g°©icCamC⁄fig
 = &
imx208_2L_1936x1096_RAW10_30Hz_ˇmCfg
;

90 vﬁ©ûê
	$ALIGNED
(4Ë
CMX_DIRECT_DATA
 
u32
 
bPro˚ssögLe·
 = 0;

91 vﬁ©ûê
	$ALIGNED
(4Ë
CMX_DIRECT_DATA
 
u32
 
bPro˚ssögRight
 = 0;

92 vﬁ©ûê
	$ALIGNED
(4Ë
CMX_DIRECT_DATA
 
u32
 
usbFømeCå
 = 
FIRST_OUTGOING_BUF_ID
;

93 vﬁ©ûê
	$ALIGNED
(4Ë
u32
 
√wCamFømeCåLe·
 = 
FIRST_INCOMING_BUF_ID
;

94 vﬁ©ûê
	$ALIGNED
(4Ë
u32
 
√wCamFømeCåRight
 = 
FIRST_INCOMING_BUF_ID
;

95 vﬁ©ûê
	$ALIGNED
(4Ë
u32
 
¥o˚ssögFømeCå
;

97 
GíîicCamîaH™dÀ
 
ˇmHndlLe·
, 
ˇmHndlRight
;

98 
CamU£rS≥c
 
u£rCamLe·C⁄fig
, 
u£rCamRightC⁄fig
;

99 
‰ameS≥c
 
ˇmLe·FømeS≥c
, 
ˇmRightFømeS≥c
;

100 
ˇŒbacksLi°Såu˘
 
ˇŒbacks
 = {0
	}
};

101 
öãºu±sCÆlbacksLi°Ty≥
 
	gi§CÆlbacks
 = {0};

103 
‰ameBuf„r
 
	gˇmLe·Føme
[
MAX_USED_BUF
];

104 
‰ameBuf„r
 
	gˇmRightFøme
[
MAX_USED_BUF
];

107 
u16
 
lutTabÀ
[256] 
ALIGNED
(8);

108 
SùpPùñöe
 *
	g∂
, *
	g∂LutLe·
, *
	g∂LutRight
, *
	g∂Medün
, *
	g∂DownsˇÀ
, *
	g∂UpsˇÀ
;

109 
SùpFûãr
 *
	gdmaInLe·
, *
	gdmaInRight
, *
	gdmaIn
;

110 
SùpFûãr
 *
	glutLe·
, *
	glutRight
, *
	gmedün
;

111 
SùpFûãr
 *
	gdmaOutLe·
, *
	gdmaOutRight
, *
	gdmaOut
;

112 
DmaP¨am
 *
	gdmaInCfgLe·
, *
	gdmaInCfgRight
, *
	gdmaInCfg
;

113 
DmaP¨am
 *
	gdmaOutCfgLe·
, *
	gdmaOutCfgRight
, *
	gdmaOutCfg
;

114 
LutP¨am
 *
	glutCfgLe·
, *
	glutCfgRight
;

115 
MedP¨am
 *
	gmedCfg
;

119 
u32
 
Di•¨ôyM≠0_di•¨ôyM≠Inô
;

120 
u32
 
Di•¨ôyM≠1_di•¨ôyM≠Inô
;

121 
u32
 
Di•¨ôyM≠2_di•¨ôyM≠Inô
;

122 
u32
 
Di•¨ôyM≠3_di•¨ôyM≠Inô
;

124 
u32
 
Di•¨ôyM≠0_di•¨ôyM≠PyrInô
;

125 
u32
 
Di•¨ôyM≠1_di•¨ôyM≠PyrInô
;

126 
u32
 
Di•¨ôyM≠2_di•¨ôyM≠PyrInô
;

127 
u32
 
Di•¨ôyM≠3_di•¨ôyM≠PyrInô
;

129 
u32
 
Di•¨ôyM≠0_di•¨ôyM≠RunP©ches
;

130 
u32
 
Di•¨ôyM≠1_di•¨ôyM≠RunP©ches
;

131 
u32
 
Di•¨ôyM≠2_di•¨ôyM≠RunP©ches
;

132 
u32
 
Di•¨ôyM≠3_di•¨ôyM≠RunP©ches
;

134 
u32
 
Di•¨ôyM≠0_Pª¥o˚ssög
;

135 
u32
 
	gFnDi•¨ôyM≠Pª¥o˚ss
 = (u32)&
Di•¨ôyM≠0_Pª¥o˚ssög
;

137 
u32
 
Di•¨ôyM≠0_Po°¥o˚ssög
;

138 
u32
 
	gFnDi•¨ôyM≠Po°¥o˚ss
 = (u32)&
Di•¨ôyM≠0_Po°¥o˚ssög
;

140 
u32
 
	gli°Shaves
[
SHAVES_USED
] = {0, 1, 2, 3};

141 
u32
 
	gíåyPoötsDi•¨ôyM≠
[
SHAVES_USED
][2] = {

142 {(
u32
)&
Di•¨ôyM≠0_di•¨ôyM≠Inô
, (u32)&
Di•¨ôyM≠0_di•¨ôyM≠RunP©ches
},

143 {(
u32
)&
Di•¨ôyM≠1_di•¨ôyM≠Inô
, (u32)&
Di•¨ôyM≠1_di•¨ôyM≠RunP©ches
},

144 {(
u32
)&
Di•¨ôyM≠2_di•¨ôyM≠Inô
, (u32)&
Di•¨ôyM≠2_di•¨ôyM≠RunP©ches
},

145 {(
u32
)&
Di•¨ôyM≠3_di•¨ôyM≠Inô
, (u32)&
Di•¨ôyM≠3_di•¨ôyM≠RunP©ches
}};

148 
	ghomogøphy
[9] = {1.04105487029507, -0.002282253354078164, -21.72629830610492,

151 
	ghomogøphyInvî£d
[9];

156 
	mCAMERA_DEMO
 = 0,

157 
	mSTATIC_IMAGES
 = 1,

158 } 
	trunMode_t
;

160 #ifde‡
PROFILING


161 c⁄° vﬁ©ûê
runMode_t
 
	grunC⁄fig
 = 
STATIC_IMAGES
;

163 c⁄° vﬁ©ûê
runMode_t
 
	grunC⁄fig
 = 
CAMERA_DEMO
;

168 
‰ameBuf„r
* 
AŒoˇãNextLe·CamFømeBuf
();

169 
‰ameBuf„r
* 
AŒoˇãNextRightCamFømeBuf
();

174 
	$gíî©eLutTabÀ
()

176 
u16
 
i
;

179 
i
 = 0; i < 256; i++)

181 
lutTabÀ
[
i
] = i;

183 
	}
}

185 
	$¥ï¨eDrivîD©a
()

187 
ibuf
;

190 
u£rCamLe·C⁄fig
.
mùiC⁄åﬁÀrNb
 = 
CAM_B1_MIPICTRL
;

191 
u£rCamLe·C⁄fig
.
ª˚ivîId
 = 
SIPP_DEVICE1
;

192 #ifde‡
MV0212


193 
u£rCamLe·C⁄fig
.
£ns‹Re£tPö
 = 
MV0212_MV0200_SENSOR_RIGHT_RST_GPIO
;

194 #ñi‡
	`deföed
(
MV0182
)

195 
u£rCamLe·C⁄fig
.
£ns‹Re£tPö
 = 
MV0182_MV0200_SENSOR_RIGHT_RST_GPIO
;

197 
u£rCamLe·C⁄fig
.
°îeoPaúIndex
 = 
CAM_B1_RIGHT_ADDR
;

199 
u£rCamLe·C⁄fig
.
wödowCﬁumnSèπ
 = 
CAM_WINDOW_START_COLUMN
;

200 
u£rCamLe·C⁄fig
.
wödowRowSèπ
 = 
CAM_WINDOW_START_ROW
;

201 
u£rCamLe·C⁄fig
.
wödowWidth
 = 
CAM_WINDOW_WIDTH
;

202 
u£rCamLe·C⁄fig
.
wödowHeight
 = 
CAM_WINDOW_HEIGHT
;

203 
u£rCamLe·C⁄fig
.
gíî©eSync
 = 
NULL
;

206 
u£rCamRightC⁄fig
.
mùiC⁄åﬁÀrNb
 = 
CAM_B2_MIPICTRL
;

207 
u£rCamRightC⁄fig
.
ª˚ivîId
 = 
CIF_DEVICE1
;

208 #ifde‡
MV0212


209 
u£rCamRightC⁄fig
.
£ns‹Re£tPö
 = 
MV0212_MV0200_SENSOR_LEFT_RST_GPIO
;

210 #ñi‡
	`deföed
(
MV0182
)

211 
u£rCamRightC⁄fig
.
£ns‹Re£tPö
 = 
MV0182_MV0200_SENSOR_LEFT_RST_GPIO
;

213 
u£rCamRightC⁄fig
.
°îeoPaúIndex
 = 
CAM_B2_LEFT_ADDR
;

215 
u£rCamRightC⁄fig
.
wödowCﬁumnSèπ
 = 
CAM_WINDOW_START_COLUMN
;

216 
u£rCamRightC⁄fig
.
wödowRowSèπ
 = 
CAM_WINDOW_START_ROW
;

217 
u£rCamRightC⁄fig
.
wödowWidth
 = 
CAM_WINDOW_WIDTH
;

218 
u£rCamRightC⁄fig
.
wödowHeight
 = 
CAM_WINDOW_HEIGHT
;

219 
u£rCamRightC⁄fig
.
gíî©eSync
 = 
NULL
;

222 
ˇmLe·FømeS≥c
.
width
 = 
CAM_WINDOW_WIDTH
;

223 
ˇmLe·FømeS≥c
.
height
 = 
CAM_WINDOW_HEIGHT
;

224 
ˇmLe·FømeS≥c
.
byãsPP
 = 
CAM_BPP
;

225 
ˇmLe·FømeS≥c
.
°ride
 = 
CAM_WINDOW_WIDTH
 * 
CAM_BPP
;

226 
ˇmLe·FømeS≥c
.
ty≥
 = 
RAW16
;

228 
ˇmRightFømeS≥c
.
width
 = 
CAM_WINDOW_WIDTH
;

229 
ˇmRightFømeS≥c
.
height
 = 
CAM_WINDOW_HEIGHT
;

230 
ˇmRightFømeS≥c
.
byãsPP
 = 
CAM_BPP
;

231 
ˇmRightFømeS≥c
.
°ride
 = 
CAM_WINDOW_WIDTH
 * 
CAM_BPP
;

232 
ˇmRightFømeS≥c
.
ty≥
 = 
RAW16
;

234 
ibuf
 = 0; ibu‡< 
MAX_USED_BUF
;ibuf++)

236 
ˇmLe·Føme
[
ibuf
].
•ec
 = 
ˇmLe·FømeS≥c
;

237 
ˇmLe·Føme
[
ibuf
].
p1
 = (*)
ˇmLe·Buf
[ibuf];

238 
ˇmLe·Føme
[
ibuf
].
p2
 = 
NULL
;

239 
ˇmLe·Føme
[
ibuf
].
p3
 = 
NULL
;

241 
ˇmRightFøme
[
ibuf
].
•ec
 = 
ˇmRightFømeS≥c
;

242 
ˇmRightFøme
[
ibuf
].
p1
 = (*)
ˇmRightBuf
[ibuf];

243 
ˇmRightFøme
[
ibuf
].
p2
 = 
NULL
;

244 
ˇmRightFøme
[
ibuf
].
p3
 = 
NULL
;

248 
	}
}

251 
	$≠pBuûdPùñöe
()

253 
∂LutLe·
 = 
	`sùpCª©ePùñöe
(
SIPP_SHAVE
, SIPP_SHAVE, 
	`SIPP_MBIN
(0));

254 
∂LutRight
 = 
	`sùpCª©ePùñöe
(
SIPP_SHAVE
, SIPP_SHAVE, 
	`SIPP_MBIN
(0));

257 
dmaInLe·
 = 
	`sùpCª©eFûãr
(
∂LutLe·
, 0x00, 
CAM_WINDOW_WIDTH
, 
CAM_WINDOW_HEIGHT
, 
	`N_PL
(1), 
	`SZ
(
UI¡16
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, "DMA_IN");

258 
lutLe·
 = 
	`sùpCª©eFûãr
(
∂LutLe·
, 0x00, 
CAM_WINDOW_WIDTH
, 
CAM_WINDOW_HEIGHT
, 
	`N_PL
(1), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_LUT_ID
, "SIPP_LUT");

259 
dmaOutLe·
 = 
	`sùpCª©eFûãr
(
∂LutLe·
, 0x00, 
CAM_WINDOW_WIDTH
, 
CAM_WINDOW_HEIGHT
, 
	`N_PL
(1), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, "DMA_OUT");

261 
	`sùpLökFûãr
(
lutLe·
, 
dmaInLe·
, 1, 1);

262 
	`sùpLökFûãr
(
dmaOutLe·
, 
lutLe·
, 1, 1);

265 
dmaInRight
 = 
	`sùpCª©eFûãr
(
∂LutRight
, 0x00, 
CAM_WINDOW_WIDTH
, 
CAM_WINDOW_HEIGHT
, 
	`N_PL
(1), 
	`SZ
(
UI¡16
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, "DMA_IN");

266 
lutRight
 = 
	`sùpCª©eFûãr
(
∂LutRight
, 0x00, 
CAM_WINDOW_WIDTH
, 
CAM_WINDOW_HEIGHT
, 
	`N_PL
(1), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_LUT_ID
, "SIPP_LUT");

267 
dmaOutRight
 = 
	`sùpCª©eFûãr
(
∂LutRight
, 0x00, 
CAM_WINDOW_WIDTH
, 
CAM_WINDOW_HEIGHT
, 
	`N_PL
(1), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, "DMA_OUT");

269 
	`sùpLökFûãr
(
lutRight
, 
dmaInRight
, 1, 1);

270 
	`sùpLökFûãr
(
dmaOutRight
, 
lutRight
, 1, 1);

271 
	}
}

274 
	$≠pBuûdPùñöeMedün
()

276 
∂Medün
 = 
	`sùpCª©ePùñöe
(
SIPP_SHAVE
, SIPP_SHAVE, 
	`SIPP_MBIN
(0));

278 
dmaIn
 = 
	`sùpCª©eFûãr
(
∂Medün
, 0x00, 
CAM_WINDOW_WIDTH
, 
CAM_WINDOW_HEIGHT
, 
	`N_PL
(1), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

279 
medün
 = 
	`sùpCª©eFûãr
(
∂Medün
, 0x00, 
CAM_WINDOW_WIDTH
, 
CAM_WINDOW_HEIGHT
, 
	`N_PL
(1), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_MED_ID
, 0);

280 
dmaOut
 = 
	`sùpCª©eFûãr
(
∂Medün
, 0x00, 
CAM_WINDOW_WIDTH
, 
CAM_WINDOW_HEIGHT
, 
	`N_PL
(1), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

282 
	`sùpLökFûãr
(
medün
, 
dmaIn
, 
MEDIAN_KERNEL_SIZE
, MEDIAN_KERNEL_SIZE);

283 
	`sùpLökFûãr
(
dmaOut
, 
medün
, 1, 1);

284 
	}
}

286 
	$≠pC⁄figuªFûãrs
()

288 
dmaInCfgLe·
 = (
DmaP¨am
*)
dmaInLe·
->
∑øms
;

289 
dmaOutCfgLe·
 = (
DmaP¨am
*)
dmaOutLe·
->
∑øms
;

290 
lutCfgLe·
 = (
LutP¨am
*)
lutLe·
->
∑øms
;

292 
dmaInCfgRight
 = (
DmaP¨am
*)
dmaInRight
->
∑øms
;

293 
dmaOutCfgRight
 = (
DmaP¨am
*)
dmaOutRight
->
∑øms
;

294 
lutCfgRight
 = (
LutP¨am
*)
lutRight
->
∑øms
;

296 
dmaInCfgLe·
->
ddrAddr
 = (
UI¡32
)&
ˇmLe·Buf
[0];

297 
dmaOutCfgLe·
->
ddrAddr
 = (
UI¡32
)&
lutLe·Buf
[0];

299 
dmaInCfgRight
->
ddrAddr
 = (
UI¡32
)&
ˇmRightBuf
[0];

300 
dmaOutCfgRight
->
ddrAddr
 = (
UI¡32
)&
lutRightBuf
[0];

303 
lutCfgLe·
->
cfg
 = (0 ) |

307 
lutCfgLe·
->
sizeA
 = 0x44444444;

308 
lutCfgLe·
->
sizeB
 = 0x44444444;

309 
lutCfgLe·
->
lut
 = 
lutTabÀ
;

310 
lutCfgLe·
->
‰mDim
 = ((
CAM_WINDOW_HEIGHT
 << 16Ë| 
CAM_WINDOW_WIDTH
);

313 
lutCfgRight
->
cfg
 = (0 ) |

318 
lutCfgRight
->
sizeA
 = 0x44444444;

319 
lutCfgRight
->
sizeB
 = 0x44444444;

320 
lutCfgRight
->
lut
 = 
lutTabÀ
;

321 
lutCfgRight
->
‰mDim
 = ((
CAM_WINDOW_HEIGHT
 << 16Ë| 
CAM_WINDOW_WIDTH
);

323 
	`c⁄figuªLutFûãrSûic⁄S≥cific
(
lutCfgLe·
);

324 
	`c⁄figuªLutFûãrSûic⁄S≥cific
(
lutCfgRight
);

325 
	}
}

328 
	$≠pC⁄figuªFûãrMedün
()

330 
dmaInCfg
 = (
DmaP¨am
*)
dmaIn
->
∑øms
;

331 
dmaOutCfg
 = (
DmaP¨am
*)
dmaOut
->
∑øms
;

332 
medCfg
 = (
MedP¨am
*)
medün
->
∑øms
;

334 
dmaInCfg
->
ddrAddr
 = (
UI¡32
)&
‰ameBuf„rDi•¨ôõs
[0];

335 
dmaOutCfg
->
ddrAddr
 = (
UI¡32
)&
‰ameBuf„rDi•¨ôõsMedün
[0];

338 
medCfg
->
cfg
 = 
MEDIAN_KERNEL_SIZE


339 |(((
MEDIAN_KERNEL_SIZE
 * MEDIAN_KERNEL_SIZE)>>1) << 8)

341 
	}
}

344 
‰ameBuf„r
* 
	$AŒoˇãNextLe·CamFømeBuf
()

346 ++
√wCamFømeCåLe·
;

347  (&
ˇmLe·Føme
[
√wCamFømeCåLe·
 % 
MAX_USED_BUF
]);

348 
	}
}

351 
‰ameBuf„r
* 
	$AŒoˇãNextRightCamFømeBuf
()

353 ++
√wCamFømeCåRight
;

354  (&
ˇmRightFøme
[
√wCamFømeCåRight
 % 
MAX_USED_BUF
]);

355 
	}
}

358 
	$¥ïro˚ssög
(
Â32
 *
H
, fp32 *
övî£H
)

360 
≥rf‹m™˚Såu˘
 
≥rfSå
;

361 i‡(
runC⁄fig
 =
STATIC_IMAGES
)

363 
	`swcShaveProfInô
(&
≥rfSå
);

364 
	`PROF_PRINT
("--- SHAVE Profiling for Inverse Homography H^-1 --- \n");

365 
	`swcShaveProfSèπG©hîög
(
INVERSION_SHAVE
, &
≥rfSå
);

368 
	`swcRe£tShave
(
INVERSION_SHAVE
);

369 
	`swcSëAbsﬁuãDeÁu…Sèck
(
INVERSION_SHAVE
);

372 
	`swcSèπShaveCC
(
INVERSION_SHAVE
, 
FnDi•¨ôyM≠Pª¥o˚ss
, "ii", 
H
,

373 
övî£H
);

375 
	`swcWaôShave
(
INVERSION_SHAVE
);

377 i‡(
runC⁄fig
 =
STATIC_IMAGES
)

379 
	`swcShaveProfSt›G©hîög
(
INVERSION_SHAVE
, &
≥rfSå
);

380 
	`swcShaveProfPröt
(
INVERSION_SHAVE
, &
≥rfSå
);

381 
	`PROF_PRINT
("-------------------------------------------------- \n");

384 
	`DrvShaveL2CacheP¨tôi⁄FlushAndInvÆid©e
(
PARTITION_0
);

385 
	}
}

388 
	$po°¥o˚ssög
(
u8
* 
öput
, 
u16
* 
ouçut
, 
u32
 
width
, u32 
height
)

390 
≥rf‹m™˚Såu˘
 
≥rfSå
;

391 i‡(
runC⁄fig
 =
STATIC_IMAGES
)

393 
	`swcShaveProfInô
(&
≥rfSå
);

394 
	`PROF_PRINT
("--- SHAVE Profiling for Postprocessing YUV422 Conversion --- \n");

395 
	`swcShaveProfSèπG©hîög
(
CONVERSION_SHAVE
, &
≥rfSå
);

398 
	`swcRe£tShave
(
CONVERSION_SHAVE
);

399 
	`swcSëAbsﬁuãDeÁu…Sèck
(
CONVERSION_SHAVE
);

402 
	`swcSèπShaveCC
(
CONVERSION_SHAVE
, 
FnDi•¨ôyM≠Po°¥o˚ss
, "iiii", 
öput
,

403 
ouçut
, 
width
, 
height
);

405 
	`swcWaôShave
(
CONVERSION_SHAVE
);

407 i‡(
runC⁄fig
 =
STATIC_IMAGES
)

409 
	`swcShaveProfSt›G©hîög
(
CONVERSION_SHAVE
, &
≥rfSå
);

410 
	`swcShaveProfPröt
(
CONVERSION_SHAVE
, &
≥rfSå
);

411 
	`PROF_PRINT
("------------------------------------------------------------ \n");

414 
	`DrvShaveL2CacheP¨tôi⁄FlushAndInvÆid©e
(
PARTITION_0
);

415 
	}
}

418 
	$öôülizeDi•¨ôyM≠
(
Alg‹ôhmC⁄fig
* 
ÆgoCfg
, 
u32
 
width
)

420 
u32
 
shaveNumbî
, 
shaveIdx
;

421 
≥rf‹m™˚Såu˘
 
≥rfSå
;

423 i‡(
runC⁄fig
 =
STATIC_IMAGES
)

425 
	`swcShaveProfInô
(&
≥rfSå
);

426 
	`PROF_PRINT
("--- SHAVE Profiling for Disparity Map Initialization --- \n");

427 
	`swcShaveProfSèπG©hîög
(
PROFILING_SHAVE
, &
≥rfSå
);

430 
shaveIdx
 = 0; shaveIdx < 
SHAVES_USED
; shaveIdx++)

432 
shaveNumbî
 = 
li°Shaves
[
shaveIdx
];

433 
	`swcRe£tShave
(
shaveNumbî
);

434 
	`swcSëAbsﬁuãDeÁu…Sèck
(
shaveNumbî
);

436 
	`swcSèπShaveCC
(
shaveNumbî
, 
íåyPoötsDi•¨ôyM≠
[shaveNumber][0],

437 "ii", 
ÆgoCfg
, 
width
);

439 
	`swcWaôShaves
(
SHAVES_USED
, 
li°Shaves
);

441 i‡(
runC⁄fig
 =
STATIC_IMAGES
)

443 
	`swcShaveProfSt›G©hîög
(
CONVERSION_SHAVE
, &
≥rfSå
);

444 
	`swcShaveProfPröt
(
CONVERSION_SHAVE
, &
≥rfSå
);

445 
	`PROF_PRINT
("------------------------------------------------------- \n");

448 
	`DrvShaveL2CacheP¨tôi⁄FlushAndInvÆid©e
(
PARTITION_0
);

449 
	}
}

452 
	$runDi•¨ôyM≠
(
Alg‹ôhmC⁄fig
* 
ÆgoCfg
, 
Di•¨ôyC⁄fig
* 
di•Cfg
,

453 
u32
 
width
, u32 
height
)

455 
u32
 
shaveNumbî
, 
shaveIdx
;

456 
≥rf‹m™˚Såu˘
 
≥rfSå
;

458 i‡(
runC⁄fig
 =
STATIC_IMAGES
)

460 
	`swcShaveProfInô
(&
≥rfSå
);

461 
	`PROF_PRINT
("--- SHAVE Profiling for Disparity Map Computation --- \n");

462 
	`swcShaveProfSèπG©hîög
(
PROFILING_SHAVE
, &
≥rfSå
);

465 
shaveIdx
 = 0; shaveIdx < 
SHAVES_USED
; shaveIdx++)

467 
shaveNumbî
 = 
li°Shaves
[
shaveIdx
];

468 
	`swcRe£tShave
(
shaveNumbî
);

470 
	`swcSëAbsﬁuãDeÁu…Sèck
(
shaveNumbî
);

472 
	`swcSèπShaveCC
(
shaveNumbî
, 
íåyPoötsDi•¨ôyM≠
[shaveNumber][1],

473 "iiii", 
ÆgoCfg
, &
di•Cfg
[
shaveNumbî
], 
width
, 
height
);

476 
	`swcWaôShaves
(
SHAVES_USED
, 
li°Shaves
);

478 i‡(
runC⁄fig
 =
STATIC_IMAGES
)

480 
	`swcShaveProfSt›G©hîög
(
PROFILING_SHAVE
, &
≥rfSå
);

481 
	`swcShaveProfPröt
(
PROFILING_SHAVE
, &
≥rfSå
);

482 
	`PROF_PRINT
("--------------------------------------------------------- \n");

485 
	`DrvShaveL2CacheP¨tôi⁄FlushAndInvÆid©e
(
PARTITION_0
);

486 
	}
}

488 
	$compuãDi•¨ôyM≠
(
Alg‹ôhmC⁄fig
* 
ÆgoCfg
, 
Di•¨ôyC⁄fig
* 
di•Cfg
,

489 
u32
 
width
, u32 
height
, u32 
‰ameNumbî
)

493 i‡(
runC⁄fig
 =
CAMERA_DEMO
)

494 
	`compuãP©ches
((
u8
*Ë&
lutRightBuf
[
‰ameNumbî
],

495 (
u8
*Ë&
lutRightBufRe˘ifõd
[
‰ameNumbî
], 
di•¨ôyM≠
,

496 
ÆgoCfg
, 
di•Cfg
, 
width
, 
height
);

498 i‡(
runC⁄fig
 =
STATIC_IMAGES
)

499 
	`compuãP©ches
((
u8
*Ë&
‰ameBuf„rLe·
[0], (u8*Ë&
‰ameBuf„rRight
[0],

500 
di•¨ôyM≠
, 
ÆgoCfg
, 
di•Cfg
, 
width
, 
height
);

503 
	`öôülizeDi•¨ôyM≠
(
ÆgoCfg
, 
width
);

504 
	`runDi•¨ôyM≠
(
ÆgoCfg
, 
di•Cfg
, 
PATCH_WIDTH
, 
PATCH_HEIGHT
);

507 
	`ªcompuãImageFromP©ches
(&
‰ameBuf„rDi•¨ôõs
[0], 
di•Cfg
);

510 
dmaInCfg
->
ddrAddr
 = (
UI¡32
Ë&
‰ameBuf„rDi•¨ôõs
[0];

511 
dmaOutCfg
->
ddrAddr
 = (
UI¡32
Ë&
‰ameBuf„rDi•¨ôõsMedün
[
‰ameNumbî
];

513 
	`sùpPro˚ssFøme
(
∂Medün
);

514 
	}
}

516  vﬁ©ûê
	gbicubicWaôFœg
 = 0;

517 
	$bicubicIrqH™dÀr
()

519 
bicubicWaôFœg
 = 1;

520 
	}
}

522 
	$maö
()

525 c⁄° 
u32
 
width
 = 
CAM_WINDOW_WIDTH
;

526 c⁄° 
u32
 
height
 = 
CAM_WINDOW_HEIGHT
;

527 
s32
 
bﬂrdSètus
;

529 
u32
 
°©us
;

530 
	`UNUSED
(
°©us
);

531 
ˇmEº‹Ty≥
 
ˇmSètus
;

533 
Di•¨ôyC⁄fig
 
di•Cfg
[
MAX_PATCHES
];

534 
Alg‹ôhmC⁄fig
 
ÆgoCfg
;

536 
s32
 
sc
;

539 
sc
 = 
	`öôClocksAndMem‹y
();

540 i‡(
sc
)

541  
sc
;

542 #ifde‡
MV0212


543 
öt32_t
 
rc
;

544 
uöt32_t
 
ªv
;

545 
BﬂrdI2CInfo
 
öfo
[
NUM_I2C_DEVS
];

546 
BﬂrdC⁄figDesc
 
c⁄fig
[] =

549 
BRDCONFIG_GPIO
,

551 (*)
brdMV0182R5GpioCfgDeÁu…


554 
BRDCONFIG_END
,

555 
NULL


559 
rc
 = 
	`BﬂrdInô
(
c⁄fig
);

560 i‡(
rc
!=
BRDCONFIG_SUCCESS
)

562 
	`¥ötf
("Error: board initialization failed with %ld status\n",

563 
rc
);

564  
rc
;

567 
rc
 = 
	`BﬂrdGëPCBRevisi⁄
(&
ªv
);

568 i‡(
rc
!=
BRDCONFIG_SUCCESS
)

570 
	`¥ötf
("Error: board configurationÑead failed with %ld status\n",

571 
rc
);

572  
rc
;

574 
	`¥ötf
("Bﬂrd Mv0212 inôülized,Ñevisi⁄ = %lu \n", 
ªv
);

576 
bﬂrdSètus
 = 
	`BﬂrdInôExtPŒ
(
EXT_PLL_CFG_74_24_24MHZ
);

577 i‡(
bﬂrdSètus
 !
BRDCONFIG_SUCCESS
)

579 
	`¥ötf
("Error: board initialization failed with %ld status\n",

580 
bﬂrdSètus
);

583 
rc
 = 
	`BﬂrdGëI2CInfo
(
öfo
, 
NUM_I2C_DEVS
);

584 
i2cH™dÀ
=
öfo
[0].
h™dÀr
;

585 #ñi‡
	`deföed
(
MV0182
)

586 
bﬂrdSètus
 = 
	`BﬂrdInôüli£
(
EXT_PLL_CFG_148_24_24MHZ
);

587 
i2cH™dÀ
=
gAµDevHndls
.
i2c0H™dÀ
;

588 i‡(
bﬂrdSètus
 !
B_SUCCESS
)

590 
	`¥ötf
("Error: board initialization failed with %ld status\n",

591 
bﬂrdSètus
);

595 
	`swcLe⁄SëPIL
(0);

596 
	`gíî©eLutTabÀ
();

597 
	`¥ï¨eDrivîD©a
();

600 
	`¥ïro˚ssög
(
homogøphy
, 
homogøphyInvî£d
);

603 
bicubicW¨pC⁄ãxt
 
bicubicCtx
;

604 
bicubicCtx
.
xyRe˘ifõdBuf„r
 = (
Â32
*)&xyRectifiedBuffer[0];

605 
bicubicCtx
.
homogøphy
 = 
homogøphyInvî£d
;

606 
bicubicCtx
.
width
 = 
MAX_WIDTH
;

607 
bicubicCtx
.
height
 = 
MAX_HEIGHT
;

608 
bicubicCtx
.
bµ
 = 1;

609 
bicubicCtx
.
pixñF‹m©
 = 1;

610 
bicubicCtx
.
hndl
 = &
bicubicIrqH™dÀr
;

611 
bicubicCtx
.
úqNumbî
 = 
IRQ_BICUBIC
;

612 
	`bicubicW¨pGíî©eMeshHomogøphyRTP
(&
bicubicCtx
);

615 
	`¥ötf
("ConfiguringÅhe SIPPÖipelines\n");

616 
	`sùpInôülize
();

617 
	`≠pBuûdPùñöe
();

618 
	`≠pC⁄figuªFûãrs
();

619 
	`sùpFöÆizePùñöe
(
∂LutLe·
);

620 
	`sùpFöÆizePùñöe
(
∂LutRight
);

622 
	`≠pBuûdPùñöeMedün
();

623 
	`≠pC⁄figuªFûãrMedün
();

624 
	`sùpFöÆizePùñöe
(
∂Medün
);

627 
	`¥ötf
("Configuring imx208 dual camerasánd datapath\n");

628 
i§CÆlbacks
.
gëBlock
 = 
NULL
;

629 
i§CÆlbacks
.
gëFøme
 = 
AŒoˇãNextLe·CamFømeBuf
;

630 
i§CÆlbacks
.
nŸifiˇti⁄
 = 
NULL
;

631 
ˇŒbacks
.
i§CbfLi°
 = &
i§CÆlbacks
;

632 
ˇŒbacks
.
£ns‹CbfLi°
 = 
NULL
;

633 
ˇmSètus
 = 
	`CamInô
(&
ˇmHndlLe·
, 
°©icCamC⁄fig
, &
u£rCamLe·C⁄fig
,

634 &
ˇŒbacks
, 
i2cH™dÀ
);

636 i‡(
ˇmSètus
 !
CAM_SUCCESS
)

638 
	`¥ötf
("\¿Camî®CAM_B1 c⁄figuøti⁄ faûed (%d).\n", 
ˇmSètus
);

641 
	`CamSèπ
(&
ˇmHndlLe·
);

644 
i§CÆlbacks
.
gëBlock
 = 
NULL
;

645 
i§CÆlbacks
.
gëFøme
 = 
AŒoˇãNextRightCamFømeBuf
;

646 
i§CÆlbacks
.
nŸifiˇti⁄
 = 
NULL
;

647 
ˇŒbacks
.
i§CbfLi°
 = &
i§CÆlbacks
;

648 
ˇŒbacks
.
£ns‹CbfLi°
 = 
NULL
;

649 
ˇmSètus
 = 
	`CamInô
(&
ˇmHndlRight
, 
°©icCamC⁄fig
, &
u£rCamRightC⁄fig
,

650 &
ˇŒbacks
, 
i2cH™dÀ
);

652 i‡(
ˇmSètus
 !
CAM_SUCCESS
)

654 
	`¥ötf
("\¿Camî®CAM_B2 c⁄figuøti⁄ faûed (%d).\n", 
ˇmSètus
);

657 
	`CamSèπ
(&
ˇmHndlRight
);

660 
	`£tBuf„rs
((
u8
*Ë
‰ameBuf„rDi•¨ôõsMedün
, (u8*Ë
‰ameBuf„rDi•¨ôõs
,

661 
di•¨ôyM≠
, 
usbBufPå
);

662 
°©us
 = 
	`Le⁄IPCTxInô
(&
LRTtoLOSCh™√l
, 
mesßgePoﬁ
, 
MSG_QUEUE_SIZE
,

663 
MSG_SIZE
);

664 
	`DrvLe⁄RTSig«lBoŸCom∂ëed
();

666 i‡(
runC⁄fig
 =
STATIC_IMAGES
)

668 
	`lﬂdMemFromFûeSim∂e
("Input//inputFrameLeft_640x480.bin",

669 
MAX_WIDTH
 * 
MAX_HEIGHT
, (*Ë
‰ameBuf„rLe·
);

670 
	`lﬂdMemFromFûeSim∂e
("Input//inputFrameRight_640x480.bin",

671 
MAX_WIDTH
 * 
MAX_HEIGHT
, (*Ë
‰ameBuf„rRight
);

675 
¥o˚ssögFømeCå
 = 
√wCamFømeCåLe·
;

677 
	`¥ötf
("Run Disparity Mapálgorithm.\n");

678 
tyTimeSèmp
 
timîD©aBic
, 
timîD©aSùp
;

679 
u64
 
cy˛esEœp£d
 = 0;

680 
u32
 
toSíd
 = 0;

684 
bicubicWaôFœg
 = 0;

687 if–
√wCamFømeCåLe·
 !
¥o˚ssögFømeCå
 )

689 
¥o˚ssögFømeCå
 = 
√wCamFømeCåLe·
;

690 i‡(
runC⁄fig
 =
STATIC_IMAGES
)

692 
°©us
 = 
	`DrvTimîSèπTicksCou¡
(&
timîD©aSùp
);

696 
dmaInCfgLe·
->
ddrAddr
 = (
UI¡32
)&
ˇmLe·Buf
[(
¥o˚ssögFømeCå
-1Ë% 
MAX_USED_BUF
];

697 
dmaInCfgRight
->
ddrAddr
 = (
UI¡32
)&
ˇmRightBuf
[(
¥o˚ssögFømeCå
-1Ë% 
MAX_USED_BUF
];

698 
dmaOutCfgLe·
->
ddrAddr
 = (
UI¡32
)&
lutLe·Buf
[(
¥o˚ssögFømeCå
-1Ë% 
MAX_USED_BUF
];

699 
dmaOutCfgRight
->
ddrAddr
 = (
UI¡32
)&
lutRightBuf
[(
¥o˚ssögFømeCå
-1Ë% 
MAX_USED_BUF
];

700 
	`sùpPro˚ssFøme
(
∂LutLe·
);

701 
	`sùpPro˚ssFøme
(
∂LutRight
);

703 i‡(
runC⁄fig
 =
STATIC_IMAGES
)

705 
°©us
 = 
	`DrvTimîGëEœp£dTicks
(&
timîD©aSùp
, &
cy˛esEœp£d
);

706 
	`PROF_PRINT
("--- LEON Profiling for SIPP YUV400 Conversion ---\n");

707 
	`PROF_PRINT
(" Execuãd clock cy˛es: %Œu\n", 
cy˛esEœp£d
);

708 
	`PROF_PRINT
("-------------------------------------------------\n");

709 
°©us
 = 
	`DrvTimîSèπTicksCou¡
(&
timîD©aBic
);

713 
	`bicubicW¨pInô
(&
bicubicCtx
);

714 
bicubicCtx
.
öputImageBuf„r
 = (
u8
*)&
lutLe·Buf
[(
¥o˚ssögFømeCå
-1Ë% 
MAX_USED_BUF
];

715 
bicubicCtx
.
ouçutImageBuf„r
 = (
u8
*)&
lutRightBufRe˘ifõd
[(
¥o˚ssögFømeCå
-1Ë% 
MAX_USED_BUF
];

716 
	`bicubicW¨pPro˚ssFøme
(&
bicubicCtx
);

717 !
bicubicWaôFœg
);

719 i‡(
runC⁄fig
 =
STATIC_IMAGES
)

721 
°©us
 = 
	`DrvTimîGëEœp£dTicks
(&
timîD©aBic
, &
cy˛esEœp£d
);

722 
	`PROF_PRINT
("--- LEON Profiling for Rectification Step ---\n");

723 
	`PROF_PRINT
(" Execuãd clock cy˛es: %Œu\n", 
cy˛esEœp£d
);

724 
	`PROF_PRINT
("-------------------------------------------------\n");

728 
	`compuãDi•¨ôyM≠
(&
ÆgoCfg
, 
di•Cfg
, 
width
, 
height
, (
¥o˚ssögFømeCå
-2Ë% 
MAX_USED_BUF
);

731 
	`po°¥o˚ssög
((
u8
*)&
‰ameBuf„rDi•¨ôõsMedün
[(
¥o˚ssögFømeCå
 - 2Ë% 
MAX_USED_BUF
], (
u16
*)&
usbBufPå
[(
usbFømeCå
Ë% MAX_USED_BUF][
PAYLOAD_HEADER_OFFSET
], 
width
, 
height
);

734 
toSíd
 = 1;

735 
°©us
 = 
	`Le⁄IPCSídMesßge
(&
LRTtoLOSCh™√l
, &
toSíd
);

736 
usbFømeCå
++;

739 i‡(
runC⁄fig
 =
STATIC_IMAGES
)

746 i‡(
runC⁄fig
 =
STATIC_IMAGES
)

748 
	`unôTe°Inô
();

751 
u32
 
¸cUnôTe°
 = 
	`swcCÆcCrc32
((
u8
*)&
‰ameBuf„rDi•¨ôõsMedün
[(
¥o˚ssögFømeCå
 - 2Ë% 
MAX_USED_BUF
],

752 (Ë* 
width
 * 
height
, 
À_poöãr
);

753 
	`unôTe°As£π
(
¸cUnôTe°
 =
GOLDEN_CRC
);

756 
	`unôTe°FöÆRï‹t
();

759 
	`¥ötf
("Algorithm finished successfully!\n");

762 
	`DrvLe⁄RTSig«lSt›
();

765 
	}
}

	@Demo/DisparityMap/myriad/leon_rt/setup.c

9 
	~"£tup.h
"

10 
	~<CamîaC⁄fig.h
>

12 
	~<°dio.h
>

13 
	~<°rög.h
>

16 
	$£tBuf„rs
(
u8
* 
‰ameBuf„rDi•¨ôõsMedün
, u8* 
‰ameBuf„rDi•¨ôõs
, u8** 
di•¨ôyM≠
, u8** 
usbBufPå
)

18 
u32
 
i
;

20 
	`mem£t
(
‰ameBuf„rDi•¨ôõsMedün
, 0xAA, 
MAX_WIDTH
 * 
MAX_HEIGHT
 * 
USB_BPP
);

21 
	`mem£t
(
‰ameBuf„rDi•¨ôõs
, 0xAA, 
MAX_WIDTH
 * 
MAX_HEIGHT
);

23 
i
 = 0; i < 
MAX_USED_BUF
; i++)

25 
	`mem£t
(
di•¨ôyM≠
[
i
], 0xAA, 
PATCH_WIDTH
*
PATCH_HEIGHT
);

26 
	`mem£t
(
usbBufPå
[
i
], 0xAA, 
USB_FRAME_SIZE_BYTES
 + 
PAYLOAD_HEADER_OFFSET
);

28 
	}
}

31 
	$£tupC⁄figuøti⁄
(
Di•¨ôyC⁄fig
* 
pyrCfg
, 
Alg‹ôhmC⁄fig
* 
ÆgoCfg
, 
u8
* 
imgL
, u8* 
imgR
, u8* 
di•¨ôõs
, 
u32
 
width
, u32 
height
, u32 
bµ
)

33 
ÆgoCfg
->
cfgCísusKî√lSize
 = 
CENSUS_KERNEL_SIZE
;

34 
ÆgoCfg
->
cfgMedünKî√lSize
 = 
MEDIAN_KERNEL_SIZE
;

35 
ÆgoCfg
->
cfgLöePaddög
 = 
LINE_PADDING
;

36 
ÆgoCfg
->
cfgMedünPaddög
 = 
MEDIAN_PADDING
;

37 
ÆgoCfg
->
cfgMaxDi•¨ôõs
 = 
MAX_DISPARITIES
;

41 
pyrCfg
->
À·Image
.
p1
 = 
imgL
;

42 
pyrCfg
->
À·Image
.
•ec
.
ty≥
 = 
YUV400p
;

43 
pyrCfg
->
À·Image
.
•ec
.
width
 = width;

44 
pyrCfg
->
À·Image
.
•ec
.
height
 = height;

45 
pyrCfg
->
À·Image
.
•ec
.
byãsPP
 = 
bµ
;

48 
pyrCfg
->
rightImage
.
p1
 = 
imgR
;

49 
pyrCfg
->
rightImage
.
•ec
.
ty≥
 = 
YUV400p
;

50 
pyrCfg
->
rightImage
.
•ec
.
width
 = width;

51 
pyrCfg
->
rightImage
.
•ec
.
height
 = height;

52 
pyrCfg
->
rightImage
.
•ec
.
byãsPP
 = 
bµ
;

54 
pyrCfg
->
di•¨ôyM≠
 = 
di•¨ôõs
;

55 
	}
}

58 
	$compuãP©ches
(
u8
* 
‹igöÆFøme
, u8* 
‰ameRe˘ifõd
, u8** 
di•¨ôy
, 
Alg‹ôhmC⁄fig
* 
ÆgoCfg
, 
Di•¨ôyC⁄fig
* 
pyrCfg
, 
u32
 
width
, u32 
height
)

60 (Ë
width
;

62 
u32
 
iy
, 
ix
;

63 
u32
 
∑tchNo
 = 0;

64 
u32
 
iyDi•¨ôõs
 = 0;

65 
u32
 
ixDi•¨ôõs
 = 0;

67 
u32
 
∑tchWidth
 = 
PATCH_WIDTH
;

68 
u32
 
∑tchHeight
 = 
PATCH_HEIGHT
;

70 
u32
 
íd_ix
 = 
MAX_WIDTH
 - 
PATCH_W_OVERLAP
;

71 
u32
 
íd_iy
 = 
MAX_HEIGHT
 - 
PATCH_H_OVERLAP
;

73 
iy
 = 0; iy < 
íd_iy
 ; iy +(
∑tchHeight
 - 
PATCH_H_OVERLAP
))

75 
∑tchHeight
 = ((
height
 - 
iy
Ë< 
PATCH_HEIGHT
) ? (height - iy) : PATCH_HEIGHT;

76 
ixDi•¨ôõs
 = 0;

77 
ix
 = 0; ix < 
íd_ix
 ; ix +(
∑tchWidth
 - 
PATCH_W_OVERLAP
))

79 
∑tchWidth
 = 
PATCH_WIDTH
;

80 
	`£tupC⁄figuøti⁄
(&
pyrCfg
[
∑tchNo
], 
ÆgoCfg
, &
‹igöÆFøme
[
MAX_WIDTH
 * 
iy
 + 
ix
], &
‰ameRe˘ifõd
[MAX_WIDTH * iy + ix], 
di•¨ôy
[∑tchNo], 
∑tchWidth
, 
∑tchHeight
, 1);

82 
∑tchNo
++;

83 
ixDi•¨ôõs
 +
∑tchWidth
;

85 
iyDi•¨ôõs
 +
∑tchHeight
;

87 
	}
}

90 
	$ªcompuãImageFromP©ches
(
u8
* 
‰ameBuf„rDi•¨ôõs
, 
Di•¨ôyC⁄fig
* 
pyrCfg
)

92 
u32
 
∑tchNo
 = 0;

93 
u32
 
sizeOfP©chToSave
 = 0;

94 
u8
* 
‰ameBuf„rDi•¨ôõsPå
 = &
‰ameBuf„rDi•¨ôõs
[0];

96 
∑tchNo
 = 0;Ö©chNÿ< 
MAX_PATCHES
;ÖatchNo++)

98 i‡(
∑tchNo
 == 0)

100 
sizeOfP©chToSave
 = 
pyrCfg
[
∑tchNo
].
À·Image
.
•ec
.
width
 * (pyrCfg[∑tchNo].À·Image.•ec.
height
 - 
PATCH_H_OVERLAP
/2);

101 
	`mem˝y
(
‰ameBuf„rDi•¨ôõsPå
, 
pyrCfg
[
∑tchNo
].
di•¨ôyM≠
, 
sizeOfP©chToSave
);

102 
‰ameBuf„rDi•¨ôõsPå
 +
sizeOfP©chToSave
;

105 i‡(
∑tchNo
 =
MAX_PATCHES
 - 1)

107 
sizeOfP©chToSave
 = 
pyrCfg
[
∑tchNo
].
À·Image
.
•ec
.
width
 * (pyrCfg[∑tchNo].À·Image.•ec.
height
 - 
PATCH_H_OVERLAP
/2);

108 
	`mem˝y
(
‰ameBuf„rDi•¨ôõsPå
, 
pyrCfg
[
∑tchNo
].
di•¨ôyM≠
 +ÖyrCfg[∑tchNo].
À·Image
.
•ec
.
width
 * 
PATCH_H_OVERLAP
/2, 
sizeOfP©chToSave
);

109 
‰ameBuf„rDi•¨ôõsPå
 +
sizeOfP©chToSave
;

113 
sizeOfP©chToSave
 = 
pyrCfg
[
∑tchNo
].
À·Image
.
•ec
.
width
 * (pyrCfg[∑tchNo].À·Image.•ec.
height
 - 
PATCH_H_OVERLAP
);

114 
	`mem˝y
(
‰ameBuf„rDi•¨ôõsPå
, 
pyrCfg
[
∑tchNo
].
di•¨ôyM≠
 +ÖyrCfg[∑tchNo].
À·Image
.
•ec
.
width
 * 
PATCH_H_OVERLAP
/2, 
sizeOfP©chToSave
);

115 
‰ameBuf„rDi•¨ôõsPå
 +
sizeOfP©chToSave
;

118 
	}
}

	@Demo/DisparityMap/myriad/leon_rt/setup.h

13 #i‚de‡
_SETUP_H_


14 
	#_SETUP_H_


	)

16 
	~<Deföes.h
>

17 
	~<Di•¨ôyM≠ApiDeföes.h
>

18 
	~<sùp.h
>

19 
	~<sùpTe°Comm⁄.h
>

35 
£tupC⁄figuøti⁄
(
Di•¨ôyC⁄fig
* 
pyrCfg
, 
Alg‹ôhmC⁄fig
* 
ÆgoCfg
, 
u8
* 
imgL
, u8* 
imgR
, u8* 
di•¨ôõs
, 
u32
 
width
, u32 
height
, u32 
bµ
);

52 
compuãP©ches
(
u8
* 
‹igöÆFøme
, u8* 
‰ameRe˘ifõd
, u8** 
di•¨ôy
, 
Alg‹ôhmC⁄fig
* 
ÆgoCfg
, 
Di•¨ôyC⁄fig
* 
pyrCfg
, 
u32
 
width
, u32 
height
);

64 
ªcompuãImageFromP©ches
(
u8
* 
‰ameBuf„rDi•¨ôõs
, 
Di•¨ôyC⁄fig
* 
pyrCfg
);

78 
£tBuf„rs
(
u8
* 
‰ameBuf„rDi•¨ôõsMedün
, u8* 
‰ameBuf„rDi•¨ôõs
, u8** 
di•¨ôyM≠
, u8** 
usbBufPå
);

	@Demo/DisparityMap/myriad/shared/Buffers.h

11 
	~<mv_ty≥s.h
>

12 
	~<Se˘i⁄s.h
>

13 
	~<Deföes.h
>

15 
	#USED_BUF
 5

	)

17 
u8
 
DDR_BSS
 
	g‰ameBuf„rLe·
[
MAX_WIDTH
 * 
MAX_HEIGHT
];

18 
u8
 
DDR_BSS
 
	g‰ameBuf„rRight
[
MAX_WIDTH
 * 
MAX_HEIGHT
];

	@Demo/DisparityMap/myriad/shared/CameraConfig.h

13 #i‚de‡
CAM_CONFIG_H


14 
	#CAM_CONFIG_H


	)

21 
	#CAM_BPP
 2

22 
	#ALGO_BPP
 1

23 
	#USB_BPP
 2

24 

	)

25 
	#MAX_USED_BUF
 3

26 
	#FIRST_INCOMING_BUF_ID
 2

27 
	#FIRST_OUTGOING_BUF_ID
 0

28 

	)

29 
	#CAM_WINDOW_WIDTH
 640

	)

30 
	#CAM_WINDOW_HEIGHT
 480

	)

32 
	#CAM_WINDOW_START_COLUMN
 164

33 
	#CAM_WINDOW_START_ROW
 34

34 

	)

35 
	#CAM_FRAME_SIZE_BYTES
 (
CAM_WINDOW_WIDTH
 * 
CAM_WINDOW_HEIGHT
 * 
CAM_BPP
)

	)

36 
	#ALGO_FRAME_SIZE_BYTES
 (
CAM_WINDOW_WIDTH
 * 
CAM_WINDOW_HEIGHT
 * 
ALGO_BPP
)

	)

37 
	#USB_FRAME_SIZE_BYTES
 (
CAM_WINDOW_WIDTH
 * 
CAM_WINDOW_HEIGHT
 * 
USB_BPP
)

	)

39 
	#PAYLOAD_HEADER_OFFSET
 16

40 

	)

	@Demo/DisparityMap/myriad/shared/Defines.h

1 #i‚de‡
__DEFINES_SPARSE_H__


2 
	#__DEFINES_SPARSE_H__


	)

5 
	#MAX_WIDTH
 640

	)

6 
	#MAX_HEIGHT
 480

	)

9 
	#SHAVES_USED
 4

	)

12 
	#MAX_PATCHES
 4

	)

13 
	#PATCH_W_OVERLAP
 0

	)

14 
	#PATCH_H_OVERLAP
 (2*
MEDIAN_KERNEL_SIZE
)

15 
	#PATCH_WIDTH
 
MAX_WIDTH


	)

16 
	#PATCH_HEIGHT
 130

	)

19 
	#GOLDEN_CRC
 480864087

	)

20 
	#GOLDEN_CYCLES
 22109822

21 
	#CYCLES_TOLERANCE
 5

	)

24 
	#MAX_PADDING_8
 7

25 
	#MAX_PADDING_16
 15

26 
	#BASE_BUFFER_DISPARITIES_SIZE
 ( (
MAX_WIDTH
+
MAX_PADDING_8
)*
MEDIAN_KERNEL_SIZE
 )

	)

29 #ifde‡
__PC__


30 
	#ALIGNED
(
x
)

	)

32 
	#ALIGNED
(
x
Ë
	`__©åibuã__
((
	`Æig√d
(x)))

	)

	@Demo/DisparityMap/myriad/shared/DisparityMapApiDefines.h

9 #i‚de‡
DISPARITY_MAP_CONFIG_H


10 
	#DISPARITY_MAP_CONFIG_H


	)

12 
	~<mv_ty≥s.h
>

13 
	~<swcFømeTy≥s.h
>

16 
	#MAX_DISPARITIES
 64

	)

17 
	#CENSUS_KERNEL_SIZE
 5

	)

18 
	#MEDIAN_KERNEL_SIZE
 5

	)

19 
	#LINE_PADDING
 2

	)

20 
	#MEDIAN_PADDING
 2

	)

22 #ifde‡
__MOVICOMPILE__


23 c⁄° 
u32
 
	g∑ddögF‹DmaTøns„r
 = 
MEDIAN_PADDING
;

29 
‰ameBuf„r
 
	mÀ·Image
;

30 
‰ameBuf„r
 
	mrightImage
;

31 
u8
* 
	mdi•¨ôyM≠
;

33 } 
	tDi•¨ôyC⁄fig
;

38 
u32
 
	mcfgCísusKî√lSize
;

39 
u32
 
	mcfgMedünKî√lSize
;

40 
u32
 
	mcfgLöePaddög
;

41 
u32
 
	mcfgMedünPaddög
;

42 
u32
 
	mcfgMaxDi•¨ôõs
;

44 } 
	tAlg‹ôhmC⁄fig
;

	@Demo/DisparityMap/myriad/shared/Sections.h

8 #i‚de‡
__SPARSE_SECTIONS_H


9 
	#__SPARSE_SECTIONS_H


	)

10 #i‚de‡
__PC__


11 
	~"sùpPœtf‹m.h
"

14 #ifde‡
__PC__


16 
	#CMX_DMA


	)

17 
	#CMX_TEXT


	)

18 
	#CMX_DATA


	)

19 
	#CMX_DIRECT_DATA


	)

20 
	#CMX_DATA_GLOBAL


	)

21 
	#DDR_DATA


	)

22 
	#DDR_BSS


	)

26 
	#CMX_DMA
 
	`__©åibuã__
((
	`£˘i⁄
(".cmx.cdmaDes¸ùt‹s")))

	)

27 
	#CMX_DIRECT_DATA
 
	`__©åibuã__
((
	`£˘i⁄
(".cmx_dúe˘.d©a")))

	)

28 
	#CMX_DATA_GLOBAL
 
	`__©åibuã__
((
	`£˘i⁄
(".cmx.d©a.globÆ")))

	)

29 
	#DDR_BSS
 
	`__©åibuã__
((
	`£˘i⁄
(".ddr.bss")))

	)

	@Demo/DisparityMap/myriad/shave/DisparityMap.cpp

14 
	~<°dio.h
>

15 
	~<°dlib.h
>

16 
	~<°rög.h
>

19 
	~"Di•¨ôyM≠Api.h
"

20 
	~"Se˘i⁄s.h
"

21 
	~"Deföes.h
"

22 
	~"Hñ≥rs.h
"

25 
	~<˚nsusTønsf‹m5x5.h
>

26 
	~<˚nsusM©chög64.h
>

27 
	~<˚nsusMö64.h
>

30 
	~"swcCdma.h
"

31 
	~<svuComm⁄Shave.h
>

39 
	#DM_Debug
(
°rög
)

	)

40 
	#LEFT_MATCHING
 0

	)

43 #ifde‡
__PC__


44 
	#˚nsusTønsf‹m
 
mvcvCísusTønsf‹m5x5


	)

45 
	#mvcvCísusM©chög64
 
mvcvCísusM©chög64


	)

46 
	#mvcvCísusMö64
 
mvcvCísusMö64


	)

48 
	#˚nsusTønsf‹m
 
mvcvCísusTønsf‹m5x5_asm


	)

49 
	#mvcvCísusM©chög64
 
mvcvCísusM©chög64_asm


	)

50 
	#mvcvCísusMö64
 
mvcvCísusMö64_asm


	)

54 
u32
 
	g˚nsusVÆueLe·
[(
MAX_WIDTH
 + 
MAX_PADDING_8
)*(u32)];

55 
u32
 
	g˚nsusVÆueRight
[(
MAX_WIDTH
 + 
MAX_PADDING_8
 + 
MAX_DISPARITIES
)*(u32)];

56 
u8
 
	gdi•¨ôyCo°
[
MAX_WIDTH
 * 
MAX_DISPARITIES
];

57 
u8
 *
	gdi•¨ôyMö
[
MEDIAN_KERNEL_SIZE
];

58 
u8
 *
	glöesPoöãrLe·
[
CENSUS_KERNEL_SIZE
 + 1];

59 
u8
 *
	glöesPoöãrRight
[
CENSUS_KERNEL_SIZE
 + 1];

60 
u8
 *
	g¥edi˘edDi•
[2];

61 
u8
 *
	gªsu…
[2];

63 
u8
 
	glöeLe·HópBuf„r
[(
MAX_WIDTH
 + 2*
LINE_PADDING
 + 
MAX_PADDING_16
)*(
CENSUS_KERNEL_SIZE
 + 1)];

64 
öçå_t
 
	gimageLöeLe·
[
CENSUS_KERNEL_SIZE
 + 1];

65 
öçå_t
 
	glöeLe·Hóp
;

67 
u8
 
	glöeRightHópBuf„r
[(
MAX_WIDTH
 + 2*
LINE_PADDING
 + 
MAX_PADDING_16
)*(
CENSUS_KERNEL_SIZE
 + 1)];

68 
öçå_t
 
	gimageLöeRight
[
CENSUS_KERNEL_SIZE
 + 1];

69 
öçå_t
 
	glöeRightHóp
;

71 
u8
 
	gªsu…LöeBuf„r
[
MAX_WIDTH
*2] 
ALIGNED
(8);

72 
öçå_t
 
	gªsu…Löe
[2] 
ALIGNED
(8);

73 
öçå_t
 
ªsu…AddrHóp
 
ALIGNED
(8);

75 
u8
 
	gdi•MöLöeBuf„r
[
BASE_BUFFER_DISPARITIES_SIZE
*
MEDIAN_KERNEL_SIZE
] 
ALIGNED
(8);

76 
öçå_t
 
	gdi•MöLöe
[
MEDIAN_KERNEL_SIZE
] 
ALIGNED
(8);

77 
öçå_t
 
di•MöHóp
 
ALIGNED
(8);

79 
u8
 
	g¥edi˘edDi•LöeBuf„r
[(
MAX_WIDTH
 + 2*
MEDIAN_PADDING
)*
MEDIAN_KERNEL_SIZE
];

80 
öçå_t
 
	g¥edi˘edDi•Löe
[
MEDIAN_KERNEL_SIZE
];

81 
öçå_t
 
	g¥edi˘edDi•Hóp
;

83 
u32
 
	gwidthPaddögTo16
 = 0;

84 
u32
 
	gwidthPaddögTo8
 = 0;

85 
u32
 
	gwidthPaddögTo4
 = 0;

86 
u32
 
	gwidthMod16
 = 0;

89 
u32
 
	gdbg_öô
 = 0;

90 
u32
 
	gdbg_öô_pyr
 = 0;

91 
u32
 
	gdbg_ba£
 = 0;

92 
u32
 
	gdbg_pyr
 = 0;

93 
u32
 
	gdbg_run
 = 0;

95 
dmaTønß˘i⁄Li°_t
 
	gli°1
, 
	gli°2
, 
	gli°3
, 
	gli°4
, 
	gli°5
, 
	gli°6
, 
	gli°7
, 
	gli°8
, 
	gli°9
, 
	gli°10
;

104 "C" 
	$di•¨ôyM≠Inô
(
Alg‹ôhmC⁄fig
* 
ÆgoCfg
, 
u32
 
width
)

109 
u32
 
cfgCísusKî√lSize
 = 
ÆgoCfg
->cfgCensusKernelSize;

110 
u32
 
cfgLöePaddög
 = 
ÆgoCfg
->cfgLinePadding;

111 #ifde‡
__PC__


112 
u32
 
cfgMedünPaddög
 = 
ÆgoCfg
->cfgMedianPadding;

114 
u32
 
cfgMedünKî√lSize
 = 
ÆgoCfg
->cfgMedianKernelSize;

117 
widthPaddögTo8
 = (
width
%8 == 0) ? 0 : (8 - width%8);

118 
widthPaddögTo16
 = (
width
%16 == 0) ? 0 : (16 - width%16);

121 
löeLe·Hóp
 = (
öçå_t
)&
löeLe·HópBuf„r
[0];

122 
löeRightHóp
 = (
öçå_t
)&
löeRightHópBuf„r
[0];

123 
ªsu…AddrHóp
 = (
öçå_t
)&
ªsu…LöeBuf„r
[0];

124 
di•MöHóp
 = (
öçå_t
)&
di•MöLöeBuf„r
[0];

125 
¥edi˘edDi•Hóp
 = (
öçå_t
)&
¥edi˘edDi•LöeBuf„r
[0];

128 
u32
 
i
 = 0; i < 
cfgCísusKî√lSize
 + 1; i++)

130 
imageLöeLe·
[
i
] = (
u32
)
löeLe·Hóp
;

131 
löeLe·Hóp
 +
width
 + 2*
cfgLöePaddög
 + 
widthPaddögTo16
;

135 
u32
 
i
 = 0; i < 
cfgCísusKî√lSize
 + 1; i++)

137 
imageLöeRight
[
i
] = (
u32
)
löeRightHóp
;

138 
löeRightHóp
 +
width
 + 2*
cfgLöePaddög
 + 
widthPaddögTo16
;

142 
u32
 
i
 = 0; i < 2; i++)

144 
ªsu…Löe
[
i
] = (
u32
)
ªsu…AddrHóp
;

145 
ªsu…AddrHóp
 +
width
;

149 
u32
 
i
 = 0; i < 
cfgCísusKî√lSize
 + 1; i++)

151 
löesPoöãrLe·
[
i
] = (
u8
*)
imageLöeLe·
[i];

152 
löesPoöãrRight
[
i
] = (
u8
*)
imageLöeRight
[i];

153 i‡(
i
 < 2)

154 
ªsu…
[
i
] = (
u8
*)
ªsu…Löe
[i];

158 
u32
 
i
 = 0; i < 
cfgCísusKî√lSize
 + 1; i++)

160 
di•MöLöe
[
i
] = (
u32
)
di•MöHóp
;

161 #ifde‡
__PC__


162 
di•MöHóp
 +
width
 + 2*
cfgMedünPaddög
;

164 
di•MöHóp
 +
width
;

169 
u32
 
i
 = 0; i < 
cfgMedünKî√lSize
; i++)

171 
di•¨ôyMö
[
i
] = (
u8
*)
di•MöLöe
[i];

175 
s32
 
i
 = 0; i < 2; i++)

177 
¥edi˘edDi•Löe
[
i
] = (
u32
)
¥edi˘edDi•Hóp
;

178 
¥edi˘edDi•Hóp
 +(
width
 + 1)/2;

182 
s32
 
i
 = 0; i < 2; i++)

184 
¥edi˘edDi•
[
i
] = (
u8
*)
¥edi˘edDi•Löe
[i];

187 
SHAVE_HALT
;

188 
	}
}

189 
u8
 *
p1Src
, *
p1D°
, *
p2Src
, *
p2D°
, *
p3Src
, *
p3D°
, *
p4Src
, *
p4D°
;

193 "C" 
	$di•¨ôyM≠Ba£
(
Alg‹ôhmC⁄fig
* 
ÆgoCfg
,

194 
u8
 *
À·Image
,

195 
u8
 *
rightImage
,

196 
u8
 *
di•¨ôy
,

197 
u32
 
width
,

198 
u32
 
height
)

200 
dmaTønß˘i⁄Li°_t
 *
ªf1
, *
ªf2
, *
ªf3
, *
ªf4
, *
ªf5
, *
ªf6
;

201 
dmaReque°îId
 
id1
 = 
	`dmaInôReque°î
(3);

204 
u32
 
numbîOfDi•¨ôõs
 = 
ÆgoCfg
->
cfgMaxDi•¨ôõs
;

205 
u32
 
cfgCísusKî√lSize
 = 
ÆgoCfg
->cfgCensusKernelSize;

206 
u32
 
cfgLöePaddög
 = 
ÆgoCfg
->cfgLinePadding;

207 
u32
 
cfgMedünKî√lSize
 = 
ÆgoCfg
->cfgMedianKernelSize;

209 
u32
 
ö¸emítPoöãrs
 = 0;

211 
u32
 
hÆfKî√l
 = (u32)(
cfgCísusKî√lSize
 / 2);

213 
u32
 
löe
;

218 
u32
 
i
 = 0; i < 
cfgCísusKî√lSize
; i++)

221 
löesPoöãrLe·
[
i
] +
cfgLöePaddög
;

222 
löesPoöãrRight
[
i
] +
cfgLöePaddög
;

223 i‡(
i
 <
hÆfKî√l
)

226 
ªf1
 = 
	`dmaCª©eTønß˘i⁄
(
id1
, &
li°1
, (
u8
*)
À·Image
, (u8*)
löesPoöãrLe·
[
i
], 
width
);

227 
ªf2
 = 
	`dmaCª©eTønß˘i⁄
(
id1
, &
li°2
, (
u8
*)
rightImage
, (u8*)
löesPoöãrRight
[
i
], 
width
);

232 
ªf1
 = 
	`dmaCª©eTønß˘i⁄
(
id1
, &
li°1
, (
u8
*)(
À·Image
 + (
u32
)(
i
 - 
hÆfKî√l
Ë* 
width
), (u8*)
löesPoöãrLe·
[i], width);

233 
ªf2
 = 
	`dmaCª©eTønß˘i⁄
(
id1
, &
li°2
, (
u8
*)(
rightImage
 + (
u32
)(
i
 - 
hÆfKî√l
Ë* 
width
), (u8*)
löesPoöãrRight
[i], width);

236 
	`dmaLökTasks
(
ªf1
, 1, 
ªf2
);

237 
	`dmaSèπLi°Task
(
ªf1
);

238 
	`dmaWaôTask
(
ªf1
);

241 
	`addPaddög
(
löesPoöãrLe·
[
i
], 
width
, 
cfgLöePaddög
);

242 
	`addPaddög
(
löesPoöãrRight
[
i
], 
width
, 
cfgLöePaddög
);

245 
	`ÆignLöe
(
löesPoöãrLe·
[
i
], 
width
 + 
cfgLöePaddög
, 
widthPaddögTo16
);

246 
	`ÆignLöe
(
löesPoöãrRight
[
i
], 
width
 + 
cfgLöePaddög
, 
widthPaddögTo16
);

254 
löesPoöãrLe·
[
cfgCísusKî√lSize
] +
cfgLöePaddög
;

255 
löesPoöãrRight
[
cfgCísusKî√lSize
] +
cfgLöePaddög
;

256 
u32
 
i
 = 0; i < 
cfgMedünKî√lSize
; i++)

257 
di•¨ôyMö
[
i
] +
ö¸emítPoöãrs
;

259 
u32
 
off£tBuf„r
 = 
hÆfKî√l
 + 1;

262 
u32
 
i
 = 0; i < 
height
; i++)

265 i‡((
i
 + 
off£tBuf„r
Ë>
height
)

266 
löe
 = 
height
 - 1;

268 
löe
 = 
i
 + 
off£tBuf„r
;

270 
ªf3
 = 
	`dmaCª©eTønß˘i⁄
(
id1
, &
li°3
, (
u8
*)(
À·Image
 + 
löe
 * 
width
), (u8*)
löesPoöãrLe·
[
cfgCísusKî√lSize
], width);

271 
ªf4
 = 
	`dmaCª©eTønß˘i⁄
(
id1
, &
li°4
, (
u8
*)(
rightImage
 + 
löe
 * 
width
), (u8*)
löesPoöãrRight
[
cfgCísusKî√lSize
], width);

272 
ªf5
 = 0;

273 i‡(
i
 >= 1)

275 
ªf5
 = 
	`dmaCª©eTønß˘i⁄
(
id1
, &
li°5
, (
u8
*)
ªsu…
[0], (u8*)(
di•¨ôy
 + (
i
 - 1Ë* 
width
), width );

278 
	`dmaLökTasks
(
ªf3
, 2, 
ªf4
, 
ªf5
);

279 
	`dmaSèπLi°Task
(
ªf3
);

282 
	`DM_Debug
("Step 1 - Compute Census \n");

283 
	`˚nsusTønsf‹m
(
löesPoöãrLe·
, 
˚nsusVÆueLe·
, 
width
 + 
widthPaddögTo16
);

284 
	`˚nsusTønsf‹m
(
löesPoöãrRight
, &
˚nsusVÆueRight
[
numbîOfDi•¨ôõs
], 
width
 + 
widthPaddögTo16
);

287 
	`DM_Debug
("Step 2 - Compute Cost Map \n");

288 
u32
 
j
 = 0; j < 
numbîOfDi•¨ôõs
; j++)

289 
˚nsusVÆueRight
[
j
] = císusVÆueRight[
numbîOfDi•¨ôõs
];

292 
	`ÆignLöeU32
(
˚nsusVÆueLe·
, 
width
, 
widthPaddögTo4
);

293 
	`ÆignLöeU32
(
˚nsusVÆueRight
, 
width
 + 
numbîOfDi•¨ôõs
, 
widthPaddögTo4
);

295 
	`mvcvCísusM©chög64
(
˚nsusVÆueLe·
, &
˚nsusVÆueRight
[
numbîOfDi•¨ôõs
], 
di•¨ôyCo°
, 
width
 + 
widthPaddögTo4
, 
LEFT_MATCHING
);

297 
	`dmaWaôTask
(
ªf3
);

300 
	`DM_Debug
("Step 3 - Compute Disp \n");

301 
	`mvcvCísusMö64
(
di•¨ôyCo°
, 
ªsu…
[0],Ñesu…[1], 
width
);

304 
	`addPaddög
(
löesPoöãrLe·
[
cfgCísusKî√lSize
], 
width
, 
cfgLöePaddög
);

305 
	`addPaddög
(
löesPoöãrRight
[
cfgCísusKî√lSize
], 
width
, 
cfgLöePaddög
);

308 
	`rŸ©eBuf„rsO√Posôi⁄
(
löesPoöãrLe·
, 
cfgCísusKî√lSize
);

309 
	`rŸ©eBuf„rsO√Posôi⁄
(
löesPoöãrRight
, 
cfgCísusKî√lSize
);

312 
ªf6
 = 
	`dmaCª©eTønß˘i⁄
(
id1
, &
li°6
, (
u8
*)
ªsu…
[0], (u8*)(
di•¨ôy
 + (
height
 - 1Ë* 
width
), width );

313 
	`dmaLökTasks
(
ªf6
, 0);

314 
	`dmaSèπLi°Task
(
ªf6
);

315 
	`dmaWaôTask
(
ªf6
);

318 
u32
 
i
 = 0; i < 
cfgCísusKî√lSize
 + 1; i++)

320 
löesPoöãrLe·
[
i
] -
cfgLöePaddög
;

321 
löesPoöãrRight
[
i
] -
cfgLöePaddög
;

323 
u32
 
i
 = 0; i < 
cfgMedünKî√lSize
; i++)

324 
di•¨ôyMö
[
i
] -
ö¸emítPoöãrs
;

325 
	}
}

330 
	$medünFûãr5x5
(
u32
 
widthLöe
, 
u8
 **
outLöe
, u8 ** 
öLöe
)

332 
u32
 
i
 = 0;

333 
u8
 *
out
;

334 
u32
 
j
 = 0;

335 
u32
 
hi°ogøm
[256];

336 
u32
 
e
 = 0;

337 c⁄° 
u32
 
MED_HEIGHT
 = 5;

338 c⁄° 
u32
 
MED_WIDTH
 = 5;

339 c⁄° 
u32
 
MED_LIMIT
 = (
MED_WIDTH
*
MED_HEIGHT
)/2 + 1;

341 
out
 = *
outLöe
;

343 
i
=0; i<256; i++Ë
hi°ogøm
[i] = 0;

345 
i
=0; i<
MED_HEIGHT
; i++)

347 
j
=0; j<
MED_WIDTH
; j++)

352 
e
 = 
öLöe
[
i
][(
s32
)(
j
-(
MED_WIDTH
>>1))];

353 
hi°ogøm
[
e
]++;

356 
i
=0; i<
widthLöe
; i++)

358 
e
 = 0;

359 
j
 = 0;

361 
j
<256)

363 
e
+=
hi°ogøm
[
j
];

364 i‡(
e
<
MED_LIMIT
)

366 
j
++;

369 
out
[
i
] = 
j
;

370 
j
 = 256;

374 
j
=0; j<
MED_HEIGHT
; j++)

379 
e
 = 
öLöe
[
j
][(
s32
)(
i
-(
MED_WIDTH
>>1))];

380 
hi°ogøm
[
e
]--;

383 
j
=0; j<
MED_HEIGHT
; j++)

385 
e
 = 
öLöe
[
j
][
i
+1+(
MED_WIDTH
>>1)];

386 
hi°ogøm
[
e
]++;

390 
	}
}

394 
	$medünFûãrög
(
Alg‹ôhmC⁄fig
* 
ÆgoCfg
,

395 
u8
 *
di•¨ôy
,

396 
u8
* 
di•¨ôyMedün
,

397 
u32
 
width
,

398 
u32
 
height
)

400 
dmaTønß˘i⁄Li°_t
 *
ªf3
, *
ªf4
, *
ªf5
, *
ªf6
;

401 
dmaReque°îId
 
id1
 = 
	`dmaInôReque°î
(3);

404 
u32
 
cfgMedünPaddög
 = 
ÆgoCfg
->cfgMedianPadding;

405 
u32
 
cfgMedünKî√lSize
 = 
ÆgoCfg
->cfgMedianKernelSize;

408 
u32
 
i
 = 0; i < 
height
; i++)

410 
ªf3
 = 
	`dmaCª©eTønß˘i⁄
(
id1
, &
li°3
, (
u8
*)(
di•¨ôy
 + 
i
 * 
width
), (u8*)
löesPoöãrLe·
[ò% 
cfgMedünKî√lSize
], width);

411 
	`dmaSèπLi°Task
(
ªf3
);

412 
	`dmaWaôTask
(
ªf3
);

414 
	`addPaddög
(
löesPoöãrLe·
[
i
 % 
cfgMedünKî√lSize
], 
width
, 
cfgMedünPaddög
);

416 i‡(
i
 == 0)

418 
	`mem˝y
(
löesPoöãrLe·
[3]-
cfgMedünPaddög
,ÜöesPoöãrLe·[0]-cfgMedünPaddög, 
width
+2*cfgMedianPadding);

419 
	`mem˝y
(
löesPoöãrLe·
[4]-
cfgMedünPaddög
,ÜöesPoöãrLe·[0]-cfgMedünPaddög, 
width
+2*cfgMedianPadding);

421 i‡(
i
 >= 2)

423 
	`medünFûãr5x5
(
width
, &
ªsu…
[0], 
löesPoöãrLe·
);

424 
ªf4
 = 
	`dmaCª©eTønß˘i⁄
(
id1
, &
li°5
, (
u8
*)
ªsu…
[0], (u8*)(
di•¨ôyMedün
 + (
i
 - 2Ë* 
width
), width);

425 
	`dmaSèπLi°Task
(
ªf4
);

426 
	`dmaWaôTask
(
ªf4
);

429 
	`mem˝y
–
löesPoöãrLe·
[
height
 % 
cfgMedünKî√lSize
]-
cfgMedünPaddög
,

430 
löesPoöãrLe·
[(
height
-1Ë% 
cfgMedünKî√lSize
]-
cfgMedünPaddög
,

431 
width
+ 2*
cfgMedünPaddög
);

432 
	`medünFûãr5x5
(
width
, &
ªsu…
[0], 
löesPoöãrLe·
);

433 
ªf5
 = 
	`dmaCª©eTønß˘i⁄
(
id1
, &
li°5
, (
u8
*)
ªsu…
[0], (u8*)(
di•¨ôyMedün
 + (
height
 - 2Ë* 
width
), width);

434 
	`dmaSèπLi°Task
(
ªf5
);

435 
	`dmaWaôTask
(
ªf5
);

437 
	`mem˝y
–
löesPoöãrLe·
[(
height
+1Ë% 
cfgMedünKî√lSize
]-
cfgMedünPaddög
,

438 
löesPoöãrLe·
[(
height
-1Ë% 
cfgMedünKî√lSize
]-
cfgMedünPaddög
,

439 
width
+ 2*
cfgMedünPaddög
);

440 
	`medünFûãr5x5
(
width
, &
ªsu…
[0], 
löesPoöãrLe·
);

441 
ªf6
 = 
	`dmaCª©eTønß˘i⁄
(
id1
, &
li°6
, (
u8
*)
ªsu…
[0], (u8*)(
di•¨ôyMedün
 + (
height
 - 1Ë* 
width
), width);

442 
	`dmaSèπLi°Task
(
ªf6
);

443 
	`dmaWaôTask
(
ªf6
);

444 
	}
}

449 
	$di•¨ôyM≠Run
(
Alg‹ôhmC⁄fig
* 
ÆgoCfg
,

450 
Di•¨ôyC⁄fig
* 
pyrCfg
,

451 
u32
 
widthL0
,

452 
u32
 
heightL0
)

454 
	`di•¨ôyM≠Ba£
(
ÆgoCfg
, 
pyrCfg
->
À·Image
.
p1
,ÖyrCfg->
rightImage
.p1,ÖyrCfg->
di•¨ôyM≠
, 
widthL0
, 
heightL0
);

455 
	}
}

460 "C" 
	$di•¨ôyM≠RunP©ches
(
Alg‹ôhmC⁄fig
* 
ÆgoCfg
,

461 
Di•¨ôyC⁄fig
* 
pyrCfg
,

462 
u32
 
widthL0
,

463 
u32
 
heightL0
)

465 
	`UNUSED
(
widthL0
);

466 
	`UNUSED
(
heightL0
);

467 
	`di•¨ôyM≠Run
(
ÆgoCfg
, 
pyrCfg
,ÖyrCfg->
À·Image
.
•ec
.
width
,ÖyrCfg->À·Image.•ec.
height
);

469 
SHAVE_HALT
;

470 
	}
}

	@Demo/DisparityMap/myriad/shave/DisparityMapApi.h

10 #i‚de‡
DISP_MAP_H


11 
	#DISP_MAP_H


	)

14 
	~<Di•¨ôyM≠ApiDeföes.h
>

31 "C" 
di•¨ôyM≠Inô
(
Alg‹ôhmC⁄fig
* 
ÆgoCfg
,

32 
u32
 
width
);

50 "C" 
di•¨ôyM≠Ba£
(
Alg‹ôhmC⁄fig
* 
ÆgoCfg
,

51 
u8
 *
À·Image
,

52 
u8
 *
rightImage
,

53 
u8
 *
di•¨ôy
,

54 
u32
 
width
,

55 
u32
 
height
);

70 "C" 
di•¨ôyM≠RunP©ches
(
Alg‹ôhmC⁄fig
* 
ÆgoCfg
,

71 
Di•¨ôyC⁄fig
* 
di•Cfg
,

72 
u32
 
width
,

73 
u32
 
height
);

75 
medünFûãrög
(
Alg‹ôhmC⁄fig
* 
ÆgoCfg
,

76 
u8
 *
di•¨ôy
,

77 
u8
* 
di•¨ôyMedün
,

78 
u32
 
width
,

79 
u32
 
height
);

	@Demo/DisparityMap/myriad/shave/Helpers.cpp

9 
	~"Hñ≥rs.h
"

14 
	$addPaddög
(
u8
 *
poöãr
, 
u32
 
width
, u32 
∑ddögSize
)

16 
u32
 
widthAux
 = 
width
 - 1;

18 
u32
 
i
 = 1; i <
∑ddögSize
; i++)

20 *(
poöãr
 - 
i
) = *pointer;

21 *(
poöãr
 + 
widthAux
 + 
i
) = *(pointer + widthAux);

23 
	}
}

28 
	$ÆignLöe
(
u8
 *
poöãr
, 
u32
 
width
, u32 
∑ddögSize
)

30 
u32
 
i
 = 0; i < 
∑ddögSize
; i++)

32 *(
poöãr
 + 
width
 - 1 + 
i
) = *(pointer + width -1);

34 
	}
}

39 
	$ÆignLöeU32
(
u32
 *
poöãr
, u32 
width
, u32 
∑ddögSize
)

41 
u32
 
i
 = 0; i < 
∑ddögSize
; i++)

43 *(
poöãr
 + 
width
 - 1 + 
i
) = *(pointer + width -1);

45 
	}
}

50 
	$rŸ©eBuf„rsO√Posôi⁄
(
u8
* 
±rs
[], 
u32
 
num
)

53 
u8
* 
tmp
 = 
±rs
[0];

56 
u32
 
i
 = 0; i < 
num
; i++)

58 
±rs
[
i
] =Ötrs[i + 1];

61 
±rs
[5] = 
tmp
;

62 
	}
}

67 
	$rŸ©eBuf„rs
(
u8
* 
±rs
[], 
u32
 
num
)

70 
u8
* 
tmp1
 = 
±rs
[0];

71 
u8
* 
tmp2
 = 
±rs
[1];

74 
u32
 
i
 = 0; i < 
num
 - 2; i += 2)

76 
±rs
[
i
] =Ötrs[i + 2];

77 
±rs
[
i
 + 1] =Ötrs[i + 3];

80 
±rs
[2] =Ötrs[4];

81 
±rs
[3] = 
tmp1
;

82 
±rs
[4] = 
tmp2
;

83 
	}
}

	@Demo/DisparityMap/myriad/shave/Helpers.h

8 #i‚de‡
HELPERS_FUNCTIONS_H


9 
	#HELPERS_FUNCTIONS_H


	)

11 
	~<mv_ty≥s.h
>

12 
	~<mvcv_ty≥s.h
>

14 
addPaddög
(
u8
 *
poöãr
, 
u32
 
width
, u32 
∑ddögSize
);

15 
ÆignLöe
(
u8
 *
poöãr
, 
u32
 
width
, u32 
∑ddögSize
);

16 
ÆignLöeU32
(
u32
 *
poöãr
, u32 
width
, u32 
∑ddögSize
);

17 
rŸ©eBuf„rs
(
u8
* 
±rs
[], 
u32
 
num
);

18 
rŸ©eBuf„rsO√Posôi⁄
(
u8
* 
±rs
[], 
u32
 
num
);

	@Demo/DisparityMap/myriad/shave/Preprocessing.cpp

9 
	~"Pª¥o˚ssög.h
"

10 
	~<Deföes.h
>

11 
	~<Se˘i⁄s.h
>

13 
	~<svuComm⁄Shave.h
>

15 
	~<m©rixInv3x3_Â32.h
>

16 
	~<c⁄vîtYUV400ToYUV422.h
>

18 #ifde‡
__PC__


19 
	#m©rixInvît
 
mvcvM©rixInv3x3_Â32


	)

20 
	#c⁄vîtYUV400ToYUV422
 
mvcvC⁄vîtYUV400ToYUV422


	)

22 
	#m©rixInvît
 
mvcvM©rixInv3x3_Â32_asm


	)

23 
	#c⁄vîtYUV400ToYUV422
 
mvcvC⁄vîtYUV400ToYUV422_asm


	)

26 
dmaTønß˘i⁄Li°_t
 
CMX_DMA
 
	gl°1
, 
	gl°2
;

27 
Â32
 
	gmBuf„r
[3*3];

29 "C" 
	$Pª¥o˚ssög
(
Â32
* 
H
, fp32* 
övî£H
)

31 
Â32
* 
öM©rix
[9] = {&
H
[0], &H[3], &H[6], &H[1], &H[4], &H[7], &H[2], &H[5], &H[8]};

32 
Â32
* 
outM©rix
[9] = {&
mBuf„r
[0], &mBuffer[3], &mBuffer[6], &mBuffer[1], &mBuffer[4], &mBuffer[7], &mBuffer[2], &mBuffer[5], &mBuffer[8]};

34 
	`m©rixInvît
(
öM©rix
, 
outM©rix
);

36 
övî£H
[0] = 
outM©rix
[0][0];

37 
övî£H
[1] = 
outM©rix
[1][0];

38 
övî£H
[2] = 
outM©rix
[2][0];

40 
övî£H
[3] = 
outM©rix
[0][1];

41 
övî£H
[4] = 
outM©rix
[1][1];

42 
övî£H
[5] = 
outM©rix
[2][1];

44 
övî£H
[6] = 
outM©rix
[0][2];

45 
övî£H
[7] = 
outM©rix
[1][2];

46 
övî£H
[8] = 
outM©rix
[2][2];

48 
SHAVE_HALT
;

49 
	}
}

51 "C" 
	$Po°¥o˚ssög
(
u8
* 
öput
, 
u16
* 
ouçut
, 
u32
 
width
, u32 
height
)

53 
dmaTønß˘i⁄Li°_t
 *
ªf1
, *
ªf2
;

55 
dmaReque°îId
 
id1
 = 
	`dmaInôReque°î
(3);

57 
u8
 
öLöeBuf
[
MAX_WIDTH
];

58 
u16
 
outLöeBuf
[
MAX_WIDTH
];

60 
u8
* 
öLöePå
 = &
öLöeBuf
[0];

61 
u16
* 
outLöePå
 = &
outLöeBuf
[0];

63 
u32
 
i
 = 0; i < 
height
; i++)

65 
ªf1
 = 
	`dmaCª©eTønß˘i⁄
(
id1
, &
l°1
, (
u8
*)(
öput
 + 
i
 * 
width
), (u8*)
öLöePå
, width);

66 
	`dmaLökTasks
(
ªf1
, 0);

67 
	`dmaSèπLi°Task
(
ªf1
);

68 
	`dmaWaôTask
(
ªf1
);

70 
	`c⁄vîtYUV400ToYUV422
(
öLöePå
, 
outLöePå
, 
width
);

72 
ªf2
 = 
	`dmaCª©eTønß˘i⁄
(
id1
, &
l°2
, (
u8
*)
outLöePå
, (u8*)(
ouçut
 + 
i
 * 
width
), width*2);

73 
	`dmaLökTasks
(
ªf2
, 0);

74 
	`dmaSèπLi°Task
(
ªf2
);

75 
	`dmaWaôTask
(
ªf2
);

77 
SHAVE_HALT
;

78 
	}
}

	@Demo/DisparityMap/myriad/shave/Preprocessing.h

10 #i‚de‡
PREPROCESSING_SHAVE_H


11 
	#DISP_MAP_H


	)

12 
	~<swcCdma.h
>

13 
	~<mv_ty≥s.h
>

15 "C" 
Pª¥o˚ssög
(
Â32
* 
H
, fp32* 
övî£H
);

17 "C" 
Po°¥o˚ssög
(
u8
* 
öput
, 
u16
* 
ouçut
, 
u32
 
width
, u32 
height
);

	@Demo/DisparityMap/pc/src/Main.cpp

10 
	#_CRT_SECURE_NO_WARNINGS


	)

11 
	#_SCL_SECURE_NO_WARNINGS


	)

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

21 
	~<°rög.h
>

23 
usög
 
«me•a˚
 
	g°d
;

26 
	~"Di•¨ôyM≠Api.h
"

27 
	~<Buf„rs.h
>

28 
	~<swcCrc.h
>

31 c⁄° 
	gMAX_DISPARITY
 = 64;

34 
u8
 
	g‰ameBuf„rDi•¨ôõsP©ches
[
MAX_WIDTH
 * (
MAX_HEIGHT
 + 
MAX_PATCHES
 * 2*
PATCH_H_OVERLAP
)];

35 
u8
 
	g‰ameBuf„rDi•¨ôõs
[
MAX_WIDTH
 * 
MAX_HEIGHT
];

36 
u8
 
	gdi•¨ôyMedün
[
MAX_WIDTH
 * 
MAX_HEIGHT
];

42 
	$£tupC⁄figuøti⁄
(
Di•¨ôyC⁄fig
* 
di•Cfg
, 
Alg‹ôhmC⁄fig
* 
ÆgoCfg
, 
u8
* 
imgL
, u8* 
imgR
, u8* 
di•¨ôõs
, 
u32
 
width
, u32 
height
, u32 
bµ
)

44 
ÆgoCfg
->
cfgCísusKî√lSize
 = 
CENSUS_KERNEL_SIZE
;

45 
ÆgoCfg
->
cfgMedünKî√lSize
 = 
MEDIAN_KERNEL_SIZE
;

46 
ÆgoCfg
->
cfgLöePaddög
 = 
LINE_PADDING
;

47 
ÆgoCfg
->
cfgMedünPaddög
 = 
MEDIAN_PADDING
;

48 
ÆgoCfg
->
cfgMaxDi•¨ôõs
 = 
MAX_DISPARITIES
;

51 
di•Cfg
->
À·Image
.
p1
 = 
imgL
;

52 
di•Cfg
->
À·Image
.
•ec
.
ty≥
 = 
YUV400p
;

53 
di•Cfg
->
À·Image
.
•ec
.
width
 = width;

54 
di•Cfg
->
À·Image
.
•ec
.
height
 = height;

55 
di•Cfg
->
À·Image
.
•ec
.
byãsPP
 = 
bµ
;

58 
di•Cfg
->
rightImage
.
p1
 = 
imgR
;

59 
di•Cfg
->
rightImage
.
•ec
.
ty≥
 = 
YUV400p
;

60 
di•Cfg
->
rightImage
.
•ec
.
width
 = width;

61 
di•Cfg
->
rightImage
.
•ec
.
height
 = height;

62 
di•Cfg
->
rightImage
.
•ec
.
byãsPP
 = 
bµ
;

65 
di•Cfg
->
di•¨ôyM≠
 = 
di•¨ôõs
;

66 
	}
}

69 
	$maö
(
¨gc
, * 
¨gv
[])

72 
FILE
* 
öputD©aLe·
 = 
	`f›í
("../../myriad/Input/inputFrameLeft_640x480.bin", "rb");

73 
FILE
* 
öputD©aRight
 = 
	`f›í
("../../myriad/Input/inputFrameRight_640x480.bin", "rb");

75 
width
 = 
MAX_WIDTH
;

76 
height
 = 
MAX_HEIGHT
;

77 * 
imgLe·
 = (*)
	`mÆloc
((Ë* 
width
 * 
height
);

78 * 
imgRight
 = (*)
	`mÆloc
((Ë* 
width
 * 
height
);

80 
size_t
 
byãs
;

81 
byãs
=
	`‰ód
(
imgLe·
, 
width
 * 
height
, 1, 
öputD©aLe·
);

82 if(
byãs
==0){
	`¥ötf
("Error\n"); 1;}

83 
byãs
=
	`‰ód
(
imgRight
, 
width
 * 
height
, 1, 
öputD©aRight
);

84 if(
byãs
==0){
	`¥ötf
("Error\n"); 1;}

85 
	`f˛o£
(
öputD©aLe·
);

86 
	`f˛o£
(
öputD©aRight
);

89 
Di•¨ôyC⁄fig
 
di•Cfg
[
MAX_PATCHES
];

90 
Alg‹ôhmC⁄fig
 
ÆgoCfg
;

91 
∑tchNo
 = 0;

92 
iyDi•¨ôõs
 = 0;

93 
ixDi•¨ôõs
 = 0;

94 
íd_ix
 = 
MAX_WIDTH
 - 
PATCH_W_OVERLAP
;

95 
íd_iy
 = 
MAX_HEIGHT
 - 
PATCH_H_OVERLAP
;

96 
∑tchWidth
 = 
PATCH_WIDTH
;

97 
∑tchHeight
 = 
PATCH_HEIGHT
;

99 
iy
 = 0; iy < 
íd_iy
; iy +(
∑tchHeight
 - 
PATCH_H_OVERLAP
))

101 
∑tchHeight
 = ((
height
 - 
iy
Ë< 
PATCH_HEIGHT
) ? (height - iy) : PATCH_HEIGHT;

102 
ixDi•¨ôõs
 = 0;

103 
ix
 = 0; ix < 
íd_ix
; ix +(
∑tchWidth
 - 
PATCH_W_OVERLAP
))

105 
∑tchWidth
 = 
PATCH_WIDTH
;

107 
	`¥ötf
("PATCH %d: ix = %4d, iy = %4d, width = %4d, heighà%4d\n", 
∑tchNo
, 
ix
, 
iy
, 
∑tchWidth
, 
∑tchHeight
);

109 
	`£tupC⁄figuøti⁄
(&
di•Cfg
[
∑tchNo
], &
ÆgoCfg
, &
imgLe·
[
MAX_WIDTH
 * 
iy
 + 
ix
], &
imgRight
[MAX_WIDTH * iy + ix],

110 &
‰ameBuf„rDi•¨ôõsP©ches
[
MAX_WIDTH
 * 
iyDi•¨ôõs
 + 
ixDi•¨ôõs
], 
∑tchWidth
, 
∑tchHeight
, 1);

112 
fûíame00
[100];

113 
	`•rötf
(
fûíame00
, "∑tch%d.bö", 
∑tchNo
);

114 
FILE
* 
f
 = 
	`f›í
(
fûíame00
, "wb");

115 
	`fwrôe
(&
imgLe·
[
MAX_WIDTH
 * 
iy
 + 
ix
], 
∑tchWidth
*
∑tchHeight
, 1, 
f
);

116 
	`f˛o£
(
f
);

118 
∑tchNo
++;

119 
ixDi•¨ôõs
 +
∑tchWidth
;

121 
iyDi•¨ôõs
 +
∑tchHeight
;

125 
	`di•¨ôyM≠Inô
(&
ÆgoCfg
, 
PATCH_WIDTH
);

128 
∑tchNo
 = 0;Ö©chNÿ< 
MAX_PATCHES
;ÖatchNo++)

130 
	`di•¨ôyM≠RunP©ches
(&
ÆgoCfg
, &
di•Cfg
[
∑tchNo
], di•Cfg[∑tchNo].
À·Image
.
•ec
.
width
, di•Cfg[∑tchNo].À·Image.•ec.
height
);

134 
FILE
* 
di•¨ôyM≠Fûe
 = 
	`f›í
("disparityMap.yuv", "wb");

135 
˙t
 = 0;

136 
u32
 
sizeOfP©chToSave
 = 0;

137 
u8
* 
‰ameBuf„rDi•¨ôõsPå
 = &
‰ameBuf„rDi•¨ôõs
[0];

138 
∑tchNo
 = 0;Ö©chNÿ< 
MAX_PATCHES
;ÖatchNo++)

140 i‡(
∑tchNo
 == 0)

142 
sizeOfP©chToSave
 = 
di•Cfg
[
∑tchNo
].
À·Image
.
•ec
.
width
 * (di•Cfg[∑tchNo].À·Image.•ec.
height
 - 
PATCH_H_OVERLAP
/2);

143 
	`fwrôe
(
di•Cfg
[
∑tchNo
].
di•¨ôyM≠
, 
sizeOfP©chToSave
, 1, 
di•¨ôyM≠Fûe
);

144 
	`mem˝y
(
‰ameBuf„rDi•¨ôõsPå
, 
di•Cfg
[
∑tchNo
].
di•¨ôyM≠
, 
sizeOfP©chToSave
);

145 
‰ameBuf„rDi•¨ôõsPå
 +
sizeOfP©chToSave
;

148 i‡(
∑tchNo
 =
MAX_PATCHES
 - 1)

150 
sizeOfP©chToSave
 = 
di•Cfg
[
∑tchNo
].
À·Image
.
•ec
.
width
 * (di•Cfg[∑tchNo].À·Image.•ec.
height
 - 
PATCH_H_OVERLAP
/2);

151 
	`fwrôe
(
di•Cfg
[
∑tchNo
].
di•¨ôyM≠
 + di•Cfg[∑tchNo].
À·Image
.
•ec
.
width
 * 
PATCH_H_OVERLAP
/2, 
sizeOfP©chToSave
, 1, 
di•¨ôyM≠Fûe
);

152 
	`mem˝y
(
‰ameBuf„rDi•¨ôõsPå
, 
di•Cfg
[
∑tchNo
].
di•¨ôyM≠
 + di•Cfg[∑tchNo].
À·Image
.
•ec
.
width
 * 
PATCH_H_OVERLAP
/2, 
sizeOfP©chToSave
);

153 
‰ameBuf„rDi•¨ôõsPå
 +
sizeOfP©chToSave
;

157 
sizeOfP©chToSave
 = 
di•Cfg
[
∑tchNo
].
À·Image
.
•ec
.
width
 * (di•Cfg[∑tchNo].À·Image.•ec.
height
 - 
PATCH_H_OVERLAP
);

158 
	`fwrôe
(
di•Cfg
[
∑tchNo
].
di•¨ôyM≠
 + di•Cfg[∑tchNo].
À·Image
.
•ec
.
width
 * 
PATCH_H_OVERLAP
/2, 
sizeOfP©chToSave
, 1, 
di•¨ôyM≠Fûe
);

159 
	`mem˝y
(
‰ameBuf„rDi•¨ôõsPå
, 
di•Cfg
[
∑tchNo
].
di•¨ôyM≠
 + di•Cfg[∑tchNo].
À·Image
.
•ec
.
width
 * 
PATCH_H_OVERLAP
/2, 
sizeOfP©chToSave
);

160 
‰ameBuf„rDi•¨ôõsPå
 +
sizeOfP©chToSave
;

162 
˙t
++;

164 
	`f˛o£
(
di•¨ôyM≠Fûe
);

166 
	`medünFûãrög
(&
ÆgoCfg
, &
‰ameBuf„rDi•¨ôõs
[0], 
di•¨ôyMedün
, 
MAX_WIDTH
, 
MAX_HEIGHT
);

167 
FILE
* 
f
 = 
	`f›í
("disparityMapMedian.yuv", "wb");

168 
	`fwrôe
(
di•¨ôyMedün
, 
MAX_WIDTH
 * 
MAX_HEIGHT
, 1, 
f
);

169 
	`f˛o£
(
f
);

172 
poöãr_ty≥
 
±r
= (pointer_type)0;

173 
u32
 
size
 = (Ë* 
width
 * 
height
;

174 
u8
* 
di•¨ôyMedünPå
 = &
di•¨ôyMedün
[0];

175 
u32
 
¸cUnôTe°
 = 
	`swcCÆcCrc32
(
di•¨ôyMedünPå
, 
size
, 
±r
);

177 i‡(
¸cUnôTe°
 =
GOLDEN_CRC
)

178 
	`¥ötf
("PC unitÅest: PASSED\n");

181 
	`‰ì
(
imgLe·
);

182 
	`‰ì
(
imgRight
);

184 
	`¥ötf
("Algorithm finished successfully!\n");

186 
	}
}

	@Demo/SimpleCamHDMI/arch/ma2x5x/leon/app_config.c

13 
	~"≠p_c⁄fig.h
"

14 
	~"DrvC¥.h
"

15 
	~"DrvDdr.h
"

16 
	~"DrvShaveL2Cache.h
"

17 
	~"DrvTimî.h
"

18 
	~"swcLe⁄Utûs.h
"

22 
	#SYS_CLK_KHZ
 12000

23 

	)

24 
	#L2CACHE_CFG
 (
SHAVE_L2CACHE_NORMAL_MODE
)

	)

27 
	#AUX_CLOCKS_MIPICFG
 (
AUX_CLK_MASK_MIPI_ECFG
 | 
AUX_CLK_MASK_MIPI_CFG
)

	)

28 
	#AUX_CLOCKS_VIDEO
 (
AUX_CLK_MASK_MEDIA
 | 
AUX_CLK_MASK_LCD
)

	)

30 
	#MSS_CLOCKS
 ( 
DEV_MSS_APB_SLV
 | \

31 
DEV_MSS_APB2_CTRL
 | \

32 
DEV_MSS_RTBRIDGE
 | \

33 
DEV_MSS_RTAHB_CTRL
 | \

34 
DEV_MSS_LRT
 | \

35 
DEV_MSS_LRT_DSU
 | \

36 
DEV_MSS_LRT_L2C
 | \

37 
DEV_MSS_LRT_ICB
 | \

38 
DEV_MSS_AXI_BRIDGE
 | \

39 
DEV_MSS_MXI_CTRL
 | \

40 
DEV_MSS_MXI_DEFSLV
 | \

41 
DEV_MSS_AXI_MON
 | \

42 
DEV_MSS_LCD
 | \

43 
DEV_MSS_AMC
 | \

44 
DEV_MSS_SIPP
 | \

45 
DEV_MSS_TIM
 )

	)

47 
	#SIPP_CLOCKS
 ( 
DEV_SIPP_SIPP_ABPSLV
 | \

48 
DEV_SIPP_MIPI
 | \

49 
DEV_SIPP_MIPI_RX1
 )

	)

58 
tyAuxClkDividîCfg
 
	gauxClk
[] =

61 .
auxClockE«bÀMask
 = 
AUX_CLOCKS_VIDEO
,

62 .
	gauxClockSour˚
 = 
CLK_SRC_SYS_CLK_DIV2
 ,

63 .
	gauxClockDivNumî©‹
 = 1,

64 .
	gauxClockDivDíomö©‹
 = 1,

67 .
	gauxClockE«bÀMask
 = 
AUX_CLOCKS_MIPICFG
,

68 .
	gauxClockSour˚
 = 
CLK_SRC_SYS_CLK
 ,

69 .
	gauxClockDivNumî©‹
 = 1,

70 .
	gauxClockDivDíomö©‹
 = 18,

75 
tySocClockC⁄fig
 
	g˛ocksC⁄fig
 =

77 .
ªfClk0I≈utKhz
 = 
SYS_CLK_KHZ
 ,

78 .
	gªfClk1I≈utKhz
 = 0,

79 .
	gèrgëPŒ0FªqKhz
 = 360000,

80 .
	gèrgëPŒ1FªqKhz
 = 0,

81 .
	g˛kSrcPŒ1
 = 
CLK_SRC_REFCLK0
,

82 .
	gma°îClkDivNumî©‹
 = 1,

83 .
	gma°îClkDivDíomö©‹
 = 1,

84 .
	gcssDssClockE«bÀMask
 = 
DEFAULT_CORE_CSS_DSS_CLOCKS
,

85 .
	gmssClockE«bÀMask
 = 
MSS_CLOCKS
,

86 .
	gsùpClockE«bÀMask
 = 
SIPP_CLOCKS
,

87 .
	gu∑ClockE«bÀMask
 = 0,

88 .
	gpAuxClkCfg
 = 
auxClk
,

97 
	$öôClocksAndMem‹y
()

99 
i
;

100 
s32
 
sc
;

103 
sc
 = 
	`DrvC¥Inô
();

104 if(
sc
)

105  
sc
;

107 
	`DrvC¥SysDevi˚A˘i⁄
(
SIPP_DOMAIN
, 
ASSERT_RESET
, 
DEV_SIPP_MIPI
);

108 
	`DrvC¥SysDevi˚A˘i⁄
(
MSS_DOMAIN
, 
ASSERT_RESET
, 
DEV_MSS_SIPP
 | 
DEV_MSS_AMC
 | 
DEV_MSS_LCD
 );

109 
	`DrvC¥SysDevi˚A˘i⁄
(
MSS_DOMAIN
, 
DEASSERT_RESET
, 
DEV_MSS_SIPP
 );

111 
sc
 = 
	`DrvC¥SëupClocks
(&
˛ocksC⁄fig
);

112 if(
sc
)

113  
sc
;

115 
	`DrvC¥SysDevi˚A˘i⁄
(
MSS_DOMAIN
, 
DEASSERT_RESET
, -1);

116 
	`DrvC¥SysDevi˚A˘i⁄
(
CSS_DOMAIN
, 
DEASSERT_RESET
, -1);

117 
	`DrvC¥SysDevi˚A˘i⁄
(
SIPP_DOMAIN
, 
DEASSERT_RESET
, -1);

119 
	`swcLe⁄SëPIL
(0);

121 
	`DrvDdrInôüli£
(
NULL
);

124 
sc
 = 
	`DrvShaveL2CacheSëMode
(
L2CACHE_CFG
);

125 if(
sc
)

126  
sc
;

129 
	`DrvShaveL2CacheSëupP¨tôi⁄
(
SHAVEPART256KB
);

132 
sc
 = 
	`DrvShaveL2CacheAŒoˇãSëP¨tôi⁄s
();

133 if(
sc
)

134  
sc
;

137 
i
 = 0; i < 
SHAVES_USED
; i++)

139 
	`DrvShaveL2CacheSëLSUP¨tId
(
i
, 
PARTITION_0
);

142 
	`DrvShaveL2CacheP¨tôi⁄FlushAndInvÆid©e
(
PARTITION_0
);

144 
	}
}

	@Demo/SimpleCamHDMI/leon/app_config.h

13 #i‚de‡
APP_CONFIG_H


14 
	#APP_CONFIG_H


	)

18 
	~"mv_ty≥s.h
"

22 
	#SHAVES_USED
 (12)

	)

23 
	#PARTITION_0
 (0)

	)

34 
öôClocksAndMem‹y
();

	@Demo/SimpleCamHDMI/leon/main_code.c

12 
	~"°dio.h
"

13 
	~"°rög.h
"

15 
	~"≠p_c⁄fig.h
"

16 #ifde‡
MV0212


17 
	~"MV0212.h
"

18 
	~"brdGpioCfgs/brdMv0182R5GpioDeÁu…s.h
"

19 #ñi‡
deföed
(
MV0182
)

20 
	~<Bﬂrd182Api.h
>

22 
	~"DrvCDCEL.h
"

23 
	~"DrvC¥.h
"

24 
	~"DrvGpioDeföes.h
"

25 
	~"ªgi°îsMyrüd.h
"

26 
	~"DrvADV7513.h
"

27 
	~"CamGíîicApi.h
"

28 
	~"LcdApi.h
"

29 
	~"DrvMss.h
"

30 
	~"DrvRegUtûsDeföes.h
"

32 
	~"LcdCEA1080p60.h
"

33 
	~"imx208_2L_1936x1096_Raw10C⁄vîãd8_60Hz.h
"

39 
	#MAX_USED_BUF
 3

40 
	#FIRST_INCOMING_BUF_ID
 1

41 
	#FIRST_OUTGOING_BUF_ID
 0

	)

43 
	#CAM_WINDOW_START_COLUMN
 0

	)

44 
	#CAM_WINDOW_START_ROW
 8

45 

	)

46 
	#WINDOW_WIDTH
 1920

	)

47 
	#WINDOW_HEIGHT
 1080

	)

49 
	#CAM_BPP
 1

51 
	#LCD_BPP
 1

53 

	)

54 
	#CAM_FRAME_SIZE_BYTES
 (
WINDOW_WIDTH
 * 
WINDOW_HEIGHT
 * 
CAM_BPP
)

	)

55 
	#LCD_CHROMA_SIZE_BYTES
 (
WINDOW_WIDTH
 * 
WINDOW_HEIGHT
 * 
LCD_BPP
 )

56 

	)

57 
	#DDR_AREA
 
	`__©åibuã__
((
	`£˘i⁄
(".ddr.bss")))

	)

59 #ifde‡
MV0212


60 
	#NUM_I2C_DEVS
 3

	)

64 
I2CM_Devi˚
 * 
	gi2c0H™dÀ
;

65 
I2CM_Devi˚
 * 
	gi2c2H™dÀ
;

70 
GíîicCamS≥c
 *
	gˇmC⁄fig
 = &
imx208_2L_1936x1096_RAW10CONV8_60Hz_ˇmCfg
;

71 
ADV7513C⁄tfigMode_t
 
	gADV7513C⁄fig
 = 
ADV7513_1080P60
;

73 vﬁ©ûê
u32
 
	g√wCamFømeCå
 = 
FIRST_INCOMING_BUF_ID
;

75 
u8
 
DDR_AREA
 
	gˇmBuf
[
MAX_USED_BUF
][
CAM_FRAME_SIZE_BYTES
];

76 
u8
 
DDR_AREA
 
	glcdDummyChroma
[
LCD_CHROMA_SIZE_BYTES
];

78 
GíîicCamîaH™dÀ
 
	gˇmHndl
;

79 
CamU£rS≥c
 
	gu£rC⁄fig
;

80 
‰ameS≥c
 
	gˇmFømeS≥c
;

81 
‰ameBuf„r
 
	gˇmFøme
[
MAX_USED_BUF
];

82 
‰ameS≥c
 
	glcdFømeS≥c
;

83 
‰ameBuf„r
 
	glcdFøme
[
MAX_USED_BUF
];

84 
LCDH™dÀ
 
	glcdHndl
;

86 
ˇŒbacksLi°Såu˘
 
	gˇŒbacks
 = {0};

87 
öãºu±sCÆlbacksLi°Ty≥
 
	gi§CÆlbacks
 = {0};

91 
‰ameBuf„r
* 
AŒoˇãNextCamFømeBuf
();

96 
	$¥ï¨eDrivîD©a
()

98 
ibuf
;

102 
u£rC⁄fig
.
mùiC⁄åﬁÀrNb
 = 
CAM_B1_MIPICTRL
;

103 
u£rC⁄fig
.
ª˚ivîId
 = 
SIPP_DEVICE1
;

104 #ifde‡
MV0212


105 
u£rC⁄fig
.
£ns‹Re£tPö
 = 
MV0212_MV0200_SENSOR_RIGHT_RST_GPIO
;

106 #ñi‡
	`deföed
(
MV0182
)

107 
u£rC⁄fig
.
£ns‹Re£tPö
 = 
MV0182_MV0200_SENSOR_RIGHT_RST_GPIO
;

109 
u£rC⁄fig
.
°îeoPaúIndex
 = 
CAM_B1_RIGHT_ADDR
;

110 
u£rC⁄fig
.
wödowCﬁumnSèπ
 = 
CAM_WINDOW_START_COLUMN
;

111 
u£rC⁄fig
.
wödowRowSèπ
 = 
CAM_WINDOW_START_ROW
;

112 
u£rC⁄fig
.
wödowWidth
 = 
WINDOW_WIDTH
;

113 
u£rC⁄fig
.
wödowHeight
 = 
WINDOW_HEIGHT
;

114 
u£rC⁄fig
.
gíî©eSync
 = 
NULL
;

117 
ˇmFømeS≥c
.
width
 = 
WINDOW_WIDTH
;

118 
ˇmFømeS≥c
.
height
 = 
WINDOW_HEIGHT
;

119 
ˇmFømeS≥c
.
byãsPP
 = 
CAM_BPP
;

120 
ˇmFømeS≥c
.
°ride
 = 
WINDOW_WIDTH
 * 
CAM_BPP
;

121 
ˇmFømeS≥c
.
ty≥
 = 
RAW16
;

124 
ibuf
 = 0; ibu‡< 
MAX_USED_BUF
;ibuf++)

126 
ˇmFøme
[
ibuf
].
p1
 = (*)
ˇmBuf
[ibuf];

127 
ˇmFøme
[
ibuf
].
p2
 = 
NULL
;

128 
ˇmFøme
[
ibuf
].
p3
 = 
NULL
;

129 
ˇmFøme
[
ibuf
].
•ec
 = 
ˇmFømeS≥c
;

132 
i§CÆlbacks
.
gëBlock
 = 
NULL
;

133 
i§CÆlbacks
.
gëFøme
 = 
AŒoˇãNextCamFømeBuf
;

134 
i§CÆlbacks
.
nŸifiˇti⁄
 = 
NULL
;

135 
ˇŒbacks
.
i§CbfLi°
 = &
i§CÆlbacks
;

136 
ˇŒbacks
.
£ns‹CbfLi°
 = 
NULL
;

139 
lcdFømeS≥c
.
width
 = 
WINDOW_WIDTH
;

140 
lcdFømeS≥c
.
height
 = 
WINDOW_HEIGHT
;

141 
lcdFømeS≥c
.
°ride
 = 
WINDOW_WIDTH
 * 
LCD_BPP
;

142 
lcdFømeS≥c
.
byãsPP
 = 
LCD_BPP
;

143 
lcdFømeS≥c
.
ty≥
 = 
YUV422p
;

145 
ibuf
 = 0; ibu‡< 
MAX_USED_BUF
;ibuf++)

147 
lcdFøme
[
ibuf
].
•ec
 = 
lcdFømeS≥c
;

148 
lcdFøme
[
ibuf
].
p1
 = &
ˇmBuf
[ibuf][0];

149 
lcdFøme
[
ibuf
].
p2
 = 
lcdDummyChroma
;

150 
lcdFøme
[
ibuf
].
p3
 = 
lcdDummyChroma
;

154 
	}
}

157 
‰ameBuf„r
* 
	$AŒoˇãNextCamFømeBuf
()

159 
√wCamFømeCå
++;

160  ( &
ˇmFøme
[
√wCamFømeCå
 % 
MAX_USED_BUF
] );

161 
	}
}

163 
‰ameBuf„r
* 
	$ÆloˇãLcdFøme
(
œyî
)

165 (Ë
œyî
;

167  ( &
lcdFøme
[(
√wCamFømeCå
 - 1Ë% 
MAX_USED_BUF
] );

168 
	}
}

171 
	$maö
()

173 
s32
 
°©us
;

174 
ˇmEº‹Ty≥
 
ˇmSètus
;

175 
LCDLayîOff£t
 
lcdLayîSèπOff£t
 = {0, 0};

176 
s32
 
bﬂrdSètus
;

178 
°©us
 = 
	`öôClocksAndMem‹y
();

179 if(
°©us
)

180  
°©us
;

182 #ifde‡
MV0212


183 
öt32_t
 
rc
;

184 
uöt32_t
 
ªv
;

185 
BﬂrdI2CInfo
 
öfo
[
NUM_I2C_DEVS
];

186 
BﬂrdC⁄figDesc
 
c⁄fig
[] =

189 
BRDCONFIG_GPIO
,

191 (*)
brdMV0182R5GpioCfgDeÁu…


194 
BRDCONFIG_END
,

195 
NULL


199 
rc
 = 
	`BﬂrdInô
(
c⁄fig
);

200 i‡(
rc
!=
BRDCONFIG_SUCCESS
)

202 
	`¥ötf
("Error: board initialization failed with %ld status\n",

203 
rc
);

204  
rc
;

207 
rc
 = 
	`BﬂrdGëPCBRevisi⁄
(&
ªv
);

208 i‡(
rc
!=
BRDCONFIG_SUCCESS
)

210 
	`¥ötf
("Error: board configurationÑead failed with %ld status\n",

211 
rc
);

212  
rc
;

214 
	`¥ötf
("Bﬂrd Mv0212 inôülized,Ñevisi⁄ = %lu \n", 
ªv
);

216 
bﬂrdSètus
 = 
	`BﬂrdInôExtPŒ
(
EXT_PLL_CFG_148_24_24MHZ
);

217 i‡(
bﬂrdSètus
 !
BRDCONFIG_SUCCESS
)

219 
	`¥ötf
("Error: board initialization failed with %ld status\n",

220 
bﬂrdSètus
);

223 
rc
 = 
	`BﬂrdGëI2CInfo
(
öfo
, 
NUM_I2C_DEVS
);

224 
i2c0H™dÀ
=
öfo
[0].
h™dÀr
;

225 
i2c2H™dÀ
=
öfo
[2].
h™dÀr
;

226 #ñi‡
	`deföed
(
MV0182
)

227 
bﬂrdSètus
 = 
	`BﬂrdInôüli£
(
EXT_PLL_CFG_148_24_24MHZ
);

228 
i2c0H™dÀ
=
gAµDevHndls
.i2c0Handle;

229 
i2c2H™dÀ
=
gAµDevHndls
.i2c2Handle;

230 i‡(
bﬂrdSètus
 !
B_SUCCESS
)

232 
	`¥ötf
("Error: board initialization failed with %ld status\n",

233 
bﬂrdSètus
);

238 
	`¥ötf
("Configuring cameraánd datapath\n");

239 
	`¥ï¨eDrivîD©a
();

243 
	`mem£t
(
lcdDummyChroma
, 0x80, (lcdDummyChroma));

246 
	`DrvMssC⁄√˘LcdToGpio
();

248 
ˇmSètus
 = 
	`CamInô
–&
ˇmHndl
, 
ˇmC⁄fig
, &
u£rC⁄fig
, &
ˇŒbacks
, 
i2c0H™dÀ
 );

249 i‡(
ˇmSètus
 !
CAM_SUCCESS
)

251 
	`¥ötf
("\¿Camî®c⁄figuøti⁄ faûed (%d).\n", 
ˇmSètus
);

255 
ˇmSètus
 = 
	`CamSèπ
–&
ˇmHndl
 );

256 i‡(
ˇmSètus
 !
CAM_SUCCESS
)

258 
	`¥ötf
("\¿Camî®ÁûedÅÿ°¨à(%d).\n", 
ˇmSètus
);

262 
	`¥ötf
("ConfiguringÅhe HDMI chip ADV7513\n");

263 
°©us
 = 
	`öôADV7513ªg
(
i2c2H™dÀ
, 
ADV7513C⁄fig
);

265 i‡(
°©us
 != 0)

267 
	`¥ötf
("\¿ADV7513 chù c⁄figuøti⁄ faûed wôh codê%ld.\n", 
°©us
);

271 
	`¥ötf
("ConfiguringÅhe LCD\n");

272 
	`LCDInô
(&
lcdHndl
, &
lcdS≥c1080p60
, 
NULL
, 
LCD1
);

273 
	`LCDInôLayî
(&
lcdHndl
, 
VL1
, &
lcdFømeS≥c
, 
lcdLayîSèπOff£t
);

274 
	`LCDSëupCÆlbacks
(&
lcdHndl
, &
ÆloˇãLcdFøme
, 
NULL
, NULL, NULL);

275 
	`LCDSèπ
(&
lcdHndl
);

277 
	`¥ötf
("\n Streaming ... \n");

282 
	}
}

	@Demo/Stereo208Hdmi/arch/ma2x5x/leon/los_app_config_2150.c

13 
	~"los_≠p_c⁄fig.h
"

14 
	~"DrvC¥.h
"

27 
	$blocksRe£tSûic⁄S≥cific
()

29 
	`DrvC¥SysDevi˚A˘i⁄
(
SIPP_DOMAIN
, 
ASSERT_RESET
, 
DEV_SIPP_MIPI
);

30 
	`DrvC¥SysDevi˚A˘i⁄
(
UPA_DOMAIN
, 
ASSERT_RESET
, 
APP_UPA_CLOCKS
);

31 
	`DrvC¥SysDevi˚A˘i⁄
(
MSS_DOMAIN
, 
DEASSERT_RESET
, -1);

32 
	`DrvC¥SysDevi˚A˘i⁄
(
CSS_DOMAIN
, 
DEASSERT_RESET
, -1);

33 
	`DrvC¥SysDevi˚A˘i⁄
(
SIPP_DOMAIN
, 
DEASSERT_RESET
, -1);

34 
	`DrvC¥SysDevi˚A˘i⁄
(
UPA_DOMAIN
, 
DEASSERT_RESET
, -1);

35 
	}
}

	@Demo/Stereo208Hdmi/arch/ma2x5x/leon/los_app_config_2150.h

13 #i‚de‡
LOS_APP_CONFIG_2150_H


14 
	#LOS_APP_CONFIG_2150_H


	)

18 
	~"mv_ty≥s.h
"

19 
	~"DrvC¥Deföes.h
"

23 
	#MSS_CLOCKS
 ( 
DEV_MSS_APB_SLV
 | \

24 
DEV_MSS_APB2_CTRL
 | \

25 
DEV_MSS_RTBRIDGE
 | \

26 
DEV_MSS_RTAHB_CTRL
 | \

27 
DEV_MSS_LRT
 | \

28 
DEV_MSS_LRT_DSU
 | \

29 
DEV_MSS_LRT_L2C
 | \

30 
DEV_MSS_LRT_ICB
 | \

31 
DEV_MSS_AXI_BRIDGE
 | \

32 
DEV_MSS_MXI_CTRL
 | \

33 
DEV_MSS_MXI_DEFSLV
 | \

34 
DEV_MSS_AXI_MON
 | \

35 
DEV_MSS_MIPI
 | \

36 
DEV_MSS_CIF1
 | \

37 
DEV_MSS_LCD
 | \

38 
DEV_MSS_AMC
 | \

39 
DEV_MSS_SIPP
 | \

40 
DEV_MSS_TIM
 )

	)

42 
	#APP_SIPP_CLOCKS
 ( 
DEV_SIPP_SIPP_ABPSLV
 | \

43 
DEV_SIPP_APB_SLV
 | \

44 
DEV_SIPP_MIPI
 | \

45 
DEV_SIPP_LUT
 | \

46 
DEV_SIPP_MIPI_RX1
 )

	)

	@Demo/Stereo208Hdmi/arch/ma2x5x/leon_rt/lrt_app_config_2150.c

2 
	~"mv_ty≥s.h
"

3 
	~"sùp.h
"

5 
u16
 
	glutTabÀ
[256] 
__©åibuã__
((
Æig√d
(8)));

7 
	$c⁄figuªLutFûãrSûic⁄S≥cific
(
LutP¨am
* 
lutCfg
)

9 
lutCfg
->
lutF‹m©
 = 2;

10 
	}
}

	@Demo/Stereo208Hdmi/leon/los_app_config.c

13 
	~"los_≠p_c⁄fig.h
"

15 
	~"DrvDdr.h
"

16 
	~"as£π.h
"

18 
	~"DrvShaveL2Cache.h
"

19 
	~"OsDrvTimî.h
"

20 
	~"OsDrvC¥.h
"

25 
	#L2CACHE_CFG
 (
SHAVE_L2CACHE_NORMAL_MODE
)

	)

26 
	#PARTITION_0
 (0)

	)

27 
	#SHAVES_USED
 (12)

	)

29 
	#AUX_CLOCKS_MIPICFG
 (
AUX_CLK_MASK_MIPI_ECFG
 | 
AUX_CLK_MASK_MIPI_CFG
)

	)

30 
	#AUX_CLOCKS_VIDEO
 (
AUX_CLK_MASK_MEDIA
 | 
AUX_CLK_MASK_LCD
)

	)

35 c⁄° 
tyAuxClkDividîCfg
 
	gauxClk
[] =

38 .
auxClockE«bÀMask
 = 
AUX_CLOCKS_VIDEO
,

39 .
	gauxClockSour˚
 = 
CLK_SRC_SYS_CLK_DIV2
,

40 .
	gauxClockDivNumî©‹
 = 1,

41 .
	gauxClockDivDíomö©‹
 = 1,

44 .
	gauxClockE«bÀMask
 = 
AUX_CLK_MASK_CIF1
,

45 .
	gauxClockSour˚
 = 
CLK_SRC_SYS_CLK
,

46 .
	gauxClockDivNumî©‹
 = 1,

47 .
	gauxClockDivDíomö©‹
 = 1,

50 .
	gauxClockE«bÀMask
 = 
AUX_CLOCKS_MIPICFG
,

51 .
	gauxClockSour˚
 = 
CLK_SRC_SYS_CLK
,

52 .
	gauxClockDivNumî©‹
 = 1,

53 .
	gauxClockDivDíomö©‹
 = 24,

65 
	$öôClocksAndMem‹y
()

67 
i
;

68 
s32
 
sc
;

70 
sc
 = 
	`OsDrvC¥Inô
();

71 if(
sc
)

72  
sc
;

73 
sc
 = 
	`OsDrvC¥O≥n
();

74 if(
sc
)

75  
sc
;

76 
sc
 = 
	`OsDrvC¥AuxClockAºayC⁄fig
(
auxClk
);

78 if(
sc
)

79  
sc
;

81 
	`blocksRe£tSûic⁄S≥cific
();

83 
sc
 = 
	`OsDrvTimîInô
();

84 if(
sc
)

85  
sc
;

86 
	`DrvDdrInôüli£
(
NULL
);

89 
sc
 = 
	`DrvShaveL2CacheSëMode
(
L2CACHE_CFG
);

90 if(
sc
)

91  
sc
;

94 
	`DrvShaveL2CacheSëupP¨tôi⁄
(
SHAVEPART256KB
);

97 
sc
 = 
	`DrvShaveL2CacheAŒoˇãSëP¨tôi⁄s
();

98 if(
sc
)

99  
sc
;

102 
i
 = 0; i < 
SHAVES_USED
; i++)

104 
	`DrvShaveL2CacheSëLSUP¨tId
(
i
, 
PARTITION_0
);

107 
	`DrvShaveL2CacheP¨tôi⁄FlushAndInvÆid©e
(
PARTITION_0
);

110 
	}
}

	@Demo/Stereo208Hdmi/leon/los_app_config.h

13 #i‚de‡
LOS_APP_CONFIG_H


14 
	#LOS_APP_CONFIG_H


	)

18 
	~"mv_ty≥s.h
"

19 
	~"DrvC¥Deföes.h
"

22 #i‡
deföed
(
MA2150
Ë|| deföed(
MA2155
Ë|| deföed(
MA2450
Ë|| deföed(
MA2455
)

23 
	~"los_≠p_c⁄fig_2150.h
"

28 
	#SYS_CLK_KHZ
 12000

	)

30 
	#APP_UPA_CLOCKS
 (
DEV_UPA_SH0
 | \

31 
DEV_UPA_SH1
 | \

32 
DEV_UPA_SH2
 | \

33 
DEV_UPA_SH3
 | \

34 
DEV_UPA_SHAVE_L2
 | \

35 
DEV_UPA_CDMA
 | \

36 
DEV_UPA_CTRL
 )

	)

45 
öôClocksAndMem‹y
();

46 
blocksRe£tSûic⁄S≥cific
();

	@Demo/Stereo208Hdmi/leon/main.c

12 
	~<DrvLe⁄.h
>

13 
	~<DrvC¥.h
>

14 
	~<DrvTimî.h
>

15 
	~<DrvDdr.h
>

16 
	~<swcLe⁄Utûs.h
>

17 
	~<°dlib.h
>

18 
	~<°dio.h
>

19 
	~<°rög.h
>

20 
	~<î∫o.h
>

21 
	~<DrvShaveL2Cache.h
>

22 
	~<b•.h
>

23 
	~"πems_c⁄fig.h
"

24 
	~"los_≠p_c⁄fig.h
"

32 
u32
 *
Ãt_°¨t
;

42 *
	$POSIX_Inô
 (*
¨gs
)

44 
	`UNUSED
(
¨gs
);

46 
s32
 
sc
;

48 
sc
 = 
	`öôClocksAndMem‹y
();

49 if(
sc
)

50 
	`exô
(
sc
);

51 
	`DrvLe⁄RTSèπup
((
u32
)&
Ãt_°¨t
);

52 
	`DrvLe⁄RTWaôExecuti⁄
();

53 
	`exô
(0);

54 
	}
}

	@Demo/Stereo208Hdmi/leon/rtems_config.h

9 #i‚de‡
_RTEMS_CONFIG_H_


10 
	#_RTEMS_CONFIG_H_


	)

14 
	~<πems.h
>

15 
	~<πems/b•Io.h
>

16 
	~"los_≠p_c⁄fig.h
"

17 
	~"ÁèlExãnsi⁄.h
"

21 #i‡
deföed
(
__RTEMS__
)

23 #i‡!
deföed
 (
__CONFIG__
)

24 
	#__CONFIG__


	)

27 
	#CONFIGURE_INIT


	)

29 #i‚de‡
RTEMS_POSIX_API


30 
	#RTEMS_POSIX_API


	)

33 
	#CONFIGURE_MICROSECONDS_PER_TICK
 1000

	)

35 
	#CONFIGURE_TICKS_PER_TIMESLICE
 10

	)

37 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

39 
	#CONFIGURE_APPLICATION_NEEDS_CLOCK_DRIVER


	)

41 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

43 
	#CONFIGURE_MINIMUM_TASK_STACK_SIZE
 4096

	)

45 
	#CONFIGURE_MAXIMUM_TASKS
 4

	)

47 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 4

	)

49 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 8

	)

51 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 8

	)

53 
	#CONFIGURE_MAXIMUM_POSIX_SEMAPHORES
 8

	)

55 
	#CONFIGURE_MAXIMUM_POSIX_MESSAGE_QUEUES
 8

	)

57 
	#CONFIGURE_MAXIMUM_POSIX_TIMERS
 4

	)

59 
	#CONFIGURE_MAXIMUM_TIMERS
 4

	)

61 
	#CONFIGURE_MAXIMUM_SEMAPHORES
 8

	)

65 
	#CONFIGURE_MAXIMUM_USER_EXTENSIONS
 1

	)

66 
	#CONFIGURE_INITIAL_EXTENSIONS
 { .
Áèl
 = 
F©Æ_exãnsi⁄
 }

	)

68 *
POSIX_Inô
 (*
¨gs
);

70 
	~<πems/c⁄fdefs.h
>

75 
BSP_SET_CLOCK
(12000, 480000, 1, 1,
DEFAULT_CORE_CSS_DSS_CLOCKS
, 
MSS_CLOCKS
, 
APP_UPA_CLOCKS
, 
APP_SIPP_CLOCKS
, 0x0);

78 
BSP_SET_L2C_CONFIG
(0, 
L2C_REPL_LRU
, 0, 
L2C_MODE_COPY_BACK
, 0, 
NULL
);

	@Demo/Stereo208Hdmi/leon_rt/lrt_app_config.c

13 
	~"Ãt_≠p_c⁄fig.h
"

15 
	~"DrvC¥.h
"

16 
	~"DrvTimî.h
"

21 
	#SYS_CLK_KHZ
 (12000)

22 

	)

32 
	$öôClocksAndMem‹y
()

34 
s32
 
sc
;

36 
sc
 = 
	`DrvC¥InôClocks
(
SYS_CLK_KHZ
, 0, 0, 0, 0);

38 if(
sc
)

39  
sc
;

40 
sc
 = 
	`DrvTimîInô
();

41 if(
sc
)

42  
sc
;

44 
	}
}

	@Demo/Stereo208Hdmi/leon_rt/lrt_app_config.h

13 #i‚de‡
LRT_APP_CONFIG_H


14 
	#LRT_APP_CONFIG_H


	)

18 
	~"mv_ty≥s.h
"

19 
	~"sùp.h
"

30 
öôClocksAndMem‹y
();

31 
c⁄figuªLutFûãrSûic⁄S≥cific
(
LutP¨am
* 
lutCfg
);

	@Demo/Stereo208Hdmi/leon_rt/main.c

11 
	~<°dio.h
>

12 
	~<°rög.h
>

13 #ifde‡
MV0212


14 
	~"MV0212.h
"

15 
	~"brdGpioCfgs/brdMv0182R5GpioDeÁu…s.h
"

16 #ñi‡
deföed
(
MV0182
)

17 
	~<Bﬂrd182Api.h
>

19 
	~"DrvCDCEL.h
"

20 
	~"DrvC¥.h
"

21 
	~"DrvGpioDeföes.h
"

22 
	~"ªgi°îsMyrüd.h
"

23 
	~"DrvADV7513.h
"

24 
	~"CamGíîicApi.h
"

25 
	~"LcdApi.h
"

26 
	~"DrvMss.h
"

27 
	~"sùp.h
"

28 
	~"sùpTe°Comm⁄.h
"

29 
	~"LcdCEA1080p60.h
"

30 
	~"imx208_2L_1936x1096_Raw10_30Hz.h
"

31 
	~"Ãt_≠p_c⁄fig.h
"

35 
	#MAX_USED_BUF
 3

	)

36 
	#FIRST_INCOMING_BUF_ID
 2

	)

37 
	#FIRST_OUTGOING_BUF_ID
 0

	)

39 
	#CAM_WINDOW_START_COLUMN
 0

	)

40 
	#CAM_WINDOW_START_ROW
 8

41 

	)

42 
	#CAM_LEFT_WINDOW_WIDTH
 960

43 
	#CAM_RIGHT_WINDOW_WIDTH
 960

44 
	#CAM_WINDOW_HEIGHT
 1080

	)

47 
	#LCD_LEFT_WINDOW_WIDTH
 
CAM_LEFT_WINDOW_WIDTH


	)

48 
	#LCD_RIGHT_WINDOW_WIDTH
 
CAM_RIGHT_WINDOW_WIDTH


	)

49 
	#LCD_WINDOW_HEIGHT
 
CAM_WINDOW_HEIGHT


	)

51 
	#LCD_WINDOW_LEFT_STARTX
 0

	)

52 
	#LCD_WINDOW_LEFT_STARTY
 0

	)

53 
	#LCD_WINDOW_RIGHT_STARTX
 
LCD_LEFT_WINDOW_WIDTH


	)

54 
	#LCD_WINDOW_RIGHT_STARTY
 0

	)

56 
	#CAM_BPP
 2

57 
	#LCD_BPP
 2

58 

	)

59 
	#CAM_LEFT_FRAME_SIZE_BYTES
 (
CAM_LEFT_WINDOW_WIDTH
 * 
CAM_WINDOW_HEIGHT
 * 
CAM_BPP
)

	)

60 
	#CAM_RIGHT_FRAME_SIZE_BYTES
 (
CAM_RIGHT_WINDOW_WIDTH
 * 
CAM_WINDOW_HEIGHT
 * 
CAM_BPP
)

	)

61 
	#LCD_LEFT_FRAME_SIZE_BYTES
 (
LCD_LEFT_WINDOW_WIDTH
 * 
LCD_WINDOW_HEIGHT
 * 
LCD_BPP
)

	)

62 
	#LCD_RIGHT_FRAME_SIZE_BYTES
 (
LCD_RIGHT_WINDOW_WIDTH
 * 
LCD_WINDOW_HEIGHT
 * 
LCD_BPP
)

	)

64 
	#DDR_AREA
 
	`__©åibuã__
((
	`£˘i⁄
(".ddr.bss")))

	)

66 #ifde‡
MV0212


67 
	#NUM_I2C_DEVS
 3

	)

71 
I2CM_Devi˚
 * 
	gi2c0H™dÀ
;

72 
I2CM_Devi˚
 * 
	gi2c2H™dÀ
;

74 
GíîicCamS≥c
 *
	g°©icCamC⁄fig
 = &
imx208_2L_1936x1096_RAW10_30Hz_ˇmCfg
;

76 vﬁ©ûê
	$ALIGNED
(4Ë
u32
 
√wCamFømeCåLe·
 = 
FIRST_INCOMING_BUF_ID
;

77 vﬁ©ûê
	$ALIGNED
(4Ë
u32
 
√wCamFømeCåRight
 = 
FIRST_INCOMING_BUF_ID
;

78 vﬁ©ûê
	$ALIGNED
(4Ë
u32
 
lcdFømeCå
 = 
FIRST_OUTGOING_BUF_ID
;

80 
u8
 
ˇmLe·Buf
[
MAX_USED_BUF
][
CAM_LEFT_FRAME_SIZE_BYTES
] 
DDR_AREA
 
	`ALIGNED
(8);

81 
u8
 
ˇmRightBuf
[
MAX_USED_BUF
][
CAM_RIGHT_FRAME_SIZE_BYTES
] 
DDR_AREA
 
	`ALIGNED
(8);

82 
u8
 
lcdLe·Buf
[
MAX_USED_BUF
][
LCD_LEFT_FRAME_SIZE_BYTES
] 
DDR_AREA
 
	`ALIGNED
(8);

83 
u8
 
lcdRightBuf
[
MAX_USED_BUF
][
LCD_RIGHT_FRAME_SIZE_BYTES
] 
DDR_AREA
 
	`ALIGNED
(8);

84 
LCDLayîOff£t
 
lcdLayîOff£tLe·
 = {
LCD_WINDOW_LEFT_STARTX
, 
LCD_WINDOW_LEFT_STARTY
},ÜcdLayîOff£tRighà{LCD_WINDOW_RIGHT_STARTX,LCD_WINDOW_RIGHT_STARTY};

85 vﬁ©ûê
u32
 
	$ALIGNED
(4Ë
¥o˚ssögFømeCå
;

86 
GíîicCamîaH™dÀ
 
ˇmHndlLe·
, 
ˇmHndlRight
;

87 
CamU£rS≥c
 
u£rCamLe·C⁄fig
, 
u£rCamRightC⁄fig
;

88 
‰ameS≥c
 
ˇmLe·FømeS≥c
, 
ˇmRightFømeS≥c
;

89 
‰ameS≥c
 
lcdLe·FømeS≥c
, 
lcdRightFømeS≥c
;

90 
‰ameBuf„r
 
ˇmLe·Føme
[
MAX_USED_BUF
];

91 
‰ameBuf„r
 
ˇmRightFøme
[
MAX_USED_BUF
];

92 
‰ameBuf„r
 
lcdFømeLe·
[
MAX_USED_BUF
];

93 
‰ameBuf„r
 
lcdFømeRight
[
MAX_USED_BUF
];

94 
LCDH™dÀ
 
lcdHndl
;

96 
ˇŒbacksLi°Såu˘
 
ˇŒbacks
 = {0
	}
};

97 
öãºu±sCÆlbacksLi°Ty≥
 
	gi§CÆlbacks
 = {0};

99 
u16
 
lutTabÀ
[];

101 
SùpPùñöe
 *
	g∂Le·
, *
	g∂Right
;

102 
SùpFûãr
 *
	gdmaInLe·
, *
	gdmaInRight
;

103 
SùpFûãr
 *
	glutLe·
, *
	glutRight
;

104 
SùpFûãr
 *
	gdmaOutLe·
, *
	gdmaOutRight
;

105 
DmaP¨am
 *
	gdmaInCfgLe·
, *
	gdmaInCfgRight
;

106 
DmaP¨am
 *
	gdmaOutCfgLe·
, *
	gdmaOutCfgRight
;

107 
LutP¨am
 *
	glutCfgLe·
, *
	glutCfgRight
;

111 
‰ameBuf„r
* 
AŒoˇãNextLe·CamFømeBuf
();

112 
‰ameBuf„r
* 
AŒoˇãNextRightCamFømeBuf
();

114 
ADV7513C⁄tfigMode_t
 
	gADV7513C⁄fig
 = 
ADV7513_1080P60
;

119 
	$gíî©eLutTabÀ
()

121 
u16
 
i
;

125 
i
 = 0; i < 256; i++)

127 
lutTabÀ
[
i
] = i | 0x8000;

129 
	}
}

132 
	$¥ï¨eDrivîD©a
()

134 
ibuf
;

137 
u£rCamLe·C⁄fig
.
mùiC⁄åﬁÀrNb
 = 
CAM_B1_MIPICTRL
;

138 
u£rCamLe·C⁄fig
.
ª˚ivîId
 = 
SIPP_DEVICE1
;

139 #ifde‡
MV0212


140 
u£rCamLe·C⁄fig
.
£ns‹Re£tPö
 = 
MV0212_MV0200_SENSOR_RIGHT_RST_GPIO
;

141 #ñi‡
	`deföed
(
MV0182
)

142 
u£rCamLe·C⁄fig
.
£ns‹Re£tPö
 = 
MV0182_MV0200_SENSOR_RIGHT_RST_GPIO
;

144 
u£rCamLe·C⁄fig
.
°îeoPaúIndex
 = 
CAM_B1_RIGHT_ADDR
;

146 
u£rCamLe·C⁄fig
.
wödowCﬁumnSèπ
 = 
CAM_WINDOW_START_COLUMN
;

147 
u£rCamLe·C⁄fig
.
wödowRowSèπ
 = 
CAM_WINDOW_START_ROW
;

148 
u£rCamLe·C⁄fig
.
wödowWidth
 = 
CAM_LEFT_WINDOW_WIDTH
;

149 
u£rCamLe·C⁄fig
.
wödowHeight
 = 
CAM_WINDOW_HEIGHT
;

150 
u£rCamLe·C⁄fig
.
gíî©eSync
 = 
NULL
;

153 
u£rCamRightC⁄fig
.
mùiC⁄åﬁÀrNb
 = 
CAM_B2_MIPICTRL
;

154 
u£rCamRightC⁄fig
.
ª˚ivîId
 = 
CIF_DEVICE1
;

155 #ifde‡
MV0212


156 
u£rCamRightC⁄fig
.
£ns‹Re£tPö
 = 
MV0212_MV0200_SENSOR_LEFT_RST_GPIO
;

157 #ñi‡
	`deföed
(
MV0182
)

158 
u£rCamRightC⁄fig
.
£ns‹Re£tPö
 = 
MV0182_MV0200_SENSOR_LEFT_RST_GPIO
;

160 
u£rCamRightC⁄fig
.
°îeoPaúIndex
 = 
CAM_B2_LEFT_ADDR
;

161 
u£rCamRightC⁄fig
.
wödowCﬁumnSèπ
 = 
CAM_WINDOW_START_COLUMN
;

162 
u£rCamRightC⁄fig
.
wödowRowSèπ
 = 
CAM_WINDOW_START_ROW
;

163 
u£rCamRightC⁄fig
.
wödowWidth
 = 
CAM_RIGHT_WINDOW_WIDTH
;

164 
u£rCamRightC⁄fig
.
wödowHeight
 = 
CAM_WINDOW_HEIGHT
;

165 
u£rCamRightC⁄fig
.
gíî©eSync
 = 
NULL
;

168 
ˇmLe·FømeS≥c
.
width
 = 
CAM_LEFT_WINDOW_WIDTH
;

169 
ˇmLe·FømeS≥c
.
height
 = 
CAM_WINDOW_HEIGHT
;

170 
ˇmLe·FømeS≥c
.
byãsPP
 = 
CAM_BPP
;

171 
ˇmLe·FømeS≥c
.
°ride
 = 
CAM_LEFT_WINDOW_WIDTH
 * 
CAM_BPP
;

172 
ˇmLe·FømeS≥c
.
ty≥
 = 
RAW16
;

174 
ˇmRightFømeS≥c
.
width
 = 
CAM_RIGHT_WINDOW_WIDTH
;

175 
ˇmRightFømeS≥c
.
height
 = 
CAM_WINDOW_HEIGHT
;

176 
ˇmRightFømeS≥c
.
byãsPP
 = 
CAM_BPP
;

177 
ˇmRightFømeS≥c
.
°ride
 = 
CAM_RIGHT_WINDOW_WIDTH
 * 
CAM_BPP
;

178 
ˇmRightFømeS≥c
.
ty≥
 = 
RAW16
;

180 
ibuf
 = 0; ibu‡< 
MAX_USED_BUF
;ibuf++)

182 
ˇmLe·Føme
[
ibuf
].
•ec
 = 
ˇmLe·FømeS≥c
;

183 
ˇmLe·Føme
[
ibuf
].
p1
 = (*)
ˇmLe·Buf
[ibuf];

184 
ˇmLe·Føme
[
ibuf
].
p2
 = 
NULL
;

185 
ˇmLe·Føme
[
ibuf
].
p3
 = 
NULL
;

187 
ˇmRightFøme
[
ibuf
].
•ec
 = 
ˇmRightFømeS≥c
;

188 
ˇmRightFøme
[
ibuf
].
p1
 = (*)
ˇmRightBuf
[ibuf];

189 
ˇmRightFøme
[
ibuf
].
p2
 = 
NULL
;

190 
ˇmRightFøme
[
ibuf
].
p3
 = 
NULL
;

193 
lcdLe·FømeS≥c
.
width
 = 
LCD_LEFT_WINDOW_WIDTH
;

194 
lcdLe·FømeS≥c
.
height
 = 
LCD_WINDOW_HEIGHT
;

195 
lcdLe·FømeS≥c
.
°ride
 = 
LCD_LEFT_WINDOW_WIDTH
 * 
LCD_BPP
;

196 
lcdLe·FømeS≥c
.
byãsPP
 = 
LCD_BPP
;

197 
lcdLe·FømeS≥c
.
ty≥
 = 
YUV422i
;

199 
lcdRightFømeS≥c
.
width
 = 
LCD_RIGHT_WINDOW_WIDTH
;

200 
lcdRightFømeS≥c
.
height
 = 
LCD_WINDOW_HEIGHT
;

201 
lcdRightFømeS≥c
.
°ride
 = 
LCD_RIGHT_WINDOW_WIDTH
 * 
LCD_BPP
;

202 
lcdRightFømeS≥c
.
byãsPP
 = 
LCD_BPP
;

203 
lcdRightFømeS≥c
.
ty≥
 = 
YUV422i
;

205 
ibuf
 = 0; ibu‡< 
MAX_USED_BUF
;ibuf++)

207 
lcdFømeLe·
[
ibuf
].
•ec
 = 
lcdLe·FømeS≥c
;

208 
lcdFømeLe·
[
ibuf
].
p1
 = &
lcdLe·Buf
[ibuf][0];

209 
lcdFømeLe·
[
ibuf
].
p2
 = 
NULL
;

210 
lcdFømeLe·
[
ibuf
].
p3
 = 
NULL
;

212 
lcdFømeRight
[
ibuf
].
•ec
 = 
lcdRightFømeS≥c
;

213 
lcdFømeRight
[
ibuf
].
p1
 = &
lcdRightBuf
[ibuf][0];

214 
lcdFømeRight
[
ibuf
].
p2
 = 
NULL
;

215 
lcdFømeRight
[
ibuf
].
p3
 = 
NULL
;

219 
	}
}

223 
	$≠pBuûdPùñöes
()

225 
∂Le·
 = 
	`sùpCª©ePùñöe
(0, 1, 
	`SIPP_MBIN
(
mböImgSùp
));

226 
∂Right
 = 
	`sùpCª©ePùñöe
(2, 3, 
	`SIPP_MBIN
(
mböImgSùp
));

232 
dmaInLe·
 = 
	`sùpCª©eFûãr
(
∂Le·
, 0x00, 
CAM_LEFT_WINDOW_WIDTH
, 
CAM_WINDOW_HEIGHT
, 
	`N_PL
(1), 
	`SZ
(
UI¡16
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, "DMA_IN");

233 
lutLe·
 = 
	`sùpCª©eFûãr
(
∂Le·
, 0x00, 
CAM_LEFT_WINDOW_WIDTH
, 
CAM_WINDOW_HEIGHT
, 
	`N_PL
(1), 
	`SZ
(
UI¡16
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_LUT_ID
, "SIPP_LUT");

234 
dmaOutLe·
 = 
	`sùpCª©eFûãr
(
∂Le·
, 0x00, 
CAM_LEFT_WINDOW_WIDTH
, 
CAM_WINDOW_HEIGHT
, 
	`N_PL
(1), 
	`SZ
(
UI¡16
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, "DMA_OUT");

236 
	`sùpLökFûãr
(
lutLe·
 , 
dmaInLe·
, 1, 1);

237 
	`sùpLökFûãr
(
dmaOutLe·
, 
lutLe·
 , 1, 1);

240 
dmaInRight
 = 
	`sùpCª©eFûãr
(
∂Right
, 0x00, 
CAM_RIGHT_WINDOW_WIDTH
, 
CAM_WINDOW_HEIGHT
, 
	`N_PL
(1), 
	`SZ
(
UI¡16
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, "DMA_IN");

241 
lutRight
 = 
	`sùpCª©eFûãr
(
∂Right
, 0x00, 
CAM_RIGHT_WINDOW_WIDTH
, 
CAM_WINDOW_HEIGHT
, 
	`N_PL
(1), 
	`SZ
(
UI¡16
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_LUT_ID
, "SIPP_LUT");

242 
dmaOutRight
 = 
	`sùpCª©eFûãr
(
∂Right
, 0x00, 
LCD_RIGHT_WINDOW_WIDTH
, 
LCD_WINDOW_HEIGHT
, 
	`N_PL
(1), 
	`SZ
(
UI¡16
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, "DMA_OUT");

244 
	`sùpLökFûãr
(
lutRight
 , 
dmaInRight
, 1, 1);

245 
	`sùpLökFûãr
(
dmaOutRight
, 
lutRight
 , 1, 1);

246 
	}
}

249 
	$≠pC⁄figuªFûãrs
()

251 
dmaInCfgLe·
 = (
DmaP¨am
*)
dmaInLe·
->
∑øms
;

252 
dmaOutCfgLe·
 = (
DmaP¨am
*)
dmaOutLe·
->
∑øms
;

253 
lutCfgLe·
 = (
LutP¨am
*)
lutLe·
->
∑øms
;

255 
dmaInCfgRight
 = (
DmaP¨am
*)
dmaInRight
->
∑øms
;

256 
dmaOutCfgRight
 = (
DmaP¨am
*)
dmaOutRight
->
∑øms
;

257 
lutCfgRight
 = (
LutP¨am
*)
lutRight
->
∑øms
;

259 
dmaInCfgLe·
->
ddrAddr
 = (
UI¡32
)&
ˇmLe·Buf
[0];

260 
dmaOutCfgLe·
->
ddrAddr
 = (
UI¡32
)&
lcdLe·Buf
[0];

262 
dmaInCfgRight
->
ddrAddr
 = (
UI¡32
)&
ˇmRightBuf
[0];

263 
dmaOutCfgRight
->
ddrAddr
 = (
UI¡32
)&
lcdRightBuf
[0];

266 
lutCfgLe·
->
cfg
 = (0 ) |

270 
lutCfgLe·
->
sizeA
 = 0x44444444;

271 
lutCfgLe·
->
sizeB
 = 0x44444444;

272 
lutCfgLe·
->
lut
 = 
lutTabÀ
;

273 
lutCfgRight
->
‰mDim
 = ((
CAM_WINDOW_HEIGHT
 << 16Ë| 
CAM_LEFT_WINDOW_WIDTH
);

276 
lutCfgRight
->
cfg
 = (0 ) |

280 
lutCfgRight
->
sizeA
 = 0x44444444;

281 
lutCfgRight
->
sizeB
 = 0x44444444;

282 
lutCfgRight
->
lut
 = 
lutTabÀ
;

283 
lutCfgRight
->
‰mDim
 = ((
CAM_WINDOW_HEIGHT
 << 16Ë| 
CAM_LEFT_WINDOW_WIDTH
);

285 
	`c⁄figuªLutFûãrSûic⁄S≥cific
(
lutCfgLe·
);

286 
	`c⁄figuªLutFûãrSûic⁄S≥cific
(
lutCfgRight
);

287 
	}
}

289 
‰ameBuf„r
* 
	$AŒoˇãNextLe·CamFømeBuf
()

291 ++
√wCamFømeCåLe·
;

292  ( &
ˇmLe·Føme
[
√wCamFømeCåLe·
 % 
MAX_USED_BUF
] );

293 
	}
}

295 
‰ameBuf„r
* 
	$AŒoˇãNextRightCamFømeBuf
()

297 ++
√wCamFømeCåRight
;

298  ( &
ˇmRightFøme
[
√wCamFømeCåRight
 % 
MAX_USED_BUF
] );

299 
	}
}

302 
‰ameBuf„r
* 
	$ÆloˇãLcdFøme
(
œyî
)

304 
‰ameBuf„r
 *
lcdFøme
 = 
NULL
;

305 i‡(
œyî
 =
VL1
)

306 
lcdFøme
 = &
lcdFømeLe·
[
lcdFømeCå
 % 
MAX_USED_BUF
];

307 i‡(
œyî
 =
VL2
)

308 
lcdFøme
 = &
lcdFømeRight
[
lcdFømeCå
 % 
MAX_USED_BUF
];

310  ( 
lcdFøme
 );

311 
	}
}

314 
	$maö
()

316 
s32
 
°©us
;

317 
ˇmEº‹Ty≥
 
ˇmSètus
;

318 
s32
 
bﬂrdSètus
;

320 
°©us
 = 
	`öôClocksAndMem‹y
();

321 if(
°©us
)

322  
°©us
;

323 #ifde‡
MV0212


324 
öt32_t
 
rc
;

325 
uöt32_t
 
ªv
;

326 
BﬂrdI2CInfo
 
öfo
[
NUM_I2C_DEVS
];

327 
BﬂrdC⁄figDesc
 
c⁄fig
[] =

330 
BRDCONFIG_GPIO
,

332 (*)
brdMV0182R5GpioCfgDeÁu…


335 
BRDCONFIG_END
,

336 
NULL


340 
rc
 = 
	`BﬂrdInô
(
c⁄fig
);

341 i‡(
rc
!=
BRDCONFIG_SUCCESS
)

343 
	`¥ötf
("Error: board initialization failed with %ld status\n",

344 
rc
);

345  
rc
;

348 
rc
 = 
	`BﬂrdGëPCBRevisi⁄
(&
ªv
);

349 i‡(
rc
!=
BRDCONFIG_SUCCESS
)

351 
	`¥ötf
("Error: board configurationÑead failed with %ld status\n",

352 
rc
);

353  
rc
;

355 
	`¥ötf
("Bﬂrd Mv0212 inôülized,Ñevisi⁄ = %lu \n", 
ªv
);

357 
bﬂrdSètus
 = 
	`BﬂrdInôExtPŒ
(
EXT_PLL_CFG_148_24_24MHZ
);

358 i‡(
bﬂrdSètus
 !
BRDCONFIG_SUCCESS
)

360 
	`¥ötf
("Error: board initialization failed with %ld status\n",

361 
bﬂrdSètus
);

364 
rc
 = 
	`BﬂrdGëI2CInfo
(
öfo
, 
NUM_I2C_DEVS
);

365 
i2c0H™dÀ
=
öfo
[0].
h™dÀr
;

366 
i2c2H™dÀ
=
öfo
[2].
h™dÀr
;

367 #ñi‡
	`deföed
(
MV0182
)

368 
bﬂrdSètus
 = 
	`BﬂrdInôüli£
(
EXT_PLL_CFG_148_24_24MHZ
);

369 
i2c0H™dÀ
=
gAµDevHndls
.i2c0Handle;

370 
i2c2H™dÀ
=
gAµDevHndls
.i2c2Handle;

371 i‡(
bﬂrdSètus
 !
B_SUCCESS
)

373 
	`¥ötf
("Error: board initialization failed with %ld status\n",

374 
bﬂrdSètus
);

378 
	`swcLe⁄SëPIL
(0);

380 
	`gíî©eLutTabÀ
();

382 
	`¥ï¨eDrivîD©a
();

384 
	`¥ötf
("ConfiguringÅhe SIPPÖipeline\n");

385 
	`sùpInôülize
();

386 
	`≠pBuûdPùñöes
();

387 
	`≠pC⁄figuªFûãrs
();

388 
	`sùpFöÆizePùñöe
(
∂Le·
);

389 
	`sùpFöÆizePùñöe
(
∂Right
);

392 
	`DrvMssC⁄√˘LcdToGpio
();

394 
	`¥ötf
("Configuring imx208 dual camerasánd datapath\n");

395 
i§CÆlbacks
.
gëBlock
 = 
NULL
;

396 
i§CÆlbacks
.
nŸifiˇti⁄
 = 
NULL
;

397 
ˇŒbacks
.
i§CbfLi°
 = &
i§CÆlbacks
;

398 
ˇŒbacks
.
£ns‹CbfLi°
 = 
NULL
;

401 
i§CÆlbacks
.
gëFøme
 = 
AŒoˇãNextLe·CamFømeBuf
;

403 
ˇmSètus
 = 
	`CamInô
–&
ˇmHndlLe·
, 
°©icCamC⁄fig
, &
u£rCamLe·C⁄fig
, &
ˇŒbacks
, 
i2c0H™dÀ
);

404 i‡(
ˇmSètus
 !
CAM_SUCCESS
)

406 
	`¥ötf
("\¿Le· camî®c⁄figuøti⁄ faûed (%d).\n", 
ˇmSètus
);

409 
ˇmSètus
 = 
	`CamSèπ
–&
ˇmHndlLe·
 );

410 i‡(
ˇmSètus
 !
CAM_SUCCESS
)

412 
	`¥ötf
("\¿Le· camî®ÁûedÅÿ°¨à(%d).\n", 
ˇmSètus
);

417 
i§CÆlbacks
.
gëFøme
 = 
AŒoˇãNextRightCamFømeBuf
;

419 
ˇmSètus
 = 
	`CamInô
–&
ˇmHndlRight
, 
°©icCamC⁄fig
, &
u£rCamRightC⁄fig
, &
ˇŒbacks
, 
i2c0H™dÀ
);

420 i‡(
ˇmSètus
 !
CAM_SUCCESS
)

422 
	`¥ötf
("\¿Righàˇmî®c⁄figuøti⁄ faûed (%d).\n", 
ˇmSètus
);

426 
ˇmSètus
 = 
	`CamSèπ
–&
ˇmHndlRight
 );

427 i‡(
ˇmSètus
 !
CAM_SUCCESS
)

429 
	`¥ötf
("\¿Righàˇmî®ÁûedÅÿ°¨à(%d).\n", 
ˇmSètus
);

434 
	`¥ötf
("ConfiguringÅhe HDMI chip ADV7513\n");

435 
°©us
 = 
	`öôADV7513ªg
(
i2c2H™dÀ
, 
ADV7513C⁄fig
);

437 i‡(
°©us
 != 0)

439 
	`¥ötf
("ADV7513 C⁄figuøti⁄ faûed (%ldË\n", 
°©us
);

443 
	`¥ötf
("ConfiguringÅhe LCD\n");

444 
	`LCDInô
(&
lcdHndl
, &
lcdS≥c1080p60
, 
NULL
, 
LCD1
);

445 
	`LCDInôLayî
(&
lcdHndl
, 
VL1
, &
lcdLe·FømeS≥c
, 
lcdLayîOff£tLe·
);

446 
	`LCDInôLayî
(&
lcdHndl
, 
VL2
, &
lcdRightFømeS≥c
, 
lcdLayîOff£tRight
);

448 
	`LCDSëupCÆlbacks
(&
lcdHndl
, &
ÆloˇãLcdFøme
, 
NULL
, NULL, NULL);

450 
	`¥ötf
("\n Starting dual streaming on LCD...\n");

451 
	`LCDSèπ
(&
lcdHndl
);

454 
¥o˚ssögFømeCå
 = 
√wCamFømeCåLe·
;

459 if–
√wCamFømeCåLe·
 !
¥o˚ssögFømeCå
 )

461 
¥o˚ssögFømeCå
 = 
√wCamFømeCåLe·
;

464 
dmaInCfgLe·
->
ddrAddr
 = (
UI¡32
)&
ˇmLe·Buf
[(
√wCamFømeCåLe·
 -2Ë% 
MAX_USED_BUF
];

465 
dmaInCfgRight
->
ddrAddr
 = (
UI¡32
)&
ˇmRightBuf
[(
√wCamFømeCåRight
 -2Ë% 
MAX_USED_BUF
];

466 
dmaOutCfgLe·
->
ddrAddr
 = (
UI¡32
)&
lcdLe·Buf
[(
lcdFømeCå
 + 1Ë% 
MAX_USED_BUF
];

467 
dmaOutCfgRight
->
ddrAddr
 = (
UI¡32
)&
lcdRightBuf
[(
lcdFømeCå
 + 1Ë% 
MAX_USED_BUF
];

469 
	`sùpPro˚ssFøme
(
∂Le·
);

470 
	`sùpPro˚ssFøme
(
∂Right
);

472 
lcdFømeCå
++;

477 
	}
}

	@Demo/Stereo208SDCard/arch/ma2x5x/leon/los_app_config_2150.c

13 
	~"los_≠p_c⁄fig.h
"

14 
	~"DrvC¥.h
"

27 
	$blocksRe£tSûic⁄S≥cific
()

29 
	`DrvC¥SysDevi˚A˘i⁄
(
SIPP_DOMAIN
, 
ASSERT_RESET
, 
DEV_SIPP_MIPI
);

30 
	`DrvC¥SysDevi˚A˘i⁄
(
UPA_DOMAIN
, 
ASSERT_RESET
, 
APP_UPA_CLOCKS
);

32 
	`DrvC¥SysDevi˚A˘i⁄
(
MSS_DOMAIN
, 
DEASSERT_RESET
, -1);

35 
	`DrvC¥SysDevi˚A˘i⁄
(
CSS_DOMAIN
, 
DEASSERT_RESET
, -1);

36 
	`DrvC¥SysDevi˚A˘i⁄
(
SIPP_DOMAIN
, 
DEASSERT_RESET
, -1);

37 
	`DrvC¥SysDevi˚A˘i⁄
(
UPA_DOMAIN
, 
DEASSERT_RESET
, -1);

38 
	}
}

	@Demo/Stereo208SDCard/arch/ma2x5x/leon/los_app_config_2150.h

13 #i‚de‡
LOS_APP_CONFIG_2150_H


14 
	#LOS_APP_CONFIG_2150_H


	)

18 
	~"mv_ty≥s.h
"

19 
	~"DrvC¥Deföes.h
"

23 
	#MSS_CLOCKS
 ( 
DEV_MSS_APB_SLV
 | \

24 
DEV_MSS_APB2_CTRL
 | \

25 
DEV_MSS_RTBRIDGE
 | \

26 
DEV_MSS_RTAHB_CTRL
 | \

27 
DEV_MSS_LRT
 | \

28 
DEV_MSS_LRT_DSU
 | \

29 
DEV_MSS_LRT_L2C
 | \

30 
DEV_MSS_LRT_ICB
 | \

31 
DEV_MSS_AXI_BRIDGE
 | \

32 
DEV_MSS_MXI_CTRL
 | \

33 
DEV_MSS_MXI_DEFSLV
 | \

34 
DEV_MSS_AXI_MON
 | \

35 
DEV_MSS_MIPI
 | \

36 
DEV_MSS_CIF0
 | \

37 
DEV_MSS_LCD
 | \

38 
DEV_MSS_AMC
 | \

39 
DEV_MSS_SIPP
 | \

40 
DEV_MSS_TIM
 )

	)

42 
	#APP_SIPP_CLOCKS
 ( 
DEV_SIPP_SIPP_ABPSLV
 | \

43 
DEV_SIPP_APB_SLV
 | \

44 
DEV_SIPP_MIPI
 | \

45 
DEV_SIPP_LUT
 | \

46 
DEV_SIPP_MIPI_RX1
 )

	)

	@Demo/Stereo208SDCard/arch/ma2x5x/leon_rt/lrt_app_config_2150.c

2 
	~"mv_ty≥s.h
"

3 
	~"sùp.h
"

5 
u16
 
	glutTabÀ
[256] 
__©åibuã__
((
Æig√d
(8)));

7 
	$c⁄figuªLutFûãrSûic⁄S≥cific
(
LutP¨am
* 
lutCfg
)

9 
lutCfg
->
lutF‹m©
 = 2;

10 
	}
}

	@Demo/Stereo208SDCard/leon/los_app_config.c

13 
	~"DrvDdr.h
"

14 
	~"as£π.h
"

15 
	~"DrvShaveL2Cache.h
"

16 
	~"OsDrvTimî.h
"

17 
	~"OsDrvC¥.h
"

18 
	~"los_≠p_c⁄fig.h
"

19 
	~"DrvC¥.h
"

23 
	#L2CACHE_CFG
 (
SHAVE_L2CACHE_NORMAL_MODE
)

	)

24 
	#PARTITION_0
 (0)

	)

25 
	#SHAVES_USED
 (12)

	)

35 
tyAuxClkDividîCfg
 
	gauxClk
[] =

38 .
auxClockE«bÀMask
 = (
AUX_CLK_MASK_MEDIA
 | 
AUX_CLK_MASK_LCD
),

39 .
	gauxClockSour˚
 = 
CLK_SRC_SYS_CLK_DIV2
 ,

40 .
	gauxClockDivNumî©‹
 = 1,

41 .
	gauxClockDivDíomö©‹
 = 1,

44 .
	gauxClockE«bÀMask
 = (
AUX_CLK_MASK_CIF0
 | 
AUX_CLK_MASK_CIF1
),

45 .
	gauxClockSour˚
 = 
CLK_SRC_SYS_CLK
,

46 .
	gauxClockDivNumî©‹
 = 1,

47 .
	gauxClockDivDíomö©‹
 = 1,

50 .
	gauxClockE«bÀMask
 = 
CLOCKS_MIPICFG
,

51 .
	gauxClockSour˚
 = 
CLK_SRC_SYS_CLK
,

52 .
	gauxClockDivNumî©‹
 = 1,

53 .
	gauxClockDivDíomö©‹
 = 24,

56 .
	gauxClockE«bÀMask
 = 
AUX_CLK_MASK_SDIO
,

57 .
	gauxClockSour˚
 = 
CLK_SRC_PLL0
,

58 .
	gauxClockDivNumî©‹
 = 1,

59 .
	gauxClockDivDíomö©‹
 = 2,

69 
	$öôClocksAndMem‹y
()

71 
i
;

72 
s32
 
sc
;

74 
sc
 = 
	`OsDrvC¥Inô
();

75 if(
sc
)

76  
sc
;

77 
sc
 = 
	`OsDrvC¥O≥n
();

78 if(
sc
)

79  
sc
;

80 
sc
 = 
	`OsDrvC¥AuxClockAºayC⁄fig
(
auxClk
);

81 if(
sc
)

82  
sc
;

84 
	`blocksRe£tSûic⁄S≥cific
();

86 
sc
 = 
	`OsDrvTimîInô
();

87 if(
sc
)

88  
sc
;

89 
	`DrvDdrInôüli£
(
NULL
);

92 
sc
 = 
	`DrvShaveL2CacheSëMode
(
L2CACHE_CFG
);

93 if(
sc
)

94  
sc
;

97 
	`DrvShaveL2CacheSëupP¨tôi⁄
(
SHAVEPART256KB
);

100 
sc
 = 
	`DrvShaveL2CacheAŒoˇãSëP¨tôi⁄s
();

101 if(
sc
)

102  
sc
;

105 
i
 = 0; i < 
SHAVES_USED
; i++)

107 
	`DrvShaveL2CacheSëLSUP¨tId
(
i
, 
PARTITION_0
);

110 
	`DrvShaveL2CacheP¨tôi⁄FlushAndInvÆid©e
(
PARTITION_0
);

113 
	}
}

	@Demo/Stereo208SDCard/leon/los_app_config.h

13 #i‚de‡
LOS_APP_CONFIG_H


14 
	#LOS_APP_CONFIG_H


	)

18 
	~"mv_ty≥s.h
"

19 
	~"comm⁄_deföes.h
"

22 #i‡
deföed
(
MA2150
Ë|| deföed(
MA2155
Ë|| deföed(
MA2450
Ë|| deföed(
MA2455
)

23 
	~"los_≠p_c⁄fig_2150.h
"

29 
	#APP_UPA_CLOCKS
 (
DEV_UPA_SH0
 | \

30 
DEV_UPA_SH1
 | \

31 
DEV_UPA_SH2
 | \

32 
DEV_UPA_SH3
 | \

33 
DEV_UPA_SH4
 | \

34 
DEV_UPA_SH5
 | \

35 
DEV_UPA_SH6
 | \

36 
DEV_UPA_SHAVE_L2
 | \

37 
DEV_UPA_CDMA
 | \

38 
DEV_UPA_CTRL
 )

	)

41 
	#CLOCKS_MIPICFG
 (
AUX_CLK_MASK_MIPI_ECFG
 | 
AUX_CLK_MASK_MIPI_CFG
)

	)

51 
öôClocksAndMem‹y
();

52 
blocksRe£tSûic⁄S≥cific
();

	@Demo/Stereo208SDCard/leon/main.c

12 
	~<°dlib.h
>

13 
	~<°dio.h
>

14 
	~<°rög.h
>

15 
	~<î∫o.h
>

16 
	~<πems.h
>

17 
	~<DrvLe⁄.h
>

18 
	~<DrvLe⁄L2C.h
>

19 
	~<DrvShaveL2Cache.h
>

20 
	~<DrvTimî.h
>

21 
	~<OsDrvC¥.h
>

22 
	~<OsDrvTimî.h
>

23 
	~"OsDrvSdio.h
"

24 
	~<πems/bd∑π.h
>

25 
	~<πems/fsmou¡.h
>

26 
	~<πems/ide_∑π_èbÀ.h
>

27 
	~"DrvGpio.h
"

31 
	~"πems_c⁄fig.h
"

32 
	~"comm⁄_deföes.h
"

37 
	#PRINTF_BOLD_RED
 "\033[1m\033[31m"

38 
	#PRINTF_RESET
 "\033[0m"

39 

	)

42 
	#WRITE_SIZE
 (
LCD_LEFT_FRAME_SIZE_BYTES
)

43 
	#ERASE_BLOCK_SIZE
 (
CONFIGURE_BDBUF_CACHE_MEMORY_SIZE
)

	)

44 
	#NR_FRAMES_TO_WRITE
 (500)

45 

	)

47 #i‡!
deföed
 (
SAVE_LEFT_CAMERA
Ë&& !deföed (
SAVE_RIGHT_CAMERA
)

48 
	#SAVE_LEFT_CAMERA


	)

51 #i‡
deföed
 (
SAVE_LEFT_CAMERA
Ë&& deföed (
SAVE_RIGHT_CAMERA
)

52 
	#NR_FRAMES_TO_WRITE_TOTAL
 (
NR_FRAMES_TO_WRITE
 * 2)

	)

54 
	#NR_FRAMES_TO_WRITE_TOTAL
 (
NR_FRAMES_TO_WRITE
)

	)

60 
u32
 *
Ãt_°¨t
;

62 
u8
 
Ãt_lcdLe·Buf
[
MAX_USED_BUF
][
LCD_LEFT_FRAME_SIZE_BYTES
];

63 
u8
 
Ãt_lcdRightBuf
[
MAX_USED_BUF
][
LCD_RIGHT_FRAME_SIZE_BYTES
];

65 vﬁ©ûê
uöt64_t
 
	gwrôög_times
[
NR_FRAMES_TO_WRITE
 * 2];

66 vﬁ©ûê
uöt32_t
 
	gwrôe_cou¡î_≥r‰ame
 = 0;

67 vﬁ©ûê
uöt32_t
 
	gwrôe_cou¡î_tŸÆ
 = 0;

71 c⁄° 
πems_f°ab_íåy
 
	gfs_èbÀ
 [] = {

73 .
sour˚
 = "/dev/sdc0",

74 .
	gèrgë
 = "/mnt/sdcard",

75 .
	gty≥
 = "dosfs",

76 .
	g›ti⁄s
 = 
RTEMS_FILESYSTEM_READ_WRITE
,

77 .
	gªp‹t_ªas⁄s
 = 
RTEMS_FSTAB_ANY
,

78 .
	gab‹t_ªas⁄s
 = 
RTEMS_FSTAB_OK


81 .
	gsour˚
 = "/dev/sdc01",

82 .
	gèrgë
 = "/mnt/sdcard",

83 .
	gty≥
 = "dosfs",

84 .
	g›ti⁄s
 = 
RTEMS_FILESYSTEM_READ_WRITE
,

85 .
	gªp‹t_ªas⁄s
 = 
RTEMS_FSTAB_ANY
,

86 .
	gab‹t_ªas⁄s
 = 
RTEMS_FSTAB_NONE


92 *
sdC¨dExam∂e
(*
¨g
);

93 
ªp‹t
();

102 *
	$POSIX_Inô
 (*
¨gs
)

104 
	`UNUSED
(
¨gs
);

106 
±hªad_©å_t
 
©å
;

107 
πems_°©us_code
 
sc
;

108 
°©us
, 
rc1
;

109 
±hªad_t
 
thªad1
;

111 
	`¥ötf
 ("\nRTEMS POSIX Started\n");

113 
°©us
 = 
	`öôClocksAndMem‹y
();

114 if(
°©us
)

115 
	`exô
(
°©us
);

117 
	`DrvLe⁄RTSèπup
((
u32
)&
Ãt_°¨t
);

119 
	`DrvLe⁄RTWaôF‹BoŸ
();

120 
	`¥ötf
("LeonRT has succesfully bootedánd streamsáre coming :).\n");

122 
	`¥ötf
 ("\nRTEMS POSIX Started\n");

124 
°©us
 = 
	`±hªad_©å_öô
(&
©å
);

125 if(
°©us
 !=0) {

126 
	`¥ötf
("pthread_attr_initÉrror");

127 
	`exô
(
°©us
);

129 
°©us
 = 
	`±hªad_©å_£töhîôsched
(&
©å
, 
PTHREAD_EXPLICIT_SCHED
);

130 if(
°©us
 != 0) {

131 
	`¥ötf
("pthread_attr_setinheritschedÉrror");

132 
	`exô
(
°©us
);

134 
°©us
 = 
	`±hªad_©å_£tschedpﬁicy
(&
©å
, 
SCHED_RR
);

135 if(
°©us
 != 0) {

136 
	`¥ötf
("pthread_attr_setschedpolicyÉrror");

137 
	`exô
(
°©us
);

140 
osDrvSdioE¡rõs_t
 
öfo
 = { 1,

144 
SDIO_SDR50
,

145 
NULL
}}};

147 
	`¥ötf
("\nSdio driver initialising \n");

148 
sc
 = 
	`OsDrvSdioInô
(&
öfo
);

149 i‡(
sc
 != 0)

150 
	`¥ötf
("\nOsDrvSdioInô s¯%†\n", 
	`πems_°©us_ãxt
(
sc
));

151 
	`as£π
((
sc
 == 0));

153 
sc
 = 
	`πems_bd∑π_ªgi°î_‰om_disk
("/dev/sdc0");

155 
	`¥ötf
("\ƒãms_bd∑π_ªgi°î_‰om_disk s¯%†\n", 
	`πems_°©us_ãxt
(
sc
));

157 i‡((
rc1
 = 
	`±hªad_¸óã
–&
thªad1
, &
©å
, &
sdC¨dExam∂e
,
NULL
))) {

158 
	`¥ötf
("\nThªad 1 cª©i⁄ faûed: %d\n", 
rc1
);

159 
	`exô
(
rc1
);

162 
	`¥ötf
("\nThread 1 created\n");

165 
sc
 = 
	`±hªad_joö
–
thªad1
, 
NULL
);

166 if(
sc
) {

167 
	`¥ötf
("pthread_joinÉrror!");

168 
	`exô
(
sc
);

172 
	`ªp‹t
();

174 
	`DrvLe⁄RTWaôExecuti⁄
();

176 
	`exô
(0);

177 
	}
}

183 
	$ªp‹t
()

185 
uöt32_t
 
i
;

186 
uöt64_t
 
avg
 = 0;

187 
uöt64_t
 
max
 = 
wrôög_times
[0];

189 
i
=0; i < (
NR_FRAMES_TO_WRITE_TOTAL
); i++)

191 #ifde‡
PRINT_PER_FRAME_DURATIONS


192 
	`¥ötf
 ( "%3d - %Œu \n",
i
,
wrôög_times
[i]);

194 
avg
 +(
wrôög_times
[
i
] / 
NR_FRAMES_TO_WRITE_TOTAL
);

196 if(
wrôög_times
[
i
] > 
max
)

198 
max
 = 
wrôög_times
[
i
];

202 
avîage_time
 = ()
avg
 / ()(
PLL_DESIRED_FREQ_KHZ
*1000);

203 
avîage_•ìd_mbps
 = ()
WRITE_SIZE
 / 
avîage_time
;

204 
avîage_•ìd_mbps
 =áverage_speed_mbps / (1024*1024);

206 
max_time
 = ()
max
 / ()(
PLL_DESIRED_FREQ_KHZ
*1000);

207 
mö_•ìd
 = ()
ERASE_BLOCK_SIZE
 / 
max_time
;

208 
mö_•ìd
 = min_speed / (1024*1024);

210 
	`¥ötf
 ( "------------------------------------\n" );

211 
	`¥ötf
 ( "Wrôêsize: %lu byãs\n", (
uöt32_t
)
WRITE_SIZE
 );

212 
	`¥ötf
 ( "N∏o‡‰ame†wrôãn: %dÖî sís‹ \n", 
NR_FRAMES_TO_WRITE
 );

213 
	`¥ötf
 ( "AvîagêCC: %Œu \n",
avg
 );

214 
	`¥ötf
 ( "Avîagêtime: %4.4‡£c⁄ds\n",
avîage_time
);

215 
	`¥ötf
 ( 
PRINTF_BOLD_RED
 "Avîagêmbps: %4.2‡Mb/s" 
PRINTF_RESET
 "\n",
avîage_•ìd_mbps
 );

216 
	`¥ötf
 ( "------------------------------------\n" );

217 
	`¥ötf
 ( "Mö s≥ed CC: %Œu \n", 
max
 );

218 
	`¥ötf
 ( "Mö s≥edÅime: %4.4‡£c⁄ds\n", 
max_time
 );

219 
	`¥ötf
 ( 
PRINTF_BOLD_RED
 "Mö s≥ed mbps: %4.2‡Mb/s" 
PRINTF_RESET
 "\n", 
mö_•ìd
 );

220 
	`¥ötf
 ( "------------------------------------\n" );

221 
	}
}

227 *
	$sdC¨dExam∂e
(*
¨g
)

229 
	`UNUSED
(
¨g
);

231 
fd1
 = 0;

232 
fd2
 = 0;

233 
off£t
 = 0;

234 
πems_°©us_code
 
sc
;

235 
tyTimeSèmp
 
g_ticks
;

238 
sc
 = 
	`πems_fsmou¡
–
fs_èbÀ
, (fs_èbÀ)/(fs_èbÀ[0]), 
NULL
);

239 
	`¥ötf
("\nMou¡ög FûêSy°em sètu†%†\n", 
	`πems_°©us_ãxt
(
sc
));

241 #ifde‡
SAVE_LEFT_CAMERA


243 
fd1
 = 
	`›í
("/m¡/sdˇrd/À·Cam.yuv", 
O_RDWR
 | 
O_CREAT
);

246 i‡(
fd1
 == 0)

248 
fd1
 = 
	`›í
("/m¡/sdˇrd/À·Cam.yuv", 
O_RDWR
);

250 
	`as£π
(
fd1
);

253 
off£t
 = 
	`l£ek
(
fd1
, 0, 
SEEK_END
);

254 
	`as£π
(
off£t
 >= 0);

257 #ifde‡
SAVE_RIGHT_CAMERA


260 
fd2
 = 
	`›í
("/m¡/sdˇrd/rightCam.yuv", 
O_RDWR
 | 
O_CREAT
);

263 i‡(
fd2
 == 0)

265 
fd2
 = 
	`›í
("/m¡/sdˇrd/rightCam.yuv", 
O_RDWR
);

267 
	`as£π
(
fd2
);

270 
off£t
 = 
	`l£ek
(
fd2
, 0, 
SEEK_END
);

271 
	`as£π
(
off£t
 >= 0);

275 
	`¥ötf
 ( "Writing framesÅo sdcard... \n" );

277 
wrôe_cou¡î_≥r‰ame
 = 0; wrôe_cou¡î_≥r‰amê< 
NR_FRAMES_TO_WRITE
; write_counter_perframe++)

279 #ifde‡
SAVE_LEFT_CAMERA


281 
	`DrvTimîSèπTicksCou¡
(&
g_ticks
);

283 
sc
 = 
	`wrôe
(
fd1
, &
Ãt_lcdLe·Buf
[
wrôe_cou¡î_≥r‰ame
 % 
MAX_USED_BUF
], (
WRITE_SIZE
));

285 
	`as£π
(
sc
 =(
WRITE_SIZE
));

287 
	`DrvTimîGëEœp£dTicks
(&
g_ticks
, (
u64
*)(&
wrôög_times
[
wrôe_cou¡î_tŸÆ
++]));

289 #ifde‡
SAVE_RIGHT_CAMERA


291 
	`DrvTimîSèπTicksCou¡
(&
g_ticks
);

293 
sc
 = 
	`wrôe
(
fd2
, &
Ãt_lcdRightBuf
[
wrôe_cou¡î_≥r‰ame
 % 
MAX_USED_BUF
], (
WRITE_SIZE
));

295 
	`as£π
(
sc
 =(
WRITE_SIZE
));

297 
	`DrvTimîGëEœp£dTicks
(&
g_ticks
, (
u64
*)(&
wrôög_times
[
wrôe_cou¡î_tŸÆ
++]));

301 #ifde‡
SAVE_LEFT_CAMERA


303 
sc
 = 
	`fsync
(
fd1
);

304 
sc
 = 
	`˛o£
(
fd1
);

305 
	`as£π
((
sc
 == 0));

307 #ifde‡
SAVE_RIGHT_CAMERA


309 
sc
 = 
	`fsync
(
fd2
);

310 
sc
 = 
	`˛o£
(
fd2
);

311 
	`as£π
((
sc
 == 0));

314 
sc
 = 
	`unmou¡
("/mnt/sdcard");

315 i‡(
sc
 == 0)

316 
	`¥ötf
("\nCard successfully unmounted\n\n");

318 
	`¥ötf
("\nFailedÅo unmount card!\n\n");

319 
	`as£π
(
sc
 == 0);

321 
	`±hªad_exô
(0);

322  
NULL
;

323 
	}
}

	@Demo/Stereo208SDCard/leon/rtems_config.h

9 #i‚de‡
_RTEMS_CONFIG_H_


10 
	#_RTEMS_CONFIG_H_


	)

14 
	~<πems.h
>

15 
	~<πems/b•Io.h
>

16 
	~"los_≠p_c⁄fig.h
"

17 
	~"ÁèlExãnsi⁄.h
"

21 #i‡
deföed
(
__RTEMS__
)

23 #i‡!
deföed
 (
__CONFIG__
)

24 
	#__CONFIG__


	)

27 
	#CONFIGURE_INIT


	)

29 #i‚de‡
RTEMS_POSIX_API


30 
	#RTEMS_POSIX_API


	)

33 
	#CONFIGURE_MICROSECONDS_PER_TICK
 1000

	)

35 
	#CONFIGURE_TICKS_PER_TIMESLICE
 10

	)

37 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

39 
	#CONFIGURE_APPLICATION_NEEDS_CLOCK_DRIVER


	)

41 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

43 
	#CONFIGURE_MINIMUM_TASK_STACK_SIZE
 8192

	)

45 
	#CONFIGURE_MAXIMUM_TASKS
 4

	)

47 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 4

	)

49 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 8

	)

51 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 8

	)

53 
	#CONFIGURE_MAXIMUM_POSIX_SEMAPHORES
 8

	)

55 
	#CONFIGURE_MAXIMUM_POSIX_MESSAGE_QUEUES
 8

	)

57 
	#CONFIGURE_MAXIMUM_POSIX_TIMERS
 4

	)

59 
	#CONFIGURE_MAXIMUM_TIMERS
 4

	)

63 
	#CONFIGURE_USE_IMFS_AS_BASE_FILESYSTEM


	)

64 
	#CONFIGURE_FILESYSTEM_DOSFS


	)

65 
	#CONFIGURE_MAXIMUM_DRIVERS
 10

	)

66 
	#CONFIGURE_MAXIMUM_SEMAPHORES
 (4 * 
RTEMS_DOSFS_SEMAPHORES_PER_INSTANCE
)

	)

67 
	#CONFIGURE_LIBIO_MAXIMUM_FILE_DESCRIPTORS
 30

	)

68 
	#CONFIGURE_APPLICATION_NEEDS_LIBBLOCK


	)

69 
	#CONFIGURE_POSIX_INIT_TASKS_TABLE


	)

70 
	#CONFIGURE_BDBUF_MAX_READ_AHEAD_BLOCKS
 (16)

	)

71 
	#CONFIGURE_BDBUF_MAX_WRITE_BLOCKS
 (64)

	)

72 
	#CONFIGURE_BDBUF_BUFFER_MIN_SIZE
 (512)

	)

73 
	#CONFIGURE_BDBUF_BUFFER_MAX_SIZE
 (32 * 1024)

	)

74 
	#CONFIGURE_BDBUF_CACHE_MEMORY_SIZE
 (4 * 1024 * 1024)

	)

78 
	#CONFIGURE_MAXIMUM_USER_EXTENSIONS
 1

	)

79 
	#CONFIGURE_INITIAL_EXTENSIONS
 { .
Áèl
 = 
F©Æ_exãnsi⁄
 }

	)

81 *
POSIX_Inô
 (*
¨gs
);

83 
	~<πems/c⁄fdefs.h
>

88 
BSP_SET_CLOCK
(
SYS_CLK_KHZ
, 
PLL_DESIRED_FREQ_KHZ
, 1, 1,
DEFAULT_CORE_CSS_DSS_CLOCKS
, 
MSS_CLOCKS
, 
APP_UPA_CLOCKS
, 
APP_SIPP_CLOCKS
, 0x0);

91 
BSP_SET_L2C_CONFIG
(0, 
L2C_REPL_LRU
, 0, 
L2C_MODE_COPY_BACK
, 0, 
NULL
);

	@Demo/Stereo208SDCard/leon_rt/lrt_app_config.c

13 
	~"Ãt_≠p_c⁄fig.h
"

14 
	~"DrvC¥.h
"

15 
	~"DrvTimî.h
"

29 
	$öôClocksAndMem‹y
()

31 
s32
 
sc
;

32 
sc
 = 
	`DrvC¥InôClocks
(
SYS_CLK_KHZ
, 0, 0, 0, 0);

34 if(
sc
)

35  
sc
;

36 
sc
 = 
	`DrvTimîInô
();

37 if(
sc
)

38  
sc
;

40 
	}
}

	@Demo/Stereo208SDCard/leon_rt/lrt_app_config.h

13 #i‚de‡
LRT_APP_CONFIG_H


14 
	#LRT_APP_CONFIG_H


	)

18 
	~"mv_ty≥s.h
"

19 
	~"comm⁄_deföes.h
"

20 
	~"sùp.h
"

31 
öôClocksAndMem‹y
();

32 
c⁄figuªLutFûãrSûic⁄S≥cific
(
LutP¨am
* 
lutCfg
);

	@Demo/Stereo208SDCard/leon_rt/main.c

11 
	~"°dio.h
"

12 
	~"Ãt_≠p_c⁄fig.h
"

13 #ifde‡
MV0212


14 
	~"MV0212.h
"

15 
	~"brdGpioCfgs/brdMv0182R5GpioDeÁu…s.h
"

16 #ñi‡
deföed
(
MV0182
)

17 
	~<Bﬂrd182Api.h
>

19 
	~"DrvCDCEL.h
"

20 
	~"DrvC¥.h
"

21 
	~"DrvGpioDeföes.h
"

22 
	~"ªgi°îsMyrüd.h
"

23 
	~"DrvADV7513.h
"

24 
	~"CamGíîicApi.h
"

25 
	~"LcdApi.h
"

26 
	~"DrvMss.h
"

27 
	~"DrvLe⁄.h
"

28 
	~"sùp.h
"

29 
	~"sùpTe°Comm⁄.h
"

30 
	~"LcdCEA1080p60.h
"

31 
	~"imx208_2L_1936x1096_Raw10_30Hz.h
"

33 
	~"comm⁄_deföes.h
"

37 
	#DDR_AREA
 
	`__©åibuã__
((
	`£˘i⁄
(".ddr.bss")))

	)

39 
	#SVU_MASK
 (0x7)

40 
	#LAST_SVU
 (2)

	)

43 #ifde‡
MV0212


44 
	#NUM_I2C_DEVS
 3

	)

48 
I2CM_Devi˚
 * 
	gi2c0H™dÀ
;

49 
I2CM_Devi˚
 * 
	gi2c2H™dÀ
;

51 
GíîicCamS≥c
 *
	g°©icCamC⁄fig
 = &
imx208_2L_1936x1096_RAW10_30Hz_ˇmCfg
;

53 vﬁ©ûê
	$ALIGNED
(4Ë
u32
 
√wCamFømeCåLe·
 = 
FIRST_INCOMING_BUF_ID
;

54 vﬁ©ûê
	$ALIGNED
(4Ë
u32
 
√wCamFømeCåRight
 = 
FIRST_INCOMING_BUF_ID
;

55 vﬁ©ûê
	$ALIGNED
(4Ë
u32
 
lcdFømeCå
 = 
FIRST_OUTGOING_BUF_ID
;

57 
u8
 
ˇmLe·Buf
[
MAX_USED_BUF
][
CAM_LEFT_FRAME_SIZE_BYTES
] 
DDR_AREA
 
	`ALIGNED
(8);

58 
u8
 
ˇmRightBuf
[
MAX_USED_BUF
][
CAM_RIGHT_FRAME_SIZE_BYTES
] 
DDR_AREA
 
	`ALIGNED
(8);

59 
u8
 
lcdLe·Buf
[
MAX_USED_BUF
][
LCD_LEFT_FRAME_SIZE_BYTES
] 
DDR_AREA
 
	`ALIGNED
(8);

60 
u8
 
lcdRightBuf
[
MAX_USED_BUF
][
LCD_RIGHT_FRAME_SIZE_BYTES
] 
DDR_AREA
 
	`ALIGNED
(8);

61 
LCDLayîOff£t
 
lcdLayîOff£tLe·
 = {
LCD_WINDOW_LEFT_STARTX
, 
LCD_WINDOW_LEFT_STARTY
},ÜcdLayîOff£tRighà{LCD_WINDOW_RIGHT_STARTX,LCD_WINDOW_RIGHT_STARTY};

62 vﬁ©ûê
u32
 
	$ALIGNED
(4Ë
¥o˚ssögFømeCå
;

63 
GíîicCamîaH™dÀ
 
ˇmHndlLe·
, 
ˇmHndlRight
;

64 
CamU£rS≥c
 
u£rCamLe·C⁄fig
, 
u£rCamRightC⁄fig
;

65 
‰ameS≥c
 
ˇmLe·FømeS≥c
, 
ˇmRightFømeS≥c
;

66 
‰ameS≥c
 
lcdLe·FømeS≥c
, 
lcdRightFømeS≥c
;

67 
‰ameBuf„r
 
ˇmLe·Føme
[
MAX_USED_BUF
];

68 
‰ameBuf„r
 
ˇmRightFøme
[
MAX_USED_BUF
];

69 
‰ameBuf„r
 
lcdFømeLe·
[
MAX_USED_BUF
];

70 
‰ameBuf„r
 
lcdFømeRight
[
MAX_USED_BUF
];

71 
LCDH™dÀ
 
lcdHndl
;

73 
ˇŒbacksLi°Såu˘
 
ˇŒbacks
 = {0
	}
};

74 
öãºu±sCÆlbacksLi°Ty≥
 
	gi§CÆlbacks
 = {0};

76 
u16
 
lutTabÀ
[];

77 
SùpPùñöe
 *
	g∂Le·
, *
	g∂Right
;

78 
SùpFûãr
 *
	gdmaInLe·
, *
	gdmaInRight
;

79 
SùpFûãr
 *
	glutLe·
, *
	glutRight
;

80 
SùpFûãr
 *
	gdmaOutLe·
, *
	gdmaOutRight
;

81 
DmaP¨am
 *
	gdmaInCfgLe·
, *
	gdmaInCfgRight
;

82 
DmaP¨am
 *
	gdmaOutCfgLe·
, *
	gdmaOutCfgRight
;

83 
LutP¨am
 *
	glutCfgLe·
, *
	glutCfgRight
;

88 
‰ameBuf„r
* 
AŒoˇãNextLe·CamFømeBuf
();

89 
‰ameBuf„r
* 
AŒoˇãNextRightCamFømeBuf
();

91 
ADV7513C⁄tfigMode_t
 
	gADV7513C⁄fig
 = 
ADV7513_1080P60
;

96 
	$gíî©eLutTabÀ
()

98 
u16
 
i
;

102 
i
 = 0; i < 256; i++)

104 
lutTabÀ
[
i
] = i | 0x8000;

106 
	}
}

109 
	$¥ï¨eDrivîD©a
()

111 
ibuf
;

114 
u£rCamLe·C⁄fig
.
mùiC⁄åﬁÀrNb
 = 
CAM_B1_MIPICTRL
;

115 
u£rCamLe·C⁄fig
.
ª˚ivîId
 = 
SIPP_DEVICE1
;

116 #ifde‡
MV0212


117 
u£rCamLe·C⁄fig
.
£ns‹Re£tPö
 = 
MV0212_MV0200_SENSOR_RIGHT_RST_GPIO
;

118 #ñi‡
	`deföed
(
MV0182
)

119 
u£rCamLe·C⁄fig
.
£ns‹Re£tPö
 = 
MV0182_MV0200_SENSOR_RIGHT_RST_GPIO
;

121 
u£rCamLe·C⁄fig
.
°îeoPaúIndex
 = 
CAM_B1_RIGHT_ADDR
;

123 
u£rCamLe·C⁄fig
.
wödowCﬁumnSèπ
 = 
CAM_WINDOW_START_COLUMN
;

124 
u£rCamLe·C⁄fig
.
wödowRowSèπ
 = 
CAM_WINDOW_START_ROW
;

125 
u£rCamLe·C⁄fig
.
wödowWidth
 = 
CAM_LEFT_WINDOW_WIDTH
;

126 
u£rCamLe·C⁄fig
.
wödowHeight
 = 
CAM_WINDOW_HEIGHT
;

127 
u£rCamLe·C⁄fig
.
gíî©eSync
 = 
NULL
;

130 
u£rCamRightC⁄fig
.
mùiC⁄åﬁÀrNb
 = 
CAM_B2_MIPICTRL
;

131 
u£rCamRightC⁄fig
.
ª˚ivîId
 = 
CIF_DEVICE1
;

132 #ifde‡
MV0212


133 
u£rCamRightC⁄fig
.
£ns‹Re£tPö
 = 
MV0212_MV0200_SENSOR_LEFT_RST_GPIO
;

134 #ñi‡
	`deföed
(
MV0182
)

135 
u£rCamRightC⁄fig
.
£ns‹Re£tPö
 = 
MV0182_MV0200_SENSOR_LEFT_RST_GPIO
;

137 
u£rCamRightC⁄fig
.
°îeoPaúIndex
 = 
CAM_B2_LEFT_ADDR
;

138 
u£rCamRightC⁄fig
.
wödowCﬁumnSèπ
 = 
CAM_WINDOW_START_COLUMN
;

139 
u£rCamRightC⁄fig
.
wödowRowSèπ
 = 
CAM_WINDOW_START_ROW
;

140 
u£rCamRightC⁄fig
.
wödowWidth
 = 
CAM_RIGHT_WINDOW_WIDTH
;

141 
u£rCamRightC⁄fig
.
wödowHeight
 = 
CAM_WINDOW_HEIGHT
;

142 
u£rCamRightC⁄fig
.
gíî©eSync
 = 
NULL
;

145 
ˇmLe·FømeS≥c
.
width
 = 
CAM_LEFT_WINDOW_WIDTH
;

146 
ˇmLe·FømeS≥c
.
height
 = 
CAM_WINDOW_HEIGHT
;

147 
ˇmLe·FømeS≥c
.
byãsPP
 = 
CAM_BPP
;

148 
ˇmLe·FømeS≥c
.
°ride
 = 
CAM_LEFT_WINDOW_WIDTH
 * 
CAM_BPP
;

149 
ˇmLe·FømeS≥c
.
ty≥
 = 
RAW16
;

151 
ˇmRightFømeS≥c
.
width
 = 
CAM_RIGHT_WINDOW_WIDTH
;

152 
ˇmRightFømeS≥c
.
height
 = 
CAM_WINDOW_HEIGHT
;

153 
ˇmRightFømeS≥c
.
byãsPP
 = 
CAM_BPP
;

154 
ˇmRightFømeS≥c
.
°ride
 = 
CAM_RIGHT_WINDOW_WIDTH
 * 
CAM_BPP
;

155 
ˇmRightFømeS≥c
.
ty≥
 = 
RAW16
;

157 
ibuf
 = 0; ibu‡< 
MAX_USED_BUF
;ibuf++)

159 
ˇmLe·Føme
[
ibuf
].
•ec
 = 
ˇmLe·FømeS≥c
;

160 
ˇmLe·Føme
[
ibuf
].
p1
 = (*)
ˇmLe·Buf
[ibuf];

161 
ˇmLe·Føme
[
ibuf
].
p2
 = 
NULL
;

162 
ˇmLe·Føme
[
ibuf
].
p3
 = 
NULL
;

164 
ˇmRightFøme
[
ibuf
].
•ec
 = 
ˇmRightFømeS≥c
;

165 
ˇmRightFøme
[
ibuf
].
p1
 = (*)
ˇmRightBuf
[ibuf];

166 
ˇmRightFøme
[
ibuf
].
p2
 = 
NULL
;

167 
ˇmRightFøme
[
ibuf
].
p3
 = 
NULL
;

170 
lcdLe·FømeS≥c
.
width
 = 
LCD_LEFT_WINDOW_WIDTH
;

171 
lcdLe·FømeS≥c
.
height
 = 
LCD_WINDOW_HEIGHT
;

172 
lcdLe·FømeS≥c
.
°ride
 = 
LCD_LEFT_WINDOW_WIDTH
 * 
LCD_BPP
;

173 
lcdLe·FømeS≥c
.
byãsPP
 = 
LCD_BPP
;

174 
lcdLe·FømeS≥c
.
ty≥
 = 
YUV422i
;

176 
lcdRightFømeS≥c
.
width
 = 
LCD_RIGHT_WINDOW_WIDTH
;

177 
lcdRightFømeS≥c
.
height
 = 
LCD_WINDOW_HEIGHT
;

178 
lcdRightFømeS≥c
.
°ride
 = 
LCD_RIGHT_WINDOW_WIDTH
 * 
LCD_BPP
;

179 
lcdRightFømeS≥c
.
byãsPP
 = 
LCD_BPP
;

180 
lcdRightFømeS≥c
.
ty≥
 = 
YUV422i
;

182 
ibuf
 = 0; ibu‡< 
MAX_USED_BUF
;ibuf++)

184 
lcdFømeLe·
[
ibuf
].
•ec
 = 
lcdLe·FømeS≥c
;

185 
lcdFømeLe·
[
ibuf
].
p1
 = &
lcdLe·Buf
[ibuf][0];

186 
lcdFømeLe·
[
ibuf
].
p2
 = 
NULL
;

187 
lcdFømeLe·
[
ibuf
].
p3
 = 
NULL
;

189 
lcdFømeRight
[
ibuf
].
•ec
 = 
lcdRightFømeS≥c
;

190 
lcdFømeRight
[
ibuf
].
p1
 = &
lcdRightBuf
[ibuf][0];

191 
lcdFømeRight
[
ibuf
].
p2
 = 
NULL
;

192 
lcdFømeRight
[
ibuf
].
p3
 = 
NULL
;

196 
	}
}

200 
	$≠pBuûdPùñöes
()

202 
∂Le·
 = 
	`sùpCª©ePùñöe
(0, 1, 
	`SIPP_MBIN
(
mböImgSùp
));

203 
∂Right
 = 
	`sùpCª©ePùñöe
(2, 3, 
	`SIPP_MBIN
(
mböImgSùp
));

209 
dmaInLe·
 = 
	`sùpCª©eFûãr
(
∂Le·
, 0x00, 
CAM_LEFT_WINDOW_WIDTH
, 
CAM_WINDOW_HEIGHT
, 
	`N_PL
(1), 
	`SZ
(
UI¡16
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, "DMA_IN");

210 
lutLe·
 = 
	`sùpCª©eFûãr
(
∂Le·
, 0x00, 
CAM_LEFT_WINDOW_WIDTH
, 
CAM_WINDOW_HEIGHT
, 
	`N_PL
(1), 
	`SZ
(
UI¡16
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_LUT_ID
, "SIPP_LUT");

211 
dmaOutLe·
 = 
	`sùpCª©eFûãr
(
∂Le·
, 0x00, 
CAM_LEFT_WINDOW_WIDTH
, 
CAM_WINDOW_HEIGHT
, 
	`N_PL
(1), 
	`SZ
(
UI¡16
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, "DMA_OUT");

213 
	`sùpLökFûãr
(
lutLe·
 , 
dmaInLe·
, 1, 1);

214 
	`sùpLökFûãr
(
dmaOutLe·
, 
lutLe·
 , 1, 1);

217 
dmaInRight
 = 
	`sùpCª©eFûãr
(
∂Right
, 0x00, 
CAM_RIGHT_WINDOW_WIDTH
, 
CAM_WINDOW_HEIGHT
, 
	`N_PL
(1), 
	`SZ
(
UI¡16
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, "DMA_IN");

218 
lutRight
 = 
	`sùpCª©eFûãr
(
∂Right
, 0x00, 
CAM_RIGHT_WINDOW_WIDTH
, 
CAM_WINDOW_HEIGHT
, 
	`N_PL
(1), 
	`SZ
(
UI¡16
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_LUT_ID
, "SIPP_LUT");

219 
dmaOutRight
 = 
	`sùpCª©eFûãr
(
∂Right
, 0x00, 
LCD_RIGHT_WINDOW_WIDTH
, 
LCD_WINDOW_HEIGHT
, 
	`N_PL
(1), 
	`SZ
(
UI¡16
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, "DMA_OUT");

221 
	`sùpLökFûãr
(
lutRight
 , 
dmaInRight
, 1, 1);

222 
	`sùpLökFûãr
(
dmaOutRight
, 
lutRight
 , 1, 1);

224 
	}
}

227 
	$≠pC⁄figuªFûãrs
()

229 
dmaInCfgLe·
 = (
DmaP¨am
*)
dmaInLe·
->
∑øms
;

230 
dmaOutCfgLe·
 = (
DmaP¨am
*)
dmaOutLe·
->
∑øms
;

231 
lutCfgLe·
 = (
LutP¨am
*)
lutLe·
->
∑øms
;

233 
dmaInCfgRight
 = (
DmaP¨am
*)
dmaInRight
->
∑øms
;

234 
dmaOutCfgRight
 = (
DmaP¨am
*)
dmaOutRight
->
∑øms
;

235 
lutCfgRight
 = (
LutP¨am
*)
lutRight
->
∑øms
;

237 
dmaInCfgLe·
->
ddrAddr
 = (
UI¡32
)&
ˇmLe·Buf
[0];

238 
dmaOutCfgLe·
->
ddrAddr
 = (
UI¡32
)&
lcdLe·Buf
[0];

240 
dmaInCfgRight
->
ddrAddr
 = (
UI¡32
)&
ˇmRightBuf
[0];

241 
dmaOutCfgRight
->
ddrAddr
 = (
UI¡32
)&
lcdRightBuf
[0];

244 
lutCfgLe·
->
cfg
 = (0 ) |

248 
lutCfgLe·
->
sizeA
 = 0x44444444;

249 
lutCfgLe·
->
sizeB
 = 0x44444444;

250 
lutCfgLe·
->
lut
 = 
lutTabÀ
;

251 
lutCfgRight
->
‰mDim
 = ((
CAM_WINDOW_HEIGHT
 << 16Ë| 
CAM_LEFT_WINDOW_WIDTH
);

254 
lutCfgRight
->
cfg
 = (0 ) |

258 
lutCfgRight
->
sizeA
 = 0x44444444;

259 
lutCfgRight
->
sizeB
 = 0x44444444;

260 
lutCfgRight
->
lut
 = 
lutTabÀ
;

261 
lutCfgRight
->
‰mDim
 = ((
CAM_WINDOW_HEIGHT
 << 16Ë| 
CAM_LEFT_WINDOW_WIDTH
);

263 
	`c⁄figuªLutFûãrSûic⁄S≥cific
(
lutCfgLe·
);

264 
	`c⁄figuªLutFûãrSûic⁄S≥cific
(
lutCfgRight
);

265 
	}
}

267 
‰ameBuf„r
* 
	$AŒoˇãNextLe·CamFømeBuf
()

269 ++
√wCamFømeCåLe·
;

270  ( &
ˇmLe·Føme
[
√wCamFømeCåLe·
 % 
MAX_USED_BUF
] );

271 
	}
}

273 
‰ameBuf„r
* 
	$AŒoˇãNextRightCamFømeBuf
()

275 ++
√wCamFømeCåRight
;

276  ( &
ˇmRightFøme
[
√wCamFømeCåRight
 % 
MAX_USED_BUF
] );

277 
	}
}

280 
‰ameBuf„r
* 
	$ÆloˇãLcdFøme
(
œyî
)

282 
‰ameBuf„r
 *
lcdFøme
 = 
NULL
;

283 i‡(
œyî
 =
VL1
)

284 
lcdFøme
 = &
lcdFømeLe·
[
lcdFømeCå
 % 
MAX_USED_BUF
];

285 i‡(
œyî
 =
VL2
)

286 
lcdFøme
 = &
lcdFømeRight
[
lcdFømeCå
 % 
MAX_USED_BUF
];

288  ( 
lcdFøme
 );

289 
	}
}

291 
	$maö
()

293 
s32
 
°©us
;

294 
ˇmEº‹Ty≥
 
ˇmSètus
;

295 
s32
 
bﬂrdSètus
;

297 
°©us
 = 
	`öôClocksAndMem‹y
();

298 if(
°©us
)

300 
	`¥ötf
("Eº‹: clock†öôüliz©i⁄ faûed wôh %ld sètus\n",
°©us
);

301  
°©us
;

304 #ifde‡
MV0212


305 
öt32_t
 
rc
;

306 
uöt32_t
 
ªv
;

307 
BﬂrdI2CInfo
 
öfo
[
NUM_I2C_DEVS
];

308 
BﬂrdC⁄figDesc
 
c⁄fig
[] =

311 
BRDCONFIG_GPIO
,

313 (*)
brdMV0182R5GpioCfgDeÁu…


316 
BRDCONFIG_END
,

317 
NULL


321 
rc
 = 
	`BﬂrdInô
(
c⁄fig
);

322 i‡(
rc
!=
BRDCONFIG_SUCCESS
)

324 
	`¥ötf
("Error: board initialization failed with %ld status\n",

325 
rc
);

326  
rc
;

329 
rc
 = 
	`BﬂrdGëPCBRevisi⁄
(&
ªv
);

330 i‡(
rc
!=
BRDCONFIG_SUCCESS
)

332 
	`¥ötf
("Error: board configurationÑead failed with %ld status\n",

333 
rc
);

334  
rc
;

336 
	`¥ötf
("Bﬂrd Mv0212 inôülized,Ñevisi⁄ = %lu \n", 
ªv
);

338 
bﬂrdSètus
 = 
	`BﬂrdInôExtPŒ
(
EXT_PLL_CFG_148_24_24MHZ
);

339 i‡(
bﬂrdSètus
 !
BRDCONFIG_SUCCESS
)

341 
	`¥ötf
("Error: board initialization failed with %ld status\n",

342 
bﬂrdSètus
);

345 
rc
 = 
	`BﬂrdGëI2CInfo
(
öfo
, 
NUM_I2C_DEVS
);

346 
i2c0H™dÀ
=
öfo
[0].
h™dÀr
;

347 
i2c2H™dÀ
=
öfo
[2].
h™dÀr
;

348 #ñi‡
	`deföed
(
MV0182
)

349 
bﬂrdSètus
 = 
	`BﬂrdInôüli£
(
EXT_PLL_CFG_148_24_24MHZ
);

350 
i2c0H™dÀ
=
gAµDevHndls
.i2c0Handle;

351 
i2c2H™dÀ
=
gAµDevHndls
.i2c2Handle;

352 i‡(
bﬂrdSètus
 !
B_SUCCESS
)

354 
	`¥ötf
("Error: board initialization failed with %ld status\n",

355 
bﬂrdSètus
);

359 
	`swcLe⁄SëPIL
(0);

361 
	`gíî©eLutTabÀ
();

363 
	`¥ï¨eDrivîD©a
();

365 
	`¥ötf
("ConfiguringÅhe SIPPÖipeline\n");

366 
	`sùpInôülize
();

367 
	`≠pBuûdPùñöes
();

368 
	`≠pC⁄figuªFûãrs
();

369 
	`sùpFöÆizePùñöe
(
∂Le·
);

370 
	`sùpFöÆizePùñöe
(
∂Right
);

373 
	`DrvMssC⁄√˘LcdToGpio
();

375 
	`¥ötf
("Configuring imx208 dual camerasánd datapath\n");

377 
i§CÆlbacks
.
gëBlock
 = 
NULL
;

378 
i§CÆlbacks
.
nŸifiˇti⁄
 = 
NULL
;

379 
ˇŒbacks
.
i§CbfLi°
 = &
i§CÆlbacks
;

380 
ˇŒbacks
.
£ns‹CbfLi°
 = 
NULL
;

383 
i§CÆlbacks
.
gëFøme
 = 
AŒoˇãNextLe·CamFømeBuf
;

385 
ˇmSètus
 = 
	`CamInô
–&
ˇmHndlLe·
, 
°©icCamC⁄fig
, &
u£rCamLe·C⁄fig
, &
ˇŒbacks
, 
i2c0H™dÀ
);

386 i‡(
ˇmSètus
 !
CAM_SUCCESS
)

388 
	`¥ötf
("\¿Le· camî®c⁄figuøti⁄ faûed (%d).\n", 
ˇmSètus
);

392 
ˇmSètus
 = 
	`CamSèπ
–&
ˇmHndlLe·
 );

393 i‡(
ˇmSètus
 !
CAM_SUCCESS
)

395 
	`¥ötf
("\¿Le· camî®ÁûedÅÿ°¨à(%d).\n", 
ˇmSètus
);

400 
i§CÆlbacks
.
gëFøme
 = 
AŒoˇãNextRightCamFømeBuf
;

402 
ˇmSètus
 = 
	`CamInô
–&
ˇmHndlRight
, 
°©icCamC⁄fig
, &
u£rCamRightC⁄fig
, &
ˇŒbacks
, 
i2c0H™dÀ
);

403 i‡(
ˇmSètus
 !
CAM_SUCCESS
)

405 
	`¥ötf
("\¿Righàˇmî®c⁄figuøti⁄ faûed (%d).\n", 
ˇmSètus
);

409 
ˇmSètus
 = 
	`CamSèπ
–&
ˇmHndlRight
 );

410 i‡(
ˇmSètus
 !
CAM_SUCCESS
)

412 
	`¥ötf
("\¿Righàˇmî®ÁûedÅÿ°¨à(%d).\n", 
ˇmSètus
);

416 
	`¥ötf
("ConfiguringÅhe HDMI chip ADV7513\n");

417 
°©us
 = 
	`öôADV7513ªg
(
i2c2H™dÀ
, 
ADV7513C⁄fig
);

419 i‡(
°©us
 != 0)

421 
	`¥ötf
("ADV7513 C⁄figuøti⁄ faûed (%ldË\n", 
°©us
);

425 
	`¥ötf
("ConfiguringÅhe LCD\n");

426 
	`LCDInô
(&
lcdHndl
, &
lcdS≥c1080p60
, 
NULL
, 
LCD1
);

427 
	`LCDInôLayî
(&
lcdHndl
, 
VL1
, &
lcdLe·FømeS≥c
, 
lcdLayîOff£tLe·
);

428 
	`LCDInôLayî
(&
lcdHndl
, 
VL2
, &
lcdRightFømeS≥c
, 
lcdLayîOff£tRight
);

430 
	`LCDSëupCÆlbacks
(&
lcdHndl
, &
ÆloˇãLcdFøme
, 
NULL
, NULL, NULL);

432 
	`¥ötf
("\n Starting dual streaming on LCD...\n");

433 
	`LCDSèπ
(&
lcdHndl
);

436 
¥o˚ssögFømeCå
 = 
√wCamFømeCåLe·
;

441 if–
√wCamFømeCåLe·
 !
¥o˚ssögFømeCå
 )

443 
¥o˚ssögFømeCå
 = 
√wCamFømeCåLe·
;

446 
dmaInCfgLe·
->
ddrAddr
 = (
UI¡32
)&
ˇmLe·Buf
[(
√wCamFømeCåLe·
 -2Ë% 
MAX_USED_BUF
];

447 
dmaInCfgRight
->
ddrAddr
 = (
UI¡32
)&
ˇmRightBuf
[(
√wCamFømeCåRight
 -2Ë% 
MAX_USED_BUF
];

448 
dmaOutCfgLe·
->
ddrAddr
 = (
UI¡32
)&
lcdLe·Buf
[(
lcdFømeCå
 + 1Ë% 
MAX_USED_BUF
];

449 
dmaOutCfgRight
->
ddrAddr
 = (
UI¡32
)&
lcdRightBuf
[(
lcdFømeCå
 + 1Ë% 
MAX_USED_BUF
];

451 
	`sùpPro˚ssFøme
(
∂Le·
);

452 
	`sùpPro˚ssFøme
(
∂Right
);

454 
lcdFømeCå
++;

456 if(
lcdFømeCå
 == 10)

458 
	`DrvLe⁄RTSig«lBoŸCom∂ëed
();

464 
	}
}

	@Demo/Stereo208SDCard/shared/common_defines.h

10 #i‚de‡
COMMON_DEFINES_H


11 
	#COMMON_DEFINES_H


	)

16 
	#SYS_CLK_KHZ
 (12000)

17 
	#PLL_DESIRED_FREQ_KHZ
 (480000)

	)

19 
	#MAX_USED_BUF
 3

	)

20 
	#FIRST_INCOMING_BUF_ID
 2

	)

21 
	#FIRST_OUTGOING_BUF_ID
 0

	)

23 
	#CAM_WINDOW_START_COLUMN
 0

	)

24 
	#CAM_WINDOW_START_ROW
 8

25 

	)

26 
	#CAM_LEFT_WINDOW_WIDTH
 960

27 
	#CAM_RIGHT_WINDOW_WIDTH
 960

28 
	#CAM_WINDOW_HEIGHT
 1080

	)

31 
	#LCD_LEFT_WINDOW_WIDTH
 
CAM_LEFT_WINDOW_WIDTH


	)

32 
	#LCD_RIGHT_WINDOW_WIDTH
 
CAM_RIGHT_WINDOW_WIDTH


	)

33 
	#LCD_WINDOW_HEIGHT
 
CAM_WINDOW_HEIGHT


	)

35 
	#LCD_WINDOW_LEFT_STARTX
 0

	)

36 
	#LCD_WINDOW_LEFT_STARTY
 0

	)

37 
	#LCD_WINDOW_RIGHT_STARTX
 
LCD_LEFT_WINDOW_WIDTH


	)

38 
	#LCD_WINDOW_RIGHT_STARTY
 0

	)

40 
	#CAM_BPP
 2

41 
	#LCD_BPP
 2

42 

	)

43 
	#CAM_LEFT_FRAME_SIZE_BYTES
 (
CAM_LEFT_WINDOW_WIDTH
 * 
CAM_WINDOW_HEIGHT
 * 
CAM_BPP
)

	)

44 
	#CAM_RIGHT_FRAME_SIZE_BYTES
 (
CAM_RIGHT_WINDOW_WIDTH
 * 
CAM_WINDOW_HEIGHT
 * 
CAM_BPP
)

	)

46 
	#LCD_LEFT_FRAME_SIZE_BYTES
 (
LCD_LEFT_WINDOW_WIDTH
 * 
LCD_WINDOW_HEIGHT
 * 
LCD_BPP
)

	)

47 
	#LCD_RIGHT_FRAME_SIZE_BYTES
 (
LCD_RIGHT_WINDOW_WIDTH
 * 
LCD_WINDOW_HEIGHT
 * 
LCD_BPP
)

	)

	@Demo/UsbFirmwareUpdate/ImageProcApp/leon/UsbFlasherAddon/If_usbFlasher.h

9 #i‚de‡
IF_USB_FLASHER_H_


10 
	#IF_USB_FLASHER_H_


	)

18 
	#INTERRUPTPRIORITY
 8

19 
	#ADDR10BIT
 0

20 
	#PMIC_I2C_ADDRESS
 (0x6C>>1)

	)

22 
	#SPI_BUS_NAME
 "/dev/•i"

	)

23 
	#SPI_FLASH_NAME
 "Êash"

	)

26 
	#FLASH_CHIP_SIZE
 (8 * 1024 * 1024)

	)

27 
	#SUBSECTOR_SIZE
 (4096)

	)

30 
	#ALIGN_TO_SUBSECTOR
(
S
Ë((((SË+ (
SUBSECTOR_SIZE
Ë- 1)Ë& ~((SUBSECTOR_SIZEË- 1))

	)

34 
	#VALID_HEADER_MAGIC
 (0xABCD1234)

	)

35 
	#INVALID_HEADER_MAGIC
 (0x00000000)

	)

37 
	#FLAG_APP_EXECUTE
 (1)

	)

38 
	#FLAG_APP_UPDATE
 (0)

	)

40 
	#MAX_APPLIACIONS_IN_FLASH
 (1)

	)

42 
	#LAUNCHER_RESERVED_SIZE
 (512 * 1024)

	)

49 
u32
 
	mhódî_magic
;

50 
u32
 
	m≠p_¸c
;

51 
u32
 
	mboŸImg_off£t
;

52 
u32
 
	mboŸImg_size
;

53 } 
	ttAµInfo
;

56 
u32
 
	mexecuã_≠p_Êag
;

57 
u32
 
	mlﬂdî_íåy
;

58 
tAµInfo
 
	m≠p_öfo
[
MAX_APPLIACIONS_IN_FLASH
];

59 } 
	ttFœshHódî
;

61 
	stFœshP¨ams


63 c⁄° * 
	mdevName
;

64 *
	möBuff
;

65 *
	moutBuff
;

66 
u32
 
	moff£t
;

67 
u32
 
	msize
;

68 
u32
 
	mimgId
;

69 
u32
 
	mwrôeImg
;

74 
	mERR_NONE
 = 0,

75 
	mERR_IO_DRV
,

76 
	mERR_RW
,

77 
	mERR_INV_APP_ID
,

78 
	mERR_NO_SPACE
,

79 
	mERR_ELF_ENTRY
,

80 
	mERR_INV_HEADER
,

81 
	mERR_INV_FLAG
,

82 
	mERR_MEM
,

83 
	mERR_INV_CRC


84 } 
	tbl_îr‹s_t
;

87 
	#APP_MAX_FILE_SIZE
 ((
FLASH_CHIP_SIZE
Ë- (
LAUNCHER_RESERVED_SIZE
))

	)

89 
	#FLAGS_SECTION_OFFSET
 ((
LAUNCHER_RESERVED_SIZE
Ë- 
	`ALIGN_TO_SUBSECTOR
((
tFœshHódî
)))

	)

93 
i_UsbFœshîInô
();

94 
i_UsbFœshîSèπ
();

	@Demo/UsbFirmwareUpdate/ImageProcApp/leon/UsbFlasherAddon/spi_i2c_config.c

12 
	~"mv_ty≥s.h
"

13 
	~"OsDrvC¥.h
"

14 
	~"OsDrvGpio.h
"

15 
	~"OsDrvSpiBus.h
"

16 
	~"OsDrvI2cBus.h
"

17 
	~"•i_i2c_c⁄fig.h
"

18 
	~<SpiFœshN25QDevi˚.h
>

22 
	#SPI_BUS_NAME
 "/dev/•i"

	)

23 
	#SPI_FLASH_NAME
 "Êash"

	)

31 
DECLARE_SPI_BUS_GPIO_SS
(
myr2_•i_0
, 1, 0, 0, 1, 1, 10*1000*1000, 8);

35 
v_myr2_•i_ã°_pö_c⁄fig
();

36 
v_myr2_i2c2_pö_c⁄fig
();

47 
	$v_myr2_•i_ã°_pö_c⁄fig
()

49 
	`DrvGpioModeR™ge
(74, 77, 0 | 
D_GPIO_DIR_OUT
);

50 
	}
}

58 
	$v_myr2_i2c2_pö_c⁄fig
()

60 
	`DrvGpioSëMode
(79, 2);

61 
	`DrvGpioSëMode
(80, 2);

62 
	}
}

71 
	$i_myr2_ªgi°î_libi2c_•i_bus
()

73 
ªt_code
 = ()
RTEMS_SUCCESSFUL
;

74 
•i0_bu¢o
;

75 
u32
 
•i_Êash_mö‹
;

77 
	`v_myr2_•i_ã°_pö_c⁄fig
();

78 
	`v_myr2_i2c2_pö_c⁄fig
();

83 i‡((
ªt_code
 = ()
	`OsDrvLibI2CInôülize
()Ë!()
RTEMS_SUCCESSFUL
)

85 
	`¥ötf
("πems_libi2c_öôülizêFAILED %d \n", 
ªt_code
);

86 
exô_myr2_ªgi°î_libi2c_•i_bus
;

92 
ªt_code
 = ()
	`OsDrvLibI2CRegi°îBus
(
SPI_BUS_NAME
,

93 (
πems_libi2c_bus_t
 *)&
myr2_•i_0
);

94 i‡(
ªt_code
 < 0)

96 
	`¥ötf
("CouldÇotÑegisterÅhe bus\n");

97 
exô_myr2_ªgi°î_libi2c_•i_bus
;

99 
•i0_bu¢o
 = 
ªt_code
;

102 
ªt_code
 = ()
	`OsDrvLibI2CRegi°îDevi˚
(
SPI_FLASH_NAME
,

103 
•i_Êash_N25Q_drivî_des¸ùt‹
,

104 
•i0_bu¢o
, 77);

105 i‡(
ªt_code
 < 0)

107 
	`¥ötf
("CouldÇotÑegisterÅhe spi device\n");

108 
exô_myr2_ªgi°î_libi2c_•i_bus
;

111 
•i_Êash_mö‹
 = 
ªt_code
;

113 if((
ªt_code
 = ()
	`OsDrvIOInôülize
(
πems_libi2c_maj‹
, 
•i_Êash_mö‹
, 
NULL
)Ë!()
RTEMS_SUCCESSFUL
)

115 
	`¥ötf
("πems_io_öôülizêÁûed wôh s¯%d\n", 
ªt_code
);

116 
exô_myr2_ªgi°î_libi2c_•i_bus
;

119 
exô_myr2_ªgi°î_libi2c_•i_bus
:

120  (
ªt_code
);

121 
	}
}

	@Demo/UsbFirmwareUpdate/ImageProcApp/leon/UsbFlasherAddon/spi_i2c_config.h

13 #i‚de‡
_SPI_I2C_CONFIG_H


14 
	#_SPI_I2C_CONFIG_H


	)

31 
i_myr2_ªgi°î_libi2c_•i_bus
();

	@Demo/UsbFirmwareUpdate/ImageProcApp/leon/UsbFlasherAddon/usbFlasher.c

4 
	~<°dio.h
>

5 
	~<°dlib.h
>

6 
	~<b•.h
>

7 
	~<icb_deföes.h
>

8 
	~"mv_ty≥s.h
"

9 
	~<f˙é.h
>

11 
	~"OsDrvSpiBus.h
"

12 
	~"DrvTimî.h
"

13 
	~"DrvGpio.h
"

15 
	~<b•/úq.h
>

16 
	~<πems/libi2c.h
>

17 
	~<πems/libio.h
>

18 
	~"OsDrvC¥.h
"

19 
	~"OsDrvUsbPhy.h
"

21 
	~<SpiFœshN25QDevi˚.h
>

23 
	~"swcShaveLﬂdîPriv©e.h
"

24 
	~"swcMem‹yTøns„r.h
"

25 
	~<swcLe⁄Utûs.h
>

26 
	~<DrvLe⁄L2C.h
>

27 
	~<DrvLe⁄L2CDeföes.h
>

28 
	~"•i_i2c_c⁄fig.h
"

30 
	~"If_usbFœshî.h
"

31 
	~"usbFœshî.h
"

33 
	~"usbpump_≠∂iˇti⁄_πems_≠i.h
"

36 
u8
 
	gÊash_buff
[
SUBSECTOR_SIZE
] = {0};

38 #i‚de‡
DISABLE_LEON_DCACHE


39 
	#USBPUMP_MDK_CACHE_ENABLE
 0

	)

41 
	#USBPUMP_MDK_CACHE_ENABLE
 1

	)

45 
__©åibuã__
((
£˘i⁄
(".ddr_dúe˘.bss"))Ë
	gsg_D©aPump_Mem‹yPoﬁ
[(512 * 1024) / 4];

47 
USBPUMP_APPLICATION_RTEMS_CONFIGURATION
 
	gsg_D©aPump_AµC⁄fig
 =

48 
USBPUMP_APPLICATION_RTEMS_CONFIGURATION_INIT_V1
(

50  
sg_D©aPump_Mem‹yPoﬁ
,

51  (
sg_D©aPump_Mem‹yPoﬁ
),

55  
NULL
,

56  
NULL
,

57  
USBPUMP_MDK_CACHE_ENABLE
,

62 
i_UsbFœshîSy°emCfg
();

65 
	$i_UsbFœshîSy°emCfg
 ( )

68 c⁄° 
tyAuxClkDividîCfg
 
auxClk
[] =

71 .
auxClockE«bÀMask
 = 
AUX_CLK_MASK_USB_PHY_EXTREFCLK
,

72 .
auxClockSour˚
 = 
CLK_SRC_PLL0
,

73 .
auxClockDivNumî©‹
 = 1,

74 .
auxClockDivDíomö©‹
 = 24

77 .
auxClockE«bÀMask
 = 
AUX_CLK_MASK_USB_PHY_REF_ALT_CLK
,

78 .
auxClockSour˚
 = 
CLK_SRC_PLL0
,

79 .
auxClockDivNumî©‹
 = 1,

80 .
auxClockDivDíomö©‹
 = 24

83 .
auxClockE«bÀMask
 = 
AUX_CLK_MASK_USB_CTRL_REF_CLK
,

84 .
auxClockSour˚
 = 
CLK_SRC_PLL0
,

85 .
auxClockDivNumî©‹
 = 1,

86 .
auxClockDivDíomö©‹
 = 24

89 .
auxClockE«bÀMask
 = 
AUX_CLK_MASK_USB_CTRL_SUSPEND_CLK
,

90 .
auxClockSour˚
 = 
CLK_SRC_PLL0
,

91 .
auxClockDivNumî©‹
 = 1,

92 .
auxClockDivDíomö©‹
 = 24

98  (()
	`OsDrvC¥AuxClockAºayC⁄fig
(
auxClk
Ë!
OS_MYR_DRV_SUCCESS
);

99 
	}
}

102 
	$i_UsbFœshîInô
()

104 
ªtVÆ
 = 0;

105 i‡(
	`i_UsbFœshîSy°emCfg
())

107 
	`¥ötf
("Eº‹: OsDrvC¥AuxClockAºayC⁄fig(ËFAILED, wôhÉº‹ code: %d\n", 
ªtVÆ
);

108 
ªtVÆ
 = -1;

112 
	`¥ötf
("\nVSC App...\n\n");

114 i‡(
	`i_myr2_ªgi°î_libi2c_•i_bus
()) {

115 
	`¥ötf
("FailedÅo initialize bus or devices . Fatal ERROR !!! \n");

116 
ªtVÆ
 = -1;

120  
ªtVÆ
;

121 
	}
}

124 
	$i_UsbFœshîSèπ
()

126 
osDrvUsbPhyP¨am_t
 
öôP¨am
 =

128 .
íabÀOtgBlock
 = 
USB_PHY_OTG_DISABLED
,

129 .
u£Exã∫ÆClock
 = 
USB_PHY_USE_EXT_CLK
,

130 .
fSñ
 = 
USB_REFCLK_20MHZ
,

131 .
ªfClkSñ0
 = 
USB_SUPER_SPEED_CLK_CONFIG
,

132 .
f‹˚HsO∆y
 = 
USB_PHY_HS_ONLY_OFF


135 
	`OsDrvUsbPhyInô
(&
öôP¨am
);

137  (()
	`UsbPump_Rãms_D©aPump_Sèπup
(&
sg_D©aPump_AµC⁄fig
));

138 
	}
}

140 
	$îa£_•i_Êash
(
fd
, 
tFœshP¨ams
 *
p
)

142 
°©us
;

144 
•iFœshN25QEø£Args_t
 
îa£Args
 =

146 .
off£t
 = 
p
->offset,

147 .
size
 = 
p
->size,

150 
°©us
 = 
	`io˘l
(
fd
, 
FLASH_CMD_ERASE
, &
îa£Args
);

152 i‡(
°©us
) {

153 
	`¥ötf
("U«bÀÅÿîa£ devi˚,Éº = %d\n", ()
°©us
);

156  
°©us
;

157 
	}
}

160 
	$wrôe_•i_Êash
(
fd
, 
tFœshP¨ams
 *
p
)

162 
°©us
;

163 
ªtVÆ
 = 0;

165 
°©us
 = 
	`l£ek
(
fd
, 
p
->
off£t
, 
SEEK_SET
);

166 i‡(
°©us
 !()
p
->
off£t
)

168 
	`≥º‹
("seekÉrror: ");

169 
ªtVÆ
 = -1;

173 
°©us
 = 
	`wrôe
(
fd
, 
p
->
öBuff
,Ö->
size
);

174 i‡(
°©us
 !()
p
->
size
)

176 
	`¥ötf
("U«bÀÅÿwrôêÆ»%u byã†tÿdevi˚. %d síà\n", ()
p
->
size
, ()
°©us
);

177 
	`≥º‹
("");

178 
ªtVÆ
 = -1;

181  
ªtVÆ
;

182 
	}
}

185 
	$ªad_•i_Êash
(
fd
, 
tFœshP¨ams
 *
p
)

187 
°©us
 = 0;

188 
ªtVÆ
 = 0;

190 
°©us
 = 
	`l£ek
(
fd
, 
p
->
off£t
, 
SEEK_SET
);

191 i‡(
°©us
 !()
p
->
off£t
) {

192 
	`≥º‹
("seekÉrror: ");

193 
ªtVÆ
 = -1;

197 
°©us
 = 
	`ªad
(
fd
, 
p
->
outBuff
,Ö->
size
);

198 i‡(
°©us
 !()
p
->
size
) {

199 
	`¥ötf
("U«bÀÅÿªadáŒ %u byã†‰om devi˚. %d síà\n", ()
p
->
size
, ()
°©us
);

200 
	`≥º‹
("");

201 
ªtVÆ
 = -1;

205  
ªtVÆ
;

206 
	}
}

209 
öt32_t
 
	$wrôe_Êash_Êag
(
tFœshP¨ams
 *
p
)

211 
πems_°©us_code
 
°©us
;

212 (*
≠p_íåy
)(Ë
NULL
;

213 
tFœshHódî
 *
Êash_hódî
 = (tFœshHódî *)&
Êash_buff
;

214 
uöt32_t
 
≠p_idx
;

215 
öt32_t
 
ªt
 = 
ERR_NONE
;

216 
fd
;

218 
	`¥ötf
("O≥nög %†...\n", 
p
->
devName
);

219 
fd
 = 
	`›í
(
p
->
devName
, 
O_RDWR
, 
S_IRUSR
 | 
S_IWUSR
 | 
S_IRGRP
 | 
S_IROTH
);

220 i‡(
fd
 < 0) {

221 
	`¥ötf
("spi open failed\n");

222 
ªt
 = 
ERR_IO_DRV
;

223 
exô_func
;

226 
	`¥ötf
("\nVSC Demo App...\n\n");

229 
p
->
off£t
 = 
	`ALIGN_TO_SUBSECTOR
(
FLAGS_SECTION_OFFSET
);

230 
p
->
size
 = (
tFœshHódî
);

231 
p
->
outBuff
 = 
Êash_hódî
;

233 
	`¥ötf
("Ródög Hódî: %u Byã†‰om %08X\n", ()
p
->
size
, (Ì->
off£t
);

235 i‡(
RTEMS_SUCCESSFUL
 !
	`ªad_•i_Êash
(
fd
, 
p
)) {

236 
	`¥ötf
("ErrorÑeading flash !!!\n");

237 
ªt
 = 
ERR_RW
;

238 
exô_deöô
;

242 
p
->
off£t
 = 
	`ALIGN_TO_SUBSECTOR
(
FLAGS_SECTION_OFFSET
);

243 
p
->
size
 = 
	`ALIGN_TO_SUBSECTOR
((
tFœshHódî
));

245 
	`¥ötf
("Eøsög Hódî: %u Byã†‰om %08X\n", ()
p
->
size
, (Ì->
off£t
);

246 i‡(
RTEMS_SUCCESSFUL
 !
	`îa£_•i_Êash
(
fd
, 
p
)) {

247 
ªt
 = 
ERR_RW
;

248 
exô_deöô
;

252 
Êash_hódî
->
execuã_≠p_Êag
 = 
FLAG_APP_UPDATE
;

255 
	`¥ötf
("\n");

256 
	`¥ötf
("globÆáµ fœg %d\n", ()
Êash_hódî
->
execuã_≠p_Êag
);

257 
	`¥ötf
("boŸlﬂdîÉ¡ry 0x%08X\n", ()
Êash_hódî
->
lﬂdî_íåy
);

258 
≠p_idx
 = 0;áµ_idx < 
MAX_APPLIACIONS_IN_FLASH
;ápp_idx++) {

259 
	`¥ötf
("hódî%u_magi¯ %08X\n", ()
≠p_idx
, ()
Êash_hódî
->
≠p_öfo
[≠p_idx].
hódî_magic
);

260 
	`¥ötf
("hódî%u_¸¯ %08X\n", ()
≠p_idx
, ()
Êash_hódî
->
≠p_öfo
[≠p_idx].
≠p_¸c
);

261 
	`¥ötf
("boŸImg%u_off£à%08X\n", ()
≠p_idx
, ()
Êash_hódî
->
≠p_öfo
[≠p_idx].
boŸImg_off£t
);

262 
	`¥ötf
("boŸImg%u_sizê %u\n", ()
≠p_idx
, ()
Êash_hódî
->
≠p_öfo
[≠p_idx].
boŸImg_size
);

267 
p
->
öBuff
 = 
Êash_hódî
;

268 
p
->
size
 = (
tFœshHódî
);

269 
p
->
off£t
 = 
	`ALIGN_TO_SUBSECTOR
(
FLAGS_SECTION_OFFSET
);

271 
	`¥ötf
("Wrôög Hódî: %u Byã†‰om %08X\n", ()
p
->
size
, (Ì->
off£t
);

272 i‡(
RTEMS_SUCCESSFUL
 !
	`wrôe_•i_Êash
(
fd
, 
p
)) {

273 
ªt
 = 
ERR_RW
;

274 
exô_deöô
;

277 
	`¥ötf
("Flash OK\n");

280 
≠p_íåy
 = ((*)())(
Êash_hódî
->
lﬂdî_íåy
);

281 
	`¥ötf
("lﬂdî_íåy 0x%x\n", ()
≠p_íåy
);

283 i‡((
NULL
 !
≠p_íåy
Ë&& (0xFFFFFFFF !(
u32
)app_entry)) {

285 
	`DrvSocRe£t
();

288 
	`¥ötf
("Invalid EntryÖoint!\n");

289 
ªt
 = 
ERR_ELF_ENTRY
;

290 
exô_deöô
;

293 
exô_deöô
:

295 
	`¥ötf
("CloseándÉxit!\n");

296 i‡((
°©us
 = 
	`˛o£
(
fd
)) != 0) {

297 
	`¥ötf
("•ò˛o£ faûed wôh s¯%d\n", 
°©us
);

298 
ªt
 = 
ERR_IO_DRV
;

301 
exô_func
:

303  
ªt
;

304 
	}
}

307 
πems_°©us_code
 
	$£t_Êash_upd©e_Êag
()

309 
tFœshP¨ams
 
Êash_∑øms
;

310 
πems_°©us_code
 
°©us
 = 
RTEMS_SUCCESSFUL
;

312 
Êash_∑øms
.
devName
 = 
SPI_BUS_NAME
 "." 
SPI_FLASH_NAME
;

313 
Êash_∑øms
.
imgId
 = 0;

314 
Êash_∑øms
.
wrôeImg
 = 1;

315 
Êash_∑øms
.
öBuff
 = &
Êash_buff
[0];

316 
Êash_∑øms
.
outBuff
 = &
Êash_buff
[0];

318 i‡(
ERR_NONE
 !
	`wrôe_Êash_Êag
(&
Êash_∑øms
)) {

319 
	`¥ötf
("FailedÅo update flash!\n");

320 
°©us
 = 
RTEMS_IO_ERROR
;

323  
°©us
;

324 
	}
}

	@Demo/UsbFirmwareUpdate/ImageProcApp/leon/UsbFlasherAddon/usbFlasher.h

9 #i‚de‡
USB_FLASHER_H_


10 
	#USB_FLASHER_H_


	)

14 
	~<πems.h
>

24 
πems_°©us_code
 
£t_Êash_upd©e_Êag
();

	@Demo/UsbFirmwareUpdate/ImageProcApp/leon/UsbFlasherAddon/usbpump_vsc2app.h

33 #i‚de‡
_USBPUMP_VSC2APP_H_


34 
	#_USBPUMP_VSC2APP_H_


	)

36 #i‚de‡
_USBPUMP_PROTO_VSC2_H_


37 
	~"usbpump_¥Ÿo_vsc2.h
"

40 #i‚de‡
_USBPUMP_PROTO_VSC2_CONFIG_H_


41 
	~"usbpump_¥Ÿo_vsc2_c⁄fig.h
"

44 #i‚de‡
_USBPUMP_PROTO_VSC2_API_H_


45 
	~"usbpump_¥Ÿo_vsc2_≠i.h
"

48 #i‚de‡
_USBPUMP_PROTO_VSC2_REQUEST_H_


49 
	~"usbpump_¥Ÿo_vsc2_ªque°.h
"

52 #i‚de‡
_USBAPPINIT_H_


53 
	~"usb≠pöô.h
"

56 #i‚de‡
_UPLATFORM_H_


57 
	~"u∂©f‹m.h
"

60 #i‚de‡
_UDEVICE_H_


61 
	~"udevi˚.h
"

64 #i‚de‡
_USBPUMPOBJECT_H_


65 
	~"usbpumpobje˘.h
"

74 #i‚def 
USBPUMP_VSC2APP_NUM_REQUEST_IN


75 
	#USBPUMP_VSC2APP_NUM_REQUEST_IN
 3

	)

78 #i‚def 
USBPUMP_VSC2APP_NUM_REQUEST_OUT


79 
	#USBPUMP_VSC2APP_NUM_REQUEST_OUT
 3

	)

82 #i‚def 
USBPUMP_VSC2APP_REQUEST_BUFSIZE_IN


83 
	#USBPUMP_VSC2APP_REQUEST_BUFSIZE_IN
 (4 * 1024)

	)

86 #i‚def 
USBPUMP_VSC2APP_REQUEST_BUFSIZE_OUT


87 
	#USBPUMP_VSC2APP_REQUEST_BUFSIZE_OUT
 (4 * 1024)

	)

90 
	#USBPUMP_VSC2APP_NUM_REQUEST
 \

91 (
USBPUMP_VSC2APP_NUM_REQUEST_IN
 + 
USBPUMP_VSC2APP_NUM_REQUEST_OUT
)

	)

100 
__TMS_TYPE_DEF_STRUCT
 (
USBPUMP_VSC2APP_CONTEXT
);

101 
__TMS_TYPE_DEF_STRUCT
 (
USBPUMP_VSC2APP_REQUEST
);

103 
	$__TMS_STRUCTNAME
 (
USBPUMP_VSC2APP_REQUEST
)

105 
__TMS_USBPUMP_PROTO_VSC2_REQUEST
 
Vsc
;

106 
__TMS_VOID
 * 
pBuf„r
;

107 
__TMS_BYTES
 
nBuf„r
;

108 
	}
};

110 
	$__TMS_STRUCTNAME
 (
USBPUMP_VSC2APP_CONTEXT
)

112 
__TMS_USBPUMP_OBJECT_HEADER
 * 
pPrŸoVscObje˘
;

114 
__TMS_UPLATFORM
 * 
pPœtf‹m
;

115 
__TMS_UDEVICE
 * 
pDevi˚
;

117 
__TMS_USBPUMP_SESSION_HANDLE
 
hSessi⁄
;

118 
__TMS_USBPUMP_PROTO_VSC2_INCALL
 
InCÆl
;

120 
__TMS_UINT32
 
fI¡îÁ˚Up
: 1;

121 
__TMS_UINT32
 
fAc˚±Sëup
: 1;

123 
__TMS_USBPUMP_PROTO_VSC2_STREAM_HANDLE
 
hSåómIn
;

124 
__TMS_USBPUMP_PROTO_VSC2_STREAM_HANDLE
 
hSåómOut
;

126 
__TMS_UBUFQE
 * 
pFªeQeHódIn
;

127 
__TMS_UBUFQE
 * 
pFªeQeHódOut
;

129 
__TMS_UBUFQE
 * 
pRxQeHód
;

131 
__TMS_USBPUMP_VSC2APP_REQUEST
 
Reque°s
[
USBPUMP_VSC2APP_NUM_REQUEST
];

132 
	}
};

141 
__TMS_BEGIN_DECLS


143 
__TMS_CONST
 
__TMS_TEXT
 
gk_PrŸoVsc2_Obje˘Name
[];

144 
__TMS_CONST
 
__TMS_USBPUMP_PROTO_VSC2_OUTCALL
 
gk_UsbPumpPrŸoVsc2_OutCÆl
;

147 
__TMS_USBPUMP_VSC2APP_CONTEXT
 *

148 
UsbPumpVsc2Aµ_Clõ¡Cª©e
(

149 
__TMS_UPLATFORM
 * 
pPœtf‹m


152 
	g__TMS_END_DECLS


	@Demo/UsbFirmwareUpdate/ImageProcApp/leon/UsbFlasherAddon/vsc2app_appinit.c

42 
	~"usbpump_vsc2≠p.h
"

43 
	~"usbpumpdebug.h
"

54 
	#EXTERN_USBRC_ROOTTABLE
(
NAME
) \

55 
CONST
 
USBRC_ROOTTABLE
 
NAME
;

	)

57 #ifde‡
DESCRIPTOR_ROOT_0


58 
	$EXTERN_USBRC_ROOTTABLE
(
DESCRIPTOR_ROOT_0
)

60 #ifde‡
DESCRIPTOR_ROOT_1


61 
	$EXTERN_USBRC_ROOTTABLE
(
DESCRIPTOR_ROOT_1
)

63 #ifde‡
DESCRIPTOR_ROOT_2


64 
	$EXTERN_USBRC_ROOTTABLE
(
DESCRIPTOR_ROOT_2
)

66 #ifde‡
DESCRIPTOR_ROOT_3


67 
	$EXTERN_USBRC_ROOTTABLE
(
DESCRIPTOR_ROOT_3
)

69 #ifde‡
DESCRIPTOR_ROOT_4


70 
	$EXTERN_USBRC_ROOTTABLE
(
DESCRIPTOR_ROOT_4
)

72 #ifde‡
DESCRIPTOR_ROOT_5


73 
	$EXTERN_USBRC_ROOTTABLE
(
DESCRIPTOR_ROOT_5
)

75 #ifde‡
DESCRIPTOR_ROOT_6


76 
	$EXTERN_USBRC_ROOTTABLE
(
DESCRIPTOR_ROOT_6
)

78 #ifde‡
DESCRIPTOR_ROOT_7


79 
	$EXTERN_USBRC_ROOTTABLE
(
DESCRIPTOR_ROOT_7
)

81 #ifde‡
DESCRIPTOR_ROOT_8


82 
	$EXTERN_USBRC_ROOTTABLE
(
DESCRIPTOR_ROOT_8
)

84 #ifde‡
DESCRIPTOR_ROOT_9


85 
	$EXTERN_USBRC_ROOTTABLE
(
DESCRIPTOR_ROOT_9
)

87 #i‚def 
DESCRIPTOR_ROOT_0


88 #i‚de‡
DESCRIPTOR_ROOT_1


89 #i‚de‡
DESCRIPTOR_ROOT_2


90 #i‚de‡
DESCRIPTOR_ROOT_3


91 #i‚de‡
DESCRIPTOR_ROOT_4


92 #i‚de‡
DESCRIPTOR_ROOT_5


93 #i‚de‡
DESCRIPTOR_ROOT_6


94 #i‚de‡
DESCRIPTOR_ROOT_7


95 #i‚de‡
DESCRIPTOR_ROOT_8


96 #i‚de‡
DESCRIPTOR_ROOT_9


97 
	$EXTERN_USBRC_ROOTTABLE
(
gk_UsbDes¸ùt‹RoŸ
)

110 
USB_DATAPUMP_APPLICATION_INIT_VECTOR_FINISH_FN


111 
UsbPumpVsc2AµI_AµInô_Föish
;

123 
CONST
 
TEXT
 
gk_PrŸoVsc2_Obje˘Name
[] = 
	`USBPUMP_PROTO_VSC2_NAME
("sample");

125 
CONST
 
USBPUMP_PROTO_VSC2_CONFIG
 
sk_PrŸoVsc2_C⁄fig
 =

126 
	`USBPUMP_PROTO_VSC2_CONFIG_INIT_V2
(

128  
gk_PrŸoVsc2_Obje˘Name
,

137 
CONST
 
USBPUMP_PROTOCOL_INIT_NODE
 
sk_InôNodes
[] =

139 
	`USBPUMP_PROTOCOL_INIT_NODE_INIT_V2
( \

146  
USBPUMP_PROTOCOL_INIT_FLAG_AUTO_ADD
, \

147  
UsbPumpPrŸoVsc2_Probe
, \

148  
UsbPumpPrŸoVsc2_Cª©e
, \

149  
NULL
, \

150  
NULL
, \

151  &
sk_PrŸoVsc2_C⁄fig
 \

153 
	}
};

155 
CONST
 
USBPUMP_PROTOCOL_INIT_NODE_VECTOR
 
	gsk_InôHódî
 =

156 
USBPUMP_PROTOCOL_INIT_NODE_VECTOR_INIT_V1
(

157  
sk_InôNodes
,

158  
NULL
,

159  
NULL


168 
	#INIT_VECTOR_NODE
(
a__UsbDes¸ùt‹RoŸ
) \

169 
	`USB_DATAPUMP_APPLICATION_INIT_VECTOR_INIT_V2
( \

170  &
a__UsbDes¸ùt‹RoŸ
, \

171  
UDMASK_ERRORS
 | 
UDMASK_PROTO
, \

172  
NULL
, \

174 
UsbPump_GíîicAµliˇti⁄Inô_PrŸocﬁs
, \

175  &
sk_InôHódî
 \

176 )

	)

178 
CONST
 
USB_DATAPUMP_APPLICATION_INIT_VECTOR
 
	gsk_Aµliˇti⁄InôVe˘‹
[] =

180 #ifde‡
DESCRIPTOR_ROOT_0


181 
INIT_VECTOR_NODE
(
DESCRIPTOR_ROOT_0
),

183 #ifde‡
DESCRIPTOR_ROOT_1


184 
INIT_VECTOR_NODE
(
DESCRIPTOR_ROOT_1
),

186 #ifde‡
DESCRIPTOR_ROOT_2


187 
INIT_VECTOR_NODE
(
DESCRIPTOR_ROOT_2
),

189 #ifde‡
DESCRIPTOR_ROOT_3


190 
INIT_VECTOR_NODE
(
DESCRIPTOR_ROOT_3
),

192 #ifde‡
DESCRIPTOR_ROOT_4


193 
INIT_VECTOR_NODE
(
DESCRIPTOR_ROOT_4
),

195 #ifde‡
DESCRIPTOR_ROOT_5


196 
INIT_VECTOR_NODE
(
DESCRIPTOR_ROOT_5
),

198 #ifde‡
DESCRIPTOR_ROOT_6


199 
INIT_VECTOR_NODE
(
DESCRIPTOR_ROOT_6
),

201 #ifde‡
DESCRIPTOR_ROOT_7


202 
INIT_VECTOR_NODE
(
DESCRIPTOR_ROOT_7
),

204 #ifde‡
DESCRIPTOR_ROOT_8


205 
INIT_VECTOR_NODE
(
DESCRIPTOR_ROOT_8
),

207 #ifde‡
DESCRIPTOR_ROOT_9


208 
INIT_VECTOR_NODE
(
DESCRIPTOR_ROOT_9
),

210 #i‚def 
DESCRIPTOR_ROOT_0


211 #i‚de‡
DESCRIPTOR_ROOT_1


212 #i‚de‡
DESCRIPTOR_ROOT_2


213 #i‚de‡
DESCRIPTOR_ROOT_3


214 #i‚de‡
DESCRIPTOR_ROOT_4


215 #i‚de‡
DESCRIPTOR_ROOT_5


216 #i‚de‡
DESCRIPTOR_ROOT_6


217 #i‚de‡
DESCRIPTOR_ROOT_7


218 #i‚de‡
DESCRIPTOR_ROOT_8


219 #i‚de‡
DESCRIPTOR_ROOT_9


220 
INIT_VECTOR_NODE
(
gk_UsbDes¸ùt‹RoŸ
)

233 
CONST
 
USB_DATAPUMP_APPLICATION_INIT_VECTOR_HDR
 
	ggk_UsbPumpAµliˇti⁄InôHdr
 =

234 
USB_DATAPUMP_APPLICATION_INIT_VECTOR_HDR_INIT_V1
(

235 
sk_Aµliˇti⁄InôVe˘‹
,

236  
NULL
,

237  
UsbPumpVsc2AµI_AµInô_Föish


255 
VOID


256 
	$UsbPumpVsc2AµI_AµInô_Föish
(

257 
UPLATFORM
 * 
pPœtf‹m
,

258 
CONST
 
USB_DATAPUMP_APPLICATION_INIT_VECTOR_HDR
 *
pVecHdr
,

259 
VOID
 * 
pAµInôC⁄ãxt
,

260 
UINT
 
nP‹ts


263 
	`USBPUMP_UNREFERENCED_PARAMETER
(
pVecHdr
);

264 
	`USBPUMP_UNREFERENCED_PARAMETER
(
pAµInôC⁄ãxt
);

265 
	`USBPUMP_UNREFERENCED_PARAMETER
(
nP‹ts
);

267 
	`UsbPumpVsc2Aµ_Clõ¡Cª©e
(
pPœtf‹m
);

268 
	}
}

	@Demo/UsbFirmwareUpdate/ImageProcApp/leon/UsbFlasherAddon/vsc2app_create.c

36 
	~"usbpump_vsc2≠p.h
"

37 
	~"usbpum∑pi.h
"

38 
	~"usbpum∂ib.h
"

39 
	~"u∂©f‹m≠i.h
"

40 
	~"usbpumpobje˘≠i.h
"

41 
	~"usbpum¥oŸ.h
"

42 
	~"usbpumpdebug.h
"

43 
	~"upùe.h
"

55 
VOID


56 
UsbPumpVsc2Aµ_Clõ¡Dñëe
(

57 
USBPUMP_VSC2APP_CONTEXT
 * 
pSñf


61 
USBPUMP_API_OPEN_CB_FN


62 
	gUsbPumpVsc2Aµ_O≥nSessi⁄_CÆlback
;

115 
USBPUMP_VSC2APP_CONTEXT
 *

116 
	$UsbPumpVsc2Aµ_Clõ¡Cª©e
(

117 
UPLATFORM
 * 
pPœtf‹m


120 
USBPUMP_VSC2APP_CONTEXT
 * 
pSñf
;

121 
USBPUMP_OBJECT_ROOT
 * 
pRoŸObje˘
;

122 
USBPUMP_OBJECT_HEADER
 * 
pObje˘Hódî
;

123 
BOOL
 
SètusOk
;

125 
pSñf
 = 
	`UsbPumpPœtf‹m_MÆlocZîo
(
pPœtf‹m
, (*pSelf));

126 i‡(
pSñf
 =
NULL
)

128 
	`TTUSB_PLATFORM_PRINTF
((

129 
pPœtf‹m
,

130 
UDMASK_ERRORS
 | 
UDMASK_ANY
,

134  
NULL
;

137 
pSñf
->
pPœtf‹m
 =ÖPlatform;

142 
pRoŸObje˘
 = 
	`UsbPumpObje˘_GëRoŸ
(&
pPœtf‹m
->
upf_Hódî
);

143 
pObje˘Hódî
 = 
	`UsbPumpObje˘_Enumî©eM©chögNames
(

144 &
pRoŸObje˘
->
Hódî
,

145 
NULL
,

146 
gk_PrŸoVsc2_Obje˘Name


149 
SètusOk
 = 
pObje˘Hódî
 !
NULL
;

150 i‡(! 
SètusOk
)

152 
	`TTUSB_PLATFORM_PRINTF
((

153 
pPœtf‹m
,

154 
UDMASK_ERRORS
 | 
UDMASK_ANY
,

161 
pSñf
->
pPrŸoVscObje˘
 = 
pObje˘Hódî
;

162 
pSñf
->
pDevi˚
 = 
	`UsbPumpObje˘_GëDevi˚
(
pObje˘Hódî
);

163 i‡(
pSñf
->
pDevi˚
 =
NULL
)

165 
	`TTUSB_PLATFORM_PRINTF
((

166 
pPœtf‹m
,

167 
UDMASK_ERRORS
 | 
UDMASK_ANY
,

171 
SètusOk
 = 
FALSE
;

175 i‡(
SètusOk
)

177 
USBPUMP_VSC2APP_REQUEST
 * 
pReque°
;

178 
UINT
 
i
;

180 
pReque°
 = 
pSñf
->
Reque°s
;

182 
i
 = 0; i < 
USBPUMP_VSC2APP_NUM_REQUEST_IN
; ++i)

184 
pReque°
->
nBuf„r
 = 
USBPUMP_VSC2APP_REQUEST_BUFSIZE_IN
;

185 
pReque°
->
pBuf„r
 =

186 
	`UsbAŒoˇãDevi˚Buf„r
(

187 
pSñf
->
pDevi˚
,

188 
pReque°
->
nBuf„r


190 i‡(
pReque°
->
pBuf„r
 =
NULL
)

192 
	`TTUSB_PLATFORM_PRINTF
((

193 
pPœtf‹m
,

194 
UDMASK_ERRORS
 | 
UDMASK_ANY
,

198 
SètusOk
 = 
FALSE
;

202 
	`UsbPutQe
(

203 &
pSñf
->
pFªeQeHódIn
,

204 &
pReque°
->
Vsc
.
Qe
.
UbufqeLegacy


207 ++
pReque°
;

210 
i
 = 0; i < 
USBPUMP_VSC2APP_NUM_REQUEST_OUT
; ++i)

212 
pReque°
->
nBuf„r
 = 
USBPUMP_VSC2APP_REQUEST_BUFSIZE_OUT
;

213 
pReque°
->
pBuf„r
 =

214 
	`UsbAŒoˇãDevi˚Buf„r
(

215 
pSñf
->
pDevi˚
,

216 
pReque°
->
nBuf„r


218 i‡(
pReque°
->
pBuf„r
 =
NULL
)

220 
	`TTUSB_PLATFORM_PRINTF
((

221 
pPœtf‹m
,

222 
UDMASK_ERRORS
 | 
UDMASK_ANY
,

226 
SètusOk
 = 
FALSE
;

230 
	`UsbPutQe
(

231 &
pSñf
->
pFªeQeHódOut
,

232 &
pReque°
->
Vsc
.
Qe
.
UbufqeLegacy


235 ++
pReque°
;

239 i‡(
SètusOk
)

241 
CONST
 
RECSIZE
 
SizeO≥nMem‹y
 =

242 
	`UsbPumpObje˘_SizeO≥nSessi⁄Reque°Mem‹y
(

243 
pObje˘Hódî


246 
	`UsbPumpObje˘_O≥nSessi⁄
(

247 
pObje˘Hódî
,

248 
	`UsbPumpPœtf‹m_MÆloc
(
pPœtf‹m
, 
SizeO≥nMem‹y
),

249 
SizeO≥nMem‹y
,

250 
UsbPumpVsc2Aµ_O≥nSessi⁄_CÆlback
,

251 
pSñf
,

252 &
gk_UsbPumpPrŸoVsc2_Guid
,

253 
NULL
,

254 &
pSñf
->
InCÆl
.
GíîicCa°
,

255 (
pSñf
->
InCÆl
),

256 
pSñf
,

257 &
gk_UsbPumpPrŸoVsc2_OutCÆl
.
GíîicCa°
,

258 (
gk_UsbPumpPrŸoVsc2_OutCÆl
)

261 
	`TTUSB_PLATFORM_PRINTF
((

262 
pPœtf‹m
,

263 
UDMASK_ANY
,

266 
pSñf
,

267 
pSñf
->
pPrŸoVscObje˘


270  
pSñf
;

274 
	`UsbPumpVsc2Aµ_Clõ¡Dñëe
(
pSñf
);

275  
NULL
;

277 
	}
}

280 
VOID


281 
	$UsbPumpVsc2Aµ_Clõ¡Dñëe
(

282 
USBPUMP_VSC2APP_CONTEXT
 * 
pSñf


285 
UBUFQE
 * 
pQe
;

287 (
pQe
 = 
	`UsbGëQe
(&
pSñf
->
pFªeQeHódIn
)Ë!
NULL
)

289 
USBPUMP_VSC2APP_REQUEST
 * 
CONST
 
pReque°
 =

290 
	`__TMS_CONTAINER_OF
(

291 
pQe
,

292 
USBPUMP_VSC2APP_REQUEST
,

293 
Vsc
.
Qe
.
UbufqeLegacy


296 
	`UsbFªeDevi˚Buf„r
(

297 
pSñf
->
pDevi˚
,

298 
pReque°
->
pBuf„r
,

299 
pReque°
->
nBuf„r


303 (
pQe
 = 
	`UsbGëQe
(&
pSñf
->
pFªeQeHódOut
)Ë!
NULL
)

305 
USBPUMP_VSC2APP_REQUEST
 * 
CONST
 
pReque°
 =

306 
	`__TMS_CONTAINER_OF
(

307 
pQe
,

308 
USBPUMP_VSC2APP_REQUEST
,

309 
Vsc
.
Qe
.
UbufqeLegacy


312 
	`UsbFªeDevi˚Buf„r
(

313 
pSñf
->
pDevi˚
,

314 
pReque°
->
pBuf„r
,

315 
pReque°
->
nBuf„r


319 
	`UsbPumpPœtf‹m_Fªe
(
pSñf
->
pPœtf‹m
,ÖSelf, (*pSelf));

320 
	}
}

322 
VOID


323 
	$UsbPumpVsc2Aµ_O≥nSessi⁄_CÆlback
(

324 
VOID
 * 
pClõ¡C⁄ãxt
,

325 
USBPUMP_SESSION_HANDLE
 
Sessi⁄H™dÀ
,

326 
UINT32
 
Resu…
,

327 
VOID
 * 
pO≥nReque°Mem‹y
,

328 
RECSIZE
 
sizeO≥nReque°Mem‹y


331 
USBPUMP_VSC2APP_CONTEXT
 * 
CONST
 
pSñf
 = 
pClõ¡C⁄ãxt
;

332 
USBPUMP_PROTO_VSC2_STATUS
 
Sètus
;

334 
	`TTUSB_PLATFORM_PRINTF
((

335 
pSñf
->
pPœtf‹m
,

336 
UDMASK_ENTRY
 | 
UDMASK_ANY
,

339 
Resu…
,

340 
Sessi⁄H™dÀ


343 i‡(
pO≥nReque°Mem‹y
 !
NULL
)

345 
	`UsbPumpPœtf‹m_Fªe
(

346 
pSñf
->
pPœtf‹m
,

347 
pO≥nReque°Mem‹y
,

348 
sizeO≥nReque°Mem‹y


352 i‡(
Resu…
 !
USBPUMP_API_STATUS_OK
)

354 
	`TTUSB_PLATFORM_PRINTF
((

355 
pSñf
->
pPœtf‹m
,

356 
UDMASK_ERRORS
,

359 
Resu…


361 
	`UsbPumpVsc2Aµ_Clõ¡Dñëe
(
pSñf
);

366 
pSñf
->
hSessi⁄
 = 
Sessi⁄H™dÀ
;

369 
Sètus
 = (*
pSñf
->
InCÆl
.
Vsc
.
pO≥nSåómFn
)(

370 
pSñf
->
hSessi⁄
,

371 
UPIPE_SETTING_MASK_BULK_IN
,

374 &
pSñf
->
hSåómIn


377 i‡(
	`USBPUMP_PROTO_VSC2_STATUS_SUCCESS
(
Sètus
))

379 
Sètus
 = (*
pSñf
->
InCÆl
.
Vsc
.
pO≥nSåómFn
)(

380 
pSñf
->
hSessi⁄
,

381 
UPIPE_SETTING_MASK_BULK_OUT
,

384 &
pSñf
->
hSåómOut


387 i‡(! 
	`USBPUMP_PROTO_VSC2_STATUS_SUCCESS
(
Sètus
))

389 
	`TTUSB_PLATFORM_PRINTF
((

390 
pSñf
->
pPœtf‹m
,

391 
UDMASK_ERRORS
,

399 
	`TTUSB_PLATFORM_PRINTF
((

400 
pSñf
->
pPœtf‹m
,

401 
UDMASK_ERRORS
,

406 
	}
}

	@Demo/UsbFirmwareUpdate/ImageProcApp/leon/UsbFlasherAddon/vsc2app_outcall.c

36 
	~"usbpump_vsc2≠p.h
"

37 
	~"usbpump_¥Ÿo_vsc2_≠i.h
"

38 
	~"usbpum∑pi.h
"

39 
	~"usbpumpdebug.h
"

40 
	~"usbpum∂ib.h
"

41 
	~"u∂©f‹m≠i.h
"

42 
	~"usbFœshî.h
"

54 
USBPUMP_PROTO_VSC2_EVENT_FN


55 
	gUsbPumpVscAµI_Evít
;

58 
USBPUMP_PROTO_VSC2_SETUP_VALIDATE_FN


59 
	gUsbPumpVscAµI_SëupVÆid©e
;

62 
USBPUMP_PROTO_VSC2_SETUP_PROCESS_FN


63 
	gUsbPumpVscAµI_SëupPro˚ss
;

66 
VOID


67 
UsbPumpVscAµI_SèπLo›back
(

68 
USBPUMP_VSC2APP_CONTEXT
 * 
pSñf


72 
UBUFIODONEFN


73 
	gUsbPumpVscAµI_Lo›backRe˚iveD⁄e
;

76 
UBUFIODONEFN


77 
	gUsbPumpVscAµI_Lo›backTøns„rD⁄e
;

80 
VOID


81 
UsbPumpVscAµI_FªeRxQe
(

82 
USBPUMP_VSC2APP_CONTEXT
 * 
pSñf


95 
CONST
 
USBPUMP_PROTO_VSC2_OUTCALL
 
	ggk_UsbPumpPrŸoVsc2_OutCÆl
 =

96 
USBPUMP_PROTO_VSC2_OUTCALL_INIT_V1
(

97 
UsbPumpVscAµI_Evít
,

98 
UsbPumpVscAµI_SëupVÆid©e
,

99 
UsbPumpVscAµI_SëupPro˚ss


143 
VOID


144 
	$UsbPumpVscAµI_Evít
(

145 
VOID
 * 
Clõ¡H™dÀ
,

146 
USBPUMP_PROTO_VSC2_EVENT
 
Evít
,

147 
CONST
 
VOID
 * 
pEvítInfo


150 
USBPUMP_VSC2APP_CONTEXT
 * 
CONST
 
pSñf
 = 
Clõ¡H™dÀ
;

152 
	`USBPUMP_UNREFERENCED_PARAMETER
(
pEvítInfo
);

154 
Evít
)

156 
USBPUMP_PROTO_VSC2_EVENT_INTERFACE_UP
:

158 
	`TTUSB_PLATFORM_PRINTF
((

159 
pSñf
->
pPœtf‹m
,

160 
UDMASK_ANY
,

164 
pSñf
->
fI¡îÁ˚Up
 = 
TRUE
;

166 
	`UsbPumpVscAµI_SèπLo›back
(
pSñf
);

170 
USBPUMP_PROTO_VSC2_EVENT_INTERFACE_DOWN
:

172 
	`TTUSB_PLATFORM_PRINTF
((

173 
pSñf
->
pPœtf‹m
,

174 
UDMASK_ANY
,

178 
pSñf
->
fI¡îÁ˚Up
 = 
FALSE
;

182 
USBPUMP_PROTO_VSC2_EVENT_RESUME
:

183 
USBPUMP_PROTO_VSC2_EVENT_SUSPEND
:

190 
	}
}

233 
USBPUMP_PROTO_VSC2_SETUP_STATUS


234 
	$UsbPumpVscAµI_SëupVÆid©e
(

235 
VOID
 * 
Clõ¡H™dÀ
,

236 
CONST
 
USETUP
 * 
pSëup


239 
USBPUMP_VSC2APP_CONTEXT
 * 
CONST
 
pSñf
 = 
Clõ¡H™dÀ
;

240 
USBPUMP_PROTO_VSC2_SETUP_STATUS
 
Sètus
;

242 
pSñf
->
fAc˚±Sëup
 = 
FALSE
;

243 
Sètus
 = 
USBPUMP_PROTO_VSC2_SETUP_STATUS_NOT_CLAIMED
;

245 i‡(
pSëup
->
uc_bmReque°Ty≥
 =
USB_bmReque°Ty≥_HVDEV
)

247 i‡(
pSëup
->
uc_bReque°
 == 0)

249 
pSñf
->
fAc˚±Sëup
 = 
TRUE
;

250 
Sètus
 = 
USBPUMP_PROTO_VSC2_SETUP_STATUS_ACCEPTED
;

254 
Sètus
 = 
USBPUMP_PROTO_VSC2_SETUP_STATUS_REJECTED
;

257 i‡(
pSëup
->
uc_bmReque°Ty≥
 =
USB_bmReque°Ty≥_DVDEV
)

259 i‡(
pSëup
->
uc_bReque°
 == 0)

261 
pSñf
->
fAc˚±Sëup
 = 
TRUE
;

262 
Sètus
 = 
USBPUMP_PROTO_VSC2_SETUP_STATUS_ACCEPTED
;

266 
Sètus
 = 
USBPUMP_PROTO_VSC2_SETUP_STATUS_REJECTED
;

270  
Sètus
;

271 
	}
}

314 
BOOL


315 
	$UsbPumpVscAµI_SëupPro˚ss
(

316 
VOID
 * 
Clõ¡H™dÀ
,

317 
CONST
 
USETUP
 * 
pSëup
,

318 
VOID
 * 
pBuf„r
,

319 
UINT16
 
nBuf„r


322 
USBPUMP_VSC2APP_CONTEXT
 * 
CONST
 
pSñf
 = 
Clõ¡H™dÀ
;

324 i‡(! 
pSñf
->
fAc˚±Sëup
)

325  
FALSE
;

327 
pSñf
->
fAc˚±Sëup
 = 
FALSE
;

329 i‡(
pSëup
->
uc_bmReque°Ty≥
 =
USB_bmReque°Ty≥_HVDEV
)

332 
	`TTUSB_PLATFORM_PRINTF
((

333 
pSñf
->
pPœtf‹m
,

334 
UDMASK_ANY
,

337 
nBuf„r
,

338 ((
UINT8
 *Ë
pBuf„r
)[0],

339 ((
UINT8
 *Ë
pBuf„r
)[1],

340 ((
UINT8
 *Ë
pBuf„r
)[2],

341 ((
UINT8
 *Ë
pBuf„r
)[3]

344 
	`£t_Êash_upd©e_Êag
();

347 (*
pSñf
->
InCÆl
.
Vsc
.
pC⁄åﬁRïlyFn
)(

348 
pSñf
->
hSessi⁄
,

349 
pBuf„r
,

353 i‡(
pSëup
->
uc_bmReque°Ty≥
 =
USB_bmReque°Ty≥_DVDEV
)

355 
UINT16
 
Size
;

358 
Size
 = (*
pSëup
);

359 i‡(
Size
 > 
nBuf„r
)

360 
Size
 = 
nBuf„r
;

362 
	`UHIL_˝ybuf
(
pBuf„r
, 
pSëup
, 
Size
);

364 (*
pSñf
->
InCÆl
.
Vsc
.
pC⁄åﬁRïlyFn
)(

365 
pSñf
->
hSessi⁄
,

366 
pBuf„r
,

367 
Size


373 (*
pSñf
->
InCÆl
.
Vsc
.
pC⁄åﬁRïlyFn
)(

374 
pSñf
->
hSessi⁄
,

375 
NULL
,

380  
TRUE
;

381 
	}
}

405 
VOID


406 
	$UsbPumpVscAµI_SèπLo›back
(

407 
USBPUMP_VSC2APP_CONTEXT
 * 
pSñf


410 
UBUFQE
 * 
pQe
;

412 i‡(
pSñf
->
hSåómIn
 =
NULL
 ||ÖSñf->
hSåómOut
 == NULL)

414 
	`TTUSB_PLATFORM_PRINTF
((

415 
pSñf
->
pPœtf‹m
,

416 
UDMASK_ERRORS
,

419 
pSñf
->
hSåómIn
,

420 
pSñf
->
hSåómOut


425 (
pQe
 = 
	`UsbGëQe
(&
pSñf
->
pFªeQeHódOut
)Ë!
NULL
)

427 
USBPUMP_VSC2APP_REQUEST
 * 
CONST
 
pReque°
 =

428 
	`__TMS_CONTAINER_OF
(

429 
pQe
,

430 
USBPUMP_VSC2APP_REQUEST
,

431 
Vsc
.
Qe
.
UbufqeLegacy


434 
	`UsbPumpPrŸoVsc2Reque°_Pª∑ªLegacy
(

435 &
pReque°
->
Vsc
,

436 
pSñf
->
hSåómOut
,

437 
pReque°
->
pBuf„r
,

438 
NULL
,

439 
pReque°
->
nBuf„r
,

440 
UBUFQEFLAG_SHORTCOMPLETES
,

441 
UsbPumpVscAµI_Lo›backRe˚iveD⁄e
,

442 
pSñf


445 (*
pSñf
->
InCÆl
.
Vsc
.
pSubmôReque°Fn
)(

446 
pSñf
->
hSessi⁄
,

447 &
pReque°
->
Vsc


450 
	}
}

453 
VOID


454 
	$UsbPumpVscAµI_Lo›backRe˚iveD⁄e
(

455 
UDEVICE
 * 
pDevi˚
,

456 
UENDPOINT
 * 
pUï
,

457 
UBUFQE
 * 
pQe


460 
USBPUMP_VSC2APP_REQUEST
 * 
CONST


461 
pReque°
 = 
	`__TMS_CONTAINER_OF
(

462 
pQe
,

463 
USBPUMP_VSC2APP_REQUEST
,

464 
Vsc
.
Qe
.
UbufqeLegacy


466 
USBPUMP_VSC2APP_CONTEXT
 * 
CONST
 
pSñf
 = 
pQe
->
uqe_d⁄eöfo
;

467 
UBUFQE
 * 
pQeIn
;

469 
	`USBPUMP_UNREFERENCED_PARAMETER
(
pDevi˚
);

470 
	`USBPUMP_UNREFERENCED_PARAMETER
(
pUï
);

472 i‡(
pQe
->
uqe_°©us
 !
USTAT_OK
)

474 
	`TTUSB_PLATFORM_PRINTF
((

475 
pSñf
->
pPœtf‹m
,

476 
UDMASK_ERRORS
,

479 
pReque°
,

480 
	`UsbPumpSètus_Name
(
pQe
->
uqe_°©us
),

481 
pQe
->
uqe_°©us


484 i‡(
pQe
->
uqe_°©us
 =
USTAT_NOTCFG
)

486 
	`UsbPutQe
(

487 &
pSñf
->
pFªeQeHódOut
,

488 &
pReque°
->
Vsc
.
Qe
.
UbufqeLegacy


490 
	`UsbPumpVscAµI_FªeRxQe
(
pSñf
);

495 
	`UsbPumpPrŸoVsc2Reque°_SëTøns„rFœgs
(

496 &
pReque°
->
Vsc
,

497 
UBUFQEFLAG_SHORTCOMPLETES


499 (*
pSñf
->
InCÆl
.
Vsc
.
pSubmôReque°Fn
)(

500 
pSñf
->
hSessi⁄
,

501 &
pReque°
->
Vsc


508 
pQe
->
uqe_bufödex
 = 0;

510 i‡(
pSñf
->
pRxQeHód
 =
NULL
)

512 (
pQeIn
 = 
	`UsbGëQe
(&
pSñf
->
pFªeQeHódIn
)Ë!
NULL
)

514 
USBPUMP_VSC2APP_REQUEST
 * 
CONST


515 
pReque°In
 = 
	`__TMS_CONTAINER_OF
(

516 
pQeIn
,

517 
USBPUMP_VSC2APP_REQUEST
,

518 
Vsc
.
Qe
.
UbufqeLegacy


520 
BYTES
 
Size
;

521 
UBUFQE_FLAGS
 
Fœgs
;

523 i‡(
pQe
->
uqe_buÁrs
 > 
pReque°In
->
nBuf„r
)

525 
Size
 = 
pReque°In
->
nBuf„r
;

526 
Fœgs
 = 0;

530 
Size
 = 
pQe
->
uqe_buÁrs
;

531 
Fœgs
 = 
pReque°
->
Vsc
.
Qe
.
UbufqeLegacy
.
uqe_Êags


532 & 
UBUFQEFLAG_POSTBREAK
;

535 
	`UHIL_˝ybuf
(

536 
pReque°In
->
pBuf„r
,

537 (
UINT8
 *Ë
pQe
->
uqe_buf
 +ÖQe->
uqe_bufödex
,

538 
Size


541 
	`UsbPumpPrŸoVsc2Reque°_Pª∑ªLegacy
(

542 &
pReque°In
->
Vsc
,

543 
pSñf
->
hSåómIn
,

544 
pReque°In
->
pBuf„r
,

545 
NULL
,

546 
Size
,

547 
Fœgs
,

548 
UsbPumpVscAµI_Lo›backTøns„rD⁄e
,

549 
pSñf


553 (*
pSñf
->
InCÆl
.
Vsc
.
pSubmôReque°Fn
)(

554 
pSñf
->
hSessi⁄
,

555 &
pReque°In
->
Vsc


558 
pQe
->
uqe_bufödex
 +
Size
;

559 i‡((
pQe
->
uqe_buÁrs
 -
Size
) == 0)

562 
	`UsbPumpPrŸoVsc2Reque°_SëTøns„rFœgs
(

563 &
pReque°
->
Vsc
,

564 
UBUFQEFLAG_SHORTCOMPLETES


566 (*
pSñf
->
InCÆl
.
Vsc
.
pSubmôReque°Fn
)(

567 
pSñf
->
hSessi⁄
,

568 &
pReque°
->
Vsc


575 
	`UsbPutQe
(&
pSñf
->
pRxQeHód
, &
pReque°
->
Vsc
.
Qe
.
UbufqeLegacy
);

576 
	}
}

579 
VOID


580 
	$UsbPumpVscAµI_Lo›backTøns„rD⁄e
(

581 
UDEVICE
 * 
pDevi˚
,

582 
UENDPOINT
 * 
pUï
,

583 
UBUFQE
 * 
pQe


586 
USBPUMP_VSC2APP_REQUEST
 * 
CONST


587 
pReque°
 = 
	`__TMS_CONTAINER_OF
(

588 
pQe
,

589 
USBPUMP_VSC2APP_REQUEST
,

590 
Vsc
.
Qe
.
UbufqeLegacy


592 
USBPUMP_VSC2APP_CONTEXT
 * 
CONST
 
pSñf
 = 
pQe
->
uqe_d⁄eöfo
;

593 
UBUFQE
 * 
pQeOut
;

595 
	`USBPUMP_UNREFERENCED_PARAMETER
(
pDevi˚
);

596 
	`USBPUMP_UNREFERENCED_PARAMETER
(
pUï
);

598 i‡(
pQe
->
uqe_°©us
 !
USTAT_OK
)

600 
	`TTUSB_PLATFORM_PRINTF
((

601 
pSñf
->
pPœtf‹m
,

602 
UDMASK_ERRORS
,

605 
pReque°
,

606 
	`UsbPumpSètus_Name
(
pQe
->
uqe_°©us
),

607 
pQe
->
uqe_°©us


611 i‡(
pQe
->
uqe_°©us
 =
USTAT_NOTCFG
)

613 
	`UsbPutQe
(&
pSñf
->
pFªeQeHódIn
, &
pReque°
->
Vsc
.
Qe
.
UbufqeLegacy
);

614 
	`UsbPumpVscAµI_FªeRxQe
(
pSñf
);

618 i‡((
pQeOut
 = 
pSñf
->
pRxQeHód
Ë=
NULL
)

620 
	`UsbPutQe
(&
pSñf
->
pFªeQeHódIn
, &
pReque°
->
Vsc
.
Qe
.
UbufqeLegacy
);

624 
USBPUMP_VSC2APP_REQUEST
 * 
CONST


625 
pReque°Out
 = 
	`__TMS_CONTAINER_OF
(

626 
pQeOut
,

627 
USBPUMP_VSC2APP_REQUEST
,

628 
Vsc
.
Qe
.
UbufqeLegacy


630 
BYTES
 
Size
;

631 
UBUFQE_FLAGS
 
QeFœgs
;

633 i‡(
pQeOut
->
uqe_buÁrs
 > 
pReque°
->
nBuf„r
)

635 
Size
 = 
pReque°
->
nBuf„r
;

636 
QeFœgs
 = 0;

640 
Size
 = 
pQeOut
->
uqe_buÁrs
;

641 
QeFœgs
 = 
pReque°Out
->
Vsc
.
Qe
.
UbufqeLegacy
.
uqe_Êags
 &

642 
UBUFQEFLAG_POSTBREAK
;

645 
	`UHIL_˝ybuf
(

646 
pReque°
->
pBuf„r
,

647 (
UINT8
 *Ë
pQeOut
->
uqe_buf
 +ÖQeOut->
uqe_bufödex
,

648 
Size


651 
	`UsbPumpPrŸoVsc2Reque°_Pª∑ªLegacy
(

652 &
pReque°
->
Vsc
,

653 
pSñf
->
hSåómIn
,

654 
pReque°
->
pBuf„r
,

655 
NULL
,

656 
Size
,

657 
QeFœgs
,

658 
UsbPumpVscAµI_Lo›backTøns„rD⁄e
,

659 
pSñf


663 (*
pSñf
->
InCÆl
.
Vsc
.
pSubmôReque°Fn
)(

664 
pSñf
->
hSessi⁄
,

665 &
pReque°
->
Vsc


668 
pQeOut
->
uqe_bufödex
 +
Size
;

669 i‡((
pQeOut
->
uqe_buÁrs
 -
Size
) == 0)

672 
	`UsbGëQe
(&
pSñf
->
pRxQeHód
);

674 
	`UsbPumpPrŸoVsc2Reque°_SëTøns„rFœgs
(

675 &
pReque°Out
->
Vsc
,

676 
UBUFQEFLAG_SHORTCOMPLETES


678 (*
pSñf
->
InCÆl
.
Vsc
.
pSubmôReque°Fn
)(

679 
pSñf
->
hSessi⁄
,

680 &
pReque°Out
->
Vsc


684 
	}
}

687 
VOID


688 
	$UsbPumpVscAµI_FªeRxQe
(

689 
USBPUMP_VSC2APP_CONTEXT
 * 
pSñf


692 
UBUFQE
 * 
pQe
;

694 (
pQe
 = 
	`UsbGëQe
(&
pSñf
->
pRxQeHód
)Ë!
NULL
)

696 
	`UsbPutQe
(&
pSñf
->
pFªeQeHódOut
, 
pQe
);

698 
	}
}

	@Demo/UsbFirmwareUpdate/ImageProcApp/leon/app_config.c

11 
	~<°dio.h
>

12 
	~<OsDrvC¥.h
>

13 
	~<DrvShaveL2Cache.h
>

14 
	~"≠p_c⁄fig.h
"

20 
	#CLOCKS_MIPICFG
 (
AUX_CLK_MASK_MIPI_ECFG
 | 
AUX_CLK_MASK_MIPI_CFG
)

	)

23 
	#BIGENDIANMODE
 (0x01000786)

	)

32 
BSP_SET_CLOCK
(
DEFAULT_OSC0_KHZ
, 
PLL_DESIRED_FREQ_KHZ
, 1, 1,

33 (
DEFAULT_RTEMS_CSS_LOS_CLOCKS
 | 
DEV_CSS_SPI0
),

34 
DEFAULT_RTEMS_MSS_LRT_CLOCKS
,

38 
BSP_SET_L2C_CONFIG
(1, 
L2C_REPL_LRU
, 0, 
L2C_MODE_WRITE_THROUGH
, 0, 
NULL
);

42 
ölöe
 
v_blocksRe£tSûic⁄S≥cific
();

57 
ölöe
 
	$v_blocksRe£tSûic⁄S≥cific
()

60 
	`OsDrvC¥SysDevi˚A˘i⁄
(
SIPP_DOMAIN
, 
ASSERT_RESET
, -1ULL);

61 
	`OsDrvC¥SysDevi˚A˘i⁄
(
UPA_DOMAIN
, 
ASSERT_RESET
, -1ULL);

62 
	`OsDrvC¥SysDevi˚A˘i⁄
(
MSS_DOMAIN
, 
ASSERT_RESET
, -1ULL);

65 
	`DrvC¥SysDevi˚A˘i⁄
(
CSS_DOMAIN
, 
ASSERT_RESET
, ()(-1ULL ^ 
DEFAULT_CORE_CSS_DSS_CLOCKS
));

68 
	`OsDrvC¥PowîTu∫OffI¶™d
(
POWER_ISLAND_SHAVE_0
);

69 
	`OsDrvC¥PowîTu∫OffI¶™d
(
POWER_ISLAND_SHAVE_1
);

70 
	`OsDrvC¥PowîTu∫OffI¶™d
(
POWER_ISLAND_SHAVE_2
);

71 
	`OsDrvC¥PowîTu∫OffI¶™d
(
POWER_ISLAND_SHAVE_3
);

72 
	`OsDrvC¥PowîTu∫OffI¶™d
(
POWER_ISLAND_SHAVE_4
);

73 
	`OsDrvC¥PowîTu∫OffI¶™d
(
POWER_ISLAND_SHAVE_5
);

74 
	`OsDrvC¥PowîTu∫OffI¶™d
(
POWER_ISLAND_SHAVE_6
);

75 
	`OsDrvC¥PowîTu∫OffI¶™d
(
POWER_ISLAND_SHAVE_7
);

76 
	`OsDrvC¥PowîTu∫OffI¶™d
(
POWER_ISLAND_SHAVE_8
);

77 
	`OsDrvC¥PowîTu∫OffI¶™d
(
POWER_ISLAND_SHAVE_9
);

78 
	`OsDrvC¥PowîTu∫OffI¶™d
(
POWER_ISLAND_SHAVE_10
);

79 
	`OsDrvC¥PowîTu∫OffI¶™d
(
POWER_ISLAND_SHAVE_11
);

81 #ifde‡
MA2100


82 
	`OsDrvC¥PowîTu∫OffI¶™d
(
POWER_ISLAND_MSS_ANALOG
);

83 
	`OsDrvC¥PowîTu∫OffI¶™d
(
POWER_ISLAND_MSS_DIGITAL
);

85 
	`OsDrvC¥PowîTu∫OffI¶™d
(
POWER_ISLAND_MSS_CPU
);

86 
	`OsDrvC¥PowîTu∫OffI¶™d
(
POWER_ISLAND_MSS_AMC
);

87 
	`OsDrvC¥PowîTu∫OffI¶™d
(
POWER_ISLAND_MSS_SIPP
);

89 
	}
}

98 
	$i_öôClocksAndMem‹y
()

104 c⁄° 
tyAuxClkDividîCfg
 
auxClk
[] =

109 
ªt_code
 = 0;

112 i‡((
ªt_code
 = ()
	`OsDrvC¥Inô
()Ë!
OS_MYR_DRV_SUCCESS
)

114 
	`¥ötf
("Eº‹: OsDrvC¥Inô(ËFAILED, wôhÉº‹ code: %d\n", 
ªt_code
);

115  
ªt_code
;

119 i‡((
ªt_code
 = ()
	`OsDrvC¥O≥n
()Ë!
OS_MYR_DRV_SUCCESS
)

121 
	`¥ötf
("Eº‹: OsDrvC¥O≥n(ËFAILED, wôhÉº‹ code: %d\n", 
ªt_code
);

122  
ªt_code
;

126 i‡((
ªt_code
 = ()
	`OsDrvC¥AuxClockAºayC⁄fig
(
auxClk
)Ë!
OS_MYR_DRV_SUCCESS
)

128 
	`¥ötf
("Eº‹: OsDrvC¥AuxClockAºayC⁄fig(ËFAILED, wôhÉº‹ code: %d\n", 
ªt_code
);

129  
ªt_code
;

133 
	`v_blocksRe£tSûic⁄S≥cific
();

135  (
ªt_code
);

136 
	}
}

	@Demo/UsbFirmwareUpdate/ImageProcApp/leon/app_config.h

9 #i‚de‡
_APP_CONFIG_H_


10 
	#_APP_CONFIG_H_


	)

13 
	#PLL_DESIRED_FREQ_KHZ
 480000

	)

15 
	#DEFAULT_OSC0_KHZ
 12000

	)

16 
	#L2CACHE_NORMAL_MODE
 (0x6)

17 
	#L2CACHE_CFG
 (
L2CACHE_NORMAL_MODE
)

	)

19 
i_öôClocksAndMem‹y
();

	@Demo/UsbFirmwareUpdate/ImageProcApp/leon/blinker.c

1 
	~"°dio.h
"

2 
	~<°dlib.h
>

3 
	~"sy°em.h
"

4 
	~<sys/io˘l.h
>

5 
	~<f˙é.h
>

6 
	~<î∫o.h
>

7 
	~<OsWm8325.h
>

10 
	$›í_wm8325
()

12 
fd
;

14 
fd
 = 
	`›í
–"/dev/i2c2." 
WM8325_NAME
 , 
O_RDWR
 );

15 i‡(
fd
 < 0) {

16 
	`≥º‹
("cannot open");

17 
	`exô
(
fd
);

20  
fd
;

21 
	}
}

23 
	$£t_Àd_wm8325
(
u32
 
wm8325fd
, u32 
∆ed
, u32 
°©e
)

25 
sc
;

26 
wm8325LedSåu˘_t
 
Àd
;

28 
Àd
.
sour˚
 = 
WM8325_MANUAL
;

30 i‡(
∆ed
 > 
LED2
) {

31 
∆ed
 = 
LED2
;

34 
Àd
.
ƒ
 = 
∆ed
;

36 i‡(
°©e
) {

37 
Àd
.
mode
 = 
WM8325_ON
;

39 
Àd
.
mode
 = 
WM8325_OFF
;

42 
sc
 = 
	`io˘l
(
wm8325fd
, 
WM8325_SET_LED
, &
Àd
);

43 i‡(
sc
) {

44 
	`≥º‹
("ioctl fail");

47  
sc
;

48 
	}
}

50 
πems_èsk
 
	$blök_èsk
(
πems_èsk_¨gumít
 
unu£d
)

52 
	`UNUSED
(
unu£d
);

54 
u32
 
wm8325fd
;

55 
u32
 
°©e
 = 0;

56 
u32
 
∆ed
 = 
LED1
;

58 
wm8325fd
 = 
	`›í_wm8325
();

61 
	`£t_Àd_wm8325
(
wm8325fd
, 
∆ed
, 
°©e
);

62 
°©e
 ^= 1;

63 
	`πems_èsk_wake_a·î
(250);

65 
	}
}

	@Demo/UsbFirmwareUpdate/ImageProcApp/leon/main.c

1 
	~<°dlib.h
>

2 
	~<°dio.h
>

3 
	~<°rög.h
>

4 
	~<î∫o.h
>

5 
	~<πems.h
>

6 
	~<πems/b•Io.h
>

7 
	~<b•.h
>

9 
	~<£m≠h‹e.h
>

10 
	~<±hªad.h
>

11 
	~<sched.h
>

12 
	~<f˙é.h
>

13 
	~<mv_ty≥s.h
>

14 
	~<DrvLe⁄.h
>

15 
	~<DrvDdr.h
>

16 
	~<DrvC¥.h
>

17 
	~<DrvShaveL2Cache.h
>

18 
	~<swcLe⁄Utûs.h
>

19 
	~<DrvLe⁄L2C.h
>

20 
	~<DrvTimî.h
>

22 
	~<πems/blkdev.h
>

23 
	~<πems/ide_∑π_èbÀ.h
>

24 
	~<πems/ømdisk.h
>

25 
	~<πems/libcsuµ‹t.h
>

26 
	~<OsDrvC¥.h
>

27 
	~<πems/io.h
>

28 
	~<πems/libio.h
>

30 
	~<uni°d.h
>

31 
	~<sys/dúít.h
>

32 
	~<˘y≥.h
>

33 
	~"≠p_c⁄fig.h
"

34 
	~"πems_c⁄fig.h
"

35 
	~"UsbFœshîAdd⁄/If_usbFœshî.h
"

37 
	~<πems/libi2c.h
>

38 
	~<πems/libio.h
>

39 
	~"DrvGpio.h
"

40 
	~"OsDrvSpiBus.h
"

41 
	~"OsDrvI2cBus.h
"

42 
	~"OsDrvI2cMyr2.h
"

43 
	~"sy°em.h
"

44 
	~"OsWm8325.h
"

47 
	#INTERRUPTPRIORITY
 8

48 
	#ADDR10BIT
 0

49 
	#PMIC_I2C_ADDRESS
 (0x6C>>1)

	)

51 #if(
CONFIGURE_MAXIMUM_TASKS
 < 15)

55 #if(
CONFIGURE_MAXIMUM_TIMERS
 < 4)

60 
DECLARE_I2C_BUS
(
myr2_i2c
, 3, 
I2C_SPEED_SS
, 
ADDR10BIT
, 
INTERRUPTPRIORITY
);

62 
	$i_myr2_ªgi°î_libi2c_•i_bus
()

64 
ªt_code
 = 
RTEMS_SUCCESSFUL
;

65 
i2c2_bu¢o
;

66 
u32
 
drvMö‹WM8325
;

71 i‡((
ªt_code
 = 
	`OsDrvLibI2CInôülize
()Ë!
RTEMS_SUCCESSFUL
) {

72 
	`¥ötf
("πems_libi2c_öôülizêFAILED %d \n", 
ªt_code
);

73 
exô_i_myr2_ªgi°î_libi2c_•i_bus
;

76 
ªt_code
 = 
	`OsDrvLibI2CRegi°îBus
("/dev/i2c2",

77 (
πems_libi2c_bus_t
 *)&
myr2_i2c
);

78 i‡(
ªt_code
 < 0) {

79 
	`¥ötf
("CouldÇŸÑegi°îÅhêI2C bus,Éº %d\n", 
ªt_code
);

80 
exô_i_myr2_ªgi°î_libi2c_•i_bus
;

82 
i2c2_bu¢o
 = 
ªt_code
;

85 
ªt_code
 = 
	`OsDrvLibI2CRegi°îDevi˚
–"wm8325", (
πems_libi2c_drv_t
 *)&
wm8325PrŸocﬁDrvTbl
, 
i2c2_bu¢o
, 
PMIC_I2C_ADDRESS
);

86 i‡(
ªt_code
 < 0) {

87 
	`¥ötf
("\n WM8325 minor version < 0 \n");

88 
exô_i_myr2_ªgi°î_libi2c_•i_bus
;

90 
drvMö‹WM8325
 = 
ªt_code
;

92 i‡((
ªt_code
 = 
	`OsDrvIOInôülize
(
πems_libi2c_maj‹
, 
drvMö‹WM8325
, 
NULL
)Ë!
RTEMS_SUCCESSFUL
) {

93 
	`¥ötf
("πems_io_öôülizêÁûed wôh s¯%d\n", 
ªt_code
);

94 
exô_i_myr2_ªgi°î_libi2c_•i_bus
;

97 
exô_i_myr2_ªgi°î_libi2c_•i_bus
:

99  
ªt_code
;

100 
	}
}

103 *
	$POSIX_Inô
 (*
¨gs
)

105 
	`UNUSED
(
¨gs
);

106 
uöt32_t
 
Êﬂtög_©ribuã
 = 
RTEMS_LOCAL
;

107 
πems_«me
 
èsk_«me
;

108 
πems_°©us_code
 
°©us
;

109 
πems_id
 
èsk_id
;

111 i‡(
	`i_öôClocksAndMem‹y
()) {

112 
	`¥ötf
("FailedÅo initialize clocks.\n");

116 if(
	`i_UsbFœshîInô
() != 0)

118 
	`¥ötf
("FailedÅo initialize UsbFlashLoader system configuration.\n");

122 i‡(
	`i_UsbFœshîSèπ
() != 0)

124 
	`¥ötf
("\n\nUSB Flasher Start failed!\n\n\n");

128 i‡(
	`i_myr2_ªgi°î_libi2c_•i_bus
(Ë!
RTEMS_SUCCESSFUL
)

130 
	`¥ötf
("FailedÅo initialize i2cÑegisters.\n");

134 
èsk_«me
 = 
	`πems_buûd_«me
('B', 'L', 'N', 'K');

136 
°©us
 = 
	`πems_èsk_¸óã
(
èsk_«me
, 2, 
RTEMS_MINIMUM_STACK_SIZE
,

137 
	`RTEMS_INTERRUPT_LEVEL
(0),

138 
Êﬂtög_©ribuã
,

139 &
èsk_id
);

141 i‡(
°©us
 !
RTEMS_SUCCESSFUL
) {

142 
	`¥ötf
("πems_èsk_¸óã faûed wôh %d\n", 
°©us
);

146 
	`πems_èsk_°¨t
(
èsk_id
, 
blök_èsk
, (
uöt32_t
)
NULL
);

149 
	`πems_èsk_wake_a·î
(1000);

152 
	`exô
(0);

153 
	}
}

	@Demo/UsbFirmwareUpdate/ImageProcApp/leon/rtems_config.h

8 #i‚de‡
RTEMS_CONFIG_H_


9 
	#RTEMS_CONFIG_H_


	)

13 
	~"ÁèlExãnsi⁄.h
"

18 #i‡
deföed
(
__RTEMS__
)

20 #i‡!
deföed
 (
__CONFIG__
)

21 
	#__CONFIG__


	)

24 
	#CONFIGURE_INIT


	)

26 #i‚de‡
RTEMS_POSIX_API


27 
	#RTEMS_POSIX_API


	)

30 
	#CONFIGURE_MICROSECONDS_PER_TICK
 1000

	)

32 
	#CONFIGURE_TICKS_PER_TIMESLICE
 50

	)

36 
	#CONFIGURE_APPLICATION_NEEDS_CLOCK_DRIVER


	)

38 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

40 
	#CONFIGURE_MINIMUM_TASK_STACK_SIZE
 (8192)

	)

42 
	#CONFIGURE_MAXIMUM_TASKS
 20

	)

44 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 5

	)

46 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 8

	)

48 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 8

	)

50 
	#CONFIGURE_MAXIMUM_POSIX_SEMAPHORES
 8

	)

52 
	#CONFIGURE_MAXIMUM_POSIX_MESSAGE_QUEUES
 8

	)

54 
	#CONFIGURE_MAXIMUM_POSIX_TIMERS
 4

	)

56 
	#CONFIGURE_MAXIMUM_TIMERS
 4

	)

58 
	#CONFIGURE_USE_IMFS_AS_BASE_FILESYSTEM


	)

60 
	#CONFIGURE_FILESYSTEM_DOSFS


	)

62 
	#CONFIGURE_MAXIMUM_DRIVERS
 10

	)

64 
	#CONFIGURE_MAXIMUM_DEVICES
 10

	)

66 
	#CONFIGURE_MAXIMUM_SEMAPHORES
 (4 * 
RTEMS_DOSFS_SEMAPHORES_PER_INSTANCE
)

	)

68 
	#CONFIGURE_LIBIO_MAXIMUM_FILE_DESCRIPTORS
 30

	)

70 
	#CONFIGURE_APPLICATION_NEEDS_LIBBLOCK


	)

72 
	#CONFIGURE_POSIX_INIT_TASKS_TABLE


	)

74 
	#CONFIGURE_MAXIMUM_USER_EXTENSIONS
 1

	)

76 
	#CONFIGURE_INITIAL_EXTENSIONS
 { .
Áèl
 = 
F©Æ_exãnsi⁄
 }

	)

78 *
POSIX_Inô
 (*
¨gs
);

80 
	~<πems/c⁄fdefs.h
>

	@Demo/UsbFirmwareUpdate/ImageProcApp/leon/system.h

8 #i‚de‡
_SYS_H


9 
	#_SYS_H


	)

11 
	~<πems.h
>

12 
	~<öây≥s.h
>

13 
	~<mv_ty≥s.h
>

15 #ifde‡
__˝lu•lus


22 
πems_èsk
 
blök_èsk
(
πems_èsk_¨gumít
 
unu£d
);

30 #ifde‡
__˝lu•lus


	@Demo/UsbFirmwareUpdate/UsbLoaderApp/leon/app_config.c

11 
	~<°dio.h
>

12 
	~<OsDrvC¥.h
>

13 
	~<DrvShaveL2Cache.h
>

14 
	~"≠p_c⁄fig.h
"

19 
	#L2CACHE_CFG
 (
SHAVE_L2CACHE_NORMAL_MODE
)

	)

22 
	#CLOCKS_MIPICFG
 (
AUX_CLK_MASK_MIPI_ECFG
 | 
AUX_CLK_MASK_MIPI_CFG
)

	)

32 c⁄° 
tyAuxClkDividîCfg
 
	gauxClk
[] =

35 .
auxClockE«bÀMask
 = 
AUX_CLK_MASK_USB_CTRL_SUSPEND_CLK
,

36 .
	gauxClockSour˚
 = 
CLK_SRC_PLL0
,

37 .
	gauxClockDivNumî©‹
 = 1,

38 .
	gauxClockDivDíomö©‹
 = 24

41 .
	gauxClockE«bÀMask
 = 
AUX_CLK_MASK_USB_PHY_EXTREFCLK
,

42 .
	gauxClockSour˚
 = 
CLK_SRC_PLL0
,

43 .
	gauxClockDivNumî©‹
 = 1,

44 .
	gauxClockDivDíomö©‹
 = 24

47 .
	gauxClockE«bÀMask
 = 
AUX_CLK_MASK_USB_PHY_REF_ALT_CLK
,

48 .
	gauxClockSour˚
 = 
CLK_SRC_PLL0
,

49 .
	gauxClockDivNumî©‹
 = 1,

50 .
	gauxClockDivDíomö©‹
 = 24

53 .
	gauxClockE«bÀMask
 = 
AUX_CLK_MASK_USB_CTRL_REF_CLK
,

54 .
	gauxClockSour˚
 = 
CLK_SRC_PLL0
,

55 .
	gauxClockDivNumî©‹
 = 1,

56 .
	gauxClockDivDíomö©‹
 = 24

59 .
	gauxClockE«bÀMask
 = 
AUX_CLK_MASK_USB_CTRL_SUSPEND_CLK
,

60 .
	gauxClockSour˚
 = 
CLK_SRC_PLL0
,

61 .
	gauxClockDivNumî©‹
 = 1,

62 .
	gauxClockDivDíomö©‹
 = 24

70 
v_blocksRe£tSûic⁄S≥cific
();

85 
ölöe
 
	$v_blocksRe£tSûic⁄S≥cific
()

88 
	`OsDrvC¥SysDevi˚A˘i⁄
(
SIPP_DOMAIN
, 
ASSERT_RESET
, -1ULL);

89 
	`OsDrvC¥SysDevi˚A˘i⁄
(
UPA_DOMAIN
, 
ASSERT_RESET
, -1ULL);

90 
	`OsDrvC¥SysDevi˚A˘i⁄
(
MSS_DOMAIN
, 
ASSERT_RESET
, -1ULL);

93 
	`DrvC¥SysDevi˚A˘i⁄
(
CSS_DOMAIN
, 
ASSERT_RESET
, ()(-1ULL ^ 
DEFAULT_CORE_CSS_DSS_CLOCKS
));

96 
	`OsDrvC¥PowîTu∫OffI¶™d
(
POWER_ISLAND_SHAVE_0
);

97 
	`OsDrvC¥PowîTu∫OffI¶™d
(
POWER_ISLAND_SHAVE_1
);

98 
	`OsDrvC¥PowîTu∫OffI¶™d
(
POWER_ISLAND_SHAVE_2
);

99 
	`OsDrvC¥PowîTu∫OffI¶™d
(
POWER_ISLAND_SHAVE_3
);

100 
	`OsDrvC¥PowîTu∫OffI¶™d
(
POWER_ISLAND_SHAVE_4
);

101 
	`OsDrvC¥PowîTu∫OffI¶™d
(
POWER_ISLAND_SHAVE_5
);

102 
	`OsDrvC¥PowîTu∫OffI¶™d
(
POWER_ISLAND_SHAVE_6
);

103 
	`OsDrvC¥PowîTu∫OffI¶™d
(
POWER_ISLAND_SHAVE_7
);

104 
	`OsDrvC¥PowîTu∫OffI¶™d
(
POWER_ISLAND_SHAVE_8
);

105 
	`OsDrvC¥PowîTu∫OffI¶™d
(
POWER_ISLAND_SHAVE_9
);

106 
	`OsDrvC¥PowîTu∫OffI¶™d
(
POWER_ISLAND_SHAVE_10
);

107 
	`OsDrvC¥PowîTu∫OffI¶™d
(
POWER_ISLAND_SHAVE_11
);

109 #ifde‡
MA2100


110 
	`OsDrvC¥PowîTu∫OffI¶™d
(
POWER_ISLAND_MSS_ANALOG
);

111 
	`OsDrvC¥PowîTu∫OffI¶™d
(
POWER_ISLAND_MSS_DIGITAL
);

113 
	`OsDrvC¥PowîTu∫OffI¶™d
(
POWER_ISLAND_MSS_CPU
);

114 
	`OsDrvC¥PowîTu∫OffI¶™d
(
POWER_ISLAND_MSS_AMC
);

115 
	`OsDrvC¥PowîTu∫OffI¶™d
(
POWER_ISLAND_MSS_SIPP
);

117 
	}
}

125 
	$i_öôClocksAndMem‹y
()

131 
ªt_code
 = 0;

134 i‡((
ªt_code
 = ()
	`OsDrvC¥Inô
()Ë!
OS_MYR_DRV_SUCCESS
)

136 
	`¥ötf
("Eº‹: OsDrvC¥Inô(ËFAILED, wôhÉº‹ code: %d\n", 
ªt_code
);

137  
ªt_code
;

141 i‡((
ªt_code
 = ()
	`OsDrvC¥O≥n
()Ë!
OS_MYR_DRV_SUCCESS
)

143 
	`¥ötf
("Eº‹: OsDrvC¥O≥n(ËFAILED, wôhÉº‹ code: %d\n", 
ªt_code
);

144  
ªt_code
;

148 i‡((
ªt_code
 = ()
	`OsDrvC¥AuxClockAºayC⁄fig
(
auxClk
)Ë!
OS_MYR_DRV_SUCCESS
)

150 
	`¥ötf
("Eº‹: OsDrvC¥AuxClockAºayC⁄fig(ËFAILED, wôhÉº‹ code: %d\n", 
ªt_code
);

151  
ªt_code
;

155 
	`v_blocksRe£tSûic⁄S≥cific
();

157  (
ªt_code
);

158 
	}
}

	@Demo/UsbFirmwareUpdate/UsbLoaderApp/leon/app_config.h

9 #i‚de‡
_APP_CONFIG_H_


10 
	#_APP_CONFIG_H_


	)

14 
	~"mv_ty≥s.h
"

15 
	~"OsDrvC¥Deföes.h
"

19 
	#DEFAULT_APP_CLOCK_KHZ
 480000

	)

20 
	#DEFAULT_OSC_CLOCK_KHZ
 12000

	)

31 
i_öôClocksAndMem‹y
();

	@Demo/UsbFirmwareUpdate/UsbLoaderApp/leon/main.c

11 
	~<°dlib.h
>

12 
	~<°dio.h
>

13 
	~<πems.h
>

14 
	~<πems/b•Io.h
>

15 
	~"πems_c⁄fig.h
"

16 
	~"mv_ty≥s.h
"

17 
	~"•i_i2c_c⁄fig.h
"

18 
	~"≠p_c⁄fig.h
"

19 
	~"sy°em.h
"

21 
	~"OsDrvUsbPhy.h
"

22 
	~"usbpumpdebug.h
"

23 
	~"usbpump_≠∂iˇti⁄_πems_≠i.h
"

27 #i‚de‡
DISABLE_LEON_DCACHE


28 
	#USBPUMP_MDK_CACHE_ENABLE
 0

	)

30 
	#USBPUMP_MDK_CACHE_ENABLE
 1

	)

36 
tFœshP¨ams
 
	gÊash_∑øms
;

38 
__©åibuã__
((
£˘i⁄
(".ddr_dúe˘.bss"))Ë
	gsg_D©aPump_Mem‹yPoﬁ
[(512 * 1024) / 4];

40 
USBPUMP_APPLICATION_RTEMS_CONFIGURATION
 
	gsg_D©aPump_AµC⁄fig
 =

41 
USBPUMP_APPLICATION_RTEMS_CONFIGURATION_INIT_V1
(

43  
sg_D©aPump_Mem‹yPoﬁ
,

44  (
sg_D©aPump_Mem‹yPoﬁ
),

48  
NULL
,

49  
NULL
,

50  
USBPUMP_MDK_CACHE_ENABLE
,

51  3 | 
UDMASK_PROTO
 | 
__TMS_UDMASK_ENTRY


55 
u8
 
NDfuDemo_FœshRegi⁄
[];

64 
	$i_Sy°emInô
()

66 
ªt_vÆ
 = 0;

67 if((
ªt_vÆ
 = 
	`i_öôClocksAndMem‹y
()) != 0)

69 
	`¥ötf
("Inô clockánd mem‹y faûed wôhÉº‹ code: %d", 
ªt_vÆ
);

70 
exô_Sy°emInô
;

73 
	`v_myr2_•i_ã°_pö_c⁄fig
();

75 if((
ªt_vÆ
 = 
	`i_myr2_ªgi°î_libi2c_•i_bus
()) != 0)

77 
	`¥ötf
("FaûedÅÿöôülizêbu†‹ devi˚†. F©Æ ERROR: %d !!! \n", 
ªt_vÆ
);

78 
exô_Sy°emInô
;

81 
exô_Sy°emInô
:

82  (
ªt_vÆ
);

83 
	}
}

85 
πems_èsk
 
	$Inô
(
πems_èsk_¨gumít
 
¨gumítx
)

87 
	`UNUSED
(
¨gumítx
);

89 
sc
 = 0;

91 i‡((
sc
 = 
	`i_Sy°emInô
()) != 0)

93 
exô_Inô
;

96 
	`¥ötf
("\n");

97 
	`¥ötf
("RTEMS OS Started\n");

99 
osDrvUsbPhyP¨am_t
 
öôP¨am
 =

101 .
íabÀOtgBlock
 = 
USB_PHY_OTG_DISABLED
,

102 .
u£Exã∫ÆClock
 = 
USB_PHY_USE_EXT_CLK
,

103 .
fSñ
 = 
USB_REFCLK_20MHZ
,

104 .
ªfClkSñ0
 = 
USB_SUPER_SPEED_CLK_CONFIG
,

105 .
f‹˚HsO∆y
 = 
USB_PHY_HS_ONLY_OFF


108 
Êash_∑øms
.
devName
 = 
SPI_BUS_NAME
 "." 
SPI_FLASH_NAME
;

109 
Êash_∑øms
.
imgId
 = 0;

110 
Êash_∑øms
.
wrôeImg
 = 
FALSE
;

111 
Êash_∑øms
.
öBuff
 = &
NDfuDemo_FœshRegi⁄
;

112 
Êash_∑øms
.
outBuff
 = &
NDfuDemo_FœshRegi⁄
;

115 i‡(
	`Êash_execuã
(&
Êash_∑øms
))

118 
	`¥ötf
("No Application in flash! Waiting for update...\n");

120 
	`OsDrvUsbPhyInô
(&
öôP¨am
);

122 i‡(!
	`UsbPump_Rãms_D©aPump_Sèπup
(&
sg_D©aPump_AµC⁄fig
))

124 
	`¥ötf
("\n\nUPF_DataPump_Startup() failed!\n\n\n");

128 
exô_Inô
:

130 
	`πems_èsk_dñëe
(
RTEMS_SELF
);

131 
	}
}

	@Demo/UsbFirmwareUpdate/UsbLoaderApp/leon/ndfuapplib.h

30 #i‚de‡
_NDFUAPPLIB_H_


31 
	#_NDFUAPPLIB_H_


	)

33 
	~"u∂©f‹m.h
"

34 
	~"usbpum≥nv.h
"

35 
	~"uevíäode.h
"

36 
	~"uˇŒback.h
"

37 
	~"usbio˘l_dow∆ﬂd.h
"

45 
	#__TMS_NDFUDEMO_TAG_RAMLOAD
 
	`__TMS_UHIL_MEMTAG
('D','n','l','d')

	)

47 
	#__TMS_NDFUDEMO_NAME_RAMLOAD
 "ømlﬂd.osdrivî.mcci.com"

	)

56 
__TMS_TYPE_DEF_STRUCT
(
NDFUDEMO_RAMLOAD
);

57 
	$__TMS_STRUCTNAME
(
NDFUDEMO_RAMLOAD
)

63 
__TMS_USBPUMP_OBJECT_CONTENTS__STRUCT
;

69 
__TMS_PUSBPUMP_OBJECT_HEADER
 
uøm_pDfuFnObje˘
;

74 
__TMS_PUDEVICE
 
uøm_pDevi˚
;

75 
__TMS_PUPLATFORM
 
uøm_pPœtf‹m
;

77 
__TMS_ULONG
 
uøm_Fœgs
;

78 
__TMS_USBPUMP_DOWNLOAD_CLIENT_STATE
 
uøm_Sèã
;

79 
__TMS_UCHAR
 
uøm_Sètus
;

81 
__TMS_UEVENTNODE
 
uøm_Devi˚EvítNode
;

82 
__TMS_ULONG
 
uøm_TmrId
;

83 
__TMS_UINT8
 
uøm_SåögId
;

84 
__TMS_UINT8
 
uøm_bI¡îÁ˚
;

85 
__TMS_UINT8
 
uøm_bA…î«ãSëtög
;

88 
__TMS_UINT8
 * 
uøm_pSrcBuf
;

89 
__TMS_UINT8
 * 
uøm_pD°Buf
;

90 
__TMS_BYTES
 
uøm_nByãs
;

92 
__TMS_UINT32
 
uøm_CrcAcc
;

95 
__TMS_UINT8
 * 
uøm_pRegi⁄
;

96 
__TMS_BYTES
 
uøm_nByãsRegi⁄
;

97 
	}
};

106 
__TMS_USBPUMP_DOWNLOAD_DEVICE_MODE
 
gk_NDfuDemo_Devi˚Mode
;

107 
__TMS_USBPUMP_DOWNLOAD_DEVICE_MODE
 
gk_NDfuDemo_NextDevi˚Mode
;

115 
__TMS_BEGIN_DECLS


117 
__TMS_BOOL
 
NDfuDemo_Cª©eRamLﬂd
(

118 
__TMS_PUPLATFORM
 ,

119 
__TMS_PUSBPUMP_OBJECT_HEADER
 ,

120 
__TMS_PNDFUDEMO_RAMLOAD
 *

123 
__TMS_BOOL
 
NDfuDemo_Id2Regi⁄
(

124 
__TMS_UDEVICE
 * ,

125 
__TMS_UINT8
 ,

126 
__TMS_UINT8
 ,

127 
__TMS_UINT8
 ,

128 
__TMS_BYTES
 * ,

129 
__TMS_UINT8
 **

132 
	g__TMS_END_DECLS


141 #i‡!
__TMS_CLOAKED_NAMES_ONLY


142 
	#NDFUDEMO_TAG_RAMLOAD
 \

143 
__TMS_NDFUDEMO_TAG_RAMLOAD


	)

144 
	#NDFUDEMO_NAME_RAMLOAD
 \

145 
__TMS_NDFUDEMO_NAME_RAMLOAD


	)

	@Demo/UsbFirmwareUpdate/UsbLoaderApp/leon/ndfudemo_appinit.c

29 
	~"usb≠pöô.h
"

30 
	~"usbpumpobje˘≠i.h
"

31 
	~"usbpum¥oŸ.h
"

34 
	~"¥Ÿ⁄dfu.h
"

35 
	~"ndfucfg.h
"

38 
	~"ndfu≠∂ib.h
"

49 
	#EXTERN_USBRC_ROOTTABLE
(
NAME
) \

50 
CONST
 
USBRC_ROOTTABLE
 
NAME
;

	)

52 #ifde‡
DESCRIPTOR_ROOT_0


53 
	$EXTERN_USBRC_ROOTTABLE
(
DESCRIPTOR_ROOT_0
)

55 #ifde‡
DESCRIPTOR_ROOT_1


56 
	$EXTERN_USBRC_ROOTTABLE
(
DESCRIPTOR_ROOT_1
)

58 #ifde‡
DESCRIPTOR_ROOT_2


59 
	$EXTERN_USBRC_ROOTTABLE
(
DESCRIPTOR_ROOT_2
)

61 #ifde‡
DESCRIPTOR_ROOT_3


62 
	$EXTERN_USBRC_ROOTTABLE
(
DESCRIPTOR_ROOT_3
)

64 #ifde‡
DESCRIPTOR_ROOT_4


65 
	$EXTERN_USBRC_ROOTTABLE
(
DESCRIPTOR_ROOT_4
)

67 #ifde‡
DESCRIPTOR_ROOT_5


68 
	$EXTERN_USBRC_ROOTTABLE
(
DESCRIPTOR_ROOT_5
)

70 #ifde‡
DESCRIPTOR_ROOT_6


71 
	$EXTERN_USBRC_ROOTTABLE
(
DESCRIPTOR_ROOT_6
)

73 #ifde‡
DESCRIPTOR_ROOT_7


74 
	$EXTERN_USBRC_ROOTTABLE
(
DESCRIPTOR_ROOT_7
)

76 #ifde‡
DESCRIPTOR_ROOT_8


77 
	$EXTERN_USBRC_ROOTTABLE
(
DESCRIPTOR_ROOT_8
)

79 #ifde‡
DESCRIPTOR_ROOT_9


80 
	$EXTERN_USBRC_ROOTTABLE
(
DESCRIPTOR_ROOT_9
)

82 #i‚def 
DESCRIPTOR_ROOT_0


83 #i‚de‡
DESCRIPTOR_ROOT_1


84 #i‚de‡
DESCRIPTOR_ROOT_2


85 #i‚de‡
DESCRIPTOR_ROOT_3


86 #i‚de‡
DESCRIPTOR_ROOT_4


87 #i‚de‡
DESCRIPTOR_ROOT_5


88 #i‚de‡
DESCRIPTOR_ROOT_6


89 #i‚de‡
DESCRIPTOR_ROOT_7


90 #i‚de‡
DESCRIPTOR_ROOT_8


91 #i‚de‡
DESCRIPTOR_ROOT_9


92 
	$EXTERN_USBRC_ROOTTABLE
(
gk_UsbDes¸ùt‹RoŸ
)

105 
USB_DATAPUMP_APPLICATION_INIT_VECTOR_FINISH_FN
 
NDfuDemoI_AµInô_Ve˘‹Föish
;

107 
VOID
 
	`NDfuDemo_Clõ¡Cª©e
(
UPLATFORM
 *
pPœtf‹m
);

123 
	`USTATESWITCH_NDFU_DECLARE_ALLSTATES_V1
(
NDfuDemo
);

126 
CONST
 
UPROTO_NDFU_CONFIG
 
NDfuC⁄fig
 =

127 
	`UPROTO_NDFU_CONFIG_INIT_V2
(

128  &
NDfuDemo_kAŒSèãSwôch
,

129  &
gk_NDfuDemo_Devi˚Mode
,

130  
FALSE
,

131  
FALSE
,

140 
CONST
 
USBPUMP_PROTOCOL_INIT_NODE
 
InôNodes
[] =

142 
	`USBPUMP_PROTOCOL_INIT_NODE_INIT_V1
( \

144  
USB_bI¡îÁ˚Cœss_Dfu
, \

145  
USB_bI¡îÁ˚SubCœss_Dfu
, \

149  
NDfu_PrŸocﬁProbe
, \

150  
NDfu_PrŸocﬁCª©e
, \

151  &
NDfuC⁄fig
 \

153 
	}
};

156 
CONST
 
USBPUMP_PROTOCOL_INIT_NODE_VECTOR
 
	gInôHódî
 =

157 
USBPUMP_PROTOCOL_INIT_NODE_VECTOR_INIT_V1
(

158  
InôNodes
,

159  
NULL
,

160  
NULL


164 
	#INIT_VECTOR_NODE
(
a__UsbDes¸ùt‹RoŸ
) \

165 
	`USB_DATAPUMP_APPLICATION_INIT_VECTOR_INIT_V2
( \

166  &
a__UsbDes¸ùt‹RoŸ
, \

168 
UDMASK_ANY
 | 
UDMASK_ERRORS
, \

169  
NULL
, \

171 
UsbPump_GíîicAµliˇti⁄Inô_PrŸocﬁs
, \

172  &
InôHódî
 \

173 )

	)

181 
CONST
 
USB_DATAPUMP_APPLICATION_INIT_VECTOR
 
	gUsbPumpAµliˇti⁄InôVe˘‹
[] =

183 #ifde‡
DESCRIPTOR_ROOT_0


184 
INIT_VECTOR_NODE
(
DESCRIPTOR_ROOT_0
),

186 #ifde‡
DESCRIPTOR_ROOT_1


187 
INIT_VECTOR_NODE
(
DESCRIPTOR_ROOT_1
),

189 #ifde‡
DESCRIPTOR_ROOT_2


190 
INIT_VECTOR_NODE
(
DESCRIPTOR_ROOT_2
),

192 #ifde‡
DESCRIPTOR_ROOT_3


193 
INIT_VECTOR_NODE
(
DESCRIPTOR_ROOT_3
),

195 #ifde‡
DESCRIPTOR_ROOT_4


196 
INIT_VECTOR_NODE
(
DESCRIPTOR_ROOT_4
),

198 #ifde‡
DESCRIPTOR_ROOT_5


199 
INIT_VECTOR_NODE
(
DESCRIPTOR_ROOT_5
),

201 #ifde‡
DESCRIPTOR_ROOT_6


202 
INIT_VECTOR_NODE
(
DESCRIPTOR_ROOT_6
),

204 #ifde‡
DESCRIPTOR_ROOT_7


205 
INIT_VECTOR_NODE
(
DESCRIPTOR_ROOT_7
),

207 #ifde‡
DESCRIPTOR_ROOT_8


208 
INIT_VECTOR_NODE
(
DESCRIPTOR_ROOT_8
),

210 #ifde‡
DESCRIPTOR_ROOT_9


211 
INIT_VECTOR_NODE
(
DESCRIPTOR_ROOT_9
),

213 #i‚def 
DESCRIPTOR_ROOT_0


214 #i‚de‡
DESCRIPTOR_ROOT_1


215 #i‚de‡
DESCRIPTOR_ROOT_2


216 #i‚de‡
DESCRIPTOR_ROOT_3


217 #i‚de‡
DESCRIPTOR_ROOT_4


218 #i‚de‡
DESCRIPTOR_ROOT_5


219 #i‚de‡
DESCRIPTOR_ROOT_6


220 #i‚de‡
DESCRIPTOR_ROOT_7


221 #i‚de‡
DESCRIPTOR_ROOT_8


222 #i‚de‡
DESCRIPTOR_ROOT_9


223 
INIT_VECTOR_NODE
(
gk_UsbDes¸ùt‹RoŸ
)

236 
CONST
 
USB_DATAPUMP_APPLICATION_INIT_VECTOR_HDR
 
	ggk_UsbPumpAµliˇti⁄InôHdr
 =

237 
USB_DATAPUMP_APPLICATION_INIT_VECTOR_HDR_INIT_V1
(

238 
UsbPumpAµliˇti⁄InôVe˘‹
,

239  
NULL
,

240  
NDfuDemoI_AµInô_Ve˘‹Föish


258 
VOID


259 
	$NDfuDemoI_AµInô_Ve˘‹Föish
(

260 
UPLATFORM
 * 
pPœtf‹m
,

261 
CONST
 
USB_DATAPUMP_APPLICATION_INIT_VECTOR_HDR
 * 
pVecHdr
,

262 
VOID
 * 
pAµInôC⁄ãxt
,

263 
UINT
 
nP‹ts


266 
	`USBPUMP_UNREFERENCED_PARAMETER
(
pVecHdr
);

267 
	`USBPUMP_UNREFERENCED_PARAMETER
(
pAµInôC⁄ãxt
);

268 
	`USBPUMP_UNREFERENCED_PARAMETER
(
nP‹ts
);

270 
	`NDfuDemo_Clõ¡Cª©e
(
pPœtf‹m
);

271 
	}
}

	@Demo/UsbFirmwareUpdate/UsbLoaderApp/leon/ndfudemo_create.c

29 
	~"usbpum∑pi.h
"

30 
	~"ndfu≠∂ib.h
"

31 
	~"u∂©f‹m.h
"

32 
	~"usbpumpobje˘≠i.h
"

33 
	~"¥Ÿ⁄dfu.h
"

34 
	~"usbpum¥oŸ.h
"

45 
VOID
 
NDfuDemo_Clõ¡Cª©e
(
UPLATFORM
 *
pPœtf‹m
);

94 
VOID


95 
	$NDfuDemo_Clõ¡Cª©e
(

96 
UPLATFORM
 *
pPœtf‹m


99 
USBPUMP_OBJECT_ROOT
 * 
CONST
 
pPumpRoŸ
 =

100 
	`UsbPumpObje˘_GëRoŸ
(&
pPœtf‹m
->
upf_Hódî
);

101 
USBPUMP_OBJECT_HEADER
 *
pFun˘i⁄Obje˘
 = 
NULL
;

104 (
pFun˘i⁄Obje˘
 = 
	`UsbPumpObje˘_Enumî©eM©chögNames
(

105 &
pPumpRoŸ
->
Hódî
,

106 
pFun˘i⁄Obje˘
,

107 
USBPUMP_OBJECT_NAME_ENUM_DOWNLOAD


108 )Ë!
NULL
)

110 
	`NDfuDemo_Cª©eRamLﬂd
(

111 
pPœtf‹m
,

112 
pFun˘i⁄Obje˘
,

113 
NULL


116 
	}
}

	@Demo/UsbFirmwareUpdate/UsbLoaderApp/leon/ndfudemo_id2region.c

29 
	~"ndfu≠∂ib.h
"

30 
	~"usbpumpdebug.h
"

31 
	~"sy°em.h
"

42 #i‚def 
USBPUMP_NDFU_FLASH_REGION_SIZE


43 
	#USBPUMP_NDFU_FLASH_REGION_SIZE
 (
APP_MAX_FILE_SIZE
)

	)

46 #i‚def 
USBPUMP_NDFU_EEPROM_REGION_SIZE


47 
	#USBPUMP_NDFU_EEPROM_REGION_SIZE
 (1 * 1024)

	)

75 
UINT8
 
__©åibuã__
((
£˘i⁄
(".ddr.bss"))Ë
	gNDfuDemo_FœshRegi⁄
[
USBPUMP_NDFU_FLASH_REGION_SIZE
];

76 
UINT8
 
__©åibuã__
((
£˘i⁄
(".ddr.bss"))Ë
	gNDfuDemo_EïromRegi⁄
[
USBPUMP_NDFU_EEPROM_REGION_SIZE
];

108 
BOOL
 
	$NDfuDemo_Id2Regi⁄
(

109 
UDEVICE
 * 
pDevi˚
,

110 
UINT8
 
SåögId
,

111 
UINT8
 
bI¡îÁ˚
,

112 
UINT8
 
bA…î«ãSëtög
,

113 
BYTES
 * 
≤Byãs
,

114 
UINT8
 ** 
µRegi⁄


117 
	`USBPUMP_UNREFERENCED_PARAMETER
(
pDevi˚
);

118 
	`USBPUMP_UNREFERENCED_PARAMETER
(
SåögId
);

119 
	`USBPUMP_UNREFERENCED_PARAMETER
(
bI¡îÁ˚
);

121 
bA…î«ãSëtög
)

125 *
µRegi⁄
 = 
NDfuDemo_FœshRegi⁄
;

126 *
≤Byãs
 = (
NDfuDemo_FœshRegi⁄
);

131 *
µRegi⁄
 = 
NDfuDemo_EïromRegi⁄
;

132 *
≤Byãs
 = (
NDfuDemo_EïromRegi⁄
);

136 
	`TTUSB_PRINTF
((

137 
pDevi˚
,

138 
UDMASK_ERRORS
,

141 
bA…î«ãSëtög


144  
FALSE
;

147  
TRUE
;

148 
	}
}

	@Demo/UsbFirmwareUpdate/UsbLoaderApp/leon/ndfudemo_ram.c

28 
	#__TMS_CLOAKED_NAMES_ONLY
 1

	)

30 
	~"udevi˚.h
"

31 
	~"u∂©f‹m≠i.h
"

32 
	~"usbpum∑pi.h
"

33 
	~"usbpum∂ib.h
"

34 
	~"uevíäode.h
"

35 
	~"usbpumpdebug.h
"

36 
	~"usb¥Ÿoöô.h
"

37 
	~"usbpumpobje˘≠i.h
"

38 
	~"usbio˘lcodes.h
"

39 
	~"usbio˘Àdgecodes.h
"

40 
	~"usbpumpio˘œpi.h
"

41 
	~"u°©.h
"

42 
	~"usbdfu10.h
"

43 
	~"u‚≠idow∆ﬂd.h
"

44 
	~"usbio˘l_dow∆ﬂd.h
"

45 
	~"ndfu≠∂ib.h
"

46 
	~"sy°em.h
"

47 
	~"°dio.h
"

59 
	#CRC_CHUNK_SIZE
 (0x80000)

	)

61 
	#TRANSFER_CHUNK_SIZE
 (0x1000)

	)

63 
u8
 
NDfuDemo_FœshRegi⁄
[];

65 
__TMS_UEVENTFN


66 
	gNDfuDemoI_RamLﬂd_Devi˚Evít
;

68 
__TMS_USBPUMP_GET_DEVICEMODE_FN


69 
	gNDfuDemoI_RamLﬂd_Devi˚Mode
;

71 
__TMS_USBPUMP_OBJECT_IOCTL_FN


72 
	gNDfuDemoI_RamLﬂd_Io˘l
;

75 
__TMS_USBPUMP_IOCTL_RESULT


76 
NDfuDemoI_RamLﬂd_A˘iv©e
(

77 
__TMS_NDFUDEMO_RAMLOAD
 *,

78 
__TMS_USBPUMP_IOCTL_EDGE_ACTIVATE_ARG
 *

81 
__TMS_USBPUMP_IOCTL_RESULT


82 
NDfuDemoI_RamLﬂd_Dó˘iv©e
(

83 
__TMS_NDFUDEMO_RAMLOAD
 *,

84 
__TMS_CONST
 
__TMS_USBPUMP_IOCTL_EDGE_DEACTIVATE_ARG
 *

87 
__TMS_USBPUMP_IOCTL_RESULT


88 
NDfuDemoI_RamLﬂd_BusEvít
(

89 
__TMS_NDFUDEMO_RAMLOAD
 *,

90 
__TMS_CONST
 
__TMS_USBPUMP_IOCTL_EDGE_BUS_EVENT_ARG
 *

94 
__TMS_USBPUMP_IOCTL_RESULT


95 
NDfuDemoI_RamLﬂd_SèπTmr
(

96 
__TMS_NDFUDEMO_RAMLOAD
 *,

97 
__TMS_USBPUMP_IOCTL_EDGE_DOWNLOAD_START_TMR_ARG
 *

100 
__TMS_USBPUMP_IOCTL_RESULT


101 
NDfuDemoI_RamLﬂd_O≥nWrôe
(

102 
__TMS_NDFUDEMO_RAMLOAD
 *,

103 
__TMS_USBPUMP_IOCTL_EDGE_DOWNLOAD_OPEN_WRITE_ARG
 *

106 
__TMS_USBPUMP_IOCTL_RESULT


107 
NDfuDemoI_RamLﬂd_Wrôe
(

108 
__TMS_NDFUDEMO_RAMLOAD
 *,

109 
__TMS_USBPUMP_IOCTL_EDGE_DOWNLOAD_WRITE_ARG
 *

112 
__TMS_USBPUMP_IOCTL_RESULT


113 
NDfuDemoI_RamLﬂd_Clo£Wrôe
(

114 
__TMS_NDFUDEMO_RAMLOAD
 *,

115 
__TMS_USBPUMP_IOCTL_EDGE_DOWNLOAD_CLOSE_WRITE_ARG
 *

118 
__TMS_USBPUMP_IOCTL_RESULT


119 
NDfuDemoI_RamLﬂd_O≥nRód
(

120 
__TMS_NDFUDEMO_RAMLOAD
 *,

121 
__TMS_USBPUMP_IOCTL_EDGE_DOWNLOAD_OPEN_READ_ARG
 *

124 
__TMS_USBPUMP_IOCTL_RESULT


125 
NDfuDemoI_RamLﬂd_Ród
(

126 
__TMS_NDFUDEMO_RAMLOAD
 *,

127 
__TMS_USBPUMP_IOCTL_EDGE_DOWNLOAD_READ_ARG
 *

130 
__TMS_USBPUMP_IOCTL_RESULT


131 
NDfuDemoI_RamLﬂd_Clo£Ród
(

132 
__TMS_NDFUDEMO_RAMLOAD
 *,

133 
__TMS_USBPUMP_IOCTL_EDGE_DOWNLOAD_CLOSE_READ_ARG
 *

136 
__TMS_USBPUMP_IOCTL_RESULT


137 
NDfuDemoI_RamLﬂd_M™i„°
(

138 
__TMS_NDFUDEMO_RAMLOAD
 *,

139 
__TMS_USBPUMP_IOCTL_EDGE_DOWNLOAD_MANIFEST_ARG
 *

142 
__TMS_USBPUMP_IOCTL_RESULT


143 
NDfuDemoI_RamLﬂd_Sètus
(

144 
__TMS_NDFUDEMO_RAMLOAD
 *,

145 
__TMS_USBPUMP_IOCTL_EDGE_DOWNLOAD_STATUS_ARG
 *

148 
__TMS_USBPUMP_IOCTL_RESULT


149 
NDfuDemoI_RamLﬂd_Re£t
(

150 
__TMS_NDFUDEMO_RAMLOAD
 *,

151 
__TMS_USBPUMP_IOCTL_EDGE_DOWNLOAD_RESET_ARG
 *

154 
__TMS_USBPUMP_IOCTL_RESULT


155 
NDfuDemoI_RamLﬂd_Re°¨t
(

156 
__TMS_NDFUDEMO_RAMLOAD
 *,

157 
__TMS_USBPUMP_IOCTL_EDGE_DOWNLOAD_RESTART_ARG
 *

188 
__TMS_USBPUMP_DOWNLOAD_DEVICE_MODE
 
	ggk_NDfuDemo_Devi˚Mode
 =

190 
__TMS_USBPUMP_DOWNLOAD_DEVICE_MODE_APP
;

198 
__TMS_USBPUMP_DOWNLOAD_DEVICE_MODE
 
	ggk_NDfuDemo_NextDevi˚Mode
 =

199 
__TMS_USBPUMP_DOWNLOAD_DEVICE_MODE_UNDEFINED
;

205 
__TMS_USBPUMP_DOWNLOAD_CLIENT_STATE
 
	ggk_NDfuDemo_La°Clõ¡Sèã
;

207 
__TMS_UINT8
 
	ggk_NDfuDemo_La°Clõ¡Sètus
;

209 
	gbyãsToSíd
 = 0;

241 
__TMS_BOOL


242 
	$NDfuDemo_Cª©eRamLﬂd
(

243 
__TMS_UPLATFORM
 * 
pPœtf‹m
,

244 
__TMS_USBPUMP_OBJECT_HEADER
 * 
pFun˘i⁄Obje˘
,

245 
__TMS_PNDFUDEMO_RAMLOAD
 * 
µRamLﬂd


248 
__TMS_UDEVICE
 * 
__TMS_CONST
 
pDevi˚
 = 
	`UsbPumpObje˘_GëDevi˚
(

249 
pFun˘i⁄Obje˘


251 
__TMS_NDFUDEMO_RAMLOAD
 * 
__TMS_CONST
 
pRamLﬂd
 =

252 
	`UsbPumpPœtf‹m_MÆloc
(

253 
pPœtf‹m
,

254 (*
pRamLﬂd
)

256 
__TMS_BOOL
 
SètusOK
;

258 
	`__TMS_USBPUMP_UNREFERENCED_PARAMETER
(
µRamLﬂd
);

260 
SètusOK
 = (
pRamLﬂd
 !
__TMS_NULL
);

262 i‡(
SètusOK
)

264 
	`UHIL_fûl
(
pRamLﬂd
, (*pRamLoad), 0);

266 
	`UsbPumpObje˘_Inô
(

267  &
pRamLﬂd
->
Obje˘Hódî
,

268  
pFun˘i⁄Obje˘
,

269  
__TMS_NDFUDEMO_TAG_RAMLOAD
,

270  (*
pRamLﬂd
),

271  
__TMS_NDFUDEMO_NAME_RAMLOAD
,

272  &
pPœtf‹m
->
upf_Hódî
,

273  
NDfuDemoI_RamLﬂd_Io˘l


275 
pRamLﬂd
->
Obje˘Hódî
.
ulDebugFœgs
 = 
pFun˘i⁄Obje˘
->ulDebugFlags;

278 
pRamLﬂd
->
uøm_pDevi˚
 = 
pDevi˚
;

279 
pRamLﬂd
->
uøm_pPœtf‹m
 = 
pPœtf‹m
;

282 
pRamLﬂd
->
uøm_pDfuFnObje˘
 = 
	`UsbPumpObje˘_Fun˘i⁄O≥n
(

283  
pFun˘i⁄Obje˘
,

284  &
pRamLﬂd
->
Obje˘Hódî
,

285  
pRamLﬂd
,

286  
__TMS_NULL


289 
SètusOK
 = (
pRamLﬂd
->
uøm_pDfuFnObje˘
 !
__TMS_NULL
);

292 i‡(
SètusOK
)

294 
__TMS_USBPUMP_IOCTL_RESULT
 
Io˘lResu…
;

296 
Io˘lResu…
 = 
	`UsbFnApiDow∆ﬂd_GëInfoV2
(

297 
pRamLﬂd
->
uøm_pDfuFnObje˘
,

298 &
pRamLﬂd
->
uøm_SåögId
,

299 &
pRamLﬂd
->
uøm_bI¡îÁ˚
,

300 &
pRamLﬂd
->
uøm_bA…î«ãSëtög


303 
SètusOK
 = 
	`__TMS_USBPUMP_IOCTL_SUCCESS
(
Io˘lResu…
);

306 i‡(
SètusOK
)

311 
SètusOK
 = 
	`NDfuDemo_Id2Regi⁄
(

312 
pDevi˚
,

313 
pRamLﬂd
->
uøm_SåögId
,

314 
pRamLﬂd
->
uøm_bI¡îÁ˚
,

315 
pRamLﬂd
->
uøm_bA…î«ãSëtög
,

316 &
pRamLﬂd
->
uøm_nByãsRegi⁄
,

317 &
pRamLﬂd
->
uøm_pRegi⁄


321 i‡(
SètusOK
 && 
pDevi˚
->
udev_bNumC⁄figs
 > 1)

327 
__TMS_USBPUMP_IOCTL_INIT_DEVMODEFN_ARG
 
Arg
;

328 
__TMS_USBPUMP_IOCTL_RESULT
 
Io˘lResu…
;

330 
	`__TMS_USBPUMP_IOCTL_INIT_DEVMODEFN_ARG_SETUP_V1
(

331 &
Arg
,

332 
NDfuDemoI_RamLﬂd_Devi˚Mode
,

333 
pRamLﬂd


336 
Io˘lResu…
 = 
	`UsbPœtf‹mIo˘l
(

337 
pPœtf‹m
,

338 
__TMS_USBPUMP_IOCTL_INIT_DEVMODEFN
,

339 &
Arg
,

340 
__TMS_NULL


342 
SètusOK
 = 
	`__TMS_USBPUMP_IOCTL_SUCCESS
(
Io˘lResu…
);

344 i‡(!
SètusOK
)

346 
	`__TMS_TTUSB_OBJPRINTF
((&
pRamLﬂd
->
Obje˘Hódî
,

347 
__TMS_UDMASK_ERRORS
,

354 i‡(
SètusOK
)

356 
	`UsbAddEvítNode
(

357 &
pDevi˚
->
udev_nŸeq
,

358 &
pRamLﬂd
->
uøm_Devi˚EvítNode
,

359 
NDfuDemoI_RamLﬂd_Devi˚Evít
,

360 
pRamLﬂd


363 
	`__TMS_TTUSB_OBJPRINTF
((&
pRamLﬂd
->
Obje˘Hódî
,

364 
__TMS_UDMASK_ANY
,

367 
pFun˘i⁄Obje˘
->
pName
,

368 
pFun˘i⁄Obje˘
->
In°™˚Numbî


372 i‡(!
SètusOK
)

377 
	`__TMS_TTUSB_OBJPRINTF
((
pFun˘i⁄Obje˘
,

378 
__TMS_UDMASK_ERRORS
,

381 
pFun˘i⁄Obje˘
->
pName
,

382 
pFun˘i⁄Obje˘
->
In°™˚Numbî
,

383 
pFun˘i⁄Obje˘


386 i‡(
pRamLﬂd
 &&ÖRamLﬂd->
uøm_pDfuFnObje˘
)

388 (
__TMS_VOID
Ë
	`UsbPumpObje˘_Fun˘i⁄Clo£
(

389 
pRamLﬂd
->
uøm_pDfuFnObje˘
,

390 &
pRamLﬂd
->
Obje˘Hódî
,

391  
__TMS_NULL


393 
pRamLﬂd
->
uøm_pDfuFnObje˘
 = 
__TMS_NULL
;

396 i‡(
pRamLﬂd
)

401 
	`UsbPumpObje˘_DeInô
(

402 &
pRamLﬂd
->
Obje˘Hódî


405 
	`UsbPumpPœtf‹m_Fªe
(

406 
pPœtf‹m
,

407 
pRamLﬂd
,

408 (*
pRamLﬂd
)

413  
SètusOK
;

414 
	}
}

437 
__TMS_VOID


438 
	$NDfuDemoI_RamLﬂd_Devi˚Evít
(

439 
__TMS_PUDEVICE
 
pDevi˚
,

440 
__TMS_PUEVENTNODE
 
pNode
,

441 
__TMS_UEVENT
 
EvítCode
,

442 
__TMS_PVOID
 
pEvítS≥cificInfo


445 
	`__TMS_USBPUMP_UNREFERENCED_PARAMETER
(
pDevi˚
);

446 
	`__TMS_USBPUMP_UNREFERENCED_PARAMETER
(
pNode
);

448 
	`__TMS_TTUSB_OBJPRINTF
((&
pDevi˚
->
udev_Hódî
,

449 
__TMS_UDMASK_ENTRY
 | 
__TMS_UDMASK_FLOW
,

451 (
__TMS_VOID
 *)
pNode
->
uev_˘x
, 
	`UsbPumpEvít_Name
(
EvítCode
)

454 i‡(
EvítCode
 =
__TMS_UEVENT_RESET
)

456 
__TMS_UEVENTRESET_INFO
 * 
__TMS_CONST
 
pRe£tInfo
 = 
pEvítS≥cificInfo
;

461 i‡((
pRe£tInfo
 !
__TMS_NULL
Ë&&ÖRe£tInfo->
fFöÆ
)

463 
	`__TMS_TTUSB_OBJPRINTF
((&
pDevi˚
->
udev_Hódî
,

464 
__TMS_UDMASK_FLOW
,

469 i‡(
gk_NDfuDemo_NextDevi˚Mode
 !=

470 
__TMS_USBPUMP_DOWNLOAD_DEVICE_MODE_UNDEFINED
)

481 
gk_NDfuDemo_Devi˚Mode
 = 
gk_NDfuDemo_NextDevi˚Mode
;

482 
gk_NDfuDemo_NextDevi˚Mode
 = 
__TMS_USBPUMP_DOWNLOAD_DEVICE_MODE_UNDEFINED
;

484 
	`__TMS_TTUSB_OBJPRINTF
((&
pDevi˚
->
udev_Hódî
,

485 
__TMS_UDMASK_FLOW
,

488 (
gk_NDfuDemo_Devi˚Mode
 =
__TMS_USBPUMP_DOWNLOAD_DEVICE_MODE_APP
) ?

495 
	`__TMS_TTUSB_OBJPRINTF
((&
pDevi˚
->
udev_Hódî
,

496 
__TMS_UDMASK_ENTRY
,

499 
	}
}

533 
__TMS_VOID


534 
	$NDfuDemoI_RamLﬂd_Devi˚Mode
(

535 
__TMS_VOID
 * 
pC⁄ãxt
,

536 
__TMS_USBPUMP_IOCTL_GET_VIDPIDMODE_ARG
 * 
pVidPidMode


539 
	`__TMS_TTUSB_TRACE
(

540 
__TMS_NDFUDEMO_RAMLOAD
 * 
__TMS_CONST
 
pRamLﬂd
 = 
pC⁄ãxt
;

543 
	`__TMS_USBPUMP_TRACE_PARAMETER
(
pC⁄ãxt
);

545 
	`__TMS_TTUSB_OBJPRINTF
((&
pRamLﬂd
->
Obje˘Hódî
,

546 
__TMS_UDMASK_ENTRY
,

562 
gk_NDfuDemo_Devi˚Mode
)

564 
__TMS_USBPUMP_DOWNLOAD_DEVICE_MODE_DFU
:

569 
pVidPidMode
->
sDevi˚Cœss
 = 0;

570 
pVidPidMode
->
sDevi˚SubCœss
 = 0;

571 
pVidPidMode
->
sDevi˚PrŸocﬁ
 = 0;

572 
pVidPidMode
->
idProdu˘
 += 0;

573 
pVidPidMode
->
ulMode
 = 1;

576 
__TMS_USBPUMP_DOWNLOAD_DEVICE_MODE_APP
:

581 
pVidPidMode
->
sDevi˚Cœss
 = 0;

582 
pVidPidMode
->
sDevi˚SubCœss
 = 0;

583 
pVidPidMode
->
sDevi˚PrŸocﬁ
 = 0;

585 
pVidPidMode
->
idProdu˘
 += 1;

586 
pVidPidMode
->
ulMode
 = 2;

590 
	`__TMS_TTUSB_OBJPRINTF
((&
pRamLﬂd
->
Obje˘Hódî
,

591 
__TMS_UDMASK_ERRORS
,

594 
gk_NDfuDemo_Devi˚Mode


599 
	`__TMS_TTUSB_OBJPRINTF
((&
pRamLﬂd
->
Obje˘Hódî
,

600 
__TMS_UDMASK_ENTRY
,

603 
	}
}

660 
__TMS_USBPUMP_IOCTL_RESULT


661 
	$NDfuDemoI_RamLﬂd_Io˘l
(

662 
__TMS_USBPUMP_OBJECT_HEADER
 * 
pObje˘
,

663 
__TMS_USBPUMP_IOCTL_CODE
 
Io˘l
,

664 
__TMS_CONST
 
__TMS_VOID
 * 
pInP¨am
,

665 
__TMS_VOID
 * 
pOutP¨am


668 
__TMS_NDFUDEMO_RAMLOAD
 * 
__TMS_CONST
 
pRamLﬂd
 =

669 
	`__TMS_CONTAINER_OF
(

670 
pObje˘
,

671 
__TMS_NDFUDEMO_RAMLOAD
,

672 
Obje˘Hódî


675 
Io˘l
)

680 
__TMS_USBPUMP_IOCTL_EDGE_ACTIVATE
:

681  
	`NDfuDemoI_RamLﬂd_A˘iv©e
(

682 
pRamLﬂd
,

683 
pOutP¨am


686 
__TMS_USBPUMP_IOCTL_EDGE_DEACTIVATE
:

687  
	`NDfuDemoI_RamLﬂd_Dó˘iv©e
(

688 
pRamLﬂd
,

689 
pInP¨am


692 
__TMS_USBPUMP_IOCTL_EDGE_BUS_EVENT
:

693  
	`NDfuDemoI_RamLﬂd_BusEvít
(

694 
pRamLﬂd
,

695 
pInP¨am


701 
__TMS_USBPUMP_IOCTL_EDGE_DOWNLOAD_START_TMR
:

702  
	`NDfuDemoI_RamLﬂd_SèπTmr
(

703 
pRamLﬂd
,

704 
pOutP¨am


706 
__TMS_USBPUMP_IOCTL_EDGE_DOWNLOAD_OPEN_WRITE
:

707  
	`NDfuDemoI_RamLﬂd_O≥nWrôe
(

708 
pRamLﬂd
,

709 
pOutP¨am


712 
__TMS_USBPUMP_IOCTL_EDGE_DOWNLOAD_WRITE
:

713  
	`NDfuDemoI_RamLﬂd_Wrôe
(

714 
pRamLﬂd
,

715 
pOutP¨am


718 
__TMS_USBPUMP_IOCTL_EDGE_DOWNLOAD_CLOSE_WRITE
:

719  
	`NDfuDemoI_RamLﬂd_Clo£Wrôe
(

720 
pRamLﬂd
,

721 
pOutP¨am


724 
__TMS_USBPUMP_IOCTL_EDGE_DOWNLOAD_OPEN_READ
:

725  
	`NDfuDemoI_RamLﬂd_O≥nRód
(

726 
pRamLﬂd
,

727 
pOutP¨am


730 
__TMS_USBPUMP_IOCTL_EDGE_DOWNLOAD_READ
:

731  
	`NDfuDemoI_RamLﬂd_Ród
(

732 
pRamLﬂd
,

733 
pOutP¨am


736 
__TMS_USBPUMP_IOCTL_EDGE_DOWNLOAD_CLOSE_READ
:

737  
	`NDfuDemoI_RamLﬂd_Clo£Ród
(

738 
pRamLﬂd
,

739 
pOutP¨am


742 
__TMS_USBPUMP_IOCTL_EDGE_DOWNLOAD_MANIFEST
:

743  
	`NDfuDemoI_RamLﬂd_M™i„°
(

744 
pRamLﬂd
,

745 
pOutP¨am


748 
__TMS_USBPUMP_IOCTL_EDGE_DOWNLOAD_STATUS
:

749  
	`NDfuDemoI_RamLﬂd_Sètus
(

750 
pRamLﬂd
,

751 
pOutP¨am


754 
__TMS_USBPUMP_IOCTL_EDGE_DOWNLOAD_RESET
:

755  
	`NDfuDemoI_RamLﬂd_Re£t
(

756 
pRamLﬂd
,

757 
pOutP¨am


760 
__TMS_USBPUMP_IOCTL_EDGE_DOWNLOAD_RESTART
:

761  
	`NDfuDemoI_RamLﬂd_Re°¨t
(

762 
pRamLﬂd
,

763 
pOutP¨am


767  
__TMS_USBPUMP_IOCTL_RESULT_NOT_CLAIMED
;

769 
	}
}

777 
__TMS_USBPUMP_IOCTL_RESULT


778 
	$NDfuDemoI_RamLﬂd_A˘iv©e
(

779 
__TMS_NDFUDEMO_RAMLOAD
 * 
pRamLﬂd
,

780 
__TMS_USBPUMP_IOCTL_EDGE_ACTIVATE_ARG
 * 
pOutArg


783 
	`__TMS_USBPUMP_UNREFERENCED_PARAMETER
(
pOutArg
);

785 
	`__TMS_TTUSB_OBJPRINTF
((&
pRamLﬂd
->
Obje˘Hódî
,

786 
__TMS_UDMASK_ENTRY
,

789 
pRamLﬂd
,

790 
pOutArg
->
pObje˘
,

791 
pOutArg
->
pClõ¡C⁄ãxt


797 i‡(
gk_NDfuDemo_Devi˚Mode
 =
__TMS_USBPUMP_DOWNLOAD_DEVICE_MODE_UNDEFINED
)

799 
	`__TMS_TTUSB_OBJPRINTF
((&
pRamLﬂd
->
Obje˘Hódî
,

800 
__TMS_UDMASK_ERRORS
,

806 i‡(
gk_NDfuDemo_Devi˚Mode
 =
__TMS_USBPUMP_DOWNLOAD_DEVICE_MODE_APP
)

808 
pRamLﬂd
->
uøm_Sèã
 = 
__TMS_USBPUMP_DOWNLOAD_CLIENT_STATE_0_APP_IDLE
;

809 
pRamLﬂd
->
uøm_Sètus
 = 
USB_Dfu_Sètus_OK
;

813 i‡(
gk_NDfuDemo_La°Clõ¡Sèã
 =
__TMS_USBPUMP_DOWNLOAD_CLIENT_STATE_6_DFU_ERROR
)

815 
pRamLﬂd
->
uøm_Sèã
 = 
gk_NDfuDemo_La°Clõ¡Sèã
;

816 
pRamLﬂd
->
uøm_Sètus
 = 
gk_NDfuDemo_La°Clõ¡Sètus
;

819 
gk_NDfuDemo_La°Clõ¡Sèã
 = 
__TMS_USBPUMP_DOWNLOAD_CLIENT_STATE_1_DFU_IDLE
;

823 
pRamLﬂd
->
uøm_Sèã
 = 
__TMS_USBPUMP_DOWNLOAD_CLIENT_STATE_1_DFU_IDLE
;

824 
pRamLﬂd
->
uøm_Sètus
 = 
USB_Dfu_Sètus_OK
;

832 
	`__TMS_TTUSB_OBJPRINTF
((&
pRamLﬂd
->
Obje˘Hódî
,

833 
__TMS_UDMASK_ENTRY
,

837  
__TMS_USBPUMP_IOCTL_RESULT_SUCCESS
;

838 
	}
}

840 
__TMS_USBPUMP_IOCTL_RESULT


841 
	$NDfuDemoI_RamLﬂd_Dó˘iv©e
(

842 
__TMS_NDFUDEMO_RAMLOAD
 * 
pRamLﬂd
,

843 
__TMS_CONST
 
__TMS_USBPUMP_IOCTL_EDGE_DEACTIVATE_ARG
 * 
pInArg


846 
	`__TMS_USBPUMP_API_PARAMETER
(
pRamLﬂd
);

847 
	`__TMS_USBPUMP_UNREFERENCED_PARAMETER
(
pInArg
);

849 
	`__TMS_TTUSB_OBJPRINTF
((&
pRamLﬂd
->
Obje˘Hódî
,

850 
__TMS_UDMASK_ENTRY
,

853 
pRamLﬂd
,

854 
pInArg
->
pObje˘
,

855 
pInArg
->
pClõ¡C⁄ãxt


863 
	`__TMS_TTUSB_OBJPRINTF
((&
pRamLﬂd
->
Obje˘Hódî
,

864 
__TMS_UDMASK_ENTRY
,

868  
__TMS_USBPUMP_IOCTL_RESULT_SUCCESS
;

869 
	}
}

871 
__TMS_USBPUMP_IOCTL_RESULT


872 
	$NDfuDemoI_RamLﬂd_BusEvít
(

873 
__TMS_NDFUDEMO_RAMLOAD
 * 
pRamLﬂd
,

874 
__TMS_CONST
 
__TMS_USBPUMP_IOCTL_EDGE_BUS_EVENT_ARG
 * 
pInArg


877 
	`__TMS_USBPUMP_API_PARAMETER
(
pRamLﬂd
);

879 
	`__TMS_TTUSB_OBJPRINTF
((&
pRamLﬂd
->
Obje˘Hódî
, \

880 
__TMS_UDMASK_ENTRY
, \

884 
pRamLﬂd
, \

885 
pInArg
->
pObje˘
, \

886 
pInArg
->
pClõ¡C⁄ãxt
, \

887 
pInArg
->
EvítCode
, \

888 
	`UsbPumpEvít_Name
(
pInArg
->
EvítCode
), \

889 
pInArg
->
pEvítS≥cificInfo
 \

895 
pInArg
->
EvítCode
)

897 
__TMS_UEVENT_SUSPEND
:

898 
__TMS_UEVENT_L1_SLEEP
:

899 
__TMS_UEVENT_FUNCTION_SUSPEND
:

903 
__TMS_UEVENT_RESUME
:

904 
__TMS_UEVENT_FUNCTION_RESUME
:

908 
__TMS_UEVENT_ATTACH
:

912 
__TMS_UEVENT_DETACH
:

916 
__TMS_UEVENT_RESET
:

927 
	`__TMS_TTUSB_OBJPRINTF
((&
pRamLﬂd
->
Obje˘Hódî
,

928 
__TMS_UDMASK_ENTRY
,

932  
__TMS_USBPUMP_IOCTL_RESULT_SUCCESS
;

933 
	}
}

970 
__TMS_USBPUMP_IOCTL_RESULT


971 
	$NDfuDemoI_RamLﬂd_SèπTmr
(

972 
__TMS_NDFUDEMO_RAMLOAD
 * 
pRamLﬂd
,

973 
__TMS_USBPUMP_IOCTL_EDGE_DOWNLOAD_START_TMR_ARG
 * 
pOutArg


976 
	`__TMS_TTUSB_OBJPRINTF
((&
pRamLﬂd
->
Obje˘Hódî
,

977 
__TMS_UDMASK_ENTRY
,

980 
pRamLﬂd
,

981 
pOutArg
->
pObje˘
,

982 
pOutArg
->
pClõ¡C⁄ãxt


985 
	`__TMS_TTUSB_OBJPRINTF
((&
pRamLﬂd
->
Obje˘Hódî
,

986 
__TMS_UDMASK_FLOW
,

989 
pOutArg
->
TmoInMs
,ÖOutArg->
Id


992 
pRamLﬂd
->
uøm_TmrId
 = 
pOutArg
->
Id
;

994 
	`__TMS_TTUSB_OBJPRINTF
((&
pRamLﬂd
->
Obje˘Hódî
,

995 
__TMS_UDMASK_ENTRY
,

999  
__TMS_USBPUMP_IOCTL_RESULT_SUCCESS
;

1000 
	}
}

1027 
__TMS_USBPUMP_IOCTL_RESULT


1028 
	$NDfuDemoI_RamLﬂd_O≥nWrôe
(

1029 
__TMS_NDFUDEMO_RAMLOAD
 * 
pRamLﬂd
,

1030 
__TMS_USBPUMP_IOCTL_EDGE_DOWNLOAD_OPEN_WRITE_ARG
 * 
pOutArg


1033 
	`__TMS_TTUSB_OBJPRINTF
((&
pRamLﬂd
->
Obje˘Hódî
,

1034 
__TMS_UDMASK_ENTRY
,

1037 
pRamLﬂd
,

1038 
pOutArg
->
pObje˘
,

1039 
pOutArg
->
pClõ¡C⁄ãxt


1042 i‡(
pRamLﬂd
->
uøm_Sèã
 =
__TMS_USBPUMP_DOWNLOAD_CLIENT_STATE_1_DFU_IDLE
)

1047 
pRamLﬂd
->
uøm_pD°Buf
 =ÖRamLﬂd->
uøm_pRegi⁄
;

1051 
pRamLﬂd
->
uøm_Sèã
 = 
__TMS_USBPUMP_DOWNLOAD_CLIENT_STATE_2_DFU_WRITE_IDLE
;

1052 
pRamLﬂd
->
uøm_Sètus
 = 
USB_Dfu_Sètus_OK
;

1059 
pOutArg
->
fReje˘
 = 
__TMS_TRUE
;

1061 
	`__TMS_TTUSB_OBJPRINTF
((&
pRamLﬂd
->
Obje˘Hódî
,

1062 
__TMS_UDMASK_ERRORS
,

1065 
pRamLﬂd
->
uøm_Sèã


1073 
pOutArg
->
NextTmoInMs
 = 5;

1078 
pOutArg
->
Clõ¡Sèã
 = 
pRamLﬂd
->
uøm_Sèã
;

1080 
	`__TMS_TTUSB_OBJPRINTF
((&
pRamLﬂd
->
Obje˘Hódî
,

1081 
__TMS_UDMASK_ENTRY
,

1085  
__TMS_USBPUMP_IOCTL_RESULT_SUCCESS
;

1086 
	}
}

1114 
__TMS_USBPUMP_IOCTL_RESULT


1115 
	$NDfuDemoI_RamLﬂd_Wrôe
(

1116 
__TMS_NDFUDEMO_RAMLOAD
 * 
pRamLﬂd
,

1117 
__TMS_USBPUMP_IOCTL_EDGE_DOWNLOAD_WRITE_ARG
 * 
pOutArg


1120 
	`__TMS_TTUSB_OBJPRINTF
((&
pRamLﬂd
->
Obje˘Hódî
,

1121 
__TMS_UDMASK_ENTRY
,

1124 
pRamLﬂd
,

1125 
pOutArg
->
pObje˘
,

1126 
pOutArg
->
pClõ¡C⁄ãxt


1129 i‡(
pRamLﬂd
->
uøm_Sèã
 =
__TMS_USBPUMP_DOWNLOAD_CLIENT_STATE_2_DFU_WRITE_IDLE
)

1131 
	`__TMS_TTUSB_OBJPRINTF
((&
pRamLﬂd
->
Obje˘Hódî
,

1132 
__TMS_UDMASK_FLOW
,

1136 
pOutArg
->
nByãs
,ÖOutArg->
pBuf


1139 
pRamLﬂd
->
uøm_nByãs
 = 
pOutArg
->
nByãs
;

1140 
pRamLﬂd
->
uøm_pSrcBuf
 = 
pOutArg
->
pBuf
;

1145 
pRamLﬂd
->
uøm_Sèã
 = 
__TMS_USBPUMP_DOWNLOAD_CLIENT_STATE_3_DFU_WRITE_BUSY
;

1148 i‡(
pRamLﬂd
->
uøm_Sèã
 =
__TMS_USBPUMP_DOWNLOAD_CLIENT_STATE_3_DFU_WRITE_BUSY
)

1150 
__TMS_USHORT
 
nByãs
;

1155 
nByãs
 = (
pRamLﬂd
->
uøm_nByãs
 < 
TRANSFER_CHUNK_SIZE
) ?ÖRamLoad->uram_nBytes : TRANSFER_CHUNK_SIZE;

1157 i‡(
pRamLﬂd
->
uøm_pD°Buf
 + 
nByãs
 >

1158 
pRamLﬂd
->
uøm_pRegi⁄
 +ÖRamLﬂd->
uøm_nByãsRegi⁄
)

1160 
pRamLﬂd
->
uøm_Sèã
 = 
__TMS_USBPUMP_DOWNLOAD_CLIENT_STATE_6_DFU_ERROR
;

1161 
pRamLﬂd
->
uøm_Sètus
 = 
USB_Dfu_Sètus_îrADDRESS
;

1163 
pOutArg
->
fReje˘
 = 
__TMS_TRUE
;

1165 
	`__TMS_TTUSB_OBJPRINTF
((&
pRamLﬂd
->
Obje˘Hódî
,

1166 
__TMS_UDMASK_ERRORS
,

1174 
	`__TMS_TTUSB_OBJPRINTF
((&
pRamLﬂd
->
Obje˘Hódî
,

1175 
__TMS_UDMASK_FLOW
,

1179 
nByãs
, 
pRamLﬂd
->
uøm_pSrcBuf


1183 i‡(
	`UHIL_cmpbuf
(
pRamLﬂd
->
uøm_pD°Buf
,ÖRamLﬂd->
uøm_pSrcBuf
, 
nByãs
Ë=
__TMS_FALSE
)

1188 
	`UHIL_˝ybuf
(
pRamLﬂd
->
uøm_pD°Buf
,ÖRamLﬂd->
uøm_pSrcBuf
, 
nByãs
);

1192 
pRamLﬂd
->
uøm_pSrcBuf
 +
nByãs
;

1193 
pRamLﬂd
->
uøm_pD°Buf
 +
nByãs
;

1194 
pRamLﬂd
->
uøm_nByãs
 -
nByãs
;

1195 
byãsToSíd
 +
nByãs
;

1196 i‡(
pRamLﬂd
->
uøm_nByãs
 == 0)

1201 
	`__TMS_TTUSB_OBJPRINTF
((&
pRamLﬂd
->
Obje˘Hódî
,

1202 
__TMS_UDMASK_FLOW
,

1207 
pRamLﬂd
->
uøm_Sèã
 = 
__TMS_USBPUMP_DOWNLOAD_CLIENT_STATE_2_DFU_WRITE_IDLE
;

1216 
pOutArg
->
fReje˘
 = 
__TMS_TRUE
;

1218 
	`__TMS_TTUSB_OBJPRINTF
((&
pRamLﬂd
->
Obje˘Hódî
,

1219 
__TMS_UDMASK_ERRORS
,

1222 
pRamLﬂd
->
uøm_Sèã


1230 
pOutArg
->
NextTmoInMs
 = 5;

1235 
pOutArg
->
Clõ¡Sèã
 = 
pRamLﬂd
->
uøm_Sèã
;

1237 
	`__TMS_TTUSB_OBJPRINTF
((&
pRamLﬂd
->
Obje˘Hódî
,

1238 
__TMS_UDMASK_ENTRY
,

1242  
__TMS_USBPUMP_IOCTL_RESULT_SUCCESS
;

1243 
	}
}

1270 
__TMS_USBPUMP_IOCTL_RESULT


1271 
	$NDfuDemoI_RamLﬂd_Clo£Wrôe
(

1272 
__TMS_NDFUDEMO_RAMLOAD
 * 
pRamLﬂd
,

1273 
__TMS_USBPUMP_IOCTL_EDGE_DOWNLOAD_CLOSE_WRITE_ARG
 * 
pOutArg


1276 
	`__TMS_TTUSB_OBJPRINTF
((&
pRamLﬂd
->
Obje˘Hódî
,

1277 
__TMS_UDMASK_ENTRY
,

1280 
pRamLﬂd
,

1281 
pOutArg
->
pObje˘
,

1282 
pOutArg
->
pClõ¡C⁄ãxt


1285 i‡(
pRamLﬂd
->
uøm_Sèã
 =
__TMS_USBPUMP_DOWNLOAD_CLIENT_STATE_2_DFU_WRITE_IDLE
)

1287 
	`__TMS_TTUSB_OBJPRINTF
((&
pRamLﬂd
->
Obje˘Hódî
,

1288 
__TMS_UDMASK_FLOW
,

1296 
pRamLﬂd
->
uøm_pSrcBuf
 =ÖRamLﬂd->
uøm_pRegi⁄
;

1297 
pRamLﬂd
->
uøm_nByãs
 = 
CRC_CHUNK_SIZE
;

1298 
pRamLﬂd
->
uøm_CrcAcc
 = 
__TMS_USBPUMP_DOWNLOAD_CRC_START
;

1303 
pRamLﬂd
->
uøm_Sèã
 = 
__TMS_USBPUMP_DOWNLOAD_CLIENT_STATE_4_DFU_MANIFEST_BUSY
;

1306 i‡(
pRamLﬂd
->
uøm_Sèã
 =
__TMS_USBPUMP_DOWNLOAD_CLIENT_STATE_3_DFU_WRITE_BUSY
)

1308 
pRamLﬂd
->
uøm_Sèã
 = 
__TMS_USBPUMP_DOWNLOAD_CLIENT_STATE_6_DFU_ERROR
;

1309 
pRamLﬂd
->
uøm_Sètus
 = 
USB_Dfu_Sètus_îrWRITE
;

1311 
pOutArg
->
fReje˘
 = 
__TMS_TRUE
;

1313 
	`__TMS_TTUSB_OBJPRINTF
((&
pRamLﬂd
->
Obje˘Hódî
,

1314 
__TMS_UDMASK_ERRORS
,

1317 
pRamLﬂd
->
uøm_Sèã
,ÖRamLﬂd->
uøm_nByãs


1325 
pOutArg
->
fReje˘
 = 
__TMS_TRUE
;

1327 
	`__TMS_TTUSB_OBJPRINTF
((&
pRamLﬂd
->
Obje˘Hódî
,

1328 
__TMS_UDMASK_ERRORS
,

1331 
pRamLﬂd
->
uøm_Sèã


1339 
pOutArg
->
NextTmoInMs
 = 5;

1344 
pOutArg
->
Clõ¡Sèã
 = 
pRamLﬂd
->
uøm_Sèã
;

1346 
	`__TMS_TTUSB_OBJPRINTF
((&
pRamLﬂd
->
Obje˘Hódî
,

1347 
__TMS_UDMASK_ENTRY
,

1351  
__TMS_USBPUMP_IOCTL_RESULT_SUCCESS
;

1352 
	}
}

1381 
__TMS_USBPUMP_IOCTL_RESULT


1382 
	$NDfuDemoI_RamLﬂd_O≥nRód
(

1383 
__TMS_NDFUDEMO_RAMLOAD
 * 
pRamLﬂd
,

1384 
__TMS_USBPUMP_IOCTL_EDGE_DOWNLOAD_OPEN_READ_ARG
 * 
pOutArg


1387 
	`__TMS_TTUSB_OBJPRINTF
((&
pRamLﬂd
->
Obje˘Hódî
,

1388 
__TMS_UDMASK_ENTRY
,

1391 
pRamLﬂd
,

1392 
pOutArg
->
pObje˘
,

1393 
pOutArg
->
pClõ¡C⁄ãxt


1396 i‡(
pRamLﬂd
->
uøm_Sèã
 =
__TMS_USBPUMP_DOWNLOAD_CLIENT_STATE_1_DFU_IDLE
)

1401 
pRamLﬂd
->
uøm_pSrcBuf
 =ÖRamLﬂd->
uøm_pRegi⁄
;

1402 
pRamLﬂd
->
uøm_nByãs
 =ÖRamLﬂd->
uøm_nByãsRegi⁄
 - 1;

1407 
pRamLﬂd
->
uøm_Sèã
 = 
__TMS_USBPUMP_DOWNLOAD_CLIENT_STATE_5_DFU_READ_BUSY
;

1408 
pRamLﬂd
->
uøm_Sètus
 = 
USB_Dfu_Sètus_OK
;

1415 
pOutArg
->
fReje˘
 = 
__TMS_TRUE
;

1417 
	`__TMS_TTUSB_OBJPRINTF
((&
pRamLﬂd
->
Obje˘Hódî
,

1418 
__TMS_UDMASK_ERRORS
,

1421 
pRamLﬂd
->
uøm_Sèã


1428 
pOutArg
->
Clõ¡Sèã
 = 
pRamLﬂd
->
uøm_Sèã
;

1430 
	`__TMS_TTUSB_OBJPRINTF
((&
pRamLﬂd
->
Obje˘Hódî
,

1431 
__TMS_UDMASK_ENTRY
,

1435  
__TMS_USBPUMP_IOCTL_RESULT_SUCCESS
;

1436 
	}
}

1465 
__TMS_USBPUMP_IOCTL_RESULT


1466 
	$NDfuDemoI_RamLﬂd_Ród
(

1467 
__TMS_NDFUDEMO_RAMLOAD
 * 
pRamLﬂd
,

1468 
__TMS_USBPUMP_IOCTL_EDGE_DOWNLOAD_READ_ARG
 * 
pOutArg


1471 
	`__TMS_TTUSB_OBJPRINTF
((&
pRamLﬂd
->
Obje˘Hódî
,

1472 
__TMS_UDMASK_ENTRY
,

1475 
pRamLﬂd
,

1476 
pOutArg
->
pObje˘
,

1477 
pOutArg
->
pClõ¡C⁄ãxt


1480 i‡(
pRamLﬂd
->
uøm_Sèã
 =
__TMS_USBPUMP_DOWNLOAD_CLIENT_STATE_5_DFU_READ_BUSY
)

1482 
__TMS_USHORT
 
nByãs
;

1489 
nByãs
 = (
pOutArg
->
nMaxByãs
 < 
pRamLﬂd
->
uøm_nByãs
) ?

1490 
pOutArg
->
nMaxByãs
 : 
pRamLﬂd
->
uøm_nByãs
;

1492 
	`__TMS_TTUSB_OBJPRINTF
((&
pRamLﬂd
->
Obje˘Hódî
,

1493 
__TMS_UDMASK_FLOW
,

1496 
nByãs
, 
pRamLﬂd
->
uøm_pSrcBuf


1499 i‡(
nByãs
 < 
pOutArg
->
nMaxByãs
)

1500 
	`__TMS_TTUSB_OBJPRINTF
((&
pRamLﬂd
->
Obje˘Hódî
,

1501 
__TMS_UDMASK_FLOW
,

1506 
	`UHIL_˝ybuf
(
pOutArg
->
pBuf
, 
pRamLﬂd
->
uøm_pSrcBuf
, 
nByãs
);

1507 
pRamLﬂd
->
uøm_pSrcBuf
 +
nByãs
;

1508 
pRamLﬂd
->
uøm_nByãs
 -
nByãs
;

1510 
pOutArg
->
nByãs
 =ÇBytes;

1517 
pOutArg
->
fReje˘
 = 
__TMS_TRUE
;

1519 
	`__TMS_TTUSB_OBJPRINTF
((&
pRamLﬂd
->
Obje˘Hódî
,

1520 
__TMS_UDMASK_ERRORS
,

1523 
pRamLﬂd
->
uøm_Sèã


1530 
pOutArg
->
Clõ¡Sèã
 = 
pRamLﬂd
->
uøm_Sèã
;

1532 
	`__TMS_TTUSB_OBJPRINTF
((&
pRamLﬂd
->
Obje˘Hódî
,

1533 
__TMS_UDMASK_ENTRY
,

1537  
__TMS_USBPUMP_IOCTL_RESULT_SUCCESS
;

1538 
	}
}

1564 
__TMS_USBPUMP_IOCTL_RESULT


1565 
	$NDfuDemoI_RamLﬂd_Clo£Ród
(

1566 
__TMS_NDFUDEMO_RAMLOAD
 * 
pRamLﬂd
,

1567 
__TMS_USBPUMP_IOCTL_EDGE_DOWNLOAD_CLOSE_READ_ARG
 * 
pOutArg


1570 
	`__TMS_TTUSB_OBJPRINTF
((&
pRamLﬂd
->
Obje˘Hódî
,

1571 
__TMS_UDMASK_ENTRY
,

1574 
pRamLﬂd
,

1575 
pOutArg
->
pObje˘
,

1576 
pOutArg
->
pClõ¡C⁄ãxt


1579 i‡(
pRamLﬂd
->
uøm_Sèã
 =
__TMS_USBPUMP_DOWNLOAD_CLIENT_STATE_5_DFU_READ_BUSY
)

1588 
pRamLﬂd
->
uøm_Sèã
 = 
__TMS_USBPUMP_DOWNLOAD_CLIENT_STATE_1_DFU_IDLE
;

1595 
pOutArg
->
fReje˘
 = 
__TMS_TRUE
;

1597 
	`__TMS_TTUSB_OBJPRINTF
((&
pRamLﬂd
->
Obje˘Hódî
,

1598 
__TMS_UDMASK_ERRORS
,

1601 
pRamLﬂd
->
uøm_Sèã


1608 
pOutArg
->
Clõ¡Sèã
 = 
pRamLﬂd
->
uøm_Sèã
;

1610 
	`__TMS_TTUSB_OBJPRINTF
((&
pRamLﬂd
->
Obje˘Hódî
,

1611 
__TMS_UDMASK_ENTRY
,

1615  
__TMS_USBPUMP_IOCTL_RESULT_SUCCESS
;

1616 
	}
}

1643 
__TMS_USBPUMP_IOCTL_RESULT


1644 
	$NDfuDemoI_RamLﬂd_M™i„°
(

1645 
__TMS_NDFUDEMO_RAMLOAD
 * 
pRamLﬂd
,

1646 
__TMS_USBPUMP_IOCTL_EDGE_DOWNLOAD_MANIFEST_ARG
 * 
pOutArg


1649 
__TMS_USBPUMP_IOCTL_RESULT
 
Io˘lResu…
;

1651 
Io˘lResu…
 = 
__TMS_USBPUMP_IOCTL_RESULT_SUCCESS
;

1652 
uöt32_t
 
Êﬂtög_©ribuã
 = 
RTEMS_LOCAL
 | 
RTEMS_FLOATING_POINT
;

1653 
πems_«me
 
èsk_«me
;

1654 
πems_id
 
dfu_èsk_id
;

1655 
πems_°©us_code
 
°©us
;

1657 
	`__TMS_TTUSB_OBJPRINTF
((&
pRamLﬂd
->
Obje˘Hódî
,

1658 
__TMS_UDMASK_ENTRY
,

1661 
pRamLﬂd
,

1662 
pOutArg
->
pObje˘
,

1663 
pOutArg
->
pClõ¡C⁄ãxt


1666 i‡(
pRamLﬂd
->
uøm_Sèã
 =
__TMS_USBPUMP_DOWNLOAD_CLIENT_STATE_4_DFU_MANIFEST_BUSY
)

1668 
__TMS_BYTES
 
nByãs
;

1674 
nByãs
 = (
pRamLﬂd
->
uøm_pSrcBuf
 +ÖRamLﬂd->
uøm_nByãs
 <

1675 
pRamLﬂd
->
uøm_pRegi⁄
 +ÖRamLﬂd->
uøm_nByãsRegi⁄
) ?

1676 
pRamLﬂd
->
uøm_nByãs
 :

1677 (
__TMS_BYTES
)(
pRamLﬂd
->
uøm_pRegi⁄
 +ÖRamLﬂd->
uøm_nByãsRegi⁄
-pRamLﬂd->
uøm_pSrcBuf
);

1679 
Io˘lResu…
 = 
	`UsbFnApiDow∆ﬂd_CÆcCrc
(

1680 
pRamLﬂd
->
uøm_pDfuFnObje˘
,

1681 
pRamLﬂd
->
uøm_pSrcBuf
,

1682 
nByãs
,

1683 &
pRamLﬂd
->
uøm_CrcAcc


1686 i‡(
	`__TMS_USBPUMP_IOCTL_SUCCESS
(
Io˘lResu…
))

1688 
pRamLﬂd
->
uøm_pSrcBuf
 +
nByãs
;

1694 
pOutArg
->
NextTmoInMs
 = 5;

1696 i‡(
pRamLﬂd
->
uøm_pSrcBuf
 ==

1697 
pRamLﬂd
->
uøm_pRegi⁄
 +ÖRamLﬂd->
uøm_nByãsRegi⁄
)

1699 
	`__TMS_TTUSB_OBJPRINTF
((&
pRamLﬂd
->
Obje˘Hódî
,

1700 
__TMS_UDMASK_FLOW
,

1705 
Êash_∑øms
.
size
 = 
byãsToSíd
;

1706 
Êash_∑øms
.
imgId
 = 0;

1707 
Êash_∑øms
.
wrôeImg
 = 1;

1708 
Êash_∑øms
.
öBuff
 = &
NDfuDemo_FœshRegi⁄
;

1709 
Êash_∑øms
.
outBuff
 = &
NDfuDemo_FœshRegi⁄
;

1712 
èsk_«me
 = 
	`πems_buûd_«me
('F', 'T', 'A', '0');

1714 
°©us
 = 
	`πems_èsk_¸óã
(
èsk_«me
, 2, 
RTEMS_MINIMUM_STACK_SIZE
,

1715 
	`RTEMS_INTERRUPT_LEVEL
(0),

1716 
Êﬂtög_©ribuã
,

1717 &
dfu_èsk_id
);

1719 if(
°©us
 !
RTEMS_SUCCESSFUL
) {

1720 
	`¥ötf
("πems_èsk_¸óã faûed wôh %d\n", 
°©us
);

1723 
	`πems_èsk_°¨t
(
dfu_èsk_id
, 
Êash_≠p_èsk
, (
πems_èsk_¨gumít
)&
Êash_∑øms
);

1728 
pRamLﬂd
->
uøm_Sèã
 = 
__TMS_USBPUMP_DOWNLOAD_CLIENT_STATE_1_DFU_IDLE
;

1733 
pRamLﬂd
->
uøm_Sèã
 = 
__TMS_USBPUMP_DOWNLOAD_CLIENT_STATE_6_DFU_ERROR
;

1734 
pRamLﬂd
->
uøm_Sètus
 = 
USB_Dfu_Sètus_îrVERIFY
;

1736 
pOutArg
->
fReje˘
 = 
__TMS_TRUE
;

1738 
	`__TMS_TTUSB_OBJPRINTF
((&
pRamLﬂd
->
Obje˘Hódî
,

1739 
__TMS_UDMASK_ERRORS
,

1750 
pOutArg
->
fReje˘
 = 
__TMS_TRUE
;

1752 
	`__TMS_TTUSB_OBJPRINTF
((&
pRamLﬂd
->
Obje˘Hódî
,

1753 
__TMS_UDMASK_ERRORS
,

1756 
pRamLﬂd
->
uøm_Sèã


1763 
pOutArg
->
Clõ¡Sèã
 = 
pRamLﬂd
->
uøm_Sèã
;

1765 
	`__TMS_TTUSB_OBJPRINTF
((&
pRamLﬂd
->
Obje˘Hódî
,

1766 
__TMS_UDMASK_ENTRY
,

1770  
Io˘lResu…
;

1771 
	}
}

1793 
__TMS_USBPUMP_IOCTL_RESULT


1794 
	$NDfuDemoI_RamLﬂd_Sètus
(

1795 
__TMS_NDFUDEMO_RAMLOAD
 * 
pRamLﬂd
,

1796 
__TMS_USBPUMP_IOCTL_EDGE_DOWNLOAD_STATUS_ARG
 * 
pOutArg


1799 
	`__TMS_TTUSB_OBJPRINTF
((&
pRamLﬂd
->
Obje˘Hódî
,

1800 
__TMS_UDMASK_ENTRY
,

1803 
pRamLﬂd
,

1804 
pOutArg
->
pObje˘
,

1805 
pOutArg
->
pClõ¡C⁄ãxt


1811 
pOutArg
->
Clõ¡Sèã
 = 
pRamLﬂd
->
uøm_Sèã
;

1812 
pOutArg
->
Clõ¡Sètus
 = 
pRamLﬂd
->
uøm_Sètus
;

1813 
pOutArg
->
iSåög
 = 0;

1815 
	`__TMS_TTUSB_OBJPRINTF
((&
pRamLﬂd
->
Obje˘Hódî
,

1816 
__TMS_UDMASK_ENTRY
,

1820  
__TMS_USBPUMP_IOCTL_RESULT_SUCCESS
;

1821 
	}
}

1848 
__TMS_USBPUMP_IOCTL_RESULT


1849 
	$NDfuDemoI_RamLﬂd_Re£t
(

1850 
__TMS_NDFUDEMO_RAMLOAD
 * 
pRamLﬂd
,

1851 
__TMS_USBPUMP_IOCTL_EDGE_DOWNLOAD_RESET_ARG
 * 
pOutArg


1854 
	`__TMS_TTUSB_OBJPRINTF
((&
pRamLﬂd
->
Obje˘Hódî
,

1855 
__TMS_UDMASK_ENTRY
,

1858 
pRamLﬂd
,

1859 
pOutArg
->
pObje˘
,

1860 
pOutArg
->
pClõ¡C⁄ãxt


1863 
gk_NDfuDemo_Devi˚Mode
)

1865 
__TMS_USBPUMP_DOWNLOAD_DEVICE_MODE_APP
 :

1866 
pRamLﬂd
->
uøm_Sèã
 = 
__TMS_USBPUMP_DOWNLOAD_CLIENT_STATE_0_APP_IDLE
;

1869 
__TMS_USBPUMP_DOWNLOAD_DEVICE_MODE_DFU
 :

1870 
pRamLﬂd
->
uøm_Sèã
 = 
__TMS_USBPUMP_DOWNLOAD_CLIENT_STATE_1_DFU_IDLE
;

1874 
pOutArg
->
fReje˘
 = 
__TMS_TRUE
;

1876 
	`__TMS_TTUSB_OBJPRINTF
((&
pRamLﬂd
->
Obje˘Hódî
,

1877 
__TMS_UDMASK_ERRORS
,

1880 
gk_NDfuDemo_Devi˚Mode


1887 
pOutArg
->
Clõ¡Sèã
 = 
pRamLﬂd
->
uøm_Sèã
;

1889 
	`__TMS_TTUSB_OBJPRINTF
((&
pRamLﬂd
->
Obje˘Hódî
,

1890 
__TMS_UDMASK_ENTRY
,

1894  
__TMS_USBPUMP_IOCTL_RESULT_SUCCESS
;

1895 
	}
}

1923 
__TMS_USBPUMP_IOCTL_RESULT


1924 
	$NDfuDemoI_RamLﬂd_Re°¨t
(

1925 
__TMS_NDFUDEMO_RAMLOAD
 * 
pRamLﬂd
,

1926 
__TMS_USBPUMP_IOCTL_EDGE_DOWNLOAD_RESTART_ARG
 * 
pOutArg


1929 
	`__TMS_TTUSB_OBJPRINTF
((&
pRamLﬂd
->
Obje˘Hódî
,

1930 
__TMS_UDMASK_ENTRY
,

1933 
pRamLﬂd
,

1934 
pOutArg
->
pObje˘
,

1935 
pOutArg
->
pClõ¡C⁄ãxt


1948 
gk_NDfuDemo_NextDevi˚Mode
 = 
pOutArg
->
Devi˚Mode
;

1949 
gk_NDfuDemo_La°Clõ¡Sèã
 = 
pRamLﬂd
->
uøm_Sèã
;

1950 
gk_NDfuDemo_La°Clõ¡Sètus
 = 
pRamLﬂd
->
uøm_Sètus
;

1952 
	`__TMS_TTUSB_OBJPRINTF
((&
pRamLﬂd
->
Obje˘Hódî
,

1953 
__TMS_UDMASK_FLOW
,

1956 (
gk_NDfuDemo_NextDevi˚Mode
 =
__TMS_USBPUMP_DOWNLOAD_DEVICE_MODE_APP
) ?

1960 
	`__TMS_TTUSB_OBJPRINTF
((&
pRamLﬂd
->
Obje˘Hódî
,

1961 
__TMS_UDMASK_ENTRY
,

1965  
__TMS_USBPUMP_IOCTL_RESULT_SUCCESS
;

1966 
	}
}

	@Demo/UsbFirmwareUpdate/UsbLoaderApp/leon/rtems_config.h

8 #i‚de‡
RTEMS_CONFIG_H_


9 
	#RTEMS_CONFIG_H_


	)

13 
	~"≠p_c⁄fig.h
"

14 
	~"ÁèlExãnsi⁄.h
"

16 #i‡
deföed
(
__RTEMS__
)

18 #i‡!
deföed
 (
__CONFIG__
)

19 
	#__CONFIG__


	)

25 
	#CONFIGURE_INIT


	)

27 
	#CONFIGURE_MICROSECONDS_PER_TICK
 1000

	)

29 
	#CONFIGURE_TICKS_PER_TIMESLICE
 10

	)

31 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

33 
	#CONFIGURE_APPLICATION_NEEDS_CLOCK_DRIVER


	)

35 
	#CONFIGURE_RTEMS_INIT_TASKS_TABLE


	)

37 
	#CONFIGURE_MINIMUM_TASK_STACK_SIZE
 4096

	)

39 
	#CONFIGURE_MAXIMUM_TASKS
 15

	)

41 
	#CONFIGURE_MAXIMUM_TIMERS
 4

	)

43 
	#CONFIGURE_MAXIMUM_SEMAPHORES
 15

	)

44 
	#CONFIGURE_MAXIMUM_DRIVERS
 8

	)

45 
	#CONFIGURE_MAXIMUM_DEVICES
 8

	)

47 
	#CONFIGURE_LIBIO_MAXIMUM_FILE_DESCRIPTORS
 20

	)

49 
	#CONFIGURE_APPLICATION_NEEDS_ZERO_DRIVER


	)

50 
	#CONFIGURE_APPLICATION_NEEDS_NULL_DRIVER


	)

51 
	#CONFIGURE_APPLICATION_NEEDS_STUB_DRIVER


	)

53 
	#CONFIGURE_MAXIMUM_USER_EXTENSIONS
 1

	)

54 
	#CONFIGURE_INITIAL_EXTENSIONS
 { .
Áèl
 = 
F©Æ_exãnsi⁄
 }

	)

62 
πems_èsk
 
Inô
 (
πems_èsk_¨gumít
 
¨gumítx
);

64 
	~<πems/c⁄fdefs.h
>

72 
BSP_SET_CLOCK
(
DEFAULT_OSC_CLOCK_KHZ
, 
DEFAULT_APP_CLOCK_KHZ
, 1, 1,

73 (
DEFAULT_RTEMS_CSS_LOS_CLOCKS
 | 
DEV_CSS_SPI0
),

74 
DEFAULT_RTEMS_MSS_LRT_CLOCKS
,

78 
BSP_SET_L2C_CONFIG
(1, 
L2C_REPL_LRU
, 0, 
L2C_MODE_WRITE_THROUGH
, 0, 
NULL
);

	@Demo/UsbFirmwareUpdate/UsbLoaderApp/leon/spi_i2c_config.c

12 
	~"mv_ty≥s.h
"

13 
	~"OsDrvC¥.h
"

14 
	~"OsDrvGpio.h
"

15 
	~"OsDrvSpiBus.h
"

16 
	~"OsDrvI2cBus.h
"

17 
	~"•i_i2c_c⁄fig.h
"

18 
	~<SpiFœshN25QDevi˚.h
>

22 
	#SPI_BUS_NAME
 "/dev/•i"

	)

23 
	#SPI_FLASH_NAME
 "Êash"

	)

32 
DECLARE_SPI_BUS_GPIO_SS
(
myr2_•i_0
, 1, 0, 0, 1, 1, 10*1000*1000, 8);

35 
	#INTERRUPTPRIORITY
 8

36 
	#ADDR10BIT
 0

37 
	#PMIC_I2C_ADDRESS
 (0x6C>>1)

	)

40 
DECLARE_I2C_BUS
(
myr2_i2c
, 3, 
I2C_SPEED_SS
, 
ADDR10BIT
, 
INTERRUPTPRIORITY
);

52 
	$v_myr2_•i_ã°_pö_c⁄fig
()

54 
	`DrvGpioModeR™ge
(74, 77, 0 | 
D_GPIO_DIR_OUT
);

55 
	}
}

63 
	$i_myr2_ªgi°î_libi2c_•i_bus
()

65 
ªt_code
 = 
RTEMS_SUCCESSFUL
;

66 
•i0_bu¢o
;

67 
u32
 
•i_Êash_mö‹
;

72 
ªt_code
 = ( )
	`OsDrvLibI2CInôülize
();

73 i‡(
ªt_code
 !–)
RTEMS_SUCCESSFUL
)

75 
	`¥ötf
("πems_libi2c_öôülizêFAILED %d \n", 
ªt_code
);

76 
exô_myr2_ªgi°î_libi2c_•i_bus
;

82 
ªt_code
 = ( )
	`OsDrvLibI2CRegi°îBus
(
SPI_BUS_NAME
,

83 (
πems_libi2c_bus_t
 *)&
myr2_•i_0
);

84 i‡(
ªt_code
 < 0)

86 
	`¥ötf
("CouldÇotÑegisterÅhe bus\n");

87 
exô_myr2_ªgi°î_libi2c_•i_bus
;

89 
•i0_bu¢o
 = 
ªt_code
;

92 
ªt_code
 = ( )
	`OsDrvLibI2CRegi°îDevi˚
(
SPI_FLASH_NAME
,

93 
•i_Êash_N25Q_drivî_des¸ùt‹
,

94 
•i0_bu¢o
, 77);

95 i‡(
ªt_code
 < 0)

97 
	`¥ötf
("CouldÇotÑegisterÅhe spi device\n");

98 
exô_myr2_ªgi°î_libi2c_•i_bus
;

101 
•i_Êash_mö‹
 = 
ªt_code
;

103 if((
ªt_code
 = ( )
	`OsDrvIOInôülize
(
πems_libi2c_maj‹
, 
•i_Êash_mö‹
, 
NULL
)Ë!()
RTEMS_SUCCESSFUL
)

105 
	`¥ötf
("πems_io_öôülizêÁûed wôh s¯%d\n", 
ªt_code
);

106 
exô_myr2_ªgi°î_libi2c_•i_bus
;

109 
exô_myr2_ªgi°î_libi2c_•i_bus
:

110  (
ªt_code
);

111 
	}
}

	@Demo/UsbFirmwareUpdate/UsbLoaderApp/leon/spi_i2c_config.h

13 #i‚de‡
_SPI_I2C_CONFIG_H


14 
	#_SPI_I2C_CONFIG_H


	)

22 
	#L2CACHE_NORMAL_MODE
 (0x6)

23 
	#L2CACHE_CFG
 (
L2CACHE_NORMAL_MODE
)

	)

24 
	#BIGENDIANMODE
 (0x01000786)

	)

34 
v_myr2_•i_ã°_pö_c⁄fig
();

35 
i_myr2_ªgi°î_libi2c_•i_bus
();

	@Demo/UsbFirmwareUpdate/UsbLoaderApp/leon/system.h

16 #i‚de‡
_SYS_H


17 
	#_SYS_H


	)

19 
	~"mv_ty≥s.h
"

20 
	~<πems.h
>

21 
	~<öây≥s.h
>

23 #ifde‡
__˝lu•lus


28 
	#SPI_BUS_NAME
 "/dev/•i"

	)

29 
	#SPI_FLASH_NAME
 "Êash"

	)

32 
	#FLASH_CHIP_SIZE
 (8 * 1024 * 1024)

	)

33 
	#SUBSECTOR_SIZE
 (4096)

	)

36 
	#ALIGN_TO_SUBSECTOR
(
S
Ë((((SË+ (
SUBSECTOR_SIZE
Ë- 1)Ë& ~((SUBSECTOR_SIZEË- 1))

	)

40 
	#VALID_HEADER_MAGIC
 (0xABCD1234)

	)

41 
	#INVALID_HEADER_MAGIC
 (0x00000000)

	)

43 
	#FLAG_APP_EXECUTE
 (1)

	)

44 
	#FLAG_APP_UPDATE
 (0)

	)

46 
	#MAX_APPLIACIONS_IN_FLASH
 (1)

	)

48 
	#LAUNCHER_RESERVED_SIZE
 (512 * 1024)

	)

53 
u32
 
hódî_magic
;

54 
u32
 
≠p_¸c
;

55 
u32
 
boŸImg_off£t
;

56 
u32
 
boŸImg_size
;

57 } 
	ttAµInfo
;

60 
u32
 
execuã_≠p_Êag
;

61 
u32
 
lﬂdî_íåy
;

62 
tAµInfo
 
≠p_öfo
[
MAX_APPLIACIONS_IN_FLASH
];

63 } 
	ttFœshHódî
;

65 
	stFœshP¨ams


67 c⁄° * 
devName
;

68 *
öBuff
;

69 *
outBuff
;

70 
u32
 
off£t
;

71 
u32
 
size
;

72 
u32
 
imgId
;

73 
u32
 
wrôeImg
;

78 
ERR_NONE
 = 0,

79 
ERR_IO_DRV
,

80 
ERR_RW
,

81 
ERR_INV_APP_ID
,

82 
ERR_NO_SPACE
,

83 
ERR_ELF_ENTRY
,

84 
ERR_INV_HEADER
,

85 
ERR_INV_FLAG
,

86 
ERR_MEM
,

87 
ERR_INV_CRC


88 } 
	tbl_îr‹s_t
;

91 
	#APP_MAX_FILE_SIZE
 ((
FLASH_CHIP_SIZE
Ë- (
LAUNCHER_RESERVED_SIZE
))

	)

93 
	#FLAGS_SECTION_OFFSET
 ((
LAUNCHER_RESERVED_SIZE
Ë- 
	`ALIGN_TO_SUBSECTOR
((
tFœshHódî
)))

	)

96 
πems_èsk
 
Êash_≠p_èsk
(
πems_èsk_¨gumít
 
unu£d
);

97 
öt32_t
 
Êash_execuã
(
tFœshP¨ams
 *
p
);

103 
tFœshP¨ams
 
Êash_∑øms
;

105 #ifde‡
__˝lu•lus


	@Demo/UsbFirmwareUpdate/UsbLoaderApp/leon/tasks.c

11 
	~<°dio.h
>

12 
	~<°dlib.h
>

13 
	~"mv_ty≥s.h
"

14 
	~"sy°em.h
"

15 
	~<b•.h
>

16 
	~<icb_deföes.h
>

17 
	~<f˙é.h
>

19 
	~"OsDrvSpiBus.h
"

20 
	~"DrvTimî.h
"

21 
	~"DrvGpio.h
"

23 
	~<b•/úq.h
>

24 
	~<πems/libi2c.h
>

25 
	~<πems/libio.h
>

26 
	~"OsDrvC¥.h
"

28 
	~<SpiFœshN25QDevi˚.h
>

30 
	~"swcShaveLﬂdîPriv©e.h
"

31 
	~"swcMem‹yTøns„r.h
"

32 
	~<swcLe⁄Utûs.h
>

33 
	~<DrvLe⁄L2C.h
>

34 
	~<DrvLe⁄L2CDeföes.h
>

35 
	~<swcCrc.h
>

39 
	#RETRY_COUNT_FLASH_READ
 (3)

	)

42 
°¨t
();

45 
	$__boŸ_execuã
((*
íåy
)()Ë
	`__©åibuã__
((
n‹ëu∫
));

48 c⁄° 
u8
 
ñfmagic
[] = {0x7F, 'E', 'L', 'F'
	}
};

51 
u8
 
	gÊash_buff
[
SUBSECTOR_SIZE
] = {0};

53 #ifde‡
USBFLASH_APP_DEBUG


55 
	$fûl_tx_buf„rs
(
u32
 * 
buff
, u32 
byãSize
)

57 
uöt32_t
 
i
;

58 
i
 = 0; i < (
uöt32_t
)(
byãSize
/(*
buff
)); i++)

60 
buff
[
i
] = i;

62 
	}
}

68 
u32
 
	$isInVÆidElf
(
u8
 *
sAddr
)

70 
Elf32Ehdr
 
ElfHódî
;

73 
	`mem˝y
((
u32
*)&
ElfHódî
, (u32*)
sAddr
, (
Elf32Ehdr
));

76  !!
	`memcmp
(
ElfHódî
.
eIdít
, 
ñfmagic
, (elfmagic));

77 
	}
}

79 
ölöe
 
uöt32_t
 
	$gëUnsig√d
(c⁄° 
u8
 * 
§c
)

81 
uöt32_t
 
vÆ
=0;

82 
uöt32_t
 
i
=0;i<4;i++){

83 
vÆ
=vÆ*10+
§c
[
i
]-'0';

86  
vÆ
;

87 
	}
}

92 
u32
 
	$lﬂdAµImg
(
u8
 *
sAddr
)

94 
Elf32Ehdr
 
ElfHódî
;

95 
u32
 
SecHódîs
, 
i
;

96 
u32
 
phAddr
;

97 
u32
 *
§cAddr
;

98 
u32
 *
d°Addr
;

99 
u32
 
SecSize
;

103 if(*(
u32
*)
sAddr
 != 0x464c457f){

104 
°rögLígth
;

107 
°rögLígth
 = 
	`gëUnsig√d
(
sAddr
);

109 
sAddr
 +4 + ((
°rögLígth
 + 3) & 0xFFFFFFFC);

113 
	`mem˝y
((
u32
*)&
ElfHódî
, (u32*)
sAddr
, (
Elf32Ehdr
));

116 
phAddr
 = (
u32
)
sAddr
 + 
ElfHódî
.
eShoff
;

119 
	`¥ötf
("\nELF Info\n");

120 
	`¥ötf
("Imagê© 0x%08X\n", ()
sAddr
);

121 
	`¥ötf
("Header:\n");

122 
	`¥ötf
("eIdent[] ");

123 
i
 = 0; i < 
EI_NIDENT
; i++) {

124 i‡((
ElfHódî
.
eIdít
[
i
] >= 0x20) && (ElfHeader.eIdent[i] <= 0x7E)) {

125 
	`¥ötf
("%¯",
ElfHódî
.
eIdít
[
i
]);

127 
	`¥ötf
("0x%02X ",
ElfHódî
.
eIdít
[
i
]);

130 
	`¥ötf
("\n");

131 
	`¥ötf
("eTy≥ %d\n",
ElfHódî
.
eTy≥
);

132 
	`¥ötf
("eMachöê %d\n",
ElfHódî
.
eMachöe
);

133 
	`¥ötf
("eVîsi⁄ %u\n",()
ElfHódî
.
eVîsi⁄
);

134 
	`¥ötf
("eE¡ry 0x%08X\n",()
ElfHódî
.
eE¡ry
);

135 
	`¥ötf
("ePhof‡ %u\n",()
ElfHódî
.
ePhoff
);

136 
	`¥ötf
("eShof‡ %u\n",()
ElfHódî
.
eShoff
);

137 
	`¥ötf
("eFœg† 0x%08X\n",()
ElfHódî
.
eFœgs
);

138 
	`¥ötf
("eEhsizê %d\n",
ElfHódî
.
eEhsize
);

139 
	`¥ötf
("ePhítsizê%d\n",
ElfHódî
.
ePhítsize
);

140 
	`¥ötf
("ePhnum %d\n",
ElfHódî
.
ePhnum
);

141 
	`¥ötf
("eShítsizê%d\n",
ElfHódî
.
eShítsize
);

142 
	`¥ötf
("eShnum %d\n",
ElfHódî
.
eShnum
);

143 
	`¥ötf
("eSh°∫dx %d\n",
ElfHódî
.
eSh°∫dx
);

146 i‡(
	`isInVÆidElf
(
sAddr
)) {

147 
	`¥ötf
("\nNotá valid ELF!\n");

148  (
u32
)
NULL
;

152 
SecHódîs
 = 0; SecHódî†< 
ElfHódî
.
eShnum
; SecHeaders++) {

153 
Elf32Se˘i⁄
 
ElfSecHódî
;

154 
u32
 
SecOff£t
;

155 
u32
 
SecD©aOff£t
;

157 
SecOff£t
 = 
phAddr
 + (
Elf32Se˘i⁄
Ë* 
SecHódîs
;

158 
	`mem˝y
((
u32
*)&
ElfSecHódî
, (u32*)
SecOff£t
, (
Elf32Se˘i⁄
));

159 
SecD©aOff£t
 = (
u32
)
sAddr
 + 
ElfSecHódî
.
shOff£t
;

161 
§cAddr
 = (
u32
*)
SecD©aOff£t
;

163 
d°Addr
 = (
u32
 *)
ElfSecHódî
.
shAddr
;

164 
SecSize
 = 
ElfSecHódî
.
shSize
;

166 i‡(
ElfSecHódî
.
shTy≥
 =
SHT_PROGBITS
) {

167 
	`mem˝y
((
u32
*)
d°Addr
, (u32*)
§cAddr
, 
SecSize
);

171  
ElfHódî
.
eE¡ry
;

172 
	}
}

174 
	$îa£_•i_Êash
(
fd
, 
tFœshP¨ams
 *
p
)

176 
°©us
;

178 
•iFœshN25QEø£Args_t
 
îa£Args
 =

180 .
off£t
 = 
p
->offset,

181 .
size
 = 
p
->size,

184 
°©us
 = 
	`io˘l
(
fd
, 
FLASH_CMD_ERASE
, &
îa£Args
);

186 i‡(
°©us
) {

187 
	`¥ötf
("U«bÀÅÿîa£ devi˚,Éº = %d\n", 
°©us
);

190  
°©us
;

191 
	}
}

193 
	$wrôe_•i_Êash
(
fd
, 
tFœshP¨ams
 *
p
)

195 
°©us
;

197 
°©us
 = 
	`l£ek
(
fd
, 
p
->
off£t
, 
SEEK_SET
);

198 i‡(
°©us
 !()
p
->
off£t
) {

199 
	`≥º‹
("seekÉrror: ");

203 
°©us
 = 
	`wrôe
(
fd
, 
p
->
öBuff
,Ö->
size
);

204 i‡(
°©us
 !()
p
->
size
) {

205 
	`¥ötf
("U«bÀÅÿwrôêÆ»%u byã†tÿdevi˚. %d síà\n", ()
p
->
size
, 
°©us
);

206 
	`≥º‹
("");

211 
	}
}

213 
	$ªad_•i_Êash
(
fd
, 
tFœshP¨ams
 *
p
)

215 
°©us
 = 0;

217 
°©us
 = 
	`l£ek
(
fd
, 
p
->
off£t
, 
SEEK_SET
);

218 i‡(
°©us
 !()
p
->
off£t
) {

219 
	`≥º‹
("seekÉrror: ");

223 
°©us
 = 
	`ªad
(
fd
, 
p
->
outBuff
,Ö->
size
);

224 i‡(
°©us
 !()
p
->
size
) {

225 
	`¥ötf
("U«bÀÅÿªadáŒ %u byã†‰om devi˚. %d síà\n", ()
p
->
size
, 
°©us
);

226 
	`≥º‹
("");

231 
	}
}

233 
πems_èsk
 
	$Êash_≠p_èsk
(
πems_èsk_¨gumít
 
unu£d
)

235 
tFœshP¨ams
 *
p
 = (tFœshP¨am†*)
unu£d
;

237 i‡(
p
) {

238 
	`πems_èsk_wake_a·î
(50);

239 
	`Êash_execuã
(
p
);

242 
	`πems_èsk_dñëe
(
RTEMS_SELF
);

243 
	}
}

245 
öt32_t
 
	$Êash_execuã
(
tFœshP¨ams
 *
p
)

247 
πems_°©us_code
 
°©us
;

248 (*
≠p_íåy
)(Ë
NULL
;

249 
tFœshHódî
 *
Êash_hódî
;

250 
uöt32_t
 
≠p_idx
;

251 
uöt32_t
 
≠p_size
;

252 
uöt32_t
 
≠p_off£t
;

253 * 
≠p_ö_buff
;

254 * 
≠p_out_buff
;

255 
uöt32_t
 
≠ps_tŸÆ_•a˚
;

256 
öt32_t
 
ªt
 = 
ERR_NONE
;

257 
uöt32_t
 
ˇlcuœãd_¸c
;

258 
uöt32_t
 
ªåõs
 = 0;

259 
fd
;

262 i‡(
NULL
 =
p
)

264 
	`¥ötf
("\n Flash_execute started whit NULLÖointerásáÖarameter !!! FATAL ERROR !!! \n");

265 
ªt
 = 
ERR_IO_DRV
;

266 
exô_func
;

270 
	`¥ötf
("O≥nög %†...\n", 
p
->
devName
);

271 
fd
 = 
	`›í
(
p
->
devName
, 
O_RDWR
, 
S_IRUSR
 | 
S_IWUSR
 | 
S_IRGRP
 | 
S_IROTH
);

272 i‡(
fd
 < 0)

274 
	`¥ötf
("spi open failed\n");

275 
ªt
 = 
ERR_IO_DRV
;

276 
exô_func
;

279 
	`¥ötf
("\nFlash App...\n\n");

282 i‡(
p
->
imgId
 >
MAX_APPLIACIONS_IN_FLASH
)

284 
	`¥ötf
("InvÆid Aµ ID: %lu\n", 
p
->
imgId
);

285 
ªt
 = 
ERR_INV_APP_ID
;

286 
exô_deöô
;

289 
	`¥ötf
("Aµ ID: %lu\n", 
p
->
imgId
);

292 
	`mem£t
(
Êash_buff
, 0x00, (flash_buff));

293 
Êash_hódî
 = (
tFœshHódî
 *)&
Êash_buff
;

296 
≠p_size
 = 
p
->
size
;

297 
≠p_ö_buff
 = 
p
->
öBuff
;

298 
≠p_out_buff
 = 
p
->
outBuff
;

301 
p
->
off£t
 = 
	`ALIGN_TO_SUBSECTOR
(
FLAGS_SECTION_OFFSET
);

302 
p
->
size
 = (
tFœshHódî
);

303 
p
->
outBuff
 = 
Êash_hódî
;

305 
	`¥ötf
("Ródög Hódî: %u Byã†‰om %08X\n", ()
p
->
size
, (Ì->
off£t
);

307 i‡(
RTEMS_SUCCESSFUL
 !
	`ªad_•i_Êash
(
fd
, 
p
))

309 
	`¥ötf
("ErrorÑeading flash !!!\n");

310 
ªt
 = 
ERR_RW
;

311 
exô_deöô
;

315 
≠p_idx
 = 0;áµ_idx < 
MAX_APPLIACIONS_IN_FLASH
;ápp_idx++)

317 i‡(
VALID_HEADER_MAGIC
 !
Êash_hódî
->
≠p_öfo
[
≠p_idx
].
hódî_magic
)

319 
Êash_hódî
->
≠p_öfo
[
≠p_idx
].
hódî_magic
 = 0;

320 
Êash_hódî
->
≠p_öfo
[
≠p_idx
].
≠p_¸c
 = 0;

321 
Êash_hódî
->
≠p_öfo
[
≠p_idx
].
boŸImg_off£t
 = 0;

322 
Êash_hódî
->
≠p_öfo
[
≠p_idx
].
boŸImg_size
 = 0;

327 i‡(
p
->
wrôeImg
 !
FALSE
)

330 i‡(
	`isInVÆidElf
(
≠p_ö_buff
))

332 
	`¥ötf
("Exiting. Notá valid ELF!\n");

333 
ªt
 = 
ERR_ELF_ENTRY
;

334 
exô_deöô
;

338 
≠ps_tŸÆ_•a˚
 = 0;

339 
≠p_idx
 = 0;áµ_idx < 
MAX_APPLIACIONS_IN_FLASH
;ápp_idx++)

341 i‡(
≠p_idx
 !
p
->
imgId
)

343 
≠ps_tŸÆ_•a˚
 +
Êash_hódî
->
≠p_öfo
[
≠p_idx
].
boŸImg_size
;

346 
≠ps_tŸÆ_•a˚
 +
≠p_size
;

348 
	`¥ötf
("TŸÆ s∑˚Çìded %lu,ávaûabÀ %d\n", 
	`ALIGN_TO_SUBSECTOR
(
≠ps_tŸÆ_•a˚
), (
APP_MAX_FILE_SIZE
));

351 i‡(
	`ALIGN_TO_SUBSECTOR
(
≠ps_tŸÆ_•a˚
Ë> (
APP_MAX_FILE_SIZE
))

353 
	`¥ötf
("NotÉnough space!\n");

354 
ªt
 = 
ERR_NO_SPACE
;

355 
exô_deöô
;

359 
p
->
off£t
 = 
	`ALIGN_TO_SUBSECTOR
(
FLAGS_SECTION_OFFSET
);

360 
p
->
size
 = 
	`ALIGN_TO_SUBSECTOR
((
tFœshHódî
));

362 
	`¥ötf
("Eøsög Hódî: %u Byã†‰om %08X\n", ()
p
->
size
, (Ì->
off£t
);

363 i‡(
RTEMS_SUCCESSFUL
 !
	`îa£_•i_Êash
(
fd
, 
p
))

365 
ªt
 = 
ERR_RW
;

366 
exô_deöô
;

370 
ˇlcuœãd_¸c
 = 
	`swcCÆcCrc32
(
≠p_ö_buff
, 
≠p_size
, 
NATIVE_POINTER_TYPE
);

371 
	`¥ötf
("CÆcuœãd CRC from Aµ: %08X\n", ()
ˇlcuœãd_¸c
);

374 
Êash_hódî
->
execuã_≠p_Êag
 = 
FLAG_APP_EXECUTE
;

376 
Êash_hódî
->
lﬂdî_íåy
 = (
u32
)
°¨t
;

378 
Êash_hódî
->
≠p_öfo
[
p
->
imgId
].
hódî_magic
 = 
VALID_HEADER_MAGIC
;

379 
Êash_hódî
->
≠p_öfo
[
p
->
imgId
].
≠p_¸c
 = 
ˇlcuœãd_¸c
;

380 
Êash_hódî
->
≠p_öfo
[
p
->
imgId
].
boŸImg_size
 = 
≠p_size
;

383 
p
->
imgId
)

387 
≠p_off£t
 = 
	`ALIGN_TO_SUBSECTOR
(
LAUNCHER_RESERVED_SIZE
);

390 
≠p_off£t
 = 
FLASH_CHIP_SIZE
 - 
	`ALIGN_TO_SUBSECTOR
(
≠p_size
);

394 
Êash_hódî
->
≠p_öfo
[
p
->
imgId
].
boŸImg_off£t
 = 
≠p_off£t
;

397 
p
->
öBuff
 = 
≠p_ö_buff
;

398 
p
->
outBuff
 = 
≠p_out_buff
;

400 
p
->
size
 = 
	`ALIGN_TO_SUBSECTOR
(
≠p_size
);

401 
p
->
off£t
 = 
	`ALIGN_TO_SUBSECTOR
(
≠p_off£t
);

404 
	`¥ötf
("Eøsög %u Byã†‰om %08X\n", ()
p
->
size
, (Ì->
off£t
);

405 i‡(
RTEMS_SUCCESSFUL
 !
	`îa£_•i_Êash
(
fd
, 
p
))

407 
ªt
 = 
ERR_RW
;

408 
exô_deöô
;

412 
	`¥ötf
("Wrôög Aµliˇti⁄: %u Byã†‰om %08X\n", ()
p
->
size
, (Ì->
off£t
);

413 i‡(
RTEMS_SUCCESSFUL
 !
	`wrôe_•i_Êash
(
fd
, 
p
))

415 
ªt
 = 
ERR_RW
;

416 
exô_deöô
;

421 i‡(
FLAG_APP_EXECUTE
 =
Êash_hódî
->
execuã_≠p_Êag
) {

423 i‡(
VALID_HEADER_MAGIC
 =
Êash_hódî
->
≠p_öfo
[
p
->
imgId
].
hódî_magic
) {

425 
p
->
öBuff
 = 
≠p_ö_buff
;

426 
p
->
outBuff
 = 
≠p_out_buff
;

427 
p
->
off£t
 = 
Êash_hódî
->
≠p_öfo
[p->
imgId
].
boŸImg_off£t
;

428 
p
->
size
 = 
Êash_hódî
->
≠p_öfo
[p->
imgId
].
boŸImg_size
;

430 #ifde‡
USBFLASH_APP_DEBUG


431 
	`¥ötf
("\n");

432 
	`¥ötf
("globÆáµ fœg %d\n", 
Êash_hódî
->
execuã_≠p_Êag
);

433 
	`¥ötf
("boŸlﬂdîÉ¡ry 0x%08X\n", 
Êash_hódî
->
lﬂdî_íåy
);

434 
≠p_idx
 = 0;áµ_idx < 
MAX_APPLIACIONS_IN_FLASH
;ápp_idx++) {

435 
	`¥ötf
("hódî%d_magi¯ %08X\n", 
≠p_idx
, 
Êash_hódî
->
≠p_öfo
[≠p_idx].
hódî_magic
);

436 
	`¥ötf
("hódî%d_¸¯ %08X\n", 
≠p_idx
, 
Êash_hódî
->
≠p_öfo
[≠p_idx].
≠p_¸c
);

437 
	`¥ötf
("boŸImg%d_off£à%08X\n", 
≠p_idx
, 
Êash_hódî
->
≠p_öfo
[≠p_idx].
boŸImg_off£t
);

438 
	`¥ötf
("boŸImg%d_sizê %d\n", 
≠p_idx
, 
Êash_hódî
->
≠p_öfo
[≠p_idx].
boŸImg_size
);

440 
	`¥ötf
("\n");

446 
	`¥ötf
("Ródög Aµliˇti⁄: %u Byã†‰om %08X\n", ()
p
->
size
, (Ì->
off£t
);

447 i‡(
RTEMS_SUCCESSFUL
 !
	`ªad_•i_Êash
(
fd
, 
p
)) {

448 
ªt
 = 
ERR_RW
;

449 
exô_deöô
;

453 
ˇlcuœãd_¸c
 = 
	`swcCÆcCrc32
(
≠p_out_buff
, 
Êash_hódî
->
≠p_öfo
[
p
->
imgId
].
boŸImg_size
, 
NATIVE_POINTER_TYPE
);

454 
	`¥ötf
("CÆcuœãd CRC from Fœsh: %08X\n", ()
ˇlcuœãd_¸c
);

456 i‡(
ˇlcuœãd_¸c
 !
Êash_hódî
->
≠p_öfo
[
p
->
imgId
].
≠p_¸c
) {

457 
	`¥ötf
("CRC mism©ch! (Ex≥˘ed %08X, cÆcuœãd %08X)\n", ()
Êash_hódî
->
≠p_öfo
[
p
->
imgId
].
≠p_¸c
, ()
ˇlcuœãd_¸c
);

458 
ªt
 = 
ERR_INV_CRC
;

459 
ªåõs
++;

461 
	`¥ötf
("CRC OK!\n");

463 i‡(
	`isInVÆidElf
(
p
->
outBuff
)) {

464 
	`¥ötf
("App Corrupt. Notá valid ELF!\n");

465 
ªt
 = 
ERR_ELF_ENTRY
;

467 
ªt
 = 
ERR_NONE
;

473 } 
RETRY_COUNT_FLASH_READ
 > 
ªåõs
);

476 i‡(
ERR_NONE
 !
ªt
) {

477 
	`¥ötf
("InvalidatingÅhe header.\n");

478 
Êash_hódî
->
execuã_≠p_Êag
 = 
FLAG_APP_UPDATE
;

480 
Êash_hódî
->
≠p_öfo
[
p
->
imgId
].
hódî_magic
 = 
INVALID_HEADER_MAGIC
;

484 i‡((
p
->
wrôeImg
Ë|| (
ERR_NONE
 !
ªt
)) {

486 
p
->
öBuff
 = 
Êash_hódî
;

487 
p
->
size
 = 
	`ALIGN_TO_SUBSECTOR
((
tFœshHódî
));

488 
p
->
off£t
 = 
	`ALIGN_TO_SUBSECTOR
(
FLAGS_SECTION_OFFSET
);

490 
	`¥ötf
("Wrôög Hódî: %u Byã†‰om %08X\n", ()
p
->
size
, (Ì->
off£t
);

491 i‡(
RTEMS_SUCCESSFUL
 !
	`wrôe_•i_Êash
(
fd
, 
p
)) {

492 
ªt
 = 
ERR_RW
;

493 
exô_deöô
;

498 i‡(
ERR_NONE
 !
ªt
) {

499 
	`¥ötf
("Fœsh i†c‹ru±! Exôögá·î %uáâem±†tÿªad it!\n", ()
ªåõs
);

500 
exô_deöô
;

504 
	`¥ötf
("InvÆid imagêhódî magi¯numbî (%08X).\n", ()
Êash_hódî
->
≠p_öfo
[
p
->
imgId
].
hódî_magic
);

505 
ªt
 = 
ERR_INV_HEADER
;

506 
exô_deöô
;

510 
	`¥ötf
("No validápplication in memory !!!\n");

511 
ªt
 = 
ERR_INV_FLAG
;

512 
exô_deöô
;

515 
	`¥ötf
("Flash OK\n");

518 
≠p_íåy
 = ((*)())
	`lﬂdAµImg
(
p
->
outBuff
);

520 i‡(
≠p_íåy
)

522 
	`¥ötf
("----------------------------now jum∞tÿ≠∞0x%x\n", ()(
≠p_íåy
));

523 
	`swcLe⁄FlushDˇche
();

524 
	`swcLe⁄FlushIˇche
();

525 
	`swcLe⁄DißbÀCaches
();

526 
	`DrvLL2CFlushOpOnAŒLöes
(
LL2C_OPERATION_INVALIDATE
, 0);

528 
	`DrvC¥SysDevi˚A˘i⁄
(
MSS_DOMAIN
, 
ASSERT_RESET
, -1);

529 
	`__boŸ_execuã
(
≠p_íåy
);

532 
	`¥ötf
("Invalid EntryÖoint!\n");

533 
ªt
 = 
ERR_ELF_ENTRY
;

534 
exô_deöô
;

537 
exô_deöô
:

539 
	`¥ötf
("CloseándÉxit!\n");

540 i‡((
°©us
 = 
	`˛o£
(
fd
)) != 0)

542 
	`¥ötf
("•ò˛o£ faûed wôh s¯%u\n", ()
°©us
);

543 
ªt
 = 
ERR_IO_DRV
;

546 
exô_func
:

548  
ªt
;

549 
	}
}

	@Demo/UsbHost/leon/app_config.c

11 
	~<OsDrvC¥.h
>

12 
	~<OsDrvShaveL2Cache.h
>

13 
	~"≠p_c⁄fig.h
"

18 
	#L2CACHE_CFG
 (
SHAVE_L2CACHE_NORMAL_MODE
)

	)

34 
	$öôClocksAndMem‹y
()

36 
u32
 
sc
;

38 
tyAuxClkDividîCfg
 
auxClkAŒOn
[] =

40 {
AUX_CLK_MASK_UART
, 
CLK_SRC_REFCLK0
, 96, 625},

45 
sc
 = 
	`OsDrvC¥Inô
();

46 if(
sc
)

47  
sc
;

48 
sc
 = 
	`OsDrvC¥O≥n
();

49 if(
sc
)

50  
sc
;

51 
sc
 = 
	`OsDrvC¥AuxClockAºayC⁄fig
(
auxClkAŒOn
);

52 if(
sc
)

53  
sc
;

56 
	}
}

	@Demo/UsbHost/leon/app_config.h

10 #i‚de‡
_APP_CONFIG_H_


11 
	#_APP_CONFIG_H_


	)

19 
	#PLL_DESIRED_FREQ_KHZ
 480000

	)

21 
	#DEFAULT_OSC0_KHZ
 12000

	)

33 
öôClocksAndMem‹y
();

	@Demo/UsbHost/leon/hostapp_gcdclient_api.c

33 
	~"usbpumpdebug.h
"

34 
	~"usbpum¥oŸ.h
"

35 
	~"usbpumpobje˘≠i.h
"

36 
	~"u∂©f‹m.h
"

37 
	~"u∂©f‹m≠i.h
"

38 
	~"uˇŒback.h
"

40 
	~"usbpump_ho°≠p_gcd˛õ¡.h
"

41 
	~"usbpump_≠∂iˇti⁄_πems_ho°_≠i.h
"

43 
	~<°dio.h
>

44 
	~<mÆloc.h
>

55 
__TMS_TYPE_DEF_STRUCT
 (
USBPUMP_HOSTAPP_GCD_SYNC_CONTEXT
);

56 
	$__TMS_STRUCTNAME
 (
USBPUMP_HOSTAPP_GCD_SYNC_CONTEXT
)

58 
UPLATFORM
 * 
pPœtf‹m
;

59 
UINT32
 
DebugFœgs
;

60 
BYTES
 
GcdClõ¡Buf„rSize
;

61 
UINT
 
GcdClõ¡Lo›backCou¡
;

62 
BOOL
 
fGcdClõ¡Pîf‹m™˚Mósuª
;

63 
UCALLBACKCOMPLETION
 
CÆlback
;

64 
	}
};

68 
UCALLBACKFN


69 
	gUsbPumpHo°Aµ_GcdCª©eCÆlback
;

121 
	#FUNCTION
 "UsbPump_Rãms_Ho°Aµ_GcdClõ¡Cª©e"

	)

124 
	$UsbPump_Rãms_Ho°Aµ_GcdClõ¡Cª©e
(

125 * 
pPœtf‹m_Void
,

126 
DebugFœgs
,

127 
GcdClõ¡Buf„rSize
,

128 
GcdClõ¡Lo›backCou¡
,

129 
fGcdClõ¡Pîf‹m™˚Mósuª


132 
UPLATFORM
 * c⁄° 
pPœtf‹m
 = 
pPœtf‹m_Void
;

133 
USBPUMP_HOSTAPP_GCD_SYNC_CONTEXT
 * 
pSyncC⁄ãxt
;

135 i‡(
pPœtf‹m
 =
NULL
)

137 
	`¥ötf
("?" 
FUNCTION
 ":ÖPlatform=NULL\n");

138  
FALSE
;

141 
pSyncC⁄ãxt
 = 
	`mÆloc
((*pSyncContext));

142 i‡(
pSyncC⁄ãxt
 =
NULL
)

144 
	`¥ötf
("?" 
FUNCTION
 ": No memory\n");

145  
FALSE
;

148 
pSyncC⁄ãxt
->
pPœtf‹m
 =ÖPlatform;

149 
pSyncC⁄ãxt
->
DebugFœgs
 = DebugFlags;

150 
pSyncC⁄ãxt
->
GcdClõ¡Buf„rSize
 = GcdClientBufferSize;

151 
pSyncC⁄ãxt
->
GcdClõ¡Lo›backCou¡
 = GcdClientLoopbackCount;

152 
pSyncC⁄ãxt
->
fGcdClõ¡Pîf‹m™˚Mósuª
 =

153 
fGcdClõ¡Pîf‹m™˚Mósuª
;

155 
	`USBPUMP_CALLBACKCOMPLETION_INIT
(

156 &
pSyncC⁄ãxt
->
CÆlback
,

157 
UsbPumpHo°Aµ_GcdCª©eCÆlback
,

158 
pSyncC⁄ãxt


161 
	`UsbPumpPœtf‹m_Po°Evít
(

162 
pPœtf‹m
,

163 &
pSyncC⁄ãxt
->
CÆlback


166  
TRUE
;

167 
	}
}

169 #unde‡
FUNCTION


172 
	$UsbPumpHo°Aµ_GcdCª©eCÆlback
(

173 * 
pC⁄ãxt


176 
USBPUMP_HOSTAPP_GCD_SYNC_CONTEXT
 * c⁄° 
pSyncC⁄ãxt
 = 
pC⁄ãxt
;

181 
	`UsbPumpHo°Aµ_GcdClõ¡Cª©e
(

182 
pSyncC⁄ãxt
->
pPœtf‹m
,

183 
pSyncC⁄ãxt
->
DebugFœgs
,

184 
pSyncC⁄ãxt
->
GcdClõ¡Buf„rSize
,

185 
pSyncC⁄ãxt
->
GcdClõ¡Lo›backCou¡
,

186 
pSyncC⁄ãxt
->
fGcdClõ¡Pîf‹m™˚Mósuª


189 
	`‰ì
(
pSyncC⁄ãxt
);

190 
	}
}

	@Demo/UsbHost/leon/hostapp_gcdclient_create.c

36 
	~"usbpump_ho°≠p_gcd˛õ¡.h
"

37 
	~"usbpump_dev•ìd.h
"

38 
	~"usbdesc_ty≥s.h
"

39 
	~"usbdesc.h
"

40 
	~"ba£hû.h
"

41 
	~"usbpum∑pi.h
"

55 #i‚de‡
USBPUMP_CLASS_GCD_CLIENT_SUSPEND_TIMEOUT


56 
	#USBPUMP_CLASS_GCD_CLIENT_SUSPEND_TIMEOUT
 5000

	)

59 
	#USBPUMP_CLASS_GCD_CLIENT_RESET_PIPE_FLAGS
 \

60 (
USBPUMP_URB_RESET_PIPE_FLAG_DO_CLEAR_FEATURE
 | \

61 
USBPUMP_URB_RESET_PIPE_FLAG_CLEAR_HOST_TOGGLE
)

	)

63 
	#GCD_CLIENT_MAX_INT_COUNT
 30

	)

72 
USTAT


73 
UsbPumpGcdClõ¡_O≥nSessi⁄
(

74 
USBPUMP_CLASS_GCD_CLIENT_DATA
 * 
pGcdClõ¡
,

75 
USBPUMP_OBJECT_HEADER
 * 
pGcdCœssObje˘Hódî


79 
UsbPumpGcdClõ¡_O≥nFun˘i⁄
(

80 
USBPUMP_CLASS_GCD_CLIENT_DATA
 * 
pGcdClõ¡
,

81 * 
pClõ¡H™dÀd


85 
UsbPumpGcdClõ¡_Clo£Fun˘i⁄
(

86 
USBPUMP_CLASS_GCD_CLIENT_DATA
 * 
pGcdClõ¡


90 
UsbPumpGcdClõ¡_GëNumDevs
(

91 
USBPUMP_CLASS_GCD_CLIENT_DATA
 * 
pGcdClõ¡


95 
UsbPumpGcdClõ¡_GëBoundDevs
(

96 
USBPUMP_CLASS_GCD_CLIENT_DATA
 * 
pGcdClõ¡
,

97 
UINT32
 
ulNumOfIn°™˚s


101 
UsbPumpGcdClõ¡_GëDevSèã
(

102 
USBPUMP_CLASS_GCD_CLIENT_DATA
 * 
pGcdClõ¡
,

103 
USBPUMP_USBDI_GENERIC_DEVICE_STATE
 * 
pDevi˚Sèã


107 
UsbPumpGcdClõ¡_GëDevDesc
(

108 
USBPUMP_CLASS_GCD_CLIENT_DATA
 * 
pGcdClõ¡
,

109 * 
pBuf„r
,

110 
BYTES
 
sizeBuf„r


114 
UsbPumpGcdClõ¡_GëC⁄figDesc
(

115 
USBPUMP_CLASS_GCD_CLIENT_DATA
 * 
pGcdClõ¡
,

116 * 
pBuf„r
,

117 
BYTES
 
sizeBuf„r
,

118 
UINT8
 
iC⁄fig


122 
UsbPumpGcdClõ¡_GëC⁄figTªe
(

123 
USBPUMP_CLASS_GCD_CLIENT_DATA
 * 
pGcdClõ¡
,

124 * 
pBuf„r
,

125 
UINT32
 
sizeBuf„r


129 
UsbPumpGcdClõ¡_WrôeCål
(

130 
USBPUMP_CLASS_GCD_CLIENT_DATA
 * 
pGcdClõ¡
,

131 
USBPUMP_USBDI_PIPE_HANDLE
 
hPùe
,

132 
UINT8
 
bmReque°Ty≥
,

133 
UINT8
 
bReque°
,

134 
UINT16
 
wVÆue
,

135 
UINT16
 
wIndex
,

136 * 
pBuf„r
,

137 
BYTES
 
sizeBuf„r
,

138 
USBPUMP_USBDI_GENERIC_TIMEOUT
 
mûli£c⁄ds


142 
UsbPumpGcdClõ¡_RódBulkI¡
(

143 
USBPUMP_CLASS_GCD_CLIENT_DATA
 * 
pGcdClõ¡
,

144 
USBPUMP_USBDI_PIPE_HANDLE
 
hPùe
,

145 * 
pBuf„r
,

146 
BYTES
 
sizeBuf„r
,

147 
USBPUMP_USBDI_GENERIC_TIMEOUT
 
mûli£c⁄ds


151 
UsbPumpGcdClõ¡_WrôeBulkI¡
(

152 
USBPUMP_CLASS_GCD_CLIENT_DATA
 * 
pGcdClõ¡
,

153 
USBPUMP_USBDI_PIPE_HANDLE
 
hPùe
,

154 * 
pBuf„r
,

155 
BYTES
 
sizeBuf„r
,

156 
USBPUMP_USBDI_GENERIC_TIMEOUT
 
mûli£c⁄ds
,

157 
BOOL
 
fFuŒTøns„r


161 
UsbPumpGcdClõ¡_RódIsoch
(

162 
USBPUMP_CLASS_GCD_CLIENT_DATA
 * 
pGcdClõ¡
,

163 
USBPUMP_USBDI_PIPE_HANDLE
 
hPùe
,

164 * 
pBuf„r
,

165 
BYTES
 
sizeBuf„r
,

166 
USBPUMP_USBDI_GENERIC_TIMEOUT
 
mûli£c⁄ds
,

167 
USBPUMP_ISOCH_PACKET_DESCR
 * 
pIsochDes¸
,

168 
BYTES
 
IsochDes¸Size
,

169 
UINT32
 
IsochSèπFøme
,

170 
BOOL
 
fAßp


174 
UsbPumpGcdClõ¡_WrôeIsoch
(

175 
USBPUMP_CLASS_GCD_CLIENT_DATA
 * 
pGcdClõ¡
,

176 
USBPUMP_USBDI_PIPE_HANDLE
 
hPùe
,

177 * 
pBuf„r
,

178 
BYTES
 
sizeBuf„r
,

179 
USBPUMP_USBDI_GENERIC_TIMEOUT
 
mûli£c⁄ds
,

180 
USBPUMP_ISOCH_PACKET_DESCR
 * 
pIsochDes¸
,

181 
BYTES
 
IsochDes¸Size
,

182 
UINT32
 
IsochSèπFøme
,

183 
BOOL
 
fAßp


187 
UsbPumpGcdClõ¡_Su•ídDev
(

188 
USBPUMP_CLASS_GCD_CLIENT_DATA
 * 
pGcdClõ¡


192 
UsbPumpGcdClõ¡_ResumeDev
(

193 
USBPUMP_CLASS_GCD_CLIENT_DATA
 * 
pGcdClõ¡


197 
UsbPumpGcdClõ¡_Re£tPùe
(

198 
USBPUMP_CLASS_GCD_CLIENT_DATA
 * 
pGcdClõ¡
,

199 
USBPUMP_USBDI_PIPE_HANDLE
 
hPùe
,

200 
UINT32
 
Re£tPùeFœgs


204 
UsbPumpSåómTe°Fsm_Inô
(

205 
USBPUMP_CLASS_GCD_CLIENT_DATA
 * 
pGcdClõ¡


209 
UsbPumpSåómTe°Fsm_FöÆized
(

210 
USBPUMP_CLASS_GCD_CLIENT_DATA
 * 
pGcdClõ¡


214 
UsbPumpSåómTe°Fsm_EvÆ
(

215 
USBPUMP_CLASS_GCD_CLIENT_DATA
 * 
pGcdClõ¡


218 
USBPUMP_STREAMTEST_FSM_STATE


219 
UsbPumpSåómTe°Fsm_Swôch
(

220 
USBPUMP_CLASS_GCD_CLIENT_DATA
 * 
pGcdClõ¡
,

221 
BOOL
 
fE¡ry


225 
UsbPumpSåómTe°Fsm_WrôeSåóm
(

226 
USBPUMP_CLASS_GCD_CLIENT_DATA
 * 
pGcdClõ¡
,

227 
USBPUMP_USBDI_PIPE_HANDLE
 
hPùe
,

228 * 
pBuf„r
,

229 
BYTES
 
sizeBuf„r
,

230 
USBPUMP_USBDI_GENERIC_TIMEOUT
 
mûli£c⁄ds
,

231 
BOOL
 
fFuŒTøns„r
,

232 
UINT16
 
SåómID


236 
UsbPumpSåómTe°Fsm_RódSåóm
(

237 
USBPUMP_CLASS_GCD_CLIENT_DATA
 * 
pGcdClõ¡
,

238 
USBPUMP_USBDI_PIPE_HANDLE
 
hPùe
,

239 * 
pBuf„r
,

240 
BYTES
 
sizeBuf„r
,

241 
USBPUMP_USBDI_GENERIC_TIMEOUT
 
mûli£c⁄ds
,

242 
UINT16
 
SåómID


245 #i‡
USBPUMP_TRACE


246 
CONST
 
TEXT
 *

247 
UsbPumpSåómTe°Fsm_SèãName
(

248 
USBPUMP_STREAMTEST_FSM_STATE
 
°©e


259 
USBPUMP_API_OPEN_CB_FN


260 
	gUsbPumpGcdClõ¡_O≥nSessi⁄_CÆlback
;

262 
USBPUMP_CLASSKIT_OPEN_FUNCTION_CB_FN


263 
	gUsbPumpGcdClõ¡_O≥nFnCbFn
;

265 
USBPUMP_API_CLOSE_CB_FN


266 
	gUsbPumpGcdClõ¡_Clo£FnCbFn
;

268 
USBPUMP_CLASSKIT_GET_NUM_DEVICES_CB_FN


269 
	gUsbPumpGcdClõ¡_GëNumDevsCbFn
;

271 
USBPUMP_CLASSKIT_GET_BOUND_DEVICES_CB_FN


272 
	gUsbPumpGcdClõ¡_GëBoundDevsCbFn
;

274 
USBPUMP_USBDI_GENERIC_GET_DEVICE_STATE_CB_FN


275 
	gUsbPumpGcdClõ¡_GëDevSèãCbFn
;

277 
USBPUMP_USBDI_GENERIC_GET_DEVICE_DESCRIPTOR_CB_FN


278 
	gUsbPumpGcdClõ¡_GëDevDescCbFn
;

280 
USBPUMP_USBDI_GENERIC_GET_CONFIG_DESCRIPTOR_CB_FN


281 
	gUsbPumpGcdClõ¡_GëC⁄figDescCbFn
;

283 
USBPUMP_USBDI_GENERIC_GET_CONFIG_TREE_CB_FN


284 
	gUsbPumpGcdClõ¡_GëC⁄figTªeCbFn
;

286 
USBPUMP_USBDI_GENERIC_WRITE_CONTROL_PIPE_CB_FN


287 
	gUsbPumpGcdClõ¡_WrôeCålCbFn
;

289 
USBPUMP_USBDI_GENERIC_READ_BULKINT_PIPE_CB_FN


290 
	gUsbPumpGcdClõ¡_RódBulkI¡CbFn
;

292 
USBPUMP_USBDI_GENERIC_WRITE_BULKINT_PIPE_CB_FN


293 
	gUsbPumpGcdClõ¡_WrôeBulkI¡CbFn
;

295 
USBPUMP_USBDI_GENERIC_READ_ISOCH_PIPE_CB_FN


296 
	gUsbPumpGcdClõ¡_RódIsochCbFn
;

298 
USBPUMP_USBDI_GENERIC_WRITE_ISOCH_PIPE_CB_FN


299 
	gUsbPumpGcdClõ¡_WrôeIsochCbFn
;

301 
USBPUMP_USBDI_GENERIC_READ_STREAM_PIPE_CB_FN


302 
	gUsbPumpSåómTe°Fsm_RódSåómCbFn
;

304 
USBPUMP_USBDI_GENERIC_WRITE_STREAM_PIPE_CB_FN


305 
	gUsbPumpSåómTe°Fsm_WrôeSåómCbFn
;

307 
USBPUMP_USBDI_GENERIC_SUSPEND_DEVICE_CB_FN


308 
	gUsbPumpGcdClõ¡_Su•ídDevCbFn
;

310 
USBPUMP_USBDI_GENERIC_RESUME_DEVICE_CB_FN


311 
	gUsbPumpGcdClõ¡_ResumeDevCbFn
;

313 
USBPUMP_USBDI_GENERIC_RESET_PIPE_CB_FN


314 
	gUsbPumpGcdClõ¡_Re£tPùeCbFn
;

323 
USBPUMP_CLASSKIT_NOTIFICATION_FN


324 
	gUsbPumpGcdClõ¡_NŸifiˇti⁄
;

334 
UsbPumpGcdClõ¡_SèπLo›backTe°
(

335 
USBPUMP_CLASS_GCD_CLIENT_DATA
 * 
pGcdClõ¡
,

336 
BOOL
 
fSëI¡îÁ˚


340 
UCALLBACKFN


341 
	gUsbPumpGcdClõ¡_SèπLo›back
;

344 
UsbPumpGcdClõ¡_P¨£C⁄figTªe
(

345 
USBPUMP_CLASS_GCD_CLIENT_DATA
 * 
pGcdClõ¡
,

346 
USBPUMP_USBDI_CFG_NODE
 * 
pC⁄figRoŸ


349 
UINT


350 
UsbPumpGcdClõ¡_InôIsochPackëDesc
(

351 
USBPUMP_CLASS_GCD_CLIENT_DATA
 * 
pGcdClõ¡
,

352 
USBPUMP_CLASS_GCD_CLIENT_PIPE_CONTEXT
 * 
pPùeCtx


356 
UsbPumpGcdClõ¡_Gíî©eTe°D©a
(

357 
UINT8
 * 
pBuf„r
,

358 
BYTES
 
nBuf„r


362 
UsbPumpGcdClõ¡_CÀ¨Te°D©a
(

363 
UINT8
 * 
pBuf„r
,

364 
BYTES
 
nBuf„r


367 
BOOL


368 
UsbPumpGcdClõ¡_CheckTe°D©a
(

369 
UINT8
 * 
pBuf„r
,

370 
BYTES
 
nBuf„r


373 
USBPUMP_TIMER_DONE_FN


374 
	gUsbPumpGcdClõ¡_Su•ídTimeout
;

377 
UINT32


378 
πems_˛ock_gë_ticks_≥r_£c⁄d
(

383 
__TMS_f‹˚ölöe


384 
UINT32


385 
	$πems_˛ock_gë_ticks_sö˚_boŸ
(

389 
UINT32
 
_W©chdog_Ticks_sö˚_boŸ
;

391  
_W©chdog_Ticks_sö˚_boŸ
;

392 
	}
}

405 
CONST
 
USBPUMP_CLASSKIT_CLASS_OUTCALL


406 
	gsk_UsbPumpUsbdiCœssGdi_Clõ¡OutCÆl
 =

407 
USBPUMP_CLASSKIT_CLASS_OUTCALL_INIT_V1
(

408 
UsbPumpGcdClõ¡_NŸifiˇti⁄


411 
CONST
 
USBPUMP_CLASSKIT_FUNCTION_OUTCALL


412 
	gsk_UsbPumpUsbdiFun˘i⁄Gdi_Clõ¡OutCÆl
 =

413 
USBPUMP_CLASSKIT_FUNCTION_OUTCALL_INIT_V1
(

414 
UsbPumpGcdClõ¡_NŸifiˇti⁄


417 #i‡
USBPUMP_TRACE


418 
CONST
 
CHAR
 * 
	gsk_EndpoötTy≥s
[] =

426 
CONST
 
TEXT
 * CONST 
	gsk_vpSåómTe°Fsm_SèãNames
[] =

428 
USBPUMP_STREAMTEST_FSM_STATES__INIT


431 
CONST
 
TEXT
 
	gsk_SåómTe°FsmUnknownSèã
[] = "<<unknownState>>";

473 
USBPUMP_CLASS_GCD_CLIENT_DATA
 *

474 
	$UsbPumpHo°Aµ_GcdClõ¡Cª©e
(

475 
UPLATFORM
* 
pPœtf‹m
,

476 
UINT32
 
DebugFœgs
,

477 
BYTES
 
Buf„rSize
,

478 
UINT
 
Lo›backCou¡
,

479 
BOOL
 
fPîf‹m™˚Mósuª


482 
USBPUMP_OBJECT_ROOT
 * 
pRoŸObje˘
;

483 
USBPUMP_OBJECT_HEADER
 * 
pCœssObje˘
;

484 
USBPUMP_CLASS_GCD_CLIENT_DATA
 * 
pClõ¡
;

485 
UINT8
 * 
pBuf„r
;

486 
USTAT
 
Sètus
;

488 
pRoŸObje˘
 = 
	`UsbPumpObje˘_GëRoŸ
(&
pPœtf‹m
->
upf_Hódî
);

493 
pClõ¡
 = 
	`UsbPumpPœtf‹m_MÆlocZîo
(
pPœtf‹m
, (*pClient));

494 i‡(
pClõ¡
 =
NULL
)

496 
	`TTUSB_OBJPRINTF
((

497 &
pPœtf‹m
->
upf_Hódî
,

498 
UDMASK_ANY
 | 
UDMASK_ERRORS
,

501 (*
pClõ¡
)

503  
NULL
;

506 
Buf„rSize
 &= ~1023;

507 
pBuf„r
 = 
	`UsbPumpPœtf‹m_MÆloc
(
pPœtf‹m
, 
Buf„rSize
 * 2);

508 i‡(
pBuf„r
 =
NULL
)

510 
	`TTUSB_OBJPRINTF
((

511 &
pPœtf‹m
->
upf_Hódî
,

512 
UDMASK_ANY
 | 
UDMASK_ERRORS
,

515 
Buf„rSize
 * 2

517 
	`UsbPumpPœtf‹m_Fªe
(
pPœtf‹m
, 
pClõ¡
, (*pClient));

518  
NULL
;

521 
	`UsbPumpObje˘_Inô
(

522 &
pClõ¡
->
Obje˘Hódî
,

523 
pPœtf‹m
->
upf_Hódî
.
pCœssP¨ít
,

525 
	`UHIL_MEMTAG
('G', 'c', 'd', 'S'),

526 (*
pClõ¡
),

528 &
pPœtf‹m
->
upf_Hódî
,

529 
NULL


531 
pClõ¡
->
pPœtf‹m
 =ÖPlatform;

532 
pClõ¡
->
pRódBuf„r
 = 
pBuf„r
;

533 
pClõ¡
->
pWrôeBuf„r
 = 
pBuf„r
 + 
Buf„rSize
;

534 
pClõ¡
->
Obje˘Hódî
.
ulDebugFœgs
 |
DebugFœgs
;

536 
pClõ¡
->
Buf„rSize
 = BufferSize;

537 
pClõ¡
->
Lo›backCou¡
 = LoopbackCount;

538 
pClõ¡
->
fPîf‹m™˚Mósuª
 = fPerformanceMeasure;

540 
	`UsbPumpTimî_Inôülize
(

541 
pPœtf‹m
,

542 &
pClõ¡
->
Timî
,

543 
UsbPumpGcdClõ¡_Su•ídTimeout


549 
pCœssObje˘
 = 
	`UsbPumpObje˘_Enumî©eM©chögNames
(

550 &
pRoŸObje˘
->
Hódî
,

551 
NULL
,

552 
USBPUMP_OBJECT_NAME_ENUM_HOST_GCD


558 i‡(
pCœssObje˘
 =
NULL
)

560 
	`TTUSB_OBJPRINTF
((

561 &
pClõ¡
->
Obje˘Hódî
,

562 
UDMASK_ERRORS
,

566 
	`UsbPumpObje˘_DeInô
(&
pClõ¡
->
Obje˘Hódî
);

567 
	`UsbPumpPœtf‹m_Fªe
(
pPœtf‹m
, 
pClõ¡
, (*pClient));

568 
	`UsbPumpPœtf‹m_Fªe
(
pPœtf‹m
, 
pBuf„r
, 
Buf„rSize
);

569  
NULL
;

572 
pClõ¡
->
pCœssObje˘
 =ÖClassObject;

573 
Sètus
 = 
	`UsbPumpGcdClõ¡_O≥nSessi⁄
(

574 
pClõ¡
,

575 
pCœssObje˘


577 i‡(
Sètus
 !
USTAT_OK
)

579 
	`TTUSB_OBJPRINTF
((

580 &
pClõ¡
->
Obje˘Hódî
,

581 
UDMASK_ERRORS
,

584 
	`UsbPumpSètus_Name
(
Sètus
)

586 
	`UsbPumpObje˘_DeInô
(&
pClõ¡
->
Obje˘Hódî
);

587 
	`UsbPumpPœtf‹m_Fªe
(
pPœtf‹m
, 
pClõ¡
, (*pClient));

588 
	`UsbPumpPœtf‹m_Fªe
(
pPœtf‹m
, 
pBuf„r
, 
Buf„rSize
);

589  
NULL
;

592  
pClõ¡
;

593 
	}
}

618 
USTAT


619 
	$UsbPumpGcdClõ¡_O≥nSessi⁄
(

620 
USBPUMP_CLASS_GCD_CLIENT_DATA
 * 
pGcdClõ¡
,

621 
USBPUMP_OBJECT_HEADER
 * 
pGcdCœssObje˘Hódî


624 * 
pO≥nReque°Mem‹y
;

629 
pO≥nReque°Mem‹y
 = 
	`UsbPumpPœtf‹m_MÆloc
(

630 
pGcdClõ¡
->
pPœtf‹m
,

631 
USBPUMP_API_OPEN_REQUEST_MEMORY_SIZE


633 i‡(
pO≥nReque°Mem‹y
 =
NULL
)

635 
	`TTUSB_OBJPRINTF
((

636 
pGcdClõ¡
->
pCœssObje˘
,

637 
UDMASK_ERRORS
,

640 
USBPUMP_API_OPEN_REQUEST_MEMORY_SIZE


642  
USTAT_NO_MEMORY
;

645 
	`UsbPumpObje˘_O≥nSessi⁄
(

646 
pGcdCœssObje˘Hódî
,

647 
pO≥nReque°Mem‹y
,

648 
USBPUMP_API_OPEN_REQUEST_MEMORY_SIZE
,

649 
UsbPumpGcdClõ¡_O≥nSessi⁄_CÆlback
,

650 
pGcdClõ¡
,

651 &
gk_UsbPumpUsbdiCœssGíîic_Guid
,

652 
NULL
,

653 &
pGcdClõ¡
->
CœssInCÆl
.
GíîicCa°
,

654 (
pGcdClõ¡
->
CœssInCÆl
),

655 
pGcdClõ¡
,

656 &
sk_UsbPumpUsbdiCœssGdi_Clõ¡OutCÆl
.
GíîicCa°
,

657 (
sk_UsbPumpUsbdiCœssGdi_Clõ¡OutCÆl
)

660  
USTAT_OK
;

661 
	}
}

663 
VOID


664 
	$UsbPumpGcdClõ¡_O≥nSessi⁄_CÆlback
(

665 
VOID
 * 
pClõ¡C⁄ãxt
,

666 
USBPUMP_SESSION_HANDLE
 
Sessi⁄H™dÀ
,

667 
UINT32
 
Sètus
,

668 
VOID
 * 
pO≥nReque°Mem‹y
,

669 
RECSIZE
 
sizeO≥nReque°Mem‹y


672 
USBPUMP_CLASS_GCD_CLIENT_DATA
 * 
CONST
 
pGcdClõ¡
 = 
pClõ¡C⁄ãxt
;

674 i‡(
Sètus
 =
USBPUMP_USBDI_GENERIC_STATUS_OK
)

676 
	`TTUSB_OBJPRINTF
((

677 
pGcdClõ¡
->
pCœssObje˘
,

678 
UDMASK_FLOW
,

681 
Sessi⁄H™dÀ


688 
pGcdClõ¡
->
Sessi⁄H™dÀ
 = SessionHandle;

692 
	`TTUSB_OBJPRINTF
((

693 
pGcdClõ¡
->
pCœssObje˘
,

694 
UDMASK_ERRORS
,

697 
	`UsbPumpUsbdiCœssGíîic_SètusName
(
Sètus
),

698 
Sètus


702 i‡(
pO≥nReque°Mem‹y
)

704 
	`UsbPumpPœtf‹m_Fªe
(

705 
pGcdClõ¡
->
pPœtf‹m
,

706 
pO≥nReque°Mem‹y
,

707 
sizeO≥nReque°Mem‹y


710 
	}
}

738 
VOID


739 
	$UsbPumpGcdClõ¡_NŸifiˇti⁄
(

740 
VOID
 * 
pClõ¡H™dÀ
,

741 
USBPUMP_CLASSKIT_NOTIFICATION
 
NŸifiˇti⁄Id
,

742 
CONST
 
VOID
 * 
pNŸifiˇti⁄
,

743 
BYTES
 
nNŸifiˇti⁄


746 
USBPUMP_CLASS_GCD_CLIENT_DATA
 * 
CONST
 
pGcdClõ¡
 = 
pClõ¡H™dÀ
;

747 
	`USBPUMP_UNREFERENCED_PARAMETER
(
nNŸifiˇti⁄
);

749 
NŸifiˇti⁄Id
)

751 
USBPUMP_CLASSKIT_EVENT_DEVICE_ARRIVAL
:

753 
CONST
 
USBPUMP_CLASSKIT_EVENT_DEVICE_ARRIVAL_INFO
 * CONST

754 
pEvítInfo
 = 
pNŸifiˇti⁄
;

756 
	`TTUSB_OBJPRINTF
((

757 
pGcdClõ¡
->
pCœssObje˘
,

758 
UDMASK_FLOW
 | 
UDMASK_ANY
,

761 
pEvítInfo
->
pFun˘i⁄


769 i‡(
pGcdClõ¡
->
Fun˘i⁄H™dÀ
)

778 
pGcdClõ¡
->
pFun˘i⁄
 = 
pEvítInfo
->pFunction;

779 
pGcdClõ¡
->
hDeÁu…Pùe
 =

780 
pGcdClõ¡
->
pFun˘i⁄
->
Fun˘i⁄
.
P‹tInfo
.
hDeÁu…Pùe
;

785 
	`UsbPumpGcdClõ¡_O≥nFun˘i⁄
(
pGcdClõ¡
, 
pClõ¡H™dÀ
);

789 
USBPUMP_CLASSKIT_EVENT_DEVICE_DEPARTURE
:

791 
CONST
 
USBPUMP_CLASSKIT_EVENT_DEVICE_DEPARTURE_INFO
 * CONST

792 
pEvítInfo
 = 
pNŸifiˇti⁄
;

801 i‡((
pEvítInfo
->
pFun˘i⁄
 =
pGcdClõ¡
->pFunction) &&

802 
pGcdClõ¡
->
Fun˘i⁄H™dÀ
)

804 
	`TTUSB_OBJPRINTF
((

805 
pGcdClõ¡
->
pCœssObje˘
,

806 
UDMASK_FLOW
 | 
UDMASK_ANY
,

809 
pEvítInfo
->
pFun˘i⁄


812 
	`UsbPumpGcdClõ¡_Clo£Fun˘i⁄
(
pGcdClõ¡
);

813 
pGcdClõ¡
->
pFun˘i⁄
 = 
NULL
;

814 
pGcdClõ¡
->
hDeÁu…Pùe
 = 
NULL
;

819 
USBPUMP_USBDI_GENERIC_EVENT_DEVICE_SUSPENDED
:

821 
CONST
 
USBPUMP_USBDI_GENERIC_EVENT_DEVICE_SUSPENDED_INFO
 * CONST

822 
pEvítInfo
 = 
pNŸifiˇti⁄
;

830 i‡((
pEvítInfo
->
pFun˘i⁄
 =
pGcdClõ¡
->pFunction) &&

831 
pGcdClõ¡
->
Fun˘i⁄H™dÀ
)

833 
USTAT
 
TimîSèt
;

834 
USBPUMP_TIMER_TIMEOUT
 
Timeout
;

836 
	`TTUSB_OBJPRINTF
((

837 
pGcdClõ¡
->
pCœssObje˘
,

838 
UDMASK_FLOW
,

841 
pEvítInfo
->
pFun˘i⁄


844 
Timeout
 = 
USBPUMP_CLASS_GCD_CLIENT_SUSPEND_TIMEOUT
;

845 i‡(
pGcdClõ¡
->
iCuºPùe
 == 0)

846 
Timeout
 <<= 1;

847 
TimîSèt
 = 
	`UsbPumpTimî_Sèπ
(

848 
pGcdClõ¡
->
pPœtf‹m
,

849 &
pGcdClõ¡
->
Timî
,

850 
Timeout
,

851 
NULL


854 i‡(
TimîSèt
 !
USTAT_OK
)

856 
	`TTUSB_OBJPRINTF
((

857 
pGcdClõ¡
->
pCœssObje˘
,

858 
UDMASK_ERRORS
,

861 
TimîSèt


868 
USBPUMP_USBDI_GENERIC_EVENT_DEVICE_RESUMED
:

870 
CONST
 
USBPUMP_USBDI_GENERIC_EVENT_DEVICE_RESUMED_INFO
 *

871 
pEvítInfo
 = 
pNŸifiˇti⁄
;

879 i‡((
pEvítInfo
->
pFun˘i⁄
 =
pGcdClõ¡
->pFunction) &&

880 
pGcdClõ¡
->
Fun˘i⁄H™dÀ
)

882 
	`TTUSB_OBJPRINTF
((

883 
pGcdClõ¡
->
pCœssObje˘
,

884 
UDMASK_FLOW
,

887 
pEvítInfo
->
pFun˘i⁄


890 
pGcdClõ¡
->
NumIãøti⁄s
 =ÖGcdClõ¡->
Lo›backCou¡
;

891 
	`UsbPumpGcdClõ¡_SèπLo›backTe°
(
pGcdClõ¡
, 
TRUE
);

896 
USBPUMP_CLASSKIT_EVENT_FUNCTION_OPEN
:

898 
CONST
 
USBPUMP_CLASSKIT_EVENT_FUNCTION_OPEN_INFO
 *

899 
pEvítInfo
 = 
pNŸifiˇti⁄
;

901 
	`USBPUMP_TRACE_PARAMETER
(
pEvítInfo
);

902 
	`TTUSB_OBJPRINTF
((

903 
pGcdClõ¡
->
pCœssObje˘
,

904 
UDMASK_FLOW
,

908 
pEvítInfo
->
pFun˘i⁄
,

909 
pEvítInfo
->
nO≥nClõ¡s


914 
USBPUMP_CLASSKIT_EVENT_FUNCTION_CLOSE
:

916 
CONST
 
USBPUMP_CLASSKIT_EVENT_FUNCTION_CLOSE_INFO
 *

917 
pEvítInfo
 = 
pNŸifiˇti⁄
;

919 
	`USBPUMP_TRACE_PARAMETER
(
pEvítInfo
);

920 
	`TTUSB_OBJPRINTF
((

921 
pGcdClõ¡
->
pCœssObje˘
,

922 
UDMASK_FLOW
,

926 
pEvítInfo
->
pFun˘i⁄
,

927 
pEvítInfo
->
nO≥nClõ¡s


935 
	}
}

937 
VOID


938 
	$UsbPumpGcdClõ¡_Su•ídTimeout
(

939 
UPLATFORM
 * 
pPœtf‹m
,

940 
USBPUMP_TIMER
 * 
pTimîObje˘
,

941 
USBPUMP_MILLISECONDS
 
Now


944 
USBPUMP_CLASS_GCD_CLIENT_DATA
 * 
CONST
 
pGcdClõ¡
 =

945 
	`__TMS_CONTAINER_OF
(
pTimîObje˘
, 
USBPUMP_CLASS_GCD_CLIENT_DATA
, 
Timî
);

947 
	`USBPUMP_UNREFERENCED_PARAMETER
(
pPœtf‹m
);

948 
	`USBPUMP_UNREFERENCED_PARAMETER
(
Now
);

950 
	`UsbPumpGcdClõ¡_ResumeDev
(
pGcdClõ¡
);

951 
	}
}

977 
VOID


978 
	$UsbPumpGcdClõ¡_O≥nFun˘i⁄
(

979 
USBPUMP_CLASS_GCD_CLIENT_DATA
 * 
pGcdClõ¡
,

980 
VOID
 * 
pClõ¡H™dÀ


983 (*
pGcdClõ¡
->
CœssInCÆl
.
GíDrv
.
pO≥nFun˘i⁄Fn
)(

984 
pGcdClõ¡
->
Sessi⁄H™dÀ
,

985 
UsbPumpGcdClõ¡_O≥nFnCbFn
,

986 
pGcdClõ¡
,

987 
pGcdClõ¡
->
pFun˘i⁄
,

988 &
pGcdClõ¡
->
Fun˘i⁄InCÆl
.
CœssKôCa°
,

989 (
pGcdClõ¡
->
Fun˘i⁄InCÆl
),

990 
pClõ¡H™dÀ
,

991 &
sk_UsbPumpUsbdiFun˘i⁄Gdi_Clõ¡OutCÆl
,

992 (
sk_UsbPumpUsbdiFun˘i⁄Gdi_Clõ¡OutCÆl
)

994 
	}
}

996 
VOID


997 
	$UsbPumpGcdClõ¡_O≥nFnCbFn
(

998 
VOID
 * 
pCÆlbackCtx
,

999 
USBPUMP_USBDI_GENERIC_STATUS
 
Eº‹Code
,

1000 
USBPUMP_SESSION_HANDLE
 
Fun˘i⁄H™dÀ


1003 
USBPUMP_CLASS_GCD_CLIENT_DATA
 * 
CONST
 
pGcdClõ¡
 = 
pCÆlbackCtx
;

1005 i‡(
Eº‹Code
 !
USBPUMP_USBDI_GENERIC_STATUS_OK
)

1007 
	`TTUSB_OBJPRINTF
((
pGcdClõ¡
->
pCœssObje˘
,

1008 
UDMASK_ERRORS
,

1010 
	`UsbPumpUsbdiCœssGíîic_SètusName
(
Eº‹Code
),

1011 
Eº‹Code


1016 
pGcdClõ¡
->
Fun˘i⁄H™dÀ
 = FunctionHandle;

1017 
	`TTUSB_OBJPRINTF
((
pGcdClõ¡
->
pCœssObje˘
,

1018 
UDMASK_FLOW
,

1021 
Fun˘i⁄H™dÀ


1028 
	`UsbPumpGcdClõ¡_GëNumDevs
(
pGcdClõ¡
);

1030 
	}
}

1054 
VOID


1055 
	$UsbPumpGcdClõ¡_Clo£Fun˘i⁄
(

1056 
USBPUMP_CLASS_GCD_CLIENT_DATA
 * 
pGcdClõ¡


1063 (*
pGcdClõ¡
->
Fun˘i⁄InCÆl
.
GíDrv
.
pClo£Fn
)(

1064 
pGcdClõ¡
->
Fun˘i⁄H™dÀ
,

1065 
UsbPumpGcdClõ¡_Clo£FnCbFn
,

1066 
pGcdClõ¡


1068 
	}
}

1070 
VOID


1071 
	$UsbPumpGcdClõ¡_Clo£FnCbFn
(

1072 
VOID
 * 
pCÆlbackCtx
,

1073 
USBPUMP_USBDI_GENERIC_STATUS
 
Eº‹Code


1076 
USBPUMP_CLASS_GCD_CLIENT_DATA
 * 
CONST
 
pGcdClõ¡
 = 
pCÆlbackCtx
;

1078 i‡(
Eº‹Code
 !
USBPUMP_USBDI_GENERIC_STATUS_OK
)

1080 
	`TTUSB_OBJPRINTF
((
pGcdClõ¡
->
pCœssObje˘
,

1081 
UDMASK_ERRORS
,

1084 
	`UsbPumpUsbdiCœssGíîic_SètusName
(
Eº‹Code
),

1085 
Eº‹Code


1090 
pGcdClõ¡
->
Fun˘i⁄H™dÀ
 = 
NULL
;

1091 
	`TTUSB_OBJPRINTF
((
pGcdClõ¡
->
pCœssObje˘
,

1092 
UDMASK_FLOW
,

1096 
	}
}

1120 
VOID


1121 
	$UsbPumpGcdClõ¡_GëNumDevs
(

1122 
USBPUMP_CLASS_GCD_CLIENT_DATA
 * 
pGcdClõ¡


1125 (*
pGcdClõ¡
->
CœssInCÆl
.
GíDrv
.
pGëNumDevi˚sFn
)(

1126 
pGcdClõ¡
->
Sessi⁄H™dÀ
,

1127 
UsbPumpGcdClõ¡_GëNumDevsCbFn
,

1128 
pGcdClõ¡


1130 
	}
}

1132 
VOID


1133 
	$UsbPumpGcdClõ¡_GëNumDevsCbFn
(

1134 
VOID
 * 
pCÆlbackCtx
,

1135 
USBPUMP_USBDI_GENERIC_STATUS
 
Eº‹Code
,

1136 
UINT32
 
ulNumOfIn°™˚s


1139 
USBPUMP_CLASS_GCD_CLIENT_DATA
 * 
CONST
 
pGcdClõ¡
 = 
pCÆlbackCtx
;

1141 i‡(
Eº‹Code
 !
USBPUMP_USBDI_GENERIC_STATUS_OK
)

1143 
	`TTUSB_OBJPRINTF
((
pGcdClõ¡
->
pCœssObje˘
,

1144 
UDMASK_ERRORS
,

1147 
	`UsbPumpUsbdiCœssGíîic_SètusName
(
Eº‹Code
),

1148 
Eº‹Code


1153 
	`TTUSB_OBJPRINTF
((
pGcdClõ¡
->
pCœssObje˘
,

1154 
UDMASK_FLOW
,

1157 
ulNumOfIn°™˚s


1164 
	`UsbPumpGcdClõ¡_GëBoundDevs
(

1165 
pGcdClõ¡
,

1166 
ulNumOfIn°™˚s


1169 
	}
}

1194 
VOID


1195 
	$UsbPumpGcdClõ¡_GëBoundDevs
(

1196 
USBPUMP_CLASS_GCD_CLIENT_DATA
 * 
pGcdClõ¡
,

1197 
UINT32
 
ulNumOfIn°™˚s


1200 
USBPUMP_USBDI_FUNCTION
 ** 
pFun˘i⁄Ve˘‹
;

1201 
BYTES
 
sizeFun˘i⁄Ve˘‹
;

1203 
sizeFun˘i⁄Ve˘‹
 = (*
pFun˘i⁄Ve˘‹
Ë* 
ulNumOfIn°™˚s
;

1204 
pFun˘i⁄Ve˘‹
 = 
	`UsbPumpPœtf‹m_MÆloc
(

1205 
pGcdClõ¡
->
pPœtf‹m
,

1206 
sizeFun˘i⁄Ve˘‹


1209 i‡(
pFun˘i⁄Ve˘‹
)

1211 (*
pGcdClõ¡
->
CœssInCÆl
.
GíDrv
.
pGëBoundDevi˚sFn
)(

1212 
pGcdClõ¡
->
Sessi⁄H™dÀ
,

1213 
UsbPumpGcdClõ¡_GëBoundDevsCbFn
,

1214 
pGcdClõ¡
,

1215 
pFun˘i⁄Ve˘‹
,

1216 
sizeFun˘i⁄Ve˘‹


1221 
	`TTUSB_OBJPRINTF
((
pGcdClõ¡
->
pCœssObje˘
,

1222 
UDMASK_ERRORS
,

1225 
sizeFun˘i⁄Ve˘‹


1228 
	}
}

1230 
VOID


1231 
	$UsbPumpGcdClõ¡_GëBoundDevsCbFn
(

1232 
VOID
 * 
pCÆlbackCtx
,

1233 
USBPUMP_USBDI_GENERIC_STATUS
 
Eº‹Code
,

1234 
UINT32
 
nWrôãnFun˘i⁄
,

1235 
USBPUMP_USBDI_FUNCTION
 ** 
pFun˘i⁄Ve˘‹
,

1236 
BYTES
 
sizeFun˘i⁄Ve˘‹


1239 
USBPUMP_CLASS_GCD_CLIENT_DATA
 * 
CONST
 
pGcdClõ¡
 = 
pCÆlbackCtx
;

1241 i‡(
Eº‹Code
 !
USBPUMP_USBDI_GENERIC_STATUS_OK
)

1243 
	`TTUSB_OBJPRINTF
((
pGcdClõ¡
->
pCœssObje˘
,

1244 
UDMASK_ERRORS
,

1247 
	`UsbPumpUsbdiCœssGíîic_SètusName
(
Eº‹Code
),

1248 
Eº‹Code


1253 
UINT32
 
i
;

1255 
	`TTUSB_OBJPRINTF
((
pGcdClõ¡
->
pCœssObje˘
,

1256 
UDMASK_FLOW
 | 
UDMASK_ANY
,

1259 
nWrôãnFun˘i⁄
,

1260 
sizeFun˘i⁄Ve˘‹


1263 
i
 = 0; i < 
nWrôãnFun˘i⁄
; ++i)

1265 
USBPUMP_USBDI_FUNCTION
 * 
CONST
 
pFun˘i⁄
 =

1266 
pFun˘i⁄Ve˘‹
[
i
];

1267 
CONST
 
USBPUMP_DEVICE_SPEED
 
O≥øtögS≥ed
 =

1268 
pFun˘i⁄
->
Fun˘i⁄
.
P‹tInfo
.
O≥øtögS≥ed
;

1269 
TEXT
 * 
pDevi˚S≥edName
;

1271 i‡(
O≥øtögS≥ed
 =
USBPUMP_DEVICE_SPEED_HIGH
)

1272 
pDevi˚S≥edName
 = "HIGH";

1273 i‡(
O≥øtögS≥ed
 =
USBPUMP_DEVICE_SPEED_FULL
)

1274 
pDevi˚S≥edName
 = "FULL";

1275 i‡(
O≥øtögS≥ed
 =
USBPUMP_DEVICE_SPEED_LOW
)

1276 
pDevi˚S≥edName
 = "LOW";

1277 i‡(
O≥øtögS≥ed
 =
USBPUMP_DEVICE_SPEED_WIRELESS
)

1278 
pDevi˚S≥edName
 = "WIRELESS";

1280 
pDevi˚S≥edName
 = "Unknown";

1282 
	`USBPUMP_TRACE_PARAMETER
(
pDevi˚S≥edName
);

1284 
	`TTUSB_OBJPRINTF
((
pGcdClõ¡
->
pCœssObje˘
,

1285 
UDMASK_FLOW
 | 
UDMASK_ANY
,

1288 
i
,

1289 
pFun˘i⁄
,

1290 
pFun˘i⁄
->
Fun˘i⁄
.
P‹tInfo
.
wMaxPowî
,

1291 
pDevi˚S≥edName


1299 
	`UsbPumpGcdClõ¡_GëDevSèã
(

1300 
pGcdClõ¡
,

1301 &
pGcdClõ¡
->
Devi˚Sèã


1305 
	`UsbPumpPœtf‹m_Fªe
(

1306 
pGcdClõ¡
->
pPœtf‹m
,

1307 
pFun˘i⁄Ve˘‹
,

1308 
sizeFun˘i⁄Ve˘‹


1310 
	}
}

1335 
VOID


1336 
	$UsbPumpGcdClõ¡_GëDevSèã
(

1337 
USBPUMP_CLASS_GCD_CLIENT_DATA
 * 
pGcdClõ¡
,

1338 
USBPUMP_USBDI_GENERIC_DEVICE_STATE
 * 
pDevi˚Sèã


1342 (*
pGcdClõ¡
->
Fun˘i⁄InCÆl
.
GíDrv
.
pGëDevi˚SèãFn
)(

1343 
pGcdClõ¡
->
Fun˘i⁄H™dÀ
,

1344 
UsbPumpGcdClõ¡_GëDevSèãCbFn
,

1345 
pGcdClõ¡
,

1346 
pDevi˚Sèã


1348 
	}
}

1350 
VOID


1351 
	$UsbPumpGcdClõ¡_GëDevSèãCbFn
(

1352 
VOID
 * 
pCÆlbackCtx
,

1353 
VOID
 * 
pReque°H™dÀ
,

1354 
USBPUMP_USBDI_GENERIC_STATUS
 
Eº‹Code
,

1355 
USBPUMP_USBDI_GENERIC_DEVICE_STATE
 * 
pDevi˚Sèã


1358 
USBPUMP_CLASS_GCD_CLIENT_DATA
 * 
CONST
 
pGcdClõ¡
 = 
pCÆlbackCtx
;

1360 
	`USBPUMP_TRACE_PARAMETER
(
pReque°H™dÀ
);

1361 
	`USBPUMP_TRACE_PARAMETER
(
pDevi˚Sèã
);

1363 i‡(
Eº‹Code
 !
USBPUMP_USBDI_GENERIC_STATUS_OK
)

1365 
	`TTUSB_OBJPRINTF
((
pGcdClõ¡
->
pCœssObje˘
,

1366 
UDMASK_ERRORS
,

1369 
	`UsbPumpUsbdiCœssGíîic_SètusName
(
Eº‹Code
),

1370 
Eº‹Code


1375 
	`TTUSB_OBJPRINTF
((
pGcdClõ¡
->
pCœssObje˘
,

1376 
UDMASK_FLOW
 | 
UDMASK_ANY
,

1380 
pReque°H™dÀ
,

1381 
pDevi˚Sèã
->
fRemoved
,

1382 
pDevi˚Sèã
->
fSt›≥d
,

1383 
pDevi˚Sèã
->
fFun˘i⁄O≥√d


1389 
	`UsbPumpGcdClõ¡_GëDevDesc
(

1390 
pGcdClõ¡
,

1391 
pGcdClõ¡
->
pRódBuf„r
,

1392 
pGcdClõ¡
->
Buf„rSize


1395 
	}
}

1420 
VOID


1421 
	$UsbPumpGcdClõ¡_GëDevDesc
(

1422 
USBPUMP_CLASS_GCD_CLIENT_DATA
 * 
pGcdClõ¡
,

1423 
VOID
 * 
pBuf„r
,

1424 
BYTES
 
sizeBuf„r


1427 
VOID
 * 
pReque°H™dÀ
;

1429 
pReque°H™dÀ
 =

1430 (*
pGcdClõ¡
->
Fun˘i⁄InCÆl
.
GíDrv
.
pGëDevi˚Des¸ùt‹Fn
)(

1431 
pGcdClõ¡
->
Fun˘i⁄H™dÀ
,

1432 
UsbPumpGcdClõ¡_GëDevDescCbFn
,

1433 
pGcdClõ¡
,

1434 
pBuf„r
,

1435 
sizeBuf„r


1437 i‡(!
pReque°H™dÀ
)

1439 
	`TTUSB_OBJPRINTF
((
pGcdClõ¡
->
pCœssObje˘
,

1440 
UDMASK_ERRORS
,

1451 
	`TTUSB_OBJPRINTF
((
pGcdClõ¡
->
pCœssObje˘
,

1452 
UDMASK_FLOW
,

1455 
pReque°H™dÀ


1457 
	}
}

1459 
VOID


1460 
	$UsbPumpGcdClõ¡_GëDevDescCbFn
(

1461 
VOID
 * 
pCÆlbackCtx
,

1462 
VOID
 * 
pReque°H™dÀ
,

1463 
USBPUMP_USBDI_GENERIC_STATUS
 
Eº‹Code
,

1464 
VOID
 * 
pBuf„r
,

1465 
BYTES
 
sizeBuf„r
,

1466 
BYTES
 
nByãsRód


1469 
USBPUMP_CLASS_GCD_CLIENT_DATA
 * 
CONST
 
pGcdClõ¡
 = 
pCÆlbackCtx
;

1471 
	`USBPUMP_UNREFERENCED_PARAMETER
(
pReque°H™dÀ
);

1472 
	`USBPUMP_TRACE_PARAMETER
(
sizeBuf„r
);

1473 
	`USBPUMP_TRACE_PARAMETER
(
pBuf„r
);

1474 
	`USBPUMP_TRACE_PARAMETER
(
nByãsRód
);

1476 i‡(
Eº‹Code
 !
USBPUMP_USBDI_GENERIC_STATUS_OK
)

1478 
	`TTUSB_OBJPRINTF
((
pGcdClõ¡
->
pCœssObje˘
,

1479 
UDMASK_ERRORS
,

1482 
	`UsbPumpUsbdiCœssGíîic_SètusName
(
Eº‹Code
),

1483 
Eº‹Code


1488 
BYTES
 
i
;

1489 
USBIF_DEVDESC
 * 
CONST
 
pDevDesc
 = 
pBuf„r
;

1491 
pGcdClõ¡
->
iM™uÁ˘uªr
 = 
pDevDesc
->iManufacturer;

1492 
pGcdClõ¡
->
iProdu˘
 = 
pDevDesc
->iProduct;

1493 
pGcdClõ¡
->
iSîülNumbî
 = 
pDevDesc
->iSerialNumber;

1495 
	`TTUSB_OBJPRINTF
((
pGcdClõ¡
->
pCœssObje˘
,

1496 
UDMASK_FLOW
,

1499 
pBuf„r
, 
sizeBuf„r
, 
nByãsRód


1502 
i
 = 0; i < 
nByãsRód
; ++i)

1504 
	`TTUSB_OBJPRINTF
((
pGcdClõ¡
->
pCœssObje˘
,

1505 
UDMASK_FLOW
,

1507 ((
UINT8
 *Ë
pBuf„r
)[
i
],

1508 (((
i
 + 1) % 8)?"":"\n")

1512 
	`TTUSB_OBJPRINTF
((
pGcdClõ¡
->
pCœssObje˘
,

1513 
UDMASK_FLOW
,

1521 
	`UsbPumpGcdClõ¡_GëC⁄figDesc
(

1522 
pGcdClõ¡
,

1523 
pGcdClõ¡
->
pRódBuf„r
,

1524 
pGcdClõ¡
->
Buf„rSize
,

1528 
	}
}

1559 
VOID


1560 
	$UsbPumpGcdClõ¡_GëC⁄figDesc
(

1561 
USBPUMP_CLASS_GCD_CLIENT_DATA
 * 
pGcdClõ¡
,

1562 
VOID
 * 
pBuf„r
,

1563 
BYTES
 
sizeBuf„r
,

1564 
UINT8
 
iC⁄fig


1567 
VOID
 * 
pReque°H™dÀ
;

1569 
pReque°H™dÀ
 =

1570 (*
pGcdClõ¡
->
Fun˘i⁄InCÆl
.
GíDrv
.
pGëC⁄figDes¸ùt‹Fn
)(

1571 
pGcdClõ¡
->
Fun˘i⁄H™dÀ
,

1572 
UsbPumpGcdClõ¡_GëC⁄figDescCbFn
,

1573 
pGcdClõ¡
,

1574 
pBuf„r
,

1575 
sizeBuf„r
,

1576 
iC⁄fig


1578 i‡(!
pReque°H™dÀ
)

1580 
	`TTUSB_OBJPRINTF
((
pGcdClõ¡
->
pCœssObje˘
,

1581 
UDMASK_ERRORS
,

1593 
	`TTUSB_OBJPRINTF
((
pGcdClõ¡
->
pCœssObje˘
,

1594 
UDMASK_FLOW
,

1597 
pReque°H™dÀ


1599 
	}
}

1601 
VOID


1602 
	$UsbPumpGcdClõ¡_GëC⁄figDescCbFn
(

1603 
VOID
 * 
pCÆlbackCtx
,

1604 
VOID
 * 
pReque°H™dÀ
,

1605 
USBPUMP_USBDI_GENERIC_STATUS
 
Eº‹Code
,

1606 
VOID
 * 
pBuf„r
,

1607 
BYTES
 
sizeBuf„r
,

1608 
BYTES
 
nByãsRód


1611 
USBPUMP_CLASS_GCD_CLIENT_DATA
 * 
CONST
 
pGcdClõ¡
 = 
pCÆlbackCtx
;

1613 
	`USBPUMP_UNREFERENCED_PARAMETER
(
pReque°H™dÀ
);

1614 
	`USBPUMP_TRACE_PARAMETER
(
pBuf„r
);

1615 
	`USBPUMP_TRACE_PARAMETER
(
sizeBuf„r
);

1616 
	`USBPUMP_TRACE_PARAMETER
(
nByãsRód
);

1618 i‡(
Eº‹Code
 !
USBPUMP_USBDI_GENERIC_STATUS_OK
)

1620 
	`TTUSB_OBJPRINTF
((
pGcdClõ¡
->
pCœssObje˘
,

1621 
UDMASK_ERRORS
,

1624 
	`UsbPumpUsbdiCœssGíîic_SètusName
(
Eº‹Code
),

1625 
Eº‹Code


1630 
BYTES
 
i
;

1631 
	`TTUSB_OBJPRINTF
((
pGcdClõ¡
->
pCœssObje˘
,

1632 
UDMASK_FLOW
,

1635 
pBuf„r
, 
sizeBuf„r
, 
nByãsRód


1637 
i
 = 0; i < 
nByãsRód
; ++i)

1639 
	`TTUSB_OBJPRINTF
((
pGcdClõ¡
->
pCœssObje˘
,

1640 
UDMASK_FLOW
,

1642 ((
UINT8
 *Ë
pBuf„r
)[
i
],

1643 (((
i
 + 1) % 8)?"":"\n")

1646 
	`TTUSB_OBJPRINTF
((
pGcdClõ¡
->
pCœssObje˘
,

1647 
UDMASK_FLOW
,

1656 
	`UsbPumpGcdClõ¡_GëC⁄figTªe
(

1657 
pGcdClõ¡
,

1658 
pGcdClõ¡
->
pC⁄figRoŸ
,

1662 
	}
}

1689 
VOID


1690 
	$UsbPumpGcdClõ¡_GëC⁄figTªe
(

1691 
USBPUMP_CLASS_GCD_CLIENT_DATA
 * 
pGcdClõ¡
,

1692 
VOID
 * 
pBuf„r
,

1693 
UINT32
 
sizeBuf„r


1697 (*
pGcdClõ¡
->
Fun˘i⁄InCÆl
.
GíDrv
.
pGëC⁄figTªeFn
)(

1698 
pGcdClõ¡
->
Fun˘i⁄H™dÀ
,

1699 
UsbPumpGcdClõ¡_GëC⁄figTªeCbFn
,

1700 
pGcdClõ¡
,

1701 
pBuf„r
,

1702 
sizeBuf„r


1704 
	}
}

1706 
VOID


1707 
	$UsbPumpGcdClõ¡_GëC⁄figTªeCbFn
(

1708 
VOID
 * 
pCÆlbackCtx
,

1709 
VOID
 * 
pReque°H™dÀ
,

1710 
USBPUMP_USBDI_GENERIC_STATUS
 
Eº‹Code
,

1711 
VOID
 * 
pBuf„r
,

1712 
BYTES
 
sizeBuf„r
,

1713 
BYTES
 
nByãsRód


1716 
USBPUMP_CLASS_GCD_CLIENT_DATA
 * 
CONST
 
pGcdClõ¡
 = 
pCÆlbackCtx
;

1718 
	`USBPUMP_UNREFERENCED_PARAMETER
(
pReque°H™dÀ
);

1719 
	`USBPUMP_TRACE_PARAMETER
(
sizeBuf„r
);

1721 i‡(
Eº‹Code
 !
USBPUMP_USBDI_GENERIC_STATUS_OK
)

1723 
	`TTUSB_OBJPRINTF
((
pGcdClõ¡
->
pCœssObje˘
,

1724 
UDMASK_ERRORS
,

1727 
	`UsbPumpUsbdiCœssGíîic_SètusName
(
Eº‹Code
),

1728 
Eº‹Code


1730 i‡(
Eº‹Code
 =
USBPUMP_USBDI_GENERIC_STATUS_BUFFER_TOO_SMALL
)

1738 
pGcdClõ¡
->
pC⁄figRoŸ
 =

1739 
	`UsbPumpPœtf‹m_MÆloc
(

1740 
pGcdClõ¡
->
pPœtf‹m
,

1741 
nByãsRód


1744 
	`UsbPumpGcdClõ¡_GëC⁄figTªe
(

1745 
pGcdClõ¡
,

1746 
pGcdClõ¡
->
pC⁄figRoŸ
,

1747 
nByãsRód


1753 
USBPUMP_USBDI_CFG_NODE
 * 
CONST
 
pC⁄figRoŸ
 = 
pBuf„r
;

1755 
	`TTUSB_OBJPRINTF
((
pGcdClõ¡
->
pCœssObje˘
,

1756 
UDMASK_FLOW
,

1759 
pC⁄figRoŸ
, 
sizeBuf„r
, 
nByãsRód


1762 
	`UsbPumpGcdClõ¡_P¨£C⁄figTªe
(

1763 
pGcdClõ¡
,

1764 
pC⁄figRoŸ


1767 
pGcdClõ¡
->
NumIãøti⁄s
 =ÖGcdClõ¡->
Lo›backCou¡
;

1768 
	`UsbPumpGcdClõ¡_SèπLo›backTe°
(
pGcdClõ¡
, 
TRUE
);

1770 
	}
}

1804 
VOID


1805 
	$UsbPumpGcdClõ¡_WrôeCål
(

1806 
USBPUMP_CLASS_GCD_CLIENT_DATA
 * 
pGcdClõ¡
,

1807 
USBPUMP_USBDI_PIPE_HANDLE
 
hPùe
,

1808 
UINT8
 
bmReque°Ty≥
,

1809 
UINT8
 
bReque°
,

1810 
UINT16
 
wVÆue
,

1811 
UINT16
 
wIndex
,

1812 
VOID
 * 
pBuf„r
,

1813 
BYTES
 
sizeBuf„r
,

1814 
USBPUMP_USBDI_GENERIC_TIMEOUT
 
mûli£c⁄ds


1817 
VOID
 * 
pReque°H™dÀ
;

1819 
pReque°H™dÀ
 =

1820 (*
pGcdClõ¡
->
Fun˘i⁄InCÆl
.
GíDrv
.
pWrôeC⁄åﬁPùeFn
)(

1821 
pGcdClõ¡
->
Fun˘i⁄H™dÀ
,

1822 
UsbPumpGcdClõ¡_WrôeCålCbFn
,

1823 
pGcdClõ¡
,

1824 
hPùe
,

1825 
bmReque°Ty≥
,

1826 
bReque°
,

1827 
wVÆue
,

1828 
wIndex
,

1829 
pBuf„r
,

1830 
sizeBuf„r
,

1831 
mûli£c⁄ds


1834 i‡(!
pReque°H™dÀ
)

1836 
	`TTUSB_OBJPRINTF
((
pGcdClõ¡
->
pCœssObje˘
,

1837 
UDMASK_ERRORS
,

1848 
	`TTUSB_OBJPRINTF
((
pGcdClõ¡
->
pCœssObje˘
,

1849 
UDMASK_FLOW
,

1852 
pReque°H™dÀ


1854 
	}
}

1856 
VOID


1857 
	$UsbPumpGcdClõ¡_WrôeCålCbFn
(

1858 
VOID
 * 
pCÆlbackCtx
,

1859 
VOID
 * 
pReque°H™dÀ
,

1860 
USBPUMP_USBDI_GENERIC_STATUS
 
Eº‹Code
,

1861 
VOID
 
CONST
 * 
pBuf„r
,

1862 
BYTES
 
sizeBuf„r
,

1863 
BYTES
 
nByãsWrôãn


1866 
USBPUMP_CLASS_GCD_CLIENT_DATA
 * 
CONST
 
pGcdClõ¡
 = 
pCÆlbackCtx
;

1868 
	`USBPUMP_UNREFERENCED_PARAMETER
(
pReque°H™dÀ
);

1869 
	`USBPUMP_TRACE_PARAMETER
(
pBuf„r
);

1870 
	`USBPUMP_TRACE_PARAMETER
(
sizeBuf„r
);

1871 
	`USBPUMP_TRACE_PARAMETER
(
nByãsWrôãn
);

1873 i‡(
Eº‹Code
 !
USBPUMP_USBDI_GENERIC_STATUS_OK
)

1875 
	`TTUSB_OBJPRINTF
((
pGcdClõ¡
->
pCœssObje˘
,

1876 
UDMASK_ERRORS
,

1879 
	`UsbPumpUsbdiCœssGíîic_SètusName
(
Eº‹Code
),

1880 
Eº‹Code


1885 
	`TTUSB_OBJPRINTF
((
pGcdClõ¡
->
pCœssObje˘
,

1886 
UDMASK_FLOW
,

1889 
pBuf„r
, 
sizeBuf„r
, 
nByãsWrôãn


1891 i‡(
pGcdClõ¡
->
NumIãøti⁄s
 > 0)

1893 
	`UsbPumpGcdClõ¡_SèπLo›backTe°
(
pGcdClõ¡
, 
FALSE
);

1901 
	`UsbPumpGcdClõ¡_Su•ídDev
(
pGcdClõ¡
);

1904 
	}
}

1933 
VOID


1934 
	$UsbPumpGcdClõ¡_WrôeBulkI¡
(

1935 
USBPUMP_CLASS_GCD_CLIENT_DATA
 * 
pGcdClõ¡
,

1936 
USBPUMP_USBDI_PIPE_HANDLE
 
hPùe
,

1937 
VOID
 * 
pBuf„r
,

1938 
BYTES
 
sizeBuf„r
,

1939 
USBPUMP_USBDI_GENERIC_TIMEOUT
 
mûli£c⁄ds
,

1940 
BOOL
 
fFuŒTøns„r


1943 
VOID
 * 
pReque°H™dÀ
;

1945 
pReque°H™dÀ
 =

1946 (*
pGcdClõ¡
->
Fun˘i⁄InCÆl
.
GíDrv
.
pWrôeBulkI¡PùeFn
)(

1947 
pGcdClõ¡
->
Fun˘i⁄H™dÀ
,

1948 
UsbPumpGcdClõ¡_WrôeBulkI¡CbFn
,

1949 
pGcdClõ¡
,

1950 
hPùe
,

1951 
pBuf„r
,

1952 
sizeBuf„r
,

1953 
mûli£c⁄ds
,

1954 
fFuŒTøns„r


1956 i‡(!
pReque°H™dÀ
)

1958 
	`TTUSB_OBJPRINTF
((
pGcdClõ¡
->
pCœssObje˘
,

1959 
UDMASK_ERRORS
,

1971 
	`TTUSB_OBJPRINTF
((
pGcdClõ¡
->
pCœssObje˘
,

1972 
UDMASK_FLOW
,

1975 
pReque°H™dÀ
,

1976 
hPùe
,

1977 
pBuf„r
,

1978 
sizeBuf„r


1980 
	}
}

1982 
VOID


1983 
	$UsbPumpGcdClõ¡_WrôeBulkI¡CbFn
(

1984 
VOID
 * 
pCÆlbackCtx
,

1985 
VOID
 * 
pReque°H™dÀ
,

1986 
USBPUMP_USBDI_GENERIC_STATUS
 
Eº‹Code
,

1987 
VOID
 
CONST
 * 
pBuf„r
,

1988 
BYTES
 
sizeBuf„r
,

1989 
BYTES
 
nByãsWrôãn


1992 
USBPUMP_CLASS_GCD_CLIENT_DATA
 * 
CONST
 
pGcdClõ¡
 = 
pCÆlbackCtx
;

1994 
	`USBPUMP_UNREFERENCED_PARAMETER
(
pReque°H™dÀ
);

1995 
	`USBPUMP_TRACE_PARAMETER
(
pBuf„r
);

1996 
	`USBPUMP_TRACE_PARAMETER
(
sizeBuf„r
);

1997 
	`USBPUMP_TRACE_PARAMETER
(
nByãsWrôãn
);

1998 
	`USBPUMP_TRACE_PARAMETER
(
pGcdClõ¡
);

2000 i‡(
Eº‹Code
 !
USBPUMP_USBDI_GENERIC_STATUS_OK
)

2002 
	`TTUSB_OBJPRINTF
((
pGcdClõ¡
->
pCœssObje˘
,

2003 
UDMASK_ERRORS
,

2006 
	`UsbPumpUsbdiCœssGíîic_SètusName
(
Eº‹Code
),

2007 
Eº‹Code


2012 
	`TTUSB_OBJPRINTF
((
pGcdClõ¡
->
pCœssObje˘
,

2013 
UDMASK_FLOW
,

2016 
pBuf„r
, 
sizeBuf„r
, 
nByãsWrôãn


2019 
	}
}

2051 
VOID


2052 
	$UsbPumpGcdClõ¡_WrôeIsoch
(

2053 
USBPUMP_CLASS_GCD_CLIENT_DATA
 * 
pGcdClõ¡
,

2054 
USBPUMP_USBDI_PIPE_HANDLE
 
hPùe
,

2055 
VOID
 * 
pBuf„r
,

2056 
BYTES
 
sizeBuf„r
,

2057 
USBPUMP_USBDI_GENERIC_TIMEOUT
 
mûli£c⁄ds
,

2058 
USBPUMP_ISOCH_PACKET_DESCR
 * 
pIsochDes¸
,

2059 
BYTES
 
IsochDes¸Size
,

2060 
UINT32
 
IsochSèπFøme
,

2061 
BOOL
 
fAßp


2064 
VOID
 * 
pReque°H™dÀ
;

2066 
pReque°H™dÀ
 =

2067 (*
pGcdClõ¡
->
Fun˘i⁄InCÆl
.
GíDrv
.
pWrôeIsochPùeFn
)(

2068 
pGcdClõ¡
->
Fun˘i⁄H™dÀ
,

2069 
UsbPumpGcdClõ¡_WrôeIsochCbFn
,

2070 
pGcdClõ¡
,

2071 
hPùe
,

2072 
pBuf„r
,

2073 
sizeBuf„r
,

2074 
mûli£c⁄ds
,

2075 
pIsochDes¸
,

2076 
IsochDes¸Size
,

2077 
IsochSèπFøme
,

2078 
fAßp


2080 i‡(!
pReque°H™dÀ
)

2082 
	`TTUSB_OBJPRINTF
((
pGcdClõ¡
->
pCœssObje˘
,

2083 
UDMASK_ERRORS
,

2095 
	`TTUSB_OBJPRINTF
((
pGcdClõ¡
->
pCœssObje˘
,

2096 
UDMASK_FLOW
,

2099 
pReque°H™dÀ
,

2100 
hPùe
,

2101 
pBuf„r
,

2102 
sizeBuf„r


2104 
	}
}

2106 
VOID


2107 
	$UsbPumpGcdClõ¡_WrôeIsochCbFn
(

2108 
VOID
 * 
pCÆlbackCtx
,

2109 
VOID
 * 
pReque°H™dÀ
,

2110 
USBPUMP_USBDI_GENERIC_STATUS
 
Eº‹Code
,

2111 
VOID
 
CONST
 * 
pBuf„r
,

2112 
BYTES
 
sizeBuf„r
,

2113 
BYTES
 
nByãsWrôãn
,

2114 
USBPUMP_ISOCH_PACKET_DESCR
 * 
pIsochDes¸
,

2115 
BYTES
 
IsochDes¸Size
,

2116 
UINT32
 
IsochSèπFøme
,

2117 
BYTES
 
nIsochEºs


2120 
USBPUMP_CLASS_GCD_CLIENT_DATA
 * 
CONST
 
pGcdClõ¡
 = 
pCÆlbackCtx
;

2122 
	`USBPUMP_UNREFERENCED_PARAMETER
(
pReque°H™dÀ
);

2123 
	`USBPUMP_TRACE_PARAMETER
(
pBuf„r
);

2124 
	`USBPUMP_TRACE_PARAMETER
(
sizeBuf„r
);

2125 
	`USBPUMP_TRACE_PARAMETER
(
nByãsWrôãn
);

2126 
	`USBPUMP_UNREFERENCED_PARAMETER
(
pIsochDes¸
);

2127 
	`USBPUMP_UNREFERENCED_PARAMETER
(
IsochDes¸Size
);

2128 
	`USBPUMP_UNREFERENCED_PARAMETER
(
IsochSèπFøme
);

2129 
	`USBPUMP_TRACE_PARAMETER
(
nIsochEºs
);

2131 i‡(
Eº‹Code
 !
USBPUMP_USBDI_GENERIC_STATUS_OK
)

2133 
	`TTUSB_OBJPRINTF
((
pGcdClõ¡
->
pCœssObje˘
,

2134 
UDMASK_ERRORS
,

2137 
	`UsbPumpUsbdiCœssGíîic_SètusName
(
Eº‹Code
),

2138 
Eº‹Code


2143 
UINT
 
nIsochDesc
;

2144 
USBPUMP_CLASS_GCD_CLIENT_PIPE_CONTEXT
 * 
CONST
 
pPùeCtx
 =

2145 &
pGcdClõ¡
->
PùeCtx
[pGcdClõ¡->
iCuºPùe
 + 1];

2147 
	`TTUSB_OBJPRINTF
((
pGcdClõ¡
->
pCœssObje˘
,

2148 
UDMASK_FLOW
,

2152 
pBuf„r
, 
sizeBuf„r
, 
nByãsWrôãn
, 
nIsochEºs


2160 
nIsochDesc
 = 
	`UsbPumpGcdClõ¡_InôIsochPackëDesc
(

2161 
pGcdClõ¡
,

2162 
pPùeCtx


2165 
	`UsbPumpGcdClõ¡_RódIsoch
(

2166 
pGcdClõ¡
,

2167 
pPùeCtx
->
pPùe
->
hPùe
,

2168 
pGcdClõ¡
->
pRódBuf„r
,

2169 
nIsochDesc
 * 
pPùeCtx
->
pPùe
->
wMaxPackëSize
,

2171 
pGcdClõ¡
->
IsochDesc
,

2172 
nIsochDesc
 * (
USBPUMP_ISOCH_PACKET_DESCR
),

2174 
TRUE


2177 
	}
}

2205 
VOID


2206 
	$UsbPumpGcdClõ¡_RódBulkI¡
(

2207 
USBPUMP_CLASS_GCD_CLIENT_DATA
 * 
pGcdClõ¡
,

2208 
USBPUMP_USBDI_PIPE_HANDLE
 
hPùe
,

2209 
VOID
 * 
pBuf„r
,

2210 
BYTES
 
sizeBuf„r
,

2211 
USBPUMP_USBDI_GENERIC_TIMEOUT
 
mûli£c⁄ds


2214 
VOID
 * 
pReque°H™dÀ
;

2216 
pReque°H™dÀ
 =

2217 (*
pGcdClõ¡
->
Fun˘i⁄InCÆl
.
GíDrv
.
pRódBulkI¡PùeFn
)(

2218 
pGcdClõ¡
->
Fun˘i⁄H™dÀ
,

2219 
UsbPumpGcdClõ¡_RódBulkI¡CbFn
,

2220 
pGcdClõ¡
,

2221 
hPùe
,

2222 
pBuf„r
,

2223 
sizeBuf„r
,

2224 
mûli£c⁄ds


2226 i‡(!
pReque°H™dÀ
)

2228 
	`TTUSB_OBJPRINTF
((
pGcdClõ¡
->
pCœssObje˘
,

2229 
UDMASK_ERRORS
,

2241 
	`TTUSB_OBJPRINTF
((
pGcdClõ¡
->
pCœssObje˘
,

2242 
UDMASK_FLOW
,

2245 
pReque°H™dÀ
,

2246 
hPùe
,

2247 
pBuf„r
,

2248 
sizeBuf„r


2250 
	}
}

2252 
VOID


2253 
	$UsbPumpGcdClõ¡_RódBulkI¡CbFn
(

2254 
VOID
 * 
pCÆlbackCtx
,

2255 
VOID
 * 
pReque°H™dÀ
,

2256 
USBPUMP_USBDI_GENERIC_STATUS
 
Eº‹Code
,

2257 
VOID
 * 
pBuf„r
,

2258 
BYTES
 
sizeBuf„r
,

2259 
BYTES
 
nByãsRód


2262 
USBPUMP_CLASS_GCD_CLIENT_DATA
 * 
CONST
 
pGcdClõ¡
 = 
pCÆlbackCtx
;

2264 
	`USBPUMP_UNREFERENCED_PARAMETER
(
pReque°H™dÀ
);

2265 
	`USBPUMP_TRACE_PARAMETER
(
sizeBuf„r
);

2267 i‡(
Eº‹Code
 !
USBPUMP_USBDI_GENERIC_STATUS_OK
)

2269 
	`TTUSB_OBJPRINTF
((
pGcdClõ¡
->
pCœssObje˘
,

2270 
UDMASK_ERRORS
,

2273 
	`UsbPumpUsbdiCœssGíîic_SètusName
(
Eº‹Code
),

2274 
Eº‹Code


2279 
BOOL
 
fResu…
;

2280 
USBPUMP_CLASS_GCD_CLIENT_PIPE_CONTEXT
 * 
CONST
 
pPùeCtx
 =

2281 &
pGcdClõ¡
->
PùeCtx
[pGcdClõ¡->
iCuºPùe
];

2283 i‡(! 
pGcdClõ¡
->
fPîf‹m™˚Mósuª
)

2285 
fResu…
 = 
	`UsbPumpGcdClõ¡_CheckTe°D©a
(

2286 
pBuf„r
,

2287 
nByãsRód


2292 
fResu…
 = 
TRUE
;

2295 
	`USBPUMP_TRACE_PARAMETER
(
fResu…
);

2297 
	`TTUSB_OBJPRINTF
((
pGcdClõ¡
->
pCœssObje˘
,

2298 
UDMASK_FLOW
,

2302 
pBuf„r
, 
sizeBuf„r
, 
nByãsRód
, 
fResu…


2309 
	`UsbPumpGcdClõ¡_Re£tPùe
(

2310 
pGcdClõ¡
,

2311 
pPùeCtx
->
pPùe
->
hPùe
,

2312 
USBPUMP_CLASS_GCD_CLIENT_RESET_PIPE_FLAGS


2315 
	}
}

2347 
VOID


2348 
	$UsbPumpGcdClõ¡_RódIsoch
(

2349 
USBPUMP_CLASS_GCD_CLIENT_DATA
 * 
pGcdClõ¡
,

2350 
USBPUMP_USBDI_PIPE_HANDLE
 
hPùe
,

2351 
VOID
 * 
pBuf„r
,

2352 
BYTES
 
sizeBuf„r
,

2353 
USBPUMP_USBDI_GENERIC_TIMEOUT
 
mûli£c⁄ds
,

2354 
USBPUMP_ISOCH_PACKET_DESCR
 * 
pIsochDes¸
,

2355 
BYTES
 
IsochDes¸Size
,

2356 
UINT32
 
IsochSèπFøme
,

2357 
BOOL
 
fAßp


2360 
VOID
 * 
pReque°H™dÀ
;

2362 
pReque°H™dÀ
 =

2363 (*
pGcdClõ¡
->
Fun˘i⁄InCÆl
.
GíDrv
.
pRódIsochPùeFn
)(

2364 
pGcdClõ¡
->
Fun˘i⁄H™dÀ
,

2365 
UsbPumpGcdClõ¡_RódIsochCbFn
,

2366 
pGcdClõ¡
,

2367 
hPùe
,

2368 
pBuf„r
,

2369 
sizeBuf„r
,

2370 
mûli£c⁄ds
,

2371 
pIsochDes¸
,

2372 
IsochDes¸Size
,

2373 
IsochSèπFøme
,

2374 
fAßp


2376 i‡(!
pReque°H™dÀ
)

2378 
	`TTUSB_OBJPRINTF
((
pGcdClõ¡
->
pCœssObje˘
,

2379 
UDMASK_ERRORS
,

2391 
	`TTUSB_OBJPRINTF
((
pGcdClõ¡
->
pCœssObje˘
,

2392 
UDMASK_FLOW
,

2395 
pReque°H™dÀ
,

2396 
hPùe
,

2397 
pBuf„r
,

2398 
sizeBuf„r


2400 
	}
}

2402 
VOID


2403 
	$UsbPumpGcdClõ¡_RódIsochCbFn
(

2404 
VOID
 * 
pCÆlbackCtx
,

2405 
VOID
 * 
pReque°H™dÀ
,

2406 
USBPUMP_USBDI_GENERIC_STATUS
 
Eº‹Code
,

2407 
VOID
 * 
pBuf„r
,

2408 
BYTES
 
sizeBuf„r
,

2409 
BYTES
 
nByãsRód
,

2410 
USBPUMP_ISOCH_PACKET_DESCR
 * 
pIsochDes¸
,

2411 
BYTES
 
IsochDes¸Size
,

2412 
UINT32
 
IsochSèπFøme
,

2413 
BYTES
 
nIsochEºs


2416 
USBPUMP_CLASS_GCD_CLIENT_DATA
 * 
CONST
 
pGcdClõ¡
 = 
pCÆlbackCtx
;

2418 
	`USBPUMP_UNREFERENCED_PARAMETER
(
pReque°H™dÀ
);

2419 
	`USBPUMP_TRACE_PARAMETER
(
sizeBuf„r
);

2420 
	`USBPUMP_UNREFERENCED_PARAMETER
(
pIsochDes¸
);

2421 
	`USBPUMP_UNREFERENCED_PARAMETER
(
IsochDes¸Size
);

2422 
	`USBPUMP_UNREFERENCED_PARAMETER
(
IsochSèπFøme
);

2423 
	`USBPUMP_TRACE_PARAMETER
(
nIsochEºs
);

2425 i‡(
Eº‹Code
 !
USBPUMP_USBDI_GENERIC_STATUS_OK
)

2427 
	`TTUSB_OBJPRINTF
((
pGcdClõ¡
->
pCœssObje˘
,

2428 
UDMASK_ERRORS
,

2431 
	`UsbPumpUsbdiCœssGíîic_SètusName
(
Eº‹Code
),

2432 
Eº‹Code


2437 
BOOL
 
fResu…
;

2438 
USBPUMP_CLASS_GCD_CLIENT_PIPE_CONTEXT
 * 
CONST
 
pPùeCtx
 =

2439 &
pGcdClõ¡
->
PùeCtx
[pGcdClõ¡->
iCuºPùe
];

2441 i‡(! 
pGcdClõ¡
->
fPîf‹m™˚Mósuª
)

2443 
fResu…
 = 
	`UsbPumpGcdClõ¡_CheckTe°D©a
(

2444 
pBuf„r
,

2445 
nByãsRód


2450 
fResu…
 = 
TRUE
;

2453 
	`USBPUMP_TRACE_PARAMETER
(
fResu…
);

2455 
	`TTUSB_OBJPRINTF
((
pGcdClõ¡
->
pCœssObje˘
,

2456 
UDMASK_FLOW
,

2460 
pBuf„r
, 
sizeBuf„r
, 
nByãsRód
, 
fResu…
, 
nIsochEºs


2467 
	`UsbPumpGcdClõ¡_Re£tPùe
(

2468 
pGcdClõ¡
,

2469 
pPùeCtx
->
pPùe
->
hPùe
,

2470 
USBPUMP_CLASS_GCD_CLIENT_RESET_PIPE_FLAGS


2473 
	}
}

2496 
VOID


2497 
	$UsbPumpGcdClõ¡_Su•ídDev
(

2498 
USBPUMP_CLASS_GCD_CLIENT_DATA
 * 
pGcdClõ¡


2501 
	`TTUSB_OBJPRINTF
((

2502 
pGcdClõ¡
->
pCœssObje˘
,

2503 
UDMASK_FLOW
 | 
UDMASK_ANY
,

2505 
pGcdClõ¡
->
iCuºPùe
,

2506 
pGcdClõ¡
->
iCuºPùe
 + 1

2509 i‡(
pGcdClõ¡
->
fPîf‹m™˚Mósuª
 &&ÖGcdClõ¡->
NumIãøti⁄s
 == 0)

2511 
USBPUMP_CLASS_GCD_CLIENT_PIPE_CONTEXT
 * 
CONST
 
pPùeCtx
 =

2512 &
pGcdClõ¡
->
PùeCtx
[pGcdClõ¡->
iCuºPùe
];

2513 
UINT32
 
TimeTick
;

2514 
UINT32
 
Byãs
;

2515 
UINT32
 
ByãsPîSec⁄d
;

2516 
UINT
 
nLo›back
;

2518 i‡(
pGcdClõ¡
->
EndTimeTick
 >ÖGcdClõ¡->
SèπTimeTick
)

2519 
TimeTick
 = 
pGcdClõ¡
->
EndTimeTick
 -

2520 
pGcdClõ¡
->
SèπTimeTick
;

2522 
TimeTick
 = 
pGcdClõ¡
->
EndTimeTick
 +

2523 (0 - 
pGcdClõ¡
->
SèπTimeTick
);

2525 i‡(
pPùeCtx
->
bmAâribuãs
 =
USB_bmAâr_INT
 &&

2526 
pPùeCtx
->
pPùe
->
wMaxPackëSize
 < 512 &&

2527 
pGcdClõ¡
->
Lo›backCou¡
 > 
GCD_CLIENT_MAX_INT_COUNT


2530 
nLo›back
 = 
GCD_CLIENT_MAX_INT_COUNT
;

2534 
nLo›back
 = 
pGcdClõ¡
->
Lo›backCou¡
;

2537 
Byãs
 = 
pGcdClõ¡
->
Buf„rSize
 * 2 * 
nLo›back
;

2538 
ByãsPîSec⁄d
 = 
Byãs
 / 
TimeTick
 *

2539 
	`πems_˛ock_gë_ticks_≥r_£c⁄d
();

2541 
	`TTUSB_OBJPRINTF
((

2542 
pGcdClõ¡
->
pCœssObje˘
,

2543 
UDMASK_ANY
 | 
UDMASK_FLOW
,

2546 
pGcdClõ¡
->
Buf„rSize
,

2547 
nLo›back
,

2548 
Byãs
,

2549 
TimeTick


2552 i‡(
ByãsPîSec⁄d
 > 1024)

2554 
ByãsPîSec⁄d
 /= 1024;

2555 
	`TTUSB_OBJPRINTF
((

2556 
pGcdClõ¡
->
pCœssObje˘
,

2557 
UDMASK_ANY
 | 
UDMASK_FLOW
,

2559 
ByãsPîSec⁄d


2564 
	`TTUSB_OBJPRINTF
((

2565 
pGcdClõ¡
->
pCœssObje˘
,

2566 
UDMASK_ANY
 | 
UDMASK_FLOW
,

2568 
ByãsPîSec⁄d


2573 
pGcdClõ¡
->
iCuºPùe
 += 2;

2574 i‡(
pGcdClõ¡
->
iCuºPùe
 >pGcdClõ¡->
nPùes
)

2576 
pGcdClõ¡
->
iCuºPùe
 = 0;

2577 
	`TTUSB_OBJPRINTF
((

2578 
pGcdClõ¡
->
pCœssObje˘
,

2579 
UDMASK_FLOW
 | 
UDMASK_ANY
,

2585 (*
pGcdClõ¡
->
Fun˘i⁄InCÆl
.
GíDrv
.
pSu•ídDevi˚Fn
)(

2586 
pGcdClõ¡
->
Fun˘i⁄H™dÀ
,

2587 
UsbPumpGcdClõ¡_Su•ídDevCbFn
,

2588 
pGcdClõ¡


2590 
	}
}

2592 
VOID


2593 
	$UsbPumpGcdClõ¡_Su•ídDevCbFn
(

2594 
VOID
 * 
pCÆlbackCtx
,

2595 
VOID
 * 
pReque°H™dÀ
,

2596 
USBPUMP_USBDI_GENERIC_STATUS
 
Eº‹Code


2599 
USBPUMP_CLASS_GCD_CLIENT_DATA
 * 
CONST
 
pGcdClõ¡
 = 
pCÆlbackCtx
;

2601 
	`USBPUMP_UNREFERENCED_PARAMETER
(
pReque°H™dÀ
);

2602 
	`USBPUMP_TRACE_PARAMETER
(
pGcdClõ¡
);

2604 i‡(
Eº‹Code
 !
USBPUMP_USBDI_GENERIC_STATUS_OK
)

2606 
	`TTUSB_OBJPRINTF
((
pGcdClõ¡
->
pCœssObje˘
,

2607 
UDMASK_ERRORS
,

2610 
	`UsbPumpUsbdiCœssGíîic_SètusName
(
Eº‹Code
),

2611 
Eº‹Code


2616 
	`TTUSB_OBJPRINTF
((
pGcdClõ¡
->
pCœssObje˘
,

2617 
UDMASK_FLOW
,

2621 
	}
}

2644 
VOID


2645 
	$UsbPumpGcdClõ¡_ResumeDev
(

2646 
USBPUMP_CLASS_GCD_CLIENT_DATA
 * 
pGcdClõ¡


2650 (*
pGcdClõ¡
->
Fun˘i⁄InCÆl
.
GíDrv
.
pResumeDevi˚Fn
)(

2651 
pGcdClõ¡
->
Fun˘i⁄H™dÀ
,

2652 
UsbPumpGcdClõ¡_ResumeDevCbFn
,

2653 
pGcdClõ¡


2655 
	}
}

2657 
VOID


2658 
	$UsbPumpGcdClõ¡_ResumeDevCbFn
(

2659 
VOID
 * 
pCÆlbackCtx
,

2660 
VOID
 * 
pReque°H™dÀ
,

2661 
USBPUMP_USBDI_GENERIC_STATUS
 
Eº‹Code


2664 
USBPUMP_CLASS_GCD_CLIENT_DATA
 * 
CONST
 
pGcdClõ¡
 = 
pCÆlbackCtx
;

2666 
	`USBPUMP_UNREFERENCED_PARAMETER
(
pReque°H™dÀ
);

2667 
	`USBPUMP_TRACE_PARAMETER
(
pGcdClõ¡
);

2669 i‡(
Eº‹Code
 !
USBPUMP_USBDI_GENERIC_STATUS_OK
)

2671 
	`TTUSB_OBJPRINTF
((
pGcdClõ¡
->
pCœssObje˘
,

2672 
UDMASK_ERRORS
,

2675 
	`UsbPumpUsbdiCœssGíîic_SètusName
(
Eº‹Code
),

2676 
Eº‹Code


2681 
	`TTUSB_OBJPRINTF
((
pGcdClõ¡
->
pCœssObje˘
,

2682 
UDMASK_FLOW
,

2686 
	}
}

2711 
VOID


2712 
	$UsbPumpGcdClõ¡_Re£tPùe
(

2713 
USBPUMP_CLASS_GCD_CLIENT_DATA
 * 
pGcdClõ¡
,

2714 
USBPUMP_USBDI_PIPE_HANDLE
 
hPùe
,

2715 
UINT32
 
Re£tPùeFœgs


2718 
USBPUMP_CLASS_GCD_CLIENT_PIPE_CONTEXT
 * 
pPùeCtx
;

2720 i‡(
pGcdClõ¡
->
NumIãøti⁄s
 > 1)

2722 --
pGcdClõ¡
->
NumIãøti⁄s
;

2723 
	`UsbPumpGcdClõ¡_SèπLo›back
(
pGcdClõ¡
);

2727 
pGcdClõ¡
->
EndTimeTick
 =

2728 
	`πems_˛ock_gë_ticks_sö˚_boŸ
();

2730 
pPùeCtx
 = &
pGcdClõ¡
->
PùeCtx
[pGcdClõ¡->
iCuºPùe
];

2731 
pGcdClõ¡
->
NumIãøti⁄s
 = 0;

2732 i‡(
pPùeCtx
->
bmAâribuãs
 =
USB_bmAâr_ISO
 ||

2733 
pPùeCtx
->
bmAâribuãs
 =
USB_bmAâr_INT
)

2735 
	`UsbPumpGcdClõ¡_WrôeCål
(

2736 
pGcdClõ¡
,

2737 
pGcdClõ¡
->
hDeÁu…Pùe
,

2738  
USB_bmReque°Ty≥_HSIFC
,

2739  
USB_bReque°_SET_INTERFACE
,

2741  
pPùeCtx
->
bI¡îÁ˚Numbî
,

2742 
NULL
,

2749 
VOID
 * 
pReque°H™dÀ
;

2751 
pReque°H™dÀ
 =

2752 (*
pGcdClõ¡
->
Fun˘i⁄InCÆl
.
GíDrv
.
pRe£tPùeFn
)(

2753 
pGcdClõ¡
->
Fun˘i⁄H™dÀ
,

2754 
UsbPumpGcdClõ¡_Re£tPùeCbFn
,

2755 
pGcdClõ¡
,

2756 
hPùe
,

2757 
Re£tPùeFœgs


2759 i‡(!
pReque°H™dÀ
)

2761 
	`TTUSB_OBJPRINTF
((
pGcdClõ¡
->
pCœssObje˘
,

2762 
UDMASK_ERRORS
,

2769 
	`TTUSB_OBJPRINTF
((
pGcdClõ¡
->
pCœssObje˘
,

2770 
UDMASK_FLOW
,

2773 
pReque°H™dÀ
,

2774 
Re£tPùeFœgs


2778 
	}
}

2780 
VOID


2781 
	$UsbPumpGcdClõ¡_Re£tPùeCbFn
(

2782 
VOID
 * 
pCÆlbackCtx
,

2783 
VOID
 * 
pReque°H™dÀ
,

2784 
USBPUMP_USBDI_GENERIC_STATUS
 
Eº‹Code
,

2785 
USBPUMP_USBDI_PIPE_HANDLE
 
hPùe


2788 
USBPUMP_CLASS_GCD_CLIENT_DATA
 * 
CONST
 
pGcdClõ¡
 = 
pCÆlbackCtx
;

2790 
	`USBPUMP_UNREFERENCED_PARAMETER
(
pReque°H™dÀ
);

2791 
	`USBPUMP_TRACE_PARAMETER
(
pGcdClõ¡
);

2792 
	`USBPUMP_UNREFERENCED_PARAMETER
(
hPùe
);

2794 i‡(
Eº‹Code
 !
USBPUMP_USBDI_GENERIC_STATUS_OK
)

2796 
	`TTUSB_OBJPRINTF
((
pGcdClõ¡
->
pCœssObje˘
,

2797 
UDMASK_ERRORS
,

2800 
	`UsbPumpUsbdiCœssGíîic_SètusName
(
Eº‹Code
),

2801 
Eº‹Code


2806 
	`TTUSB_OBJPRINTF
((
pGcdClõ¡
->
pCœssObje˘
,

2807 
UDMASK_FLOW
,

2815 
	`UsbPumpGcdClõ¡_Su•ídDev
(
pGcdClõ¡
);

2817 
	}
}

2822 
VOID


2823 
	$UsbPumpGcdClõ¡_SèπLo›backTe°
(

2824 
USBPUMP_CLASS_GCD_CLIENT_DATA
 * 
pGcdClõ¡
,

2825 
BOOL
 
fSëI¡îÁ˚


2828 
pGcdClõ¡
->
fSëI¡îÁ˚
 = fSetInterface;

2830 
	`USBPUMP_CALLBACKCOMPLETION_INIT
(

2831 &
pGcdClõ¡
->
CÆlback
,

2832 
UsbPumpGcdClõ¡_SèπLo›back
,

2833 
pGcdClõ¡


2836 
	`UsbPumpPœtf‹m_Po°Evít
(

2837 
pGcdClõ¡
->
pPœtf‹m
,

2838 &
pGcdClõ¡
->
CÆlback


2840 
	}
}

2843 
VOID


2844 
	$UsbPumpGcdClõ¡_SèπLo›back
(

2845 
VOID
 * 
pC⁄ãxt


2848 
USBPUMP_CLASS_GCD_CLIENT_DATA
 * 
CONST
 
pGcdClõ¡
 = 
pC⁄ãxt
;

2849 
USBPUMP_CLASS_GCD_CLIENT_PIPE_CONTEXT
 * 
CONST
 
pPùeCtx
 =

2850 &
pGcdClõ¡
->
PùeCtx
[pGcdClõ¡->
iCuºPùe
];

2852 i‡(
pGcdClõ¡
->
fSëI¡îÁ˚
)

2854 
	`TTUSB_TRACE
(

2855 
USBPUMP_CLASS_GCD_CLIENT_PIPE_CONTEXT
 * 
CONST


2856 
pPùe2Ctx
 = 
pPùeCtx
 + 1;

2859 
	`TTUSB_OBJPRINTF
((

2860 
pGcdClõ¡
->
pCœssObje˘
,

2861 
UDMASK_FLOW
 | 
UDMASK_ANY
,

2864 
pGcdClõ¡
->
iCuºPùe
,

2865 
pGcdClõ¡
->
iCuºPùe
 + 1,

2866 
pPùeCtx
->
bI¡îÁ˚Numbî
,

2867 
pPùeCtx
->
bA…î«ãSëtög
,

2868 
sk_EndpoötTy≥s
[
pPùeCtx
->
bmAâribuãs
],

2869 
pPùeCtx
->
bEndpoötAddªss
,

2870 
sk_EndpoötTy≥s
[
pPùe2Ctx
->
bmAâribuãs
],

2871 
pPùe2Ctx
->
bEndpoötAddªss


2874 i‡(
pPùeCtx
->
bmAâribuãs
 =
USB_bmAâr_ISO
 &&

2875 ! 
USBPUMP_CLASS_GCD_CLIENT_SUPPORT_ISOCH
)

2877 
	`TTUSB_OBJPRINTF
((

2878 
pGcdClõ¡
->
pCœssObje˘
,

2879 
UDMASK_FLOW
 | 
UDMASK_ANY
,

2882 
	`UsbPumpGcdClõ¡_Su•ídDev
(
pGcdClõ¡
);

2887 i‡(
pPùeCtx
->
pPùe
->
wMaxSåómID
 != 0)

2890 
	`UsbPumpSåómTe°Fsm_Inô
(
pGcdClõ¡
);

2892 i‡(
pGcdClõ¡
->
fSëI¡îÁ˚
)

2899 
	`UsbPumpGcdClõ¡_WrôeCål
(

2900 
pGcdClõ¡
,

2901 
pGcdClõ¡
->
hDeÁu…Pùe
,

2902  
USB_bmReque°Ty≥_HSIFC
,

2903  
USB_bReque°_SET_INTERFACE
,

2904  
pPùeCtx
->
bA…î«ãSëtög
,

2905  
pPùeCtx
->
bI¡îÁ˚Numbî
,

2906 
NULL
,

2911 i‡(
pPùeCtx
->
bmAâribuãs
 =
USB_bmAâr_ISO
)

2913 
UINT
 
nIsochDesc
;

2915 
nIsochDesc
 = 
	`UsbPumpGcdClõ¡_InôIsochPackëDesc
(

2916 
pGcdClõ¡
,

2917 
pPùeCtx


2920 i‡(! 
pGcdClõ¡
->
fPîf‹m™˚Mósuª
)

2922 
	`UsbPumpGcdClõ¡_Gíî©eTe°D©a
(

2923 
pGcdClõ¡
->
pWrôeBuf„r
,

2924 
pGcdClõ¡
->
Buf„rSize


2926 
	`UsbPumpGcdClõ¡_CÀ¨Te°D©a
(

2927 
pGcdClõ¡
->
pRódBuf„r
,

2928 
pGcdClõ¡
->
Buf„rSize


2931 i‡(
pGcdClõ¡
->
NumIãøti⁄s
 =pGcdClõ¡->
Lo›backCou¡
)

2933 
	`UsbPumpGcdClõ¡_Gíî©eTe°D©a
(

2934 
pGcdClõ¡
->
pWrôeBuf„r
,

2935 
pGcdClõ¡
->
Buf„rSize


2937 
	`TTUSB_FLUSH
(
pGcdClõ¡
->
pPœtf‹m
);

2938 
pGcdClõ¡
->
SèπTimeTick
 =

2939 
	`πems_˛ock_gë_ticks_sö˚_boŸ
();

2942 
	`UsbPumpGcdClõ¡_WrôeIsoch
(

2943 
pGcdClõ¡
,

2944 
pPùeCtx
->
pPùe
->
hPùe
,

2945 
pGcdClõ¡
->
pWrôeBuf„r
,

2946 
nIsochDesc
 * 
pPùeCtx
->
pPùe
->
wMaxPackëSize
,

2948 
pGcdClõ¡
->
IsochDesc
,

2949 
nIsochDesc
 * (
USBPUMP_ISOCH_PACKET_DESCR
),

2951 
TRUE


2956 
USBPUMP_CLASS_GCD_CLIENT_PIPE_CONTEXT
 * 
CONST


2957 
pPùe2Ctx
 = 
pPùeCtx
 + 1;

2959 i‡(! 
pGcdClõ¡
->
fPîf‹m™˚Mósuª
)

2961 
	`UsbPumpGcdClõ¡_Gíî©eTe°D©a
(

2962 
pGcdClõ¡
->
pWrôeBuf„r
,

2963 
pGcdClõ¡
->
Buf„rSize


2965 
	`UsbPumpGcdClõ¡_CÀ¨Te°D©a
(

2966 
pGcdClõ¡
->
pRódBuf„r
,

2967 
pGcdClõ¡
->
Buf„rSize


2970 i‡(
pGcdClõ¡
->
NumIãøti⁄s
 =pGcdClõ¡->
Lo›backCou¡
)

2972 
	`UsbPumpGcdClõ¡_Gíî©eTe°D©a
(

2973 
pGcdClõ¡
->
pWrôeBuf„r
,

2974 
pGcdClõ¡
->
Buf„rSize


2976 
	`TTUSB_FLUSH
(
pGcdClõ¡
->
pPœtf‹m
);

2977 
pGcdClõ¡
->
SèπTimeTick
 =

2978 
	`πems_˛ock_gë_ticks_sö˚_boŸ
();

2981 i‡(
pPùeCtx
->
bmAâribuãs
 =
USB_bmAâr_INT
 &&

2982 
pPùeCtx
->
pPùe
->
wMaxPackëSize
 < 512 &&

2983 
pGcdClõ¡
->
NumIãøti⁄s
 =pGcdClõ¡->
Lo›backCou¡
 &&

2984 
pGcdClõ¡
->
NumIãøti⁄s
 > 
GCD_CLIENT_MAX_INT_COUNT


2987 
pGcdClõ¡
->
NumIãøti⁄s
 = 
GCD_CLIENT_MAX_INT_COUNT
;

2994 
	`UsbPumpGcdClõ¡_WrôeBulkI¡
(

2995 
pGcdClõ¡
,

2996 
pPùeCtx
->
pPùe
->
hPùe
,

2997 
pGcdClõ¡
->
pWrôeBuf„r
,

2998 
pGcdClõ¡
->
Buf„rSize
,

3000 
FALSE


3003 
	`UsbPumpGcdClõ¡_RódBulkI¡
(

3004 
pGcdClõ¡
,

3005 
pPùe2Ctx
->
pPùe
->
hPùe
,

3006 
pGcdClõ¡
->
pRódBuf„r
,

3007 
pGcdClõ¡
->
Buf„rSize
,

3011 
	}
}

3013 
UINT


3014 
	$UsbPumpGcdClõ¡_InôIsochPackëDesc
(

3015 
USBPUMP_CLASS_GCD_CLIENT_DATA
 * 
pGcdClõ¡
,

3016 
USBPUMP_CLASS_GCD_CLIENT_PIPE_CONTEXT
 * 
pPùeCtx


3019 
USBPUMP_ISOCH_PACKET_DESCR
 * 
pIsochDesc
;

3020 
UINT
 
nIsochDesc
;

3021 
UINT
 
i
;

3022 
UINT16
 
wMaxPackëSize
;

3024 
wMaxPackëSize
 = 
pPùeCtx
->
pPùe
->wMaxPacketSize;

3025 
nIsochDesc
 = 
pGcdClõ¡
->
Buf„rSize
 / 
wMaxPackëSize
;

3026 i‡(
nIsochDesc
 > 
USBPUMP_CLASS_GCD_CLIENT_MAX_ISOCHDESCS
)

3027 
nIsochDesc
 = 
USBPUMP_CLASS_GCD_CLIENT_MAX_ISOCHDESCS
;

3029 
pIsochDesc
 = 
pGcdClõ¡
->
IsochDesc
;

3030 
i
 = 0; i < 
nIsochDesc
; ++
pIsochDesc
, ++i)

3032 
pIsochDesc
->
uOff£t
 = 
i
 * 
wMaxPackëSize
;

3033 
pIsochDesc
->
usLígth
 = 
wMaxPackëSize
;

3034 
pIsochDesc
->
ucSètus
 = 
USTAT_BUSY
;

3035 
pIsochDesc
->
ucS∑ª
 = 0;

3038  
nIsochDesc
;

3039 
	}
}

3041 
VOID


3042 
	$UsbPumpGcdClõ¡_Gíî©eTe°D©a
(

3043 
UINT8
 * 
pBuf„r
,

3044 
BYTES
 
nBuf„r


3047 
BYTES
 
i
;

3048 
i
 = 0; i < 
nBuf„r
; ++i)

3050 
pBuf„r
[
i
] = i % 100;

3052 
	}
}

3054 
VOID


3055 
	$UsbPumpGcdClõ¡_CÀ¨Te°D©a
(

3056 
UINT8
 * 
pBuf„r
,

3057 
BYTES
 
nBuf„r


3060 
	`UHIL_fûl
(
pBuf„r
, 
nBuf„r
, 0);

3061 
	}
}

3063 
BOOL


3064 
	$UsbPumpGcdClõ¡_CheckTe°D©a
(

3065 
UINT8
 * 
pBuf„r
,

3066 
BYTES
 
nBuf„r


3069 
BYTES
 
i
;

3070 
i
 = 0; i < 
nBuf„r
; ++i)

3072 i‡(
pBuf„r
[
i
] != i % 100)

3073  
FALSE
;

3075  
TRUE
;

3076 
	}
}

3078 
VOID


3079 
	$UsbPumpGcdClõ¡_P¨£C⁄figTªe
(

3080 
USBPUMP_CLASS_GCD_CLIENT_DATA
 * 
pGcdClõ¡
,

3081 
USBPUMP_USBDI_CFG_NODE
 * 
pC⁄figRoŸ


3084 
UINT32
 
i
;

3085 
USBPUMP_CLASS_GCD_CLIENT_PIPE_CONTEXT
 * 
pPùeCtx
;

3087 
pPùeCtx
 = 
pGcdClõ¡
->
PùeCtx
;

3091 
USBPUMP_USBDI_IFC_NODE
 * 
pIfcNode
 =

3092 
	`USBPUMP_USBDI_CFG_NODE_IFC
(

3093 
pC⁄figRoŸ


3095 
	`TTUSB_OBJPRINTF
((
pGcdClõ¡
->
pCœssObje˘
,

3096 
UDMASK_FLOW
 | 
UDMASK_ANY
,

3099 
pC⁄figRoŸ
->
bC⁄figuøti⁄VÆue


3103 
USBPUMP_USBDI_ALTSET_NODE
 * 
pA…Node
 =

3104 
	`USBPUMP_USBDI_IFC_NODE_ALTSET
(
pIfcNode
);

3106 
	`TTUSB_OBJPRINTF
((
pGcdClõ¡
->
pCœssObje˘
,

3107 
UDMASK_FLOW
 | 
UDMASK_ANY
,

3110 
pIfcNode
,ÖIfcNode->
bI¡îÁ˚Numbî
,

3111 
pIfcNode
->
bNumA…Sëtögs


3115 
USBPUMP_USBDI_PIPE_NODE
 * 
pPùeNode
 =

3116 
	`USBPUMP_USBDI_ALTSET_NODE_PIPE
(
pA…Node
);

3118 
	`TTUSB_OBJPRINTF
((
pGcdClõ¡
->
pCœssObje˘
,

3119 
UDMASK_FLOW
 | 
UDMASK_ANY
,

3121 
pA…Node
,

3122 
pA…Node
->
bA…î«ãSëtög


3125 
i
=0; i < 
pA…Node
->
bNumPùes
; ++
pPùeNode
, ++i)

3127 
pPùeCtx
->
pPùe
 = 
pPùeNode
;

3128 
	`TTUSB_OBJPRINTF
((
pGcdClõ¡
->
pCœssObje˘
,

3129 
UDMASK_FLOW
 | 
UDMASK_ANY
,

3132 
pPùeNode
,

3133 
pPùeNode
->
hPùe
,

3134 
pPùeNode
->
wMaxPackëSize
,

3135 
pPùeNode
->
dwMaxTøns„rSize
,

3136 
pPùeNode
->
wMaxSåómID


3139 
pPùeCtx
->
bI¡îÁ˚Numbî
 = 
pIfcNode
->bInterfaceNumber;

3140 
pPùeCtx
->
bA…î«ãSëtög
 = 
pA…Node
->bAlternateSetting;

3141 
pPùeCtx
->
bEndpoötAddªss
 = 
pPùeNode
->bEndpointAddress;

3142 
pPùeCtx
->
bmAâribuãs
 =

3143 
	`USBIF_EPDESC_bmAâribuãs_TRANSFER
(
pPùeNode
->
bmAâribuãs
);

3144 ++
pPùeCtx
;

3146 i‡(
pPùeNode
->
wMaxSåómID
 != 0)

3148 
pGcdClõ¡
->
MaxSåómID
 =

3149 
pPùeNode
->
wMaxSåómID
;

3152 i‡(
pPùeNode
->
bEndpoötAddªss
 & 0x80)

3153 
pGcdClõ¡
->
InSåómPùe
 = 
pPùeNode
->
hPùe
;

3155 
pGcdClõ¡
->
OutSåómPùe
 = 
pPùeNode
->
hPùe
;

3159 
pGcdClõ¡
->
MaxSåómID
 = 0;

3162 } (
pA…Node
 = 
	`USBPUMP_USBDI_ALTSET_NODE_NEXT
’A…Node)Ë!
NULL
);

3163 } (
pIfcNode
 = 
	`USBPUMP_USBDI_IFC_NODE_NEXT
’IfcNode)Ë!
NULL
);

3164 } (
pC⁄figRoŸ
 = 
	`USBPUMP_USBDI_CFG_NODE_NEXT
’C⁄figRoŸ)Ë!
NULL
);

3165 
pGcdClõ¡
->
nPùes
 = 
pPùeCtx
 -ÖGcdClõ¡->
PùeCtx
;

3166 
pGcdClõ¡
->
iCuºPùe
 = 0;

3167 
	}
}

3169 
VOID


3170 
	$UsbPumpSåómTe°Fsm_Inô
(

3171 
USBPUMP_CLASS_GCD_CLIENT_DATA
 * 
pGcdClõ¡


3174 
pGcdClõ¡
->
sizeTe°Buf„r
 = 512;

3175 
pGcdClõ¡
->
CuºítSåómID
 = 1;

3177 
	`UHIL_fûl
(&
pGcdClõ¡
->
SåómTe°Fsm
, (pGcdClient->StreamTestFsm),0);

3179 
pGcdClõ¡
->
SåómTe°Fsm
.
CuºítSèã
 = 
USBPUMP_STREAMTEST_FSM_°Inôül
;

3180 
pGcdClõ¡
->
SåómTe°Fsm
.
fRun
 = 
TRUE
;

3181 
pGcdClõ¡
->
SåómTe°Fsm
.
pFöÆizeFn
 = 
UsbPumpSåómTe°Fsm_FöÆized
;

3184 
	`UsbPumpSåómTe°Fsm_EvÆ
(
pGcdClõ¡
);

3185 
	}
}

3208 
VOID


3209 
	$UsbPumpSåómTe°Fsm_EvÆ
(

3210 
USBPUMP_CLASS_GCD_CLIENT_DATA
 * 
pGcdClõ¡


3213 
USBPUMP_STREAMTEST_FSM_STATE
 
√xtSèã
;

3214 
BOOL
 
fE¡ry
;

3216 
√xtSèã
 = 
USBPUMP_STREAMTEST_FSM_°NoCh™ge
;

3217 
fE¡ry
 = 
FALSE
;

3218 i‡(
pGcdClõ¡
->
SåómTe°Fsm
.
fBusy
)

3220 
pGcdClõ¡
->
SåómTe°Fsm
.
fDe„ºed
 = 
TRUE
;

3224 
pGcdClõ¡
->
SåómTe°Fsm
.
fBusy
 = 
TRUE
;

3226 
TRUE
)

3228 
√xtSèã
 = 
	`UsbPumpSåómTe°Fsm_Swôch
(

3229 
pGcdClõ¡
,

3230 
fE¡ry


3233 i‡(
√xtSèã
 !
USBPUMP_STREAMTEST_FSM_°NoCh™ge
)

3235 
	`TTUSB_OBJPRINTF
((

3236 
pGcdClõ¡
->
pCœssObje˘
,

3237 
UDMASK_FLOW
,

3240 
pGcdClõ¡
,

3241 
	`UsbPumpSåómTe°Fsm_SèãName
(

3242 
pGcdClõ¡
->
SåómTe°Fsm
.
CuºítSèã
),

3243 
pGcdClõ¡
->
SåómTe°Fsm
.
CuºítSèã
,

3244 
	`UsbPumpSåómTe°Fsm_SèãName
(
√xtSèã
),

3245 
√xtSèã


3248 
fE¡ry
 = 
TRUE
;

3249 
pGcdClõ¡
->
SåómTe°Fsm
.
CuºítSèã
 = 
√xtSèã
;

3251 i‡(
pGcdClõ¡
->
SåómTe°Fsm
.
fDe„ºed
)

3253 
fE¡ry
 = 
FALSE
;

3254 
pGcdClõ¡
->
SåómTe°Fsm
.
fDe„ºed
 = 
FALSE
;

3262 
pGcdClõ¡
->
SåómTe°Fsm
.
fBusy
 = 
FALSE
;

3263 
	}
}

3290 
USBPUMP_STREAMTEST_FSM_STATE


3291 
	$UsbPumpSåómTe°Fsm_Swôch
(

3292 
USBPUMP_CLASS_GCD_CLIENT_DATA
 * 
pGcdClõ¡
,

3293 
BOOL
 
fE¡ry


3296 
USBPUMP_STREAMTEST_FSM_STATE
 
√wSèã
;

3297 
CONST
 
USBPUMP_STREAMTEST_FSM_STATE
 
cuºítSèã
 =

3298 
pGcdClõ¡
->
SåómTe°Fsm
.
CuºítSèã
;

3300 
√wSèã
 = 
USBPUMP_STREAMTEST_FSM_°NoCh™ge
;

3302 
cuºítSèã
)

3304 
USBPUMP_STREAMTEST_FSM_°Inôül
:

3306 
	`TTUSB_OBJPRINTF
((
pGcdClõ¡
->
pCœssObje˘
, 
UDMASK_FLOW
,

3309 
pGcdClõ¡
->
CuºítSåómID
,

3310 
pGcdClõ¡
->
sizeTe°Buf„r


3313 
√wSèã
 = 
USBPUMP_STREAMTEST_FSM_°SídD©a
;

3317 
USBPUMP_STREAMTEST_FSM_°SídD©a
:

3319 
pGcdClõ¡
->
pTe°Buf„r
 = 
	`UsbPumpPœtf‹m_MÆloc
(

3320 
pGcdClõ¡
->
pPœtf‹m
,

3321 
pGcdClõ¡
->
sizeTe°Buf„r


3323 i‡(!
pGcdClõ¡
->
pTe°Buf„r
)

3325 
	`TTUSB_OBJPRINTF
((
pGcdClõ¡
->
pCœssObje˘
, 
UDMASK_ERRORS
,

3328 
pGcdClõ¡
->
sizeTe°Buf„r


3331 
√wSèã
 = 
USBPUMP_STREAMTEST_FSM_°Eº‹
;

3335 
pGcdClõ¡
->
SåómTe°Fsm
.
fSídCom∂ëeOK
 = 
FALSE
;

3336 
pGcdClõ¡
->
SåómTe°Fsm
.
fSídCom∂ëeNG
 = 
FALSE
;

3338 
	`UsbPumpSåómTe°Fsm_WrôeSåóm
(

3339 
pGcdClõ¡
,

3340 
pGcdClõ¡
->
OutSåómPùe
,

3341 
pGcdClõ¡
->
pTe°Buf„r
,

3342 
pGcdClõ¡
->
sizeTe°Buf„r
,

3344 
FALSE
 ,

3345 
pGcdClõ¡
->
CuºítSåómID


3348 
√wSèã
 = 
USBPUMP_STREAMTEST_FSM_°Re˚iveD©a
;

3353 
USBPUMP_STREAMTEST_FSM_°Re˚iveD©a
:

3354 i‡(
fE¡ry
)

3356 
pGcdClõ¡
->
SåómTe°Fsm
.
fRe˚iveCom∂ëeOK
 = 
FALSE
;

3357 
pGcdClõ¡
->
SåómTe°Fsm
.
fRe˚iveCom∂ëeNG
 = 
FALSE
;

3359 
	`UsbPumpSåómTe°Fsm_RódSåóm
(

3360 
pGcdClõ¡
,

3361 
pGcdClõ¡
->
InSåómPùe
,

3362 
pGcdClõ¡
->
pTe°Buf„r
,

3363 
pGcdClõ¡
->
sizeTe°Buf„r
,

3365 
pGcdClõ¡
->
CuºítSåómID


3369 i‡(
pGcdClõ¡
->
SåómTe°Fsm
.
fSídCom∂ëeOK
)

3371 
√wSèã
 = 
USBPUMP_STREAMTEST_FSM_°SídD©aD⁄e
;

3373 i‡(
pGcdClõ¡
->
SåómTe°Fsm
.
fSídCom∂ëeNG
)

3375 
√wSèã
 = 
USBPUMP_STREAMTEST_FSM_°Eº‹
;

3379 
USBPUMP_STREAMTEST_FSM_°SídD©aD⁄e
:

3381 i‡(
fE¡ry
)

3385 i‡(
pGcdClõ¡
->
SåómTe°Fsm
.
fRe˚iveCom∂ëeOK
)

3387 
√wSèã
 = 
USBPUMP_STREAMTEST_FSM_°D©aAºived
;

3389 i‡(
pGcdClõ¡
->
SåómTe°Fsm
.
fRe˚iveCom∂ëeNG
)

3391 
√wSèã
 = 
USBPUMP_STREAMTEST_FSM_°Eº‹
;

3396 
USBPUMP_STREAMTEST_FSM_°D©aAºived
:

3398 i‡(
fE¡ry
)

3404 
√wSèã
 = 
USBPUMP_STREAMTEST_FSM_°Inôül
;

3407 
	`UsbPumpPœtf‹m_Fªe
(

3408 
pGcdClõ¡
->
pPœtf‹m
,

3409 
pGcdClõ¡
->
pTe°Buf„r
,

3410 
pGcdClõ¡
->
sizeTe°Buf„r


3413 
pGcdClõ¡
->
sizeTe°Buf„r
)

3416 
pGcdClõ¡
->
sizeTe°Buf„r
 = 1024;

3419 
pGcdClõ¡
->
sizeTe°Buf„r
 = 2048;

3422 
pGcdClõ¡
->
sizeTe°Buf„r
 = 64*1024;

3426 i‡(
pGcdClõ¡
->
CuºítSåómID
 >pGcdClõ¡->
MaxSåómID
)

3427 
√wSèã
 = 
USBPUMP_STREAMTEST_FSM_°D⁄e
;

3431 ++
pGcdClõ¡
->
CuºítSåómID
;

3432 
pGcdClõ¡
->
sizeTe°Buf„r
 = 512;

3437 
√wSèã
 = 
USBPUMP_STREAMTEST_FSM_°Eº‹
;

3443 
USBPUMP_STREAMTEST_FSM_°D⁄e
:

3445 
	`TTUSB_OBJPRINTF
((
pGcdClõ¡
->
pCœssObje˘
, 
UDMASK_FLOW
,

3452 
USBPUMP_STREAMTEST_FSM_°Eº‹
:

3454 
	`TTUSB_OBJPRINTF
((
pGcdClõ¡
->
pCœssObje˘
, 
UDMASK_ERRORS
,

3461 
USBPUMP_STREAMTEST_FSM_°___MAX
:

3463 i‡(
fE¡ry
)

3465 (*
pGcdClõ¡
->
SåómTe°Fsm
.
pFöÆizeFn
)(

3466 
pGcdClõ¡


3474 
	`TTUSB_OBJPRINTF
((
pGcdClõ¡
->
pCœssObje˘
, 
UDMASK_ERRORS
,

3479 
√wSèã
 = 
USBPUMP_STREAMTEST_FSM_°Eº‹
;

3484  
√wSèã
;

3485 
	}
}

3515 
VOID


3516 
	$UsbPumpSåómTe°Fsm_WrôeSåóm
(

3517 
USBPUMP_CLASS_GCD_CLIENT_DATA
 * 
pGcdClõ¡
,

3518 
USBPUMP_USBDI_PIPE_HANDLE
 
hPùe
,

3519 
VOID
 * 
pBuf„r
,

3520 
BYTES
 
sizeBuf„r
,

3521 
USBPUMP_USBDI_GENERIC_TIMEOUT
 
mûli£c⁄ds
,

3522 
BOOL
 
fFuŒTøns„r
,

3523 
UINT16
 
SåómID


3526 
VOID
 * 
pReque°H™dÀ
;

3529 
	`UsbPumpGcdClõ¡_Gíî©eTe°D©a
(

3530 
pBuf„r
,

3531 
sizeBuf„r


3534 
pReque°H™dÀ
 =

3535 (*
pGcdClõ¡
->
Fun˘i⁄InCÆl
.
GíDrv
.
pWrôeSåómPùeFn
)(

3536 
pGcdClõ¡
->
Fun˘i⁄H™dÀ
,

3537 
UsbPumpSåómTe°Fsm_WrôeSåómCbFn
,

3538 
pGcdClõ¡
,

3539 
hPùe
,

3540 
pBuf„r
,

3541 
sizeBuf„r
,

3542 
mûli£c⁄ds
,

3543 
fFuŒTøns„r
,

3544 
SåómID


3546 i‡(!
pReque°H™dÀ
)

3548 
	`TTUSB_OBJPRINTF
((
pGcdClõ¡
->
pCœssObje˘
,

3549 
UDMASK_ERRORS
,

3560 
	`TTUSB_OBJPRINTF
((
pGcdClõ¡
->
pCœssObje˘
,

3561 
UDMASK_FLOW
,

3564 
pReque°H™dÀ
,

3565 
hPùe
,

3566 
pBuf„r
,

3567 
sizeBuf„r
,

3568 
SåómID


3570 
	}
}

3572 
VOID


3573 
	$UsbPumpSåómTe°Fsm_WrôeSåómCbFn
(

3574 
VOID
 * 
pCÆlbackCtx
,

3575 
VOID
 * 
pReque°H™dÀ
,

3576 
USBPUMP_USBDI_GENERIC_STATUS
 
Eº‹Code
,

3577 
VOID
 
CONST
 * 
pBuf„r
,

3578 
BYTES
 
sizeBuf„r
,

3579 
BYTES
 
nByãsWrôãn


3582 
USBPUMP_CLASS_GCD_CLIENT_DATA
 * 
CONST
 
pGcdClõ¡
 = 
pCÆlbackCtx
;

3584 
	`USBPUMP_UNREFERENCED_PARAMETER
(
pReque°H™dÀ
);

3585 
	`USBPUMP_TRACE_PARAMETER
(
pBuf„r
);

3586 
	`USBPUMP_TRACE_PARAMETER
(
sizeBuf„r
);

3587 
	`USBPUMP_TRACE_PARAMETER
(
nByãsWrôãn
);

3589 i‡(
Eº‹Code
 !
USBPUMP_USBDI_GENERIC_STATUS_OK
)

3591 
	`TTUSB_OBJPRINTF
((
pGcdClõ¡
->
pCœssObje˘
,

3592 
UDMASK_ERRORS
,

3595 
	`UsbPumpUsbdiCœssGíîic_SètusName
(
Eº‹Code
),

3596 
Eº‹Code


3598 
pGcdClõ¡
->
SåómTe°Fsm
.
fSídCom∂ëeNG
 = 
TRUE
;

3602 
	`TTUSB_OBJPRINTF
((
pGcdClõ¡
->
pCœssObje˘
,

3603 
UDMASK_FLOW
,

3606 
pBuf„r
, 
sizeBuf„r
, 
nByãsWrôãn


3609 
pGcdClõ¡
->
SåómTe°Fsm
.
fSídCom∂ëeOK
 = 
TRUE
;

3612 
	`UsbPumpSåómTe°Fsm_EvÆ
(
pGcdClõ¡
);

3614 
	}
}

3643 
VOID


3644 
	$UsbPumpSåómTe°Fsm_RódSåóm
(

3645 
USBPUMP_CLASS_GCD_CLIENT_DATA
 * 
pGcdClõ¡
,

3646 
USBPUMP_USBDI_PIPE_HANDLE
 
hPùe
,

3647 
VOID
 * 
pBuf„r
,

3648 
BYTES
 
sizeBuf„r
,

3649 
USBPUMP_USBDI_GENERIC_TIMEOUT
 
mûli£c⁄ds
,

3650 
UINT16
 
SåómID


3653 
VOID
 * 
pReque°H™dÀ
;

3655 
pReque°H™dÀ
 =

3656 (*
pGcdClõ¡
->
Fun˘i⁄InCÆl
.
GíDrv
.
pRódSåómPùeFn
)(

3657 
pGcdClõ¡
->
Fun˘i⁄H™dÀ
,

3658 
UsbPumpSåómTe°Fsm_RódSåómCbFn
,

3659 
pGcdClõ¡
,

3660 
hPùe
,

3661 
pBuf„r
,

3662 
sizeBuf„r
,

3663 
mûli£c⁄ds
,

3664 
SåómID


3666 i‡(!
pReque°H™dÀ
)

3668 
	`TTUSB_OBJPRINTF
((
pGcdClõ¡
->
pCœssObje˘
,

3669 
UDMASK_ERRORS
,

3680 
	`TTUSB_OBJPRINTF
((
pGcdClõ¡
->
pCœssObje˘
,

3681 
UDMASK_FLOW
,

3684 
pReque°H™dÀ


3686 
	}
}

3688 
VOID


3689 
	$UsbPumpSåómTe°Fsm_RódSåómCbFn
(

3690 
VOID
 * 
pCÆlbackCtx
,

3691 
VOID
 * 
pReque°H™dÀ
,

3692 
USBPUMP_USBDI_GENERIC_STATUS
 
Eº‹Code
,

3693 
VOID
 * 
pBuf„r
,

3694 
BYTES
 
sizeBuf„r
,

3695 
BYTES
 
nByãsWrôãn


3698 
USBPUMP_CLASS_GCD_CLIENT_DATA
 * 
CONST
 
pGcdClõ¡
 = 
pCÆlbackCtx
;

3700 
	`USBPUMP_UNREFERENCED_PARAMETER
(
pReque°H™dÀ
);

3701 
	`USBPUMP_TRACE_PARAMETER
(
sizeBuf„r
);

3703 i‡(
Eº‹Code
 !
USBPUMP_USBDI_GENERIC_STATUS_OK
)

3705 
	`TTUSB_OBJPRINTF
((
pGcdClõ¡
->
pCœssObje˘
,

3706 
UDMASK_ERRORS
,

3709 
	`UsbPumpUsbdiCœssGíîic_SètusName
(
Eº‹Code
),

3710 
Eº‹Code


3712 
pGcdClõ¡
->
SåómTe°Fsm
.
fRe˚iveCom∂ëeNG
 = 
TRUE
;

3716 
BOOL
 
fResu…
;

3718 
fResu…
 = 
	`UsbPumpGcdClõ¡_CheckTe°D©a
(

3719 
pBuf„r
,

3720 
nByãsWrôãn


3723 
	`TTUSB_OBJPRINTF
((
pGcdClõ¡
->
pCœssObje˘
,

3724 
UDMASK_FLOW
,

3728 
pBuf„r
, 
sizeBuf„r
, 
nByãsWrôãn
, 
fResu…


3731 i‡(
fResu…
)

3734 
pGcdClõ¡
->
SåómTe°Fsm
.
fRe˚iveCom∂ëeOK
 = 
TRUE
;

3739 
	`UsbPumpSåómTe°Fsm_EvÆ
(
pGcdClõ¡
);

3740 
	}
}

3742 
VOID


3743 
	$UsbPumpSåómTe°Fsm_FöÆized
(

3744 
USBPUMP_CLASS_GCD_CLIENT_DATA
 * 
pGcdClõ¡


3747 
pGcdClõ¡
->
SåómTe°Fsm
.
fRun
 = 
FALSE
;

3748 
	`TTUSB_OBJPRINTF
((
pGcdClõ¡
->
pCœssObje˘
,

3749 
UDMASK_FLOW
 | 
UDMASK_ANY
,

3751 
pGcdClõ¡
->
iCuºPùe
,

3752 
pGcdClõ¡
->
iCuºPùe
 + 1

3754 
	}
}

3756 #i‡
USBPUMP_TRACE


3757 
CONST
 
TEXT
 *

3758 
	$UsbPumpSåómTe°Fsm_SèãName
(

3759 
USBPUMP_STREAMTEST_FSM_STATE
 
°©e


3762 i‡(
°©e
 < 
	`LENOF
(
sk_vpSåómTe°Fsm_SèãNames
))

3764  
sk_vpSåómTe°Fsm_SèãNames
[
°©e
];

3768  
sk_SåómTe°FsmUnknownSèã
;

3770 
	}
}

	@Demo/UsbHost/leon/hostapp_hostinit.c

36 
	~"usbpumpdebug.h
"

37 
	~"usbpum¥oŸ.h
"

38 
	~"usbpumpobje˘≠i.h
"

39 
	~"usbpump_ho°_öô.h
"

40 
	~"usbpump_usbdi.h
"

41 
	~"usbpump_usbdi_â.h
"

42 
	~"usbpump_usbdâi_≠i.h
"

44 
	~"usbpump_usbdi_su≥r•ìd.h
"

45 
	~"usbpump_usbdsu≥r•ìdi_≠i.h
"

47 
	~"usbpump_usbd_˛ass_composôe_≠i.h
"

49 
	~"usbpump_usbd_˛ass_gíîic_≠i.h
"

51 
	~"usbpump_usbdi_˛ass_msd_≠i.h
"

52 
	~"usbpump_usbdi_˛ass_msd_c⁄fig.h
"

54 
	~"usbpump_m¨gay_ho°_öô.h
"

79 
CONST


80 
USBPUMP_USBDI_CLASS_COMPOSITE_CONFIG


81 
	gsk_UsbPumpUsbdCD_C⁄fig
 =

82 
USBPUMP_USBDI_CLASS_COMPOSITE_CONFIG_INIT_V1
(

83 &
gk_UsbPumpUsbdiCœssComposôe_InôM©chLi°
,

84  
NULL
,

85  
NULL
,

97 
CONST
 
USBPUMP_USBDI_CLASS_GENERIC_CONFIG


98 
	gsk_UsbPumpUsbdGíîic_Priv©eC⁄fig
 =

99 
USBPUMP_USBDI_CLASS_GENERIC_CONFIG_INIT_V1
(

109 
CONST
 
USBPUMP_USBDI_INIT_MATCH_LIST_ENTRY


110 
	gsk_vUsbPumpUsbdiGíîic_M©ches
[] =

112 
USBPUMP_USBDI_INIT_MATCH_LIST_ENTRY_INIT_V1
(

114 
USBPUMP_USBDI_PRIORITY_VIDPID


116 
USBPUMP_USBDI_INIT_MATCH_LIST_ENTRY_INIT_V1
(

118 
USBPUMP_USBDI_PRIORITY_VIDPID


122 
CONST
 
USBPUMP_USBDI_INIT_MATCH_LIST


123 
	ggk_UsbPumpUsbdiGíîic_InôM©chLi°
 =

124 
USBPUMP_USBDI_INIT_MATCH_LIST_INIT_V1
(

125 
sk_vUsbPumpUsbdiGíîic_M©ches


128 
CONST
 
USBPUMP_USBDI_DRIVER_CLASS_CONFIG


129 
	ggk_UsbPumpUsbdiGíîic_CœssC⁄fig
 =

130 
USBPUMP_USBDI_DRIVER_CLASS_CONFIG_INIT_V1
(

131 &
gk_UsbPumpUsbdiGíîic_InôM©chLi°
,

132  
USBPUMP_USBDI_CLASS_GENERIC_NAME
,

133  
USBPUMP_USBDI_FUNCTION_GENERIC_NAME
,

141 
CONST
 
USBPUMP_HOST_DRIVER_CLASS_INIT_NODE


142 
	gsk_CœssDrivîInôNodes
[] =

144 
USBPUMP_HOST_DRIVER_CLASS_INIT_NODE_INIT_V1
(

145  
NULL
,

146  
UsbPumpUsbdiCœssComposôe_Inôülize
,

147  &
sk_UsbPumpUsbdCD_C⁄fig
.
CœssC⁄fig
,

148  &
sk_UsbPumpUsbdCD_C⁄fig
.
CœssPriv©eC⁄fig
,

151 
USBPUMP_HOST_DRIVER_CLASS_INIT_NODE_INIT_V1
(

152  
NULL
,

153  
UsbPumpUsbdiCœssMsd_Inôülize
,

154  &
gk_UsbPumpUsbdiMsd_CœssC⁄figDeÁu…
,

155  &
gk_UsbPumpUsbdiCœssMsd_C⁄figDeÁu…
,

158 
USBPUMP_HOST_DRIVER_CLASS_INIT_NODE_INIT_V1
(

159  
NULL
,

160  
UsbPumpUsbdiCœssGíîic_Inôülize
,

161  &
gk_UsbPumpUsbdiGíîic_CœssC⁄fig
,

162  &
sk_UsbPumpUsbdGíîic_Priv©eC⁄fig
,

168 
CONST
 
USBPUMP_HOST_DRIVER_CLASS_INIT_NODE_VECTOR


169 
	gsk_UsbPumpCœssDrivîInôHódî
 =

170 
USBPUMP_HOST_DRIVER_CLASS_INIT_NODE_VECTOR_INIT_V1
(

171  
sk_CœssDrivîInôNodes
,

172  
NULL
,

173  
NULL


177 
CONST
 
USBPUMP_HOST_INIT_NODE


178 
	gsk_UsbPumpHo°InôNodes
[] =

180 
USBPUMP_HOST_INIT_NODE_INIT_V3
(

181  
NULL
,

182  
UsbPumpUsbd_Inôülize
,

183  &
gk_UsbPumpM¨gay_Usbd_C⁄fig
,

185 &
gk_UsbPumpUsbdiUsbdIm∂emíèti⁄_Isoch
,

186  
UsbPumpUsbdTT_Inôülize
,

187  &
gk_UsbPumpM¨gay_UsbdTT_C⁄fig
,

188  
NULL
,

189  
NULL
,

190  
UsbPumpUsbdSu≥rS≥ed_Inôülize
,

191  &
gk_UsbPumpM¨gay_UsbdSu≥rS≥ed_C⁄fig
,

193  
FALSE
,

194  &
gk_UsbPumpHcd_GíîicInôVe˘‹
,

195  &
sk_UsbPumpCœssDrivîInôHódî


199 
CONST
 
USBPUMP_HOST_INIT_NODE_VECTOR


200 
	ggk_UsbPumpHo°_GíîicInôVe˘‹
 =

201 
USBPUMP_HOST_INIT_NODE_VECTOR_INIT_V1
(

202  
sk_UsbPumpHo°InôNodes
,

203  
NULL
,

204  
NULL


	@Demo/UsbHost/leon/hostapp_msdclient_api.c

33 
	~"usbpumpdebug.h
"

34 
	~"usbpum¥oŸ.h
"

35 
	~"usbpumpobje˘≠i.h
"

36 
	~"u∂©f‹m.h
"

37 
	~"u∂©f‹m≠i.h
"

38 
	~"uˇŒback.h
"

40 
	~"usbpump_ho°≠p_msd˛õ¡.h
"

41 
	~"usbpump_≠∂iˇti⁄_πems_ho°_≠i.h
"

43 
	~<°dio.h
>

44 
	~<mÆloc.h
>

55 
__TMS_TYPE_DEF_STRUCT
 (
USBPUMP_HOSTAPP_MSD_SYNC_CONTEXT
);

56 
	$__TMS_STRUCTNAME
 (
USBPUMP_HOSTAPP_MSD_SYNC_CONTEXT
)

58 
UPLATFORM
 * 
pPœtf‹m
;

59 
UINT32
 
DebugFœgs
;

60 
BYTES
 
MsdClõ¡Buf„rSize
;

61 
UCALLBACKCOMPLETION
 
CÆlback
;

62 
	}
};

66 
UCALLBACKFN


67 
	gUsbPumpHo°Aµ_MsdCª©eCÆlback
;

117 
	#FUNCTION
 "UsbPump_Rãms_Ho°Aµ_MsdClõ¡Cª©e"

	)

120 
	$UsbPump_Rãms_Ho°Aµ_MsdClõ¡Cª©e
(

121 * 
pPœtf‹m_Void
,

122 
DebugFœgs
,

123 
MsdClõ¡Buf„rSize


126 
UPLATFORM
 * 
CONST
 
pPœtf‹m
 = 
pPœtf‹m_Void
;

127 
USBPUMP_HOSTAPP_MSD_SYNC_CONTEXT
 * 
pSyncC⁄ãxt
;

129 i‡(
pPœtf‹m
 =
NULL
)

131 
	`¥ötf
("?" 
FUNCTION
 ":ÖPlatform=NULL\n");

132  
FALSE
;

135 
pSyncC⁄ãxt
 = 
	`mÆloc
((*pSyncContext));

136 i‡(
pSyncC⁄ãxt
 =
NULL
)

138 
	`¥ötf
("?" 
FUNCTION
 ": No memory\n");

139  
FALSE
;

142 
pSyncC⁄ãxt
->
pPœtf‹m
 =ÖPlatform;

143 
pSyncC⁄ãxt
->
DebugFœgs
 = DebugFlags;

144 
pSyncC⁄ãxt
->
MsdClõ¡Buf„rSize
 = MsdClientBufferSize;

146 
	`USBPUMP_CALLBACKCOMPLETION_INIT
(

147 &
pSyncC⁄ãxt
->
CÆlback
,

148 
UsbPumpHo°Aµ_MsdCª©eCÆlback
,

149 
pSyncC⁄ãxt


152 
	`UsbPumpPœtf‹m_Po°Evít
(

153 
pPœtf‹m
,

154 &
pSyncC⁄ãxt
->
CÆlback


157  
TRUE
;

158 
	}
}

160 #unde‡
FUNCTION


163 
	$UsbPumpHo°Aµ_MsdCª©eCÆlback
(

164 * 
pC⁄ãxt


167 
USBPUMP_HOSTAPP_MSD_SYNC_CONTEXT
 * 
CONST
 
pSyncC⁄ãxt
 = 
pC⁄ãxt
;

172 
	`UsbPumpHo°Aµ_MsdClõ¡Cª©e
(

173 
pSyncC⁄ãxt
->
pPœtf‹m
,

174 
pSyncC⁄ãxt
->
DebugFœgs
,

175 
pSyncC⁄ãxt
->
MsdClõ¡Buf„rSize


178 
	`‰ì
(
pSyncC⁄ãxt
);

179 
	}
}

	@Demo/UsbHost/leon/hostapp_msdclient_create.c

39 
	~"usbpump_ho°≠p_msd˛õ¡.h
"

40 
	~"u∂©f‹m.h
"

41 
	~"u∂©f‹m≠i.h
"

42 
	~"usbpum¥oŸ.h
"

43 
	~"usbpum∑pi.h
"

44 
	~"usbpumpdebug.h
"

45 
	~"usbpumpobje˘≠i.h
"

46 
	~"usbpum∂i°.h
"

47 
	~"uhûÆign.h
"

48 
	~"hûbusio.h
"

59 
USBPUMP_CLASSKIT_NOTIFICATION_FN


60 
	gUsbPumpMsdClõ¡_CœssNŸifiˇti⁄
;

62 
USBPUMP_CLASSKIT_NOTIFICATION_FN


63 
	gUsbPumpMsdClõ¡_Fun˘i⁄NŸifiˇti⁄
;

66 
UsbPumpMsdClõ¡_Devi˚AºivÆ
(

67 
USBPUMP_CLASS_MSD_CLIENT
 *
pMsdClõ¡
,

68 
CONST
 
USBPUMP_CLASSKIT_EVENT_DEVICE_ARRIVAL_INFO
 *
pInfo


72 
UsbPumpMsdClõ¡_Devi˚Dï¨tuª
(

73 
USBPUMP_CLASS_MSD_CLIENT
 * 
pMsdClõ¡
,

74 
USBPUMP_CLASS_MSD_CLIENT_DEVICE
 * 
pMsdDevi˚


77 
USTAT


78 
UsbPumpMsdClõ¡_O≥nSessi⁄
(

79 
USBPUMP_CLASS_MSD_CLIENT
 * 
pMsdClõ¡
,

80 
USBPUMP_OBJECT_HEADER
 * 
pMsdCœssObje˘


83 
USBPUMP_API_OPEN_CB_FN


84 
	gUsbPumpMsdClõ¡_O≥nSessi⁄CÆlback
;

86 
USBPUMP_CLASSKIT_OPEN_FUNCTION_CB_FN


87 
	gUsbPumpMsdClõ¡_O≥nCÆlback
;

89 
USBPUMP_API_CLOSE_CB_FN


90 
	gUsbPumpMsdClõ¡_Clo£CÆlback
;

93 
UsbPumpMsdClõ¡_SèπRód
(

94 
USBPUMP_CLASS_MSD_CLIENT_DEVICE
 * 
pMsdDevi˚
,

95 
USBPUMP_CLASS_MSD_CLIENT_LUN
 * 
pMsdLun


98 
USBPUMP_USBDI_CLASS_MSD_REQUEST_DONE_FN


99 
	gUsbPumpMsdClõ¡_RódD⁄e
;

103 
UINT32


104 
πems_˛ock_gë_ticks_≥r_£c⁄d
(

109 
__TMS_f‹˚ölöe


110 
UINT32


111 
	$πems_˛ock_gë_ticks_sö˚_boŸ
(

115 
UINT32
 
_W©chdog_Ticks_sö˚_boŸ
;

117  
_W©chdog_Ticks_sö˚_boŸ
;

118 
	}
}

131 
CONST
 
USBPUMP_CLASSKIT_CLASS_OUTCALL


132 
	gsk_UsbPumpUsbdiMsdClõ¡_CœssOutCÆl
 =

133 
USBPUMP_CLASSKIT_CLASS_OUTCALL_INIT_V1
(

134 
UsbPumpMsdClõ¡_CœssNŸifiˇti⁄


137 
CONST
 
USBPUMP_CLASSKIT_FUNCTION_OUTCALL


138 
	gsk_UsbPumpUsbdiMsdClõ¡_Fun˘i⁄OutCÆl
 =

139 
USBPUMP_CLASSKIT_FUNCTION_OUTCALL_INIT_V1
(

140 
UsbPumpMsdClõ¡_Fun˘i⁄NŸifiˇti⁄


184 
	#FUNCTION
 "UsbPumpHo°Aµ_MsdClõ¡Cª©e"

	)

186 
USBPUMP_CLASS_MSD_CLIENT
 *

187 
	$UsbPumpHo°Aµ_MsdClõ¡Cª©e
(

188 
UPLATFORM
 * 
pPœtf‹m
,

189 
UINT32
 
DebugFœgs
,

190 
BYTES
 
D©aBuf„rSize


193 
USBPUMP_OBJECT_ROOT
 * 
pRoŸObje˘
;

194 
USBPUMP_OBJECT_HEADER
 * 
pCœssObje˘
;

195 
USBPUMP_CLASS_MSD_CLIENT
 * 
pMsdClõ¡
;

196 
USTAT
 
Sètus
;

198 
pRoŸObje˘
 = 
	`UsbPumpObje˘_GëRoŸ
(&
pPœtf‹m
->
upf_Hódî
);

203 
pCœssObje˘
 = 
	`UsbPumpObje˘_Enumî©eM©chögNames
(

204 &
pRoŸObje˘
->
Hódî
,

205 
NULL
,

206 
USBPUMP_USBDI_CLASS_MSD_NAME


212 i‡(
pCœssObje˘
 =
NULL
)

214 
	`TTUSB_PLATFORM_PRINTF
((

215 
pPœtf‹m
,

216 
UDMASK_ERRORS
,

217 "?" 
FUNCTION
 ":"

220  
NULL
;

226 
pMsdClõ¡
 = 
	`UsbPumpPœtf‹m_MÆlocZîo
(
pPœtf‹m
, (*pMsdClient));

227 i‡(
pMsdClõ¡
 =
NULL
)

229 
	`TTUSB_PLATFORM_PRINTF
((

230 
pPœtf‹m
,

231 
UDMASK_ANY
 | 
UDMASK_ERRORS
,

232 "?" 
FUNCTION
 ":"

234 (*
pMsdClõ¡
)

236  
NULL
;

239 
	`UsbPumpObje˘_Inô
(

240 &
pMsdClõ¡
->
Obje˘Hódî
,

241 
pPœtf‹m
->
upf_Hódî
.
pCœssP¨ít
,

243 
	`UHIL_MEMTAG
('M', 's', 'd', 'C'),

244 (*
pMsdClõ¡
),

246 &
pPœtf‹m
->
upf_Hódî
,

247 
NULL


250 
pMsdClõ¡
->
pPœtf‹m
 =ÖPlatform;

251 
pMsdClõ¡
->
Obje˘Hódî
.
ulDebugFœgs
 |
DebugFœgs
;

252 
pMsdClõ¡
->
pCœssObje˘
 =ÖClassObject;

253 
pMsdClõ¡
->
D©aBuf„rSize
 = DataBufferSize;

255 
Sètus
 = 
	`UsbPumpMsdClõ¡_O≥nSessi⁄
(

256 
pMsdClõ¡
,

257 
pCœssObje˘


260 i‡(
Sètus
 !
USTAT_OK
)

262 
	`TTUSB_OBJPRINTF
((

263 &
pMsdClõ¡
->
Obje˘Hódî
,

264 
UDMASK_ERRORS
,

265 "?" 
FUNCTION
 ":"

267 
	`UsbPumpSètus_Name
(
Sètus
)

270 
	`UsbPumpObje˘_DeInô
(&
pMsdClõ¡
->
Obje˘Hódî
);

271 
	`UsbPumpPœtf‹m_Fªe
(

272 
pPœtf‹m
,

273 
pMsdClõ¡
,

274 (*
pMsdClõ¡
)

276  
NULL
;

279  
pMsdClõ¡
;

280 
	}
}

282 #unde‡
FUNCTION


308 
	#FUNCTION
 "UsbPumpMsdClõ¡_O≥nSessi⁄"

	)

310 
USTAT


311 
	$UsbPumpMsdClõ¡_O≥nSessi⁄
(

312 
USBPUMP_CLASS_MSD_CLIENT
 * 
pMsdClõ¡
,

313 
USBPUMP_OBJECT_HEADER
 * 
pMsdCœssObje˘


316 * 
pO≥nReque°Mem‹y
;

317 
CONST
 
RECSIZE
 
Size
 = 
	`UsbPumpObje˘_SizeO≥nSessi⁄Reque°Mem‹y
(

318 
pMsdCœssObje˘


324 
pO≥nReque°Mem‹y
 = 
	`UsbPumpPœtf‹m_MÆloc
(

325 
pMsdClõ¡
->
pPœtf‹m
,

326 
Size


328 i‡(
pO≥nReque°Mem‹y
 =
NULL
)

330 
	`TTUSB_OBJPRINTF
((

331 &
pMsdClõ¡
->
Obje˘Hódî
,

332 
UDMASK_ERRORS
,

333 "?" 
FUNCTION
 ":"

335 
Size


337  
USTAT_NO_MEMORY
;

340 
	`UsbPumpObje˘_O≥nSessi⁄
(

341 
pMsdCœssObje˘
,

342 
pO≥nReque°Mem‹y
,

343 
USBPUMP_API_OPEN_REQUEST_MEMORY_SIZE
,

344 
UsbPumpMsdClõ¡_O≥nSessi⁄CÆlback
,

345 
pMsdClõ¡
,

346 &
gk_UsbPumpUsbdiCœssMsd_Guid
,

347 
NULL
,

348 &
pMsdClõ¡
->
InCÆl
.
GíîicCa°
,

349 (
pMsdClõ¡
->
InCÆl
),

350 
pMsdClõ¡
,

351 &
sk_UsbPumpUsbdiMsdClõ¡_CœssOutCÆl
.
GíîicCa°
,

352 (
sk_UsbPumpUsbdiMsdClõ¡_CœssOutCÆl
)

355  
USTAT_OK
;

356 
	}
}

358 #unde‡
FUNCTION


360 
	#FUNCTION
 "UsbPumpMsdClõ¡_O≥nSessi⁄CÆlback"

	)

363 
	$UsbPumpMsdClõ¡_O≥nSessi⁄CÆlback
(

364 * 
pClõ¡C⁄ãxt
,

365 
USBPUMP_SESSION_HANDLE
 
Sessi⁄H™dÀ
,

366 
UINT32
 
Sètus
,

367 * 
pO≥nReque°Mem‹y
,

368 
RECSIZE
 
sizeO≥nReque°Mem‹y


371 
USBPUMP_CLASS_MSD_CLIENT
 * 
CONST
 
pMsdClõ¡
 = 
pClõ¡C⁄ãxt
;

373 i‡(
Sètus
 =
USBPUMP_CLASSKIT_STATUS_OK
)

375 
	`TTUSB_OBJPRINTF
((

376 &
pMsdClõ¡
->
Obje˘Hódî
,

377 
UDMASK_ANY
,

378 " " 
FUNCTION
 ":"

380 
Sessi⁄H™dÀ


387 
pMsdClõ¡
->
Sessi⁄H™dÀ
 = SessionHandle;

391 
	`TTUSB_OBJPRINTF
((

392 &
pMsdClõ¡
->
Obje˘Hódî
,

393 
UDMASK_ERRORS
,

394 "?" 
FUNCTION
 ":"

396 
Sètus


400 i‡(
pO≥nReque°Mem‹y
)

402 
	`UsbPumpPœtf‹m_Fªe
(

403 
pMsdClõ¡
->
pPœtf‹m
,

404 
pO≥nReque°Mem‹y
,

405 
sizeO≥nReque°Mem‹y


408 
	}
}

410 #unde‡
FUNCTION


442 
	$UsbPumpMsdClõ¡_CœssNŸifiˇti⁄
(

443 * 
pClõ¡H™dÀ
,

444 
USBPUMP_CLASSKIT_NOTIFICATION
 
NŸifiˇti⁄Id
,

445 
CONST
 * 
pNŸifiˇti⁄
,

446 
BYTES
 
nNŸifiˇti⁄


449 
USBPUMP_CLASS_MSD_CLIENT
 * 
CONST
 
pMsdClõ¡
 = 
pClõ¡H™dÀ
;

451 
	`USBPUMP_UNREFERENCED_PARAMETER
(
nNŸifiˇti⁄
);

453 
NŸifiˇti⁄Id
)

455 
USBPUMP_CLASSKIT_EVENT_DEVICE_ARRIVAL
:

456 
	`UsbPumpMsdClõ¡_Devi˚AºivÆ
(
pMsdClõ¡
, 
pNŸifiˇti⁄
);

459 
USBPUMP_CLASSKIT_EVENT_DEVICE_DEPARTURE
:

463 
USBPUMP_CLASSKIT_EVENT_FUNCTION_OPEN
:

464 
USBPUMP_CLASSKIT_EVENT_FUNCTION_CLOSE
:

470 
	}
}

496 
	#FUNCTION
 "UsbPumpMsdClõ¡_Devi˚AºivÆ"

	)

499 
	$UsbPumpMsdClõ¡_Devi˚AºivÆ
(

500 
USBPUMP_CLASS_MSD_CLIENT
 *
pMsdClõ¡
,

501 
CONST
 
USBPUMP_CLASSKIT_EVENT_DEVICE_ARRIVAL_INFO
 *
pInfo


504 
USBPUMP_CLASS_MSD_CLIENT_DEVICE
 * 
pMsdDevi˚
;

505 
USBPUMP_USBDI_FUNCTION
 * 
CONST
 
pFun˘i⁄
 = 
pInfo
->pFunction;

507 
	`TTUSB_OBJPRINTF
((

508 &
pMsdClõ¡
->
Obje˘Hódî
,

509 
UDMASK_ENTRY
 | 
UDMASK_ANY
,

510 "+" 
FUNCTION
 ":"

512 
pFun˘i⁄
,

513 
pFun˘i⁄
->
Fun˘i⁄
.
P‹tInfo
.
O≥øtögS≥ed


516 
pMsdDevi˚
 = 
	`UsbPumpPœtf‹m_MÆlocZîo
(

517 
pMsdClõ¡
->
pPœtf‹m
,

518 (*
pMsdDevi˚
)

520 i‡(
pMsdDevi˚
 =
NULL
)

522 
	`TTUSB_OBJPRINTF
((

523 &
pMsdClõ¡
->
Obje˘Hódî
,

524 
UDMASK_ERRORS
,

531 
pMsdDevi˚
->
pMsdClõ¡
 =ÖMsdClient;

532 
pMsdDevi˚
->
pFun˘i⁄
 =ÖFunction;

534 
	`USBPUMPLIB_LIST_INSERT_NODE_TAIL
(

535 
USBPUMP_CLASS_MSD_CLIENT_DEVICE
,

536 &
pMsdClõ¡
->
pMsdDevi˚Hód
,

537 
pMsdDevi˚
,

538 
pNext
,

539 
pLa°


542 (*
pMsdClõ¡
->
InCÆl
.
Msd
.
pO≥nFun˘i⁄Fn
)(

543 
pMsdClõ¡
->
Sessi⁄H™dÀ
,

544 
UsbPumpMsdClõ¡_O≥nCÆlback
,

545 
pMsdDevi˚
,

546 
pMsdDevi˚
->
pFun˘i⁄
,

547 &
pMsdDevi˚
->
InCÆl
.
CœssKôCa°
,

548 (
pMsdDevi˚
->
InCÆl
),

549 
pMsdDevi˚
,

550 &
sk_UsbPumpUsbdiMsdClõ¡_Fun˘i⁄OutCÆl
,

551 (
sk_UsbPumpUsbdiMsdClõ¡_Fun˘i⁄OutCÆl
)

553 
	}
}

555 #unde‡
FUNCTION


557 
	#FUNCTION
 "UsbPumpMsdClõ¡_O≥nCÆlback"

	)

560 
	$UsbPumpMsdClõ¡_O≥nCÆlback
(

561 * 
pCÆlbackCtx
,

562 
USBPUMP_CLASSKIT_STATUS
 
Eº‹Code
,

563 
USBPUMP_SESSION_HANDLE
 
Sessi⁄H™dÀ


566 
USBPUMP_CLASS_MSD_CLIENT_DEVICE
 * 
CONST
 
pMsdDevi˚
 = 
pCÆlbackCtx
;

567 
USBPUMP_CLASS_MSD_CLIENT_LUN
 * 
pMsdLun
;

568 
USBPUMP_CLASS_MSD_CLIENT
 * 
CONST


569 
pMsdClõ¡
 = 
pMsdDevi˚
->pMsdClient;

570 
UINT
 
i
;

572 i‡(
Eº‹Code
 !
USBPUMP_CLASSKIT_STATUS_OK
)

574 
	`TTUSB_OBJPRINTF
((

575 &
pMsdClõ¡
->
Obje˘Hódî
,

576 
UDMASK_ERRORS
,

577 "?" 
FUNCTION
 ": ErrorCode(%d)\n",

578 
Eº‹Code


583 
pMsdDevi˚
->
Sessi⁄H™dÀ
 = SessionHandle;

585 
	`TTUSB_OBJPRINTF
((

586 &
pMsdClõ¡
->
Obje˘Hódî
,

587 
UDMASK_FLOW
,

588 " " 
FUNCTION
 ":"

590 
Sessi⁄H™dÀ


593 (*
pMsdDevi˚
->
InCÆl
.
Msd
.
pGëDevi˚InfoFn
)(

594 
pMsdDevi˚
->
Sessi⁄H™dÀ
,

595 &
pMsdDevi˚
->
nLun
,

596 
NULL
,

600 
pMsdLun
 = 
	`UsbPumpPœtf‹m_MÆlocZîo
(

601 
pMsdClõ¡
->
pPœtf‹m
,

602 (*
pMsdLun
Ë* 
pMsdDevi˚
->
nLun


604 i‡(
pMsdLun
 =
NULL
)

606 
	`TTUSB_OBJPRINTF
((

607 &
pMsdClõ¡
->
Obje˘Hódî
,

608 
UDMASK_ERRORS
,

609 "?" 
FUNCTION
 ":"

611 
pMsdDevi˚
->
nLun


616 
pMsdDevi˚
->
pLun
 = 
pMsdLun
;

618 
i
 = 0; i < 
pMsdDevi˚
->
nLun
; ++
pMsdLun
, ++i)

620 
pMsdLun
->
pMsdDevi˚
 =ÖMsdDevice;

621 
pMsdLun
->
Lun
 = 
i
;

623 (*
pMsdDevi˚
->
InCÆl
.
Msd
.
pGëLunInfoFn
)(

624 
pMsdDevi˚
->
Sessi⁄H™dÀ
,

625 
i
,

626 &
pMsdLun
->
LunInfo


629 
	`TTUSB_OBJPRINTF
((

630 &
pMsdClõ¡
->
Obje˘Hódî
,

631 
UDMASK_FLOW
,

632 " " 
FUNCTION
 ":"

634 
i
,

635 
pMsdLun
->
LunInfo
.
Víd‹Id
,

636 
pMsdLun
->
LunInfo
.
Produ˘Id


639 (*
pMsdDevi˚
->
InCÆl
.
Msd
.
pGëMedüInfoFn
)(

640 
pMsdDevi˚
->
Sessi⁄H™dÀ
,

641 
i
,

642 &
pMsdLun
->
MedüInfo


645 
	`TTUSB_OBJPRINTF
((

646 &
pMsdClõ¡
->
Obje˘Hódî
,

647 
UDMASK_FLOW
,

649 
pMsdLun
->
MedüInfo
.
SizeOfBlock
,

650 
pMsdLun
->
MedüInfo
.
TŸÆBlocks
,

651 
pMsdLun
->
MedüInfo
.
fWrôePrŸe˘ed


654 
pMsdLun
->
nBuf„r
 = 
pMsdClõ¡
->
D©aBuf„rSize
;

655 
pMsdLun
->
hBuf„r
 = 
	`UsbPumpPœtf‹m_AŒoˇãComm⁄Buf„r
(

656 
pMsdClõ¡
->
pPœtf‹m
,

657 
pMsdLun
->
nBuf„r
,

658 
USBPUMP_ALIGNMENT
,

659 &
pMsdLun
->
pBuf„r


661 i‡(
pMsdLun
->
hBuf„r
 =
NULL
)

663 
	`TTUSB_OBJPRINTF
((

664 &
pMsdClõ¡
->
Obje˘Hódî
,

665 
UDMASK_ERRORS
,

666 "?" 
FUNCTION
 ":"

669 
pMsdLun
->
pBuf„r
 = 
	`UsbPumpPœtf‹m_MÆloc
(

670 
pMsdClõ¡
->
pPœtf‹m
,

671 
pMsdLun
->
nBuf„r


673 i‡(
pMsdLun
->
pBuf„r
 =
NULL
)

675 
	`TTUSB_OBJPRINTF
((

676 &
pMsdClõ¡
->
Obje˘Hódî
,

677 
UDMASK_ERRORS
,

678 "?" 
FUNCTION
 ":"

681 
pMsdLun
->
nBuf„r


687 i‡(
pMsdLun
->
MedüInfo
.
fHasMedü
)

689 
pMsdLun
->
SèπLBA
 = 0;

690 
pMsdLun
->
NumbîOfLBA
 =

691 
pMsdLun
->
nBuf„r
 /ÖMsdLun->
MedüInfo
.
SizeOfBlock
;

692 
	`UsbPumpMsdClõ¡_SèπRód
(
pMsdDevi˚
, 
pMsdLun
);

695 
	}
}

697 #unde‡
FUNCTION


722 
	#FUNCTION
 "UsbPumpMsdClõ¡_Devi˚Dï¨tuª"

	)

725 
	$UsbPumpMsdClõ¡_Devi˚Dï¨tuª
(

726 
USBPUMP_CLASS_MSD_CLIENT
 *
pMsdClõ¡
,

727 
USBPUMP_CLASS_MSD_CLIENT_DEVICE
 *
pMsdDevi˚


730 
	`USBPUMP_TRACE_PARAMETER
(
pMsdClõ¡
);

732 
	`TTUSB_OBJPRINTF
((

733 &
pMsdClõ¡
->
Obje˘Hódî
,

734 
UDMASK_ENTRY
 | 
UDMASK_ANY
,

735 "+" 
FUNCTION
 ":"

737 
pMsdDevi˚
->
pFun˘i⁄


740 (*
pMsdDevi˚
->
InCÆl
.
Msd
.
pClo£Fn
)(

741 
pMsdDevi˚
->
Sessi⁄H™dÀ
,

742 
UsbPumpMsdClõ¡_Clo£CÆlback
,

743 
pMsdDevi˚


745 
	}
}

747 #unde‡
FUNCTION


749 
	#FUNCTION
 "UsbPumpMsdClõ¡_Clo£CÆlback"

	)

752 
	$UsbPumpMsdClõ¡_Clo£CÆlback
(

753 * 
pCÆlbackCtx
,

754 
USBPUMP_CLASSKIT_STATUS
 
Eº‹Code


757 
USBPUMP_CLASS_MSD_CLIENT_DEVICE
 * 
CONST
 
pMsdDevi˚
 = 
pCÆlbackCtx
;

758 
USBPUMP_CLASS_MSD_CLIENT_LUN
 * 
pMsdLun
;

759 
USBPUMP_CLASS_MSD_CLIENT
 * 
CONST


760 
pMsdClõ¡
 = 
pMsdDevi˚
->pMsdClient;

762 i‡(
Eº‹Code
 !
USBPUMP_CLASSKIT_STATUS_OK
)

764 
	`TTUSB_OBJPRINTF
((

765 &
pMsdClõ¡
->
Obje˘Hódî
,

766 
UDMASK_ERRORS
,

767 "?" 
FUNCTION
 ":"

769 
Eº‹Code


773 
	`USBPUMPLIB_LIST_REMOVE_NODE
(

774 
USBPUMP_CLASS_MSD_CLIENT_DEVICE
,

775 &
pMsdClõ¡
->
pMsdDevi˚Hód
,

776 
pMsdDevi˚
,

777 
pNext
,

778 
pLa°


781 i‡((
pMsdLun
 = 
pMsdDevi˚
->
pLun
Ë!
NULL
)

783 
UINT
 
i
;

785 
i
 = 0; i < 
pMsdDevi˚
->
nLun
; ++
pMsdLun
, ++i)

787 i‡(
pMsdLun
->
hBuf„r
 !
NULL
)

789 
	`UsbPumpPœtf‹m_FªeComm⁄Buf„r
(

790 
pMsdClõ¡
->
pPœtf‹m
,

791 
pMsdLun
->
hBuf„r


794 i‡(
pMsdLun
->
pBuf„r
 !
NULL
)

796 
	`UsbPumpPœtf‹m_Fªe
(

797 
pMsdClõ¡
->
pPœtf‹m
,

798 
pMsdLun
->
pBuf„r
,

799 
pMsdLun
->
nBuf„r


804 
	`UsbPumpPœtf‹m_Fªe
(

805 
pMsdClõ¡
->
pPœtf‹m
,

806 
pMsdDevi˚
->
pLun
,

807 (*
pMsdLun
Ë* 
pMsdDevi˚
->
nLun


811 
	`UsbPumpPœtf‹m_Fªe
(

812 
pMsdClõ¡
->
pPœtf‹m
,

813 
pMsdDevi˚
,

814 (*
pMsdDevi˚
)

816 
	}
}

818 #unde‡
FUNCTION


850 
	$UsbPumpMsdClõ¡_Fun˘i⁄NŸifiˇti⁄
(

851 * 
pClõ¡H™dÀ
,

852 
USBPUMP_CLASSKIT_NOTIFICATION
 
NŸifiˇti⁄Id
,

853 
CONST
 * 
pNŸifiˇti⁄
,

854 
BYTES
 
nNŸifiˇti⁄


857 
USBPUMP_CLASS_MSD_CLIENT_DEVICE
 * 
CONST
 
pMsdDevi˚
 = 
pClõ¡H™dÀ
;

858 
USBPUMP_CLASS_MSD_CLIENT
 * 
CONST
 
pMsdClõ¡
 = 
pMsdDevi˚
->pMsdClient;

859 
USBPUMP_CLASS_MSD_CLIENT_LUN
 * 
pMsdLun
;

861 
	`USBPUMP_UNREFERENCED_PARAMETER
(
nNŸifiˇti⁄
);

863 
NŸifiˇti⁄Id
)

865 
USBPUMP_CLASSKIT_EVENT_DEVICE_DEPARTURE
:

866 
	`UsbPumpMsdClõ¡_Devi˚Dï¨tuª
(
pMsdClõ¡
, 
pMsdDevi˚
);

869 
USBPUMP_USBDI_MSD_EVENT_MEDIA_CHANGE
:

871 
CONST
 
USBPUMP_USBDI_MSD_EVENT_MEDIA_CHANGE_INFO
 * CONST

872 
pEvítInfo
 = 
pNŸifiˇti⁄
;

874 
	`TTUSB_OBJPRINTF
((

875 &
pMsdClõ¡
->
Obje˘Hódî
,

876 
UDMASK_ANY
,

879 
pEvítInfo
->
pFun˘i⁄
,

880 
pEvítInfo
->
Lun
,

881 
pEvítInfo
->
fHasMedü


884 
pMsdLun
 = 
pMsdDevi˚
->
pLun
 + 
pEvítInfo
->
Lun
;

885 
pMsdLun
->
MedüInfo
.
fHasMedü
 = 
pEvítInfo
->fHasMedia;

886 
pMsdLun
->
MedüInfo
.
SizeOfBlock
 = 
pEvítInfo
->SizeOfBlock;

887 
pMsdLun
->
MedüInfo
.
TŸÆBlocks
 = 
pEvítInfo
->TotalBlocks;

889 i‡(
pMsdLun
->
MedüInfo
.
fHasMedü
)

891 
pMsdLun
->
SèπLBA
 = 0;

892 
pMsdLun
->
NumbîOfLBA
 =

893 
pMsdLun
->
nBuf„r
 /ÖMsdLun->
MedüInfo
.
SizeOfBlock
;

894 
	`UsbPumpMsdClõ¡_SèπRód
(
pMsdDevi˚
, 
pMsdLun
);

902 
	}
}

904 
	#FUNCTION
 "UsbPumpMsdClõ¡_SèπRód"

	)

907 
	$UsbPumpMsdClõ¡_SèπRód
(

908 
USBPUMP_CLASS_MSD_CLIENT_DEVICE
 * 
pMsdDevi˚
,

909 
USBPUMP_CLASS_MSD_CLIENT_LUN
 * 
pMsdLun


912 
UINT32
 
SèπLBA
;

913 
UINT16
 
NumbîOfLBA
;

915 
NumbîOfLBA
 = (
UINT16
Ë
pMsdLun
->NumberOfLBA;

916 i‡((
SèπLBA
 = 
pMsdLun
->StartLBA) == 0)

918 
	`TTUSB_OBJPRINTF
((

919 &
pMsdDevi˚
->
pMsdClõ¡
->
Obje˘Hódî
,

920 
UDMASK_ANY
 | 
UDMASK_FLOW
,

921 " " 
FUNCTION
 ":"

924 
pMsdLun
->
nBuf„r
,

925 
	`πems_˛ock_gë_ticks_≥r_£c⁄d
()

927 
	`TTUSB_FLUSH
(
pMsdDevi˚
->
pMsdClõ¡
->
pPœtf‹m
);

929 
pMsdLun
->
RódBlocks
 = 0;

930 
pMsdLun
->
SèπTimeTick
 =

931 
	`πems_˛ock_gë_ticks_sö˚_boŸ
();

934 i‡((
SèπLBA
 + 
NumbîOfLBA
Ë> 
pMsdLun
->
MedüInfo
.
TŸÆBlocks
)

936 
pMsdLun
->
SèπLBA
 = 1;

937 i‡(
SèπLBA
 < 
pMsdLun
->
MedüInfo
.
TŸÆBlocks
)

938 
NumbîOfLBA
 = 
pMsdLun
->
MedüInfo
.
TŸÆBlocks
 - 
SèπLBA
;

940 
SèπLBA
 = 
pMsdLun
->StartLBA;

944 
pMsdLun
->
SèπLBA
 +
NumbîOfLBA
;

947 
pMsdLun
->
RódBlocks
 +
NumbîOfLBA
;

949 
	`UsbPumpUsbdMsd_Pª∑ªReque°
( \

950 &
pMsdLun
->
Reque°
, \

951 
USBPUMP_USBDI_CLASS_MSD_REQUEST_READ
, \

952 
pMsdLun
->
Lun
, \

953 
SèπLBA
, \

954 
NumbîOfLBA
, \

956 
pMsdLun
->
pBuf„r
, \

957 
pMsdLun
->
hBuf„r
, \

958 
NumbîOfLBA
 * 
pMsdLun
->
MedüInfo
.
SizeOfBlock
, \

959 
UsbPumpMsdClõ¡_RódD⁄e
, \

960 
pMsdLun
 \

963 (*
pMsdDevi˚
->
InCÆl
.
Msd
.
pSubmôReque°Fn
)(

964 
pMsdDevi˚
->
Sessi⁄H™dÀ
,

965 &
pMsdLun
->
Reque°


967 
	}
}

969 #unde‡
FUNCTION


971 
	#FUNCTION
 "UsbPumpMsdClõ¡_RódD⁄e"

	)

974 
	$UsbPumpMsdClõ¡_RódD⁄e
(

975 
USBPUMP_USBDI_FUNCTION
 * 
pFun˘i⁄
,

976 
USBPUMP_USBDI_CLASS_MSD_REQUEST
 * 
pReque°
,

977 * 
pD⁄eInfo
,

978 
USBPUMP_USBDI_CLASS_MSD_REQUEST_STAT
 
Sètus


981 
USBPUMP_CLASS_MSD_CLIENT_LUN
 * 
CONST
 
pMsdLun
 = 
pD⁄eInfo
;

982 
USBPUMP_CLASS_MSD_CLIENT_DEVICE
 * 
CONST


983 
pMsdDevi˚
 = 
pMsdLun
->pMsdDevice;

985 
	`USBPUMP_UNREFERENCED_PARAMETER
(
pFun˘i⁄
);

986 
	`USBPUMP_UNREFERENCED_PARAMETER
(
pReque°
);

988 i‡(
Sètus
 !
USBPUMP_USBDI_CLASS_MSD_REQUEST_STAT_OK
)

990 
	`TTUSB_OBJPRINTF
((

991 &
pMsdDevi˚
->
pMsdClõ¡
->
Obje˘Hódî
,

992 
UDMASK_ERRORS
,

993 "?" 
FUNCTION
 ":"

995 
Sètus


997 i‡(
Sètus
 =
USBPUMP_USBDI_CLASS_MSD_REQUEST_STAT_NO_DEVICE
 ||

998 
Sètus
 =
USBPUMP_USBDI_CLASS_MSD_REQUEST_STAT_NO_MEDIA
)

1000 
	`TTUSB_OBJPRINTF
((

1001 &
pMsdDevi˚
->
pMsdClõ¡
->
Obje˘Hódî
,

1002 
UDMASK_ERRORS
,

1003 "?" 
FUNCTION
 ":"

1010 i‡(
pMsdLun
->
RódBlocks
 > (512 * 1024))

1012 
UINT32
 
TimeTick
;

1013 
UINT32
 
RódByãs
;

1014 
UINT32
 
RódByãsPîSec⁄d
;

1016 
TimeTick
 = 
	`πems_˛ock_gë_ticks_sö˚_boŸ
();

1017 i‡(
TimeTick
 > 
pMsdLun
->
SèπTimeTick
)

1018 
TimeTick
 -
pMsdLun
->
SèπTimeTick
;

1020 
TimeTick
 +0 - 
pMsdLun
->
SèπTimeTick
;

1022 
RódByãs
 = 
pMsdLun
->
RódBlocks
 *

1023 
pMsdLun
->
MedüInfo
.
SizeOfBlock
;

1024 
RódByãsPîSec⁄d
 = 
RódByãs
 / 
TimeTick
 *

1025 
	`πems_˛ock_gë_ticks_≥r_£c⁄d
();

1026 
RódByãsPîSec⁄d
 /= 1024 * 1024;

1028 
	`TTUSB_OBJPRINTF
((

1029 &
pMsdDevi˚
->
pMsdClõ¡
->
Obje˘Hódî
,

1030 
UDMASK_ANY
 | 
UDMASK_FLOW
,

1031 " " 
FUNCTION
 ":"

1034 
pMsdLun
->
RódBlocks
,

1035 
TimeTick
,

1036 
RódByãs
,

1037 
RódByãsPîSec⁄d


1039 
	`TTUSB_FLUSH
(
pMsdDevi˚
->
pMsdClõ¡
->
pPœtf‹m
);

1041 
pMsdLun
->
RódBlocks
 = 0;

1042 
pMsdLun
->
SèπTimeTick
 =

1043 
	`πems_˛ock_gë_ticks_sö˚_boŸ
();

1045 i‡(++
pMsdLun
->
Te°Cou¡
 > 4)

1047 
	`TTUSB_OBJPRINTF
((

1048 &
pMsdDevi˚
->
pMsdClõ¡
->
Obje˘Hódî
,

1049 
UDMASK_ENTRY
 | 
UDMASK_ANY
,

1050 "-" 
FUNCTION
 ":"

1057 
	`UsbPumpMsdClõ¡_SèπRód
(
pMsdDevi˚
, 
pMsdLun
);

1058 
	}
}

1060 #unde‡
FUNCTION


	@Demo/UsbHost/leon/main.c

9 
	~<°dio.h
>

10 
	~<°dlib.h
>

11 
	~<πems.h
>

12 
	~<time.h
>

13 
	~<b•.h
>

15 
	~"≠p_c⁄fig.h
"

16 
	~"πems_c⁄fig.h
"

17 
	~"OsDrvUsbPhy.h
"

18 
	~"usbpumpdebug.h
"

20 
	~<sys/ty≥s.h
>

21 
	~<sys/°©.h
>

22 
	~<f˙é.h
>

23 
	~<uni°d.h
>

24 
	~"OsDrvC¥.h
"

26 
	~"usbpump_≠∂iˇti⁄_πems_≠i.h
"

27 #ifde‡
RTEMS_USB_HOST_BUILD


28 
	~"usbpump_≠∂iˇti⁄_πems_ho°_≠i.h
"

31 #i‚de‡
RTEMS_USB_HOST_BIND_FILE_SYSTEM


32 
	#RTEMS_USB_HOST_BIND_FILE_SYSTEM
 0

	)

42 #i‚de‡
DISABLE_LEON_DCACHE


43 
	#USBPUMP_MDK_CACHE_ENABLE
 1

	)

45 
	#USBPUMP_MDK_CACHE_ENABLE
 0

	)

48 
USBPUMP_APPLICATION_RTEMS_CONFIGURATION
 
	gsg_D©aPump_AµC⁄fig
 =

49 
USBPUMP_APPLICATION_RTEMS_CONFIGURATION_INIT_V3
(

51  
NULL
,

56  
NULL
,

57  
NULL
,

58  
USBPUMP_MDK_CACHE_ENABLE
,

59  
UDMASK_ERRORS
 | 
UDMASK_ANY
,

60  
NULL
,

64 
tyAuxClkDividîCfg
 
	gauxClk
[] =

67 .
auxClockE«bÀMask
 = 
AUX_CLK_MASK_USB_CTRL_SUSPEND_CLK
,

68 .
	gauxClockSour˚
 = 
CLK_SRC_PLL0
,

69 .
	gauxClockDivNumî©‹
 = 1,

70 .
	gauxClockDivDíomö©‹
 = 24

75 #i‚de‡
FILE_BUFFER_SIZE


76 
	#FILE_BUFFER_SIZE
 (1024 * 1024)

	)

79 #i‚de‡
READ_FILE_NAME


80 
	#READ_FILE_NAME
 "ªad.d©"

	)

83 #i‚de‡
WRITE_FILE_NAME


84 
	#WRITE_FILE_NAME
 "wrôe.d©"

	)

87 #i‡
RTEMS_USB_HOST_BIND_FILE_SYSTEM


88 
u32
 
	gsFûeBuf„r
[
FILE_BUFFER_SIZE
 / (u32)];

93 *
	$shñlCª©e
(*
˘x
)

95 
	`UNUSED
(
˘x
);

97 
	`¥ötf
("Starting RTEMS shell\n");

98 
	`πems_shñl_öô
(

100 
RTEMS_MINIMUM_STACK_SIZE
 * 4,

103 
Ál£
,

104 
åue
,

105 
NULL


107  
NULL
;

108 
	}
}

110 
	$lsusb_maö
(
¨gc
, **
¨gv
)

112 
Buf„rSize
;

114 i‡(
¨gc
 < 2)

115 
Buf„rSize
 = 2048;

118 
	`ssˇnf
(
¨gv
[1], "%u", &
Buf„rSize
);

119 i‡(
Buf„rSize
 < 256)

120 
Buf„rSize
 = 256;

123 
	`UsbPump_Rãms_D©aPump_Li°UsbDevi˚
(
Buf„rSize
);

125 
	}
}

127 
	$£tdebugÊags_maö
(
¨gc
, **
¨gv
)

129 *
pObje˘NameP©ã∫
;

130 
CÀ¨DebugFœgs
;

131 
SëDebugFœgs
;

133 i‡(
¨gc
 < 4)

135 
	`¥ötf
("usage: setdebugflags object_name_pattern clear_debug_flags set_debug_flags\n");

139 
pObje˘NameP©ã∫
 = 
¨gv
[1];

140 
CÀ¨DebugFœgs
 = 0;

141 
SëDebugFœgs
 = 0;

142 
	`ssˇnf
(
¨gv
[2], "%x", &
CÀ¨DebugFœgs
);

143 
	`ssˇnf
(
¨gv
[3], "%x", &
SëDebugFœgs
);

145 
	`¥ötf
("Setting debug flags for \"%s\" clear=%x set=%x\n",

146 
pObje˘NameP©ã∫
,

147 
CÀ¨DebugFœgs
,

148 
SëDebugFœgs


151 
	`UsbPump_Rãms_D©aPump_SëDebugFœgs
(

152 
pObje˘NameP©ã∫
,

153 
CÀ¨DebugFœgs
,

154 
SëDebugFœgs


157 
	}
}

159 #i‡
RTEMS_USB_HOST_BIND_FILE_SYSTEM


160 *
Fûe_Sy°em_Pîf‹m™˚_Thªad
(*
¨g
);

166 *
	$POSIX_Inô
 (*
¨gs
)

168 
	`UNUSED
(
¨gs
);

170 
s32
 
sc
;

171 
±hªad_©å_t
 
©å
;

172 
±hªad_t
 
thr
;

174 
	`OsDrvC¥Inô
();

175 
	`OsDrvC¥O≥n
();

176 
sc
 = 
	`OsDrvC¥AuxClockAºayC⁄fig
(
auxClk
);

177 i‡(
sc
)

178 
	`exô
(
sc
);

180 
sc
 = 
	`OsDrvUsbPhyInô
(
NULL
);

181 if(
sc
)

182 
	`exô
(
sc
);

183 i‡(
	`UsbPump_Rãms_D©aPump_Ho°Sèπup
(&
sg_D©aPump_AµC⁄fig
Ë!
NULL
)

184 
	`¥ötf
("\n\nUsbPump_Rtems_DataPump_Startup()!\n\n\n");

187 
	`¥ötf
("\n\nUsbPump_Rtems_DataPump_Startup() failed!\n\n\n");

188 
	`exô
(1);

191 
sc
 = 
	`±hªad_©å_öô
(&
©å
);

192 i‡(
sc
)

194 
	`¥ötf
("pthread_attr_initÉrror");

195 
	`exô
(
sc
);

197 
sc
 = 
	`±hªad_©å_£töhîôsched
(&
©å
, 
PTHREAD_EXPLICIT_SCHED
);

198 i‡(
sc
)

200 
	`¥ötf
("pthread_attr_setinheritschedÉrror");

201 
	`exô
(
sc
);

203 
sc
 = 
	`±hªad_©å_£tschedpﬁicy
(&
©å
, 
SCHED_RR
);

204 i‡(
sc
)

206 
	`¥ötf
("pthread_attr_setschedpolicyÉrror");

207 
	`exô
(
sc
);

211 #i‡
RTEMS_USB_HOST_BIND_FILE_SYSTEM


212 
	`UsbPump_Rãms_D©aPump_MsdClõ¡Cª©e
(

213 
	`UsbPump_Rãms_D©aPump_GëPœtf‹m
(),

214 
UDMASK_ERRORS
 | 
UDMASK_ANY
 | 
UDMASK_FLOW
,

220 
sc
 = 
	`±hªad_¸óã
(&
thr
, &
©å
, &
Fûe_Sy°em_Pîf‹m™˚_Thªad
, 
NULL
);

221 i‡(
sc
)

223 
	`¥ötf
("Pîf‹m™˚Åhªad cª©i⁄ faûed: %d\n", (Ë
sc
);

224 
	`exô
(
sc
);

227 
	`UsbPump_Rãms_Ho°Aµ_MsdClõ¡Cª©e
(

228 
	`UsbPump_Rãms_D©aPump_GëPœtf‹m
(),

229 
UDMASK_ERRORS
 | 
UDMASK_FLOW
,

235 
	`UsbPump_Rãms_Ho°Aµ_GcdClõ¡Cª©e
(

236 
	`UsbPump_Rãms_D©aPump_GëPœtf‹m
(),

237 
UDMASK_ERRORS
 | 
UDMASK_ANY
,

240 
TRUE


243 
	`πems_shñl_add_cmd
(

247 
lsusb_maö


250 
	`πems_shñl_add_cmd
(

254 
£tdebugÊags_maö


257 
sc
 = 
	`±hªad_¸óã
(&
thr
, &
©å
, &
shñlCª©e
, 
NULL
);

258 i‡(
sc
)

260 
	`¥ötf
("Shñ»thªad cª©i⁄ faûed: %d\n", (Ë
sc
);

261 
	`exô
(
sc
);

264 
sc
 = 
	`±hªad_joö
(
thr
, 
NULL
);

265 i‡(
sc
)

267 
	`¥ötf
("pthread_joinÉrror!");

268 
	`exô
(
sc
);

271  
NULL
;

272 
	}
}

278 #i‡
RTEMS_USB_HOST_BIND_FILE_SYSTEM


279 *
	$Fûe_Sy°em_Pîf‹m™˚_Thªad
(*
¨g
)

281 
	`UNUSED
(
¨g
);

283 
fd1
 = 0;

284 
fd2
 = 0;

285 
i
;

286 
TimeTickS
, 
TimeTickE
, 
ªadByã
, 
wrôeByã
;

287 
u8
 *
pBuf„r
;

288 
πems_°©us_code
 
sc
;

290 
	`¥ötf
("Starting File_System_Performance_Thread\n");

291 
fd1
 <= 0)

294 
fd1
 = 
	`›í
("/m¡/usb_0_0/" 
READ_FILE_NAME
, 
O_RDONLY
);

296 i‡(
fd1
 <= 0)

298 
	`πems_èsk_wake_a·î
(1000);

301 
	`¥ötf
("O≥¿/m¡/usb_0_0/" 
READ_FILE_NAME
 "\n");

304 
	`¥ötf
("Start READÅest...\n" );

305 
ªadByã
 = 0;

306 
TimeTickS
 = 
	`πems_˛ock_gë_ticks_sö˚_boŸ
();

307 (
sc
 = 
	`ªad
(
fd1
, 
sFûeBuf„r
, (sFileBuffer)) > 0))

309 
ªadByã
 +(
sFûeBuf„r
);

311 
TimeTickE
 = 
	`πems_˛ock_gë_ticks_sö˚_boŸ
();

313 i‡(
TimeTickE
 > 
TimeTickS
)

314 
TimeTickE
 -
TimeTickS
;

316 
TimeTickE
 +0 - 
TimeTickS
;

318 
	`¥ötf
(" Read %ld bytes TimeTicks(%ld) %d KB/sec\n\n",

319 
ªadByã
,

320 
TimeTickE
,

321 ()(
ªadByã
/
TimeTickE
*
	`πems_˛ock_gë_ticks_≥r_£c⁄d
()/1024)

324 
fd2
 <= 0)

327 
fd2
 = 
	`›í
("/m¡/usb_0_0/" 
WRITE_FILE_NAME
, 
O_RDWR
 | 
O_CREAT
);

329 i‡(
fd2
 <= 0)

331 
	`πems_èsk_wake_a·î
(1000);

335 
pBuf„r
 = (
u8
 *Ë
sFûeBuf„r
, 
i
 = 0; i < (sFileBuffer); ++i)

337 
pBuf„r
[
i
] = (
u8
)(0x30 + i%10);

340 
	`¥ötf
("Start WRITEÅest...\n" );

341 
wrôeByã
=0;

342 
TimeTickS
 = 
	`πems_˛ock_gë_ticks_sö˚_boŸ
();

343 
i
 = 0; i < 128; ++i)

345 
sc
 = 
	`wrôe
(
fd2
, 
sFûeBuf„r
, (sFileBuffer));

346 i‡(
sc
 > 0)

347 
wrôeByã
 +(
sFûeBuf„r
);

351 
TimeTickE
 = 
	`πems_˛ock_gë_ticks_sö˚_boŸ
();

353 i‡(
TimeTickE
 > 
TimeTickS
)

354 
TimeTickE
 -
TimeTickS
;

356 
TimeTickE
 +0 - 
TimeTickS
;

358 
	`¥ötf
(" Write %ld bytes TimeTicks(%ld) %d KB/sec\n\n",

359 
wrôeByã
,

360 
TimeTickE
,

361 ()(
wrôeByã
/
TimeTickE
*
	`πems_˛ock_gë_ticks_≥r_£c⁄d
()/1024)

364 
	`fsync
(
fd1
);

365 
	`˛o£
(
fd1
);

366 
	`fsync
(
fd2
);

367 
	`˛o£
(
fd2
);

369 
	`¥ötf
("End File_System_Performance_Thread\n");

371  
NULL
;

372 
	}
}

	@Demo/UsbHost/leon/rtems_config.h

9 #i‚de‡
_RTEMS_CONFIG_H_


10 
	#_RTEMS_CONFIG_H_


	)

14 
	~<πems.h
>

15 
	~<πems/b•Io.h
>

16 
	~<b•.h
>

17 
	~"≠p_c⁄fig.h
"

18 
	~"ÁèlExãnsi⁄.h
"

22 #i‡
deföed
(
__RTEMS__
)

24 #i‡!
deföed
 (
__CONFIG__
)

25 
	#__CONFIG__


	)

28 
	#CONFIGURE_INIT


	)

30 #i‚de‡
RTEMS_POSIX_API


31 
	#RTEMS_POSIX_API


	)

34 
	#CONFIGURE_MICROSECONDS_PER_TICK
 1000

	)

35 
	#CONFIGURE_TICKS_PER_TIMESLICE
 50

	)

36 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

37 
	#CONFIGURE_APPLICATION_NEEDS_CLOCK_DRIVER


	)

38 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

39 
	#CONFIGURE_MINIMUM_TASK_STACK_SIZE
 (4096)

	)

40 
	#CONFIGURE_MAXIMUM_TASKS
 20

	)

41 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 5

	)

42 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 8

	)

43 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 8

	)

44 
	#CONFIGURE_MAXIMUM_POSIX_SEMAPHORES
 8

	)

45 
	#CONFIGURE_MAXIMUM_POSIX_MESSAGE_QUEUES
 8

	)

46 
	#CONFIGURE_MAXIMUM_POSIX_TIMERS
 4

	)

47 
	#CONFIGURE_MAXIMUM_TIMERS
 4

	)

48 
	#CONFIGURE_USE_IMFS_AS_BASE_FILESYSTEM


	)

49 
	#CONFIGURE_FILESYSTEM_DOSFS


	)

50 
	#CONFIGURE_MAXIMUM_DRIVERS
 10

	)

51 
	#CONFIGURE_MAXIMUM_SEMAPHORES
 (4 * 
RTEMS_DOSFS_SEMAPHORES_PER_INSTANCE
)

	)

52 
	#CONFIGURE_LIBIO_MAXIMUM_FILE_DESCRIPTORS
 30

	)

53 
	#CONFIGURE_APPLICATION_NEEDS_LIBBLOCK


	)

54 
	#CONFIGURE_POSIX_INIT_TASKS_TABLE


	)

57 
	#CONFIGURE_BDBUF_MAX_READ_AHEAD_BLOCKS
 30

	)

58 
	#CONFIGURE_BDBUF_MAX_WRITE_BLOCKS
 64

	)

59 
	#CONFIGURE_BDBUF_BUFFER_MIN_SIZE
 (512)

	)

60 
	#CONFIGURE_BDBUF_BUFFER_MAX_SIZE
 (32 * 1024)

	)

61 
	#CONFIGURE_BDBUF_CACHE_MEMORY_SIZE
 (4 * 1024 * 1024)

	)

63 *
POSIX_Inô
 (*
¨gs
);

65 
	#CONFIGURE_MAXIMUM_USER_EXTENSIONS
 1

	)

66 
	#CONFIGURE_INITIAL_EXTENSIONS
 { .
Áèl
 = 
F©Æ_exãnsi⁄
 }

	)

68 
	~<πems/shñl.h
>

69 
	#CONFIGURE_SHELL_COMMANDS_INIT


	)

70 
	#CONFIGURE_SHELL_COMMANDS_ALL


	)

71 
	~<πems/shñlc⁄fig.h
>

73 *
POSIX_Inô
 (*
¨gs
);

75 
	~<πems/c⁄fdefs.h
>

80 
BSP_SET_CLOCK
(
DEFAULT_OSC0_KHZ
, 
PLL_DESIRED_FREQ_KHZ
, 1, 1, 
DEFAULT_RTEMS_CSS_LOS_CLOCKS
, 
DEFAULT_RTEMS_MSS_LRT_CLOCKS
,0,0,0);

82 
BSP_SET_L2C_CONFIG
(1, 
DEFAULT_RTEMS_L2C_REPLACEMENT_POLICY
, 
DEFAULT_RTEMS_L2C_LOCKED_WAYS
,
DEFAULT_RTEMS_L2C_MODE
, 0, 0);

	@Demo/UsbHost/leon/usbpump_hostapp_gcdclient.h

36 #i‚de‡
_USBPUMP_HOSTAPP_GCDCLIENT_H_


37 
	#_USBPUMP_HOSTAPP_GCDCLIENT_H_


	)

39 #i‚de‡
_USBPUMP_USBDI_H_


40 
	~"usbpump_usbdi.h
"

43 #i‚de‡
_USBPUMP_USBD_CLASS_GENERIC_API_H_


44 
	~"usbpump_usbd_˛ass_gíîic_≠i.h
"

47 #i‚de‡
_USBPUMPROOT_H_


48 
	~"usbpum¥oŸ.h
"

51 #i‚de‡
_UPLATFORMAPI_H_


52 
	~"u∂©f‹m≠i.h
"

55 #i‚de‡
_USBPUMPOBJECTAPI_H_


56 
	~"usbpumpobje˘≠i.h
"

59 #i‚de‡
_USBIOCTL_FUNCTION_H_


60 
	~"usbio˘l_fun˘i⁄.h
"

63 #i‚de‡
_USBPUMPDEBUG_H_


64 
	~"usbpumpdebug.h
"

67 #i‚de‡
_USBIOCTL_API_H_


68 
	~"usbio˘l_≠i.h
"

71 #i‚de‡
_USBPUMP_TIMER_H_


72 
	~"usbpump_timî.h
"

75 #i‚de‡
_UCALLBACK_H_


76 
	~"uˇŒback.h
"

85 
__TMS_TYPE_DEF
 (
USBPUMP_STREAMTEST_FSM_STATE
, 
__TMS_UINT
);

86 
__TMS_TYPE_DEF_STRUCT
 (
USBPUMP_STREAMTEST_FSM
);

87 
__TMS_TYPE_DEF_STRUCT
 (
USBPUMP_CLASS_GCD_CLIENT_PIPE_CONTEXT
);

88 
__TMS_TYPE_DEF_STRUCT
 (
USBPUMP_CLASS_GCD_CLIENT_DATA
);

90 
	#__TMS_USBPUMP_STREAMTEST_FSM_°NoCh™ge
 0

	)

91 
	#__TMS_USBPUMP_STREAMTEST_FSM_°Inôül
 1

	)

92 
	#__TMS_USBPUMP_STREAMTEST_FSM_°SídD©a
 2

	)

93 
	#__TMS_USBPUMP_STREAMTEST_FSM_°Re˚iveD©a
 3

	)

94 
	#__TMS_USBPUMP_STREAMTEST_FSM_°SídD©aD⁄e
 4

	)

95 
	#__TMS_USBPUMP_STREAMTEST_FSM_°D©aAºived
 5

	)

96 
	#__TMS_USBPUMP_STREAMTEST_FSM_°D⁄e
 6

	)

97 
	#__TMS_USBPUMP_STREAMTEST_FSM_°Eº‹
 7

	)

98 
	#__TMS_USBPUMP_STREAMTEST_FSM_°___MAX
 8

	)

100 
	#__TMS_USBPUMP_STREAMTEST_FSM_STATES__INIT
 \

109 "°___MAX"

	)

112 
__TMS_TYPE_DEF_FUNCTION
(

113 
USBPUMP_STREAMTEST_FSM_FINALIZE_FN
,

114 
__TMS_VOID
,

116 
__TMS_USBPUMP_CLASS_GCD_CLIENT_DATA
 *

119 
	$__TMS_STRUCTNAME
 (
USBPUMP_STREAMTEST_FSM
)

121 
__TMS_USBPUMP_STREAMTEST_FSM_STATE
 
CuºítSèã
;

123 
__TMS_UINT
 
fRun
: 1;

124 
__TMS_UINT
 
fBusy
: 1;

125 
__TMS_UINT
 
fDe„ºed
: 1;

127 
__TMS_UINT
 
fSídCom∂ëeOK
: 1;

128 
__TMS_UINT
 
fSídCom∂ëeNG
: 1;

129 
__TMS_UINT
 
fRe˚iveCom∂ëeOK
: 1;

130 
__TMS_UINT
 
fRe˚iveCom∂ëeNG
: 1;

132 
__TMS_USBPUMP_STREAMTEST_FSM_FINALIZE_FN
 * 
pFöÆizeFn
;

133 
	}
};

142 #i‚de‡
__TMS_USBPUMP_CLASS_GCD_CLIENT_SUPPORT_ISOCH


143 
	#__TMS_USBPUMP_CLASS_GCD_CLIENT_SUPPORT_ISOCH
 1

	)

146 #i‚de‡
__TMS_USBPUMP_CLASS_GCD_CLIENT_MAX_PIPES


147 
	#__TMS_USBPUMP_CLASS_GCD_CLIENT_MAX_PIPES
 30

	)

150 #i‚de‡
__TMS_USBPUMP_CLASS_GCD_CLIENT_BUFFER_SIZE


151 
	#__TMS_USBPUMP_CLASS_GCD_CLIENT_BUFFER_SIZE
 (24 * 1024)

	)

154 #i‚de‡
__TMS_USBPUMP_CLASS_GCD_CLIENT_MAX_ISOCHDESCS


155 
	#__TMS_USBPUMP_CLASS_GCD_CLIENT_MAX_ISOCHDESCS
 128

	)

158 
	$__TMS_STRUCTNAME
 (
USBPUMP_CLASS_GCD_CLIENT_PIPE_CONTEXT
)

160 
__TMS_USBPUMP_USBDI_PIPE_NODE
 * 
pPùe
;

161 
__TMS_UINT8
 
bI¡îÁ˚Numbî
;

162 
__TMS_UINT8
 
bA…î«ãSëtög
;

163 
__TMS_UINT8
 
bEndpoötAddªss
;

164 
__TMS_UINT8
 
bmAâribuãs
;

165 
	}
};

167 
	$__TMS_STRUCTNAME
 (
USBPUMP_CLASS_GCD_CLIENT_DATA
)

169 
__TMS_USBPUMP_OBJECT_HEADER
 
Obje˘Hódî
;

170 
__TMS_USBPUMP_OBJECT_HEADER
 * 
pCœssObje˘
;

171 
__TMS_UPLATFORM
 * 
pPœtf‹m
;

174 
__TMS_USBPUMP_SESSION_HANDLE
 
Sessi⁄H™dÀ
;

175 
__TMS_USBPUMP_SESSION_HANDLE
 
Fun˘i⁄H™dÀ
;

176 
__TMS_USBPUMP_USBDI_FUNCTION
 * 
pFun˘i⁄
;

177 
__TMS_USBPUMP_USBDI_GENERIC_DEVICE_STATE
 
Devi˚Sèã
;

179 
__TMS_USBPUMP_USBDI_CLASS_GENERIC_INCALL
 
CœssInCÆl
;

180 
__TMS_USBPUMP_USBDI_FUNCTION_GENERIC_INCALL
 
Fun˘i⁄InCÆl
;

182 
__TMS_USBPUMP_USBDI_CFG_NODE
 * 
pC⁄figRoŸ
;

183 
__TMS_USBPUMP_USBDI_PIPE_HANDLE
 
hDeÁu…Pùe
;

184 
__TMS_USBPUMP_CLASS_GCD_CLIENT_PIPE_CONTEXT


185 
PùeCtx
[
__TMS_USBPUMP_CLASS_GCD_CLIENT_MAX_PIPES
];

186 
__TMS_BYTES
 
nPùes
;

187 
__TMS_UINT
 
iCuºPùe
;

189 
__TMS_UINT8
 * 
pRódBuf„r
;

190 
__TMS_UINT8
 * 
pWrôeBuf„r
;

191 
__TMS_UINT8
 
iM™uÁ˘uªr
;

192 
__TMS_UINT8
 
iProdu˘
;

193 
__TMS_UINT8
 
iSîülNumbî
;

194 
__TMS_USBPUMP_TIMER
 
Timî
;

195 
__TMS_USBPUMP_ISOCH_PACKET_DESCR


196 
IsochDesc
[
__TMS_USBPUMP_CLASS_GCD_CLIENT_MAX_ISOCHDESCS
];

199 
__TMS_UINT
 
NumIãøti⁄s
;

200 
__TMS_UINT32
 
SèπTimeTick
;

201 
__TMS_UINT32
 
EndTimeTick
;

203 
__TMS_UCALLBACKCOMPLETION
 
CÆlback
;

204 
__TMS_BOOL
 
fSëI¡îÁ˚
;

206 
__TMS_BOOL
 
fPîf‹m™˚Mósuª
;

207 
__TMS_BYTES
 
Buf„rSize
;

208 
__TMS_UINT
 
Lo›backCou¡
;

211 
__TMS_USBPUMP_STREAMTEST_FSM
 
SåómTe°Fsm
;

212 
__TMS_UINT16
 
MaxSåómID
;

213 
__TMS_UINT16
 
CuºítSåómID
;

214 
__TMS_UINT8
 * 
pTe°Buf„r
;

215 
__TMS_BYTES
 
sizeTe°Buf„r
;

216 
__TMS_USBPUMP_USBDI_PIPE_HANDLE
 
OutSåómPùe
;

217 
__TMS_USBPUMP_USBDI_PIPE_HANDLE
 
InSåómPùe
;

218 
	}
};

227 
__TMS_BEGIN_DECLS


229 
__TMS_CONST
 
__TMS_USBPUMP_USBDI_DRIVER_CLASS_CONFIG


230 
gk_UsbPumpUsbdiGíîic_CœssC⁄fig
;

232 
__TMS_USBPUMP_CLASS_GCD_CLIENT_DATA
 *

233 
UsbPumpHo°Aµ_GcdClõ¡Cª©e
(

234 
__TMS_UPLATFORM
 * 
pPœtf‹m
,

235 
__TMS_UINT32
 
DebugFœgs
,

236 
__TMS_BYTES
 
Buf„rSize
,

237 
__TMS_UINT
 
Lo›backCou¡
,

238 
__TMS_BOOL
 
fPîf‹m™˚Mósuª


241 
	g__TMS_END_DECLS


251 #i‡!
__TMS_CLOAKED_NAMES_ONLY


252 
	#USBPUMP_STREAMTEST_FSM_°NoCh™ge
 \

253 
__TMS_USBPUMP_STREAMTEST_FSM_°NoCh™ge


	)

254 
	#USBPUMP_STREAMTEST_FSM_°Inôül
 \

255 
__TMS_USBPUMP_STREAMTEST_FSM_°Inôül


	)

256 
	#USBPUMP_STREAMTEST_FSM_°SídD©a
 \

257 
__TMS_USBPUMP_STREAMTEST_FSM_°SídD©a


	)

258 
	#USBPUMP_STREAMTEST_FSM_°Re˚iveD©a
 \

259 
__TMS_USBPUMP_STREAMTEST_FSM_°Re˚iveD©a


	)

260 
	#USBPUMP_STREAMTEST_FSM_°SídD©aD⁄e
 \

261 
__TMS_USBPUMP_STREAMTEST_FSM_°SídD©aD⁄e


	)

262 
	#USBPUMP_STREAMTEST_FSM_°D©aAºived
 \

263 
__TMS_USBPUMP_STREAMTEST_FSM_°D©aAºived


	)

264 
	#USBPUMP_STREAMTEST_FSM_°D⁄e
 \

265 
__TMS_USBPUMP_STREAMTEST_FSM_°D⁄e


	)

266 
	#USBPUMP_STREAMTEST_FSM_°Eº‹
 \

267 
__TMS_USBPUMP_STREAMTEST_FSM_°Eº‹


	)

268 
	#USBPUMP_STREAMTEST_FSM_°___MAX
 \

269 
__TMS_USBPUMP_STREAMTEST_FSM_°___MAX


	)

270 
	#USBPUMP_STREAMTEST_FSM_STATES__INIT
 \

271 
__TMS_USBPUMP_STREAMTEST_FSM_STATES__INIT


	)

272 
	#USBPUMP_CLASS_GCD_CLIENT_SUPPORT_ISOCH
 \

273 
__TMS_USBPUMP_CLASS_GCD_CLIENT_SUPPORT_ISOCH


	)

274 
	#USBPUMP_CLASS_GCD_CLIENT_MAX_PIPES
 \

275 
__TMS_USBPUMP_CLASS_GCD_CLIENT_MAX_PIPES


	)

276 
	#USBPUMP_CLASS_GCD_CLIENT_BUFFER_SIZE
 \

277 
__TMS_USBPUMP_CLASS_GCD_CLIENT_BUFFER_SIZE


	)

278 
	#USBPUMP_CLASS_GCD_CLIENT_MAX_ISOCHDESCS
 \

279 
__TMS_USBPUMP_CLASS_GCD_CLIENT_MAX_ISOCHDESCS


	)

	@Demo/UsbHost/leon/usbpump_hostapp_msdclient.h

36 #i‚de‡
_USBPUMP_HOSTAPP_MSDCLIENT_H_


37 
	#_USBPUMP_HOSTAPP_MSDCLIENT_H_


	)

39 #i‚de‡
_USBPUMP_HOST_INIT_H_


40 
	~"usbpump_ho°_öô.h
"

43 #i‚de‡
_USBPUMP_USBDI_CLASS_MSD_API_H_


44 
	~"usbpump_usbdi_˛ass_msd_≠i.h
"

53 
__TMS_TYPE_DEF_STRUCT
 (
USBPUMP_CLASS_MSD_CLIENT
);

54 
__TMS_TYPE_DEF_STRUCT
 (
USBPUMP_CLASS_MSD_CLIENT_DEVICE
);

55 
__TMS_TYPE_DEF_STRUCT
 (
USBPUMP_CLASS_MSD_CLIENT_LUN
);

64 
	$__TMS_STRUCTNAME
 (
USBPUMP_CLASS_MSD_CLIENT
)

66 
__TMS_USBPUMP_OBJECT_HEADER
 
Obje˘Hódî
;

68 
__TMS_USBPUMP_OBJECT_HEADER
 * 
pCœssObje˘
;

69 
__TMS_UPLATFORM
 * 
pPœtf‹m
;

72 
__TMS_USBPUMP_SESSION_HANDLE
 
Sessi⁄H™dÀ
;

73 
__TMS_USBPUMP_USBDI_CLASS_MSD_INCALL
 
InCÆl
;

75 
__TMS_BYTES
 
D©aBuf„rSize
;

78 
__TMS_USBPUMP_CLASS_MSD_CLIENT_DEVICE
 * 
pMsdDevi˚Hód
;

79 
	}
};

81 
	$__TMS_STRUCTNAME
 (
USBPUMP_CLASS_MSD_CLIENT_DEVICE
)

83 
__TMS_USBPUMP_CLASS_MSD_CLIENT
 * 
pMsdClõ¡
;

85 
__TMS_USBPUMP_USBDI_FUNCTION
 * 
pFun˘i⁄
;

86 
__TMS_USBPUMP_SESSION_HANDLE
 
Sessi⁄H™dÀ
;

87 
__TMS_USBPUMP_USBDI_FUNCTION_MSD_INCALL
 
InCÆl
;

89 
__TMS_UINT
 
nLun
;

90 
__TMS_USBPUMP_CLASS_MSD_CLIENT_LUN
 * 
pLun
;

92 
__TMS_USBPUMP_CLASS_MSD_CLIENT_DEVICE
 * 
pNext
;

93 
__TMS_USBPUMP_CLASS_MSD_CLIENT_DEVICE
 * 
pLa°
;

94 
	}
};

96 
	$__TMS_STRUCTNAME
 (
USBPUMP_CLASS_MSD_CLIENT_LUN
)

98 
__TMS_USBPUMP_CLASS_MSD_CLIENT_DEVICE
 * 
pMsdDevi˚
;

100 
__TMS_UINT
 
Lun
;

101 
__TMS_USBPUMP_USBDI_MSD_LUN_INFO
 
LunInfo
;

102 
__TMS_USBPUMP_USBDI_MSD_MEDIA_INFO
 
MedüInfo
;

104 
__TMS_UINT32
 
SèπLBA
;

105 
__TMS_UINT32
 
NumbîOfLBA
;

107 
__TMS_USBPUMP_USBDI_CLASS_MSD_REQUEST
 
Reque°
;

109 
__TMS_USBPUMP_BUFFER_HANDLE
 
hBuf„r
;

110 
__TMS_VOID
 * 
pBuf„r
;

111 
__TMS_BYTES
 
nBuf„r
;

113 
__TMS_UINT
 
Te°Cou¡
;

114 
__TMS_UINT32
 
RódBlocks
;

115 
__TMS_UINT32
 
SèπTimeTick
;

116 
	}
};

125 
__TMS_BEGIN_DECLS


128 
__TMS_CONST


129 
__TMS_USBPUMP_HOST_INIT_NODE_VECTOR


130 
gk_UsbPumpHo°_GíîicInôVe˘‹
;

132 
__TMS_USBPUMP_CLASS_MSD_CLIENT
 *

133 
UsbPumpHo°Aµ_MsdClõ¡Cª©e
(

134 
__TMS_UPLATFORM
 * ,

135 
__TMS_UINT32
 ,

136 
__TMS_BYTES


139 
	g__TMS_END_DECLS


	@Demo/UsbSerialPortRtemsShell/leon/app_config.h

9 #i‚de‡
_APP_CONFIG_H_


10 
	#_APP_CONFIG_H_


	)

12 
	~"mv_ty≥s.h
"

13 
	~"usb_u¨t.h
"

14 
	~"ÁèlExãnsi⁄.h
"

17 
	#PLL_DESIRED_FREQ_KHZ
 480000

	)

19 
	#DEFAULT_OSC0_KHZ
 12000

	)

20 
	#L2CACHE_NORMAL_MODE
 (0x6)

21 
	#L2CACHE_CFG
 (
L2CACHE_NORMAL_MODE
)

	)

22 
	#BIGENDIANMODE
 (0x01000786)

	)

24 #i‡
deföed
(
__RTEMS__
)

26 #i‡!
deföed
 (
__CONFIG__
)

27 
	#__CONFIG__


	)

30 
	#CONFIGURE_INIT


	)

32 #i‚de‡
RTEMS_POSIX_API


33 
	#RTEMS_POSIX_API


	)

36 
	#CONFIGURE_MICROSECONDS_PER_TICK
 1000

	)

38 
	#CONFIGURE_TICKS_PER_TIMESLICE
 50

	)

42 
	#CONFIGURE_APPLICATION_NEEDS_CLOCK_DRIVER


	)

44 
	#CONFIGURE_APPLICATION_EXTRA_DRIVERS
 
USB_UART_DRIVER_TABLE_ENTRY


	)

46 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

48 
	#CONFIGURE_MINIMUM_TASK_STACK_SIZE
 (4096)

	)

50 
	#CONFIGURE_MAXIMUM_TASKS
 20

	)

52 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 5

	)

54 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 8

	)

56 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 8

	)

58 
	#CONFIGURE_MAXIMUM_POSIX_SEMAPHORES
 8

	)

60 
	#CONFIGURE_MAXIMUM_POSIX_MESSAGE_QUEUES
 8

	)

62 
	#CONFIGURE_MAXIMUM_POSIX_TIMERS
 4

	)

64 
	#CONFIGURE_MAXIMUM_TIMERS
 4

	)

66 
	#CONFIGURE_USE_IMFS_AS_BASE_FILESYSTEM


	)

68 
	#CONFIGURE_FILESYSTEM_DOSFS


	)

70 
	#CONFIGURE_MAXIMUM_DRIVERS
 10

	)

72 
	#CONFIGURE_MAXIMUM_SEMAPHORES
 (4 * 
RTEMS_DOSFS_SEMAPHORES_PER_INSTANCE
)

	)

74 
	#CONFIGURE_LIBIO_MAXIMUM_FILE_DESCRIPTORS
 30

	)

76 
	#CONFIGURE_APPLICATION_NEEDS_LIBBLOCK


	)

78 
	#CONFIGURE_POSIX_INIT_TASKS_TABLE


	)

80 *
POSIX_Inô
 (*
¨gs
);

83 
	#CONFIGURE_MAXIMUM_USER_EXTENSIONS
 1

	)

84 
	#CONFIGURE_INITIAL_EXTENSIONS
 { .
Áèl
 = 
F©Æ_exãnsi⁄
 }

	)

86 
	~<πems/shñl.h
>

87 
	#CONFIGURE_SHELL_COMMANDS_INIT


	)

88 
	#CONFIGURE_SHELL_COMMANDS_ALL


	)

89 
	~<πems/shñlc⁄fig.h
>

91 
	~<πems/c⁄fdefs.h
>

	@Demo/UsbSerialPortRtemsShell/leon/main.c

9 
	~<°dio.h
>

10 
	~<°dlib.h
>

11 
	~<πems.h
>

12 
	~<πems/b•Io.h
>

13 
	~<b•.h
>

15 
	~"≠p_c⁄fig.h
"

16 
	~"OsDrvUsbPhy.h
"

17 
	~"usbpumpdebug.h
"

19 
	~<sys/ty≥s.h
>

20 
	~<sys/°©.h
>

21 
	~<f˙é.h
>

22 
	~<uni°d.h
>

23 
	~"£rülP‹t.h
"

24 
	~"OsDrvC¥.h
"

26 
	~"usbpump_≠∂iˇti⁄_πems_≠i.h
"

32 
BSP_SET_CLOCK
(
DEFAULT_OSC0_KHZ
, 
PLL_DESIRED_FREQ_KHZ
, 1, 1, 
DEFAULT_RTEMS_CSS_LOS_CLOCKS
, 
DEFAULT_RTEMS_MSS_LRT_CLOCKS
,0,0,0);

34 
BSP_SET_L2C_CONFIG
(1,
DEFAULT_RTEMS_L2C_REPLACEMENT_POLICY
, 
DEFAULT_RTEMS_L2C_LOCKED_WAYS
,
DEFAULT_RTEMS_L2C_MODE
, 0, 0);

40 #i‚de‡
DISABLE_LEON_DCACHE


41 
	#USBPUMP_MDK_CACHE_ENABLE
 1

	)

43 
	#USBPUMP_MDK_CACHE_ENABLE
 0

	)

46 
USBPUMP_APPLICATION_RTEMS_CONFIGURATION
 
	gsg_D©aPump_AµC⁄fig
 =

47 
USBPUMP_APPLICATION_RTEMS_CONFIGURATION_INIT_V1
(

49  
NULL
,

54  
NULL
,

55  
NULL
,

56  
USBPUMP_MDK_CACHE_ENABLE
,

57  
UDMASK_ERRORS
 | 
UDMASK_ANY


60 
tyAuxClkDividîCfg
 
	gauxClk
[] =

63 .
auxClockE«bÀMask
 = 
AUX_CLK_MASK_USB_CTRL_SUSPEND_CLK
,

64 .
	gauxClockSour˚
 = 
CLK_SRC_PLL0
,

65 .
	gauxClockDivNumî©‹
 = 1,

66 .
	gauxClockDivDíomö©‹
 = 24

78 *
	$POSIX_Inô
 (*
¨gs
)

80 
	`UNUSED
(
¨gs
);

82 
s32
 
sc
;

83 
osDrvUsbPhyP¨am_t
 
öôP¨am
 =

85 .
íabÀOtgBlock
 = 
USB_PHY_OTG_DISABLED
,

86 .
u£Exã∫ÆClock
 = 
USB_PHY_USE_EXT_CLK
,

87 .
fSñ
 = 
USB_REFCLK_20MHZ
,

88 .
ªfClkSñ0
 = 
USB_SUPER_SPEED_CLK_CONFIG
,

89 .
f‹˚HsO∆y
 = 
USB_PHY_HS_ONLY_OFF


92 
	`OsDrvC¥Inô
();

93 
	`OsDrvC¥O≥n
();

94 
sc
 = 
	`OsDrvC¥AuxClockAºayC⁄fig
(
auxClk
);

95 if(
sc
)

96 
	`exô
(
sc
);

98 
	`OsDrvUsbPhyInô
(&
öôP¨am
);

99 i‡(
	`UsbPump_Rãms_D©aPump_Sèπup
(&
sg_D©aPump_AµC⁄fig
Ë!
NULL
)

105 
	`¥ötk
("USB serialÖort demo\n");

106 
	`¥ötk
("Please connect witháÅerminalÉmulatorÅoáccess"

111 
	`¥ötk
("\n\nUsbPump_Rtems_DataPump_Startup() failed!\n\n\n");

112 
	`exô
(1);

114  
NULL
;

115 
	}
}

	@Demo/UsbSerialPortRtemsShell/leon/serialPort.c

12 
	~"udevi˚.h
"

13 
	~"u∂©f‹m≠i.h
"

14 
	~"usbpum∑pi.h
"

15 
	~"usbpump_usb£ri.h
"

16 
	~"usb£ri_o¶ökage.h
"

17 
	~"usbpump_≠∂iˇti⁄_πems_≠i.h
"

18 
	~"usbpump_πems.h
"

19 
	~"usbpumpobje˘≠i.h
"

21 
	~"b•.h
"

22 
	~"πems/b•Io.h
"

23 
	~"πems.h
"

24 
	~"£rülP‹t.h
"

25 
	~<ãrmios.h
>

26 
	~<πems/ãrmio°y≥s.h
>

27 
	~<°dio.h
>

28 
	~<°dlib.h
>

30 
	~<sys/ty≥s.h
>

31 
	~<sys/°©.h
>

32 
	~<f˙é.h
>

33 
	~<uni°d.h
>

34 
	~<î∫o.h
>

36 
	~"usb£rifc.h
"

37 
	~<πems/shñl.h
>

38 
	~"mv_ty≥s.h
"

42 
	#START_SHELL_EVENT
 
RTEMS_EVENT_31


	)

43 
	#START_PLANE_SERIAL_EVENT
 1

	)

44 
	#DTR_ON_SERIAL_EVENT
 2

	)

45 
	#DTR_OFF_SERIAL_EVENT
 3

	)

48 
πems_id
 
	mªadSem
;

49 
πems_id
 
	mwrôeSem
;

50 
size_t
 
	mªadSize
;

51 
size_t
 
	mwrôeSize
;

52 } 
	tªadWrôeC⁄åﬁ
;

59 
RãmsEvít_t
 
	g£rülP‹tEvít
;

60 
ªadWrôeC⁄åﬁ
 
	gªadWrôeCtx
;

61 * 
	ghUsbP‹t
;

62 
	gusbU¨tInôülized
;

63 
öt32_t
 
	gdåOn
;

64 
öt32_t
 
	g°¨tPœ√
;

66 c⁄° 
USBSERI_EVENT_CODE_MAP
 
	gEvítCodeM≠
 =

69 
DTR_ON_SERIAL_EVENT
,

70 
DTR_OFF_SERIAL_EVENT
,

74 
START_PLANE_SERIAL_EVENT
,

80 
πems_id
 
	göôTaskId
;

84 
	$ªadD⁄e
(*
pD⁄eCtx
, 
USBSERI_STATUS
 
°©us
,

85 *
pBuf„r
, 
size_t
 
nBuf„r
,

86 
size_t
 
nA˘uÆ
)

88 
	`UNUSED
(
°©us
);

89 
	`UNUSED
(
pBuf„r
);

90 
	`UNUSED
(
nBuf„r
);

91 
ªadWrôeC⁄åﬁ
 *
ªadCtx
 = 
pD⁄eCtx
;

92 i‡(
°©us
 =
USBSERI_STATUS_OK
)

94 
ªadCtx
->
ªadSize
 = 
nA˘uÆ
;

95 
	`πems_£m≠h‹e_ªÀa£
(
ªadCtx
->
ªadSem
);

98 
	`¥ötk
("RódÉº‹: %d\n", 
°©us
);

99 
	}
}

101 
size_t
 
	$USB_SyncRód
(*
hP‹t
, *
pBuf„r
, 
size_t
 
nBuf„r
)

103 
öt32_t
 
°©us
;

105 
°©us
 = 
	`Usb£ri_RódSubmô_V2
(
hP‹t
, 
pBuf„r
, 
nBuf„r
,

106 0, 
ªadD⁄e
, &
ªadWrôeCtx
);

107 i‡(
°©us
 !
USBSERI_STATUS_OK
)

109 
°©us
 = 
	`πems_£m≠h‹e_obèö
(
ªadWrôeCtx
.
ªadSem
,

110 
RTEMS_WAIT
, 
RTEMS_NO_TIMEOUT
);

111 i‡(
°©us
 !
RTEMS_SUCCESSFUL
)

113 
	`¥ötk
("Ród sem obèöÉº‹: %ld\n", 
°©us
);

116  
ªadWrôeCtx
.
ªadSize
;

117 
	}
}

119 
	$wrôeD⁄e
(*
pD⁄eCtx
, 
USBSERI_STATUS
 
°©us
,

120 *
pBuf„r
, 
size_t
 
nBuf„r
,

121 
size_t
 
nA˘uÆ
)

123 
	`UNUSED
(
°©us
);

124 
	`UNUSED
(
pBuf„r
);

125 
	`UNUSED
(
nBuf„r
);

126 
ªadWrôeC⁄åﬁ
 *
wrôeCtx
 = 
pD⁄eCtx
;

127 i‡(
°©us
 =
USBSERI_STATUS_OK
)

129 
wrôeCtx
->
wrôeSize
 = 
nA˘uÆ
;

130 
	`πems_£m≠h‹e_ªÀa£
(
wrôeCtx
->
wrôeSem
);

133 
	`¥ötk
("Wrôêîr‹: %d\n", 
°©us
);

134 
	}
}

136 
size_t
 
	$USB_SyncWrôe
(*
hP‹t
, *
pBuf„r
, 
size_t
 
nBuf„r
)

138 
öt32_t
 
°©us
;

140 
°©us
 = 
	`Usb£ri_WrôeSubmô_V2
(
hP‹t
, 
pBuf„r
, 
nBuf„r
,

141 0, 
wrôeD⁄e
, &
ªadWrôeCtx
);

142 i‡(
°©us
 !
USBSERI_STATUS_OK
)

144 
°©us
 = 
	`πems_£m≠h‹e_obèö
(
ªadWrôeCtx
.
wrôeSem
,

145 
RTEMS_WAIT
, 
RTEMS_NO_TIMEOUT
);

146 i‡(
°©us
 !
RTEMS_SUCCESSFUL
)

148 
	`¥ötk
("Wrôê£m obèöÉº‹: %ld\n", 
°©us
);

151  
ªadWrôeCtx
.
wrôeSize
;

152 
	}
}

154 
	$SîülP‹tEvítH™dÀr
(*
hP‹t
, *
pClõ¡C⁄ãxt
,

155 
evít
, *
pEvítD©a
)

157 
	`UNUSED
(
pClõ¡C⁄ãxt
);

158 
	`UNUSED
(
pEvítD©a
);

159 
	`UNUSED
(
hP‹t
);

161 
evít
) {

162 
START_PLANE_SERIAL_EVENT
:

163 
°¨tPœ√
 = 1;

165 
DTR_ON_SERIAL_EVENT
:

166 
	`¥ötk
("Terminal connected\n");

167 
dåOn
 = 1;

169 
DTR_OFF_SERIAL_EVENT
:

170 
	`¥ötk
("Terminal disconnected\n");

171 
dåOn
 = 0;

178 i‡(
°¨tPœ√
 && 
dåOn
)

179 
	`πems_evít_£nd
(
öôTaskId
, 
START_SHELL_EVENT
);

180 
	}
}

183 
πems_èsk
 
	$SîülP‹tInôTask
(
πems_èsk_¨gumít
 
pC⁄ãxt
)

185 
°©us
 = 1;

187 
SîülP‹tC⁄ãxt
 *
pSîülP‹tC⁄ãxt
 = (SîülP‹tC⁄ãxt*)
pC⁄ãxt
;

189 
öôTaskId
 = 
	`πems_èsk_£lf
();

192 
pSîülP‹tC⁄ãxt
->
p‹tH™dÀ
 = 
	`USB_O≥nDevi˚
(
SERIALPORT_INSTANCE_NO
);

193 i‡(
pSîülP‹tC⁄ãxt
->
p‹tH™dÀ
)

195 
hUsbP‹t
 = 
pSîülP‹tC⁄ãxt
->
p‹tH™dÀ
;

196 
	`USB_Regi°îEvítNŸify
(
hUsbP‹t
,

197 
SîülP‹tEvítH™dÀr
, 
pSîülP‹tC⁄ãxt
, &
EvítCodeM≠
);

199 
°©us
 = 
	`πems_£m≠h‹e_¸óã
(

200 
	`πems_buûd_«me
('S', 'R', 'D', '0'), 0,

201 
RTEMS_SIMPLE_BINARY_SEMAPHORE
, 0, &
ªadWrôeCtx
.
ªadSem
);

202 i‡(
°©us
 !
RTEMS_SUCCESSFUL
)

203 
	`¥ötk
("Eº‹ cª©ögÑód sem≠h‹e: %d\n", 
°©us
);

205 
°©us
 = 
	`πems_£m≠h‹e_¸óã
(

206 
	`πems_buûd_«me
('S', 'W', 'R', '0'), 0,

207 
RTEMS_SIMPLE_BINARY_SEMAPHORE
, 0, &
ªadWrôeCtx
.
wrôeSem
);

208 i‡(
°©us
 !
RTEMS_SUCCESSFUL
)

209 
	`¥ötk
("Eº‹ cª©ög wrôê£m≠h‹e: %d\n", 
°©us
);

213 
	`¥ötf
("serialÖort initÉrror\n");

216 i‡(
°©us
 =
RTEMS_SUCCESSFUL
)

218 
πems_evít_£t
 
evítOut
;

220 
	`πems_evít_ª˚ive
(

221 
START_SHELL_EVENT
,

222 
RTEMS_WAIT
 | 
RTEMS_EVENT_ANY
,

223 
RTEMS_NO_TIMEOUT
,

224 &
evítOut


226 
°©us
 = 
	`πems_shñl_öô
(

228 
RTEMS_MINIMUM_STACK_SIZE
 * 2,

231 
Ál£
,

232 
Ál£
,

233 
NULL


239 
	`¥ötk
("Shell initializationÉrror\n");

240 
	`exô
(
°©us
);

243 
	`πems_èsk_dñëe
(
RTEMS_SELF
);

244 
	}
}

246 
SîülP‹tC⁄ãxt
 *
	$SîülP‹tInô
(
UPLATFORM
 *
pPœtf‹m
)

248 
°©us
;

249 
πems_id
 
èskId
;

251 
SîülP‹tC⁄ãxt
 * 
pSîülP‹tC⁄ãxt
;

254 
pSîülP‹tC⁄ãxt
 = 
	`UsbPumpPœtf‹m_MÆlocZîo
(

255 
pPœtf‹m
,

256 (*
pSîülP‹tC⁄ãxt
)

259 i‡(
pSîülP‹tC⁄ãxt
 =
NULL
)

261 
	`¥ötk
("pSerialPortContexállocation fail\n");

262  
NULL
;

265 
pSîülP‹tC⁄ãxt
->
pPœtf‹m
 =ÖPlatform;

266 
pSîülP‹tC⁄ãxt
->
p‹tIn°™˚No
 = 
SERIALPORT_INSTANCE_NO
;

268 
°©us
 = 
	`πems_èsk_¸óã
(

269 
	`πems_buûd_«me
('S', 'e', 'r', 'i'),

271 
RTEMS_MINIMUM_STACK_SIZE
,

272 
RTEMS_DEFAULT_MODES
,

273 
RTEMS_DEFAULT_ATTRIBUTES
,

274 &
èskId


276 i‡(
°©us
 !
RTEMS_SUCCESSFUL
)

278 
	`¥ötk
("Åask cª©êÁûed, Sètus(%d)\n", 
°©us
);

280 
£rülP‹tEvít
.
èskId
 =ÅaskId;

281 
°©us
 = 
	`πems_èsk_°¨t
(

282 
èskId
,

283 
SîülP‹tInôTask
,

284 (
πems_èsk_¨gumít
Ë
pSîülP‹tC⁄ãxt


286 i‡(
°©us
 !
RTEMS_SUCCESSFUL
)

288 
	`¥ötk
("èsk sèπ faûed, Sètus(%d)\n", 
°©us
);

293  
pSîülP‹tC⁄ãxt
;

294 
	}
}

298 
	$Usb£ri_OS_InôülizeEvít
(

299 
USBSERI_OS_ABSTRACT_EVENT
 *
pEvít
,

300 
sizeEvít
 )

302 
	`UNUSED
(
sizeEvít
);

304 
£rülP‹tEvít
.
èskId
 = 
	`πems_èsk_£lf
();

305 
	`UHIL_˝ybuf
(
pEvít
, &
£rülP‹tEvít
, (serialPortEvent));

306 
	}
}

308 
	$Usb£ri_OS_DeöôülizeEvít
(
USBSERI_OS_ABSTRACT_EVENT
 *
pEvít
)

310 
	`UNUSED
(
pEvít
);

313 
	}
}

315 
	$Usb£ri_OS_WaôF‹Evít
(
USBSERI_OS_ABSTRACT_EVENT
 *
pEvít
)

317 
	`UNUSED
(
pEvít
);

319 
πems_evít_£t
 
evítOut
;

321  
	`πems_evít_ª˚ive
(

322 
SERIALPORT_EVENT
,

323 
RTEMS_WAIT
 | 
RTEMS_EVENT_ANY
,

324 
RTEMS_NO_TIMEOUT
,

325 &
evítOut


327 
	}
}

329 
	$Usb£ri_OS_SëEvít
(
USBSERI_OS_ABSTRACT_EVENT
 *
pEvít
)

331 
RãmsEvít_t
 *
pSîülEvít
 = (RãmsEvít_à*)
pEvít
;

332 
	`πems_evít_£nd
(
pSîülEvít
->
èskId
, 
SERIALPORT_EVENT
);

333 
	}
}

337 
πems_devi˚_drivî
 
usb_u¨t_öôülize
(

338 
πems_devi˚_maj‹_numbî
 
maj‹
,

339 
πems_devi˚_mö‹_numbî
 
mö‹
,

340 *
∑rgp
 
__©åibuã__
((
unu£d
)) )

342 
	gdevi˚_«me
[16];

343 
πems_devi˚_drivî
 
	g°©us
;

345 
°r˝y
(
devi˚_«me
,"/dev/usb0");

347 
	gdevi˚_«me
[8] +
mö‹
;

349 
	g°©us
 = 
πems_io_ªgi°î_«me
(

350 
devi˚_«me
,

351 
maj‹
,

352 
mö‹


355 i‡(
	g°©us
 !
RTEMS_SUCCESSFUL
)

356 
πems_Áèl_îr‹_occuºed
(
°©us
);

358  
	gRTEMS_SUCCESSFUL
;

361 
πems_devi˚_drivî
 
usb_u¨t_›í
(

362 
πems_devi˚_maj‹_numbî
 
maj‹
 
__©åibuã__
((
unu£d
)),

363 
πems_devi˚_mö‹_numbî
 
mö‹
 
__©åibuã__
((
unu£d
)),

364 *
∑rgp
 )

366 
UNUSED
(
∑rgp
);

368 i‡(!
	gusbU¨tInôülized
)

370 
SîülP‹tInô
((
UPLATFORM
*)
UsbPump_Rãms_D©aPump_GëPœtf‹m
());

371 
	gusbU¨tInôülized
 = 1;

373  
	gRTEMS_SUCCESSFUL
;

376 
πems_devi˚_drivî
 
usb_u¨t_˛o£
(

377 
πems_devi˚_maj‹_numbî
 
maj‹
 
__©åibuã__
((
unu£d
)),

378 
πems_devi˚_mö‹_numbî
 
mö‹
 
__©åibuã__
((
unu£d
)),

379 *
∑rgp
 
__©åibuã__
((
unu£d
)) )

381  
	gRTEMS_SUCCESSFUL
;

384 
πems_devi˚_drivî
 
usb_u¨t_ªad
(

385 
πems_devi˚_maj‹_numbî
 
maj‹
 
__©åibuã__
((
unu£d
)),

386 
πems_devi˚_mö‹_numbî
 
mö‹
 
__©åibuã__
((
unu£d
)),

387 *
∑rgp
 )

389 
πems_libio_rw_¨gs_t
 *
	grw_¨gs
 = (πems_libio_rw_¨gs_à*Ë
∑rgp
;

391 i‡(
	grw_¨gs
)

393 i‡(
	grw_¨gs
->
	gcou¡
 > 0)

395 
	grw_¨gs
->
	gbyãs_moved
 = 
USB_SyncRód
(
hUsbP‹t
, (*)(
rw_¨gs
->
buf„r
),Ñw_¨gs->
cou¡
);

398 i‡(
	grw_¨gs
->
	gbyãs_moved
 == 0)

402 
rw_¨gs
->
byãs_moved
 = 
RTEMS_UNSATISFIED
;

405  
	gRTEMS_SUCCESSFUL
;

408 
πems_devi˚_drivî
 
usb_u¨t_wrôe
(

409 
πems_devi˚_maj‹_numbî
 
maj‹
 
__©åibuã__
((
unu£d
)),

410 
πems_devi˚_mö‹_numbî
 
mö‹
 
__©åibuã__
((
unu£d
)),

411 *
∑rgp
 )

413 
πems_libio_rw_¨gs_t
 *
	grw_¨gs
 = (πems_libio_rw_¨gs_à*Ë
∑rgp
;

415 i‡(
	grw_¨gs
)

416 
	grw_¨gs
->
	gbyãs_moved
 = 
USB_SyncWrôe
(
hUsbP‹t
,

417 (*)(
rw_¨gs
->
buf„r
),Ñw_¨gs->
cou¡
);

419  
	gRTEMS_SUCCESSFUL
;

422 
πems_devi˚_drivî
 
usb_u¨t_c⁄åﬁ
(

423 
πems_devi˚_maj‹_numbî
 
maj‹
 
__©åibuã__
((
unu£d
)),

424 
πems_devi˚_mö‹_numbî
 
mö‹
 
__©åibuã__
((
unu£d
)),

425 *
∑rgp
 
__©åibuã__
((
unu£d
)) )

427  
	gRTEMS_NOT_IMPLEMENTED
;

	@Demo/UsbSerialPortRtemsShell/leon/serialPort.h

10 #i‚de‡
_SERIALPORT_H_


11 
	#_SERIALPORT_H_


	)

14 
	~"usbpump_usb£ri.h
"

15 
	~"πems.h
"

19 
	#MAX_RX_SIZE
 512

	)

20 
	#MAX_TX_SIZE
 512

	)

21 
	#SERIALPORT_INSTANCE_NO
 1

	)

22 
	#SERIALPORT_EVENT
 
RTEMS_EVENT_5


	)

25 
πems_id
 
	mèskId
;

26 } 
	tRãmsEvít_t
;

31 
UPLATFORM
 *
	mpPœtf‹m
;

32 * 
	mp‹tH™dÀ
;

33 
uöt32_t
 
	mp‹tIn°™˚No
;

34 } 
	tSîülP‹tC⁄ãxt
;

36 
SîülP‹tC⁄ãxt
 *
SîülP‹tInô
(
UPLATFORM
 *
pPœtf‹m
);

	@Demo/UsbSerialPortRtemsShell/leon/serialPort_appinit.c

10 
	~"usb≠pöô.h
"

11 
	~"usbpumpobje˘≠i.h
"

12 
	~"usbpum¥oŸ.h
"

13 
	~"usbpumpdebug.h
"

16 
	~"¥Ÿowmc.h
"

17 
	~"wm˘acfg.h
"

20 
	~"wmcdevmgmtcfg.h
"

21 
	~"wmcmodemcfg.h
"

22 
	~"wmcobexcfg.h
"

25 
	~"wmˇµlib.h
"

29 
	#EXTERN_USBRC_ROOTTABLE
(
NAME
) \

30 
CONST
 
USBRC_ROOTTABLE
 
NAME
;

	)

32 #ifde‡
DESCRIPTOR_ROOT_0


33 
	$EXTERN_USBRC_ROOTTABLE
(
DESCRIPTOR_ROOT_0
)

35 #ifde‡
DESCRIPTOR_ROOT_1


36 
	$EXTERN_USBRC_ROOTTABLE
(
DESCRIPTOR_ROOT_1
)

38 #ifde‡
DESCRIPTOR_ROOT_2


39 
	$EXTERN_USBRC_ROOTTABLE
(
DESCRIPTOR_ROOT_2
)

41 #ifde‡
DESCRIPTOR_ROOT_3


42 
	$EXTERN_USBRC_ROOTTABLE
(
DESCRIPTOR_ROOT_3
)

44 #ifde‡
DESCRIPTOR_ROOT_4


45 
	$EXTERN_USBRC_ROOTTABLE
(
DESCRIPTOR_ROOT_4
)

47 #ifde‡
DESCRIPTOR_ROOT_5


48 
	$EXTERN_USBRC_ROOTTABLE
(
DESCRIPTOR_ROOT_5
)

50 #ifde‡
DESCRIPTOR_ROOT_6


51 
	$EXTERN_USBRC_ROOTTABLE
(
DESCRIPTOR_ROOT_6
)

53 #ifde‡
DESCRIPTOR_ROOT_7


54 
	$EXTERN_USBRC_ROOTTABLE
(
DESCRIPTOR_ROOT_7
)

56 #ifde‡
DESCRIPTOR_ROOT_8


57 
	$EXTERN_USBRC_ROOTTABLE
(
DESCRIPTOR_ROOT_8
)

59 #ifde‡
DESCRIPTOR_ROOT_9


60 
	$EXTERN_USBRC_ROOTTABLE
(
DESCRIPTOR_ROOT_9
)

62 #i‚de‡ 
DESCRIPTOR_ROOT_0


63 #i‚de‡
DESCRIPTOR_ROOT_1


64 #i‚de‡
DESCRIPTOR_ROOT_2


65 #i‚de‡
DESCRIPTOR_ROOT_3


66 #i‚de‡
DESCRIPTOR_ROOT_4


67 #i‚de‡
DESCRIPTOR_ROOT_5


68 #i‚de‡
DESCRIPTOR_ROOT_6


69 #i‚de‡
DESCRIPTOR_ROOT_7


70 #i‚de‡
DESCRIPTOR_ROOT_8


71 #i‚de‡
DESCRIPTOR_ROOT_9


72 
	$EXTERN_USBRC_ROOTTABLE
(
gk_UsbDes¸ùt‹RoŸ
)

86 
VOID
 
	`AcmDemo_Clõ¡Cª©e
(
UPLATFORM
 *
pPœtf‹m
);

90 
USB_DATAPUMP_APPLICATION_INIT_VECTOR_FINISH_FN
 
AcmDemoI_AµInô_Ve˘‹Föish
;

96 
CONST
 
USBPUMP_PROTOCOL_INIT_NODE
 
InôNodes
[] =

99 
	`USBPUMP_PROTOCOL_INIT_NODE_INIT_V2
( \

101  
USB_bI¡îÁ˚Cœss_Comm
, \

102  
USB_bI¡îÁ˚SubCœss_CommACM
, \

106  
USBPUMP_PROTOCOL_INIT_FLAG_AUTO_ADD
, \

107  
WmcTA_PrŸocﬁProbe
, \

108  
WmcTA_PrŸocﬁCª©e
, \

109  
NULL
, \

110  
WmcTA_AddD©aI¡îÁ˚
, \

111  &
gk_WmcSubCœss_Modem_TaC⁄fig
 \

113 
	}
};

116 
CONST
 
USBPUMP_PROTOCOL_INIT_NODE_VECTOR
 
	gInôHódî
 =

117 
USBPUMP_PROTOCOL_INIT_NODE_VECTOR_INIT_V1
(

118  
InôNodes
,

119  
NULL
,

120  
NULL


127 
	#INIT_VECTOR_NODE
(
a__UsbDes¸ùt‹RoŸ
) \

128 
	`USB_DATAPUMP_APPLICATION_INIT_VECTOR_INIT_V2
( \

129  &
a__UsbDes¸ùt‹RoŸ
, \

131 
UDMASK_ANY
 | 
UDMASK_ERRORS
, \

132  
NULL
, \

134 
UsbPump_GíîicAµliˇti⁄Inô_PrŸocﬁs
, \

135  &
InôHódî
 \

136 )

	)

143 
CONST
 
USB_DATAPUMP_APPLICATION_INIT_VECTOR
 
	gUsbPumpAµliˇti⁄InôVe˘‹
[] =

145 #ifde‡
DESCRIPTOR_ROOT_0


146 
INIT_VECTOR_NODE
(
DESCRIPTOR_ROOT_0
),

148 #ifde‡
DESCRIPTOR_ROOT_1


149 
INIT_VECTOR_NODE
(
DESCRIPTOR_ROOT_1
),

151 #ifde‡
DESCRIPTOR_ROOT_2


152 
INIT_VECTOR_NODE
(
DESCRIPTOR_ROOT_2
),

154 #ifde‡
DESCRIPTOR_ROOT_3


155 
INIT_VECTOR_NODE
(
DESCRIPTOR_ROOT_3
),

157 #ifde‡
DESCRIPTOR_ROOT_4


158 
INIT_VECTOR_NODE
(
DESCRIPTOR_ROOT_4
),

160 #ifde‡
DESCRIPTOR_ROOT_5


161 
INIT_VECTOR_NODE
(
DESCRIPTOR_ROOT_5
),

163 #ifde‡
DESCRIPTOR_ROOT_6


164 
INIT_VECTOR_NODE
(
DESCRIPTOR_ROOT_6
),

166 #ifde‡
DESCRIPTOR_ROOT_7


167 
INIT_VECTOR_NODE
(
DESCRIPTOR_ROOT_7
),

169 #ifde‡
DESCRIPTOR_ROOT_8


170 
INIT_VECTOR_NODE
(
DESCRIPTOR_ROOT_8
),

172 #ifde‡
DESCRIPTOR_ROOT_9


173 
INIT_VECTOR_NODE
(
DESCRIPTOR_ROOT_9
),

175 #i‚de‡ 
DESCRIPTOR_ROOT_0


176 #i‚de‡
DESCRIPTOR_ROOT_1


177 #i‚de‡
DESCRIPTOR_ROOT_2


178 #i‚de‡
DESCRIPTOR_ROOT_3


179 #i‚de‡
DESCRIPTOR_ROOT_4


180 #i‚de‡
DESCRIPTOR_ROOT_5


181 #i‚de‡
DESCRIPTOR_ROOT_6


182 #i‚de‡
DESCRIPTOR_ROOT_7


183 #i‚de‡
DESCRIPTOR_ROOT_8


184 #i‚de‡
DESCRIPTOR_ROOT_9


185 
INIT_VECTOR_NODE
(
gk_UsbDes¸ùt‹RoŸ
)

198 
CONST
 
USB_DATAPUMP_APPLICATION_INIT_VECTOR_HDR
 
	ggk_UsbPumpAµliˇti⁄InôHdr
 =

199 
USB_DATAPUMP_APPLICATION_INIT_VECTOR_HDR_INIT_V1
(

200 
UsbPumpAµliˇti⁄InôVe˘‹
,

201  
NULL
,

202  
AcmDemoI_AµInô_Ve˘‹Föish


211 
VOID


212 
	$AcmDemoI_AµInô_Ve˘‹Föish
(

213 
UPLATFORM
 *
pPœtf‹m
,

214 
CONST
 
USB_DATAPUMP_APPLICATION_INIT_VECTOR_HDR
 *
pVecHdr
,

215 
VOID
 *
pAµInôC⁄ãxt
,

216 
UINT
 
nP‹ts


219 
	`USBPUMP_UNREFERENCED_PARAMETER
(
pVecHdr
);

220 
	`USBPUMP_UNREFERENCED_PARAMETER
(
pAµInôC⁄ãxt
);

221 
	`USBPUMP_UNREFERENCED_PARAMETER
(
nP‹ts
);

223 
	`AcmDemo_Clõ¡Cª©e
(
pPœtf‹m
);

224 
	}
}

	@Demo/UsbSerialPortRtemsShell/leon/serialPort_create.c

11 
	~"usbpum∑pi.h
"

12 
	~"wmˇµlib.h
"

13 
	~"u∂©f‹m.h
"

14 
	~"usbpumpobje˘≠i.h
"

15 
	~"usbpumpobje˘«me.h
"

16 
	~"usbpum¥oŸ.h
"

17 
	~"wmcmodem.h
"

19 
	~"usbpump_usb£ri.h
"

20 
	~"£rülP‹t.h
"

21 
	~<πems/libio.h
>

22 
	~<uni°d.h
>

23 
	~<f˙é.h
>

24 
	~<°dio.h
>

40 
VOID
 
AcmDemo_Clõ¡Cª©e
(
UPLATFORM
 *
pPœtf‹m
);

59 
VOID
 
	$AcmDemo_Clõ¡Cª©e
(
UPLATFORM
 *
pPœtf‹m
)

61 
USBPUMP_OBJECT_ROOT
 * 
CONST
 
pPumpRoŸ
 =

62 
	`UsbPumpObje˘_GëRoŸ
(&
pPœtf‹m
->
upf_Hódî
);

63 
USBPUMP_OBJECT_HEADER
 *
pFun˘i⁄Obje˘
;

64 
USBSERI_WMC_OBJECT_MODEM_CONFIG
 
UsbSîi_WmcModem_C⁄fig
;

66 
	`Usb£ri_Inôülize
(
pPœtf‹m
);

68 
	`USBSERI_WMC_OBJECT_MODEM_CONFIG_SETUP_V2
(

69 &
UsbSîi_WmcModem_C⁄fig
,

70  
USBSERI_WMCMODEM_CTRL_RX_NUM_UBUFQES
,

71  
USBSERI_WMCMODEM_QEBUFFER_SIZE
,

72  
USBSERI_WMCMODEM_CTRL_TX_NUM_UBUFQES
,

73  
USBSERI_WMCMODEM_QEBUFFER_SIZE
,

74  
USBSERI_WMCMODEM_DATA_RX_NUM_UBUFQES
,

75  
USBSERI_WMCMODEM_QEBUFFER_SIZE
,

76  
USBSERI_WMCMODEM_DATA_TX_NUM_UBUFQES
,

77  
USBSERI_WMCMODEM_QEBUFFER_SIZE
,

78  
TRUE
,

79  
TRUE
,

80  
FALSE
,

81  
TRUE


85 
pFun˘i⁄Obje˘
 = 
NULL
;

86 (
pFun˘i⁄Obje˘
 = 
	`UsbPumpObje˘_Enumî©eM©chögNames
(

87 &
pPumpRoŸ
->
Hódî
,

88 
pFun˘i⁄Obje˘
,

89 
USBPUMP_OBJECT_NAME_ENUM_MODEM


90 )Ë!
NULL
)

92 
	`Usb£ri_Cª©eModem_V2
(

93 
pPœtf‹m
,

94 
pFun˘i⁄Obje˘
,

95 
NULL
,

96 &
UsbSîi_WmcModem_C⁄fig


100 
°©
 
fûe_°©us
;

102 
fd
;

103 i‡(
	`°©
("/dev/c⁄sﬁe", &
fûe_°©us
) == -1)

112 
fd
 = 
	`›í
("/dev/usb0", 
O_RDWR
);

113 i‡(
fd
 != 0)

114 
	`˛o£
(
fd
);

115 } 
fd
);

116 
fd
 = 
	`›í
("/dev/usb0", 
O_WRONLY
);

117 
fd
 = 
	`›í
("/dev/usb0", 
O_WRONLY
);

123 
fd
 = 
	`›í
("/dev/usb0", 
O_RDWR
);

125 
	`dup2
(
fd
, 
	`fûío
(
°dö
));

126 
	`dup2
(
fd
, 
	`fûío
(
°dout
));

127 
	`dup2
(
fd
, 
	`fûío
(
°dîr
));

129 
	}
}

	@Demo/UsbSerialPortRtemsShell/leon/usb_uart.h

1 #i‚de‡
__USB_UART_h


2 
	#__USB_UART_h


	)

4 #ifde‡
__˝lu•lus


8 
	#USB_UART_DRIVER_TABLE_ENTRY
 \

9 { 
usb_u¨t_öôülize
, 
usb_u¨t_›í
, 
usb_u¨t_˛o£
, 
usb_u¨t_ªad
, \

10 
usb_u¨t_wrôe
, 
usb_u¨t_c⁄åﬁ
 }

	)

12 
πems_devi˚_drivî
 
usb_u¨t_öôülize
(

13 
πems_devi˚_maj‹_numbî
,

14 
πems_devi˚_mö‹_numbî
,

18 
πems_devi˚_drivî
 
usb_u¨t_›í
(

19 
πems_devi˚_maj‹_numbî
,

20 
πems_devi˚_mö‹_numbî
,

24 
πems_devi˚_drivî
 
usb_u¨t_˛o£
(

25 
πems_devi˚_maj‹_numbî
,

26 
πems_devi˚_mö‹_numbî
,

30 
πems_devi˚_drivî
 
usb_u¨t_ªad
(

31 
πems_devi˚_maj‹_numbî
,

32 
πems_devi˚_mö‹_numbî
,

36 
πems_devi˚_drivî
 
usb_u¨t_wrôe
(

37 
πems_devi˚_maj‹_numbî
,

38 
πems_devi˚_mö‹_numbî
,

42 
πems_devi˚_drivî
 
usb_u¨t_c⁄åﬁ
(

43 
πems_devi˚_maj‹_numbî
,

44 
πems_devi˚_mö‹_numbî
,

48 #ifde‡
__˝lu•lus


	@Demo/UsbVideo208/arch/ma2x5x/leon/los_app_config_2150.c

13 
	~"los_≠p_c⁄fig.h
"

14 
	~"DrvC¥.h
"

27 
	$blocksRe£tSûic⁄S≥cific
()

29 
	`DrvC¥SysDevi˚A˘i⁄
(
SIPP_DOMAIN
, 
ASSERT_RESET
, 
DEV_SIPP_MIPI
);

30 
	`DrvC¥SysDevi˚A˘i⁄
(
UPA_DOMAIN
, 
ASSERT_RESET
, 
APP_UPA_CLOCKS
);

31 
	`DrvC¥SysDevi˚A˘i⁄
(
MSS_DOMAIN
, 
DEASSERT_RESET
, -1);

32 
	`DrvC¥SysDevi˚A˘i⁄
(
CSS_DOMAIN
, 
DEASSERT_RESET
, -1);

33 
	`DrvC¥SysDevi˚A˘i⁄
(
SIPP_DOMAIN
, 
DEASSERT_RESET
, -1);

34 
	`DrvC¥SysDevi˚A˘i⁄
(
UPA_DOMAIN
, 
DEASSERT_RESET
, -1);

35 
	}
}

	@Demo/UsbVideo208/arch/ma2x5x/leon/los_app_config_2150.h

13 #i‚de‡
LOS_APP_CONFIG_2150_H


14 
	#LOS_APP_CONFIG_2150_H


	)

18 
	~"mv_ty≥s.h
"

19 
	~"DrvC¥Deföes.h
"

23 
	#MSS_CLOCKS
 ( 
DEV_MSS_APB_SLV
 | \

24 
DEV_MSS_APB2_CTRL
 | \

25 
DEV_MSS_RTBRIDGE
 | \

26 
DEV_MSS_RTAHB_CTRL
 | \

27 
DEV_MSS_LRT
 | \

28 
DEV_MSS_LRT_DSU
 | \

29 
DEV_MSS_LRT_L2C
 | \

30 
DEV_MSS_LRT_ICB
 | \

31 
DEV_MSS_AXI_BRIDGE
 | \

32 
DEV_MSS_MXI_CTRL
 | \

33 
DEV_MSS_MXI_DEFSLV
 | \

34 
DEV_MSS_AXI_MON
 | \

35 
DEV_MSS_MIPI
 | \

36 
DEV_MSS_CIF1
 | \

37 
DEV_MSS_LCD
 | \

38 
DEV_MSS_AMC
 | \

39 
DEV_MSS_SIPP
 | \

40 
DEV_MSS_TIM
 )

	)

42 
	#APP_SIPP_CLOCKS
 ( 
DEV_SIPP_SIPP_ABPSLV
 | \

43 
DEV_SIPP_APB_SLV
 | \

44 
DEV_SIPP_MIPI
 | \

45 
DEV_SIPP_LUT
 | \

46 
DEV_SIPP_MIPI_RX1
 )

	)

	@Demo/UsbVideo208/arch/ma2x5x/leon_rt/lrt_app_config_2150.c

2 
	~"mv_ty≥s.h
"

3 
	~"sùp.h
"

5 
u16
 
	glutTabÀ
[256] 
__©åibuã__
((
£˘i⁄
(".cmx.d©a"))Ë__©åibuã__((
Æig√d
(8)));

7 
	$c⁄figuªLutFûãrSûic⁄S≥cific
(
LutP¨am
* 
lutCfg
)

9 
lutCfg
->
lutF‹m©
 = 2;

10 
	}
}

	@Demo/UsbVideo208/arch/ma2x5x/leon_rt/lrt_app_config_2150.h

13 #i‚de‡
LRT_APP_CONFIG_2150_H


14 
	#LRT_APP_CONFIG_2150_H


	)

24 
u16
 
lutTabÀ
[256];

	@Demo/UsbVideo208/leon/los_app_config.c

13 
	~"DrvDdr.h
"

14 
	~"DrvShaveL2Cache.h
"

15 
	~"OsDrvTimî.h
"

16 
	~"OsDrvC¥.h
"

17 
	~"los_≠p_c⁄fig.h
"

22 
	#L2CACHE_CFG
 (
SHAVE_L2CACHE_NORMAL_MODE
)

	)

23 
	#PARTITION_0
 (0)

	)

24 
	#SHAVES_USED
 (12)

	)

34 
tyAuxClkDividîCfg
 
	gauxClk
[] =

37 .
auxClockE«bÀMask
 = 
AUX_CLK_MASK_MEDIA
,

38 .
	gauxClockSour˚
 = 
CLK_SRC_SYS_CLK_DIV2
,

39 .
	gauxClockDivNumî©‹
 = 1,

40 .
	gauxClockDivDíomö©‹
 = 1,

43 .
	gauxClockE«bÀMask
 = (
AUX_CLK_MASK_CIF0
 | 
AUX_CLK_MASK_CIF1
),

44 .
	gauxClockSour˚
 = 
CLK_SRC_SYS_CLK
,

45 .
	gauxClockDivNumî©‹
 = 1,

46 .
	gauxClockDivDíomö©‹
 = 1,

49 .
	gauxClockE«bÀMask
 = 
CLOCKS_MIPICFG
,

50 .
	gauxClockSour˚
 = 
CLK_SRC_SYS_CLK
,

51 .
	gauxClockDivNumî©‹
 = 1,

52 .
	gauxClockDivDíomö©‹
 = 24,

55 .
	gauxClockE«bÀMask
 = 
AUX_CLK_MASK_USB_CTRL_SUSPEND_CLK
,

56 .
	gauxClockSour˚
 = 
CLK_SRC_PLL0
,

57 .
	gauxClockDivNumî©‹
 = 1,

58 .
	gauxClockDivDíomö©‹
 = 24

68 
	$öôClocksAndMem‹y
()

70 
s32
 
i
;

71 
s32
 
sc
;

73 
sc
 = 
	`OsDrvC¥Inô
();

74 if(
sc
)

75  
sc
;

76 
sc
 = 
	`OsDrvC¥O≥n
();

77 if(
sc
)

78  
sc
;

79 
sc
 = 
	`OsDrvC¥AuxClockAºayC⁄fig
(
auxClk
);

80 if(
sc
)

81  
sc
;

83 
	`blocksRe£tSûic⁄S≥cific
();

85 
sc
 = 
	`OsDrvTimîInô
();

86 if(
sc
)

87  
sc
;

88 
	`DrvDdrInôüli£
(
NULL
);

91 
sc
 = 
	`DrvShaveL2CacheSëMode
(
L2CACHE_CFG
);

92 if(
sc
)

93  
sc
;

96 
	`DrvShaveL2CacheSëupP¨tôi⁄
(
SHAVEPART256KB
);

99 
sc
 = 
	`DrvShaveL2CacheAŒoˇãSëP¨tôi⁄s
();

100 if(
sc
)

101  
sc
;

104 
i
 = 0; i < 
SHAVES_USED
; i++)

106 
	`DrvShaveL2CacheSëLSUP¨tId
(
i
, 
PARTITION_0
);

109 
	`DrvShaveL2CacheP¨tôi⁄FlushAndInvÆid©e
(
PARTITION_0
);

112 
	}
}

	@Demo/UsbVideo208/leon/los_app_config.h

13 #i‚de‡
APP_CONFIG_H


14 
	#APP_CONFIG_H


	)

18 
	~"mv_ty≥s.h
"

21 #i‡
deföed
(
MA2150
Ë|| deföed(
MA2155
Ë|| deföed(
MA2450
Ë|| deföed(
MA2455
)

22 
	~"los_≠p_c⁄fig_2150.h
"

27 
	#SYS_CLK_KHZ
 12000

28 

	)

29 
	#APP_UPA_CLOCKS
 (
DEV_UPA_SH0
 | \

30 
DEV_UPA_SH1
 | \

31 
DEV_UPA_SH2
 | \

32 
DEV_UPA_SH3
 | \

33 
DEV_UPA_SH4
 | \

34 
DEV_UPA_SH5
 | \

35 
DEV_UPA_SH6
 | \

36 
DEV_UPA_SHAVE_L2
 | \

37 
DEV_UPA_CDMA
 | \

38 
DEV_UPA_CTRL
 )

	)

41 
	#CLOCKS_MIPICFG
 (
AUX_CLK_MASK_MIPI_ECFG
 | 
AUX_CLK_MASK_MIPI_CFG
)

	)

51 
öôClocksAndMem‹y
();

52 
blocksRe£tSûic⁄S≥cific
();

	@Demo/UsbVideo208/leon/main.c

13 
	~<DrvLe⁄.h
>

14 
	~<°dio.h
>

15 
	~<°dlib.h
>

16 
	~<°rög.h
>

17 
	~<DrvC¥.h
>

18 
	~<î∫o.h
>

19 
	~"πems_c⁄fig.h
"

20 
	~"OsDrvUsbPhy.h
"

21 
	~"ˇm_c⁄fig.h
"

22 
	~"Le⁄IPCApi.h
"

23 
	~"usbpumpdebug.h
"

24 
	~"usbpump_≠∂iˇti⁄_πems_≠i.h
"

28 #i‚de‡
DISABLE_LEON_DCACHE


29 
	#USBPUMP_MDK_CACHE_ENABLE
 1

	)

31 
	#USBPUMP_MDK_CACHE_ENABLE
 0

	)

37 
u32
 *
Ãt_°¨t
;

39 
À⁄IPCCh™√l_t
 
__©åibuã__
((
£˘i⁄
(".cmx_dúe˘.d©a"))Ë
	gÃt_LOStoLRTCh™√l
;

40 
uöt32_t
 
__©åibuã__
((
£˘i⁄
(".cmx_dúe˘.d©a"))Ë
	gmesßgePoﬁ
[
MSG_QUEUE_SIZE
 * 
MSG_SIZE
];

44 
USBPUMP_APPLICATION_RTEMS_CONFIGURATION
 
	gsg_D©aPump_AµC⁄fig
 =

45 
USBPUMP_APPLICATION_RTEMS_CONFIGURATION_INIT_V1
(

47  
NULL
,

52  
NULL
,

53  
NULL
,

54  
USBPUMP_MDK_CACHE_ENABLE
,

55  
UDMASK_ANY
 | 
UDMASK_ERRORS


63 *
	$POSIX_Inô
 (*
¨gs
)

65 
	`UNUSED
(
¨gs
);

67 
s32
 
sc
;

68 
osDrvUsbPhyP¨am_t
 
öôP¨am
 =

70 .
íabÀOtgBlock
 = 
USB_PHY_OTG_DISABLED
,

71 .
u£Exã∫ÆClock
 = 
USB_PHY_USE_EXT_CLK
,

72 .
fSñ
 = 
USB_REFCLK_20MHZ
,

73 .
ªfClkSñ0
 = 
USB_SUPER_SPEED_CLK_CONFIG
,

74 .
f‹˚HsO∆y
 = 
USB_PHY_HS_ONLY_OFF


77 
sc
 = 
	`öôClocksAndMem‹y
();

78 if(
sc
)

79 
	`exô
(
sc
);

81 
sc
 = 
	`Le⁄IPCTxInô
(&
Ãt_LOStoLRTCh™√l
, 
mesßgePoﬁ
, 
MSG_QUEUE_SIZE
, 
MSG_SIZE
);

82 if(
sc
)

83 
	`exô
(
sc
);

84 
	`DrvLe⁄RTSèπup
((
u32
)&
Ãt_°¨t
);

85 
	`DrvLe⁄RTWaôF‹BoŸ
();

88 
	`OsDrvUsbPhyInô
(&
öôP¨am
);

90 i‡(
	`UsbPump_Rãms_D©aPump_Sèπup
(&
sg_D©aPump_AµC⁄fig
Ë!
NULL
)

92 
	`¥ötf
("\n\nUsbPump_Rtems_DataPump_Startup()!\n\n\n");

96 
	`¥ötf
("\n\nUsbPump_Rtems_DataPump_Startup() failed!\n\n\n");

97 
	`exô
(1);

100 
	`DrvLe⁄RTWaôExecuti⁄
();

101 
	`exô
(0);

102 
	}
}

	@Demo/UsbVideo208/leon/rtems_config.h

9 #i‚de‡
_RTEMS_CONFIG_H_


10 
	#_RTEMS_CONFIG_H_


	)

14 
	~<πems.h
>

15 
	~<πems/b•Io.h
>

16 
	~"los_≠p_c⁄fig.h
"

17 
	~"ÁèlExãnsi⁄.h
"

21 #i‡
deföed
(
__RTEMS__
)

23 #i‡!
deföed
 (
__CONFIG__
)

24 
	#__CONFIG__


	)

27 
	#CONFIGURE_INIT


	)

29 #i‚de‡
RTEMS_POSIX_API


30 
	#RTEMS_POSIX_API


	)

33 
	#CONFIGURE_MICROSECONDS_PER_TICK
 1000

	)

35 
	#CONFIGURE_TICKS_PER_TIMESLICE
 10

	)

37 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

39 
	#CONFIGURE_APPLICATION_NEEDS_CLOCK_DRIVER


	)

41 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

43 
	#CONFIGURE_MINIMUM_TASK_STACK_SIZE
 4096

	)

45 
	#CONFIGURE_MAXIMUM_TASKS
 4

	)

47 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 4

	)

49 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 8

	)

51 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 8

	)

53 
	#CONFIGURE_MAXIMUM_SEMAPHORES
 8

	)

55 
	#CONFIGURE_MAXIMUM_POSIX_MESSAGE_QUEUES
 8

	)

57 
	#CONFIGURE_MAXIMUM_POSIX_TIMERS
 4

	)

59 
	#CONFIGURE_MAXIMUM_TIMERS
 4

	)

63 
	#CONFIGURE_MAXIMUM_USER_EXTENSIONS
 1

	)

64 
	#CONFIGURE_INITIAL_EXTENSIONS
 { .
Áèl
 = 
F©Æ_exãnsi⁄
 }

	)

66 *
POSIX_Inô
 (*
¨gs
);

68 
	~<πems/c⁄fdefs.h
>

73 
BSP_SET_CLOCK
(12000, 480000, 1, 1,
DEFAULT_CORE_CSS_DSS_CLOCKS
, 
MSS_CLOCKS
, 
APP_UPA_CLOCKS
, 
APP_SIPP_CLOCKS
, 0x0);

76 
BSP_SET_L2C_CONFIG
(1, 
L2C_REPL_LRU
, 0, 
L2C_MODE_COPY_BACK
, 0, 
NULL
);

	@Demo/UsbVideo208/leon/videodemo.h

9 #i‚de‡
_VIDEODEMO_H_


10 
	#_VIDEODEMO_H_


	)

14 
	~"¥Ÿovideo.h
"

15 
	~"uˇŒback.h
"

16 
	~"mv_ty≥s.h
"

18 
__TMS_TYPE_DEF_STRUCT
(
VIDEODEMO_CONTEXT
);

19 
__TMS_TYPE_DEF_STRUCT
(
VIDEODEMO_BUFFER_HDR
);

20 
__TMS_TYPE_DEF_STRUCT
(
VIDEODEMO_BUFFER
);

21 
__TMS_TYPE_DEF_STRUCT
(
PROCESSING_UNIT
);

22 
__TMS_TYPE_DEF_STRUCT
(
PROBE_COMMIT
);

23 
__TMS_TYPE_DEF_STRUCT
(
STILL_PROBE_COMMIT
);

27 #i‚de‡ 
VIDEODEMO_CONFIG_CONTROLBUFFER_SIZE


28 
	#VIDEODEMO_CONFIG_CONTROLBUFFER_SIZE
 (32)

	)

31 #i‚de‡ 
VIDEODEMO_CONFIG_MAXQUEUED_BUFFER


32 
	#VIDEODEMO_CONFIG_MAXQUEUED_BUFFER
 (16)

	)

36 
	#PAYLOAD_HEADER_SIZE
 (12)

	)

38 
	#UNCOMPRESSED_HDR_HLE_OFFSET
 0

	)

39 
	#UNCOMPRESSED_HDR_BFH_OFFSET
 1

	)

40 
	#UNCOMPRESSED_HDR_PTS_OFFSET
 2

	)

41 
	#UNCOMPRESSED_HDR_SCR_STC_OFFSET
 6

	)

42 
	#UNCOMPRESSED_HDR_SCR_SOF_OFFSET
 10

	)

43 
	#UNCOMPRESSED_HDR_EOH
 (1 << 7)

	)

44 
	#UNCOMPRESSED_HDR_ERR
 (1 << 6)

	)

45 
	#UNCOMPRESSED_HDR_STI
 (1 << 5)

	)

46 
	#UNCOMPRESSED_HDR_RES
 (1 << 4)

	)

47 
	#UNCOMPRESSED_HDR_SCR
 (1 << 3)

	)

48 
	#UNCOMPRESSED_HDR_PTS
 (1 << 2)

	)

49 
	#UNCOMPRESSED_HDR_EOF
 (1 << 1)

	)

50 
	#UNCOMPRESSED_HDR_FID
 (1 << 0)

	)

53 
	#PU_BACKLIGHT_COMPENSATION_CONTROL_INFO
 0x03

	)

54 
	#PU_BACKLIGHT_COMPENSATION_CONTROL_MIN
 0x0000

	)

55 
	#PU_BACKLIGHT_COMPENSATION_CONTROL_MAX
 0x0003

	)

56 
	#PU_BACKLIGHT_COMPENSATION_CONTROL_RES
 0x0001

	)

57 
	#PU_BACKLIGHT_COMPENSATION_CONTROL_DEF
 0x0000

	)

59 
	#PU_BRIGHTNESS_CONTROL_INFO
 0x03

	)

60 
	#PU_BRIGHTNESS_CONTROL_MIN
 0x0000

	)

61 
	#PU_BRIGHTNESS_CONTROL_MAX
 0x00FF

	)

62 
	#PU_BRIGHTNESS_CONTROL_RES
 0x0001

	)

63 
	#PU_BRIGHTNESS_CONTROL_DEF
 0x007F

	)

65 
	#PU_CONTRAST_CONTROL_INFO
 0x03

	)

66 
	#PU_CONTRAST_CONTROL_MIN
 0x0000

	)

67 
	#PU_CONTRAST_CONTROL_MAX
 0x00FF

	)

68 
	#PU_CONTRAST_CONTROL_RES
 0x0001

	)

69 
	#PU_CONTRAST_CONTROL_DEF
 0x007F

	)

71 
	#PU_POWER_LINE_FREQUENCY_CONTROL_INFO
 0x03

	)

72 
	#PU_POWER_LINE_FREQUENCY_CONTROL_MIN
 0x00

	)

73 
	#PU_POWER_LINE_FREQUENCY_CONTROL_MAX
 0x02

	)

74 
	#PU_POWER_LINE_FREQUENCY_CONTROL_RES
 0x01

	)

75 
	#PU_POWER_LINE_FREQUENCY_CONTROL_DEF
 0x01

	)

77 
	#PU_HUE_CONTROL_INFO
 0x03

	)

78 
	#PU_HUE_CONTROL_MIN
 0x0000

	)

79 
	#PU_HUE_CONTROL_MAX
 0x0168

	)

80 
	#PU_HUE_CONTROL_RES
 0x0064

	)

81 
	#PU_HUE_CONTROL_DEF
 0x0000

	)

83 
	#PU_SATURATION_CONTROL_INFO
 0x03

	)

84 
	#PU_SATURATION_CONTROL_MIN
 0x0000

	)

85 
	#PU_SATURATION_CONTROL_MAX
 0x00FF

	)

86 
	#PU_SATURATION_CONTROL_RES
 0x0001

	)

87 
	#PU_SATURATION_CONTROL_DEF
 0x007F

	)

89 
	#PU_SHARPNESS_CONTROL_INFO
 0x03

	)

90 
	#PU_SHARPNESS_CONTROL_MIN
 0x0000

	)

91 
	#PU_SHARPNESS_CONTROL_MAX
 0x000F

	)

92 
	#PU_SHARPNESS_CONTROL_RES
 0x0001

	)

93 
	#PU_SHARPNESS_CONTROL_DEF
 0x0000

	)

95 
	#PU_GAMMA_CONTROL_INFO
 0x03

	)

96 
	#PU_GAMMA_CONTROL_MIN
 0x0064

	)

97 
	#PU_GAMMA_CONTROL_MAX
 0x00DC

	)

98 
	#PU_GAMMA_CONTROL_RES
 0x003C

	)

99 
	#PU_GAMMA_CONTROL_DEF
 0x00A0

	)

101 
	#PU_WHITE_BALANCE_TEMPERATURE_CONTROL_INFO
 0x03

	)

102 
	#PU_WHITE_BALANCE_TEMPERATURE_CONTROL_MIN
 0x0AFA

	)

103 
	#PU_WHITE_BALANCE_TEMPERATURE_CONTROL_MAX
 0x1964

	)

104 
	#PU_WHITE_BALANCE_TEMPERATURE_CONTROL_RES
 0x03E8

	)

105 
	#PU_WHITE_BALANCE_TEMPERATURE_CONTROL_DEF
 0x16A8

	)

107 
	#PU_HUE_AUTO_CONTROL_INFO
 0x1

	)

108 
	#PU_HUE_AUTO_CONTROL_MIN
 0x0

	)

109 
	#PU_HUE_AUTO_CONTROL_MAX
 0x1

	)

110 
	#PU_HUE_AUTO_CONTROL_RES
 0x1

	)

111 
	#PU_HUE_AUTO_CONTROL_DEF
 0x0

	)

113 
	#PU_WHITE_BALANCE_TEMPERATURE_AUTO_CONTROL_INFO
 0x01

	)

114 
	#PU_WHITE_BALANCE_TEMPERATURE_AUTO_CONTROL_MIN
 0x00

	)

115 
	#PU_WHITE_BALANCE_TEMPERATURE_AUTO_CONTROL_MAX
 0xFF

	)

116 
	#PU_WHITE_BALANCE_TEMPERATURE_AUTO_CONTROL_RES
 0x01

	)

117 
	#PU_WHITE_BALANCE_TEMPERATURE_AUTO_CONTROL_DEF
 0x01

	)

120 
	#PROBE_DEFAULT_bmHöt
 0x0000

	)

121 
	#PROBE_DEFAULT_bF‹m©Index
 0x01

	)

122 
	#PROBE_DEFAULT_bFømeIndex
 0x01

	)

123 
	#PROBE_DEFAULT_dwFømeI¡îvÆ
 166666

	)

124 
	#PROBE_DEFAULT_wKeyFømeR©e
 0x0001

	)

125 
	#PROBE_DEFAULT_wPFømeR©e
 0x0000

	)

126 
	#PROBE_DEFAULT_wCompQuÆôy
 0x0000

	)

127 
	#PROBE_DEFAULT_wCompWödowSize
 0x0000

	)

128 
	#PROBE_DEFAULT_wDñay
 0x000

	)

130 
	#PROBE_DEFAULT_dwMaxVideoFømeSize
 (
CAM_WINDOW_WIDTH
 * 
CAM_WINDOW_HEIGHT
 * 2 + 
PAYLOAD_HEADER_SIZE
)

	)

131 
	#PROBE_DEFAULT_dwMaxPaylﬂdTøns„rSize
 (
CAM_WINDOW_WIDTH
 * 
CAM_WINDOW_HEIGHT
 * 2 + 
PAYLOAD_HEADER_SIZE
)

	)

133 
	#PROBE_DEFAULT_dwClockFªquícy
 0x00000000

	)

134 
	#PROBE_DEFAULT_bmFømögInfo
 0x00

	)

135 
	#PROBE_DEFAULT_bPª„ªdVîsi⁄
 0x00

	)

136 
	#PROBE_DEFAULT_bMöVîsi⁄
 0x00

	)

137 
	#PROBE_DEFAULT_bMaxVîsi⁄
 0x00

	)

140 
	#STILL_PROBE_DEFAULT_bF‹m©Index
 0x01

	)

141 
	#STILL_PROBE_DEFAULT_bFømeIndex
 0x01

	)

142 
	#STILL_PROBE_DEFAULT_bCom¥essi⁄Index
 0x00

	)

143 
	#STILL_PROBE_DEFAULT_dwMaxVideoFømeSize
 0x96000

	)

144 
	#STILL_PROBE_DEFAULT_dwMaxPayLﬂdTøns„rSize
 0x96000

	)

147 
	#STILL_IMAGE_NORMAL_OPERATION
 0x00

	)

148 
	#STILL_IMAGE_TRANSMIT
 0x01

	)

149 
	#STILL_IMAGE_TRANSMIT_VIA_DIDICATED
 0x02

	)

150 
	#STILL_IMAGE_TRANSMISSION_ABORT
 0x03

	)

152 
	#START_VIDEO_FRAME_INDEX
 0

	)

154 
	$__TMS_STRUCTNAME
(
PROCESSING_UNIT
)

156 
u16
 
wBackLightCom≥nßti⁄
;

157 
u16
 
wBrighäess
;

158 
u16
 
wC⁄åa°
;

159 
u8
 
bPowîLöeFªquícy
;

160 
u16
 
wHue
;

161 
u16
 
wS©uøti⁄
;

162 
u16
 
wSh¨≤ess
;

163 
u16
 
wGamma
;

164 
u16
 
wWhôeBÆ™˚Tem≥øtuª
;

165 
u8
 
bHueAuto
;

166 
u8
 
bWhôeBÆ™˚Tem≥øtuªAuto
;

167 
	}
};

169 
	$__TMS_STRUCTNAME
(
PROBE_COMMIT
)

171 
u16
 
bmHöt
;

172 
u8
 
bF‹m©Index
;

173 
u8
 
bFømeIndex
;

174 
u32
 
dwFømeI¡îvÆ
;

175 
u16
 
wKeyFømeR©e
;

176 
u16
 
wPFømeR©e
;

177 
u16
 
wCompQuÆôy
;

178 
u16
 
wCompWödowSize
;

179 
u16
 
wDñay
;

180 
u32
 
dwMaxVideoFømeSize
;

181 
u32
 
dwMaxPaylﬂdTøns„rSize
;

182 
u32
 
dwClockFªquícy
;

183 
u8
 
bmFømögInfo
;

184 
u8
 
bPª„ªdVîsi⁄
;

185 
u8
 
bMöVîsi⁄
;

186 
u8
 
bMaxVîsi⁄
;

187 
	}
};

189 
	$__TMS_STRUCTNAME
(
STILL_PROBE_COMMIT
)

191 
u8
 
bF‹m©Index
;

192 
u8
 
bFømeIndex
;

193 
u8
 
bCom¥essi⁄Index
;

194 
u32
 
dwMaxVideoFømeSize
;

195 
u32
 
dwMaxPaylﬂdTøns„rSize
;

196 
	}
};

198 
	$__TMS_STRUCTNAME
(
VIDEODEMO_CONTEXT
)

200 
__TMS_UPROTO_VIDEO
 * 
pVideo
;

201 
__TMS_UPLATFORM
 * 
pPœtf‹m
;

203 
__TMS_VOID
 * 
pAµC⁄ãxt
;

206 
__TMS_UPROTO_VIDEO_STREAM_HANDLE
 
hVideoIn
;

207 
__TMS_UPROTO_VIDEO_STREAM_HANDLE
 
hVideoOut
;

209 
u32
 
wVideoInMaxPackëSize
;

210 
u32
 
wVideoOutMaxPackëSize
;

212 
u16
 
wTøn•‹tHódîSize
;

213 
u16
 
wISOPackëNumbî
;

215 
__TMS_BOOL
 
fI≈utA˘iv©e
;

216 
__TMS_BOOL
 
fOuçutA˘iv©e
;

218 
__TMS_VIDEODEMO_BUFFER_HDR
 * 
pRódBuf„rHdr
;

219 
u16
 
nRódBuf„rHdr
;

221 
__TMS_VIDEODEMO_BUFFER_HDR
 * 
pWrôeBuf„rHdr
;

222 
u16
 
nWrôeBuf„rHdr
;

225 
__TMS_PROCESSING_UNIT
 
ProcUnôCur
;

228 
__TMS_PROBE_COMMIT
 
ProbeCur
;

231 
__TMS_PROBE_COMMIT
 
ProbeMö
;

234 
__TMS_PROBE_COMMIT
 
ProbeMax
;

237 
__TMS_PROBE_COMMIT
 
ProbeDef
;

240 
__TMS_PROBE_COMMIT
 
CommôCur
;

243 
__TMS_PROBE_COMMIT
 
CommôMö
;

246 
__TMS_PROBE_COMMIT
 
CommôMax
;

249 
__TMS_PROBE_COMMIT
 
CommôDef
;

252 
__TMS_STILL_PROBE_COMMIT
 
StûlProbeCur
;

255 
__TMS_STILL_PROBE_COMMIT
 
StûlCommôCur
;

257 
u8
 
bStûlTriggî
;

258 
u8
 
nVideoFømeIndex
;

261 
__TMS_UCALLBACKCOMPLETION
 
InôCom∂ëi⁄
;

263 
__TMS_UCALLBACKCOMPLETION
 
SëupCom∂ëi⁄
;

264 
__TMS_UPROTO_VIDEO_CONTROL_REQUEST
 
C⁄åﬁReque°
;

265 
__TMS_UPROTO_VIDEO_STREAM_HANDLE
 
hSåómReque°
;

266 
__TMS_UPROTO_VIDEO_STREAM_REQUEST
 
SåómReque°
;

267 
	}
};

269 
	$__TMS_STRUCTNAME
(
VIDEODEMO_BUFFER_HDR
)

271 
__TMS_VIDEODEMO_BUFFER_HDR
 * 
pNext
;

272 
__TMS_VIDEODEMO_BUFFER_HDR
 * 
pLa°
;

273 
u32
 
nBuf„r
;

274 
u32
 
nD©a
;

275 
	}
};

277 
	$__TMS_STRUCTNAME
(
VIDEODEMO_BUFFER
)

279 
__TMS_VIDEODEMO_BUFFER_HDR
 
Hdr
;

280 
u8
 
pBuf„r
[1];

281 
	}
};

285 
__TMS_CONST
 
__TMS_UPROTO_VIDEO_CONFIG
 
gk_VideoDemo_PrŸoC⁄fig
;

286 
__TMS_CONST
 
__TMS_UPROTO_VIDEO_OUTSWITCH
 
gk_VideoDemo_OutSwôch
;

288 
__TMS_CONST
 
__TMS_TEXT
 * __TMS_CONST 
gk_VideoDemo_Eº‹Name
[];

289 
__TMS_CONST
 
__TMS_TEXT
 * __TMS_CONST 
gk_VideoDemo_SètusName
[];

294 
__TMS_BEGIN_DECLS


296 
__TMS_VIDEODEMO_CONTEXT
 *

297 
VideoDemo_Uncom¥es£dDemoInô
(
__TMS_UPLATFORM
 * 
pPœtf‹m
,

298 
__TMS_USBPUMP_OBJECT_HEADER
 * 
pVideoFun˘i⁄
);

300 
__TMS_VOID
 
VideoDemo_WrôeO√Føme
(
__TMS_VIDEODEMO_CONTEXT
 * 
pVideoDemoCtx
,

301 
u8
 * 
pD©a
, 
u32
 
wNumbîOfByã
, u32 
dwPTS
, 
u16
 
wSofCou¡î
);

303 
__TMS_VOID
 
VideoDemo_Sèπ
(
__TMS_VIDEODEMO_CONTEXT
 * 
pVideoDemoCtx
);

305 
__TMS_UPROTO_VIDEO_CONTROL_STATUS_EVENT_CB_FN
 
	gVideoDemo_C⁄åﬁSètusEvít
;

306 
__TMS_UPROTO_VIDEO_CONTROL_REQUEST_CB_FN
 
	gVideoDemo_Pro˚ssögUnôEvít
;

307 
__TMS_UPROTO_VIDEO_STREAM_STATUS_EVENT_CB_FN
 
	gVideoDemo_SåómSètusEvít
;

308 
__TMS_UPROTO_VIDEO_STREAM_REQUEST_CB_FN
 
	gVideoDemo_SåómI¡îÁ˚Evít
;

310 
	g__TMS_END_DECLS


	@Demo/UsbVideo208/leon/videodemo_appinit.c

11 #i‚de‡
_USBPUMP_H_


12 
	~"usbpump.h
"

15 
	~"videodemo.h
"

17 
	~"¥Ÿovideo.h
"

18 
	~"usb≠pöô.h
"

19 
	~"usb¥Ÿoöô.h
"

20 
	~"usbvideo11.h
"

25 
	#EXTERN_USBRC_ROOTTABLE
(
NAME
Ë\

	)

26 
CONST
 
USBRC_ROOTTABLE
 
NAME
;

28 #ifde‡
DESCRIPTOR_ROOT_0


29 
	$EXTERN_USBRC_ROOTTABLE
(
DESCRIPTOR_ROOT_0
)

31 #ifde‡
DESCRIPTOR_ROOT_1


32 
	$EXTERN_USBRC_ROOTTABLE
(
DESCRIPTOR_ROOT_1
)

34 #ifde‡
DESCRIPTOR_ROOT_2


35 
	$EXTERN_USBRC_ROOTTABLE
(
DESCRIPTOR_ROOT_2
)

37 #ifde‡
DESCRIPTOR_ROOT_3


38 
	$EXTERN_USBRC_ROOTTABLE
(
DESCRIPTOR_ROOT_3
)

40 #ifde‡
DESCRIPTOR_ROOT_4


41 
	$EXTERN_USBRC_ROOTTABLE
(
DESCRIPTOR_ROOT_4
)

43 #ifde‡
DESCRIPTOR_ROOT_5


44 
	$EXTERN_USBRC_ROOTTABLE
(
DESCRIPTOR_ROOT_5
)

46 #ifde‡
DESCRIPTOR_ROOT_6


47 
	$EXTERN_USBRC_ROOTTABLE
(
DESCRIPTOR_ROOT_6
)

49 #ifde‡
DESCRIPTOR_ROOT_7


50 
	$EXTERN_USBRC_ROOTTABLE
(
DESCRIPTOR_ROOT_7
)

52 #ifde‡
DESCRIPTOR_ROOT_8


53 
	$EXTERN_USBRC_ROOTTABLE
(
DESCRIPTOR_ROOT_8
)

55 #ifde‡
DESCRIPTOR_ROOT_9


56 
	$EXTERN_USBRC_ROOTTABLE
(
DESCRIPTOR_ROOT_9
)

58 #i‚de‡ 
DESCRIPTOR_ROOT_0


59 #i‚de‡
DESCRIPTOR_ROOT_1


60 #i‚de‡
DESCRIPTOR_ROOT_2


61 #i‚de‡
DESCRIPTOR_ROOT_3


62 #i‚de‡
DESCRIPTOR_ROOT_4


63 #i‚de‡
DESCRIPTOR_ROOT_5


64 #i‚de‡
DESCRIPTOR_ROOT_6


65 #i‚de‡
DESCRIPTOR_ROOT_7


66 #i‚de‡
DESCRIPTOR_ROOT_8


67 #i‚de‡
DESCRIPTOR_ROOT_9


68 
	$EXTERN_USBRC_ROOTTABLE
(
gk_UsbDes¸ùt‹RoŸ
)

84 
CONST
 
USBRC_ROOTTABLE
 
gk_UsbDes¸ùt‹RoŸ
;

85 
	`VideoDemo_Clõ¡Cª©e
(
UPLATFORM
 * 
pPœtf‹m
);

89 
USB_DATAPUMP_APPLICATION_INIT_VECTOR_FINISH_FN
 
VideoDemoI_AµInô_Ve˘‹Föish
;

93 
CONST
 
USBPUMP_PROTOCOL_INIT_NODE
 
InôNodes
[] =

95 
	`USBPUMP_PROTOCOL_INIT_NODE_INIT_V2
( \

97  
USB_bI¡îÁ˚Cœss_Video
, \

98  
USB_bI¡îÁ˚SubCœss_VideoC⁄åﬁ
, \

102  
USBPUMP_PROTOCOL_INIT_FLAG_AUTO_ADD
, \

103  
UsbPumpVideo_PrŸocﬁProbe
, \

104  
UsbPumpVideo_PrŸocﬁCª©e
, \

105  
NULL
, \

106  
UsbPumpVideo_PrŸocﬁAddI¡îÁ˚
, \

107  &
gk_VideoDemo_PrŸoC⁄fig
 \

109 
	}
};

111 
CONST
 
USBPUMP_PROTOCOL_INIT_NODE_VECTOR
 
	gInôHódî
 =

112 
USBPUMP_PROTOCOL_INIT_NODE_VECTOR_INIT_V1
(

113  
InôNodes
,

114  
NULL
,

115  
NULL


122 
	#INIT_VECTOR_NODE
(
a__UsbDes¸ùt‹RoŸ
Ë\

	)

123 
USB_DATAPUMP_APPLICATION_INIT_VECTOR_INIT_V2
( \

124  &
a__UsbDes¸ùt‹RoŸ
, \

125  
UDMASK_ERRORS
 | 
UDMASK_PROTO
, \

126  
NULL
, \

128 
UsbPump_GíîicAµliˇti⁄Inô_PrŸocﬁs
, \

129  &
InôHódî
 \

132 
CONST
 
USB_DATAPUMP_APPLICATION_INIT_VECTOR
 
	gUsbPumpAµliˇti⁄InôVe˘‹
[] =

134 #ifde‡
DESCRIPTOR_ROOT_0


135 
INIT_VECTOR_NODE
(
DESCRIPTOR_ROOT_0
),

137 #ifde‡
DESCRIPTOR_ROOT_1


138 
INIT_VECTOR_NODE
(
DESCRIPTOR_ROOT_1
),

140 #ifde‡
DESCRIPTOR_ROOT_2


141 
INIT_VECTOR_NODE
(
DESCRIPTOR_ROOT_2
),

143 #ifde‡
DESCRIPTOR_ROOT_3


144 
INIT_VECTOR_NODE
(
DESCRIPTOR_ROOT_3
),

146 #ifde‡
DESCRIPTOR_ROOT_4


147 
INIT_VECTOR_NODE
(
DESCRIPTOR_ROOT_4
),

149 #ifde‡
DESCRIPTOR_ROOT_5


150 
INIT_VECTOR_NODE
(
DESCRIPTOR_ROOT_5
),

152 #ifde‡
DESCRIPTOR_ROOT_6


153 
INIT_VECTOR_NODE
(
DESCRIPTOR_ROOT_6
),

155 #ifde‡
DESCRIPTOR_ROOT_7


156 
INIT_VECTOR_NODE
(
DESCRIPTOR_ROOT_7
),

158 #ifde‡
DESCRIPTOR_ROOT_8


159 
INIT_VECTOR_NODE
(
DESCRIPTOR_ROOT_8
),

161 #ifde‡
DESCRIPTOR_ROOT_9


162 
INIT_VECTOR_NODE
(
DESCRIPTOR_ROOT_9
),

164 #i‚de‡ 
DESCRIPTOR_ROOT_0


165 #i‚de‡
DESCRIPTOR_ROOT_1


166 #i‚de‡
DESCRIPTOR_ROOT_2


167 #i‚de‡
DESCRIPTOR_ROOT_3


168 #i‚de‡
DESCRIPTOR_ROOT_4


169 #i‚de‡
DESCRIPTOR_ROOT_5


170 #i‚de‡
DESCRIPTOR_ROOT_6


171 #i‚de‡
DESCRIPTOR_ROOT_7


172 #i‚de‡
DESCRIPTOR_ROOT_8


173 #i‚de‡
DESCRIPTOR_ROOT_9


174 
INIT_VECTOR_NODE
(
gk_UsbDes¸ùt‹RoŸ
)

187 
CONST
 
USB_DATAPUMP_APPLICATION_INIT_VECTOR_HDR
 
	ggk_UsbPumpAµliˇti⁄InôHdr
 =

188 
USB_DATAPUMP_APPLICATION_INIT_VECTOR_HDR_INIT_V1
(

189 
UsbPumpAµliˇti⁄InôVe˘‹
,

190  
NULL
,

191  
VideoDemoI_AµInô_Ve˘‹Föish


200 
	$VideoDemoI_AµInô_Ve˘‹Föish
(

201 
UPLATFORM
 *
pPœtf‹m
,

202 
CONST
 
USB_DATAPUMP_APPLICATION_INIT_VECTOR_HDR
 *
pVecHdr
,

203 *
pAµInôC⁄ãxt
,

204 
UINT
 
nP‹ts
)

206 
	`USBPUMP_UNREFERENCED_PARAMETER
(
pVecHdr
);

207 
	`USBPUMP_UNREFERENCED_PARAMETER
(
pAµInôC⁄ãxt
);

208 
	`USBPUMP_UNREFERENCED_PARAMETER
(
nP‹ts
);

210 
	`VideoDemo_Clõ¡Cª©e
(
pPœtf‹m
);

211 
	}
}

	@Demo/UsbVideo208/leon/videodemo_create.c

1 
	~"videodemo.h
"

3 
	~"usbpum∑pi.h
"

4 
	~"usbpumpobje˘.h
"

5 
	~"usbpumpobje˘≠i.h
"

6 
	~"usbpum¥oŸ.h
"

7 
	~"u∂©f‹m.h
"

9 
VideoDemo_Clõ¡Cª©e
(
UPLATFORM
 * 
pPœtf‹m
);

11 
VIDEODEMO_CONTEXT
 * 
	gg_pVidemoDemoC⁄ãxt
;

30 
	$VideoDemo_Clõ¡Cª©e
(
UPLATFORM
 * 
pPœtf‹m
)

32 
USBPUMP_OBJECT_ROOT
 * 
CONST
 
pPumpRoŸ
 =

33 
	`UsbPumpObje˘_GëRoŸ
(&
pPœtf‹m
->
upf_Hódî
);

35 
USBPUMP_OBJECT_HEADER
 * 
pFun˘i⁄Obje˘
 = 
NULL
;

40 (
pFun˘i⁄Obje˘
 = 
	`UsbPumpObje˘_Enumî©eM©chögNames
(

41 &
pPumpRoŸ
->
Hódî
,

42 
pFun˘i⁄Obje˘
,

43 
USBPUMP_OBJECT_NAME_ENUM_VIDEO


44 )Ë!
NULL
)

46 
g_pVidemoDemoC⁄ãxt
 = 
	`VideoDemo_Uncom¥es£dDemoInô
(

47 
pPœtf‹m
,

48 
pFun˘i⁄Obje˘


51 
	}
}

	@Demo/UsbVideo208/leon/videodemo_init.c

12 
	~"videodemo.h
"

13 
	~"udevi˚.h
"

14 
	~"¥Ÿovideo.h
"

15 
	~"video˛õ¡lib.h
"

16 
	~"u∂©f‹m≠i.h
"

17 
	~"usbpumpdebug.h
"

18 
	~"usbpum∂i°.h
"

19 
	~"usbpump_ty≥s.h
"

20 
	~"uisobufhdr.h
"

21 
	~"usbpum∂ib.h
"

22 
	~"usbpum∑pi.h
"

23 
	~"ˇm_c⁄fig.h
"

24 
	~"mv_ty≥s.h
"

25 
	~"Le⁄IPCApi.h
"

26 
	~"DrvIcb.h
"

27 
	~"OsDrvTimî.h
"

28 
	~"usbpump_≠∂iˇti⁄_πems_≠i.h
"

29 
	~"usbpump_dev•ìd.h
"

33 
uöt32_t
 
__©åibuã__
((
£˘i⁄
(".cmx_dúe˘.d©a"))Ë
	gª˚ivedMsg
[
MSG_QUEUE_SIZE
 * 
MSG_SIZE
];

37 
À⁄IPCCh™√l_t
 
Ãt_LRTtoLOSCh™√l
;

38 
À⁄IPCCh™√l_t
 
Ãt_LOStoLRTCh™√l
;

41 
u32
 
Ãt_usbFømeCå
;

42 
u8
* 
Ãt_usbBufPå
[
MAX_USED_BUF
];

45 
__TMS_TYPE_DEF_STRUCT
(
UNCOMPRESSED_APP_CONTEXT
);

47 
	$__TMS_STRUCTNAME
(
UNCOMPRESSED_APP_CONTEXT
)

49 
VIDEODEMO_CONTEXT
 * 
pVideoDemoCtx
;

50 
UINT32
 
VideoBufSize
;

54 
UINT32
 
dwPTS
;

58 
UINT16
 
wSofCou¡î
;

59 
UINT8
 
HódîToggÀ
;

60 
UINT32
 
wVideoByãIndex
;

61 
UINT32
 
wNumbîOfByã
;

62 
UCALLBACKCOMPLETION
 
WrôeFømeCom∂ëi⁄
;

63 
	}
};

67 
uöt32_t
 
	gmesßge
;

71 
CONST
 
UPROTO_VIDEO_CONFIG
 
	ggk_VideoDemo_PrŸoC⁄fig
 =

72 
UPROTO_VIDEO_CONFIG_INIT_V1
(

73 &
gk_UsbPumpVideo_InSwôch
,

74 
VIDEODEMO_CONFIG_CONTROLBUFFER_SIZE
,

75 
VIDEODEMO_CONFIG_MAXQUEUED_BUFFER
,

81 
CONST
 
TEXT
 * CONST 
	ggk_VideoDemo_Eº‹Name
[] = 
UPROTO_VIDEO_ERROR__INIT
;

83 
CONST
 
TEXT
 * CONST 
	ggk_VideoDemo_SètusName
[] = 
UPROTO_VIDEO_STATUS__INIT
;

88 
UPROTO_VIDEO_CONTROL_OPEN_CB_FN
 
	gVideoClõ¡LibI_C⁄åﬁO≥n_CÆlback
;

89 
UPROTO_VIDEO_STREAM_OPEN_CB_FN
 
	gVideoClõ¡LibI_SåómO≥n_CÆlback
;

90 
UPROTO_VIDEO_STREAM_GET_INFO_CB_FN
 
	gVideoClõ¡LibI_SåómGëInfo_CÆlback
;

91 
UPROTO_VIDEO_STREAM_CLOSE_CB_FN
 
	gVideoClõ¡LibI_SåómClo£_D⁄e
;

92 
UPROTO_VIDEO_STREAM_WRITE_CB_FN
 
	gVideoDemo_WrôeO√Føme_D⁄e
;

94 
CALLBACKFN
 
	gVideoClõ¡LibI_SåómO≥n_Sync
;

95 
CALLBACKFN
 
	gVideoDemoI_SídAnŸhîFøme
;

121 
VIDEODEMO_CONTEXT
 * 
	$VideoDemo_Uncom¥es£dDemoInô
(

122 
UPLATFORM
 *
pPœtf‹m
,

123 
USBPUMP_OBJECT_HEADER
 *
pFun˘i⁄Obje˘
)

125 
PUNCOMPRESSED_APP_CONTEXT
 
pAµC⁄ãxt
;

126 
VIDEODEMO_CONTEXT
 *
pVideoDemoCtx
;

128 
UPROTO_VIDEO
 * 
CONST
 
pVideo
 = 
	`__TMS_CONTAINER_OF
(

129 
pFun˘i⁄Obje˘
,

130 
UPROTO_VIDEO
,

131 
Obje˘Hódî


135 
pAµC⁄ãxt
 = 
	`UsbPumpPœtf‹m_MÆlocZîo
(
pPœtf‹m
, (*pAppContext));

137 i‡(
pAµC⁄ãxt
 =
NULL
)

139 
	`TTUSB_OBJPRINTF
((&
pVideo
->
Obje˘Hódî
, 
UDMASK_ERRORS
,

144  
NULL
;

149 
pVideoDemoCtx
 = 
	`UsbPumpPœtf‹m_MÆlocZîo
(
pPœtf‹m
, (*pVideoDemoCtx));

151 i‡(
pVideoDemoCtx
 =
NULL
)

153 
	`UsbPumpPœtf‹m_Fªe
(

154 
pPœtf‹m
,

155 
pAµC⁄ãxt
,

156 (*
pAµC⁄ãxt
)

159 
	`TTUSB_OBJPRINTF
((&
pVideo
->
Obje˘Hódî
, 
UDMASK_ERRORS
,

163  
NULL
;

166 
pAµC⁄ãxt
->
pVideoDemoCtx
 =ÖVideoDemoCtx;

167 
pAµC⁄ãxt
->
dwPTS
 = 0;

168 
pAµC⁄ãxt
->
wSofCou¡î
 = 0;

170 
pVideoDemoCtx
->
pVideo
 =ÖVideo;

171 
pVideoDemoCtx
->
pPœtf‹m
 =ÖPlatform;

172 
pVideoDemoCtx
->
pAµC⁄ãxt
 =ÖAppContext;

173 
pVideoDemoCtx
->
hVideoIn
 = 
UPROTO_VIDEO_STREAM_INVALID_HANDLE
;

174 
pVideoDemoCtx
->
hVideoOut
 = 
UPROTO_VIDEO_STREAM_INVALID_HANDLE
;

177 
pVideoDemoCtx
->
ProcUnôCur
.
wBackLightCom≥nßti⁄
 =

178 
PU_BACKLIGHT_COMPENSATION_CONTROL_DEF
;

179 
pVideoDemoCtx
->
ProcUnôCur
.
wBrighäess
 =

180 
PU_BRIGHTNESS_CONTROL_DEF
;

181 
pVideoDemoCtx
->
ProcUnôCur
.
wC⁄åa°
 =

182 
PU_CONTRAST_CONTROL_DEF
;

183 
pVideoDemoCtx
->
ProcUnôCur
.
bPowîLöeFªquícy
 =

184 
PU_POWER_LINE_FREQUENCY_CONTROL_DEF
;

185 
pVideoDemoCtx
->
ProcUnôCur
.
wHue
 =

186 
PU_HUE_CONTROL_DEF
;

187 
pVideoDemoCtx
->
ProcUnôCur
.
wS©uøti⁄
 =

188 
PU_SATURATION_CONTROL_DEF
;

189 
pVideoDemoCtx
->
ProcUnôCur
.
wSh¨≤ess
 =

190 
PU_SHARPNESS_CONTROL_DEF
;

191 
pVideoDemoCtx
->
ProcUnôCur
.
wGamma
 =

192 
PU_GAMMA_CONTROL_DEF
;

193 
pVideoDemoCtx
->
ProcUnôCur
.
wWhôeBÆ™˚Tem≥øtuª
 =

194 
PU_WHITE_BALANCE_TEMPERATURE_CONTROL_DEF
;

195 
pVideoDemoCtx
->
ProcUnôCur
.
bHueAuto
 =

196 
PU_HUE_AUTO_CONTROL_DEF
;

197 
pVideoDemoCtx
->
ProcUnôCur
.
bWhôeBÆ™˚Tem≥øtuªAuto
 =

198 
PU_WHITE_BALANCE_TEMPERATURE_AUTO_CONTROL_DEF
;

201 
pVideoDemoCtx
->
ProbeCur
.
bmHöt
 =

202 
pVideoDemoCtx
->
CommôCur
.
bmHöt
 =

203 
pVideoDemoCtx
->
ProbeMö
.
bmHöt
 =

204 
pVideoDemoCtx
->
CommôMö
.
bmHöt
 =

205 
pVideoDemoCtx
->
ProbeMax
.
bmHöt
 =

206 
pVideoDemoCtx
->
CommôMax
.
bmHöt
 =

207 
pVideoDemoCtx
->
ProbeDef
.
bmHöt
 =

208 
pVideoDemoCtx
->
CommôDef
.
bmHöt
 =

209 
PROBE_DEFAULT_bmHöt
;

210 
pVideoDemoCtx
->
ProbeCur
.
bF‹m©Index
 =

211 
pVideoDemoCtx
->
CommôCur
.
bF‹m©Index
 =

212 
pVideoDemoCtx
->
ProbeMö
.
bF‹m©Index
 =

213 
pVideoDemoCtx
->
CommôMö
.
bF‹m©Index
 =

214 
pVideoDemoCtx
->
ProbeMax
.
bF‹m©Index
 =

215 
pVideoDemoCtx
->
CommôMax
.
bF‹m©Index
 =

216 
pVideoDemoCtx
->
ProbeDef
.
bF‹m©Index
 =

217 
pVideoDemoCtx
->
CommôDef
.
bF‹m©Index
 =

218 
PROBE_DEFAULT_bF‹m©Index
;

219 
pVideoDemoCtx
->
ProbeCur
.
bFømeIndex
 =

220 
pVideoDemoCtx
->
CommôCur
.
bFømeIndex
 =

221 
pVideoDemoCtx
->
ProbeMö
.
bFømeIndex
 =

222 
pVideoDemoCtx
->
CommôMö
.
bFømeIndex
 =

223 
pVideoDemoCtx
->
ProbeMax
.
bFømeIndex
 =

224 
pVideoDemoCtx
->
CommôMax
.
bFømeIndex
 =

225 
pVideoDemoCtx
->
ProbeDef
.
bFømeIndex
 =

226 
pVideoDemoCtx
->
CommôDef
.
bFømeIndex
 =

227 
PROBE_DEFAULT_bFømeIndex
;

228 
pVideoDemoCtx
->
ProbeCur
.
dwFømeI¡îvÆ
 =

229 
pVideoDemoCtx
->
CommôCur
.
dwFømeI¡îvÆ
 =

230 
pVideoDemoCtx
->
ProbeMö
.
dwFømeI¡îvÆ
 =

231 
pVideoDemoCtx
->
CommôMö
.
dwFømeI¡îvÆ
 =

232 
pVideoDemoCtx
->
ProbeMax
.
dwFømeI¡îvÆ
 =

233 
pVideoDemoCtx
->
CommôMax
.
dwFømeI¡îvÆ
 =

234 
pVideoDemoCtx
->
ProbeDef
.
dwFømeI¡îvÆ
 =

235 
pVideoDemoCtx
->
CommôDef
.
dwFømeI¡îvÆ
 =

236 
PROBE_DEFAULT_dwFømeI¡îvÆ
;

237 
pVideoDemoCtx
->
ProbeCur
.
wKeyFømeR©e
 =

238 
pVideoDemoCtx
->
CommôCur
.
wKeyFømeR©e
 =

239 
pVideoDemoCtx
->
ProbeMö
.
wKeyFømeR©e
 =

240 
pVideoDemoCtx
->
CommôMö
.
wKeyFømeR©e
 =

241 
pVideoDemoCtx
->
ProbeMax
.
wKeyFømeR©e
 =

242 
pVideoDemoCtx
->
CommôMax
.
wKeyFømeR©e
 =

243 
pVideoDemoCtx
->
ProbeDef
.
wKeyFømeR©e
 =

244 
pVideoDemoCtx
->
CommôDef
.
wKeyFømeR©e
 =

245 
PROBE_DEFAULT_wKeyFømeR©e
;

246 
pVideoDemoCtx
->
ProbeCur
.
wPFømeR©e
 =

247 
pVideoDemoCtx
->
CommôCur
.
wPFømeR©e
 =

248 
pVideoDemoCtx
->
ProbeMö
.
wPFømeR©e
 =

249 
pVideoDemoCtx
->
CommôMö
.
wPFømeR©e
 =

250 
pVideoDemoCtx
->
ProbeMax
.
wPFømeR©e
 =

251 
pVideoDemoCtx
->
CommôMax
.
wPFømeR©e
 =

252 
pVideoDemoCtx
->
ProbeDef
.
wPFømeR©e
 =

253 
pVideoDemoCtx
->
CommôDef
.
wPFømeR©e
 =

254 
PROBE_DEFAULT_wPFømeR©e
;

255 
pVideoDemoCtx
->
ProbeCur
.
wCompQuÆôy
 =

256 
pVideoDemoCtx
->
CommôCur
.
wCompQuÆôy
 =

257 
pVideoDemoCtx
->
ProbeMö
.
wCompQuÆôy
 =

258 
pVideoDemoCtx
->
CommôMö
.
wCompQuÆôy
 =

259 
pVideoDemoCtx
->
ProbeMax
.
wCompQuÆôy
 =

260 
pVideoDemoCtx
->
CommôMax
.
wCompQuÆôy
 =

261 
pVideoDemoCtx
->
ProbeDef
.
wCompQuÆôy
 =

262 
pVideoDemoCtx
->
CommôDef
.
wCompQuÆôy
 =

263 
PROBE_DEFAULT_wCompQuÆôy
;

264 
pVideoDemoCtx
->
ProbeCur
.
wCompWödowSize
 =

265 
pVideoDemoCtx
->
CommôCur
.
wCompWödowSize
 =

266 
pVideoDemoCtx
->
ProbeMö
.
wCompWödowSize
 =

267 
pVideoDemoCtx
->
CommôMö
.
wCompWödowSize
 =

268 
pVideoDemoCtx
->
ProbeMax
.
wCompWödowSize
 =

269 
pVideoDemoCtx
->
CommôMax
.
wCompWödowSize
 =

270 
pVideoDemoCtx
->
ProbeDef
.
wCompWödowSize
 =

271 
pVideoDemoCtx
->
CommôDef
.
wCompWödowSize
 =

272 
PROBE_DEFAULT_wCompWödowSize
;

273 
pVideoDemoCtx
->
ProbeCur
.
wDñay
 =

274 
pVideoDemoCtx
->
CommôCur
.
wDñay
 =

275 
pVideoDemoCtx
->
ProbeMö
.
wDñay
 =

276 
pVideoDemoCtx
->
CommôMö
.
wDñay
 =

277 
pVideoDemoCtx
->
ProbeMax
.
wDñay
 =

278 
pVideoDemoCtx
->
CommôMax
.
wDñay
 =

279 
pVideoDemoCtx
->
ProbeDef
.
wDñay
 =

280 
pVideoDemoCtx
->
CommôDef
.
wDñay
 =

281 
PROBE_DEFAULT_wDñay
;

282 
pVideoDemoCtx
->
ProbeCur
.
dwMaxVideoFømeSize
 =

283 
pVideoDemoCtx
->
CommôCur
.
dwMaxVideoFømeSize
 =

284 
pVideoDemoCtx
->
ProbeMö
.
dwMaxVideoFømeSize
 =

285 
pVideoDemoCtx
->
CommôMö
.
dwMaxVideoFømeSize
 =

286 
pVideoDemoCtx
->
ProbeMax
.
dwMaxVideoFømeSize
 =

287 
pVideoDemoCtx
->
CommôMax
.
dwMaxVideoFømeSize
 =

288 
pVideoDemoCtx
->
ProbeDef
.
dwMaxVideoFømeSize
 =

289 
pVideoDemoCtx
->
CommôDef
.
dwMaxVideoFømeSize
 =

290 
PROBE_DEFAULT_dwMaxVideoFømeSize
;

291 
pVideoDemoCtx
->
ProbeCur
.
dwMaxPaylﬂdTøns„rSize
 =

292 
pVideoDemoCtx
->
CommôCur
.
dwMaxPaylﬂdTøns„rSize
 =

293 
pVideoDemoCtx
->
ProbeMö
.
dwMaxPaylﬂdTøns„rSize
 =

294 
pVideoDemoCtx
->
CommôMö
.
dwMaxPaylﬂdTøns„rSize
 =

295 
pVideoDemoCtx
->
ProbeMax
.
dwMaxPaylﬂdTøns„rSize
 =

296 
pVideoDemoCtx
->
CommôMax
.
dwMaxPaylﬂdTøns„rSize
 =

297 
pVideoDemoCtx
->
ProbeDef
.
dwMaxPaylﬂdTøns„rSize
 =

298 
pVideoDemoCtx
->
CommôDef
.
dwMaxPaylﬂdTøns„rSize
 =

299 
PROBE_DEFAULT_dwMaxPaylﬂdTøns„rSize
;

300 
pVideoDemoCtx
->
ProbeCur
.
dwClockFªquícy
 =

301 
pVideoDemoCtx
->
CommôCur
.
dwClockFªquícy
 =

302 
pVideoDemoCtx
->
ProbeMö
.
dwClockFªquícy
 =

303 
pVideoDemoCtx
->
CommôMö
.
dwClockFªquícy
 =

304 
pVideoDemoCtx
->
ProbeMax
.
dwClockFªquícy
 =

305 
pVideoDemoCtx
->
CommôMax
.
dwClockFªquícy
 =

306 
pVideoDemoCtx
->
ProbeDef
.
dwClockFªquícy
 =

307 
pVideoDemoCtx
->
CommôDef
.
dwClockFªquícy
 =

308 
PROBE_DEFAULT_dwClockFªquícy
;

309 
pVideoDemoCtx
->
ProbeCur
.
bmFømögInfo
 =

310 
pVideoDemoCtx
->
CommôCur
.
bmFømögInfo
 =

311 
pVideoDemoCtx
->
ProbeMö
.
bmFømögInfo
 =

312 
pVideoDemoCtx
->
CommôMö
.
bmFømögInfo
 =

313 
pVideoDemoCtx
->
ProbeMax
.
bmFømögInfo
 =

314 
pVideoDemoCtx
->
CommôMax
.
bmFømögInfo
 =

315 
pVideoDemoCtx
->
ProbeDef
.
bmFømögInfo
 =

316 
pVideoDemoCtx
->
CommôDef
.
bmFømögInfo
 =

317 
PROBE_DEFAULT_bmFømögInfo
;

318 
pVideoDemoCtx
->
ProbeCur
.
bPª„ªdVîsi⁄
 =

319 
pVideoDemoCtx
->
CommôCur
.
bPª„ªdVîsi⁄
 =

320 
pVideoDemoCtx
->
ProbeMö
.
bPª„ªdVîsi⁄
 =

321 
pVideoDemoCtx
->
CommôMö
.
bPª„ªdVîsi⁄
 =

322 
pVideoDemoCtx
->
ProbeMax
.
bPª„ªdVîsi⁄
 =

323 
pVideoDemoCtx
->
CommôMax
.
bPª„ªdVîsi⁄
 =

324 
pVideoDemoCtx
->
ProbeDef
.
bPª„ªdVîsi⁄
 =

325 
pVideoDemoCtx
->
CommôDef
.
bPª„ªdVîsi⁄
 =

326 
PROBE_DEFAULT_bPª„ªdVîsi⁄
;

327 
pVideoDemoCtx
->
ProbeCur
.
bMöVîsi⁄
 =

328 
pVideoDemoCtx
->
CommôCur
.
bMöVîsi⁄
 =

329 
pVideoDemoCtx
->
ProbeMö
.
bMöVîsi⁄
 =

330 
pVideoDemoCtx
->
CommôMö
.
bMöVîsi⁄
 =

331 
pVideoDemoCtx
->
ProbeMax
.
bMöVîsi⁄
 =

332 
pVideoDemoCtx
->
CommôMax
.
bMöVîsi⁄
 =

333 
pVideoDemoCtx
->
ProbeDef
.
bMöVîsi⁄
 =

334 
pVideoDemoCtx
->
CommôDef
.
bMöVîsi⁄
 =

335 
PROBE_DEFAULT_bMöVîsi⁄
;

336 
pVideoDemoCtx
->
ProbeCur
.
bMaxVîsi⁄
 =

337 
pVideoDemoCtx
->
CommôCur
.
bMaxVîsi⁄
 =

338 
pVideoDemoCtx
->
ProbeMö
.
bMaxVîsi⁄
 =

339 
pVideoDemoCtx
->
CommôMö
.
bMaxVîsi⁄
 =

340 
pVideoDemoCtx
->
ProbeMax
.
bMaxVîsi⁄
 =

341 
pVideoDemoCtx
->
CommôMax
.
bMaxVîsi⁄
 =

342 
pVideoDemoCtx
->
ProbeDef
.
bMaxVîsi⁄
 =

343 
pVideoDemoCtx
->
CommôDef
.
bMaxVîsi⁄
 =

344 
PROBE_DEFAULT_bMaxVîsi⁄
;

347 
pVideoDemoCtx
->
StûlProbeCur
.
bF‹m©Index
 =

348 
pVideoDemoCtx
->
StûlCommôCur
.
bF‹m©Index
 =

349 
STILL_PROBE_DEFAULT_bF‹m©Index
;

350 
pVideoDemoCtx
->
StûlProbeCur
.
bFømeIndex
 =

351 
pVideoDemoCtx
->
StûlCommôCur
.
bFømeIndex
 =

352 
STILL_PROBE_DEFAULT_bFømeIndex
;

353 
pVideoDemoCtx
->
StûlProbeCur
.
bCom¥essi⁄Index
 =

354 
pVideoDemoCtx
->
StûlCommôCur
.
bCom¥essi⁄Index
 =

355 
STILL_PROBE_DEFAULT_bCom¥essi⁄Index
;

356 
pVideoDemoCtx
->
StûlProbeCur
.
dwMaxVideoFømeSize
 =

357 
pVideoDemoCtx
->
StûlCommôCur
.
dwMaxVideoFømeSize
 =

358 
STILL_PROBE_DEFAULT_dwMaxVideoFømeSize
;

359 
pVideoDemoCtx
->
StûlProbeCur
.
dwMaxPaylﬂdTøns„rSize
 =

360 
pVideoDemoCtx
->
StûlCommôCur
.
dwMaxPaylﬂdTøns„rSize
 =

361 
STILL_PROBE_DEFAULT_dwMaxPayLﬂdTøns„rSize
;

363 
pVideoDemoCtx
->
bStûlTriggî
 = 
STILL_IMAGE_NORMAL_OPERATION
;

364 
pVideoDemoCtx
->
nVideoFømeIndex
 = 
START_VIDEO_FRAME_INDEX
;

367 
	`USBPUMP_CALLBACKCOMPLETION_INIT
(

368 &
pVideoDemoCtx
->
InôCom∂ëi⁄
,

369 
VideoClõ¡LibI_SåómO≥n_Sync
,

370 
NULL


373 
	`USBPUMP_CALLBACKCOMPLETION_INIT
(

374 &
pAµC⁄ãxt
->
WrôeFømeCom∂ëi⁄
,

375 
VideoDemoI_SídAnŸhîFøme
,

376 
NULL


379 
°©us
 = 
	`Le⁄IPCRxInô
(&
Ãt_LRTtoLOSCh™√l
, 
NULL
, 
IRQ_DYNAMIC_5
, 5);

380 i‡(
°©us
)

382 
	`¥ötf
("CouldÇŸ inôülizêLe⁄ IPC Rx. Eº‹: %d\n", 
°©us
);

385 
	`VideoClõ¡Lib_C⁄åﬁO≥n
(

386 
pVideoDemoCtx
->
pVideo
,

387 
VideoClõ¡LibI_C⁄åﬁO≥n_CÆlback
,

388 
pAµC⁄ãxt
,

389 
pVideoDemoCtx
,

390 &
gk_VideoDemo_OutSwôch


393  
pVideoDemoCtx
;

394 
	}
}

396 
	$VideoClõ¡LibI_C⁄åﬁO≥n_CÆlback
(* 
pCÆlbackCtx
, 
UINT32
 
Eº‹Code
)

398 
PUNCOMPRESSED_APP_CONTEXT
 
CONST
 
pAµC⁄ãxt
 = 
pCÆlbackCtx
;

399 
VIDEODEMO_CONTEXT
 * 
CONST
 
pVideoDemoCtx
 = 
pAµC⁄ãxt
->pVideoDemoCtx;

401 i‡(
Eº‹Code
 !
UPROTO_VIDEO_ERROR_OK
)

403 
	`TTUSB_OBJPRINTF
((&
pVideoDemoCtx
->
pVideo
->
Obje˘Hódî
,

404 
UDMASK_ERRORS
,

407 
gk_VideoDemo_Eº‹Name
[
Eº‹Code
]

412 
	`UsbPumpPœtf‹m_Po°IfNŸBusy
(

413 
pVideoDemoCtx
->
pPœtf‹m
,

414 &
pVideoDemoCtx
->
InôCom∂ëi⁄
,

415 
pAµC⁄ãxt


418 
	}
}

420 
	$VideoClõ¡LibI_SåómO≥n_Sync
(*
pClõ¡C⁄ãxt
)

422 
PUNCOMPRESSED_APP_CONTEXT
 
CONST
 
pAµC⁄ãxt
 = 
pClõ¡C⁄ãxt
;

423 
VIDEODEMO_CONTEXT
 * 
pVideoDemoCtx
 = 
pAµC⁄ãxt
->pVideoDemoCtx;

426 
	`VideoClõ¡Lib_SåómO≥n
(

427 
pVideoDemoCtx
->
pVideo
,

428 
VideoClõ¡LibI_SåómO≥n_CÆlback
,

429 
pAµC⁄ãxt
,

430 (
INT8
)(-1),

431 (
INT8
)(-1),

432 (
INT8
)(-1),

433 
FALSE


435 
	}
}

437 
	$VideoClõ¡LibI_SåómO≥n_CÆlback
(

438 * 
pCÆlbackCtx
,

439 
UINT32
 
Eº‹Code
,

440 
UPROTO_VIDEO_STREAM_HANDLE
 
hVideoSåóm


443 
PUNCOMPRESSED_APP_CONTEXT
 
CONST
 
pAµC⁄ãxt
 = 
pCÆlbackCtx
;

444 
VIDEODEMO_CONTEXT
 * 
pVideoDemoCtx
 = 
pAµC⁄ãxt
->pVideoDemoCtx;

446 i‡(
Eº‹Code
 !
UPROTO_VIDEO_ERROR_OK
)

448 
	`TTUSB_OBJPRINTF
((

449 &
pVideoDemoCtx
->
pVideo
->
Obje˘Hódî
,

450 
UDMASK_ERRORS
,

453 
gk_VideoDemo_Eº‹Name
[
Eº‹Code
]

458 
pVideoDemoCtx
->
hVideoOut
 = 
hVideoSåóm
;

460 
	}
}

462 
	$VideoDemo_Sèπ
(
VIDEODEMO_CONTEXT
 * 
pVideoDemoCtx
)

464 
	`VideoClõ¡Lib_SåómGëInfo
(

465 
pVideoDemoCtx
->
pVideo
,

466 
VideoClõ¡LibI_SåómGëInfo_CÆlback
,

467 
pVideoDemoCtx
->
pAµC⁄ãxt
,

468 
pVideoDemoCtx
->
hVideoOut


470 
	}
}

472 
	$VideoClõ¡LibI_SåómGëInfo_CÆlback
(

473 * 
pCÆlbackCtx
,

474 
UINT32
 
Eº‹Code
,

475 
UINT8
 
bI¡îÁ˚Numbî
,

476 
UINT8
 
bA…î«ãSëtög
,

477 
UINT8
 
bTîmöÆLök
,

478 
UINT16
 
wMaxPackëSize
,

479 
UINT16
 
wTøn•‹tHódîSize


482 (Ë
wMaxPackëSize
;

483 (Ë
wTøn•‹tHódîSize
;

485 
PUNCOMPRESSED_APP_CONTEXT
 
CONST
 
pAµC⁄ãxt
 = 
pCÆlbackCtx
;

486 
VIDEODEMO_CONTEXT
 * 
CONST
 
pVideoDemoCtx
 = 
pAµC⁄ãxt
->pVideoDemoCtx;

487 
UPROTO_VIDEO
 * 
CONST
 
pVideo
 = 
pAµC⁄ãxt
->
pVideoDemoCtx
->pVideo;

488 
BOOL
 
fResu…
;

490 
	`USBPUMP_TRACE_PARAMETER
(
pVideo
);

491 
	`USBPUMP_UNREFERENCED_PARAMETER
(
bI¡îÁ˚Numbî
);

492 
	`USBPUMP_UNREFERENCED_PARAMETER
(
bA…î«ãSëtög
);

493 
	`USBPUMP_UNREFERENCED_PARAMETER
(
bTîmöÆLök
);

495 
fResu…
 = 
TRUE
;

497 i‡(
Eº‹Code
 !
UPROTO_VIDEO_ERROR_OK
)

499 
	`TTUSB_OBJPRINTF
((

500 &
pVideo
->
Obje˘Hódî
,

501 
UDMASK_ERRORS
,

504 
gk_VideoDemo_Eº‹Name
[
Eº‹Code
]

507 
fResu…
 = 
FALSE
;

510 i‡(
fResu…
)

512 
pAµC⁄ãxt
->
HódîToggÀ
 = 0;

513 
pAµC⁄ãxt
->
wVideoByãIndex
 = 0;

514 
pAµC⁄ãxt
->
wNumbîOfByã
 = 0;

516 
	`VideoDemo_WrôeO√Føme_D⁄e
(

517 
pVideoDemoCtx
,

518 
UPROTO_VIDEO_ERROR_OK
,

519 
NULL
,

522 
UDEVICE
* 
pDevi˚
 = 
	`UsbPump_Rãms_D©aPump_GëDevi˚
();

523 i‡(
	`USBPUMP_IS_SUPER_SPEED
(
pDevi˚
->
udev_bCuºítS≥ed
))

524 
mesßge
 = 
USB_SUPER_SPEED
;

526 
mesßge
 = 
USB_HIGH_SPEED
;

528 
	`Le⁄IPCSídMesßge
(&
Ãt_LOStoLRTCh™√l
, &
mesßge
);

532 i‡(
pVideoDemoCtx
->
hVideoOut
 !=

533 
UPROTO_VIDEO_STREAM_INVALID_HANDLE
)

535 
	`VideoClõ¡Lib_SåómClo£
(

536 
pVideoDemoCtx
->
pVideo
,

537 
VideoClõ¡LibI_SåómClo£_D⁄e
,

538 
pVideoDemoCtx
,

539 
pVideoDemoCtx
->
hVideoOut


543 i‡(
pVideoDemoCtx
)

545 
	`UsbPumpPœtf‹m_Fªe
(

546 
pVideoDemoCtx
->
pPœtf‹m
,

547 
pVideoDemoCtx
,

548 (*
pVideoDemoCtx
)

552 
	}
}

554 
	$VideoClõ¡LibI_SåómClo£_D⁄e
(*
pClõ¡C⁄ãxt
, 
UINT32
 
Eº‹Code
)

556 
	`USBPUMP_UNREFERENCED_PARAMETER
(
pClõ¡C⁄ãxt
);

557 
	`USBPUMP_UNREFERENCED_PARAMETER
(
Eº‹Code
);

558 
	}
}

586 
	$VideoDemo_WrôeO√Føme
(

587 
VIDEODEMO_CONTEXT
 * 
pVideoDemoCtx
,

588 
u8
* 
pBuf„r
,

589 
u32
 
wNumbîOfByã
,

590 
u32
 
dwPTS
,

591 
u16
 
wSofCou¡î


594 
PUNCOMPRESSED_APP_CONTEXT
 
CONST
 
pAµC⁄ãxt
 = 
pVideoDemoCtx
->pAppContext;

595 
BOOL
 
fEndofFøme
 = 
TRUE
;

597 
pAµC⁄ãxt
->
wVideoByãIndex
 = 0;

598 
pAµC⁄ãxt
->
dwPTS
 = dwPTS;

599 
pAµC⁄ãxt
->
wSofCou¡î
 = wSofCounter;

600 
pAµC⁄ãxt
->
wNumbîOfByã
 = wNumberOfByte;

601 i‡(
pAµC⁄ãxt
->
HódîToggÀ
 == 0)

603 
pAµC⁄ãxt
->
HódîToggÀ
 = 1;

607 
pAµC⁄ãxt
->
HódîToggÀ
 = 0;

610 
pVideoDemoCtx
->
nWrôeBuf„rHdr
 = 1;

613 *(
pBuf„r
 + 
UNCOMPRESSED_HDR_HLE_OFFSET
Ë
PAYLOAD_HEADER_SIZE
;

615 *(
pBuf„r
 + 
UNCOMPRESSED_HDR_BFH_OFFSET
) =

616 
UNCOMPRESSED_HDR_PTS
 +

617 
UNCOMPRESSED_HDR_SCR
 +

618 
pAµC⁄ãxt
->
HódîToggÀ
;

620 *(
pBuf„r
 + 
UNCOMPRESSED_HDR_BFH_OFFSET
Ë+
UNCOMPRESSED_HDR_EOF
;

622 
	`UHIL_LE_PUTUINT32
(
pBuf„r
 + 
UNCOMPRESSED_HDR_PTS_OFFSET
, 
pAµC⁄ãxt
->
dwPTS
);

623 
	`UHIL_LE_PUTUINT32
(
pBuf„r
 + 
UNCOMPRESSED_HDR_SCR_STC_OFFSET
, 
pAµC⁄ãxt
->
dwPTS
);

624 
	`UHIL_LE_PUTUINT16
(
pBuf„r
 + 
UNCOMPRESSED_HDR_SCR_SOF_OFFSET
, 
pAµC⁄ãxt
->
wSofCou¡î
);

626 
	`VideoClõ¡Lib_SåómWrôe
(

627 
pVideoDemoCtx
->
pVideo
,

628 
VideoDemo_WrôeO√Føme_D⁄e
,

629 
pVideoDemoCtx
,

630 
pVideoDemoCtx
->
hVideoOut
,

631 
pBuf„r
,

632 
wNumbîOfByã
,

633 
fEndofFøme


635 
	}
}

660 
	$VideoDemo_WrôeO√Føme_D⁄e
(

661 *
pC⁄ãxt
,

662 
UINT32
 
Eº‹Code
,

663 
UINT8
 *
pD©a
,

664 
BYTES
 
nD©a


667 
VIDEODEMO_CONTEXT
 * 
CONST
 
pVideoDemoCtx
 = 
pC⁄ãxt
;

668 
PUNCOMPRESSED_APP_CONTEXT
 
CONST
 
pAµC⁄ãxt
 = 
pVideoDemoCtx
->pAppContext;

670 
	`USBPUMP_UNREFERENCED_PARAMETER
(
nD©a
);

671 
	`USBPUMP_UNREFERENCED_PARAMETER
(
pD©a
);

673 i‡(
Eº‹Code
 !
UPROTO_VIDEO_ERROR_OK
)

675 
	`TTUSB_OBJPRINTF
((&
pVideoDemoCtx
->
pVideo
->
Obje˘Hódî
,

676 
UDMASK_ERRORS
,

679 
gk_VideoDemo_Eº‹Name
[
Eº‹Code
]

684 i‡(
pVideoDemoCtx
->
fOuçutA˘iv©e
)

686 
	`UsbPumpPœtf‹m_Po°IfNŸBusy
(

687 
pVideoDemoCtx
->
pPœtf‹m
,

688 &
pAµC⁄ãxt
->
WrôeFømeCom∂ëi⁄
,

689 
pAµC⁄ãxt


692 
	}
}

694 
	$VideoDemoI_SídAnŸhîFøme
(*
pClõ¡C⁄ãxt
)

696 
u32
 
msg
;

697 
PUNCOMPRESSED_APP_CONTEXT
 
CONST
 
pAµC⁄ãxt
 = 
pClõ¡C⁄ãxt
;

698 
VIDEODEMO_CONTEXT
 * 
CONST
 
pVideoDemoCtx
 = 
pAµC⁄ãxt
->pVideoDemoCtx;

700 
	`UsbPumpPœtf‹m_M¨kCom∂ëi⁄NŸBusy
(

701 
pVideoDemoCtx
->
pPœtf‹m
,

702 &
pAµC⁄ãxt
->
WrôeFømeCom∂ëi⁄


705 
pAµC⁄ãxt
->
dwPTS
 += 1;

706 
pAµC⁄ãxt
->
wSofCou¡î
 += 1;

710 
	`Le⁄IPCWaôMesßge
(&
Ãt_LRTtoLOSCh™√l
, 
IPC_WAIT_FOREVER
);

711 
	`Le⁄IPCRódMesßge
(&
Ãt_LRTtoLOSCh™√l
, &
msg
);

712 
	`VideoDemo_WrôeO√Føme
(

713 
pVideoDemoCtx
,

714 
Ãt_usbBufPå
[
Ãt_usbFømeCå
 % 
MAX_USED_BUF
] + 
PAYLOAD_HEADER_OFFSET
 - 
PAYLOAD_HEADER_SIZE
,

715 
CAM_FRAME_SIZE_BYTES
 + 
PAYLOAD_HEADER_SIZE
,

716 
pAµC⁄ãxt
->
dwPTS
,

717 
pAµC⁄ãxt
->
wSofCou¡î


719 
pVideoDemoCtx
->
nVideoFømeIndex
 = 1;

720 
	}
}

	@Demo/UsbVideo208/leon/videodemo_outswitch.c

11 
	~"videodemo.h
"

13 
	~"¥Ÿovideo.h
"

14 
	~"video˛õ¡lib.h
"

15 
	~"usbpumpdebug.h
"

16 
	~"usbvideo11.h
"

17 
	~"u∂©f‹m≠i.h
"

18 
	~"usbpum∂ib.h
"

20 
CALLBACKFN
 
	gVideoDemoI_Pro˚ssögUnôEvít_Sync
;

21 
UPROTO_VIDEO_CONTROL_REQUEST_REPLY_CB_FN
 
	gVideoDemoI_C⁄åﬁReque°_D⁄e
;

23 
CALLBACKFN
 
	gVideoDemoI_SåómI¡îÁ˚Evít_Sync
;

24 
UPROTO_VIDEO_STREAM_REQUEST_REPLY_CB_FN
 
	gVideoDemoI_SåómReque°_D⁄e
;

28 
CONST
 
UPROTO_VIDEO_OUTSWITCH
 
	ggk_VideoDemo_OutSwôch
 =

29 
UPROTO_VIDEO_OUTSWITCH_INIT_V1
( \

30 
VideoDemo_C⁄åﬁSètusEvít
, \

31 
VideoDemo_Pro˚ssögUnôEvít
, \

32 
VideoDemo_SåómSètusEvít
, \

33 
VideoDemo_SåómI¡îÁ˚Evít
 \

55 
	$VideoDemo_C⁄åﬁSètusEvít
(*
pClõ¡C⁄ãxt
, 
UPROTO_VIDEO_STATUS
 
VideoSètusCode
)

57 
VIDEODEMO_CONTEXT
 * 
CONST
 
pVideoDemoCtx
 = 
pClõ¡C⁄ãxt
;

58 
UPROTO_VIDEO
 * 
CONST
 
pVideo
 = 
pVideoDemoCtx
->pVideo;

60 
	`USBPUMP_TRACE_PARAMETER
(
pVideo
);

61 
	`USBPUMP_TRACE_PARAMETER
(
VideoSètusCode
);

63 
	`TTUSB_OBJPRINTF
((&
pVideo
->
Obje˘Hódî
, 
UDMASK_PROTO
,

65 
gk_VideoDemo_SètusName
[
VideoSètusCode
] ));

66 
	}
}

87 
	$VideoDemo_Pro˚ssögUnôEvít
(*
pClõ¡C⁄ãxt
, 
UPROTO_VIDEO_CONTROL_REQUEST
 *
pReque°
)

89 
VIDEODEMO_CONTEXT
 * 
CONST
 
pVideoDemoCtx
 = 
pClõ¡C⁄ãxt
;

91 
	`UHIL_˝ybuf
(&
pVideoDemoCtx
->
C⁄åﬁReque°
, 
pReque°
, (*pRequest));

93 
	`USBPUMP_CALLBACKCOMPLETION_INIT
(

94 &
pVideoDemoCtx
->
SëupCom∂ëi⁄
,

95 
VideoDemoI_Pro˚ssögUnôEvít_Sync
,

96 
NULL
 );

98 
	`UsbPumpPœtf‹m_Po°IfNŸBusy
(

99 
pVideoDemoCtx
->
pPœtf‹m
,

100 &
pVideoDemoCtx
->
SëupCom∂ëi⁄
,

101 
pVideoDemoCtx
 );

102 
	}
}

104 
	$VideoDemoI_Pro˚ssögUnôEvít_Sync
(*
pClõ¡C⁄ãxt
)

106 
VIDEODEMO_CONTEXT
 * 
CONST
 
pVideoDemoCtx
 = 
pClõ¡C⁄ãxt
;

107 
UPROTO_VIDEO_CONTROL_REQUEST
 * 
pReque°
 = &
pVideoDemoCtx
->
C⁄åﬁReque°
;

109 
	`UsbPumpPœtf‹m_M¨kCom∂ëi⁄NŸBusy
(
pVideoDemoCtx
->
pPœtf‹m
,

110 &
pVideoDemoCtx
->
SëupCom∂ëi⁄
);

112 
pReque°
->
Hdr
.
bAc˚±Reque°
 = 
TRUE
;

113 
pReque°
->
Hdr
.
bC⁄åﬁSñe˘‹
)

115 
USBVIDEO_bC⁄åﬁSñe˘‹_PU_BACKLIGHT_COMPENSATION_CONTROL
:

116 
pReque°
->
Hdr
.
bReque°
)

118 
USB_bReque°_Video_GET_INFO
:

119 
pReque°
->
Backlight
.
wBacklightCom≥nßti⁄
 =

120 
PU_BACKLIGHT_COMPENSATION_CONTROL_INFO
;

122 
USB_bReque°_Video_GET_MIN
:

123 
pReque°
->
Backlight
.
wBacklightCom≥nßti⁄
 =

124 
PU_BACKLIGHT_COMPENSATION_CONTROL_MIN
;

126 
USB_bReque°_Video_GET_MAX
:

127 
pReque°
->
Backlight
.
wBacklightCom≥nßti⁄
 =

128 
PU_BACKLIGHT_COMPENSATION_CONTROL_MAX
;

130 
USB_bReque°_Video_GET_RES
:

131 
pReque°
->
Backlight
.
wBacklightCom≥nßti⁄
 =

132 
PU_BACKLIGHT_COMPENSATION_CONTROL_RES
;

134 
USB_bReque°_Video_GET_DEF
:

135 
pReque°
->
Backlight
.
wBacklightCom≥nßti⁄
 =

136 
PU_BACKLIGHT_COMPENSATION_CONTROL_DEF
;

138 
USB_bReque°_Video_GET_CUR
:

139 
pReque°
->
Backlight
.
wBacklightCom≥nßti⁄
 =

140 
pVideoDemoCtx
->
ProcUnôCur
.
wBackLightCom≥nßti⁄
;

142 
USB_bReque°_Video_SET_CUR
:

144 
pVideoDemoCtx
->
ProcUnôCur
.
wBackLightCom≥nßti⁄
 =

145 
pReque°
->
Backlight
.
wBacklightCom≥nßti⁄
;

148 
pReque°
->
Hdr
.
bAc˚±Reque°
 = 
FALSE
;

153 
USBVIDEO_bC⁄åﬁSñe˘‹_PU_BRIGHTNESS_CONTROL
:

154 
pReque°
->
Hdr
.
bReque°
)

156 
USB_bReque°_Video_GET_INFO
:

157 
pReque°
->
Brighäess
.
wBrighäess
 = 
PU_BRIGHTNESS_CONTROL_INFO
;

159 
USB_bReque°_Video_GET_MIN
:

160 
pReque°
->
Brighäess
.
wBrighäess
 = 
PU_BRIGHTNESS_CONTROL_MIN
;

162 
USB_bReque°_Video_GET_MAX
:

163 
pReque°
->
Brighäess
.
wBrighäess
 = 
PU_BRIGHTNESS_CONTROL_MAX
;

165 
USB_bReque°_Video_GET_RES
:

166 
pReque°
->
Brighäess
.
wBrighäess
 = 
PU_BRIGHTNESS_CONTROL_RES
;

168 
USB_bReque°_Video_GET_DEF
:

169 
pReque°
->
Brighäess
.
wBrighäess
 = 
PU_BRIGHTNESS_CONTROL_DEF
;

171 
USB_bReque°_Video_GET_CUR
:

172 
pReque°
->
Brighäess
.
wBrighäess
 =

173 
pVideoDemoCtx
->
ProcUnôCur
.
wBrighäess
;

175 
USB_bReque°_Video_SET_CUR
:

177 
pVideoDemoCtx
->
ProcUnôCur
.
wBrighäess
 =

178 
pReque°
->
Brighäess
.
wBrighäess
;

181 
pReque°
->
Hdr
.
bAc˚±Reque°
 = 
FALSE
;

186 
USBVIDEO_bC⁄åﬁSñe˘‹_PU_CONTRAST_CONTROL
:

187 
pReque°
->
Hdr
.
bReque°
)

189 
USB_bReque°_Video_GET_INFO
:

190 
pReque°
->
C⁄åa°
.
wC⁄åa°
 = 
PU_CONTRAST_CONTROL_INFO
;

192 
USB_bReque°_Video_GET_MIN
:

193 
pReque°
->
C⁄åa°
.
wC⁄åa°
 = 
PU_CONTRAST_CONTROL_MIN
;

195 
USB_bReque°_Video_GET_MAX
:

196 
pReque°
->
C⁄åa°
.
wC⁄åa°
 = 
PU_CONTRAST_CONTROL_MAX
;

198 
USB_bReque°_Video_GET_RES
:

199 
pReque°
->
C⁄åa°
.
wC⁄åa°
 = 
PU_CONTRAST_CONTROL_RES
;

201 
USB_bReque°_Video_GET_DEF
:

202 
pReque°
->
C⁄åa°
.
wC⁄åa°
 = 
PU_CONTRAST_CONTROL_DEF
;

204 
USB_bReque°_Video_GET_CUR
:

205 
pReque°
->
C⁄åa°
.
wC⁄åa°
 = 
pVideoDemoCtx
->
ProcUnôCur
.wContrast;

207 
USB_bReque°_Video_SET_CUR
:

209 
pVideoDemoCtx
->
ProcUnôCur
.
wC⁄åa°
 = 
pReque°
->
C⁄åa°
.wContrast;

212 
pReque°
->
Hdr
.
bAc˚±Reque°
 = 
FALSE
;

217 
USBVIDEO_bC⁄åﬁSñe˘‹_PU_POWER_LINE_FREQUENCY_CONTROL
:

218 
pReque°
->
Hdr
.
bReque°
)

220 
USB_bReque°_Video_GET_INFO
:

221 
pReque°
->
PowîLöe
.
bPowîLöeFªquícy
 =

222 
PU_POWER_LINE_FREQUENCY_CONTROL_INFO
;

224 
USB_bReque°_Video_GET_MIN
:

225 
pReque°
->
PowîLöe
.
bPowîLöeFªquícy
 =

226 
PU_POWER_LINE_FREQUENCY_CONTROL_MIN
;

228 
USB_bReque°_Video_GET_MAX
:

229 
pReque°
->
PowîLöe
.
bPowîLöeFªquícy
 =

230 
PU_POWER_LINE_FREQUENCY_CONTROL_MAX
;

232 
USB_bReque°_Video_GET_RES
:

233 
pReque°
->
PowîLöe
.
bPowîLöeFªquícy
 =

234 
PU_POWER_LINE_FREQUENCY_CONTROL_RES
;

236 
USB_bReque°_Video_GET_DEF
:

237 
pReque°
->
PowîLöe
.
bPowîLöeFªquícy
 =

238 
PU_POWER_LINE_FREQUENCY_CONTROL_DEF
;

240 
USB_bReque°_Video_GET_CUR
:

241 
pReque°
->
PowîLöe
.
bPowîLöeFªquícy
 =

242 
pVideoDemoCtx
->
ProcUnôCur
.
bPowîLöeFªquícy
;

244 
USB_bReque°_Video_SET_CUR
:

246 
pVideoDemoCtx
->
ProcUnôCur
.
bPowîLöeFªquícy
 =

247 
pReque°
->
PowîLöe
.
bPowîLöeFªquícy
;

250 
pReque°
->
Hdr
.
bAc˚±Reque°
 = 
FALSE
;

255 
USBVIDEO_bC⁄åﬁSñe˘‹_PU_HUE_CONTROL
:

256 
pReque°
->
Hdr
.
bReque°
)

258 
USB_bReque°_Video_GET_INFO
:

259 
pReque°
->
Hue
.
wHue
 = 
PU_HUE_CONTROL_INFO
;

261 
USB_bReque°_Video_GET_MIN
:

262 
pReque°
->
Hue
.
wHue
 = 
PU_HUE_CONTROL_MIN
;

264 
USB_bReque°_Video_GET_MAX
:

265 
pReque°
->
Hue
.
wHue
 = 
PU_HUE_CONTROL_MAX
;

267 
USB_bReque°_Video_GET_RES
:

268 
pReque°
->
Hue
.
wHue
 = 
PU_HUE_CONTROL_RES
;

270 
USB_bReque°_Video_GET_DEF
:

271 
pReque°
->
Hue
.
wHue
 = 
PU_HUE_CONTROL_DEF
;

273 
USB_bReque°_Video_GET_CUR
:

274 
pReque°
->
Hue
.
wHue
 = 
pVideoDemoCtx
->
ProcUnôCur
.wHue;

276 
USB_bReque°_Video_SET_CUR
:

278 
pVideoDemoCtx
->
ProcUnôCur
.
wHue
 = 
pReque°
->
Hue
.wHue;

281 
pReque°
->
Hdr
.
bAc˚±Reque°
 = 
FALSE
;

286 
USBVIDEO_bC⁄åﬁSñe˘‹_PU_SATURATION_CONTROL
:

287 
pReque°
->
Hdr
.
bReque°
)

289 
USB_bReque°_Video_GET_INFO
:

290 
pReque°
->
S©uøti⁄
.
wS©uøti⁄
 = 
PU_SATURATION_CONTROL_INFO
;

292 
USB_bReque°_Video_GET_MIN
:

293 
pReque°
->
S©uøti⁄
.
wS©uøti⁄
 = 
PU_SATURATION_CONTROL_MIN
;

295 
USB_bReque°_Video_GET_MAX
:

296 
pReque°
->
S©uøti⁄
.
wS©uøti⁄
 = 
PU_SATURATION_CONTROL_MAX
;

298 
USB_bReque°_Video_GET_RES
:

299 
pReque°
->
S©uøti⁄
.
wS©uøti⁄
 = 
PU_SATURATION_CONTROL_RES
;

301 
USB_bReque°_Video_GET_DEF
:

302 
pReque°
->
S©uøti⁄
.
wS©uøti⁄
 = 
PU_SATURATION_CONTROL_DEF
;

304 
USB_bReque°_Video_GET_CUR
:

305 
pReque°
->
S©uøti⁄
.
wS©uøti⁄
 =

306 
pVideoDemoCtx
->
ProcUnôCur
.
wS©uøti⁄
;

308 
USB_bReque°_Video_SET_CUR
:

310 
pVideoDemoCtx
->
ProcUnôCur
.
wS©uøti⁄
 =

311 
pReque°
->
S©uøti⁄
.
wS©uøti⁄
;

314 
pReque°
->
Hdr
.
bAc˚±Reque°
 = 
FALSE
;

319 
USBVIDEO_bC⁄åﬁSñe˘‹_PU_SHARPNESS_CONTROL
:

320 
pReque°
->
Hdr
.
bReque°
)

322 
USB_bReque°_Video_GET_INFO
:

323 
pReque°
->
Sh¨≤ess
.
wSh¨≤ess
 = 
PU_SHARPNESS_CONTROL_INFO
;

325 
USB_bReque°_Video_GET_MIN
:

326 
pReque°
->
Sh¨≤ess
.
wSh¨≤ess
 = 
PU_SHARPNESS_CONTROL_MIN
;

328 
USB_bReque°_Video_GET_MAX
:

329 
pReque°
->
Sh¨≤ess
.
wSh¨≤ess
 = 
PU_SHARPNESS_CONTROL_MAX
;

331 
USB_bReque°_Video_GET_RES
:

332 
pReque°
->
Sh¨≤ess
.
wSh¨≤ess
 = 
PU_SHARPNESS_CONTROL_RES
;

334 
USB_bReque°_Video_GET_DEF
:

335 
pReque°
->
Sh¨≤ess
.
wSh¨≤ess
 = 
PU_SHARPNESS_CONTROL_DEF
;

337 
USB_bReque°_Video_GET_CUR
:

338 
pReque°
->
Sh¨≤ess
.
wSh¨≤ess
 =

339 
pVideoDemoCtx
->
ProcUnôCur
.
wSh¨≤ess
;

341 
USB_bReque°_Video_SET_CUR
:

343 
pVideoDemoCtx
->
ProcUnôCur
.
wSh¨≤ess
 =

344 
pReque°
->
Sh¨≤ess
.
wSh¨≤ess
;

347 
pReque°
->
Hdr
.
bAc˚±Reque°
 = 
FALSE
;

352 
USBVIDEO_bC⁄åﬁSñe˘‹_PU_GAMMA_CONTROL
:

353 
pReque°
->
Hdr
.
bReque°
)

355 
USB_bReque°_Video_GET_INFO
:

356 
pReque°
->
Gamma
.
wGamma
 = 
PU_GAMMA_CONTROL_INFO
;

358 
USB_bReque°_Video_GET_MIN
:

359 
pReque°
->
Gamma
.
wGamma
 = 
PU_GAMMA_CONTROL_MIN
;

361 
USB_bReque°_Video_GET_MAX
:

362 
pReque°
->
Gamma
.
wGamma
 = 
PU_GAMMA_CONTROL_MAX
;

364 
USB_bReque°_Video_GET_RES
:

365 
pReque°
->
Gamma
.
wGamma
 = 
PU_GAMMA_CONTROL_RES
;

367 
USB_bReque°_Video_GET_DEF
:

368 
pReque°
->
Gamma
.
wGamma
 = 
PU_GAMMA_CONTROL_DEF
;

370 
USB_bReque°_Video_GET_CUR
:

371 
pReque°
->
Gamma
.
wGamma
 = 
pVideoDemoCtx
->
ProcUnôCur
.wGamma;

373 
USB_bReque°_Video_SET_CUR
:

375 
pVideoDemoCtx
->
ProcUnôCur
.
wGamma
 = 
pReque°
->
Gamma
.wGamma;

378 
pReque°
->
Hdr
.
bAc˚±Reque°
 = 
FALSE
;

383 
USBVIDEO_bC⁄åﬁSñe˘‹_PU_WHITE_BALANCE_TEMPERATURE_CONTROL
:

384 
pReque°
->
Hdr
.
bReque°
)

386 
USB_bReque°_Video_GET_INFO
:

387 
pReque°
->
WhôeTemp
.
wWhôeBÆ™˚Tem≥øtuª
 =

388 
PU_WHITE_BALANCE_TEMPERATURE_CONTROL_INFO
;

390 
USB_bReque°_Video_GET_MIN
:

391 
pReque°
->
WhôeTemp
.
wWhôeBÆ™˚Tem≥øtuª
 =

392 
PU_WHITE_BALANCE_TEMPERATURE_CONTROL_MIN
;

394 
USB_bReque°_Video_GET_MAX
:

395 
pReque°
->
WhôeTemp
.
wWhôeBÆ™˚Tem≥øtuª
 =

396 
PU_WHITE_BALANCE_TEMPERATURE_CONTROL_MAX
;

398 
USB_bReque°_Video_GET_RES
:

399 
pReque°
->
WhôeTemp
.
wWhôeBÆ™˚Tem≥øtuª
 =

400 
PU_WHITE_BALANCE_TEMPERATURE_CONTROL_RES
;

402 
USB_bReque°_Video_GET_DEF
:

403 
pReque°
->
WhôeTemp
.
wWhôeBÆ™˚Tem≥øtuª
 =

404 
PU_WHITE_BALANCE_TEMPERATURE_CONTROL_DEF
;

406 
USB_bReque°_Video_GET_CUR
:

407 
pReque°
->
WhôeTemp
.
wWhôeBÆ™˚Tem≥øtuª
 =

408 
pVideoDemoCtx
->
ProcUnôCur
.
wWhôeBÆ™˚Tem≥øtuª
;

410 
USB_bReque°_Video_SET_CUR
:

412 
pVideoDemoCtx
->
ProcUnôCur
.
wWhôeBÆ™˚Tem≥øtuª
 =

413 
pReque°
->
WhôeTemp
.
wWhôeBÆ™˚Tem≥øtuª
;

416 
pReque°
->
Hdr
.
bAc˚±Reque°
 = 
FALSE
;

421 
USBVIDEO_bC⁄åﬁSñe˘‹_PU_HUE_AUTO_CONTROL
:

422 
pReque°
->
Hdr
.
bReque°
)

424 
USB_bReque°_Video_GET_INFO
:

425 
pReque°
->
HueAuto
.
bHueAuto
 =

426 
PU_HUE_AUTO_CONTROL_INFO
;

428 
USB_bReque°_Video_GET_MIN
:

429 
pReque°
->
HueAuto
.
bHueAuto
 =

430 
PU_HUE_AUTO_CONTROL_MIN
;

432 
USB_bReque°_Video_GET_MAX
:

433 
pReque°
->
HueAuto
.
bHueAuto
 =

434 
PU_HUE_AUTO_CONTROL_MAX
;

436 
USB_bReque°_Video_GET_RES
:

437 
pReque°
->
HueAuto
.
bHueAuto
 =

438 
PU_HUE_AUTO_CONTROL_RES
;

440 
USB_bReque°_Video_GET_DEF
:

441 
pReque°
->
HueAuto
.
bHueAuto
 =

442 
PU_HUE_AUTO_CONTROL_DEF
;

444 
USB_bReque°_Video_GET_CUR
:

445 
pReque°
->
HueAuto
.
bHueAuto
 =

446 
pVideoDemoCtx
->
ProcUnôCur
.
bHueAuto
;

448 
USB_bReque°_Video_SET_CUR
:

450 
pVideoDemoCtx
->
ProcUnôCur
.
bHueAuto
 =

451 
pReque°
->
HueAuto
.
bHueAuto
;

454 
pReque°
->
Hdr
.
bAc˚±Reque°
 = 
FALSE
;

459 
USBVIDEO_bC⁄åﬁSñe˘‹_PU_WHITE_BALANCE_TEMPERATURE_AUTO_CONTROL
:

460 
pReque°
->
Hdr
.
bReque°
)

462 
USB_bReque°_Video_GET_INFO
:

463 
pReque°
->
WhôeTempAuto
.
bWhôeBÆ™˚Tem≥øtuªAuto
 =

464 
PU_WHITE_BALANCE_TEMPERATURE_AUTO_CONTROL_INFO
;

466 
USB_bReque°_Video_GET_MIN
:

467 
pReque°
->
WhôeTempAuto
.
bWhôeBÆ™˚Tem≥øtuªAuto
 =

468 
PU_WHITE_BALANCE_TEMPERATURE_AUTO_CONTROL_MIN
;

470 
USB_bReque°_Video_GET_MAX
:

471 
pReque°
->
WhôeTempAuto
.
bWhôeBÆ™˚Tem≥øtuªAuto
 =

472 
PU_WHITE_BALANCE_TEMPERATURE_AUTO_CONTROL_MAX
;

474 
USB_bReque°_Video_GET_RES
:

475 
pReque°
->
WhôeTempAuto
.
bWhôeBÆ™˚Tem≥øtuªAuto
 =

476 
PU_WHITE_BALANCE_TEMPERATURE_AUTO_CONTROL_RES
;

478 
USB_bReque°_Video_GET_DEF
:

479 
pReque°
->
WhôeTempAuto
.
bWhôeBÆ™˚Tem≥øtuªAuto
 =

480 
PU_WHITE_BALANCE_TEMPERATURE_AUTO_CONTROL_DEF
;

482 
USB_bReque°_Video_GET_CUR
:

483 
pReque°
->
WhôeTempAuto
.
bWhôeBÆ™˚Tem≥øtuªAuto
 =

484 
pVideoDemoCtx
->
ProcUnôCur
.
bWhôeBÆ™˚Tem≥øtuªAuto
;

486 
USB_bReque°_Video_SET_CUR
:

488 
pVideoDemoCtx
->
ProcUnôCur
.
bWhôeBÆ™˚Tem≥øtuªAuto
 =

489 
pReque°
->
WhôeTempAuto
.
bWhôeBÆ™˚Tem≥øtuªAuto
;

492 
pReque°
->
Hdr
.
bAc˚±Reque°
 = 
FALSE
;

499 
	`VideoClõ¡Lib_C⁄åﬁReque°Rïly
(

500 
pVideoDemoCtx
->
pVideo
,

501 
VideoDemoI_C⁄åﬁReque°_D⁄e
,

502 
pVideoDemoCtx
,

503 
pReque°
 );

504 
	}
}

506 
	$VideoDemoI_C⁄åﬁReque°_D⁄e
(*
pClõ¡C⁄ãxt
, 
UINT32
 
Eº‹Code
)

508 
	`USBPUMP_UNREFERENCED_PARAMETER
(
pClõ¡C⁄ãxt
);

509 
	`USBPUMP_UNREFERENCED_PARAMETER
(
Eº‹Code
);

510 
	}
}

531 
	$VideoDemo_SåómSètusEvít
(

532 *
pClõ¡C⁄ãxt
,

533 
UPROTO_VIDEO_STREAM_HANDLE
 
hVideoSåóm
,

534 
BOOL
 
fA˘iv©e


537 
VIDEODEMO_CONTEXT
 * 
CONST
 
pVideoDemoCtx
 = 
pClõ¡C⁄ãxt
;

538 
UPROTO_VIDEO
 * 
CONST
 
pVideo
 = 
pVideoDemoCtx
->pVideo;

540 
	`USBPUMP_TRACE_PARAMETER
(
pVideo
);

542 i‡(
hVideoSåóm
 =
pVideoDemoCtx
->
hVideoIn
)

544 
pVideoDemoCtx
->
fI≈utA˘iv©e
 = 
fA˘iv©e
;

546 
	`TTUSB_OBJPRINTF
((&
pVideo
->
Obje˘Hódî
, 
UDMASK_PROTO
,

548 
fA˘iv©e
 ? "ACTIVATE" : "DEACTIVATE" ));

551 i‡(
hVideoSåóm
 =
pVideoDemoCtx
->
hVideoOut
)

553 
pVideoDemoCtx
->
fOuçutA˘iv©e
 = 
fA˘iv©e
;

555 
	`TTUSB_OBJPRINTF
((&
pVideo
->
Obje˘Hódî
, 
UDMASK_PROTO
,

557 
fA˘iv©e
 ? "ACTIVATE" : "DEACTIVATE" ));

560 i‡(
fA˘iv©e
)

562 
	`VideoDemo_Sèπ
(
pVideoDemoCtx
);

565 
	}
}

588 
	$VideoDemo_SåómI¡îÁ˚Evít
(

589 *
pClõ¡C⁄ãxt
,

590 
UPROTO_VIDEO_STREAM_HANDLE
 
hVideoSåóm
,

591 
UPROTO_VIDEO_STREAM_REQUEST
 * 
pReque°
 )

593 
VIDEODEMO_CONTEXT
 * 
CONST
 
pVideoDemoCtx
 = 
pClõ¡C⁄ãxt
;

595 
pVideoDemoCtx
->
hSåómReque°
 = 
hVideoSåóm
;

596 
	`UHIL_˝ybuf
(&
pVideoDemoCtx
->
SåómReque°
, 
pReque°
, (*pRequest));

598 
	`USBPUMP_CALLBACKCOMPLETION_INIT
(

599 &
pVideoDemoCtx
->
SëupCom∂ëi⁄
,

600 
VideoDemoI_SåómI¡îÁ˚Evít_Sync
,

601 
NULL
 );

603 
	`UsbPumpPœtf‹m_Po°IfNŸBusy
(

604 
pVideoDemoCtx
->
pPœtf‹m
,

605 &
pVideoDemoCtx
->
SëupCom∂ëi⁄
,

606 
pVideoDemoCtx
 );

607 
	}
}

609 
	$VideoDemoI_SåómI¡îÁ˚Evít_Sync
(*
pClõ¡C⁄ãxt
)

611 
VIDEODEMO_CONTEXT
 * 
CONST
 
pVideoDemoCtx
 = 
pClõ¡C⁄ãxt
;

612 
UPROTO_VIDEO_STREAM_REQUEST
 * 
pReque°
 = &
pVideoDemoCtx
->
SåómReque°
;

614 
	`UsbPumpPœtf‹m_M¨kCom∂ëi⁄NŸBusy
(
pVideoDemoCtx
->
pPœtf‹m
,

615 &
pVideoDemoCtx
->
SëupCom∂ëi⁄
);

617 
pReque°
->
Hdr
.
bAc˚±Reque°
 = 
TRUE
;

618 
pReque°
->
Hdr
.
bC⁄åﬁSñe˘‹
)

620 
USBVIDEO_bC⁄åﬁSñe˘‹_VS_PROBE_CONTROL
:

621 
pReque°
->
Hdr
.
bReque°
)

623 
USB_bReque°_Video_GET_CUR
:

624 
pReque°
->
Video
.
bmHöt
 = 
pVideoDemoCtx
->
ProbeCur
.bmHint;

625 
pReque°
->
Video
.
bF‹m©Index
 = 
pVideoDemoCtx
->
ProbeCur
.bFormatIndex;

626 
pReque°
->
Video
.
bFømeIndex
 = 
pVideoDemoCtx
->
ProbeCur
.bFrameIndex;

627 
pReque°
->
Video
.
dwFømeI¡îvÆ
 =

628 
pVideoDemoCtx
->
ProbeCur
.
dwFømeI¡îvÆ
;

629 
pReque°
->
Video
.
wKeyFømeR©e
 =

630 
pVideoDemoCtx
->
ProbeCur
.
wKeyFømeR©e
;

631 
pReque°
->
Video
.
wPFømeR©e
 = 
pVideoDemoCtx
->
ProbeCur
.wPFrameRate;

632 
pReque°
->
Video
.
wCompQuÆôy
 = 
pVideoDemoCtx
->
ProbeCur
.wCompQuality;

633 
pReque°
->
Video
.
wCompWödowSize
 =

634 
pVideoDemoCtx
->
ProbeCur
.
wCompWödowSize
;

635 
pReque°
->
Video
.
wDñay
 = 
pVideoDemoCtx
->
ProbeCur
.wDelay;

636 
pReque°
->
Video
.
dwMaxVideoFømeSize
 =

637 
pVideoDemoCtx
->
ProbeCur
.
dwMaxVideoFømeSize
;

638 
pReque°
->
Video
.
dwMaxPaylﬂdTøns„rSize
 =

639 
pVideoDemoCtx
->
ProbeCur
.
dwMaxPaylﬂdTøns„rSize
;

640 
pReque°
->
Video
.
dwClockFªquícy
 =

641 
pVideoDemoCtx
->
ProbeCur
.
dwClockFªquícy
;

642 
pReque°
->
Video
.
bmFømögInfo
 =

643 
pVideoDemoCtx
->
ProbeCur
.
bmFømögInfo
;

644 
pReque°
->
Video
.
bPª„ªdVîsi⁄
 =

645 
pVideoDemoCtx
->
ProbeCur
.
bPª„ªdVîsi⁄
;

646 
pReque°
->
Video
.
bMöVîsi⁄
 = 
pVideoDemoCtx
->
ProbeCur
.bMinVersion;

647 
pReque°
->
Video
.
bMaxVîsi⁄
 = 
pVideoDemoCtx
->
ProbeCur
.bMaxVersion;

649 
USB_bReque°_Video_SET_CUR
:

652 i‡(
pReque°
->
Video
.
bmHöt
 != 0)

653 
pVideoDemoCtx
->
ProbeCur
.
bmHöt
 = 
pReque°
->
Video
.bmHint;

654 i‡(
pReque°
->
Video
.
bF‹m©Index
 != 0)

655 
pVideoDemoCtx
->
ProbeCur
.
bF‹m©Index
 =

656 
pReque°
->
Video
.
bF‹m©Index
;

657 i‡(
pReque°
->
Video
.
bFømeIndex
 != 0)

658 
pVideoDemoCtx
->
ProbeCur
.
bFømeIndex
 =

659 
pReque°
->
Video
.
bFømeIndex
;

660 i‡(
pReque°
->
Video
.
dwFømeI¡îvÆ
 != 0)

661 
pVideoDemoCtx
->
ProbeCur
.
dwFømeI¡îvÆ
 =

662 
pReque°
->
Video
.
dwFømeI¡îvÆ
;

663 i‡(
pReque°
->
Video
.
wKeyFømeR©e
 != 0)

664 
pVideoDemoCtx
->
ProbeCur
.
wKeyFømeR©e
 =

665 
pReque°
->
Video
.
wKeyFømeR©e
;

666 i‡(
pReque°
->
Video
.
wPFømeR©e
 != 0)

667 
pVideoDemoCtx
->
ProbeCur
.
wPFømeR©e
 =

668 
pReque°
->
Video
.
wPFømeR©e
;

669 i‡(
pReque°
->
Video
.
wCompQuÆôy
 != 0)

670 
pVideoDemoCtx
->
ProbeCur
.
wCompQuÆôy
 =

671 
pReque°
->
Video
.
wCompQuÆôy
;

672 i‡(
pReque°
->
Video
.
wCompWödowSize
 != 0)

673 
pVideoDemoCtx
->
ProbeCur
.
wCompWödowSize
 =

674 
pReque°
->
Video
.
wCompWödowSize
;

675 i‡(
pReque°
->
Video
.
wDñay
 != 0)

676 
pVideoDemoCtx
->
ProbeCur
.
wDñay
 = 
pReque°
->
Video
.wDelay;

677 i‡(
pReque°
->
Video
.
dwMaxVideoFømeSize
 != 0)

678 
pVideoDemoCtx
->
ProbeCur
.
dwMaxVideoFømeSize
 =

679 
pReque°
->
Video
.
dwMaxVideoFømeSize
;

680 i‡(
pReque°
->
Video
.
dwMaxPaylﬂdTøns„rSize
 != 0)

681 
pVideoDemoCtx
->
ProbeCur
.
dwMaxPaylﬂdTøns„rSize
 =

682 
pReque°
->
Video
.
dwMaxPaylﬂdTøns„rSize
;

683 i‡(
pReque°
->
Video
.
dwClockFªquícy
 != 0)

684 
pVideoDemoCtx
->
ProbeCur
.
dwClockFªquícy
 =

685 
pReque°
->
Video
.
dwClockFªquícy
;

686 i‡(
pReque°
->
Video
.
bmFømögInfo
 != 0)

687 
pVideoDemoCtx
->
ProbeCur
.
bmFømögInfo
 =

688 
pReque°
->
Video
.
bmFømögInfo
;

689 i‡(
pReque°
->
Video
.
bPª„ªdVîsi⁄
 != 0)

690 
pVideoDemoCtx
->
ProbeCur
.
bPª„ªdVîsi⁄
 =

691 
pReque°
->
Video
.
bPª„ªdVîsi⁄
;

692 i‡(
pReque°
->
Video
.
bMöVîsi⁄
 != 0)

693 
pVideoDemoCtx
->
ProbeCur
.
bMöVîsi⁄
 =

694 
pReque°
->
Video
.
bMöVîsi⁄
;

695 i‡(
pReque°
->
Video
.
bMaxVîsi⁄
 != 0)

696 
pVideoDemoCtx
->
ProbeCur
.
bMaxVîsi⁄
 =

697 
pReque°
->
Video
.
bMaxVîsi⁄
;

699 
USB_bReque°_Video_GET_MIN
:

700 
pReque°
->
Video
.
bmHöt
 = 
pVideoDemoCtx
->
ProbeMö
.bmHint;

701 
pReque°
->
Video
.
bF‹m©Index
 = 
pVideoDemoCtx
->
ProbeMö
.bFormatIndex;

702 
pReque°
->
Video
.
bFømeIndex
 = 
pVideoDemoCtx
->
ProbeMö
.bFrameIndex;

703 
pReque°
->
Video
.
dwFømeI¡îvÆ
 =

704 
pVideoDemoCtx
->
ProbeMö
.
dwFømeI¡îvÆ
;

705 
pReque°
->
Video
.
wKeyFømeR©e
 =

706 
pVideoDemoCtx
->
ProbeMö
.
wKeyFømeR©e
;

707 
pReque°
->
Video
.
wPFømeR©e
 = 
pVideoDemoCtx
->
ProbeMö
.wPFrameRate;

708 
pReque°
->
Video
.
wCompQuÆôy
 = 
pVideoDemoCtx
->
ProbeMö
.wCompQuality;

709 
pReque°
->
Video
.
wCompWödowSize
 =

710 
pVideoDemoCtx
->
ProbeMö
.
wCompWödowSize
;

711 
pReque°
->
Video
.
wDñay
 = 
pVideoDemoCtx
->
ProbeMö
.wDelay;

712 
pReque°
->
Video
.
dwMaxVideoFømeSize
 =

713 
pVideoDemoCtx
->
ProbeMö
.
dwMaxVideoFømeSize
;

714 
pReque°
->
Video
.
dwMaxPaylﬂdTøns„rSize
 =

715 
pVideoDemoCtx
->
ProbeMö
.
dwMaxPaylﬂdTøns„rSize
;

716 
pReque°
->
Video
.
dwClockFªquícy
 =

717 
pVideoDemoCtx
->
ProbeMö
.
dwClockFªquícy
;

718 
pReque°
->
Video
.
bmFømögInfo
 =

719 
pVideoDemoCtx
->
ProbeMö
.
bmFømögInfo
;

720 
pReque°
->
Video
.
bPª„ªdVîsi⁄
 =

721 
pVideoDemoCtx
->
ProbeMö
.
bPª„ªdVîsi⁄
;

722 
pReque°
->
Video
.
bMöVîsi⁄
 = 
pVideoDemoCtx
->
ProbeMö
.bMinVersion;

723 
pReque°
->
Video
.
bMaxVîsi⁄
 = 
pVideoDemoCtx
->
ProbeMö
.bMaxVersion;

726 
USB_bReque°_Video_GET_MAX
:

727 
pReque°
->
Video
.
bmHöt
 = 
pVideoDemoCtx
->
ProbeMax
.bmHint;

728 
pReque°
->
Video
.
bF‹m©Index
 = 
pVideoDemoCtx
->
ProbeMax
.bFormatIndex;

729 
pReque°
->
Video
.
bFømeIndex
 = 
pVideoDemoCtx
->
ProbeMax
.bFrameIndex;

730 
pReque°
->
Video
.
dwFømeI¡îvÆ
 =

731 
pVideoDemoCtx
->
ProbeMax
.
dwFømeI¡îvÆ
;

732 
pReque°
->
Video
.
wKeyFømeR©e
 =

733 
pVideoDemoCtx
->
ProbeMax
.
wKeyFømeR©e
;

734 
pReque°
->
Video
.
wPFømeR©e
 = 
pVideoDemoCtx
->
ProbeMax
.wPFrameRate;

735 
pReque°
->
Video
.
wCompQuÆôy
 = 
pVideoDemoCtx
->
ProbeMax
.wCompQuality;

736 
pReque°
->
Video
.
wCompWödowSize
 =

737 
pVideoDemoCtx
->
ProbeMax
.
wCompWödowSize
;

738 
pReque°
->
Video
.
wDñay
 = 
pVideoDemoCtx
->
ProbeMax
.wDelay;

739 
pReque°
->
Video
.
dwMaxVideoFømeSize
 =

740 
pVideoDemoCtx
->
ProbeMax
.
dwMaxVideoFømeSize
;

741 
pReque°
->
Video
.
dwMaxPaylﬂdTøns„rSize
 =

742 
pVideoDemoCtx
->
ProbeMax
.
dwMaxPaylﬂdTøns„rSize
;

743 
pReque°
->
Video
.
dwClockFªquícy
 =

744 
pVideoDemoCtx
->
ProbeMax
.
dwClockFªquícy
;

745 
pReque°
->
Video
.
bmFømögInfo
 =

746 
pVideoDemoCtx
->
ProbeMax
.
bmFømögInfo
;

747 
pReque°
->
Video
.
bPª„ªdVîsi⁄
 =

748 
pVideoDemoCtx
->
ProbeMax
.
bPª„ªdVîsi⁄
;

749 
pReque°
->
Video
.
bMöVîsi⁄
 = 
pVideoDemoCtx
->
ProbeMax
.bMinVersion;

750 
pReque°
->
Video
.
bMaxVîsi⁄
 = 
pVideoDemoCtx
->
ProbeMax
.bMaxVersion;

753 
USB_bReque°_Video_GET_DEF
:

754 
pReque°
->
Video
.
bmHöt
 = 
pVideoDemoCtx
->
ProbeDef
.bmHint;

755 
pReque°
->
Video
.
bF‹m©Index
 = 
pVideoDemoCtx
->
ProbeDef
.bFormatIndex;

756 
pReque°
->
Video
.
bFømeIndex
 = 
pVideoDemoCtx
->
ProbeDef
.bFrameIndex;

757 
pReque°
->
Video
.
dwFømeI¡îvÆ
 =

758 
pVideoDemoCtx
->
ProbeDef
.
dwFømeI¡îvÆ
;

759 
pReque°
->
Video
.
wKeyFømeR©e
 =

760 
pVideoDemoCtx
->
ProbeDef
.
wKeyFømeR©e
;

761 
pReque°
->
Video
.
wPFømeR©e
 = 
pVideoDemoCtx
->
ProbeDef
.wPFrameRate;

762 
pReque°
->
Video
.
wCompQuÆôy
 = 
pVideoDemoCtx
->
ProbeDef
.wCompQuality;

763 
pReque°
->
Video
.
wCompWödowSize
 =

764 
pVideoDemoCtx
->
ProbeDef
.
wCompWödowSize
;

765 
pReque°
->
Video
.
wDñay
 = 
pVideoDemoCtx
->
ProbeDef
.wDelay;

766 
pReque°
->
Video
.
dwMaxVideoFømeSize
 =

767 
pVideoDemoCtx
->
ProbeDef
.
dwMaxVideoFømeSize
;

768 
pReque°
->
Video
.
dwMaxPaylﬂdTøns„rSize
 =

769 
pVideoDemoCtx
->
ProbeDef
.
dwMaxPaylﬂdTøns„rSize
;

770 
pReque°
->
Video
.
dwClockFªquícy
 =

771 
pVideoDemoCtx
->
ProbeDef
.
dwClockFªquícy
;

772 
pReque°
->
Video
.
bmFømögInfo
 =

773 
pVideoDemoCtx
->
ProbeDef
.
bmFømögInfo
;

774 
pReque°
->
Video
.
bPª„ªdVîsi⁄
 =

775 
pVideoDemoCtx
->
ProbeDef
.
bPª„ªdVîsi⁄
;

776 
pReque°
->
Video
.
bMöVîsi⁄
 = 
pVideoDemoCtx
->
ProbeDef
.bMinVersion;

777 
pReque°
->
Video
.
bMaxVîsi⁄
 = 
pVideoDemoCtx
->
ProbeDef
.bMaxVersion;

781 
pReque°
->
Hdr
.
bAc˚±Reque°
 = 
FALSE
;

786 
USBVIDEO_bC⁄åﬁSñe˘‹_VS_COMMIT_CONTROL
:

787 
pReque°
->
Hdr
.
bReque°
)

789 
USB_bReque°_Video_GET_CUR
:

790 
pReque°
->
Video
.
bmHöt
 = 
pVideoDemoCtx
->
CommôCur
.bmHint;

791 
pReque°
->
Video
.
bF‹m©Index
 =

792 
pVideoDemoCtx
->
CommôCur
.
bF‹m©Index
;

793 
pReque°
->
Video
.
bFømeIndex
 = 
pVideoDemoCtx
->
CommôCur
.bFrameIndex;

794 
pReque°
->
Video
.
dwFømeI¡îvÆ
 =

795 
pVideoDemoCtx
->
CommôCur
.
dwFømeI¡îvÆ
;

796 
pReque°
->
Video
.
wKeyFømeR©e
 =

797 
pVideoDemoCtx
->
CommôCur
.
wKeyFømeR©e
;

798 
pReque°
->
Video
.
wPFømeR©e
 = 
pVideoDemoCtx
->
CommôCur
.wPFrameRate;

799 
pReque°
->
Video
.
wCompQuÆôy
 =

800 
pVideoDemoCtx
->
CommôCur
.
wCompQuÆôy
;

801 
pReque°
->
Video
.
wCompWödowSize
 =

802 
pVideoDemoCtx
->
CommôCur
.
wCompWödowSize
;

803 
pReque°
->
Video
.
wDñay
 = 
pVideoDemoCtx
->
CommôCur
.wDelay;

804 
pReque°
->
Video
.
dwMaxVideoFømeSize
 =

805 
pVideoDemoCtx
->
CommôCur
.
dwMaxVideoFømeSize
;

806 
pReque°
->
Video
.
dwMaxPaylﬂdTøns„rSize
 =

807 
pVideoDemoCtx
->
CommôCur
.
dwMaxPaylﬂdTøns„rSize
;

808 
pReque°
->
Video
.
dwClockFªquícy
 =

809 
pVideoDemoCtx
->
CommôCur
.
dwClockFªquícy
;

810 
pReque°
->
Video
.
bmFømögInfo
 =

811 
pVideoDemoCtx
->
CommôCur
.
bmFømögInfo
;

812 
pReque°
->
Video
.
bPª„ªdVîsi⁄
 =

813 
pVideoDemoCtx
->
CommôCur
.
bPª„ªdVîsi⁄
;

814 
pReque°
->
Video
.
bMöVîsi⁄
 = 
pVideoDemoCtx
->
CommôCur
.bMinVersion;

815 
pReque°
->
Video
.
bMaxVîsi⁄
 = 
pVideoDemoCtx
->
CommôCur
.bMaxVersion;

817 
USB_bReque°_Video_SET_CUR
:

820 i‡(
pReque°
->
Video
.
bmHöt
 != 0)

821 
pVideoDemoCtx
->
CommôCur
.
bmHöt
 = 
pReque°
->
Video
.bmHint;

822 i‡(
pReque°
->
Video
.
bF‹m©Index
 != 0)

823 
pVideoDemoCtx
->
CommôCur
.
bF‹m©Index
 =

824 
pReque°
->
Video
.
bF‹m©Index
;

825 i‡(
pReque°
->
Video
.
bFømeIndex
 != 0)

826 
pVideoDemoCtx
->
CommôCur
.
bFømeIndex
 =

827 
pReque°
->
Video
.
bFømeIndex
;

828 i‡(
pReque°
->
Video
.
dwFømeI¡îvÆ
 != 0)

829 
pVideoDemoCtx
->
CommôCur
.
dwFømeI¡îvÆ
 =

830 
pReque°
->
Video
.
dwFømeI¡îvÆ
;

831 i‡(
pReque°
->
Video
.
wKeyFømeR©e
 != 0)

832 
pVideoDemoCtx
->
CommôCur
.
wKeyFømeR©e
 =

833 
pReque°
->
Video
.
wKeyFømeR©e
;

834 i‡(
pReque°
->
Video
.
wPFømeR©e
 != 0)

835 
pVideoDemoCtx
->
CommôCur
.
wPFømeR©e
 =

836 
pReque°
->
Video
.
wPFømeR©e
;

837 i‡(
pReque°
->
Video
.
wCompQuÆôy
 != 0)

838 
pVideoDemoCtx
->
CommôCur
.
wCompQuÆôy
 =

839 
pReque°
->
Video
.
wCompQuÆôy
;

840 i‡(
pReque°
->
Video
.
wCompWödowSize
 != 0)

841 
pVideoDemoCtx
->
CommôCur
.
wCompWödowSize
 =

842 
pReque°
->
Video
.
wCompWödowSize
;

843 i‡(
pReque°
->
Video
.
wDñay
 != 0)

844 
pVideoDemoCtx
->
CommôCur
.
wDñay
 = 
pReque°
->
Video
.wDelay;

845 i‡(
pReque°
->
Video
.
dwMaxVideoFømeSize
 != 0)

846 
pVideoDemoCtx
->
CommôCur
.
dwMaxVideoFømeSize
 =

847 
pReque°
->
Video
.
dwMaxVideoFømeSize
;

848 i‡(
pReque°
->
Video
.
dwMaxPaylﬂdTøns„rSize
 != 0)

849 
pVideoDemoCtx
->
CommôCur
.
dwMaxPaylﬂdTøns„rSize
 =

850 
pReque°
->
Video
.
dwMaxPaylﬂdTøns„rSize
;

851 i‡(
pReque°
->
Video
.
dwClockFªquícy
 != 0)

852 
pVideoDemoCtx
->
CommôCur
.
dwClockFªquícy
 =

853 
pReque°
->
Video
.
dwClockFªquícy
;

854 i‡(
pReque°
->
Video
.
bmFømögInfo
 != 0)

855 
pVideoDemoCtx
->
CommôCur
.
bmFømögInfo
 =

856 
pReque°
->
Video
.
bmFømögInfo
;

857 i‡(
pReque°
->
Video
.
bPª„ªdVîsi⁄
 != 0)

858 
pVideoDemoCtx
->
CommôCur
.
bPª„ªdVîsi⁄
 =

859 
pReque°
->
Video
.
bPª„ªdVîsi⁄
;

860 i‡(
pReque°
->
Video
.
bMöVîsi⁄
 != 0)

861 
pVideoDemoCtx
->
CommôCur
.
bMöVîsi⁄
 =

862 
pReque°
->
Video
.
bMöVîsi⁄
;

863 i‡(
pReque°
->
Video
.
bMaxVîsi⁄
 != 0)

864 
pVideoDemoCtx
->
CommôCur
.
bMaxVîsi⁄
 =

865 
pReque°
->
Video
.
bMaxVîsi⁄
;

868 
pReque°
->
Hdr
.
bAc˚±Reque°
 = 
FALSE
;

873 
USBVIDEO_bC⁄åﬁSñe˘‹_VS_STILL_PROBE_CONTROL
:

874 
pReque°
->
Hdr
.
bReque°
)

876 
USB_bReque°_Video_GET_CUR
:

877 
pReque°
->
Stûl
.
bF‹m©Index
 =

878 
pVideoDemoCtx
->
StûlProbeCur
.
bF‹m©Index
;

879 
pReque°
->
Stûl
.
bFømeIndex
 =

880 
pVideoDemoCtx
->
StûlProbeCur
.
bFømeIndex
;

881 
pReque°
->
Stûl
.
bCom¥essi⁄Index
 =

882 
pVideoDemoCtx
->
StûlProbeCur
.
bCom¥essi⁄Index
;

883 
pReque°
->
Stûl
.
dwMaxVideoFømeSize
 =

884 
pVideoDemoCtx
->
StûlProbeCur
.
dwMaxVideoFømeSize
;

885 
pReque°
->
Stûl
.
dwMaxPaylﬂdTøns„rSize
 =

886 
pVideoDemoCtx
->
StûlProbeCur
.
dwMaxPaylﬂdTøns„rSize
;

888 
USB_bReque°_Video_SET_CUR
:

891 i‡(
pReque°
->
Stûl
.
bF‹m©Index
 != 0)

892 
pVideoDemoCtx
->
StûlProbeCur
.
bF‹m©Index
 =

893 
pReque°
->
Stûl
.
bF‹m©Index
;

894 i‡(
pReque°
->
Stûl
.
bFømeIndex
 != 0)

895 
pVideoDemoCtx
->
StûlProbeCur
.
bFømeIndex
 =

896 
pReque°
->
Stûl
.
bFømeIndex
;

897 i‡(
pReque°
->
Stûl
.
bCom¥essi⁄Index
 != 0)

898 
pVideoDemoCtx
->
StûlProbeCur
.
bCom¥essi⁄Index
 =

899 
pReque°
->
Stûl
.
bCom¥essi⁄Index
;

900 i‡(
pReque°
->
Stûl
.
dwMaxVideoFømeSize
 != 0)

901 
pVideoDemoCtx
->
StûlProbeCur
.
dwMaxVideoFømeSize
 =

902 
pReque°
->
Stûl
.
dwMaxVideoFømeSize
;

903 i‡(
pReque°
->
Stûl
.
dwMaxPaylﬂdTøns„rSize
 != 0)

904 
pVideoDemoCtx
->
StûlProbeCur
.
dwMaxPaylﬂdTøns„rSize
 =

905 
pReque°
->
Stûl
.
dwMaxPaylﬂdTøns„rSize
;

908 
pReque°
->
Hdr
.
bAc˚±Reque°
 = 
FALSE
;

913 
USBVIDEO_bC⁄åﬁSñe˘‹_VS_STILL_COMMIT_CONTROL
:

914 
pReque°
->
Hdr
.
bReque°
)

916 
USB_bReque°_Video_GET_CUR
:

917 
pReque°
->
Stûl
.
bF‹m©Index
 =

918 
pVideoDemoCtx
->
StûlCommôCur
.
bF‹m©Index
;

919 
pReque°
->
Stûl
.
bFømeIndex
 =

920 
pVideoDemoCtx
->
StûlCommôCur
.
bFømeIndex
;

921 
pReque°
->
Stûl
.
bCom¥essi⁄Index
 =

922 
pVideoDemoCtx
->
StûlCommôCur
.
bCom¥essi⁄Index
;

923 
pReque°
->
Stûl
.
dwMaxVideoFømeSize
 =

924 
pVideoDemoCtx
->
StûlCommôCur
.
dwMaxVideoFømeSize
;

925 
pReque°
->
Stûl
.
dwMaxPaylﬂdTøns„rSize
 =

926 
pVideoDemoCtx
->
StûlCommôCur
.
dwMaxPaylﬂdTøns„rSize
;

928 
USB_bReque°_Video_SET_CUR
:

931 i‡(
pReque°
->
Stûl
.
bF‹m©Index
 != 0)

932 
pVideoDemoCtx
->
StûlCommôCur
.
bF‹m©Index
 =

933 
pReque°
->
Stûl
.
bF‹m©Index
;

934 i‡(
pReque°
->
Stûl
.
bFømeIndex
 != 0)

935 
pVideoDemoCtx
->
StûlCommôCur
.
bFømeIndex
 =

936 
pReque°
->
Stûl
.
bFømeIndex
;

937 i‡(
pReque°
->
Stûl
.
bCom¥essi⁄Index
 != 0)

938 
pVideoDemoCtx
->
StûlCommôCur
.
bCom¥essi⁄Index
 =

939 
pReque°
->
Stûl
.
bCom¥essi⁄Index
;

940 i‡(
pReque°
->
Stûl
.
dwMaxVideoFømeSize
 != 0)

941 
pVideoDemoCtx
->
StûlCommôCur
.
dwMaxVideoFømeSize
 =

942 
pReque°
->
Stûl
.
dwMaxVideoFømeSize
;

943 i‡(
pReque°
->
Stûl
.
dwMaxPaylﬂdTøns„rSize
 != 0)

944 
pVideoDemoCtx
->
StûlCommôCur
.
dwMaxPaylﬂdTøns„rSize
 =

945 
pReque°
->
Stûl
.
dwMaxPaylﬂdTøns„rSize
;

948 
pReque°
->
Hdr
.
bAc˚±Reque°
 = 
FALSE
;

953 
USBVIDEO_bC⁄åﬁSñe˘‹_VS_STILL_IMAGE_TRIGGER_CONTROL
:

954 
pReque°
->
Hdr
.
bReque°
)

956 
USB_bReque°_Video_GET_CUR
:

957 
pReque°
->
StûlImage
.
bTriggî
 = 
pVideoDemoCtx
->
bStûlTriggî
;

959 
USB_bReque°_Video_SET_CUR
:

961 i‡(
pReque°
->
StûlImage
.
bTriggî
 != 0)

962 
pVideoDemoCtx
->
bStûlTriggî
 = 
pReque°
->
StûlImage
.
bTriggî
;

965 
pReque°
->
Hdr
.
bAc˚±Reque°
 = 
FALSE
;

971 
pReque°
->
Hdr
.
bAc˚±Reque°
 = 
FALSE
;

975 
	`VideoClõ¡Lib_SåómReque°Rïly
(
pVideoDemoCtx
->
pVideo
,

976 
VideoDemoI_SåómReque°_D⁄e
, 
pVideoDemoCtx
, 
pReque°
 );

977 
	}
}

979 
	$VideoDemoI_SåómReque°_D⁄e
(*
pClõ¡C⁄ãxt
, 
UINT32
 
Eº‹Code
)

981 
	`USBPUMP_UNREFERENCED_PARAMETER
(
pClõ¡C⁄ãxt
);

982 
	`USBPUMP_UNREFERENCED_PARAMETER
(
Eº‹Code
);

983 
	}
}

	@Demo/UsbVideo208/leon_rt/lrt_app_config.c

13 
	~"los_≠p_c⁄fig.h
"

14 
	~"DrvC¥.h
"

15 
	~"DrvTimî.h
"

33 
	$öôClocksAndMem‹y
()

35 
s32
 
sc
;

36 
sc
 = 
	`DrvC¥InôClocks
(
SYS_CLK_KHZ
, 0, 0, 0, 0);

38 if(
sc
)

39  
sc
;

40 
sc
 = 
	`DrvTimîInô
();

41 if(
sc
)

42  
sc
;

44 
	}
}

	@Demo/UsbVideo208/leon_rt/lrt_app_config.h

13 #i‚de‡
APP_CONFIG_H


14 
	#APP_CONFIG_H


	)

18 
	~"mv_ty≥s.h
"

21 #i‡
deföed
(
MA2150
Ë|| deföed(
MA2155
Ë|| deföed(
MA2450
Ë|| deföed(
MA2455
)

22 
	~"Ãt_≠p_c⁄fig_2150.h
"

35 
öôClocksAndMem‹y
();

36 
c⁄figuªLutFûãrSûic⁄S≥cific
(
LutP¨am
* 
lutCfg
);

	@Demo/UsbVideo208/leon_rt/main.c

11 
	~<°dio.h
>

12 #ifde‡
MV0212


13 
	~"MV0212.h
"

14 
	~"brdGpioCfgs/brdMv0182R5GpioDeÁu…s.h
"

15 #ñi‡
deföed
(
MV0182
)

16 
	~<Bﬂrd182Api.h
>

19 
	~"DrvCDCEL.h
"

20 
	~"DrvC¥.h
"

21 
	~"CamGíîicApi.h
"

22 
	~"sùp.h
"

23 
	~"sùpTe°Comm⁄.h
"

24 
	~"DrvLe⁄.h
"

25 
	~"imx208_2L_1936x1096_Raw10_15Hz.h
"

26 
	~"imx208_2L_1936x1096_Raw10_60Hz.h
"

27 
	~"Ãt_≠p_c⁄fig.h
"

28 
	~"ˇm_c⁄fig.h
"

29 
	~"Le⁄IPCApi.h
"

30 
	~"DrvTimî.h
"

34 
	#FRAME_READY
 1

	)

36 #ifde‡
MV0212


37 
	#NUM_I2C_DEVS
 3

	)

41 
I2CM_Devi˚
 * 
	gi2c0H™dÀ
;

43 
À⁄IPCCh™√l_t
 
__©åibuã__
((
£˘i⁄
(".cmx_dúe˘.d©a"))Ë
	gLRTtoLOSCh™√l
;

44 
À⁄IPCCh™√l_t
 
LOStoLRTCh™√l
;

45 
uöt32_t
 
__©åibuã__
((
£˘i⁄
(".cmx_dúe˘.d©a"))Ë
	gmesßgePoﬁ
[
MSG_QUEUE_SIZE
 * 
MSG_SIZE
];

46 
uöt32_t
 
	gª˚ivedMesßge
;

47 
uöt32_t
 
	gcuºítS≥ed
;

50 
GíîicCamS≥c
 *
	g°©icCamC⁄fig_SS
 = &
imx208_2L_1936x1096_RAW10_60Hz_ˇmCfg
;

52 
GíîicCamS≥c
 *
	g°©icCamC⁄fig_HS
 = &
imx208_2L_1936x1096_RAW10_15Hz_ˇmCfg
;

54 vﬁ©ûê
	$ALIGNED
(4Ë
u32
 
√wCamFømeCå
 = 
FIRST_INCOMING_BUF_ID
;

55 vﬁ©ûê
	$ALIGNED
(4Ë
	`__©åibuã__
((
	`£˘i⁄
(" .cmx_dúe˘.d©a"))Ë
u32
 
usbFømeCå
 = 
FIRST_OUTGOING_BUF_ID
;

57 
u8
 
ˇmBuf
[
MAX_USED_BUF
][
CAM_FRAME_SIZE_BYTES
] 
DDR_AREA
 
	`ALIGNED
(8);

61 
u8
 
usbBuf1
[
PAYLOAD_HEADER_OFFSET
 + 
CAM_FRAME_SIZE_BYTES
] 
	`__©åibuã__
((
	`£˘i⁄
(".ddr_direct.bss")));

62 
u8
 
usbBuf2
[
PAYLOAD_HEADER_OFFSET
 + 
CAM_FRAME_SIZE_BYTES
] 
	`__©åibuã__
((
	`£˘i⁄
(".ddr_direct.bss")));

63 
u8
 
usbBuf3
[
PAYLOAD_HEADER_OFFSET
 + 
CAM_FRAME_SIZE_BYTES
] 
	`__©åibuã__
((
	`£˘i⁄
(".ddr_direct.bss")));

64 
u8
 
usbBuf4
[
PAYLOAD_HEADER_OFFSET
 + 
CAM_FRAME_SIZE_BYTES
] 
	`__©åibuã__
((
	`£˘i⁄
(".ddr_direct.bss")));

67 
u8
* 
usbBufPå
[
MAX_USED_BUF
] = {
usbBuf1
, 
usbBuf2
, 
usbBuf3
, 
usbBuf4
};

69 vﬁ©ûê
u32
 
	$ALIGNED
(4Ë
¥o˚ssögFømeCå
;

71 
GíîicCamîaH™dÀ
 
ˇmHndl
;

72 
ˇŒbacksLi°Såu˘
 
ˇŒbacks
 = {0
	}
};

73 
öãºu±sCÆlbacksLi°Ty≥
 
	gi§CÆlbacks
 = {0};

74 
CamU£rS≥c
 
	gu£rCamC⁄fig
;

75 
‰ameS≥c
 
	gˇmFømeS≥c
;

77 
‰ameBuf„r
 
	gˇmFøme
[
MAX_USED_BUF
];

79 
SùpPùñöe
 *
	g∂
;

81 
SùpFûãr
 *
	gdmaIn
;

82 
SùpFûãr
 *
	glut
;

83 
SùpFûãr
 *
	gdmaOut
;

85 
DmaP¨am
 *
	gdmaInCfg
;

86 
DmaP¨am
 *
	gdmaOutCfg
;

87 
LutP¨am
 *
	glutCfg
;

89 vﬁ©ûê
u32
 
	g‰ameRódy
;

91 
	$usbAâached
(
À⁄IPCCh™√l_t
 *
ch™√l
)

93 
°©us
;

95 i‡(
	`Le⁄IPCRódMesßge
(
ch™√l
, &
ª˚ivedMesßge
Ë=
IPC_SUCCESS
)

97 i‡(
cuºítS≥ed
 !
ª˚ivedMesßge
)

100 
°©us
 = 
	`CamSt›
(&
ˇmHndl
);

101 i‡(
°©us
 !
CAM_SUCCESS
)

103 
	`¥ötf
("\¿CouldÇŸ st›Åhêˇmîa(%d).\n", 
°©us
);

106 
√wCamFømeCå
 = 
FIRST_INCOMING_BUF_ID
;

107 
¥o˚ssögFømeCå
 = 
√wCamFømeCå
 + 1;

108 
	`DrvTimîSÀïMs
(1500);

109 i‡(
ª˚ivedMesßge
 =
USB_SUPER_SPEED
)

111 
°©us
 = 
	`CamInô
(&
ˇmHndl
, 
°©icCamC⁄fig_SS
, &
u£rCamC⁄fig
, &
ˇŒbacks
, 
i2c0H™dÀ
);

112 i‡(!
°©us
)

114 
	`¥ötf
("Camera initialized in SuperSpeed mode\n");

119 
°©us
 = 
	`CamInô
(&
ˇmHndl
, 
°©icCamC⁄fig_HS
, &
u£rCamC⁄fig
, &
ˇŒbacks
, 
i2c0H™dÀ
);

120 i‡(!
°©us
)

122 
	`¥ötf
("Camera initialized in HighSpeed mode\n");

125 i‡(
°©us
)

127 
	`¥ötf
("\¿Camî®c⁄figuøti⁄ faûed (%d).\n", 
°©us
);

130 
°©us
 = 
	`CamSèπ
(&
ˇmHndl
);

131 i‡(
°©us
 !
CAM_SUCCESS
)

133 
	`¥ötf
("\¿Camî®ÁûedÅÿ°¨à(%d).\n", 
°©us
);

137 
cuºítS≥ed
 = 
ª˚ivedMesßge
;

140 
	}
}

144 
‰ameBuf„r
* 
AŒoˇãNextCamFømeBuf
();

149 
	$gíî©eLutTabÀ
()

151 
u16
 
i
;

155 
i
 = 0; i < 256; i++)

157 
lutTabÀ
[
i
] = i | 0x8000;

159 
	}
}

161 
	$¥ï¨eDrivîD©a
()

163 
ibuf
;

166 
u£rCamC⁄fig
.
mùiC⁄åﬁÀrNb
 = 
CAM_B1_MIPICTRL
;

167 
u£rCamC⁄fig
.
ª˚ivîId
 = 
SIPP_DEVICE1
;

168 #ifde‡
MV0212


169 
u£rCamC⁄fig
.
£ns‹Re£tPö
 = 
MV0212_MV0200_SENSOR_RIGHT_RST_GPIO
;

170 #ñi‡
	`deföed
(
MV0182
)

171 
u£rCamC⁄fig
.
£ns‹Re£tPö
 = 
MV0182_MV0200_SENSOR_RIGHT_RST_GPIO
;

173 
u£rCamC⁄fig
.
°îeoPaúIndex
 = 
CAM_B1_RIGHT_ADDR
;

175 
u£rCamC⁄fig
.
wödowCﬁumnSèπ
 = 
CAM_WINDOW_START_COLUMN
;

176 
u£rCamC⁄fig
.
wödowRowSèπ
 = 
CAM_WINDOW_START_ROW
;

177 
u£rCamC⁄fig
.
wödowWidth
 = 
CAM_WINDOW_WIDTH
;

178 
u£rCamC⁄fig
.
wödowHeight
 = 
CAM_WINDOW_HEIGHT
;

179 
u£rCamC⁄fig
.
gíî©eSync
 = 
NULL
;

182 
ˇmFømeS≥c
.
width
 = 
CAM_WINDOW_WIDTH
;

183 
ˇmFømeS≥c
.
height
 = 
CAM_WINDOW_HEIGHT
;

184 
ˇmFømeS≥c
.
byãsPP
 = 
CAM_BPP
;

185 
ˇmFømeS≥c
.
°ride
 = 
CAM_WINDOW_WIDTH
 * 
CAM_BPP
;

186 
ˇmFømeS≥c
.
ty≥
 = 
RAW16
;

188 
ibuf
 = 0; ibu‡< 
MAX_USED_BUF
;ibuf++)

190 
ˇmFøme
[
ibuf
].
•ec
 = 
ˇmFømeS≥c
;

191 
ˇmFøme
[
ibuf
].
p1
 = (*)
ˇmBuf
[ibuf];

192 
ˇmFøme
[
ibuf
].
p2
 = 
NULL
;

193 
ˇmFøme
[
ibuf
].
p3
 = 
NULL
;

196 
	}
}

200 
	$≠pBuûdPùñöe
()

202 
∂
 = 
	`sùpCª©ePùñöe
(0, 2, 
	`SIPP_MBIN
(
mböImgSùp
));

207 
dmaIn
 = 
	`sùpCª©eFûãr
(
∂
, 0x00, 
CAM_WINDOW_WIDTH
, 
CAM_WINDOW_HEIGHT
, 
	`N_PL
(1), 
	`SZ
(
UI¡16
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, "DMA_IN");

208 
lut
 = 
	`sùpCª©eFûãr
(
∂
, 0x00, 
CAM_WINDOW_WIDTH
, 
CAM_WINDOW_HEIGHT
, 
	`N_PL
(1), 
	`SZ
(
UI¡16
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_LUT_ID
, "SIPP_LUT");

209 
dmaOut
 = 
	`sùpCª©eFûãr
(
∂
, 0x00, 
CAM_WINDOW_WIDTH
, 
CAM_WINDOW_HEIGHT
, 
	`N_PL
(1), 
	`SZ
(
UI¡16
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, "DMA_OUT");

211 
	`sùpLökFûãr
(
lut
 , 
dmaIn
, 1, 1);

212 
	`sùpLökFûãr
(
dmaOut
, 
lut
 , 1, 1);

213 
	}
}

216 
	$≠pC⁄figuªFûãrs
()

218 
dmaInCfg
 = (
DmaP¨am
*)
dmaIn
->
∑øms
;

219 
dmaOutCfg
 = (
DmaP¨am
*)
dmaOut
->
∑øms
;

220 
lutCfg
 = (
LutP¨am
*)
lut
->
∑øms
;

222 
dmaInCfg
->
ddrAddr
 = (
UI¡32
)&
ˇmBuf
[0];

223 
dmaOutCfg
->
ddrAddr
 = (
UI¡32
)&
usbBufPå
[0][
PAYLOAD_HEADER_OFFSET
];

226 
lutCfg
->
cfg
 = (0 ) |

230 
lutCfg
->
sizeA
 = 0x44444444;

231 
lutCfg
->
sizeB
 = 0x44444444;

232 
lutCfg
->
lut
 = 
lutTabÀ
;

234 
	`c⁄figuªLutFûãrSûic⁄S≥cific
(
lutCfg
);

235 
	}
}

237 
‰ameBuf„r
* 
	$AŒoˇãNextCamFømeBuf
()

239 ++
√wCamFømeCå
;

240  (&
ˇmFøme
[
√wCamFømeCå
 % 
MAX_USED_BUF
]);

241 
	}
}

243 
tyTimeSèmp
 
	gmySIPPTimî
;

244 
u64
 
	gcy˛esSIPP
;

245 vﬁ©ûê
	gsùpTimePas£d
;

247 
	$maö
()

249 
s32
 
°©us
;

250 
ˇmEº‹Ty≥
 
ˇmSètus
;

251 
s32
 
bﬂrdSètus
;

252 
u32
 
√wFøme
 = 
FRAME_READY
;

254 
°©us
 = 
	`öôClocksAndMem‹y
();

255 if(
°©us
)

256  
°©us
;

257 #ifde‡
MV0212


258 
öt32_t
 
rc
;

259 
uöt32_t
 
ªv
;

260 
BﬂrdI2CInfo
 
öfo
[
NUM_I2C_DEVS
];

261 
BﬂrdC⁄figDesc
 
c⁄fig
[] =

264 
BRDCONFIG_GPIO
,

266 (*)
brdMV0182R5GpioCfgDeÁu…


269 
BRDCONFIG_END
,

270 
NULL


274 
rc
 = 
	`BﬂrdInô
(
c⁄fig
);

275 i‡(
rc
!=
BRDCONFIG_SUCCESS
)

277 
	`¥ötf
("Error: board initialization failed with %ld status\n",

278 
rc
);

279  
rc
;

282 
rc
 = 
	`BﬂrdGëPCBRevisi⁄
(&
ªv
);

283 i‡(
rc
!=
BRDCONFIG_SUCCESS
)

285 
	`¥ötf
("Error: board configurationÑead failed with %ld status\n",

286 
rc
);

287  
rc
;

289 
	`¥ötf
("Bﬂrd Mv0212 inôülized,Ñevisi⁄ = %lu \n", 
ªv
);

291 
bﬂrdSètus
 = 
	`BﬂrdInôExtPŒ
(
EXT_PLL_CFG_148_24_24MHZ
);

292 i‡(
bﬂrdSètus
 !
BRDCONFIG_SUCCESS
)

294 
	`¥ötf
("Error: board initialization failed with %ld status\n",

295 
bﬂrdSètus
);

298 
rc
 = 
	`BﬂrdGëI2CInfo
(
öfo
, 
NUM_I2C_DEVS
);

299 
i2c0H™dÀ
=
öfo
[0].
h™dÀr
;

300 #ñi‡
	`deföed
(
MV0182
)

301 
bﬂrdSètus
 = 
	`BﬂrdInôüli£
(
EXT_PLL_CFG_148_24_24MHZ
);

302 
i2c0H™dÀ
=
gAµDevHndls
.i2c0Handle;

303 i‡(
bﬂrdSètus
 !
B_SUCCESS
)

305 
	`¥ötf
("Error: board initialization failed with %ld status\n",

306 
bﬂrdSètus
);

310 
	`swcLe⁄SëPIL
(0);

312 
	`gíî©eLutTabÀ
();

314 
	`¥ï¨eDrivîD©a
();

316 
	`¥ötf
("ConfiguringÅhe SIPPÖipeline\n");

317 
	`sùpInôülize
();

318 
	`≠pBuûdPùñöe
();

319 
	`≠pC⁄figuªFûãrs
();

320 
	`sùpFöÆizePùñöe
(
∂
);

322 
	`¥ötf
("Configuring imx208 cameraánd datapath\n");

324 
i§CÆlbacks
.
gëBlock
 = 
NULL
;

325 
i§CÆlbacks
.
gëFøme
 = 
AŒoˇãNextCamFømeBuf
;

326 
i§CÆlbacks
.
nŸifiˇti⁄
 = 
NULL
;

327 
ˇŒbacks
.
i§CbfLi°
 = &
i§CÆlbacks
;

328 
ˇŒbacks
.
£ns‹CbfLi°
 = 
NULL
;

330 
ˇmSètus
 = 
	`CamInô
–&
ˇmHndl
, 
°©icCamC⁄fig_HS
, &
u£rCamC⁄fig
, &
ˇŒbacks
, 
i2c0H™dÀ
);

331 i‡(
ˇmSètus
 !
CAM_SUCCESS
)

333 
	`¥ötf
("\¿Camî®c⁄figuøti⁄ faûed (%d).\n", 
ˇmSètus
);

337 
ˇmSètus
 = 
	`CamSèπ
–&
ˇmHndl
);

338 i‡(
ˇmSètus
 !
CAM_SUCCESS
)

340 
	`¥ötf
("\¿Camî®ÁûedÅÿ°¨à(%d).\n", 
ˇmSètus
);

344 
¥o˚ssögFømeCå
 = 
√wCamFømeCå
;

346 
°©us
 = 
	`Le⁄IPCTxInô
(&
LRTtoLOSCh™√l
, 
mesßgePoﬁ
, 
MSG_QUEUE_SIZE
, 
MSG_SIZE
);

347 if(
°©us
)

348  
°©us
;

349 
°©us
 = 
	`Le⁄IPCRxInô
(&
LOStoLRTCh™√l
, 
usbAâached
, 
IRQ_DYNAMIC_4
, 5);

350 if(
°©us
)

351  
°©us
;

352 
	`DrvLe⁄RTSig«lBoŸCom∂ëed
();

356 if–
√wCamFømeCå
 !
¥o˚ssögFømeCå
 )

358 
¥o˚ssögFømeCå
 = 
√wCamFømeCå
;

361 
dmaInCfg
->
ddrAddr
 = (
UI¡32
)&
ˇmBuf
[(
√wCamFømeCå
 - 2Ë% 
MAX_USED_BUF
];

362 
dmaOutCfg
->
ddrAddr
 = (
UI¡32
)&
usbBufPå
[(
usbFømeCå
 + 1Ë% 
MAX_USED_BUF
][
PAYLOAD_HEADER_OFFSET
];

363 
	`DrvTimîSèπTicksCou¡
(&
mySIPPTimî
);

364 
	`sùpPro˚ssFøme
(
∂
);

365 
	`DrvTimîGëEœp£dTicks
(&
mySIPPTimî
,&
cy˛esSIPP
);

366 
sùpTimePas£d
=()
	`DrvTimîTicksToMs
(
cy˛esSIPP
);

367 
usbFømeCå
++;

368 
	`Le⁄IPCSídMesßge
(&
LRTtoLOSCh™√l
, &
√wFøme
);

373 
	}
}

	@Demo/UsbVideo208/shared/cam_config.h

13 #i‚de‡
CAM_CONFIG_H


14 
	#CAM_CONFIG_H


	)

21 
	#MAX_USED_BUF
 4

	)

22 
	#FIRST_INCOMING_BUF_ID
 2

	)

23 
	#FIRST_OUTGOING_BUF_ID
 0

	)

25 
	#CAM_WINDOW_START_COLUMN
 0

	)

26 
	#CAM_WINDOW_START_ROW
 12

27 

	)

28 
	#CAM_WINDOW_WIDTH
 1920

29 
	#CAM_WINDOW_HEIGHT
 1080

	)

32 
	#CAM_BPP
 2

33 

	)

34 
	#CAM_FRAME_SIZE_BYTES
 (
CAM_WINDOW_WIDTH
 * 
CAM_WINDOW_HEIGHT
 * 
CAM_BPP
)

	)

36 
	#DDR_AREA
 
	`__©åibuã__
((
	`£˘i⁄
(".ddr.bss")))

	)

40 
	#PAYLOAD_HEADER_OFFSET
 16

	)

42 
	#MSG_QUEUE_SIZE
 1

	)

43 
	#MSG_SIZE
 1

	)

44 
	#USB_HIGH_SPEED
 2

	)

45 
	#USB_SUPER_SPEED
 3

	)

	@Evaluation/ma2x5x/3DConvolution/leon/app_config.c

11 
	~"≠p_c⁄fig.h
"

13 
	~<ªgi°îsMyrüd.h
>

14 
	~<DrvC¥.h
>

15 
	~<DrvSvu.h
>

16 
	~<DrvRegUtûs.h
>

17 
	~<DrvShaveL2Cache.h
>

18 
	~<DrvDdr.h
>

19 
	~<DrvLe⁄L2C.h
>

26 
	#APP_UPA_CLOCKS
 (
DEV_UPA_SH0
 | \

27 
DEV_UPA_SH1
 | \

28 
DEV_UPA_SH2
 | \

29 
DEV_UPA_SH3
 | \

30 
DEV_UPA_SH4
 | \

31 
DEV_UPA_SH5
 | \

32 
DEV_UPA_SH6
 | \

33 
DEV_UPA_SH7
 | \

34 
DEV_UPA_SH8
 | \

35 
DEV_UPA_SH9
 | \

36 
DEV_UPA_SH10
 | \

37 
DEV_UPA_SH11
 | \

38 
DEV_UPA_SHAVE_L2
 | \

39 
DEV_UPA_CDMA
 | \

40 
DEV_UPA_CTRL
 )

	)

43 
	#EXTRACLOCKS
 (
DEV_MSS_APB_SLV
 | \

44 
DEV_MSS_APB2_CTRL
 | \

45 
DEV_MSS_RTBRIDGE
 | \

46 
DEV_MSS_RTAHB_CTRL
 | \

47 
DEV_MSS_LRT
 | \

48 
DEV_MSS_LRT_DSU
 | \

49 
DEV_MSS_LRT_L2C
 | \

50 
DEV_MSS_LRT_ICB
 | \

51 
DEV_MSS_AXI_BRIDGE
 | \

52 
DEV_MSS_MXI_CTRL
 )

	)

54 
	#L2CACHE_CFG
 (
SHAVE_L2CACHE_NORMAL_MODE
)

	)

59 
u32
 
__l2_c⁄fig
 
__©åibuã__
((
£˘i⁄
(".l2.mode"))Ë
L2CACHE_CFG
;

70 
	$öôClocksAndMem‹y
()

72 
i
;

74 
tyAuxClkDividîCfg
 
≠pAuxClkCfg
[] =

84 
tySocClockC⁄fig
 
≠pClockC⁄fig600_266
 =

86 .
ªfClk0I≈utKhz
 = 12000,

87 .
ªfClk1I≈utKhz
 = 0,

88 .
èrgëPŒ0FªqKhz
 = 600000,

89 .
èrgëPŒ1FªqKhz
 = 0,

93 .
˛kSrcPŒ1
 = 
CLK_SRC_REFCLK0
,

94 .
ma°îClkDivNumî©‹
 = 1,

95 .
ma°îClkDivDíomö©‹
 = 1,

96 .
cssDssClockE«bÀMask
 = 
DEFAULT_CORE_CSS_DSS_CLOCKS
,

97 .
mssClockE«bÀMask
 = 
EXTRACLOCKS
,

98 .
u∑ClockE«bÀMask
 = 
APP_UPA_CLOCKS
,

99 .
pAuxClkCfg
 = 
≠pAuxClkCfg
,

102 
	`DrvC¥Inô
();

103 
	`DrvC¥SëupClocks
(&
≠pClockC⁄fig600_266
);

105 
	`DrvDdrInôüli£
(
NULL
);

107 
	`DrvC¥SysDevi˚A˘i⁄
(
UPA_DOMAIN
, 
DEASSERT_RESET
, 
APP_UPA_CLOCKS
);

108 
	`DrvC¥SysDevi˚A˘i⁄
(
MSS_DOMAIN
, 
DEASSERT_RESET
, 
EXTRACLOCKS
);

111 
	`DrvLL2CFlushOpOnAŒLöes
(
LL2C_OPERATION_INVALIDATE
, 0);

114 
	`DrvShaveL2CacheSëupP¨tôi⁄
(
SHAVEPART16KB
);

117 
	`DrvShaveL2CacheAŒoˇãSëP¨tôi⁄s
();

120 
i
 = 0; i < 12; i++)

122 
	`DrvShaveL2CacheSëLSUP¨tId
(
i
, i % 
MAX_SHAVE_L2C_PARTITIONS
);

123 
	`DrvShaveL2CacheP¨tôi⁄InvÆid©e
(
i
 % 
MAX_SHAVE_L2C_PARTITIONS
);

127 
	}
}

	@Evaluation/ma2x5x/3DConvolution/leon/app_config.h

9 #i‚de‡
_APP_CONFIG_H_


10 
	#_APP_CONFIG_H_


	)

12 
	~<mv_ty≥s.h
>

14 
u32
 
__l2_c⁄fig
 ;

19 
öôClocksAndMem‹y
();

	@Evaluation/ma2x5x/3DConvolution/leon/conv4d.c

10 
	~<°dio.h
>

11 
	~<°dlib.h
>

12 
	~<swcShaveLﬂdî.h
>

13 
	~<DrvShaveL2Cache.h
>

14 
	~<DrvTimî.h
>

15 
	~<DrvLe⁄L2C.h
>

18 
	~"mvTís‹Api.h
"

20 
u32
 
smÆl4Dc⁄v0_°¨t
;

21 
u32
 
smÆl4Dc⁄v1_°¨t
;

22 
u32
 
smÆl4Dc⁄v2_°¨t
;

23 
u32
 
smÆl4Dc⁄v3_°¨t
;

24 
u32
 
smÆl4Dc⁄v4_°¨t
;

25 
u32
 
smÆl4Dc⁄v5_°¨t
;

26 
u32
 
smÆl4Dc⁄v6_°¨t
;

27 
u32
 
smÆl4Dc⁄v7_°¨t
;

28 
u32
 
smÆl4Dc⁄v8_°¨t
;

29 
u32
 
smÆl4Dc⁄v9_°¨t
;

30 
u32
 
smÆl4Dc⁄v10_°¨t
;

31 
u32
 
smÆl4Dc⁄v11_°¨t
;

33 
Â
 
	g°¨tShave
[
SHAVE_MAX_NO
] =

35 (
Â
)&
smÆl4Dc⁄v0_°¨t
,

36 (
Â
)&
smÆl4Dc⁄v1_°¨t
,

37 (
Â
)&
smÆl4Dc⁄v2_°¨t
,

38 (
Â
)&
smÆl4Dc⁄v3_°¨t
,

39 (
Â
)&
smÆl4Dc⁄v4_°¨t
,

40 (
Â
)&
smÆl4Dc⁄v5_°¨t
,

41 (
Â
)&
smÆl4Dc⁄v6_°¨t
,

42 (
Â
)&
smÆl4Dc⁄v7_°¨t
,

43 (
Â
)&
smÆl4Dc⁄v8_°¨t
,

44 (
Â
)&
smÆl4Dc⁄v9_°¨t
,

45 (
Â
)&
smÆl4Dc⁄v10_°¨t
,

46 (
Â
)&
smÆl4Dc⁄v11_°¨t


49 
	$c⁄v4d
(
mvTís‹Info
 *
öfoPå
, 
u32
 
fú°Shv
, u32 
œ°Shv
)

51 
u32
 
shaveNo
 = 
œ°Shv
 - 
fú°Shv
 + 1;

52 
u32
 
m≠sPîShave
 = 
öfoPå
->
ouçutM≠sNo
 / 
shaveNo
;

53 
u32
 
ªmaöedM≠s
 = 
öfoPå
->
ouçutM≠sNo
 % 
shaveNo
;

55 
u32
 
fú°M≠
 = 0;

56 
u32
 
œ°M≠
 = 0;

58 
u32
 
°¨ãdShv
 = 0;

59 
u32
 
shvIndex
 = 0; shvIndex < 
shaveNo
; shvIndex++)

61 
œ°M≠
 +
m≠sPîShave
;

62 if(
ªmaöedM≠s
 > 0)

64 
œ°M≠
++;

65 
ªmaöedM≠s
--;

68 
	`swcRe£tShave
(
fú°Shv
 + 
shvIndex
);

69 
	`swcSëAbsﬁuãDeÁu…Sèck
(
fú°Shv
 + 
shvIndex
);

71 
	`swcSèπShaveCC
(
fú°Shv
 + 
shvIndex
, (
u32
Ë
°¨tShave
[shvIndex + firstShv],

72 "iiiii", 
öfoPå
, 
fú°M≠
, 
œ°M≠
, 0, infoPå->
öputHeight
);

74 
fú°M≠
 = 
œ°M≠
;

75 
°¨ãdShv
++;

76 if(
œ°M≠
 > 
öfoPå
->
ouçutM≠sNo
)

81 
u32
 
shvIndex
 = 0; shvIndex < 
°¨ãdShv
; shvIndex++)

83 
	`swcWaôShave
(
fú°Shv
 + 
shvIndex
);

84 
	`DrvShaveL2CacheP¨tôi⁄Flush
–(
fú°Shv
 + 
shvIndex
Ë% 
MAX_SHAVE_L2C_PARTITIONS
);

87 
	}
}

	@Evaluation/ma2x5x/3DConvolution/leon/main.c

11 
	~<°rög.h
>

12 
	~<°dio.h
>

13 
	~<°dlib.h
>

14 
	~<m©h.h
>

17 
	~<mv_ty≥s.h
>

18 
	~<swcCrc.h
>

21 
	~<DrvTimî.h
>

22 
	~<DrvShaveL2Cache.h
>

23 
	~<DrvCmxDma.h
>

24 
	~<DrvC¥.h
>

27 
	~<UnôTe°Api.h
>

28 
	~<VcsHooksApi.h
>

29 
	~<Fp16C⁄vît.h
>

32 
	~"≠p_c⁄fig.h
"

33 
	~"mvTís‹Api.h
"

37 
	#SHAVES_NO
 12

	)

39 
	#MAX_INPUT_SIZE
 (20*1024*1024)

	)

40 
	#MAX_OUTPUT_SIZE
 (1*1024*1024)

	)

41 
	#MAX_TAPS_SIZE
 (150*1024)

	)

42 
	#MAX_FRAME_HEIGHT
 2048

	)

43 
	#MAX_CHANNEL_NO
 256

	)

47 
Â16
 
__©åibuã__
((
£˘i⁄
(".ddr_dúe˘.bss"), 
	$Æig√d
 (8))Ë
öputFøme
[
MAX_INPUT_SIZE
];

48 
Â16
 
	`__©åibuã__
((
	`£˘i⁄
(".ddr_dúe˘.bss"), 
	$Æig√d
 (8))Ë
ouçutFøme
[
MAX_OUTPUT_SIZE
];

49 
Â16
 
	`__©åibuã__
((
	`£˘i⁄
(".ddr_dúe˘.bss"), 
	$Æig√d
 (8))Ë
èps
[
MAX_TAPS_SIZE
];

50 
u8
 
	`__©åibuã__
((
	`£˘i⁄
(".ddr_dúe˘.d©a"), 
	$Æig√d
 (8))Ë
öputBPP
 = 2;

51 
u8
 
	`__©åibuã__
((
	`£˘i⁄
(".ddr_dúe˘.d©a"), 
	$Æig√d
 (8))Ë
ouçutBPP
 = 2;

52 
u8
 
	`__©åibuã__
((
	`£˘i⁄
(".ddr_dúe˘.d©a"), 
	$Æig√d
 (8))Ë
kî√lBPP
 = 2;

53 
u8
 
	`__©åibuã__
((
	`£˘i⁄
(".ddr_dúe˘.d©a"), 
	$Æig√d
 (8))Ë
ch™√lsNo
 = 64;

54 
u8
 
	`__©åibuã__
((
	`£˘i⁄
(".ddr_dúe˘.d©a"), 
	$Æig√d
 (8))Ë
ouçutM≠sNo
 = 192;

55 
u32
 
	`__©åibuã__
((
	`£˘i⁄
(".ddr_dúe˘.d©a"))Ë
öputWidth
 = 56;

56 
u32
 
	`__©åibuã__
((
	`£˘i⁄
(".ddr_dúe˘.d©a"))Ë
öputHeight
 = 56;

57 
u32
 
	`__©åibuã__
((
	`£˘i⁄
(".ddr_dúe˘.d©a"))Ë
kî√lSize
 = 3;

58 
u32
 
	`__©åibuã__
((
	`£˘i⁄
(".ddr_dúe˘.d©a"))Ë
c⁄vSize
 = 
k3x3
;

59 
u32
 
	`__©åibuã__
((
	`£˘i⁄
(".ddr_dúe˘.d©a"))Ë
c⁄vSåide
 = 
°ride1
;

60 
u32
 
	`__©åibuã__
((
	`£˘i⁄
(".ddr_dúe˘.d©a"))Ë
c⁄vD©aTy≥
 = 
hhhh
;

61 
u32
 
	`__©åibuã__
((
	`£˘i⁄
(".ddr_dúe˘.d©a"))Ë
öputSåide
 = 112;

64 
u32
 
	`__©åibuã__
((
	`£˘i⁄
(".ddr_dúe˘.d©a"))Ë
fú°Shave
;

65 
u32
 
	`__©åibuã__
((
	`£˘i⁄
(".ddr_dúe˘.d©a"))Ë
œ°Shave
;

67 
tyTimeSèmp
 
timî_d©a
;

68 
u64
 
cy˛esEœp£d
;

70 
Â32
 
	`__©åibuã__
((
	`£˘i⁄
(".ddr_dúe˘.d©a"))Ë
executi⁄Time
;

71 
u32
 
	`__©åibuã__
((
	`£˘i⁄
(".ddr_dúe˘.d©a"))Ë
Âs
;

72 
Â32
 
	`__©åibuã__
((
	`£˘i⁄
(".ddr_dúe˘.d©a"))Ë
gÊ›s
;

76 
	$checkOuçut
()

78 
u32
 
ouçutSåide
 = 
c⁄vSåide
 + 1;

79 i‡(
c⁄vSåide
 =
°ride8
)

80 
ouçutSåide
 = 8;

82 
u32
 
outIndex
 = 0;

83 
u32
 
îr‹No
 = 0;

84 
s32
 
fú°Eº‹EÀmítNumbî
 = -1;

86 
k
 = 0; k < 
ouçutM≠sNo
; k++)

87 
u32
 
i
 = 0; i < 
öputHeight
; i +
ouçutSåide
)

88 
u32
 
j
 = 0; j < 
öputWidth
; j +
ouçutSåide
)

90 i‡(
ouçutFøme
[
outIndex
] !
öputFøme
[
i
 * 
öputWidth
 + 
j
])

92 
îr‹No
++;

94 i‡(
fú°Eº‹EÀmítNumbî
 == -1)

96 
fú°Eº‹EÀmítNumbî
 = 
outIndex
;

98 
	`¥ötf
("%d: 0x%x 0x%x \n\n", ()
outIndex
,

99 
ouçutFøme
[
outIndex
], 
öputFøme
[
i
 * 
öputWidth
 + 
j
]);

100 
outIndex
++;

104 
outIndex
++;

108 
	}
}

110 
	$£tTís‹P¨ams
(
mvTís‹Info
* 
mvTís‹P¨am
, 
u32
 
width
, u32 
height
, u32 
∂™esNo
)

112 
	`UNUSED
(
width
);

113 
	`UNUSED
(
height
);

115 
u32
 
ouçutSåide
 = 
c⁄vSåide
 + 1;

116 i‡(
c⁄vSåide
 =
°ride8
)

117 
ouçutSåide
 = 8;

119 
j
 = 0; j < 
ch™√lsNo
; j++)

120 
mvTís‹P¨am
->
öput
[
j
] = (
u8
*)&
öputFøme
[
öputWidth
 * 
öputHeight
 * j];

122 
j
 = 0; j < 
ouçutM≠sNo
; j++)

123 
mvTís‹P¨am
->
ouçut
[
j
] = (
u8
*)&
ouçutFøme
[(
öputWidth
 / 
ouçutSåide
) *

124 (
öputHeight
 / 
ouçutSåide
Ë* 
j
];

126 
mvTís‹P¨am
->
c⁄vT≠s
 = (
u8
*)
èps
;

127 
mvTís‹P¨am
->
öputBPP
 = inputBPP;

128 
mvTís‹P¨am
->
ouçutBPP
 = outputBPP;

129 
mvTís‹P¨am
->
kî√lBPP
 = kernelBPP;

130 
mvTís‹P¨am
->
ch™√lsNo
 = 
∂™esNo
;

131 
mvTís‹P¨am
->
ouçutM≠sNo
 = outputMapsNo;

132 
mvTís‹P¨am
->
öputWidth
 = inputWidth;

133 
mvTís‹P¨am
->
öputHeight
 = inputHeight;

134 
mvTís‹P¨am
->
öputSåide
 = inputStride;

135 
mvTís‹P¨am
->
kî√lSize
 = kernelSize;

136 
mvTís‹P¨am
->
c⁄vSize
 = convSize;

137 
mvTís‹P¨am
->
c⁄vSåide
 = convStride;

138 
mvTís‹P¨am
->
c⁄vD©aTy≥
 = convDataType;

139 
	}
}

141 
	$ã°
(
u32
 
fú°Shv
, u32 
œ°Shv
, u32 
öputWidth
, u32 
öputHeight
, u32 
∂™esNo
)

143 
mvTís‹Info
 
mvTís‹P¨am
;

145 
	`£tTís‹P¨ams
(&
mvTís‹P¨am
, 
öputWidth
, 
öputHeight
, 
∂™esNo
);

148 
	`mem£t
(
ouçutFøme
, 0, (outputFrame));

151 
	`DrvTimîSèπTicksCou¡
(&
timî_d©a
);

153 
	`c⁄v4d
(&
mvTís‹P¨am
, 
fú°Shv
, 
œ°Shv
);

155 
	`DrvTimîGëEœp£dTicks
(&
timî_d©a
, &
cy˛esEœp£d
);

156 
executi⁄Time
 = 
	`DrvTimîTicksToMs
(
cy˛esEœp£d
);

157 
Âs
 = (
u32
)((
	`DrvC¥GëClockFªqKhz
(
SYS_CLK
, 
NULL
Ë* 1000Ë/ 
cy˛esEœp£d
);

158 
gÊ›s
 = (
Â32
)((
kî√lSize
 * kî√lSizê* 2Ë* 
ch™√lsNo
 * 
ouçutM≠sNo
 * (
öputWidth
 * 
öputHeight
Ë* (Â32)
Âs
 / 
	`pow
(10.0, 9));

160 
	`¥ötf
("Shave†%2ld: %9ld cy˛es, %6.2‡ms, %2lu fps, %5.2‡gÊ›†\n", 
œ°Shv
 - 
fú°Shv
 + 1,

161 (
u32
)
cy˛esEœp£d
, 
executi⁄Time
, 
Âs
, 
gÊ›s
);

163 
u32
 
ã°Pas£d
 = 
	`checkOuçut
();

165 
	`unôTe°As£π
(
ã°Pas£d
 == 1);

166 
	}
}

168 
	$maö
()

170 
	`unôTe°Inô
();

172 
	`öôClocksAndMem‹y
();

174 
	`¥ötf
("3D Convolution benchmark: conv3x3 on 64x192x56x56\n");

175 
	`¥ötf
("Sy°em fªquícy: %d Mhz\n\n", 
	`DrvC¥GëClockFªqKhz
(
SYS_CLK
, 
NULL
) / 1000);

178 
	`bzîo
(
èps
, 
ouçutM≠sNo
 * 
ch™√lsNo
 * 
kî√lSize
 * kî√lSizê* 
kî√lBPP
);

179 
i
 = 0; i < 
ouçutM≠sNo
; i++)

180 
èps
[
kî√lSize
 * kî√lSizê/ 2 + 
ch™√lsNo
 * kî√lSizê* kî√lSizê* 
i
] = 0x3c00;

183 
a
 = 255.0;

184 
u32
 
i
 = 0; i < (
öputWidth
 * 
öputHeight
 * 
ch™√lsNo
); i++)

186 
x
 = ()
	`ønd
(Ë/ (()
RAND_MAX
 / 
a
);

187 
öputFøme
[
i
] = 
	`f32Tof16
(
x
);

191 
u32
 
i
 = 0; i < 
SHAVES_NO
; i++)

192 
	`ã°
(0, 
i
, 
öputWidth
, 
öputHeight
, 
ch™√lsNo
);

194 
	`unôTe°FöÆRï‹t
();

197 
	}
}

	@Evaluation/ma2x5x/3DConvolution/shared/mvTensorApi.h

9 #i‚de‡
__MV_TENSOR_DEFINES_H__


10 
	#__MV_TENSOR_DEFINES_H__


	)

14 
	~"mv_ty≥s.h
"

18 
	#SIZE_NO
 5

	)

19 
	#STRIDE_NO
 5

	)

20 
	#TYPE_NO
 3

	)

21 
	#MAX_CHANNELS
 256

	)

22 
	#MAX_OUTPUT_MAPS
 200

	)

23 
	#TOTAL_SHV_LOCAL_BUFF_SIZE
 (35*1024)

	)

24 
	#SHAVE_MAX_NO
 12

	)

25 
	#PADDING
 16

	)

27 
	ec⁄vD©aTy≥Enum


29 
	mxhhx
,

30 
	mhhhh
,

31 
	mhhhx


34 
	ec⁄vSizeEnum


36 
	mk3x3
,

37 
	mk5x5
,

38 
	mk7x7
,

39 
	mk9x9
,

40 
	mk11x11


43 
	ec⁄vSåideEnum


45 
	m°ride1
,

46 
	m°ride2
,

47 
	m°ride3
,

48 
	m°ride4
,

49 
	m°ride8


54 
u8
 *
	möput
[
MAX_CHANNELS
];

55 
u8
 *
	mouçut
[
MAX_OUTPUT_MAPS
];

56 
u8
 *
	mc⁄vT≠s
;

57 
u8
 
	möputBPP
;

58 
u8
 
	mouçutBPP
;

59 
u8
 
	mkî√lBPP
;

60 
u8
 
	mch™√lsNo
;

61 
u8
 
	mouçutM≠sNo
;

62 
u32
 
	möputWidth
;

63 
u32
 
	möputHeight
;

64 
u32
 
	möputSåide
;

65 
u32
 
	mkî√lSize
;

66 
c⁄vSizeEnum
 
	mc⁄vSize
;

67 
c⁄vSåideEnum
 
	mc⁄vSåide
;

68 
c⁄vD©aTy≥Enum
 
	mc⁄vD©aTy≥
;

69 } 
	tmvTís‹Info
;

71 (*
	tÂ
)(
	tmvTís‹Info
*, 
	tu32
);

75 
	`c⁄v4d
(
mvTís‹Info
 *
öfoPå
, 
u32
 
fú°Shv
, u32 
œ°Shv
);

	@Evaluation/ma2x5x/3DConvolution/shave/mvTensorShaveDefines.h

9 #i‚de‡
__MV_TENSOR_SHV_DEF_H__


10 
	#__MV_TENSOR_SHV_DEF_H__


	)

14 
	~"mv_ty≥s.h
"

17 
	~<c⁄vﬁuti⁄3x3Fp16ToFp16.h
>

18 
	~<c⁄vﬁuti⁄5x5Fp16ToFp16.h
>

19 
	~<c⁄vﬁuti⁄7x7Fp16ToFp16.h
>

20 
	~<c⁄vﬁuti⁄9x9Fp16ToFp16.h
>

21 
	~<c⁄vﬁuti⁄3x3s2hhhh.h
>

22 
	~<c⁄vﬁuti⁄3x3s3hhhh.h
>

23 
	~<c⁄vﬁuti⁄3x3s4hhhh.h
>

24 
	~<c⁄vﬁuti⁄3x3s8hhhh.h
>

25 
	~<c⁄vﬁuti⁄5x5s2hhhh.h
>

26 
	~<c⁄vﬁuti⁄5x5s3hhhh.h
>

27 
	~<c⁄vﬁuti⁄5x5s4hhhh.h
>

28 
	~<c⁄vﬁuti⁄5x5s8hhhh.h
>

29 
	~<c⁄vﬁuti⁄7x7s2hhhh.h
>

30 
	~<c⁄vﬁuti⁄7x7s4hhhh.h
>

31 
	~<c⁄vﬁuti⁄7x7s8hhhh.h
>

32 
	~<c⁄vﬁuti⁄9x9s2hhhh.h
>

33 
	~<c⁄vﬁuti⁄9x9s3hhhh.h
>

34 
	~<c⁄vﬁuti⁄9x9s4hhhh.h
>

35 
	~<c⁄vﬁuti⁄9x9s8hhhh.h
>

36 
	~<c⁄vﬁuti⁄11x11s1hhhh.h
>

37 
	~<c⁄vﬁuti⁄11x11s2hhhh.h
>

38 
	~<c⁄vﬁuti⁄11x11s4hhhh.h
>

39 
	~<c⁄vﬁuti⁄11x11s8hhhh.h
>

41 
	~<accumuœãFp16.h
>

43 
	~"../sh¨ed/mvTís‹Api.h
"

47 
	#MAX_KERNEL_SIZE
 11

	)

48 
hÆf
 
	töput_t
;

49 
hÆf
 
	touçut_t
;

50 
hÆf
 
	tèps_t
;

52 (*
	tFUNCPTR_T
)(**
	ta
,

53 **
	tb
,

54 *
	tc
,

55 
	tu32
 
	twidth
);

57 
FUNCPTR_T
 
c⁄vM©rix
[
SIZE_NO
][
STRIDE_NO
][
TYPE_NO
] =

61 {
NULL
, (
FUNCPTR_T
)
mvcvC⁄vﬁuti⁄3x3Fp16ToFp16_asm
, NULL} ,

62 {
NULL
, (
FUNCPTR_T
)
mvcvC⁄vﬁuti⁄3x3s2hhhh_asm
, NULL},

63 {
NULL
, (
FUNCPTR_T
)
mvcvC⁄vﬁuti⁄3x3s3hhhh_asm
, NULL},

64 {
NULL
, (
FUNCPTR_T
)
mvcvC⁄vﬁuti⁄3x3s4hhhh_asm
, NULL},

65 {
NULL
, (
FUNCPTR_T
)
mvcvC⁄vﬁuti⁄3x3s8hhhh_asm
, NULL}

69 {
NULL
, (
FUNCPTR_T
)
mvcvC⁄vﬁuti⁄5x5Fp16ToFp16_asm
, NULL},

70 {
NULL
, (
FUNCPTR_T
)
mvcvC⁄vﬁuti⁄5x5s2hhhh_asm
, NULL},

71 {
NULL
, (
FUNCPTR_T
)
mvcvC⁄vﬁuti⁄5x5s3hhhh_asm
, NULL},

72 {
NULL
, (
FUNCPTR_T
)
mvcvC⁄vﬁuti⁄5x5s4hhhh_asm
, NULL},

73 {
NULL
, (
FUNCPTR_T
)
mvcvC⁄vﬁuti⁄5x5s8hhhh_asm
, NULL}

77 {
NULL
, (
FUNCPTR_T
)
mvcvC⁄vﬁuti⁄7x7Fp16ToFp16_asm
, NULL},

78 {
NULL
, (
FUNCPTR_T
)
mvcvC⁄vﬁuti⁄7x7s2hhhh_asm
, NULL},

79 {
NULL
, NULL, NULL},

80 {
NULL
, (
FUNCPTR_T
)
mvcvC⁄vﬁuti⁄7x7s4hhhh_asm
, NULL},

81 {
NULL
, (
FUNCPTR_T
)
mvcvC⁄vﬁuti⁄7x7s8hhhh_asm
, NULL}

85 {
NULL
, (
FUNCPTR_T
)
mvcvC⁄vﬁuti⁄9x9Fp16ToFp16_asm
, NULL},

86 {
NULL
, (
FUNCPTR_T
)
mvcvC⁄vﬁuti⁄9x9s2hhhh_asm
, NULL},

87 {
NULL
, (
FUNCPTR_T
)
mvcvC⁄vﬁuti⁄9x9s3hhhh_asm
, NULL},

88 {
NULL
, (
FUNCPTR_T
)
mvcvC⁄vﬁuti⁄9x9s4hhhh_asm
, NULL},

89 {
NULL
, (
FUNCPTR_T
)
mvcvC⁄vﬁuti⁄9x9s8hhhh_asm
, NULL}

93 {
NULL
, (
FUNCPTR_T
)
mvcvC⁄vﬁuti⁄11x11s1hhhh_asm
, NULL},

94 {
NULL
, (
FUNCPTR_T
)
mvcvC⁄vﬁuti⁄11x11s2hhhh_asm
, NULL},

95 {
NULL
, (
FUNCPTR_T
)
mvcvC⁄vﬁuti⁄11x11s4hhhh_asm
, NULL},

96 {
NULL
, (
FUNCPTR_T
)
mvcvC⁄vﬁuti⁄11x11s8hhhh_asm
, NULL}

98 
	}
};

	@Evaluation/ma2x5x/3DConvolution/shave/startShave.c

9 
	~<svuComm⁄Shave.h
>

10 
	~<swcCdma.h
>

11 
	~<°dio.h
>

12 
	~<°rögs.h
>

14 
	~"mvTís‹Api.h
"

15 
	~"mvTís‹ShaveDeföes.h
"

17 
	#IN_BUFF_SIZE
 7000

	)

18 
	#OUT_BUFF_SIZE
 6500

	)

21 
u8
 
__©åibuã__
(–
	$Æig√d
 (8))Ë
loˇlI≈ut
 [
IN_BUFF_SIZE
];

22 
u8
 
	`__©åibuã__
(–
	$Æig√d
 (8))Ë
loˇlI≈ut1
[
IN_BUFF_SIZE
];

25 
u8
 
	`__©åibuã__
(–
	$Æig√d
 (8))Ë
loˇlOuçutTmp
[
OUT_BUFF_SIZE
];

26 
u8
 
	`__©åibuã__
(–
	$Æig√d
 (8))Ë
loˇlOuçut
 [
OUT_BUFF_SIZE
];

27 
u8
 
	`__©åibuã__
(–
	$Æig√d
 (8))Ë
loˇlOuçut1
 [
OUT_BUFF_SIZE
];

28 
u8
 
	`__©åibuã__
(–
	$Æig√d
 (8))Ë
loˇlOuçut2
 [
OUT_BUFF_SIZE
];

29 
u8
 
	`__©åibuã__
(–
	$Æig√d
 (8))Ë
loˇlOuçut3
 [
OUT_BUFF_SIZE
];

32 
öput_t
 
	`__©åibuã__
(–
	`Æig√d
 (8))Ë*
öputPå
[
MAX_KERNEL_SIZE
];

34 
dmaTønß˘i⁄Li°_t
 
	`__©åibuã__
((
	`£˘i⁄
(".cmx.cdmaDes¸ùt‹s"))Ë
èsk1
;

35 
dmaTønß˘i⁄Li°_t
 
	`__©åibuã__
((
	`£˘i⁄
(".cmx.cdmaDes¸ùt‹s"))Ë
èsk2
;

38 
	$°¨t
(
mvTís‹Info
 *
öfo
, 
u32
 
fú°M≠No
, u32 
œ°M≠No
, 
s32
 
fú°LöeNo
, u32 
imgHeight
)

40 
	`UNUSED
(
imgHeight
);

42 i‡(
fú°LöeNo
 != 0) {

43 
	`¥ötf
("fatalÉrror, firstLineNo must be zero\n");

44 
	`exô
(1);

48 
u32
 
°rideSize
 = 
öfo
->
c⁄vSåide
 + 1;

49 i‡(
öfo
->
c⁄vSåide
 =
°ride8
)

50 
°rideSize
 = 8;

53 
u32
 
èpsSize
 = 
öfo
->
kî√lSize
 * info->kî√lSizê* info->
öputBPP
;

54 
u32
 
öputSize
 = 
öfo
->
öputHeight
 * info->
öputWidth
 * info->
öputBPP
;

55 
u32
 
fú°Padd
 = 32;

56 
u32
 
∑ddBëwìnLöes
 = 
öfo
->
kî√lSize
 / 2 * info->
öputBPP
;

59 
u32
 
m≠LöeByãs
 = 
öfo
->
öputWidth
 * info->
öputBPP
;

60 
u32
 
m≠LöePaddedByãs
 = 
m≠LöeByãs
 + 
∑ddBëwìnLöes
;

61 
u32
 
m≠SizeByãs
 = 
m≠LöeByãs
 * 
öfo
->
öputHeight
;

62 
u32
 
m≠SizePaddedByãs
 = 
m≠LöePaddedByãs
 * 
öfo
->
öputHeight
 + 2 * 
fú°Padd
;

65 i‡(
m≠SizePaddedByãs
 > (
loˇlI≈ut
)) {

66 
	`¥ötf
("FATALÉº‹: buf„∏√eded (%iËex˚ed†avaûabÀ (%i)\n", 
m≠SizePaddedByãs
, (
loˇlI≈ut
));

67 
	`exô
(1);

70 i‡(
m≠SizeByãs
 > (
loˇlOuçut
)) {

71 
	`¥ötf
("FATALÉº‹, buf„∏√eded (%iËex˚ed†avaûabÀ (%i)\n", 
m≠SizeByãs
, (
loˇlOuçut
));

72 
	`¥ötf
("\n");

73 
	`exô
(1);

77 
u8
 *
loˇlOuçutBa£På
 = &
loˇlOuçut
[0];

78 
u8
 *
loˇlOuçutBa£På1
 = &
loˇlOuçut1
[0];

79 
u8
 *
loˇlOuçutBa£På2
 = &
loˇlOuçut2
[0];

80 
u8
 *
loˇlOuçutBa£På3
 = &
loˇlOuçut3
[0];

82 
u8
 *
öputBuf„r
 = 
loˇlI≈ut
;

83 
u8
 *
¥e„tchBuf„r
 = 
loˇlI≈ut
;

86 
u32
 
id
 = 
	`dmaInôReque°î
(1);

87 
dmaTønß˘i⁄Li°_t
 *
öpuåef
;

88 
dmaTønß˘i⁄Li°_t
 *
ªf2
;

91 
FUNCPTR_T
 
f
 = 
c⁄vM©rix
[
öfo
->
c⁄vSize
][öfo->
c⁄vSåide
][öfo->
c⁄vD©aTy≥
];

94 
u32
 
m≠No
 = 
fú°M≠No
;

95 
m≠No
 < 
œ°M≠No
)

97 
	`bzîo
(
loˇlOuçut
, (localOutput));

98 
	`bzîo
(
loˇlOuçut1
, (localOutput1));

99 
	`bzîo
(
loˇlOuçut2
, (localOutput2));

100 
	`bzîo
(
loˇlOuçut3
, (localOutput3));

102 
u32
 
ouçutLöeNo
 = 
öfo
->
öputHeight
;

103 
u32
 
µ_idx
 = 0;

106 
u8
* 
öputAddr
 = (u8*)
öfo
->
öput
[0];

108 
öpuåef
 = 
	`dmaCª©eTønß˘i⁄FuŒO±i⁄s
(

109 
id
,

110 &
èsk1
,

111 
öputAddr
,

112 
¥e„tchBuf„r
 + 
m≠LöeByãs
 + 
fú°Padd
,

113 
öputSize
,

114 
m≠LöeByãs
,

115 
m≠LöeByãs
,

116 
m≠LöeByãs
,

117 
m≠LöeByãs
 + 
∑ddBëwìnLöes
);

118 
	`dmaSèπLi°Task
(
öpuåef
);

121 
ch™√lIndex
 = 0; ch™√lIndex < 
öfo
->
ch™√lsNo
; channelIndex++)

124 
	`dmaWaôTask
(
öpuåef
);

127 i‡(
µ_idx
 == 0)

129 
öputBuf„r
 = 
loˇlI≈ut
;

130 
¥e„tchBuf„r
 = 
loˇlI≈ut1
;

131 
µ_idx
 = 1;

135 
öputBuf„r
 = 
loˇlI≈ut1
;

136 
¥e„tchBuf„r
 = 
loˇlI≈ut
;

137 
µ_idx
 = 0;

141 i‡((
ch™√lIndex
+1Ë< (
öfo
->
ch™√lsNo
))

143 
öputAddr
 = (
u8
*)
öfo
->
öput
[(
ch™√lIndex
+1)];

145 
öpuåef
 = 
	`dmaCª©eTønß˘i⁄FuŒO±i⁄s
(

146 
id
,

147 &
èsk1
,

148 
öputAddr
,

149 
¥e„tchBuf„r
 + 
m≠LöeByãs
 + 
fú°Padd
,

150 
öputSize
,

151 
m≠LöeByãs
,

152 
m≠LöeByãs
,

153 
m≠LöeByãs
,

154 
m≠LöeByãs
 + 
∑ddBëwìnLöes
);

156 
	`dmaSèπLi°Task
(
öpuåef
);

161 
öputPå
[0] = (
öput_t
*)(&
öputBuf„r
[0 * (
öfo
->
öputWidth
 * info->
öputBPP
Ë+ 
fú°Padd
 - 
∑ddBëwìnLöes
]);

162 
öputPå
[1] = (
öput_t
*)(&
öputBuf„r
[1 * (
öfo
->
öputWidth
 * info->
öputBPP
Ë+ 
fú°Padd
]);

163 
öputPå
[2] = (
öput_t
*)(&
öputBuf„r
[2 * (
öfo
->
öputWidth
 * info->
öputBPP
 + 
∑ddBëwìnLöes
Ë+ 
fú°Padd
]);

166 
öputPå
[0] = (
öput_t
*)(((
u32
)inputPtr[0]) & ~7);

167 
öputPå
[1] = (
öput_t
*)(((
u32
)inputPtr[1]) & ~7);

168 
öputPå
[2] = (
öput_t
*)(((
u32
)inputPtr[2]) & ~7);

170 
u8
 *
±rAux
 = &
loˇlOuçutTmp
[0];

171 
u8
 **
doubÀPåAux
 = &
±rAux
;

172 
u32
 
èpsOff£t
 = 
èpsSize
 * 
öfo
->
ch™√lsNo
 * 
m≠No
 + 
ch™√lIndex
 *ÅapsSize;

174 
±rAux
 = (
u8
*)(((
u32
)ptrAux) & ~7);

177 
	`f
((**)
öputPå
, (**)
doubÀPåAux
, &
öfo
->
c⁄vT≠s
[
èpsOff£t
], info->
öputWidth
*öfo->
öputHeight
 + info->inputHeight);

180 
	`mvcvAccumuœãFp16_asm
((
hÆf
**)&
loˇlOuçutBa£På
, (hÆf**)
doubÀPåAux
, (
öfo
->
öputWidth
 / 
°rideSize
)*
ouçutLöeNo
 + info->
öputHeight
);

183 if((
m≠No
 + 1Ë< 
œ°M≠No
)

185 
u32
 
èpsOff£t
 = 
èpsSize
 * 
öfo
->
ch™√lsNo
 * (
m≠No
 + 1Ë+ 
ch™√lIndex
 *ÅapsSize;

187 
	`f
((**)
öputPå
, (**)
doubÀPåAux
, &
öfo
->
c⁄vT≠s
[
èpsOff£t
], info->
öputWidth
*öfo->
öputHeight
 + info->inputHeight);

189 
	`mvcvAccumuœãFp16_asm
((
hÆf
**)&
loˇlOuçutBa£På1
, (hÆf**)
doubÀPåAux
, (
öfo
->
öputWidth
 / 
°rideSize
)*
ouçutLöeNo
 + info->
öputHeight
);

193 if((
m≠No
 + 2Ë< 
œ°M≠No
)

195 
u32
 
èpsOff£t
 = 
èpsSize
 * 
öfo
->
ch™√lsNo
 * (
m≠No
 + 2Ë+ 
ch™√lIndex
 *ÅapsSize;

197 
	`f
((**)
öputPå
, (**)
doubÀPåAux
, &
öfo
->
c⁄vT≠s
[
èpsOff£t
], info->
öputWidth
*öfo->
öputHeight
 + info->inputHeight);

199 
	`mvcvAccumuœãFp16_asm
((
hÆf
**)&
loˇlOuçutBa£På2
, (hÆf**)
doubÀPåAux
, (
öfo
->
öputWidth
 / 
°rideSize
)*
ouçutLöeNo
 + info->
öputHeight
);

203 if((
m≠No
 + 3Ë< 
œ°M≠No
)

205 
u32
 
èpsOff£t
 = 
èpsSize
 * 
öfo
->
ch™√lsNo
 * (
m≠No
 + 3Ë+ 
ch™√lIndex
 *ÅapsSize;

207 
	`f
((**)
öputPå
, (**)
doubÀPåAux
, &
öfo
->
c⁄vT≠s
[
èpsOff£t
], info->
öputWidth
*öfo->
öputHeight
 + info->inputHeight);

209 
	`mvcvAccumuœãFp16_asm
((
hÆf
**)&
loˇlOuçutBa£På3
, (hÆf**)
doubÀPåAux
, (
öfo
->
öputWidth
 / 
°rideSize
)*
ouçutLöeNo
 + info->
öputHeight
);

213 
u32
 
ouçutLöeSize
 = (
öfo
->
öputWidth
 / 
°rideSize
Ë* info->
ouçutBPP
;

216 
ªf2
 = 
	`dmaCª©eTønß˘i⁄SrcSåide
(

217 
id
,

218 &
èsk1
,

219 
loˇlOuçut
,

220 
öfo
->
ouçut
[
m≠No
],

221 
ouçutLöeSize
 * 
ouçutLöeNo
,

222 
ouçutLöeSize
,

223 
ouçutLöeSize
 + 
∑ddBëwìnLöes
);

225 
	`dmaSèπLi°Task
(
ªf2
);

226 
	`dmaWaôTask
(
ªf2
);

227 
m≠No
++;

229 if(
m≠No
 < 
œ°M≠No
)

231 
ªf2
 = 
	`dmaCª©eTønß˘i⁄SrcSåide
(

232 
id
,

233 &
èsk1
,

234 
loˇlOuçut1
,

235 
öfo
->
ouçut
[
m≠No
],

236 
ouçutLöeSize
 * 
ouçutLöeNo
,

237 
ouçutLöeSize
,

238 
ouçutLöeSize
 + 
∑ddBëwìnLöes
);

240 
	`dmaSèπLi°Task
(
ªf2
);

241 
	`dmaWaôTask
(
ªf2
);

242 
m≠No
++;

245 if(
m≠No
 < 
œ°M≠No
)

247 
ªf2
 = 
	`dmaCª©eTønß˘i⁄SrcSåide
(

248 
id
,

249 &
èsk1
,

250 
loˇlOuçut2
,

251 
öfo
->
ouçut
[
m≠No
],

252 
ouçutLöeSize
 * 
ouçutLöeNo
,

253 
ouçutLöeSize
,

254 
ouçutLöeSize
 + 
∑ddBëwìnLöes
);

256 
	`dmaSèπLi°Task
(
ªf2
);

257 
	`dmaWaôTask
(
ªf2
);

258 
m≠No
++;

261 if(
m≠No
 < 
œ°M≠No
)

263 
ªf2
 = 
	`dmaCª©eTønß˘i⁄SrcSåide
(

264 
id
,

265 &
èsk1
,

266 
loˇlOuçut3
,

267 
öfo
->
ouçut
[
m≠No
],

268 
ouçutLöeSize
 * 
ouçutLöeNo
,

269 
ouçutLöeSize
,

270 
ouçutLöeSize
 + 
∑ddBëwìnLöes
);

272 
	`dmaSèπLi°Task
(
ªf2
);

273 
	`dmaWaôTask
(
ªf2
);

274 
m≠No
++;

278 
SHAVE_HALT
;

279 
	}
}

	@Evaluation/ma2x5x/DDRBandwidth/leon/app_config.c

11 
	~<DrvC¥.h
>

12 
	~<DrvShaveL2Cache.h
>

13 
	~"≠p_c⁄fig.h
"

14 
	~<DrvLe⁄L2C.h
>

15 
	~"DrvDdr.h
"

19 
	#L2CACHE_CFG
 (
SHAVE_L2CACHE_NORMAL_MODE
)

	)

33 
	$öôClocksAndMem‹y
()

35 
tyAuxClkDividîCfg
 
auxClkAŒOn
[] =

37 {
AUX_CLK_MASK_UART
, 
CLK_SRC_REFCLK0
, 96, 625},

41 
tySocClockC⁄fig
 
˛ocksC⁄fig
 =

43 .
ªfClk0I≈utKhz
 = 12000,

44 .
ªfClk1I≈utKhz
 = 0,

45 .
èrgëPŒ0FªqKhz
 = 600000,

46 .
èrgëPŒ1FªqKhz
 = 0,

47 .
˛kSrcPŒ1
 = 
CLK_SRC_REFCLK0
,

48 .
ma°îClkDivNumî©‹
 = 1,

49 .
ma°îClkDivDíomö©‹
 = 1,

50 .
cssDssClockE«bÀMask
 = 
DEFAULT_CORE_CSS_DSS_CLOCKS
,

51 .
mssClockE«bÀMask
 = 0,

52 .
u∑ClockE«bÀMask
 = 
UPA_SHAVE_L2
,

53 .
pAuxClkCfg
 = 
auxClkAŒOn
,

56 
	`DrvC¥Inô
();

57 
	`DrvC¥SëupClocks
(&
˛ocksC⁄fig
);

60 
	}
}

	@Evaluation/ma2x5x/DDRBandwidth/leon/app_config.h

9 #i‚de‡
_APP_CONFIG_H_


10 
	#_APP_CONFIG_H_


	)

12 
	~<mv_ty≥s.h
>

15 
	#DEFAULT_APP_CLOCK_KHZ
 500000

	)

16 
	#DEFAULT_OSC_CLOCK_KHZ
 12000

	)

21 
öôClocksAndMem‹y
();

	@Evaluation/ma2x5x/DDRBandwidth/leon/main.c

11 
	~<°dio.h
>

12 
	~<°dlib.h
>

13 
	~<°rög.h
>

14 
	~<swcTe°Utûs.h
>

15 
	~<DrvDdr.h
>

16 
	~<UnôTe°Api.h
>

17 
	~"≠p_c⁄fig.h
"

18 
	~"DrvLe⁄L2C.h
"

19 
	~"DrvCmxDma.h
"

20 
	~"DrvTimî.h
"

21 
	~"swcLe⁄Utûs.h
"

22 
	~"DrvSvu.h
"

23 
	~"DrvC¥.h
"

24 
	~"DrvShaveL2Cache.h
"

32 
	#CMX_BEGIN
 (0x70000000ul)

	)

34 
	#CMX_END
 (0x70000000u»+ 2*1024*1024)

	)

37 
	#¨øySize
(
¨øy
Ë(((◊ºay)))/(◊ºay)[0]))

	)

40 
	#BUFF_SIZE
 (1024 * 1024)

42 
	#AddrRñToCMX
(
ªœtiveAddªss
Ë(0x70000000ul+‘ñ©iveAddªss))

	)

44 (*
	tÀ⁄Exec
)(
	tu32
 
	tpFuncMem˝y
, 
	tu8
* 
	td°
, u8* 
	t§c
, u32 
	tsize
, u8 
	tshaves
);

47 
u8
 * 
‰om
;

48 
u8
 * 
to
;

49 }
	tå™s„rLoˇti⁄
;

53 
	`__©åibuã__
((
	`£˘i⁄
(".cmx.d©a"))Ëvﬁ©ûê
u32
 
°›AŒShaves
;

54 vﬁ©ûê
u32
 
shave_ticks
;

55 vﬁ©ûê
u32
 
shave_å™ß˘i⁄s
;

58 
u8
 
shave_svuMem˝yAsm
, 
shave_svuMem˝yDMA
, 
shave_svuSy°emTe°DMA
;

61 
u8
 
shave_cmx_buff
;

64 
u8
 
shavedy∆ib
;

67 
u32
 *
___globÆTaû
[4];

69 
u32
 **
shave_èû
[];

71 
u32
 
sys˛k
;

76 
u32
 
vîifiˇti⁄Pas£d
 = 1;

77 
u32
 
u£Ca£
 = 1;

79 
u8
 *
ddr_buff0
=(u8*)0x80000000;

80 
u8
 *
ddr_buff1
=(u8*)0x81000000;

88 
	$¥ëtyPrötSize
(
u32
 
size
)

90 if(
size
<1024){

91 
	`¥ötf
("%3lu B",
size
);

94 
	`¥ötf
("%3luKB",
size
/1024);

96 
	}
}

98 
u32
 
	$addªssInCMX
(
u32
 
addªss
)

100 i‡((
CMX_BEGIN
 <
addªss
Ë&& (addªs†< 
CMX_END
))

104 
	}
}

106 
	$¥ëtyPrötMemTy≥
(
u32
 
addªss
)

109 i‡–
	`addªssInCMX
(
addªss
) )

110 
	`¥ötf
(" CMX ");

112 
	`¥ötf
(" DDR ");

113 
	}
}

116 
	$fûlBuf„r
(
u8
 *
d©a
, 
u32
 
size
)

118 
u32
 
i
 = 0; i < 
size
; i++)

119 
d©a
[
i
] = i;

120 
	}
}

123 
Â32
 
	$cy˛esToTime
(
u32
 
cy˛es
)

126  (0.001f/(
Â32
)
sys˛k
)*
cy˛es
;

127 
	}
}

130 * 
	$c⁄vîtToUnˇchedAddr
(* 
addr
)

132 i‡((
u32
Ë
addr
 & 0x80000000)

133 
addr
 = (*Ë((
u32
)áddr | 0x40000000);

136 
addr
 = (*Ë((
u32
)áddr | 0x08000000);

137  
addr
;

138 
	}
}

140 
u32
 
	$gëShaveV¨
(
u32
 
shaveNr
, u32 
ªlAddr
)

142 
	`swcLe⁄DißbÀCaches
();

143 
u32
 
shaveTicks
*(u32*)
	`c⁄vîtToUnˇchedAddr
((*)
	`swcSﬁveShaveRñAddr
(
ªlAddr
,
shaveNr
));

144 
	`swcLe⁄E«bÀCaches
(1);

146  
shaveTicks
;

147 
	}
}

149 
	$£tSvuO√BigP¨tôi⁄
()

151 
u32
 
shaveIndex
;

153 
u32
 
shaveIndex
=0;shaveIndex<12;shaveIndex++)

155 
	`swcSëAbsﬁuãDeÁu…Sèck
(
shaveIndex
);

156 
	`swcSëShaveWödowsToDeÁu…
(
shaveIndex
);

159 
	`DrvShaveL2CacheSëMode
(
SHAVEL2C_MODE_NORMAL
);

161 
	`DrvShaveL2CacheCÀ¨P¨tôi⁄s
();

163 
	`DrvShaveL2CacheSëupP¨tôi⁄
(
SHAVEPART256KB
);

165 
	`DrvShaveL2CacheAŒoˇãSëP¨tôi⁄s
();

167 
shaveIndex
 = 0; shaveIndex < 12; shaveIndex++)

169 
	`DrvShaveL2CacheSëLSUP¨tId
(
shaveIndex
, 0);

171 
shaveIndex
=0;shaveIndex<12;shaveIndex++){

172 
	`DrvShaveL2CacheP¨tôi⁄FlushAndInvÆid©e
(
shaveIndex
 % 
MAX_SHAVE_L2C_PARTITIONS
);

174 
	}
}

176 
	$£tSvuSevîÆSmÆlP¨tôi⁄s
()

178 
u32
 
shaveIndex
;

180 
u32
 
shaveIndex
=0;shaveIndex<12;shaveIndex++)

182 
	`swcSëAbsﬁuãDeÁu…Sèck
(
shaveIndex
);

183 
	`swcSëShaveWödowsToDeÁu…
(
shaveIndex
);

187 
	`DrvShaveL2CacheSëMode
(
SHAVEL2C_MODE_NORMAL
);

189 
	`DrvShaveL2CacheCÀ¨P¨tôi⁄s
();

191 
shaveIndex
=0;shaveIndex<12;shaveIndex++){

192 
	`DrvShaveL2CacheSëupP¨tôi⁄
(
SHAVEPART16KB
);

195 
	`DrvShaveL2CacheAŒoˇãSëP¨tôi⁄s
();

197 
shaveIndex
 = 0; shaveIndex < 12; shaveIndex++)

199 
	`DrvShaveL2CacheSëLSUP¨tId
(
shaveIndex
, shaveIndex % 
MAX_SHAVE_L2C_PARTITIONS
);

201 
shaveIndex
=0;shaveIndex<12;shaveIndex++){

202 
	`DrvShaveL2CacheP¨tôi⁄FlushAndInvÆid©e
(
shaveIndex
 % 
MAX_SHAVE_L2C_PARTITIONS
);

203 
	`DrvSvuL1D©aCacheCål
(
shaveIndex
, 
SVUL1INSTRCACHE_BYPASS
);

205 
	}
}

209 
	$vîifyD©a
(
u8
 *
d°
, u8 *
§c
, 
u32
 
size
)

211 
§c
 = 
	`c⁄vîtToUnˇchedAddr
(src);

212 
d°
 = 
	`c⁄vîtToUnˇchedAddr
(dst);

215 
u32
 
i
 = 0; i < 
size
; i++)

216 i‡(
§c
[
i
] !
d°
[i]){

217 
vîifiˇti⁄Pas£d
=0;

218 
	`¥ötf
("Faûed %lu\n", 
i
);

220 
	}
}

223 
	$À⁄Sh0Exec
(
u32
 
pFuncMem˝y
, 
u8
* 
d°
, u8* 
§c
, u32 
size
, u8 
shaves
){

224 c⁄° 
u8
 
shaveIndex
 = 0;

225 ()
shaves
;

227 
	`¥ëtyPrötMemTy≥
((
u32
)
§c
);

228 
	`¥ötf
("to");

229 
	`¥ëtyPrötMemTy≥
((
u32
)
d°
);

231 
	`mem£t
((
u8
*Ë
§c
, 0, 
size
);

232 
	`mem£t
((
u8
*Ë
d°
, 0, 
size
);

233 
	`fûlBuf„r
(
§c
, 
size
);

235 
	`swcLﬂdshvdlib
(&
shavedy∆ib
,
shaveIndex
);

236 
	`swcRe£tShave
(
shaveIndex
);

237 
	`swcShaveProfSèπG©hîögFõlds
(
shaveIndex
, 
PERF_CLK_CYCLE_COUNT
);

241 
u32
 **
pShvGlobÆTaû
 = (u32 **)
	`swcSﬁveShaveRñAddr
((u32)&
shave_èû
, 
shaveIndex
);

242 
pShvGlobÆTaû
[0] = (
u32
 *)(&
___globÆTaû
[0]);

243 
pShvGlobÆTaû
[1] = (
u32
 *)(&
___globÆTaû
[1]);

244 
pShvGlobÆTaû
[2] = (
u32
 *)(&
___globÆTaû
[2]);

245 
pShvGlobÆTaû
[3] = (
u32
 *)(&
___globÆTaû
[3]);

248 
	`swcSèπShaveCC
(
shaveIndex
, 
	`swcSﬁveShaveRñAddr
(
pFuncMem˝y
,shaveIndexË, "iii", (
u32
Ë
d°
, (u32Ë
§c
, 
size
);

249 
	`swcWaôShave
(
shaveIndex
);

251 
i
=0;i<
MAX_SHAVE_L2C_PARTITIONS
;i++)

252 
	`DrvShaveL2CacheP¨tôi⁄FlushAndInvÆid©e
(
i
);

255 
	`¥ötf
("%9.4‡MB/s", ((
Â32
)
size
 / (1024.0‡* 1024.0f)Ë/ (Â32Ë(
	`cy˛esToTime
(
	`gëShaveV¨
(
shaveIndex
,(
u32
)&
shave_ticks
))));

256 
	`vîifyD©a
(
d°
, 
§c
, 
size
);

257 
	}
}

260 
	$À⁄ShMu…ùÀExec
(
u32
 
pFuncMem˝y
, 
u8
* 
d°
, u8* 
§c
, u32 
size
, u8 
shaves
){

261 
u8
 
shaveIndex
;

262 
Â32
 
å™s„rR©e
 = 0.0;

263 
u64
 
À⁄Ticks1
 = 0;

264 
u64
 
À⁄Ticks2
 = 0;

265 
u32
 **
pShvGlobÆTaû
;

266 
u32
 
shave_svuCmxD°_buff
[12];

267 
u32
 
shave_svuCmxSrc_buff
[12];

268 
u32
 
shave_fun˘i⁄
[12];

270 c⁄° 
u32
 
ª≥©Cou¡
 = 1000;

272 
u32
 
shaveIndex
=0;shaveIndex<
shaves
;shaveIndex++)

274 
shave_svuCmxD°_buff
[
shaveIndex
]=
	`swcSﬁveShaveRñAddr
((
u32
)
d°
,shaveIndex);

275 
shave_svuCmxSrc_buff
[
shaveIndex
]=
	`swcSﬁveShaveRñAddr
((
u32
)
§c
,shaveIndex);

276 
shave_fun˘i⁄
[
shaveIndex
] =
	`swcSﬁveShaveRñAddr
(
pFuncMem˝y
,shaveIndex);

278 if(!
	`addªssInCMX
(
shave_svuCmxD°_buff
[
shaveIndex
])){

279 
shave_svuCmxD°_buff
[
shaveIndex
]+=
size
*shaveIndex;

281 if(!
	`addªssInCMX
(
shave_svuCmxSrc_buff
[
shaveIndex
])){

282 
shave_svuCmxSrc_buff
[
shaveIndex
]+=
size
*shaveIndex;

286 
	`¥ëtyPrötMemTy≥
((
u32
)
shave_svuCmxSrc_buff
[0]);

287 
	`¥ötf
("to");

288 
	`¥ëtyPrötMemTy≥
((
u32
)
shave_svuCmxD°_buff
[0]);

290 
u32
 
i
=0;i<
shaves
;i++){

291 
	`mem£t
((
u8
*Ë
shave_svuCmxD°_buff
[
i
], 0, 
size
);

292 
	`fûlBuf„r
((
u8
*)
shave_svuCmxSrc_buff
[
i
], 
size
);

295 
shaveIndex
=0;shaveIndex<
shaves
;shaveIndex++){

296 
	`swcRe£tShave
(
shaveIndex
);

297 
	`swcSëAbsﬁuãDeÁu…Sèck
(
shaveIndex
);

298 
	`swcLﬂdshvdlib
(&
shavedy∆ib
,
shaveIndex
);

299 
	`DrvShaveL2CacheP¨tôi⁄FlushAndInvÆid©e
(
shaveIndex
 % 
MAX_SHAVE_L2C_PARTITIONS
);

303 
pShvGlobÆTaû
 = (
u32
 **)
	`swcSﬁveShaveRñAddr
((u32)&
shave_èû
, 
shaveIndex
);

304 
pShvGlobÆTaû
[0] = (
u32
 *)(&
___globÆTaû
[0]);

305 
pShvGlobÆTaû
[1] = (
u32
 *)(&
___globÆTaû
[1]);

306 
pShvGlobÆTaû
[2] = (
u32
 *)(&
___globÆTaû
[2]);

307 
pShvGlobÆTaû
[3] = (
u32
 *)(&
___globÆTaû
[3]);

310 
shaveIndex
=0;shaveIndex<
shaves
;shaveIndex++){

311 
	`swcShaveProfSèπG©hîögFõlds
(
shaveIndex
, 
PERF_CLK_CYCLE_COUNT
);

314 
°›AŒShaves
=0;

315 
	`DrvTimîGëSy°emTicks64
(&
À⁄Ticks1
);

317 
shaveIndex
=0;shaveIndex<
shaves
;shaveIndex++){

318 
	`swcSèπShaveCC
(
shaveIndex
, 
shave_fun˘i⁄
[shaveIndex], "iiiii", 
shave_svuCmxD°_buff
[shaveIndex], 
shave_svuCmxSrc_buff
[shaveIndex], 
size
, 
ª≥©Cou¡
, &
°›AŒShaves
);

321 
shaveIndex
=0;shaveIndex<
shaves
;shaveIndex++){

322 
	`swcWaôShave
(
shaveIndex
);

324 
	`DrvTimîGëSy°emTicks64
(&
À⁄Ticks2
);

326 
shaveIndex
=0;shaveIndex<
shaves
;shaveIndex++){

327 
å™s„rR©e
+((
Â32
)
size
 * 
	`gëShaveV¨
(
shaveIndex
,(
u32
)&
shave_å™ß˘i⁄s
Ë/ (1024.0‡* 1024.0f)Ë/ (Â32Ë(
	`cy˛esToTime
(gëShaveV¨(shaveIndex, (u32)&
shave_ticks
))) ;

332 
shaveIndex
=0;shaveIndex<
shaves
;shaveIndex++){

333 
	`vîifyD©a
–(
u8
*)
shave_svuCmxD°_buff
[
shaveIndex
], (u8*)
shave_svuCmxSrc_buff
[shaveIndex], 
size
);

336 
	`¥ötf
("%7.2‡MB/s", 
å™s„rR©e
);

337 
	}
}

339 
	$bíchm¨k
(
À⁄Exec
 
À⁄
, 
u32
 
shave
, u32 
shCou¡
, 
u8
 *
shLi°
, *
ã°TôÀ
, *
des¸ùti⁄
 , u32 
widthsCou¡
, u32 *
widths
, u32 
å™s„rs
, 
å™s„rLoˇti⁄
 
å™s„r
[])

341 
u32
 
shaveCou¡
;

342 
	`¥ötf
("\n%ld. Bíchm¨k %-15†\n",
u£Ca£
, 
ã°TôÀ
);

343 
	`¥ötf
("%s\n",
des¸ùti⁄
);

344 
u£Ca£
++;

346 
u32
 
widthIndex
=0; widthIndex<
widthsCou¡
; widthIndex++){

347 
u32
 
shaveCou¡Index
=0; shaveCou¡Index<
shCou¡
; shaveCountIndex++){

348 
u32
 
å™sIndex
=0;å™sIndex<
å™s„rs
;transIndex++){

349 if(
shLi°
!=0){

350 
shaveCou¡
 = 
shLi°
[
shaveCou¡Index
];

352 
shaveCou¡
 = 0;

354 if(
shCou¡
>1){

355 
	`¥ötf
("%2ld shaves", 
shaveCou¡
);

357 
	`¥ëtyPrötSize
(
widths
[
widthIndex
]);

358 
	`DrvShaveL2CacheSëMode
(
SHAVEL2C_MODE_NORMAL
);

360 
	`À⁄
(
shave
, 
å™s„r
[
å™sIndex
].
‰om
,Åøns„r[å™sIndex].
to
, 
widths
[
widthIndex
], 
shaveCou¡
);

361 
	`¥ötf
("\n");

365 
	}
}

368 
	$bíchm¨kShave0mem˝y
()

370 
u8
* 
unˇchedDdr
 = (u8*)((
u32
)
ddr_buff0
 | 0x40000000 );

372 
u32
 
widths
[]={1*1024, 32*1024, 128*1024};

373 
å™s„rLoˇti⁄
 
å™s„rs
[]={ {
unˇchedDdr
, 
ddr_buff1
},

374 {
unˇchedDdr
, (
u8
*)
	`AddrRñToCMX
(0x40000)},

375 {(
u8
*)
	`AddrRñToCMX
(0x40000),
ddr_buff1
},

376 {(
u8
*)
	`AddrRñToCMX
(0x40000),(u8*)AddrRelToCMX(0xC0000)}

378 
mem˝yU64Desc
[] = "Shave 0 willÅransfer memory via CPU";

380 
	`bíchm¨k
(
À⁄Sh0Exec
, (
u32
Ë&
shave_svuMem˝yAsm
, 1, 0, "shavêmem˝y", 
mem˝yU64Desc
, 
	`¨øySize
(
widths
), widths,áºaySize(
å™s„rs
),Åransfers);

381 
	}
}

383 
	$bíchm¨kShave0˝yDMA
()

386 
u32
 
widths
[]={1*1024, 32*1024, 128*1024};

387 
å™s„rLoˇti⁄
 
å™s„rs
[]={ {
ddr_buff0
, 
ddr_buff1
},

388 {
ddr_buff0
, (
u8
*)
	`AddrRñToCMX
(0x40000)},

389 {(
u8
*)
	`AddrRñToCMX
(0x40000),
ddr_buff1
},

390 {(
u8
*)
	`AddrRñToCMX
(0x40000),(u8*)AddrRelToCMX(0xC0000)}

392 
memDmaDesc
[] = "Shave 0 willÅransfer memory via DMA";

393 
	`bíchm¨k
(
À⁄Sh0Exec
, (
u32
Ë&
shave_svuMem˝yDMA
, 1, 0, "shavêDMA c›y", 
memDmaDesc
 , 
	`¨øySize
(
widths
), widths,áºaySize(
å™s„rs
),Åransfers);

394 
	}
}

397 
	$bíchm¨kAŒShavesCpyDMA
()

399 
u32
 
widths
[]={16*1024, 32*1024};

400 
å™s„rLoˇti⁄
 
å™s„rs
[]={ {&
shave_cmx_buff
, 
ddr_buff0
},

401 {
ddr_buff0
, &
shave_cmx_buff
}

403 
memDmaDesc
[] = "Multiple shaveÖrocessorsÅransfer memory simultaneously via DMA";

404 
u8
 
shaveLi°
[] = {1,2,4,8,12};

405 
	`bíchm¨k
(
À⁄ShMu…ùÀExec
, (
u32
Ë&
shave_svuSy°emTe°DMA
, 
	`¨øySize
(
shaveLi°
), shaveLi°, "mu…ùÀ shave†DMA", 
memDmaDesc
 ,áºaySize(
widths
), widths,áºaySize(
å™s„rs
),Åransfers);

406 
	}
}

409 
__©åibuã__
((
c⁄°ru˘‹
)Ë
	$ddrInô
()

411 
tyDdrC⁄fig
 
cu°omDdrC⁄fig
;

412 
	`DrvC¥Inô
();

413 
	`DrvDdrGëDeÁu…C⁄figuøti⁄
(&
cu°omDdrC⁄fig
);

422 
cu°omDdrC⁄fig
.
addªss_m≠
 = 
addªss_m≠_R13_R0__B2_B0__C9_C0_32_bô_dõ
;

425 if(
	`DrvDdrIsInôülized
()){

426 
	`¥ötf
("\n");

427 
	`¥ötf
("__ __ _ \n");

428 
	`¥ötf
("\\ \\ / / (_) \n");

429 
	`¥ötf
(" \\ \\ /\\ / /__ _ _ __ _ __ _ _ __ __ _ \n");

430 
	`¥ötf
(" \\ \\/ \\/ // _` || '__|| '_ \\ | || '_ \\ / _` |\n");

431 
	`¥ötf
(" \\ /\\ /| (_| || | | | | || || | | || (_| |\n");

432 
	`¥ötf
(" \\/ \\/ \\__,_||_| |_| |_||_||_| |_| \\__, |\n");

433 
	`¥ötf
(" __/ |\n");

434 
	`¥ötf
(" |___/ \n");

435 
	`¥ötf
("DDRáppearsÅo be initializedálready,ÖrobablyÇot withÅheÑight settings.\n");

436 
	`¥ötf
("Theápplication willÅryÅoÑeinitialize it.\n");

440 
	`DrvDdrShutdown
();

442 
	`DrvDdrInôüli£
(&
cu°omDdrC⁄fig
);

443 
	`DrvTimîInô
();

444 
	}
}

446 
	$maö
()

449 
	`unôTe°Inô
();

451 
	`öôClocksAndMem‹y
();

452 
	`DrvC¥SèπAŒClocks
();

453 
	`swcLe⁄SëPIL
(0);

455 
	`£tSvuO√BigP¨tôi⁄
();

457 
	`DrvLL2CInôWrôeThrough
();

459 
	`swcLe⁄E«bÀCaches
(1);

462 
sys˛k
=
	`DrvC¥GëSysClockKhz
();

464 
	`¥ötf
("\nDDR bandwidth benchmark\n\n");

466 
	`¥ötf
("Sy°emÑu¬ögáà%lu Mhz\n", (
u32
)
sys˛k
/1000);

467 
	`¥ötf
("DDR clockedáà%lu Mhz\n", (
u32
)
	`DrvC¥GëClockFªqKhz
(
AUX_CLK_DDR_CORE_CTRL
, 
NULL
)/1000*2);

469 
	`bíchm¨kShave0mem˝y
();

470 
	`bíchm¨kShave0˝yDMA
();

471 
	`bíchm¨kAŒShavesCpyDMA
();

473 if(
vîifiˇti⁄Pas£d
)

474 
	`¥ötf
("AllÅransactions were verifiedándÖassed\n");

476 
	`¥ötf
("AllÅransactions were verifiedánd some failed\n");

478 
	`¥ötf
("All benchmarks finished\n\n\n");

480 
	`unôTe°FöÆRï‹t
();

481 
	}
}

	@Evaluation/ma2x5x/DDRBandwidth/shave/shave.c

11 
	~<°dio.h
>

12 
	~<°rög.h
>

13 
	~<svuComm⁄Shave.h
>

14 
	~<swcCdma.h
>

22 vﬁ©ûê
u32
 
	gticks
;

23 
dmaTønß˘i⁄Li°_t
 
	gèsk
;

24 
u8
 
__©åibuã__
((
	$Æig√d
(64))Ë
cmx_buff
[64 * 1024];

25 
u32
 
	`__©åibuã__
((
	$Æig√d
(64))Ë
å™ß˘i⁄s
;

27 
u32
 **
èû
;

29 *
	`mem˝y2_asm
–*
de°
, c⁄° *
§c
, 
size_t
 
n
 );

39 
	`__©åibuã__
((
	`£˘i⁄
(".ãxt.íåypoöt"))Ë__©åibuã__((
	$Æig√d
(64)))

40 
	$svuMem˝yAsm
(
u8
 *
d°
, u8 *
§c
, 
u32
 
size
)

42 
ticks
 = 
	`swcRódPC0
();

43 
	`mem˝y2_asm
(
d°
, 
§c
, 
size
);

44 
ticks
 = (
	`swcRódPC0
()-ticks);

46 
SHAVE_HALT
;

47 
	}
}

50 
__©åibuã__
((
£˘i⁄
(".ãxt.íåypoöt"))Ë__©åibuã__((
	$Æig√d
(64)))

51 
	$svuMem˝yDMA
(
u8
 *
d°
, u8* 
§c
, 
u32
 
size
)

53 
dmaTønß˘i⁄Li°_t
 *
ªf
;

54 
i
;

55 
u32
 
id
;

57 
id
 = 
	`dmaInôReque°î
(1);

64 
ticks
=
	`swcRódPC0
();

65  
i
=0;i<1000;i++){

66 
ªf

	`dmaCª©eTønß˘i⁄Ext
(
DMA_1D_TRANSACTION
, 
id
, &
èsk
, (
u8
*Ë
§c
, (u8*Ë
d°
, 
size
, 1, 1, 1, 1, 8);

67 
	`dmaSèπLi°Task
(
ªf
);

68 
	`dmaWaôTask
(
ªf
);

70 
ticks
 = (
	`swcRódPC0
()-ticks)/1000;

72 
SHAVE_HALT
;

73 
	}
}

76 
__©åibuã__
((
£˘i⁄
(".ãxt.íåypoöt"))Ë__©åibuã__((
	$Æig√d
(64)))

77 
	$svuSy°emTe°DMA
(
u8
 *
d°
, u8* 
§c
, 
u32
 
size
, u32 
ª≥©Cou¡
, vﬁ©ûêu32 *
°›AŒShaves
)

79 
dmaTønß˘i⁄Li°_t
 *
ªf
;

80 
u32
 
i
;

81 
u32
 
id
;

82 
ticks
=0;

83 
cmx_buff
[0]=0;

85 
id
 = 
	`dmaInôReque°î
(0);

92 
ticks
=
	`swcRódPC0
();

93  
i
=0;i<
ª≥©Cou¡
;i++){

94 
ªf

	`dmaCª©eTønß˘i⁄Ext
(
DMA_1D_TRANSACTION
, 
id
, &
èsk
, (
u8
*Ë
§c
, (u8*Ë
d°
, 
size
, 1, 1, 1, 1, 8);

95 
	`dmaSèπLi°Task
(
ªf
);

96 
	`dmaWaôTask
(
ªf
);

97 
å™ß˘i⁄s
++;

98 if(*
°›AŒShaves
){

102 *
°›AŒShaves
=1;

103 
ticks
 = (
	`swcRódPC0
()-ticks);

105 
SHAVE_HALT
;

106 
	}
}

	@Evaluation/ma2x5x/IspHighThroughput/leon/app_config.c

11 
	~"≠p_c⁄fig.h
"

12 
	~<°dio.h
>

13 
	~<°rög.h
>

14 
	~<Fp16C⁄vît.h
>

15 
	~<DrvC¥.h
>

16 
	~<DrvDdr.h
>

17 
	~<DrvTempSís‹.h
>

18 
	~<DrvLe⁄L2C.h
>

19 
	~"i•_∑øms_wøp.h
"

20 
	~"swcLe⁄Utûs.h
"

21 
	~"UnôTe°Api.h
"

25 
	#MSS_CLOCKS_APP
 (
DEV_MSS_APB_SLV
 | \

	)

26 
	gDEV_MSS_APB2_CTRL
 | \

27 
	gDEV_MSS_RTBRIDGE
 | \

28 
	gDEV_MSS_RTAHB_CTRL
 | \

29 
	gDEV_MSS_LRT
 | \

30 
	gDEV_MSS_LRT_DSU
 | \

31 
	gDEV_MSS_LRT_L2C
 | \

32 
	gDEV_MSS_LRT_ICB
 | \

33 
	gDEV_MSS_AXI_BRIDGE
 | \

34 
	gDEV_MSS_MXI_CTRL
 | \

35 
	gDEV_MSS_MXI_DEFSLV
 | \

36 
	gDEV_MSS_AXI_MON
 | \

37 
	gDEV_MSS_AMC
 | \

38 
	gDEV_MSS_SIPP
 | \

39 
	gDEV_MSS_TIM
 )

41 
	#OPIPE_CLOCKS
 (
DEV_SIPP_SIGMA
 | \

	)

42 
	gDEV_SIPP_LSC
 | \

43 
	gDEV_SIPP_RAW
 | \

44 
	gDEV_SIPP_DBYR
 | \

45 
	gDEV_SIPP_DOGL
 | \

46 
	gDEV_SIPP_LUMA
 | \

47 
	gDEV_SIPP_SHARPEN
 | \

48 
	gDEV_SIPP_CGEN
 | \

49 
	gDEV_SIPP_MED
 | \

50 
	gDEV_SIPP_CHROMA
 | \

51 
	gDEV_SIPP_CC
 | \

52 
	gDEV_SIPP_LUT
 | \

53 
	gDEV_SIPP_UPFIRDN0
 | \

54 
	gDEV_SIPP_UPFIRDN1
 | \

55 
	gDEV_SIPP_UPFIRDN2
 | \

56 
	gDEV_SIPP_MIPI_RX0
 | \

57 
	gDEV_MSS_SIPP_CLK_GATES
 | \

58 
	gDEV_SIPP_MIPI
 | \

59 
	gDEV_SIPP_SIPP_ABPSLV
 | \

60 
	gDEV_SIPP_APB_SLV
)

67 
SigmaDnsCfg
 
	gsigCfg
;

68 
BlcCfg
 
	gblcCfg
;

69 
LscCfg
 
	glscCfg
;

70 
RawCfg
 
	gøwCfg
;

71 
DbyrCfg
 
	gdbyrCfg
;

72 
LtmCfg
 
	g…mCfg
;

73 
DogCfg
 
	gdogCfg
;

74 
LumaDnsCfg
 
	glumaDnsCfg
;

75 
LumaDnsRefCfg
 
	glumaDnsRefCfg
;

76 
Sh¨≥nCfg
 
	gsh¨pCfg
;

77 
ChromaGíCfg
 
	gcGíCfg
;

78 
MedünCfg
 
	gmedCfg
;

79 
ChromaDnsCfg
 
	gchrDnsCfg
;

80 
CﬁCombCfg
 
	gccCfg
;

81 
LutCfg
 
	glutCfg
;

82 
CﬁC⁄vCfg
 
	gcﬁC⁄vCfg
;

83 
UpfúdnCfg
 
	gupdnCfg0
;

84 
UpfúdnCfg
 
	gupdnCfg12
;

91 
	$≠pSëP¨ams
(
Opùe
 *
p
)

94 
p
->
øwBôs
 = 
ISPC_BAYER_BITS
;

95 
p
->
bayîP©ã∫
 = 
BAYER_PATTERN
;

101 
p
->
pBlcCfg
 = &
blcCfg
;

102 
blcCfg
.
r
 = 
ISPC_BLACK_LEVEL_P0
;

103 
blcCfg
.
b
 = 
ISPC_BLACK_LEVEL_P1
;

104 
blcCfg
.
gr
 = 
ISPC_BLACK_LEVEL_P2
;

105 
blcCfg
.
gb
 = 
ISPC_BLACK_LEVEL_P3
;

109 
p
->
pSigmaCfg
 = &
sigCfg
;

110 
sigCfg
.
noi£Flo‹
 = 
ISPC_SIGMA_NOISE_FLOOR
;

111 
sigCfg
.
thªsh1P0
 = 
ISPC_SIGMA_THRESH1_P0
;

112 
sigCfg
.
thªsh2P0
 = 
ISPC_SIGMA_THRESH2_P0
;

113 
sigCfg
.
thªsh1P1
 = 
ISPC_SIGMA_THRESH1_P1
;

114 
sigCfg
.
thªsh2P1
 = 
ISPC_SIGMA_THRESH2_P1
;

115 
sigCfg
.
thªsh1P2
 = 
ISPC_SIGMA_THRESH1_P2
;

116 
sigCfg
.
thªsh2P2
 = 
ISPC_SIGMA_THRESH2_P2
;

117 
sigCfg
.
thªsh1P3
 = 
ISPC_SIGMA_THRESH1_P3
;

118 
sigCfg
.
thªsh2P3
 = 
ISPC_SIGMA_THRESH2_P3
;

122 
p
->
pLscCfg
 = &
lscCfg
;

123 
lscCfg
.
lscWidth
 = 
ISPC_LSC_GAIN_MAP_W
;

124 
lscCfg
.
lscSåide
 =ÜscCfg.
lscWidth
;

125 
lscCfg
.
lscHeight
 = 
ISPC_LSC_GAIN_MAP_H
;

126 
lscCfg
.
pLscTabÀ
 = (
uöt16_t
*)
i•cLscMesh
;

130 
p
->
pRawCfg
 = &
øwCfg
;

131 
øwCfg
.
gaöR
 = 
ISPC_RAW_GAIN_0
;

132 
øwCfg
.
gaöGr
 = 
ISPC_RAW_GAIN_1
;

133 
øwCfg
.
gaöGb
 = 
ISPC_RAW_GAIN_2
;

134 
øwCfg
.
gaöB
 = 
ISPC_RAW_GAIN_3
;

136 
øwCfg
.
˛ampGr
 = 
ISPC_RAW_CLAMP_0
;

137 
øwCfg
.
˛ampR
 = 
ISPC_RAW_CLAMP_1
;

138 
øwCfg
.
˛ampB
 = 
ISPC_RAW_CLAMP_2
;

139 
øwCfg
.
˛ampGb
 = 
ISPC_RAW_CLAMP_3
;

141 
øwCfg
.
grgbImbÆPœtD¨k
 = 
ISPC_GRGB_IMBAL_PLAT_DARK
;

142 
øwCfg
.
grgbImbÆDeˇyD¨k
 = 
ISPC_GRGB_IMBAL_DECAY_DARK
;

143 
øwCfg
.
grgbImbÆPœtBright
 = 
ISPC_GRGB_IMBAL_PLAT_BRIGHT
;

144 
øwCfg
.
grgbImbÆDeˇyBright
 = 
ISPC_GRGB_IMBAL_DECAY_BRIGHT
;

146 
øwCfg
.
grgbImbÆThr
 = 
ISPC_GRGB_IMBAL_THRESHOLD
;

148 
øwCfg
.
dpcAÕhaHŸG
 = 
ISPC_BAD_PIX_ALPHA_G_HOT
;

149 
øwCfg
.
dpcAÕhaHŸRb
 = 
ISPC_BAD_PIX_ALPHA_RB_HOT
;

150 
øwCfg
.
dpcAÕhaCﬁdG
 = 
ISPC_BAD_PIX_ALPHA_G_COLD
;

151 
øwCfg
.
dpcAÕhaCﬁdRb
 = 
ISPC_BAD_PIX_ALPHA_RB_COLD
;

152 
øwCfg
.
dpcNoi£Levñ
 = 
ISPC_BAD_PIX_NOISE_LEVEL
;

156 
p
->
pDbyrCfg
 = &
dbyrCfg
;

157 
dbyrCfg
.
dew‹mGødõ¡Mul
 = 0;

158 
dbyrCfg
.
dew‹mSl›e
 = 
ISPC_DEMOSAIC_MIX_SLOPE
;

159 
dbyrCfg
.
dew‹mOff£t
 = 
ISPC_DEMOSAIC_MIX_OFFSET
;

160 
dbyrCfg
.
lumaWeightR
 = 
ISPC_DEMOSAIC_LUMA_WEIGHT_RED
;

161 
dbyrCfg
.
lumaWeightG
 = 
ISPC_DEMOSAIC_LUMA_WEIGHT_GREEN
;

162 
dbyrCfg
.
lumaWeightB
 = 
ISPC_DEMOSAIC_LUMA_WEIGHT_BLUE
;

166 
p
->
pLtmCfg
 = &
…mCfg
;

167 
…mCfg
.
thr
 = 
ISPC_LTM_FILTER_TH1
;

170 
curve
, 
poöt
, 
ªgoff
;

171 
ªgoff
 = 0;

172 
curve
 = 0; curve < 8; curve++) {

173 
poöt
 = 0;Öoint < 16;Öoint += 2) {

174 
off
 = 
curve
 + 
poöt
 * 8;

175 
…mCfg
.
curves
[
off
 ] = 
i•cLtmCurves
[off] ;

176 
…mCfg
.
curves
[
off
+8] = 
i•cLtmCurves
[off+8];

177 
ªgoff
 += 4;

183 
p
->
pDogCfg
 = &
dogCfg
;

184 
dogCfg
.
thr
 = 
ISPC_DOG_THR
;

185 
dogCfg
.
°ªngth
 = 
ISPC_DOG_STRENGTH
;

186 
	`mem˝y
(
dogCfg
.
c€ffs11
, 
dogC€ffs11
, (dogCoeffs11));

187 
	`mem˝y
(
dogCfg
.
c€ffs15
, 
dogC€ffs15
, (dogCoeffs15));

191 
p
->
pLumaDnsCfg
 = &
lumaDnsCfg
;

192 
lumaDnsCfg
.
bôpos
 = 
ISPC_LUMA_DNS_BITPOS
;

193 
lumaDnsCfg
.
Æpha
 = 
ISPC_LUMA_DNS_ALPHA
;

194 
lumaDnsCfg
.
f2
 = 
ISPC_LUMA_DNS_F2
;

195 
	`mem˝y
(
lumaDnsCfg
.
lut
, 
i•cLumaDnsLut
, (ispcLumaDnsLut));

197 
p
->
pLumaDnsRefCfg
 = &
lumaDnsRefCfg
;

198 
lumaDnsRefCfg
.
shi·
 = 
ISPC_LUMA_DNS_REF_SHIFT
;

199 
	`mem˝y
(
lumaDnsRefCfg
.
lutGamma0_32
 , 
i•cGammaLut0_32
 , (ispcGammaLut0_32 ));

200 
	`mem˝y
(
lumaDnsRefCfg
.
lutGamma32_255
, 
i•cGammaLut32_255
, (ispcGammaLut32_255));

201 
	`mem˝y
(
lumaDnsRefCfg
.
lutDi°
 , 
i•cYDnsDi°Lut
 , (ispcYDnsDistLut ));

205 
p
->
pSh¨pCfg
 = &
sh¨pCfg
;

206 
sh¨pCfg
.
°ªngthLighãn
 = 
ISPC_SHARP_STRENGTH_LIGHTEN
;

207 
sh¨pCfg
.
°ªngthD¨kí
 = 
ISPC_SHARP_STRENGTH_DARKEN
;

208 
sh¨pCfg
.
möThr
 = 
ISPC_SHARP_MIN_THR
;

209 
sh¨pCfg
.
Æpha
 = 
ISPC_SHARP_ALPHA
;

210 
sh¨pCfg
.
undîshoŸ
 = 
ISPC_SHARP_UNDERSHOOT
;

211 
sh¨pCfg
.
ovîshoŸ
 = 
ISPC_SHARP_OVERSHOOT
;

213 
sh¨pCfg
.
øngeSt›0
 = 
ISPC_SHARP_RANGE_STOP_0
;

214 
sh¨pCfg
.
øngeSt›1
 = 
ISPC_SHARP_RANGE_STOP_1
;

215 
sh¨pCfg
.
øngeSt›2
 = 
ISPC_SHARP_RANGE_STOP_2
;

216 
sh¨pCfg
.
øngeSt›3
 = 
ISPC_SHARP_RANGE_STOP_3
;

218 
sh¨pCfg
.
sh¨≥nC€ffs
[0] = 
ISPC_SHARP_COEF0
;

219 
sh¨pCfg
.
sh¨≥nC€ffs
[1] = 
ISPC_SHARP_COEF1
;

220 
sh¨pCfg
.
sh¨≥nC€ffs
[2] = 
ISPC_SHARP_COEF2
;

221 
sh¨pCfg
.
sh¨≥nC€ffs
[3] = 
ISPC_SHARP_COEF3
;

225 
p
->
pChrGíCfg
 = &
cGíCfg
;

226 
cGíCfg
.
deßtOff£t
 = 
ISPC_CGEN_DESAT_OFFSET
;

227 
cGíCfg
.
deßtSl›e
 = 
ISPC_CGEN_DESAT_SLOPE
;

228 
cGíCfg
.
p‰Såígth
 = 
ISPC_CGEN_PFR_STRENGTH
;

230 
cGíCfg
.
lumaC€ffR
 = 
ISPC_CGEN_LUMA_COEFF_R
;

231 
cGíCfg
.
lumaC€ffG
 = 
ISPC_CGEN_LUMA_COEFF_G
;

232 
cGíCfg
.
lumaC€ffB
 = 
ISPC_CGEN_LUMA_COEFF_B
;

234 
cGíCfg
.
ïsû⁄
 = 
ISPC_CGEN_EPSILON
;

235 
cGíCfg
.
kr
 = 
ISPC_CGEN_KR
;

236 
cGíCfg
.
kg
 = 
ISPC_CGEN_KG
;

237 
cGíCfg
.
kb
 = 
ISPC_CGEN_KB
;

241 
p
->
pMedCfg
 = &
medCfg
;

242 
medCfg
.
kî√lSize
 = 
ISPC_CHROMA_MEDIAN_SIZE
;

243 
medCfg
.
¶›e
 = 
ISPC_CHROMA_MEDIAN_MIX_SLOPE
;

244 
medCfg
.
off£t
 = 
ISPC_CHROMA_MEDIAN_MIX_OFFSET
;

248 
p
->
pChromaDnsCfg
 = &
chrDnsCfg
;

250 
chrDnsCfg
.
hE«b
 = 
ISPC_CHROMA_DNS_H_ENAB
;

251 
chrDnsCfg
.
limô
 = 
ISPC_CHROMA_DNS_LIMIT
;

252 
chrDnsCfg
.
gªyDeßtOff£t
 = 
ISPC_GREY_DESAT_OFFSET
;

253 
chrDnsCfg
.
gªyDeßtSl›e
 = 
ISPC_GREY_DESAT_SLOPE
;

255 
chrDnsCfg
.
th_r
 = 
ISPC_CHROMA_DNS_TH_R
;

256 
chrDnsCfg
.
th_g
 = 
ISPC_CHROMA_DNS_TH_G
;

257 
chrDnsCfg
.
th_b
 = 
ISPC_CHROMA_DNS_TH_B
;

259 
chrDnsCfg
.
gªyCb
 = 
ISPC_GREY_POINT_B
;

260 
chrDnsCfg
.
gªyCg
 = 
ISPC_GREY_POINT_G
;

261 
chrDnsCfg
.
gªyCr
 = 
ISPC_GREY_POINT_R
;

263 
chrDnsCfg
.
c⁄vC€ffC‹√r
 = 28;

264 
chrDnsCfg
.
c⁄vC€ffEdge
 = 28;

265 
chrDnsCfg
.
c⁄vC€ffCíãr
 = 31;

269 
p
->
pCﬁCombCfg
 = &
ccCfg
;

270 
ccCfg
.
kr
 = 
ISPC_CC_KR
;

271 
ccCfg
.
kg
 = 
ISPC_CC_KG
;

272 
ccCfg
.
kb
 = 
ISPC_CC_KB
;

273 
	`mem˝y
(
ccCfg
.
ccm
 , 
i•cCCM
 , (ispcCCM ));

274 
	`mem˝y
(
ccCfg
.
ccmOff
, 
i•cCCMOff
, (ispcCCMOff));

278 
p
->
pLutCfg
 = &
lutCfg
;

279 
lutCfg
.
èbÀ
 = 
gammaLutFp16
;

280 
lutCfg
.
size
 = 512;

281 
lutCfg
.
rgnSize
[0] = 0x55555555;

282 
lutCfg
.
rgnSize
[1] = 0x55555555;

284 
p
->
pCﬁC⁄vCfg
 = &
cﬁC⁄vCfg
;

285 
	`mem˝y
(
cﬁC⁄vCfg
.
m©
 , 
i•cCSC
 , (ispcCSC ));

286 
	`mem˝y
(
cﬁC⁄vCfg
.
off£t
, 
i•cCSCOff
, (ispcCSCOff));

290 
p
->
pUpfúdn0Cfg
 = &
updnCfg0
;

291 
updnCfg0
.
vN
 = 
N
; updnCfg0.
vD
 = 
D
;

292 
updnCfg0
.
hN
 = 
N
; updnCfg0.
hD
 = 
D
;

293 
updnCfg0
.
kîSz
 = 5;

294 
updnCfg0
.
vC€fs
 = vCoefs;

295 
updnCfg0
.
hC€fs
 = hCoefs;

299 
p
->
pUpfúdn12Cfg
 = &
updnCfg12
;

300 
updnCfg12
.
vN
 = 
N
; updnCfg12.
vD
 = (
D
<<1);

301 
updnCfg12
.
hN
 = 
N
; updnCfg12.
hD
 = (
D
<<1);

302 
updnCfg12
.
kîSz
 = 5;

303 
updnCfg12
.
vC€fs
 = vCoefs;

304 
updnCfg12
.
hC€fs
 = hCoefs;

308 
	`OpùeDeÁu…Cfg
(
p
, 
SIPP_SIGMA_ID
 );

309 
	`OpùeDeÁu…Cfg
(
p
, 
SIPP_RAW_ID
 );

310 
	`OpùeDeÁu…Cfg
(
p
, 
SIPP_DBYR_ID
 );

311 
	`OpùeDeÁu…Cfg
(
p
, 
SIPP_DOGL_ID
 );

312 
	`OpùeDeÁu…Cfg
(
p
, 
SIPP_SHARPEN_ID
);

313 
	`OpùeDeÁu…Cfg
(
p
, 
SIPP_CGEN_ID
 );

314 
	`OpùeDeÁu…Cfg
(
p
, 
SIPP_MED_ID
 );

315 
	`OpùeDeÁu…Cfg
(
p
, 
SIPP_CHROMA_ID
 );

316 
	`OpùeDeÁu…Cfg
(
p
, 
SIPP_CC_ID
 );

317 
	`OpùeDeÁu…Cfg
(
p
, 
SIPP_LUT_ID
 );

318 
	}
}

320 
	$ªdu˚Ba£löePowî
()

322 
s32
 
i
;

325 
i
=0;i<12;i++)

326 
	`DrvC¥PowîTu∫OffI¶™d
(
POWER_ISLAND_SHAVE_0
 + 
i
);

327 
	`DrvC¥PowîTu∫OffI¶™d
(
POWER_ISLAND_USB
);

329 
u32
 
u∑ClocksToTu∫Off
 = ~(0

330 | 
DEV_UPA_CDMA


331 | 
DEV_UPA_CTRL


332 | (1 << 
UPA_MTX
)

334 
u32
 
auxClocksToTu∫Off
 = ~(0

335 | 
AUX_CLK_MASK_DDR_REF


336 | 
AUX_CLK_MASK_DDR_CORE_CTRL


337 | 
AUX_CLK_MASK_DDR_CORE_PHY


338 | 
AUX_CLK_MASK_UART


339 | (1<< 
CSS_AUX_TSENS
)

341 
u32
 
mssClocksToTu∫Off
 = 0

342 | 
DEV_MSS_AXI_BRIDGE


343 | 
DEV_MSS_MXI_DEFSLV


344 | 
DEV_MSS_AXI_MON


345 | 
DEV_MSS_NAL


346 | 
DEV_MSS_CIF0


347 | 
DEV_MSS_CIF1


348 | 
DEV_MSS_LCD


350 
u64
 
cssClocksToTu∫Off
 = ~(0

351 | 
DEV_CSS_AON


352 | 
DEV_CSS_DSS_BUS


353 | 
DEV_CSS_DSS_BUS_AAXI


354 | 
DEV_CSS_LAHB2SHB


355 | 
DEV_CSS_SAHB2MAHB


356 | 
DEV_CSS_LAHB_CTRL


357 | 
DEV_CSS_APB4_CTRL


358 | 
DEV_CSS_MAHB_CTRL


359 | 
DEV_CSS_APB1_CTRL


360 | 
DEV_CSS_APB3_CTRL


361 | 
DEV_CSS_SAHB_CTRL


362 | 
DEV_CSS_UART


363 | 
DEV_CSS_JTAG


364 | 
DEV_CSS_LOS_L2C


365 | 
DEV_CSS_MSS_MAS


366 | 
DEV_CSS_UPA_MAS


367 | 
DEV_CSS_I2C2


368 | 
DEV_CSS_GPIO


372 
	`DrvC¥SysDevi˚A˘i⁄
(
UPA_DOMAIN
, 
DISABLE_CLKS
, 
u∑ClocksToTu∫Off
);

373 
	`DrvC¥SysDevi˚A˘i⁄
(
UPA_DOMAIN
, 
ASSERT_RESET
, 
u∑ClocksToTu∫Off
);

374 
	`DrvC¥SysDevi˚A˘i⁄
(
MSS_DOMAIN
, 
DISABLE_CLKS
, 
mssClocksToTu∫Off
);

375 
	`DrvC¥SysDevi˚A˘i⁄
(
MSS_DOMAIN
, 
ASSERT_RESET
, 
mssClocksToTu∫Off
);

376 
	`DrvC¥SysDevi˚A˘i⁄
(
CSS_AUX_DOMAIN
, 
DISABLE_CLKS
, 
auxClocksToTu∫Off
);

377 
	`DrvC¥SysDevi˚A˘i⁄
(
CSS_AUX_DOMAIN
, 
ASSERT_RESET
, 
auxClocksToTu∫Off
);

378 
	`DrvC¥SysDevi˚A˘i⁄
(
CSS_DOMAIN
, 
DISABLE_CLKS
, 
cssClocksToTu∫Off
);

379 
	}
}

382 
s32
 
	$öôClocksAndMem‹y
()

384 
s32
 
sc
;

385 
DrvTempSísC⁄fig
 
ãmpP¨am
 = {1};

387 
tyAuxClkDividîCfg
 
auxClkCfg
[] =

389 .
auxClockE«bÀMask
 = (
u32
)(1 << 
CSS_AUX_TSENS
),

390 .
auxClockSour˚
 = 
CLK_SRC_REFCLK0
,

391 .
auxClockDivNumî©‹
 = 1,

392 .
auxClockDivDíomö©‹
 = 10,

394 {
AUX_CLK_MASK_UART
, 
CLK_SRC_REFCLK0
, 96, 625},

398 
tySocClockC⁄fig
 
˛ockC⁄fig
 =

400 .
ªfClk0I≈utKhz
 = 12000,

401 .
ªfClk1I≈utKhz
 = 0,

402 .
èrgëPŒ0FªqKhz
 = 600000,

403 .
èrgëPŒ1FªqKhz
 = 0,

404 .
˛kSrcPŒ1
 = 
CLK_SRC_REFCLK0
,

405 .
ma°îClkDivNumî©‹
 = 1,

406 .
ma°îClkDivDíomö©‹
 = 1,

407 .
cssDssClockE«bÀMask
 = 
DEFAULT_CORE_CSS_DSS_CLOCKS
,

408 .
mssClockE«bÀMask
 = 
MSS_CLOCKS_APP
,

409 .
sùpClockE«bÀMask
 = 
OPIPE_CLOCKS
,

410 .
u∑ClockE«bÀMask
 = 
DEFAULT_UPA_CLOCKS
,

411 .
pAuxClkCfg
 = 
auxClkCfg
,

414 
	`swcLe⁄SëPIL
(0);

415 
	`DrvLL2CInôWrôeThrough
 ();

417 
sc
 = 
	`DrvC¥Inô
();

418 if(
sc
)

419  
sc
;

420 
sc
 = 
	`DrvC¥SëupClocks
(&
˛ockC⁄fig
);

421 if(
sc
)

422  
sc
;

423 
	`DrvDdrInôüli£
(
NULL
);

424 
	`ªdu˚Ba£löePowî
();

426 
	`DrvTempSís‹Inôüli£
(&
ãmpP¨am
);

429 
	}
}

	@Evaluation/ma2x5x/IspHighThroughput/leon/app_config.h

9 #i‚de‡
_APP_CONFIG_H_


10 
	#_APP_CONFIG_H_


	)

14 
	~"Opùe.h
"

15 
	~"OpùeAµs.h
"

25 
≠pSëP¨ams
(
Opùe
 *
p
);

30 
s32
 
öôClocksAndMem‹y
();

32 
ªdu˚Ba£löePowî
();

	@Evaluation/ma2x5x/IspHighThroughput/leon/main.c

10 
	~<°dlib.h
>

11 
	~<°dio.h
>

12 
	~<UnôTe°Api.h
>

13 
	~<VcsHooksApi.h
>

14 
	~<DrvC¥.h
>

15 
	~<DrvTimî.h
>

16 
	~"DrvTempSís‹.h
"

17 
	~"Opùe.h
"

18 
	~"OpùeAµs.h
"

19 
	~"OpùeI¡î«ls.h
"

20 
	~<swcCrc.h
>

21 
	~"≠p_c⁄fig.h
"

22 
	~"i•_∑øms_wøp.h
"

23 
	~"brdMv0198.h
"

24 #ifde‡
MV0212


25 
	~"MV0212.h
"

26 
	~"brdGpioCfgs/brdMv0182R5GpioDeÁu…s.h
"

27 
	~"DrvCDCEL.h
"

28 #ñi‡
deföed
(
MV0182
)

29 
	~"brdMv0182.h
"

30 
	~"Bﬂrd182Api.h
"

32 
	~"DrvLe⁄L2C.h
"

33 
	~"DrvAmcMa2x5x.h
"

38 
	#N_RUNS
 10

	)

41 
	#IMG_W
 
ISPC_BAYER_W


	)

42 
	#IMG_H
 
ISPC_BAYER_H


	)

45 
	#O_IMG_W
 ((
IMG_W
 * 
N
 -1)/
D
 + 1)

	)

46 
	#O_IMG_H
 ((
IMG_H
 * 
N
 -1)/
D
 + 1)

	)

48 
	#CHROMA_SZ
 (
O_IMG_W
*
O_IMG_H
/4)

49 

	)

50 
	#EXPECTED_CRC_VALUE
 0xd0a13e50

	)

51 
	#OUTPUT_IMAGE
 "Lab_8bµ_4208x3120_P420.yuv"

	)

55 
tyAdcResu…AŒRaûs
 
	mpowî
;

56 
Â32
 
	mavgmW
;

57 
Â32
 
	mavgmA
;

58 } 
	tProf
;

60 #ifde‡
MV0212


61 
	#NUM_I2C_DEVS
 3

	)

65 
I2CM_Devi˚
 * 
	gi2c2H™dÀ
;

70 
u16
 
	giBuf
[ 
IMG_W
 * 
IMG_H
 ] 
SECTION
(".ddr.bss"Ë
ALIGNED
(8);

71 
u8
 
	gyuvBuf
[
O_IMG_W
 * 
O_IMG_H
 + 2 * 
CHROMA_SZ
] 
SECTION
(".ddr.bss"Ë
ALIGNED
(8);

74 
u16
 
	gcDbyrY
 [ 
IMG_W
 * 
DBYR_Y_H
 ] 
SECTION
(".shv0.S.d©a"Ë
ALIGNED
(8);

75 
u16
 
	gcSigma
 [ 
IMG_W
 * 
I_CBUFF_H
 ] 
SECTION
(".shv3.S.d©a"Ë
ALIGNED
(8);

76 
u16
 
	gcSh¨pY
 [ 
IMG_W
 * 
SHARP_Y_H
 ] 
SECTION
(".shv3.S.d©a"Ë
ALIGNED
(8);

77 
u8
 
	gcLut
 [ 
IMG_W
 * 
O_CBUFF_H
 * 3] 
SECTION
(".shv3.S.d©a"Ë
ALIGNED
(8);

78 
u8
 
	gcUpfúDn
[
O_IMG_W
 * 
O_CBUFF_H
 * 3] 
SECTION
(".shv3.S.d©a"Ë
ALIGNED
(8);

80 
OpùeMF
 
	g›F
;

81 
u64
 
	g°¨tTime
, 
	gídTime
, 
	g‰ameTime
;

82 
tyBrd198H™dÀ
 
	gpowîM⁄H™dÀ
;

83 
I2CM_Devi˚
* 
	gi2c
;

84 
Prof
 
	gã°
;

88 
≠pBuûdPùe
();

89 
showPowî
(
ãmp_CSS
,
ãmp_MSS
,
ãmp_UPA0
,
ãmp_UPA1
);

90 
°›Timî
();

91 
öôPowîMósuªmít
(
I2CM_Devi˚
* 
i2cBus
);

92 
DrvSli˚DbyrLumaBuff
(
Opùe
 *
p
);

96 
	$≠pBuûdPùe
()

99 
›F
.
ö
.
cBufSigma
.
ba£
 = (
uöt32_t
)
cSigma
; opF.ö.cBufSigma.
h
 = 
I_CBUFF_H
;

100 
›F
.
cBufDbyrY
.
ba£
 = (
uöt32_t
)
cDbyrY
; opF.cBufDbyrY.
h
 = 
DBYR_Y_H
;

101 
›F
.
cBufSh¨p
.
ba£
 = (
uöt32_t
)
cSh¨pY
; opF.cBufSh¨p.
h
 = 
SHARP_Y_H
;

102 
›F
.
cBufLut
.
ba£
 = (
uöt32_t
)
cLut
; opF.cBufLut.
h
 = 
O_CBUFF_H
;

103 
›F
.
cBufPﬁy
.
ba£
 = (
uöt32_t
)
cUpfúDn
; opF.cBufPﬁy.
h
 = 
O_CBUFF_H
;

105 
	`OpùeCª©eFuŒ
(&
›F
, 
	`BPP
(2));

106 
	}
}

108 
	$showPowî
(
ãmp_CSS
,
ãmp_MSS
,
ãmp_UPA0
,
ãmp_UPA1
)

111 
Â32
 
avgmW
 = 0;

112 
Â32
 
avgDdrMw
 = 0;

113 
Â32
 
c‹eMw
;

116 
Â32
 
ddrMw
;

117 
Â32
 
ddrMa
;

119 
	`UNUSED
(
ddrMa
);

121 
avgmW
 +
ã°
.
powî
.
tŸÆMûliW©ts
;

123 
	`Brd198GëDdrPowîAndCuºít
(&
powîM⁄H™dÀ
, &
ã°
.
powî
, &
ddrMw
, &
ddrMa
);

125 
avgDdrMw
 +
ddrMw
;

127 
ã°
.
avgmW
 =ávgmW ;

129 
c‹eMw
 = 
ã°
.
avgmW
 - 
avgDdrMw
;

131 
	`¥ötf
("C‹êpowî = %6.02fmW, DDRÖowî = %6.02fmW, On-dõ jun˘i⁄Åem≥øtuª: CSS=%2.1fC, MSS=%2.1fC, UPA0=%2.1fC, UPA1=%2.1fC\n\n", 
c‹eMw
, 
avgDdrMw
, 
ãmp_CSS
,
ãmp_MSS
,
ãmp_UPA0
,
ãmp_UPA1
);

132 
	}
}

134 
	$°›Timî
()

137 
	`DrvTimîGëSy°emTicks64
(&
ídTime
);

138 
	}
}

140 
	$öôPowîMósuªmít
(
I2CM_Devi˚
* 
i2cBus
)

142 
s32
 
ªtVÆ
;

144 
i2c
 = 
i2cBus
;

145 i‡(
i2c
 =
NULL
)

147 
	`¥ötf
("I2CÇot initialized for MV0198\n");

150 
ªtVÆ
 = 
	`Brd198Inô
(&
powîM⁄H™dÀ
, 
i2c
, 
NULL
);

151 i‡(
ªtVÆ
 !
DRV_BRD198_DRV_SUCCESS
)

153 
	`¥ötf
("Board 198 initÉrror\n");

154 
	`exô
(-1);

156 
	}
}

158 
	$maö
()

160 
u32
 
run
;

161 
Â32
 
avgFps
;

162 
Â32
 
pixñClockCy˛e
;

163 
Â32
 
megaPixñTime
;

164 
s32
 
bﬂrdSètus
;

165 
u32
 
¸c32
;

166 
ãm≥øtuª_CSS
;

167 
ãm≥øtuª_MSS
;

168 
ãm≥øtuª_UPA0
;

169 
ãm≥øtuª_UPA1
;

170 
öt32_t
 
ãmpSís‹Sèt
 = 0;

172 
	`unôTe°Inô
 ();

174 
	`swcLe⁄SëPIL
 (2);

176 
	`öôClocksAndMem‹y
 ();

177 
	`DrvC¥SèπAŒClocks
 ();

179 
ãmpSís‹Sèt
 = 
	`DrvTempSís‹SëMode
(
TSENS_CSS
, 
TSENS_ONE_SHOT_MODE
, 
TSENS_SAMPLE_TEMP
);

180 
ãmpSís‹Sèt
 +
	`DrvTempSís‹SëMode
(
TSENS_MSS
, 
TSENS_ONE_SHOT_MODE
, 
TSENS_SAMPLE_TEMP
);

181 
ãmpSís‹Sèt
 +
	`DrvTempSís‹SëMode
(
TSENS_UPA0
, 
TSENS_ONE_SHOT_MODE
, 
TSENS_SAMPLE_TEMP
);

182 
ãmpSís‹Sèt
 +
	`DrvTempSís‹SëMode
(
TSENS_UPA1
, 
TSENS_ONE_SHOT_MODE
, 
TSENS_SAMPLE_TEMP
);

183 i‡(
ãmpSís‹Sèt
 != 0)

185 
	`¥ötf
("Eº‹ codê%dÑëu∫ed whûêexecutög Së Modêf‹ Tem≥øtuª Sís‹\n", ()
ãmpSís‹Sèt
);

187 #ifde‡
MV0212


188 
öt32_t
 
rc
;

189 
uöt32_t
 
ªv
;

190 
BﬂrdI2CInfo
 
öfo
[
NUM_I2C_DEVS
];

191 
BﬂrdC⁄figDesc
 
c⁄fig
[] =

194 
BRDCONFIG_GPIO
,

196 (*)
brdMV0182R5GpioCfgDeÁu…


199 
BRDCONFIG_END
,

200 
NULL


204 
rc
 = 
	`BﬂrdInô
(
c⁄fig
);

205 i‡(
rc
!=
BRDCONFIG_SUCCESS
)

207 
	`¥ötf
("Error: board initialization failed with %ld status\n",

208 
rc
);

209  
rc
;

212 
rc
 = 
	`BﬂrdGëPCBRevisi⁄
(&
ªv
);

213 i‡(
rc
!=
BRDCONFIG_SUCCESS
)

215 
	`¥ötf
("Error: board configurationÑead failed with %ld status\n",

216 
rc
);

217  
rc
;

219 
bﬂrdSètus
 = 
	`BﬂrdInôExtPŒ
(
EXT_PLL_CFG_148_24_24MHZ
);

220 i‡(
bﬂrdSètus
 !
BRDCONFIG_SUCCESS
)

222 
	`¥ötf
("Error: board initialization failed with %ld status\n",

223 
bﬂrdSètus
);

226 
rc
 = 
	`BﬂrdGëI2CInfo
(
öfo
, 
NUM_I2C_DEVS
);

227 
i2c2H™dÀ
=
öfo
[2].
h™dÀr
;

228 #ñi‡
	`deföed
(
MV0182
)

229 
bﬂrdSètus
 = 
	`BﬂrdInôüli£
(0);

230 
i2c2H™dÀ
=
gAµDevHndls
.i2c2Handle;

231 i‡(
bﬂrdSètus
 !
B_SUCCESS
)

233 
	`¥ötf
("Error: board initialization failed with %ld status\n",

234 
bﬂrdSètus
);

239 
	`ªdu˚Ba£löePowî
 ();

241 
	`öôPowîMósuªmít
 (
i2c2H™dÀ
);

242 
u32
 
‰eq
 = 
	`DrvC¥GëClockFªqKhz
(
SYS_CLK
, 
NULL
) / 1000;

244 
	`¥ötf
("\nIspHighThroughput benchmark\n");

245 
	`¥ötf
("===============================================================\n");

246 
	`¥ötf
("Resﬁuti⁄: %lux%lu\n", (
u32
)
IMG_W
, (u32)
IMG_H
);

247 
	`¥ötf
("Fªquícy: %luMHz\n\n", 
‰eq
);

248 
	`¥ötf
("Loading 13MP file... (estimatedÜoadingÅime: 2min)\n");

250 
	`lﬂdMemFromFûeSim∂e
 (
INPUT_IMAGE
, 
IMG_W
 * 
IMG_H
 * 2, 
iBuf
);

252 
	`DrvSëSùpClkCålRegi°î
((0x18FFF | (1<<
MSS_SP_SIPP_ABPSLV
)));

254 
	`OpùeRe£t
 ();

255 
	`≠pBuûdPùe
();

256 
›F
.
p
.
cbPªSèπ
 = 
DrvSli˚DbyrLumaBuff
;

257 
›F
.
p
.
cbEndOfFøme
 = 
°›Timî
;

259 
	`DrvSëAmcPri‹ôõs
(0x0,0x40000,0x208400,0x00000000);

261 
	`¥ötf
("\nPro˚ssög %d iãøti⁄s\n\n", 
N_RUNS
);

263 
	`≠pSëP¨ams
(&
›F
.
p
);

265 
	`OpùeSëSizeMF
 (&
›F
, 
IMG_W
, 
IMG_H
);

267 
run
=0;Ñu¿< 
N_RUNS
;Ñun++)

269 
›F
.
pIn
->
ddr
.
ba£
 = (
uöt32_t
)
iBuf
;

270 
›F
.
pOutY
->
ddr
.
ba£
 = (
uöt32_t
)&
yuvBuf
[0];

271 
›F
.
pOutUV
->
ddr
.
ba£
 = (
uöt32_t
)&
yuvBuf
[
O_IMG_W
*
O_IMG_H
];

273 
	`DrvTimîGëSy°emTicks64
(&
°¨tTime
);

274 
	`OpùeSèπ
 (&
›F
.
p
);

276 
	`DrvTimîSÀïMi¸o
(2000);

277 
u32
 
ªt
 = 
	`Brd198Sam∂eAŒRaûs
(&
powîM⁄H™dÀ
,&(
ã°
.
powî
));

289 i‡(
ªt
 !
DRV_BRD198_DRV_SUCCESS
)

291 
	`¥ötf
("Eº‹ÑódögÖowîÑaûs: %lu\n", 
ªt
);

292 
	`exô
(-1);

294 
	`OpùeWaô
(&
›F
.
p
);

296 
ãmpSís‹Sèt
 = 
	`DrvTempSís‹GëSam∂e
(
TSENS_CSS
, &
ãm≥øtuª_CSS
);

297 
ãmpSís‹Sèt
 +
	`DrvTempSís‹GëSam∂e
(
TSENS_MSS
, &
ãm≥øtuª_MSS
);

298 
ãmpSís‹Sèt
 +
	`DrvTempSís‹GëSam∂e
(
TSENS_UPA0
, &
ãm≥øtuª_UPA0
);

299 
ãmpSís‹Sèt
 +
	`DrvTempSís‹GëSam∂e
(
TSENS_UPA1
, &
ãm≥øtuª_UPA1
);

300 i‡(
ãmpSís‹Sèt
 != 0)

302 
	`¥ötf
("Eº‹ codê%dÑëu∫ed whûêexecutög Ród Tem≥øtuª Sís‹ vÆue\n", ()
ãmpSís‹Sèt
);

304 
‰ameTime
 = 
ídTime
 - 
°¨tTime
;

305 
avgFps
 = (
Â32
Ë(
	`DrvC¥GëClockFªqKhz
(
SYS_CLK
, 
NULL
Ë* 1000Ë/ (Ë
‰ameTime
;

306 
pixñClockCy˛e
 = (
Â32
)
‰ameTime
 / (Â32)(
IMG_W
 * 
IMG_H
);

307 
megaPixñTime
 = (
Â32
)(
avgFps
 * 
IMG_W
 * 
IMG_H
)/1000000;

308 
	`¥ötf
("%.03‡Âs, %Œu cc/‰ame, %.03‡cc/pixñ, %.03‡MP/s\n", 
avgFps
, 
‰ameTime
, 
pixñClockCy˛e
, 
megaPixñTime
);

309 
	`showPowî
(
ãm≥øtuª_CSS
,
ãm≥øtuª_MSS
,
ãm≥øtuª_UPA0
,
ãm≥øtuª_UPA1
);

312 
	`¥ötf
("===============================================================\n");

314 
	`¥ötf
("ValidatingÅest...\n");

315 
¸c32
 = 
	`swcCÆcCrc32
(
yuvBuf
, (yuvBuf), 
be_poöãr
);

316 
	`unôTe°As£π
(
¸c32
 =
EXPECTED_CRC_VALUE
);

318 
	`¥ötf
("Saving output image - willÅakeábout 3 minutes ...\n");

319 
	`ßveMem‹yToFûe
((
uöt32_t
)
yuvBuf
, (yuvBuf), 
OUTPUT_IMAGE
);

321 
	`¥ötf
 ("Memory dumping finished.\n");

323 
	`unôTe°FöÆRï‹t
();

325 
	}
}

327 
	$DrvSli˚DbyrLumaBuff
(
Opùe
 *
p
){

328 
	#SLICE_WIDTH
 2048

	)

329 
	#FIRST_SLC
 0

	)

331 
	`DrvSëSli˚DbyrLumaBuff
(
p
,
SLICE_WIDTH
, 
FIRST_SLC
);

333 
	}
}

	@Evaluation/ma2x5x/IspHighThroughput/leon/params/isp_gamma_lut_fp16.c

1 
	~<°döt.h
>

2 
	~"i•_∑øms_wøp.h
"

7 
uöt16_t
 
	ggammaLutFp16
[512*4] 
ALIGNED
(8) =

	@Evaluation/ma2x5x/IspHighThroughput/leon/params/isp_params_pp.c

1 
	~<°döt.h
>

3 
	~"i•_∑øms_wøp.h
"

6 
uöt16_t
 
	gi•cLscMesh
[
ISPC_LSC_GAIN_MAP_W
 * 
ISPC_LSC_GAIN_MAP_H
] 
ALIGNED
(8) =

	@Evaluation/ma2x5x/IspHighThroughput/leon/params/isp_params_pp.h

3 
	#ISPC_INPUT_IMAGE
 "Studio_D65_800_IMX214_2_002.raw"

4 

	)

6 
	#ISPC_BAYER_W
 4208

7 
	#ISPC_BAYER_H
 3120

8 
	#ISPC_BAYER_BITS
 10

9 

	)

10 
	#ISPC_BLACK_LEVEL_P0
 64

11 
	#ISPC_BLACK_LEVEL_P1
 64

12 
	#ISPC_BLACK_LEVEL_P2
 64

13 
	#ISPC_BLACK_LEVEL_P3
 64

14 

	)

15 
	#ISPC_SIGMA_NOISE_FLOOR
 0

16 
	#ISPC_SIGMA_THRESH1_P0
 0

17 
	#ISPC_SIGMA_THRESH2_P0
 0

18 
	#ISPC_SIGMA_THRESH1_P1
 0

19 
	#ISPC_SIGMA_THRESH2_P1
 0

20 
	#ISPC_SIGMA_THRESH1_P2
 0

21 
	#ISPC_SIGMA_THRESH2_P2
 0

22 
	#ISPC_SIGMA_THRESH1_P3
 0

23 
	#ISPC_SIGMA_THRESH2_P3
 0

24 

	)

26 
	#ISPC_LSC_GAIN_MAP_W
 36

27 
	#ISPC_LSC_GAIN_MAP_H
 28

28 

	)

29 
uöt16_t
 
i•cLscMesh
[
ISPC_LSC_GAIN_MAP_W
 * 
ISPC_LSC_GAIN_MAP_H
];

32 
	#ISPC_BAD_PIX_ALPHA_G_HOT
 0x6

33 
	#ISPC_BAD_PIX_ALPHA_RB_HOT
 0x6

34 
	#ISPC_BAD_PIX_ALPHA_G_COLD
 0x6

35 
	#ISPC_BAD_PIX_ALPHA_RB_COLD
 0x6

36 
	#ISPC_BAD_PIX_NOISE_LEVEL
 0x0000

37 

	)

39 
	#ISPC_GRGB_IMBAL_PLAT_DARK
 0x005f

40 
	#ISPC_GRGB_IMBAL_DECAY_DARK
 0x0096

41 
	#ISPC_GRGB_IMBAL_PLAT_BRIGHT
 0x02b2

42 
	#ISPC_GRGB_IMBAL_DECAY_BRIGHT
 0x02db

43 
	#ISPC_GRGB_IMBAL_THRESHOLD
 0x10

44 

	)

45 
	#ISPC_RAW_GAIN_0
 0x0221

46 
	#ISPC_RAW_GAIN_1
 0x0111

47 
	#ISPC_RAW_GAIN_2
 0x0111

48 
	#ISPC_RAW_GAIN_3
 0x01c1

49 

	)

50 
	#ISPC_RAW_CLAMP_0
 1023

51 
	#ISPC_RAW_CLAMP_1
 1023

52 
	#ISPC_RAW_CLAMP_2
 1023

53 
	#ISPC_RAW_CLAMP_3
 1023

54 

	)

55 
	#ISPC_RAW_OUTPUT_BITS
 10

56 

	)

	@Evaluation/ma2x5x/IspHighThroughput/leon/params/isp_params_still.c

1 
	~<°döt.h
>

3 
	~"i•_∑øms_°ûl.h
"

5 
uöt8_t
 
	gi•cLow∑ssKî√l
[9] = {

11 
uöt8_t
 
	gi•cLumaDnsLut
[32] = {

19 
uöt8_t
 
	gi•cYDnsDi°Lut
[256] 
__©åibuã__
((
Æig√d
(8))) = {

54 
uöt8_t
 
	gi•cGammaLut0_32
[9] = {

58 
uöt8_t
 
	gi•cGammaLut32_255
[9] = {

63 
uöt16_t
 
	gi•cLtmCurves
[16*8] = {

75 
uöt8_t
 
	gdogC€ffs11
[6] = {

78 
uöt8_t
 
	gdogC€ffs15
[8] = {

83 
	gi•cCCM
[9] = {

89 
	gi•cCCMOff
[3] = {

94 
	gi•cCSC
[9] = {

100 
	gi•cCSCOff
[3] = {

105 
uöt8_t
 
	ghC€fs
[] 
__©åibuã__
((
Æig√d
(8))) = {

116 
uöt8_t
 
	gvC€fs
[] 
__©åibuã__
((
Æig√d
(8))) = {

	@Evaluation/ma2x5x/IspHighThroughput/leon/params/isp_params_still.h

6 
	#ISPC_BAYER_BITS_STILL
 10

	)

9 
	#ISPC_DEMOSAIC_MIX_SLOPE
 4000

10 
	#ISPC_DEMOSAIC_MIX_OFFSET
 254

11 
	#ISPC_DEMOSAIC_MIX_GRADIENT_MUL
 250

12 
	#ISPC_DEMOSAIC_LUMA_WEIGHT_RED
 77

13 
	#ISPC_DEMOSAIC_LUMA_WEIGHT_GREEN
 150

14 
	#ISPC_DEMOSAIC_LUMA_WEIGHT_BLUE
 29

15 

	)

17 
	#ISPC_CGEN_EPSILON
 2

18 
	#ISPC_CGEN_KR
 106

19 
	#ISPC_CGEN_KG
 191

20 
	#ISPC_CGEN_KB
 149

21 
	#ISPC_CGEN_LUMA_COEFF_R
 77

22 
	#ISPC_CGEN_LUMA_COEFF_G
 150

23 
	#ISPC_CGEN_LUMA_COEFF_B
 29

24 
	#ISPC_CGEN_PFR_STRENGTH
 12

25 
	#ISPC_CGEN_DESAT_OFFSET
 0

26 
	#ISPC_CGEN_DESAT_SLOPE
 203

27 

	)

29 
	#ISPC_CHROMA_MEDIAN_SIZE
 7

30 

	)

32 
	#ISPC_CHROMA_MEDIAN_MIX_SLOPE
 166

33 
	#ISPC_CHROMA_MEDIAN_MIX_OFFSET
 1

34 

	)

36 
uöt8_t
 
i•cLow∑ssKî√l
[9];

39 
	#ISPC_SHARP_SIGMA
 1.350000

40 
	#ISPC_SHARP_STRENGTH_DARKEN
 0x3f00

41 
	#ISPC_SHARP_STRENGTH_LIGHTEN
 0x3dcc

42 
	#ISPC_SHARP_ALPHA
 0x289a

43 
	#ISPC_SHARP_OVERSHOOT
 0x3c33

44 
	#ISPC_SHARP_UNDERSHOOT
 0x3b47

45 
	#ISPC_SHARP_RANGE_STOP_0
 0x128d

46 
	#ISPC_SHARP_RANGE_STOP_1
 0x128d

47 
	#ISPC_SHARP_RANGE_STOP_2
 0x3b70

48 
	#ISPC_SHARP_RANGE_STOP_3
 0x3c00

49 
	#ISPC_SHARP_MIN_THR
 0x1d1d

50 
	#ISPC_SHARP_COEF0
 0x1c8a

51 
	#ISPC_SHARP_COEF1
 0x2ae9

52 
	#ISPC_SHARP_COEF2
 0x33be

53 
	#ISPC_SHARP_COEF3
 0x3662

54 

	)

56 
	#ISPC_LUMA_DNS_STRENGTH
 33.000000

57 
	#ISPC_LUMA_DNS_ALPHA
 74

58 

	)

63 
	#ISPC_LUMA_DNS_F2
 0xe5a45440

64 
	#ISPC_LUMA_DNS_BITPOS
 5

65 

	)

66 
uöt8_t
 
i•cLumaDnsLut
 [ 32];

67 
uöt8_t
 
i•cYDnsDi°Lut
[256];

69 
uöt8_t
 
i•cGammaLut0_32
 [9];

70 
uöt8_t
 
i•cGammaLut32_255
[9];

72 
	#ISPC_LUMA_DNS_REF_SHIFT
 15

73 

	)

74 
uöt16_t
 
i•cLtmCurves
[16*8];

77 
	#ISPC_LTM_FILTER_TH1
 32

78 

	)

80 
	#ISPC_DOG_THR
 6

81 
	#ISPC_DOG_STRENGTH
 0

82 

	)

83 
uöt8_t
 
dogC€ffs11
[6];

84 
uöt8_t
 
dogC€ffs15
[8];

87 
	#ISPC_CHROMA_DNS_TH_R
 6

88 
	#ISPC_CHROMA_DNS_TH_G
 7

89 
	#ISPC_CHROMA_DNS_TH_B
 8

90 
	#ISPC_CHROMA_DNS_LIMIT
 7

91 
	#ISPC_CHROMA_DNS_H_ENAB
 1

92 

	)

94 
	#ISPC_GREY_DESAT_OFFSET
 0

95 
	#ISPC_GREY_DESAT_SLOPE
 230

96 
	#ISPC_GREY_POINT_R
 106

97 
	#ISPC_GREY_POINT_G
 191

98 
	#ISPC_GREY_POINT_B
 149

99 

	)

102 
	#ISPC_CC_KR
 618

103 
	#ISPC_CC_KG
 343

104 
	#ISPC_CC_KB
 440

105 

	)

106 
i•cCCM
 [9];

107 
i•cCCMOff
[3];

109 
i•cCSC
 [9];

110 
i•cCSCOff
[3];

112 
	#N
 1

113 
	#D
 1

114 
uöt8_t
 
hC€fs
[];

115 
uöt8_t
 
vC€fs
[];

	)

	@Evaluation/ma2x5x/IspHighThroughput/leon/params/isp_params_wrap.h

1 #i‚de‡
__ISP_PARAMS_WRAP_H__


2 
	#__ISP_PARAMS_WRAP_H__


	)

5 #i‡
deföed
(
__•¨c
)

6 
	#ALIGNED
(
x
Ë
	`__©åibuã__
((
	`Æig√d
(x)))

	)

8 
	#ALIGNED
(
x
)

10 

	)

13 
	#BAYER_PATTERN
 
RGGB


	)

16 
	~"i•_∑øms_µ.h
"

17 
	~"i•_∑øms_°ûl.h
"

21 
uöt16_t
 
gammaLutFp16
[512*4];

	@Evaluation/ma2x5x/LowDynamicPower/leon/app_config.c

11 
	~<°dio.h
>

12 
	~"≠p_c⁄fig.h
"

13 
	~"ªgi°îsMyrüd.h
"

14 
	~"DrvC¥.h
"

15 
	~"DrvDdr.h
"

16 
	~"DrvTimî.h
"

17 
	~"DrvRegUtûs.h
"

18 
	~"DrvShaveL2Cache.h
"

22 
	#SYS_CLK_KHZ
 12000

23 

	)

24 
	#L2CACHE_CFG
 (
SHAVE_L2CACHE_NORMAL_MODE
)

	)

34 
	#MSS_CLOCKS
 ( 
DEV_MSS_MXI_CTRL
 )

	)

36 
	#APP_UPA_CLOCKS
 ( 
DEV_UPA_SHAVE_L2
 | \

37 
DEV_UPA_CDMA
 | \

38 
DEV_UPA_CTRL
 )

	)

40 
	#CORE_CSS_DSS_CLOCKS
 ( 
DEV_CSS_LOS
 | \

41 
DEV_CSS_LAHB_CTRL
 | \

42 
DEV_CSS_APB4_CTRL
 | \

43 
DEV_CSS_CPR
 | \

44 
DEV_CSS_LOS_L2C
 | \

45 
DEV_CSS_MAHB_CTRL
 | \

46 
DEV_CSS_LOS_DSU
 | \

47 
DEV_CSS_LOS_TIM
 | \

48 
DEV_CSS_GPIO
 | \

49 
DEV_CSS_JTAG
 | \

50 
DEV_CSS_APB1_CTRL
 | \

51 
DEV_CSS_APB3_CTRL
 | \

52 
DEV_CSS_UART
 | \

53 
DEV_CSS_SAHB_CTRL
 | \

54 
DEV_CSS_MSS_MAS
 | \

55 
DEV_CSS_UPA_MAS
 | \

56 
DEV_CSS_DSS_BUS_MAHB
 | \

57 
DEV_CSS_LAHB2SHB
 )

	)

58 #i‡
deföed
(
MA2150
Ë|| deföed(
MA2155
Ë|| deföed(
MA2450
Ë|| deföed(
MA2455
)

59 
tyAuxClkDividîCfg
 
	gauxClk
[] =

62 .
auxClockE«bÀMask
 = (
u32
)(1 << 
CSS_AUX_TSENS
),

63 .
	gauxClockSour˚
 = 
CLK_SRC_REFCLK0
,

64 .
	gauxClockDivNumî©‹
 = 1,

65 .
	gauxClockDivDíomö©‹
 = 10,

67 {
	gAUX_CLK_MASK_UART
, 
	gCLK_SRC_REFCLK0
, 96, 625},

71 
tyAuxClkDividîCfg
 
	gauxClk
[] =

73 {
AUX_CLK_MASK_UART
, 
CLK_SRC_REFCLK0
, 96, 625},

77 
tySocClockC⁄fig
 
	g˛ockC⁄fig
 =

79 .
ªfClk0I≈utKhz
 = 
SYS_CLK_KHZ
,

80 .
	gªfClk1I≈utKhz
 = 0,

81 .
	gèrgëPŒ0FªqKhz
 = 600000,

82 .
	gèrgëPŒ1FªqKhz
 = 0,

83 .
	g˛kSrcPŒ1
 = 
CLK_SRC_REFCLK0
,

84 .
	gma°îClkDivNumî©‹
 = 1,

85 .
	gma°îClkDivDíomö©‹
 = 1,

86 .
	gcssDssClockE«bÀMask
 = 
DEFAULT_CORE_CSS_DSS_CLOCKS
,

87 .
	gmssClockE«bÀMask
 = 
MSS_CLOCKS
,

88 .
	gu∑ClockE«bÀMask
 = 0,

89 .
	gsùpClockE«bÀMask
 = 0,

90 .
	gpAuxClkCfg
 = 
auxClk


101 
	$tu∫OnShavePowîI¶™ds
(
u32
 
shaveNumbî
)

103 
u32
 
i
;

105 
i
 = 
POWER_ISLAND_SHAVE_0
; i < 
shaveNumbî
; i++)

106 
	`DrvC¥PowîTu∫OnI¶™d
(
i
);

107 
	}
}

109 
	$tu∫OffShavePowîI¶™ds
()

111 
u32
 
i
;

113 
i
 = 
POWER_ISLAND_SHAVE_0
; i <
POWER_ISLAND_SHAVE_11
; i++)

114 
	`DrvC¥PowîTu∫OffI¶™d
(
i
);

115 
	}
}

117 
	$tu∫OffM‹ePowîI¶™ds
()

119 
u32
 
mssClocksToTu∫Off
 = ~
MSS_CLOCKS
;

120 
u32
 
cssClocksToTu∫Off
 = (u32Ë~
CORE_CSS_DSS_CLOCKS
;

122 
	`DrvC¥SysDevi˚A˘i⁄
(
MSS_DOMAIN
, 
DISABLE_CLKS
, 
mssClocksToTu∫Off
);

123 
	`DrvC¥SysDevi˚A˘i⁄
(
MSS_DOMAIN
, 
ASSERT_RESET
, 
mssClocksToTu∫Off
);

126 #i‡
	`deföed
(
MA2150
Ë|| deföed(
MA2155
Ë|| deföed(
MA2450
Ë|| deföed(
MA2455
)

127 
	`DrvC¥PowîTu∫OffI¶™d
(
POWER_ISLAND_MSS_CPU
);

128 
	`DrvC¥PowîTu∫OffI¶™d
(
POWER_ISLAND_MSS_AMC
);

129 
	`DrvC¥PowîTu∫OffI¶™d
(
POWER_ISLAND_MSS_SIPP
);

130 
	`DrvC¥PowîTu∫OffI¶™d
(
POWER_ISLAND_USB
);

132 
	`DrvC¥PowîTu∫OffI¶™d
(
POWER_ISLAND_MSS_DIGITAL
);

133 
	`DrvC¥PowîTu∫OffI¶™d
(
POWER_ISLAND_MSS_ANALOG
);

134 
	`DrvC¥PowîTu∫OffI¶™d
(
POWER_ISLAND_DSS_DIGITAL
);

135 
	`DrvC¥PowîTu∫OffI¶™d
(
POWER_ISLAND_DSS_ANALOG
);

138 
	`DrvC¥SysDevi˚A˘i⁄
(
CSS_DOMAIN
, 
DISABLE_CLKS
, 
cssClocksToTu∫Off
);

139 
	`DrvC¥SysDevi˚A˘i⁄
(
CSS_DOMAIN
, 
ASSERT_RESET
, 
cssClocksToTu∫Off
);

140 
	}
}

142 
	$ªdu˚Ba£löePowî
()

144 
	`tu∫OffM‹ePowîI¶™ds
();

145 
	}
}

152 
s32
 
	$öôClocksAndMem‹y
()

154 
	`DrvC¥Inô
();

155 
	`DrvC¥SëupClocks
(&
˛ockC⁄fig
);

157 
	`ªdu˚Ba£löePowî
();

160 
	}
}

164 
	$powîUpShavesAndDDR
()

166 
s32
 
i
;

168 
	`DrvDdrInôüli£
(
NULL
);

169 #i‡
	`deföed
(
MA2150
Ë|| deföed(
MA2155
Ë|| deföed(
MA2450
Ë|| deföed(
MA2455
)

170 
	`DrvC¥PowîTu∫OnI¶™d
(
POWER_ISLAND_MSS_CPU
);

172 
	`DrvC¥PowîTu∫OnI¶™d
(
POWER_ISLAND_MSS_DIGITAL
);

174 
	`DrvC¥SysDevi˚A˘i⁄
(
UPA_DOMAIN
, 
ENABLE_CLKS
, 
APP_UPA_CLOCKS
);

175 
	`DrvC¥SysDevi˚A˘i⁄
(
UPA_DOMAIN
, 
DEASSERT_RESET
, 
APP_UPA_CLOCKS
);

177 
	`DrvC¥SysDevi˚A˘i⁄
(
MSS_DOMAIN
, 
ENABLE_CLKS
, 
MSS_CLOCKS
);

178 
	`DrvC¥SysDevi˚A˘i⁄
(
MSS_DOMAIN
, 
DEASSERT_RESET
, 
MSS_CLOCKS
);

181 
	`DrvShaveL2CacheSëupP¨tôi⁄
(
SHAVEPART256KB
);

184 
	`DrvShaveL2CacheAŒoˇãSëP¨tôi⁄s
();

187 
i
 = 0; i < 
SHAVES_USED
; i++)

189 
	`DrvShaveL2CacheSëLSUP¨tId
(
i
, 
PARTITION_0
);

191 
	}
}

	@Evaluation/ma2x5x/LowDynamicPower/leon/app_config.h

9 #i‚de‡
_APP_CONFIG_H_


10 
	#_APP_CONFIG_H_


	)

14 
	~"mv_ty≥s.h
"

19 
	#SHAVES_USED
 (12)

	)

20 
	#PARTITION_0
 (0)

	)

26 
u32
 
__l2_c⁄fig
 ;

35 
s32
 
öôClocksAndMem‹y
();

36 
tu∫OnShavePowîI¶™ds
(
u32
 
nbShaves
);

37 
tu∫OffShavePowîI¶™ds
();

38 
powîUpShavesAndDDR
();

	@Evaluation/ma2x5x/LowDynamicPower/leon/main.c

12 
	~<°dio.h
>

13 
	~<°dlib.h
>

14 
	~<°rög.h
>

15 
	~<m©h.h
>

18 
	~"mv_ty≥s.h
"

19 
	~"ªgi°îsMyrüd.h
"

20 
	~"swcShaveLﬂdî.h
"

21 
	~"swcLe⁄Utûs.h
"

22 
	~"swcFømeTy≥s.h
"

23 
	~"swcCrc.h
"

26 #ifde‡
MV0212


27 
	~"MV0212.h
"

28 
	~"brdGpioCfgs/brdMv0182R5GpioDeÁu…s.h
"

29 #ñi‡
deföed
(
MV0182
)

30 
	~"Bﬂrd182Api.h
"

32 
	~"DrvCDCEL.h
"

33 
	~"brdMv0198.h
"

34 
	~"DrvLe⁄L2C.h
"

35 
	~"DrvSvu.h
"

36 
	~"DrvLe⁄.h
"

37 
	~"DrvRegUtûs.h
"

38 
	~"DrvTimî.h
"

39 
	~"DrvRegUtûs.h
"

40 
	~"DrvShaveL2Cache.h
"

42 #i‡
deföed
(
MA2150
Ë|| deföed(
MA2155
Ë|| deföed(
MA2450
Ë|| deföed(
MA2455
)

43 
	~"DrvTempSís‹.h
"

47 
	~"UnôTe°Api.h
"

48 
	~"VcsHooksApi.h
"

49 
	~"dbgTø˚rApi.h
"

52 
	~"≠p_c⁄fig.h
"

55 
	~"kî√l_c⁄fig.h
"

59 #i‚de‡
TEST_FRAME_WIDTH


60 
	#TEST_FRAME_WIDTH
 1280

	)

62 #i‚de‡
TEST_FRAME_HEIGHT


63 
	#TEST_FRAME_HEIGHT
 720

	)

66 
	#SHAVES_LIST
 {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}

	)

68 
	#GOLDEN_CRC
 0x14a4be4f

	)

70 #i‚de‡
NB_FRAMES_TO_PROF


71 
	#NB_FRAMES_TO_PROF
 1000

	)

74 #i‚de‡
MAX_SAMPLES_PER_TEST


75 
	#MAX_SAMPLES_PER_TEST
 100

	)

78 
	#CLOCKS_FOR_SHAVES
(
X
Ë((1<<X)-1)

	)

82 
	mWITHOUT_CRC32_CHECK
 = 0,

83 
	mWITH_CRC32_CHECK
 = 1,

84 } 
	t¸c32Check
;

88 
u32
 
	mshaveNumbî
;

89 
u32
 
	mœ°FømeCRC
;

90 
u64
 
	mtŸÆClocks
;

91 
s32
 
	mßm∂eNumbî
;

92 
tyAdcResu…AŒRaûs
 
	mpowî
[
MAX_SAMPLES_PER_TEST
];

94 
u32
 
	mavîageClocks
;

95 
u32
 
	mavîageFps
;

96 
u32
 
	mavîageGÊ›s
;

97 
Â32
 
	mavîagemW
;

98 
Â32
 
	mavîagemA
;

99 #i‡
deföed
(
MA2150
Ë|| deföed(
MA2155
Ë|| deföed(
MA2450
Ë|| deföed(
MA2455
)

100 
Â32
 
	mãm≥øtuª_CSS
;

101 
Â32
 
	mãm≥øtuª_MSS
;

102 
Â32
 
	mãm≥øtuª_UPA0
;

103 
Â32
 
	mãm≥øtuª_UPA1
;

105 } 
	tProfûe
;

107 #ifde‡
MV0212


108 
	#NUM_I2C_DEVS
 3

	)

112 
I2CM_Devi˚
 * 
	gi2c2H™dÀ
;

115 
u32
 
MaxFl›s0_AµSèπ3Kî√lsSåùes
;

116 
u32
 
MaxFl›s1_AµSèπ3Kî√lsSåùes
;

117 
u32
 
MaxFl›s2_AµSèπ3Kî√lsSåùes
;

118 
u32
 
MaxFl›s3_AµSèπ3Kî√lsSåùes
;

119 
u32
 
MaxFl›s4_AµSèπ3Kî√lsSåùes
;

120 
u32
 
MaxFl›s5_AµSèπ3Kî√lsSåùes
;

121 
u32
 
MaxFl›s6_AµSèπ3Kî√lsSåùes
;

122 
u32
 
MaxFl›s7_AµSèπ3Kî√lsSåùes
;

123 
u32
 
MaxFl›s8_AµSèπ3Kî√lsSåùes
;

124 
u32
 
MaxFl›s9_AµSèπ3Kî√lsSåùes
;

125 
u32
 
MaxFl›s10_AµSèπ3Kî√lsSåùes
;

126 
u32
 
MaxFl›s11_AµSèπ3Kî√lsSåùes
;

128 
u32
* 
	gMaxFl›s_AµSèπSåùes
[
SHAVES_USED
]={

129 &
MaxFl›s0_AµSèπ3Kî√lsSåùes
,

130 &
MaxFl›s1_AµSèπ3Kî√lsSåùes
,

131 &
MaxFl›s2_AµSèπ3Kî√lsSåùes
,

132 &
MaxFl›s3_AµSèπ3Kî√lsSåùes
,

133 &
MaxFl›s4_AµSèπ3Kî√lsSåùes
,

134 &
MaxFl›s5_AµSèπ3Kî√lsSåùes
,

135 &
MaxFl›s6_AµSèπ3Kî√lsSåùes
,

136 &
MaxFl›s7_AµSèπ3Kî√lsSåùes
,

137 &
MaxFl›s8_AµSèπ3Kî√lsSåùes
,

138 &
MaxFl›s9_AµSèπ3Kî√lsSåùes
,

139 &
MaxFl›s10_AµSèπ3Kî√lsSåùes
,

140 &
MaxFl›s11_AµSèπ3Kî√lsSåùes


144 
DDR_BUF
 
u8
 
	gö_image
[
FRAME_SIZE
];

145 
DDR_BUF
 
u8
 
	gout_image
[
FRAME_SIZE
];

150 c⁄° 
swcShaveUnô_t
 
	gshaveLi°
[
SHAVES_USED
] = 
SHAVES_LIST
;

151 c⁄° 
u32
 
	gshavesNumbî
[] = { 0, 1, 2, 4, 8, 12 };

152 c⁄° 
u32
 
	gruns
 = (
shavesNumbî
) / (shavesNumber[0]);

154 
‰ameS≥c
 
	gã°FømeS≥c
;

155 
‰ameBuf„r
 
	göBuf„r
;

156 
‰ameBuf„r
 
	goutBuf„r
;

158 
tyBrd198H™dÀ
 
	gpowîM⁄H™dÀ
;

159 
I2CM_Devi˚
* 
	gi2c
;

167 
	$öôBuf„rs
(
width
, 
height
)

170 
ã°FømeS≥c
.
ty≥
 = 
YUV420p
;

171 
ã°FømeS≥c
.
height
 = height;

172 
ã°FømeS≥c
.
width
 = width;

173 
ã°FømeS≥c
.
°ride
 = 
width
;

174 
ã°FømeS≥c
.
byãsPP
 = 1;

177 
öBuf„r
.
•ec
 = 
ã°FømeS≥c
;

178 
öBuf„r
.
p1
 = (
u8
*)
ö_image
;

179 
öBuf„r
.
p2
 = (
u8
*)(
u32
)(
ö_image
Ë+ 
width
 * 
height
;

180 
öBuf„r
.
p3
 = (
u8
*)(
u32
)(
ö_image
Ë+ 
width
 * 
height
 + width * height /4;

182 
outBuf„r
.
•ec
 = 
ã°FømeS≥c
;

183 
outBuf„r
.
p1
 = 
out_image
;

184 
outBuf„r
.
p2
 = 
out_image
 + 
width
 * 
height
;

185 
outBuf„r
.
p3
 = 
out_image
 + 
width
 * 
height
 + width * height /4;

186 
	}
}

188 
u32
 
	$ˇlcCrc
()

190 
	`swcLe⁄D©aCacheFlushBlockWhûePídög
();

191  
	`swcCÆcCrc32
(
out_image
, 
TEST_FRAME_WIDTH
, 
be_poöãr
);

192 
	}
}

194 
	$runShaves
(
u32
 
shavesNumbî
, u32* 
íåyPoöts
[], u32 
‰ameNumbî
)

196 
u32
 
i
;

198 
i
 = 0; i < 
shavesNumbî
; i++)

200 
	`DrvC¥PowîTu∫OnI¶™d
(
POWER_ISLAND_SHAVE_0
 + 
i
);

202 
	`swcRe£tShave
(
shaveLi°
[
i
]);

203 
	`swcSëShaveWödowsToDeÁu…
(
shaveLi°
[
i
]);

204 
	`swcSëAbsﬁuãDeÁu…Sèck
(
shaveLi°
[
i
]);

205 
	`swcSèπShaveCC
(
shaveLi°
[
i
], (
u32
)
íåyPoöts
[i], "iiiiiii", (u32)
out_image
, (u32)
ö_image
, 
TEST_FRAME_WIDTH
, 
TEST_FRAME_HEIGHT
, 
shavesNumbî
, i, 
‰ameNumbî
);

207 
	}
}

215 
	$run
(
u32
 
shavesNumbî
, u32* 
íåyPoöts
[], 
Profûe
* 
ã°
,
¸c32Check
 
¸cCheck
)

217 
tyTimeSèmp
 
timeSèmp
;

218 
u64
 
tickCou¡
;

221 
	`DrvShaveL2CacheP¨tôi⁄FlushAndInvÆid©e
(
PARTITION_0
);

223 
	`tu∫OnShavePowîI¶™ds
(
shavesNumbî
);

225 
	`¥ötf
("Sèπög shave†(%lu)...", 
shavesNumbî
);

228 
	`DrvTimîSèπTicksCou¡
(&
timeSèmp
);

231 
	`runShaves
(
shavesNumbî
, 
íåyPoöts
, 
NB_FRAMES_TO_PROF
);

233 
	`swcShavesRu¬ögAº
((
u32
*)
shaveLi°
, 
shavesNumbî
) || (shavesNumber == 0))

236 
u32
 
ªt
 = 
	`Brd198Sam∂eAŒRaûs
(&
powîM⁄H™dÀ
, &
ã°
->
powî
[ã°->
ßm∂eNumbî
]);

237 i‡(
ªt
 !
DRV_BRD198_DRV_SUCCESS
)

238 
	`¥ötf
("Eº‹ÑódögÖowîÑaûs: %lu\n", 
ªt
);

240 
ã°
->
ßm∂eNumbî
++;

243 i‡(
ã°
->
ßm∂eNumbî
 >
MAX_SAMPLES_PER_TEST
)

247 
	`swcShavesRu¬ögAº
((
u32
*)
shaveLi°
, 
shavesNumbî
))

251 
	`DrvTimîGëEœp£dTicks
(&
timeSèmp
, &
tickCou¡
);

254 if(
¸cCheck
 =
WITH_CRC32_CHECK
)

256 
ã°
->
œ°FømeCRC
 = 
	`ˇlcCrc
();

261 
ã°
->
œ°FømeCRC
 = 
GOLDEN_CRC
;

264 #i‡
	`deföed
(
MA2150
Ë|| deföed(
MA2155
Ë|| deföed(
MA2450
Ë|| deföed(
MA2455
)

266 ()
	`DrvTempSís‹GëSam∂e
(
TSENS_CSS
, &
ã°
->
ãm≥øtuª_CSS
);

267 if(
¸cCheck
 !
WITH_CRC32_CHECK
)

268 
	`DrvC¥PowîTu∫OnI¶™d
(
POWER_ISLAND_MSS_CPU
);

269 
	`DrvC¥PowîTu∫OnI¶™d
(
POWER_ISLAND_MSS_SIPP
);

270 ()
	`DrvTempSís‹GëSam∂e
(
TSENS_MSS
, &
ã°
->
ãm≥øtuª_MSS
);

271 
	`DrvC¥PowîTu∫OffI¶™d
(
POWER_ISLAND_MSS_SIPP
);

272 if(
¸cCheck
 !
WITH_CRC32_CHECK
)

273 
	`DrvC¥PowîTu∫OffI¶™d
(
POWER_ISLAND_MSS_CPU
);

274 ()
	`DrvTempSís‹GëSam∂e
(
TSENS_UPA0
, &
ã°
->
ãm≥øtuª_UPA0
);

275 ()
	`DrvTempSís‹GëSam∂e
(
TSENS_UPA1
, &
ã°
->
ãm≥øtuª_UPA1
);

280 i‡(
shavesNumbî
 > 0)

281 
ã°
->
ßm∂eNumbî
--;

283 
ã°
->
tŸÆClocks
 = 
tickCou¡
;

285 
	`tu∫OffShavePowîI¶™ds
();

287 
	`¥ötf
("done\n");

288 
	}
}

290 
	$checkResu…s
(
Profûe
* 
ã°s
, 
u32
 
ã°sNumbî
)

292 
u32
 
i
;

293 
s32
 
k
;

294 
Â32
 
avîageClocks
;

297 
i
 = 0; i < 
ã°sNumbî
; i++)

299 
	`unôTe°As£π
(
ã°s
[
i
].
œ°FømeCRC
 =
GOLDEN_CRC
);

301 
avîagemW
 = 0;

302 
avîagemA
 = 0;

304 
k
 = 0; k < 
ã°s
[
i
].
ßm∂eNumbî
; k++)

306 
avîagemW
 +
ã°s
[
i
].
powî
[
k
].
tŸÆMûliW©ts
;

307 
avîagemA
 +
ã°s
[
i
].
powî
[
k
].
tŸÆMûliAmps
;

310 
ã°s
[
i
].
avîagemW
 =ávîagemW /Åe°s[i].
ßm∂eNumbî
;

311 
ã°s
[
i
].
avîagemA
 =ávîagemA /Åe°s[i].
ßm∂eNumbî
;

313 
avîageClocks
 = (
Â32
)
ã°s
[
i
].
tŸÆClocks
 / 
NB_FRAMES_TO_PROF
;

314 
ã°s
[
i
].
avîageFps
 = (
u32
)((
	`DrvC¥GëClockFªqKhz
(
SYS_CLK
, 
NULL
Ë* 1000Ë/ 
avîageClocks
);

315 
ã°s
[
i
].
avîageGÊ›s
 = (
u32
)(
NUMBER_KERNELS
 * (
KERNEL_SIZE
 * KERNEL_SIZE * 2Ë* 
TEST_FRAME_WIDTH
 * 
TEST_FRAME_HEIGHT
 * (
u64
Èe°s[i].
avîageFps
 / (u64)
	`pow
(2.0, 30));

317 
	}
}

319 
	$showRï‹t
(
Profûe
* 
ã°s
, 
u32
 
ã°sNumbî
)

321 
u32
 
i
;

322 
u8
 
¸cResu…
[10];

324 
	`¥ötf
("Report\n");

325 
	`¥ötf
("============================================================\n");

327 
i
 = 0; i < 
ã°sNumbî
; i++)

329 i‡(
ã°s
[
i
].
œ°FømeCRC
 =
GOLDEN_CRC
)

331 
	`¥ötf
("%4lu fømes: %14luxSHAVEs. ", (
u32
)
NB_FRAMES_TO_PROF
, 
ã°s
[
i
].
shaveNumbî
);

335 
	`°∫˝y
((*)
¸cResu…
, "not ok\0", (crcResult));

336 
	`¥ötf
("%4lu fømes: CRC %6s, %2luxSHAVEs. ", (
u32
)
NB_FRAMES_TO_PROF
, 
¸cResu…
, 
ã°s
[
i
].
shaveNumbî
);

338 
	`¥ötf
("Resu…: %3lu fps, %2lu gÊ›s,Öowî %7.2‡mW\n", 
ã°s
[
i
].
avîageFps
,Åe°s[i].
avîageGÊ›s
,Åe°s[i].
avîagemW
);

339 #i‡
	`deföed
(
MA2150
Ë|| deföed(
MA2155
Ë|| deföed(
MA2450
Ë|| deföed(
MA2455
)

340 
	`¥ötf
("On-dõ jun˘i⁄Åem≥øtuª: CSS=%2.1fC, MSS=%2.1fC, UPA0=%2.1fC, UPA1=%2.1fC\n",
ã°s
[
i
].
ãm≥øtuª_CSS
,ã°s[i].
ãm≥øtuª_MSS
,ã°s[i].
ãm≥øtuª_UPA0
,ã°s[i].
ãm≥øtuª_UPA1
);

343 
	}
}

348 
	$runFuŒ
(
Profûe
* 
ã°
)

350 
u32
 
i
;

353 
	`¥ötf
("Running stripe based scheduling\n");

354 
	`¥ötf
("============================================================\n");

357 
ã°
[0].
shaveNumbî
 = 
shavesNumbî
[0];

360 
	`run
(
shavesNumbî
[0], 
MaxFl›s_AµSèπSåùes
, &
ã°
[0],
WITHOUT_CRC32_CHECK
);

362 
ã°
[0].
tŸÆClocks
 = 999999999999999999.9f;

365 
	`powîUpShavesAndDDR
();

368 
	`lﬂdMemFromFûeSim∂e
(
MV_EXTRA_DATA
, 
TEST_FRAME_WIDTH
 * 
TEST_FRAME_HEIGHT
, 
ö_image
);

370 
	`öôBuf„rs
(
TEST_FRAME_WIDTH
, 
TEST_FRAME_HEIGHT
);

372 
i
 = 1; i < 
runs
; i++)

374 
	`DrvC¥Tu∫OnShaveMask
(
	`CLOCKS_FOR_SHAVES
(
shavesNumbî
[
i
]));

375 
ã°
[
i
].
shaveNumbî
 = 
shavesNumbî
[i];

376 
	`run
(
shavesNumbî
[
i
], 
MaxFl›s_AµSèπSåùes
, &
ã°
[i],
WITH_CRC32_CHECK
);

377 
	`DrvC¥Tu∫OffShaveMask
(
	`CLOCKS_FOR_SHAVES
(
shavesNumbî
[
i
]));

379 
	}
}

381 
	$öôüli£PowîMósuªmít
(
I2CM_Devi˚
* 
i2cBus
)

383 
ªtu∫VÆue
;

385 
i2c
 = 
i2cBus
;

386 
	`as£π
(
i2c
 !
NULL
 && "I2CÇot initialized for MV0198");

388 
ªtu∫VÆue
 = 
	`Brd198Inô
(&
powîM⁄H™dÀ
, 
i2c
, 
NULL
);

389 
	`as£π
(
ªtu∫VÆue
 =
DRV_BRD198_DRV_SUCCESS
 && "Board 198 initÉrror");

390 
	}
}

392 
	$öôüli£H¨dw¨e
()

394 
s32
 
bﬂrdSètus
;

395 
	`öôClocksAndMem‹y
();

396 #i‡
	`deföed
(
MA2150
Ë|| deföed(
MA2155
Ë|| deföed(
MA2450
Ë|| deföed(
MA2455
)

397 
DrvTempSísC⁄fig
 
ãmpP¨am
 = {1};

400 #ifde‡
MV0212


401 
öt32_t
 
rc
;

402 
uöt32_t
 
ªv
;

403 
BﬂrdI2CInfo
 
öfo
[
NUM_I2C_DEVS
];

404 
BﬂrdC⁄figDesc
 
c⁄fig
[] =

407 
BRDCONFIG_GPIO
,

409 (*)
brdMV0182R5GpioCfgDeÁu…


412 
BRDCONFIG_END
,

413 
NULL


417 
rc
 = 
	`BﬂrdInô
(
c⁄fig
);

418 i‡(
rc
!=
BRDCONFIG_SUCCESS
)

420 
	`¥ötf
("Error: board initialization failed with %ld status\n",

421 
rc
);

422 
	`exô
(
rc
);

425 
rc
 = 
	`BﬂrdGëPCBRevisi⁄
(&
ªv
);

426 i‡(
rc
!=
BRDCONFIG_SUCCESS
)

428 
	`¥ötf
("Error: board configurationÑead failed with %ld status\n",

429 
rc
);

430 
	`exô
(
rc
);

432 
bﬂrdSètus
 = 
	`BﬂrdInôExtPŒ
(
EXT_PLL_CFG_148_24_24MHZ
);

433 i‡(
bﬂrdSètus
 !
BRDCONFIG_SUCCESS
)

435 
	`¥ötf
("Error: board initialization failed with %ld status\n",

436 
bﬂrdSètus
);

437 
	`exô
(-1);

439 
rc
 = 
	`BﬂrdGëI2CInfo
(
öfo
, 
NUM_I2C_DEVS
);

440 
i2c2H™dÀ
=
öfo
[2].
h™dÀr
;

441 #ñi‡
	`deföed
(
MV0182
)

442 
bﬂrdSètus
 = 
	`BﬂrdInôüli£
(
EXT_PLL_CFG_148_24_24MHZ
);

443 
i2c2H™dÀ
=
gAµDevHndls
.i2c2Handle;

444 i‡(
bﬂrdSètus
 !
B_SUCCESS
)

446 
	`¥ötf
("Error: board initialization failed with %ld status\n",

447 
bﬂrdSètus
);

450 
	`öôüli£PowîMósuªmít
(
i2c2H™dÀ
);

451 #i‡
	`deföed
(
MA2150
Ë|| deföed(
MA2155
Ë|| deföed(
MA2450
Ë|| deföed(
MA2455
)

452 
	`DrvTempSís‹Inôüli£
(&
ãmpP¨am
);

453 ()
	`DrvTempSís‹SëMode
(
TSENS_CSS
, 
TSENS_ONE_SHOT_MODE
, 
TSENS_SAMPLE_TEMP
);

454 ()
	`DrvTempSís‹SëMode
(
TSENS_MSS
, 
TSENS_ONE_SHOT_MODE
, 
TSENS_SAMPLE_TEMP
);

455 ()
	`DrvTempSís‹SëMode
(
TSENS_UPA0
, 
TSENS_ONE_SHOT_MODE
, 
TSENS_SAMPLE_TEMP
);

456 ()
	`DrvTempSís‹SëMode
(
TSENS_UPA1
, 
TSENS_ONE_SHOT_MODE
, 
TSENS_SAMPLE_TEMP
);

458 
	}
}

460 
	$maö
()

462 
Profûe
 
ã°s
[
runs
];

464 
	`öôüli£H¨dw¨e
();

466 
	`¥ötf
("LowDynamicPower benchmark\n");

467 
	`¥ötf
("============================================================\n");

468 
	`¥ötf
("Resﬁuti⁄: %dx%d\n", 
TEST_FRAME_WIDTH
, 
TEST_FRAME_HEIGHT
);

469 
	`¥ötf
("Processing: conv7x7 + conv7x7 + conv7x7 on u8\n");

470 
	`¥ötf
("Fªquícy: %dMhz\n\n", 
	`DrvC¥GëClockFªqKhz
(
SYS_CLK
, 
NULL
) / 1000);

472 
	`mem£t
(
ã°s
, 0, (tests));

474 
	`unôTe°Inô
();

476 
	`runFuŒ
(
ã°s
);

477 
	`checkResu…s
(
ã°s
, 
runs
);

478 
	`showRï‹t
(
ã°s
, 
runs
);

480 
	`unôTe°FöÆRï‹t
();

483 
	}
}

	@Evaluation/ma2x5x/LowDynamicPower/shared/kernel_config.h

1 #i‚de‡
__KERNEL_CONFIG_H__


2 
	#__KERNEL_CONFIG_H__


	)

5 
	#FULL_TEST_FRAME_WIDTH
 1920

	)

6 
	#FULL_TEST_FRAME_HEIGHT
 1080

	)

7 
	#FRAME_SIZE
 (
FULL_TEST_FRAME_WIDTH
 * 
FULL_TEST_FRAME_HEIGHT
 * 3/2)

	)

10 
	#LINES_NUM
 7

	)

11 
	#MAXWIDTH
 
FULL_TEST_FRAME_WIDTH


	)

13 
	#COLUMN_PADDING
 8

	)

14 
	#LINE_PADDING
 7

	)

15 
	#UPPER_LINE_PADDING
 (
LINE_PADDING
/2)

	)

17 
	#FULLWIDTH
 (
MAXWIDTH
 + 
COLUMN_PADDING
)

	)

19 
	#KERNEL_SIZE
 7

	)

20 
	#NUMBER_KERNELS
 3

	)

22 
	#CMX_DMA
 
	`__©åibuã__
((
	`£˘i⁄
(".cmx.cdmaDes¸ùt‹s")))

	)

23 
	#CMX_DATA
 
	`__©åibuã__
((
	`£˘i⁄
(".cmx.d©a")))

	)

24 
	#DDR_BUF
 
	`__©åibuã__
((
	`£˘i⁄
(".ddr.bss")))

	)

	@Evaluation/ma2x5x/LowDynamicPower/shave/MultipleKernelScheduleStripes.cpp

11 
	~<°dio.h
>

12 
	~<°rög.h
>

13 
	~<°dlib.h
>

15 
	~"mv_ty≥s.h
"

16 
	~"svuComm⁄Shave.h
"

18 
	~"swcCdma.h
"

20 
	~"mvcv.h
"

22 
	~"kî√l_c⁄fig.h
"

23 
	~"kî√l_buf„rs.h
"

39 
	$run
(
u8
* 
outFømeBuf„r
, u8* 
öFømeBuf„r
, 
u32
 
‰ameWidth
, u32 
‰ameHeight
, u32 
ƒShaves
,

40 
u32
 
¶i˚Index
)

42 
u32
 
¶i˚Height
 = ((
¶i˚Index
 + 1Ë=
ƒShaves
Ë? (
‰ameHeight
 - sliceIndex * (frameHeight /ÇrShaves))

43 : (
‰ameHeight
 / 
ƒShaves
);

45 
u8
 
löeIndex
 = 
¶i˚Index
 * (
‰ameHeight
/
ƒShaves
);

46 
u8
* 
öAddªss
 = 
öFømeBuf„r
 + 
löeIndex
 * 
‰ameWidth
;

47 
u8
* 
outAddªss
 = 
outFømeBuf„r
 + 
löeIndex
 * 
‰ameWidth
;

49 
u32
 
idx
;

51 
dmaTønß˘i⁄Li°_t
 
CMX_DMA
 
èsk1
, 
èsk2
, 
èsk3
;

52 
dmaTønß˘i⁄Li°_t
 
CMX_DMA
 *
ªf1
, *
ªf2
, *
ªf3
;

54 
	`öôPoöãrs
(
ö7LöesAddªss1
, 
ö7LöesBuf„r1
, 
LINES_NUM
, 
COLUMN_PADDING
);

55 
	`öôPoöãrs
(
ö7LöesAddªss2
, 
ö7LöesBuf„r2
, 
LINES_NUM
, 
COLUMN_PADDING
);

56 
	`öôPoöãrs
(
ö7LöesAddªss3
, 
ö7LöesBuf„r3
, 
LINES_NUM
, 
COLUMN_PADDING
);

57 
	`öôPoöãrs
(
outLöesAddªss
, 
outLöesBuf„r
, 2, 0);

59 
u32
 
id1
 = 
	`dmaInôReque°î
(0);

61 i‡((
löeIndex
 - 
UPPER_LINE_PADDING
) < 0 )

63 
idx
 = 0; idx < 
LINE_PADDING
 + 1; idx++)

65 
ªf1
 = 
	`dmaCª©eTønß˘i⁄
(
id1
, &
èsk1
, 
öAddªss
, 
ö7LöesAddªss1
[
idx
], 
‰ameWidth
);

66 
	`dmaSèπLi°Task
(
ªf1
);

67 
	`dmaWaôTask
(
ªf1
);

72 
u8
 *
ãmpAddªss
;

75 
idx
 = 0; idx < 
UPPER_LINE_PADDING
; idx++)

77 
ãmpAddªss
 = 
öAddªss
 - 
‰ameWidth
 * (
UPPER_LINE_PADDING
 - 
idx
);

78 
ªf1
 = 
	`dmaCª©eTønß˘i⁄
(
id1
, &
èsk1
, 
ãmpAddªss
 , 
ö7LöesAddªss1
[
idx
], 
‰ameWidth
);

79 
	`dmaSèπLi°Task
(
ªf1
);

80 
	`dmaWaôTask
(
ªf1
);

82 
ãmpAddªss
 = 
öAddªss
;

86 
idx
 = 
UPPER_LINE_PADDING
; idx < 
LINE_PADDING
; idx++)

88 
ªf1
 = 
	`dmaCª©eTønß˘i⁄
(
id1
, &
èsk1
, 
öAddªss
, 
ö7LöesAddªss1
[
idx
], 
‰ameWidth
);

89 
	`dmaSèπLi°Task
(
ªf1
);

90 
	`dmaWaôTask
(
ªf1
);

91 
ãmpAddªss
 +
‰ameWidth
 * 
idx
;

95 
idx
 = 0; idx < 
LINE_PADDING
 + 1; idx++)

97 
	`mvcvC⁄vﬁuti⁄7x7_asm
(
ö7LöesAddªss1
, 
ö7LöesAddªss2
, (
hÆf
*)
mask7
, 
‰ameWidth
);

98 
	`rŸ©ePoöãrs
(
ö7LöesAddªss2
, 
LINES_NUM
);

101 
idx
 = 0; idx < 
LINE_PADDING
 + 1; idx++)

103 
	`mvcvC⁄vﬁuti⁄7x7_asm
(
ö7LöesAddªss2
, 
ö7LöesAddªss3
, (
hÆf
*)
mask7
, 
‰ameWidth
);

104 
	`rŸ©ePoöãrs
(
ö7LöesAddªss3
, 
LINES_NUM
);

107 
	`mvcvC⁄vﬁuti⁄7x7_asm
(
ö7LöesAddªss3
, &
outLöesAddªss
[0], (
hÆf
*)
mask7
, 
‰ameWidth
);

109 
	`rŸ©ePoöãrs
(
ö7LöesAddªss1
, 
LINES_NUM
);

110 
	`rŸ©ePoöãrs
(
ö7LöesAddªss2
, 
LINES_NUM
);

111 
	`rŸ©ePoöãrs
(
ö7LöesAddªss3
, 
LINES_NUM
);

112 
	`rŸ©ePoöãrs
(
outLöesAddªss
, 2);

115 
idx
 = 
UPPER_LINE_PADDING
 + 1; idx < 
¶i˚Height
 + 14; idx++, 
öAddªss
 +
‰ameWidth
)

117 
ªf2
 = 
	`dmaCª©eTønß˘i⁄
(
id1
, &
èsk2
, 
öAddªss
, 
ö7LöesAddªss1
[0], 
‰ameWidth
);

118 
ªf3
 = 
	`dmaCª©eTønß˘i⁄
(
id1
, &
èsk3
, 
outLöesAddªss
[1], 
outAddªss
, 
‰ameWidth
);

119 
	`dmaLökTasks
(
ªf2
, 1, 
ªf3
);

120 
	`dmaSèπLi°Task
(
ªf2
);

122 
outAddªss
 +
‰ameWidth
;

125 
	`mvcvC⁄vﬁuti⁄7x7_asm
(
ö7LöesAddªss1
, 
ö7LöesAddªss2
, (
hÆf
*)
mask7
, 
‰ameWidth
);

126 
	`mvcvC⁄vﬁuti⁄7x7_asm
(
ö7LöesAddªss2
, 
ö7LöesAddªss3
, (
hÆf
*)
mask7
, 
‰ameWidth
);

127 
	`mvcvC⁄vﬁuti⁄7x7_asm
(
ö7LöesAddªss3
, &
outLöesAddªss
[0], (
hÆf
*)
mask7
, 
‰ameWidth
);

129 
	`dmaWaôTask
(
ªf2
);

131 
	`rŸ©ePoöãrs
(
ö7LöesAddªss1
, 
LINES_NUM
);

132 
	`rŸ©ePoöãrs
(
ö7LöesAddªss2
, 
LINES_NUM
);

133 
	`rŸ©ePoöãrs
(
ö7LöesAddªss3
, 
LINES_NUM
);

134 
	`rŸ©ePoöãrs
(
outLöesAddªss
, 2);

137 
ªf3
 = 
	`dmaCª©eTønß˘i⁄
(
id1
, &
èsk3
, 
outLöesAddªss
[1], 
outAddªss
, 
‰ameWidth
);

138 
	`dmaSèπLi°Task
(
ªf3
);

139 
	`dmaWaôTask
(
ªf3
);

140 
	}
}

142 "C" 
	$AµSèπ3Kî√lsSåùes
(
u8
* 
outFømeBuf„r
, u8* 
öFømeBuf„r
, 
u32
 
‰ameWidth
,

143 
u32
 
‰ameHeight
, u32 
ƒShaves
, u32 
¶i˚Index
, u32 
‰amesToRun
)

145 
u32
 
‰ames
 = 0; føme†< 
‰amesToRun
; frames++)

147 
	`run
(
outFømeBuf„r
, 
öFømeBuf„r
, 
‰ameWidth
, 
‰ameHeight
, 
ƒShaves
, 
¶i˚Index
);

151 
	`exô
(1);

152 
	}
}

	@Evaluation/ma2x5x/LowDynamicPower/shave/kernel_buffers.h

5 
	~"kî√l_c⁄fig.h
"

13 
u8
 
	gö7LöesBuf„r1
[8][
FULLWIDTH
] 
__©åibuã__
 ((
Æig√d
 (16)));

14 
u8
 
	gö7LöesBuf„r2
[8][
FULLWIDTH
] 
__©åibuã__
 ((
Æig√d
 (16)));

15 
u8
 
	gö7LöesBuf„r3
[8][
FULLWIDTH
] 
__©åibuã__
 ((
Æig√d
 (16)));

17 
u8
 
	goutLöesBuf„r
[2][
FULLWIDTH
] 
__©åibuã__
 ((
Æig√d
 (16)));

19 
u8
* 
	gö7LöesAddªss1
[
LINES_NUM
];

20 
u8
* 
	gö7LöesAddªss2
[
LINES_NUM
];

21 
u8
* 
	gö7LöesAddªss3
[
LINES_NUM
];

23 
u8
* 
	goutLöesAddªss
[2];

25 
u16
 
	gmask7
[7 * 7] 
__©åibuã__
 ((
Æig√d
 (16))) = {

41 
	$öôPoöãrs
(
u8
* 
öPoöãrs
[], u8 
öLöesBuff
[][
FULLWIDTH
], 
u32
 
ƒLöes
, u32 
∑ddög
)

43 
u32
 
i
 = 0; i < 
ƒLöes
; i++)

45 
öPoöãrs
[
i
] = (
u8
*)(((
u32
)(
öLöesBuff
[i] + 
∑ddög
)) & ~0xF);

47 
	}
}

49 
	$rŸ©ePoöãrs
(
u8
* 
poöãrs
[], 
u32
 
ƒLöes
)

51 
u8
* 
öã∫ÆPoöãr
 = 
poöãrs
[0];

53 
u32
 
i
 = 1; i < 
ƒLöes
; i++)

54 
poöãrs
[
i
 - 1] =Öointers[i];

56 
poöãrs
[
ƒLöes
 - 1] = 
öã∫ÆPoöãr
;

57 
	}
}

	@Evaluation/ma2x5x/PowerActiveBaseline/leon/app_config.c

11 
	~<DrvDdr.h
>

12 
	~<DrvTimî.h
>

13 
	~"≠p_c⁄fig.h
"

15 #i‡
deföed
(
MA2150
Ë|| deföed(
MA2155
Ë|| deföed(
MA2450
Ë|| deföed(
MA2455
)

16 
	~<DrvTempSís‹.h
>

21 
	#L2CACHE_CFG
 (
SHAVE_L2CACHE_NORMAL_MODE
)

	)

23 
	#MSS_CLOCKS_BASIC
 
DEV_MSS_MXI_CTRL


	)

28 
	#UPA_CLOCKS
 (
DEV_UPA_CTRL
 )

	)

37 
	$tu∫OffShavePowîI¶™ds
()

39 
u32
 
i
;

41 
i
 = 0; i < 12; i++)

43 
	`DrvC¥PowîTu∫OffI¶™d
(
POWER_ISLAND_SHAVE_0
 + 
i
);

45 
	}
}

47 
	$tu∫OffM‹ePowîI¶™ds
()

49 
u32
 
mssClocksToTu∫Off
 = ~
MSS_CLOCKS_BASIC
;

51 
	`DrvC¥SysDevi˚A˘i⁄
(
MSS_DOMAIN
, 
DISABLE_CLKS
, 
mssClocksToTu∫Off
);

52 
	`DrvC¥SysDevi˚A˘i⁄
(
MSS_DOMAIN
, 
ASSERT_RESET
, 
mssClocksToTu∫Off
);

54 #i‡
	`deföed
(
MA2150
Ë|| deföed(
MA2155
Ë|| deföed(
MA2450
Ë|| deföed(
MA2455
)

55 
	`DrvC¥PowîTu∫OffI¶™d
(
POWER_ISLAND_MSS_AMC
);

56 
	`DrvC¥PowîTu∫OffI¶™d
(
POWER_ISLAND_MSS_SIPP
);

57 
	`DrvC¥PowîTu∫OffI¶™d
(
POWER_ISLAND_MSS_CPU
);

58 
	`DrvC¥PowîTu∫OffI¶™d
(
POWER_ISLAND_USB
);

60 
	`DrvC¥PowîTu∫OffI¶™d
(
POWER_ISLAND_MSS_DIGITAL
);

61 
	`DrvC¥PowîTu∫OffI¶™d
(
POWER_ISLAND_MSS_ANALOG
);

62 
	`DrvC¥PowîTu∫OffI¶™d
(
POWER_ISLAND_DSS_DIGITAL
);

63 
	`DrvC¥PowîTu∫OffI¶™d
(
POWER_ISLAND_DSS_ANALOG
);

65 
	}
}

70 
	$ªdu˚Ba£löePowî
()

72 
	`tu∫OffShavePowîI¶™ds
();

73 
	`tu∫OffM‹ePowîI¶™ds
();

74 
	}
}

79 
	$öôClocksAndMem‹y
()

82 #i‡
	`deföed
(
MA2150
Ë|| deföed(
MA2155
Ë|| deföed(
MA2450
Ë|| deföed(
MA2455
)

83 
DrvTempSísC⁄fig
 
ãmpP¨am
 = {1};

84 
tyAuxClkDividîCfg
 
auxClk
[] =

87 .
auxClockE«bÀMask
 = (
u32
)(1 << 
CSS_AUX_TSENS
),

88 .
auxClockSour˚
 = 
CLK_SRC_REFCLK0
,

89 .
auxClockDivNumî©‹
 = 1,

90 .
auxClockDivDíomö©‹
 = 10,

92 {
AUX_CLK_MASK_UART
, 
CLK_SRC_REFCLK0
, 96, 625},

96 
tyAuxClkDividîCfg
 
auxClk
[] =

98 {
AUX_CLK_MASK_UART
, 
CLK_SRC_REFCLK0
, 96, 625},

103 
tySocClockC⁄fig
 
˛ockC⁄fig
 =

105 .
ªfClk0I≈utKhz
 = 12000,

106 .
ªfClk1I≈utKhz
 = 0,

107 .
èrgëPŒ0FªqKhz
 = 492000,

108 .
èrgëPŒ1FªqKhz
 = 0,

109 .
˛kSrcPŒ1
 = 
CLK_SRC_REFCLK0
,

110 .
ma°îClkDivNumî©‹
 = 1,

111 .
ma°îClkDivDíomö©‹
 = 1,

112 .
cssDssClockE«bÀMask
 = 
DEFAULT_CORE_CSS_DSS_CLOCKS
,

113 .
mssClockE«bÀMask
 = 
MSS_CLOCKS_BASIC
,

114 .
u∑ClockE«bÀMask
 = 
UPA_CLOCKS
,

115 .
sùpClockE«bÀMask
 = 0,

116 .
pAuxClkCfg
 = 
auxClk


119 
	`DrvC¥Inô
();

120 
	`DrvC¥SëupClocks
(&
˛ockC⁄fig
);

122 
	`DrvC¥SysDevi˚A˘i⁄
(
MSS_DOMAIN
, 
DEASSERT_RESET
, 0x0000ffff);

123 
	`DrvC¥SysDevi˚A˘i⁄
(
UPA_DOMAIN
, 
DEASSERT_RESET
, 0x0001ffff);

125 
	`ªdu˚Ba£löePowî
();

127 #i‡
	`deföed
(
MA2150
Ë|| deföed(
MA2155
Ë|| deföed(
MA2450
Ë|| deföed(
MA2455
)

128 
	`DrvTempSís‹Inôüli£
(&
ãmpP¨am
);

132 
	}
}

134 
	$tu∫OnDDR
()

136 
	`DrvDdrInôüli£
(
NULL
);

137 
	}
}

139 
	$tu∫OnDmaClocks
()

141 
u32
 
mssClocksToTu∫On
 = ~(
DEV_MSS_MXI_CTRL
);

142 #i‡
	`deföed
(
MA2150
Ë|| deföed(
MA2155
Ë|| deföed(
MA2450
Ë|| deföed(
MA2455
)

143 
	`DrvC¥PowîTu∫OnI¶™d
(
POWER_ISLAND_MSS_CPU
);

144 
	`DrvC¥SysDevi˚A˘i⁄
(
MSS_DOMAIN
, 
DISABLE_CLKS
, 
mssClocksToTu∫On
);

145 
	`DrvC¥SysDevi˚A˘i⁄
(
MSS_DOMAIN
, 
ENABLE_CLKS
, ~
mssClocksToTu∫On
);

146 
	`DrvC¥SysDevi˚A˘i⁄
(
MSS_DOMAIN
, 
ASSERT_RESET
, 
mssClocksToTu∫On
 & ~7);

147 
	`DrvC¥SysDevi˚A˘i⁄
(
MSS_DOMAIN
, 
DEASSERT_RESET
, ~
mssClocksToTu∫On
);

149 
	`DrvC¥PowîTu∫OnI¶™d
(
POWER_ISLAND_MSS_DIGITAL
);

150 
	`DrvC¥SysDevi˚A˘i⁄
(
MSS_DOMAIN
, 
DISABLE_CLKS
, 
mssClocksToTu∫On
);

151 
	`DrvC¥SysDevi˚A˘i⁄
(
MSS_DOMAIN
, 
ENABLE_CLKS
, ~
mssClocksToTu∫On
);

152 
	`DrvC¥SysDevi˚A˘i⁄
(
MSS_DOMAIN
, 
ASSERT_RESET
, 
mssClocksToTu∫On
 & ~7);

153 
	`DrvC¥SysDevi˚A˘i⁄
(
MSS_DOMAIN
, 
DEASSERT_RESET
, ~
mssClocksToTu∫On
);

155 
	`DrvC¥SysDevi˚A˘i⁄
(
UPA_DOMAIN
, 
ENABLE_CLKS
, ( 
DEV_UPA_SHAVE_L2
 | 
DEV_UPA_CDMA
) );

157 
	}
}

	@Evaluation/ma2x5x/PowerActiveBaseline/leon/app_config.h

9 #i‚de‡
_APP_CONFIG_H_


10 
	#_APP_CONFIG_H_


	)

26 
öôClocksAndMem‹y
();

27 
tu∫OnDDR
();

28 
tu∫OnDmaClocks
();

	@Evaluation/ma2x5x/PowerActiveBaseline/leon/main.c

13 
	~<°rög.h
>

14 
	~<°dio.h
>

15 
	~<°dlib.h
>

17 
	~<DrvM˝3424.h
>

18 
	~<DrvC¥.h
>

19 #ifde‡
MV0212


20 
	~"MV0212.h
"

21 
	~"brdGpioCfgs/brdMv0182R5GpioDeÁu…s.h
"

22 #ñi‡
deföed
(
MV0182
)

23 
	~<Bﬂrd182Api.h
>

24 
	~<brdMv0182.h
>

26 
	~<brdMv0198.h
>

27 
	~"DrvCDCEL.h
"

29 
	~<≠p_c⁄fig.h
>

30 
	~"DrvCmxDma.h
"

31 
	~"DrvTimî.h
"

33 
	~<UnôTe°Api.h
>

35 #i‡
deföed
(
MA2150
Ë|| deföed(
MA2155
Ë|| deföed(
MA2450
Ë|| deföed(
MA2455
)

36 
	~<DrvTempSís‹.h
>

42 
	#BUFF_SIZE
 ( 1024 * 512 * 16 - 32)

	)

43 
	#SIZE_1K
 1024

	)

44 
	#DEFAULT_NUM_CHANNELS
 16

	)

46 
	#DMA_PRIORITY_ONE
 1

	)

48 
	#NO_ERROR
 0

	)

50 
	#IS_MA2150
 (
	`GET_REG_WORD_VAL
(
CPR_VERSION_ID_ADR
Ë=0x3D41221D)

	)

52 #ifde‡
MV0212


53 
	#NUM_I2C_DEVS
 3

	)

57 
I2CM_Devi˚
 * 
	gi2c2H™dÀ
;

62 
u8
 
__©åibuã__
((
£˘i⁄
(".ddr.bss"))Ë
	gddrBuffSrc
[
BUFF_SIZE
];

63 
u8
 
__©åibuã__
((
£˘i⁄
(".ddr.bss"))Ë
	gddrBuffDe°
[
BUFF_SIZE
];

65 
dmaTønß˘i⁄Li°_t
 
__©åibuã__
((
£˘i⁄
(".cmx.cdmaDes¸ùt‹s"))Ë
	gèsk
;

66 
dmaReque°îId
 
	gid
;

70 
u32
 
vîifyD©a
(
u8
 *
§c
, u8 *
de°
, u32 
size
);

72 
fûlBuf„r
(
u8
 *
d©a
, 
u32
 
size
);

74 
öôSy°em
(
tyBrd198H™dÀ
* 
°©PowîH™dÀ
);

75 
s32
 
ßm∂eRaûs
(
u32
 
øûsGroup
, 
tyBrd198H™dÀ
 * 
powîM⁄H™dÀ
,

76 
tyAdcC⁄töuousC⁄fig
* 
cfg
, 
tyAdcResu…AŒRaûs
 * 
ªsu…
);

82 
u32
 
	$vîifyD©a
(
u8
 *
§c
, u8 *
de°
, 
u32
 
size
)

84 
u32
 
i
;

86 
i
 = 0; i < 
size
; i++)

87 i‡(
§c
[
i
] !
de°
[i])

89  
NO_ERROR
;

90 
	}
}

92 
	$fûlBuf„r
(
u8
 *
d©a
, 
u32
 
size
)

94 
u32
 
i
;

96 
i
 = 0; i < 
size
; i++)

97 
d©a
[
i
] = i;

98 
	}
}

100 
	$öôSy°em
(
tyBrd198H™dÀ
* 
°©PowîH™dÀ
)

102 
u32
 
ªt
;

103 
s32
 
bﬂrdSètus
;

104 
	`öôClocksAndMem‹y
();

105 
	`swcLe⁄SëPIL
(0);

107 #ifde‡
MV0212


108 
öt32_t
 
rc
;

109 
uöt32_t
 
ªv
;

110 
BﬂrdI2CInfo
 
öfo
[
NUM_I2C_DEVS
];

111 
BﬂrdC⁄figDesc
 
c⁄fig
[] =

114 
BRDCONFIG_GPIO
,

116 (*)
brdMV0182R5GpioCfgDeÁu…


119 
BRDCONFIG_END
,

120 
NULL


124 
rc
 = 
	`BﬂrdInô
(
c⁄fig
);

125 i‡(
rc
!=
BRDCONFIG_SUCCESS
)

127 
	`¥ötf
("Error: board initialization failed with %ld status\n",

128 
rc
);

129 
	`exô
(
rc
);

132 
rc
 = 
	`BﬂrdGëPCBRevisi⁄
(&
ªv
);

133 i‡(
rc
!=
BRDCONFIG_SUCCESS
)

135 
	`¥ötf
("Error: board configurationÑead failed with %ld status\n",

136 
rc
);

137 
	`exô
(
rc
);

139 
	`¥ötf
("Bﬂrd Mv0212 inôülized,Ñevisi⁄ = %lu \n", 
ªv
);

141 
bﬂrdSètus
 = 
	`BﬂrdInôExtPŒ
(
EXT_PLL_CFG_148_24_24MHZ
);

142 i‡(
bﬂrdSètus
 !
BRDCONFIG_SUCCESS
)

144 
	`¥ötf
("Error: board initialization failed with %ld status\n",

145 
bﬂrdSètus
);

146 
	`exô
(-1);

148 
rc
 = 
	`BﬂrdGëI2CInfo
(
öfo
, 
NUM_I2C_DEVS
);

149 
i2c2H™dÀ
=
öfo
[2].
h™dÀr
;

150 #ñi‡
	`deföed
(
MV0182
)

151 
tyAµDevi˚H™dÀs
 
gAµDevHndls
;

152 
bﬂrdSètus
 = 
	`BﬂrdInôüli£
(
EXT_PLL_CFG_148_24_24MHZ
);

153 
i2c2H™dÀ
=
gAµDevHndls
.i2c2Handle;

154 i‡(
bﬂrdSètus
 !
B_SUCCESS
)

156 
	`¥ötf
("Error: board initialization failed with %ld status\n",

157 
bﬂrdSètus
);

158 
	`exô
(-1);

162 
ªt
 = 
	`Brd198Inô
(
°©PowîH™dÀ
, 
i2c2H™dÀ
, 
NULL
);

163 i‡(
ªt
 !
MYR_DRV_SUCCESS
)

165 
	`¥ötf
("MV0198 failedÅo initialize\n");

166 
	`exô
(
ªt
);

168 
	}
}

170 
s32
 
	$ßm∂eRaûs
(
u32
 
øûsGroup
, 
tyBrd198H™dÀ
 * 
powîM⁄H™dÀ
,

171 
tyAdcC⁄töuousC⁄fig
* 
cfg
, 
tyAdcResu…AŒRaûs
 * 
ªsu…
)

173 
tyAdcC⁄töuousResu…
 
c⁄tResu…
;

174 
u32
 
ch™
;

175 i‡(
øûsGroup
 == 0)

177 
ch™
 = 0; ch™ < 
DEFAULT_NUM_CHANNELS
 - 2; chan++)

179 
ªsu…
->
adcResu…s
[
ch™
] = 0;

182 
cfg
->
aCh™√l
 = 
ADC_A_VDDCR_I_MA
;

183 
cfg
->
bCh™√l
 = 
ADC_B_DRAM_VDD2_I_MA
;

184 
cfg
->
cCh™√l
 = 
ADC_C_USB_VDD330_I_MA
;

185 
cfg
->
dCh™√l
 = 
ADC_D_PLL_AVDD_I_MA
;

187 i‡(
	`Brd198C⁄figuªC⁄töuousMode
(
powîM⁄H™dÀ
, 
cfg
))

192 
	`DrvTimîSÀïMs
(5);

194 i‡(
	`Brd198Sam∂eRaûC⁄töuousMode
(
powîM⁄H™dÀ
, &
c⁄tResu…
))

198 
ªsu…
->
adcResu…s
[
c⁄tResu…
.
adcAResu…
.
ch™Id
] = c⁄tResu….adcAResu….
adcVÆue
;

199 
ªsu…
->
adcResu…s
[
c⁄tResu…
.
adcBResu…
.
ch™Id
] = c⁄tResu….adcBResu….
adcVÆue
;

200 
ªsu…
->
adcResu…s
[
c⁄tResu…
.
adcCResu…
.
ch™Id
] = c⁄tResu….adcCResu….
adcVÆue
;

201 
ªsu…
->
adcResu…s
[
c⁄tResu…
.
adcDResu…
.
ch™Id
] = c⁄tResu….adcDResu….
adcVÆue
;

204 
cfg
->
aCh™√l
++;

205 
cfg
->
bCh™√l
++;

206 
cfg
->
cCh™√l
++;

207 
cfg
->
dCh™√l
++;

209 i‡(
cfg
->
dCh™√l
 =
ADC_D_MIPI_VDD_V_MV
 + 1)

212 
cfg
->
dCh™√l
 = 
ADC_D_PLL_AVDD_I_MA
;

216 
ªsu…
->
tŸÆMûliW©ts
 = 0.0f;

217 
ªsu…
->
tŸÆMûliAmps
 = 0.0f;

220 i‡(
IS_MA2150
)

221 
ªsu…
->
adcResu…s
[
VDDCC_I_MA
] = 0;

225 
ch™
 = 0; ch™ < 
DEFAULT_NUM_CHANNELS
 - 2; chan++)

228 
ªsu…
->
tŸÆMûliAmps
 +ªsu…->
adcResu…s
[
ch™
];

231 (
tyCh™√lId
Ë
ch™
)

233 
VDDCV_I_MA
:

234 
ªsu…
->
tŸÆMûliW©ts
 +=

235 (
ªsu…
->
adcResu…s
[
VDDCV_V_MV
] *Ñesu…->adcResu…s[
ch™
])/1000;

237 
MIPI_VDD_I_MA
:

238 
ªsu…
->
tŸÆMûliW©ts
 +=

239 (
ªsu…
->
adcResu…s
[
MIPI_VDD_V_MV
] *Ñesu…->adcResu…s[
ch™
])/1000;

242 
ªsu…
->
tŸÆMûliW©ts
 +=

243 
powîM⁄H™dÀ
->
adcC⁄fig
[
ch™
].
øûNomöÆV
 * 
ªsu…
->
adcResu…s
[chan];

249 
	}
}

252 
	$¥›îlyChkRïEº‹
(
Eº‹Code
, *
TextMesßge
)

254 i‡(
Eº‹Code
 != 0)

256 
	`¥ötf
("Eº‹ codê%dÑëu∫ed whûêexecutög %s\n", ()
Eº‹Code
, 
TextMesßge
);

258 
	`unôTe°As£π
(()(
Eº‹Code
 == 0));

259 
	}
}

261 
	$maö
()

263 
u32
 
i
,
j
;

264 
tyBrd198H™dÀ
 
°©PowîH™dÀ
;

265 
Â32
 
ddrMw
;

266 
Â32
 
ddrMa
;

267 
tyAdcResu…AŒRaûs
 
powRes
;

268 
Â32
 
c‹eMw
;

269 
u32
 
size
 = 
BUFF_SIZE
;

270 
s32
 
°©us
;

271 
dmaTønß˘i⁄Li°_t
 *
ªf
;

272 
tyAdcC⁄töuousC⁄fig
 
powC⁄tCfg
;

274 #i‡
	`deföed
(
MA2150
Ë|| deföed(
MA2155
Ë|| deföed(
MA2450
Ë|| deföed(
MA2455
)

275 
öt32_t
 
ãmpSís‹Sèt
 = 0;

276 
ãmp_MSS
;

277 
ãmp_CSS
;

278 
ãmp_UPA0
;

279 
ãmp_UPA1
;

282 
	`öôSy°em
(&
°©PowîH™dÀ
);

284 
	`unôTe°Inô
();

287 #i‡
	`deföed
(
MA2150
Ë|| deföed(
MA2155
Ë|| deföed(
MA2450
Ë|| deföed(
MA2455
)

288 
ãmpSís‹Sèt
 = 
	`DrvTempSís‹SëMode
(
TSENS_CSS
, 
TSENS_ONE_SHOT_MODE
, 
TSENS_SAMPLE_TEMP
);

289 
ãmpSís‹Sèt
 +
	`DrvTempSís‹SëMode
(
TSENS_MSS
, 
TSENS_ONE_SHOT_MODE
, 
TSENS_SAMPLE_TEMP
);

290 
ãmpSís‹Sèt
 +
	`DrvTempSís‹SëMode
(
TSENS_UPA0
, 
TSENS_ONE_SHOT_MODE
, 
TSENS_SAMPLE_TEMP
);

291 
ãmpSís‹Sèt
 +
	`DrvTempSís‹SëMode
(
TSENS_UPA1
, 
TSENS_ONE_SHOT_MODE
, 
TSENS_SAMPLE_TEMP
);

292 
	`¥›îlyChkRïEº‹
(
ãmpSís‹Sèt
,"Set Mode for Temperature Sensor");

295 
	`¥ötf
("StaticÖower measurement with minimal clocks (no DDR)\n");

297 
i
 = 0; i < 10; i++)

299 
ddrMw
 = 0;

300 
	`Brd198Sam∂eAŒRaûs
(&
°©PowîH™dÀ
, &
powRes
);

301 
	`Brd198GëDdrPowîAndCuºít
(&
°©PowîH™dÀ
, &
powRes
, &
ddrMw
, &
ddrMa
);

302 
c‹eMw
 = 
powRes
.
tŸÆMûliW©ts
 - 
ddrMw
;

303 #i‡
	`deföed
(
MA2150
Ë|| deföed(
MA2155
Ë|| deföed(
MA2450
Ë|| deföed(
MA2455
)

304 
ãmpSís‹Sèt
 = 
	`DrvTempSís‹GëSam∂e
(
TSENS_CSS
, &
ãmp_CSS
);

305 
	`DrvC¥PowîTu∫OnI¶™d
(
POWER_ISLAND_MSS_CPU
);

306 
	`DrvC¥PowîTu∫OnI¶™d
(
POWER_ISLAND_MSS_SIPP
);

307 
ãmpSís‹Sèt
 +
	`DrvTempSís‹GëSam∂e
(
TSENS_MSS
, &
ãmp_MSS
);

308 
	`DrvC¥PowîTu∫OffI¶™d
(
POWER_ISLAND_MSS_SIPP
);

309 
	`DrvC¥PowîTu∫OffI¶™d
(
POWER_ISLAND_MSS_CPU
);

310 
ãmpSís‹Sèt
 +
	`DrvTempSís‹GëSam∂e
(
TSENS_UPA0
, &
ãmp_UPA0
);

311 
ãmpSís‹Sèt
 +
	`DrvTempSís‹GëSam∂e
(
TSENS_UPA1
, &
ãmp_UPA1
);

312 
	`¥›îlyChkRïEº‹
(
ãmpSís‹Sèt
,"Read Temperature Sensor value");

313 
	`¥ötf
("C‹êmW = %7.03f, DDR mW = %7.03f, Tem≥øtuª CSS=%2.1fC, MSS=%2.1fC, UPA0=%2.1fC, UPA1=%2.1fC\n", 
c‹eMw
, 
ddrMw
, 
ãmp_CSS
,
ãmp_MSS
,
ãmp_UPA0
,
ãmp_UPA1
);

315 
	`¥ötf
("C‹êmW = %7.03f, DDR mW = %7.03f\n", 
c‹eMw
, 
ddrMw
);

319 
	`tu∫OnDDR
();

321 
	`¥ötf
("\nStaticÖower measurement with minimal clocks (DDR)\n");

323 
i
 = 0; i < 10; i++)

326 
	`Brd198Sam∂eAŒRaûs
(&
°©PowîH™dÀ
, &
powRes
);

327 
	`Brd198GëDdrPowîAndCuºít
(&
°©PowîH™dÀ
, &
powRes
, &
ddrMw
, &
ddrMa
);

328 
c‹eMw
 = 
powRes
.
tŸÆMûliW©ts
 - 
ddrMw
;

329 #i‡
	`deföed
(
MA2150
Ë|| deföed(
MA2155
Ë|| deföed(
MA2450
Ë|| deföed(
MA2455
)

330 
ãmpSís‹Sèt
 = 
	`DrvTempSís‹GëSam∂e
(
TSENS_CSS
, &
ãmp_CSS
);

331 
	`DrvC¥PowîTu∫OnI¶™d
(
POWER_ISLAND_MSS_CPU
);

332 
	`DrvC¥PowîTu∫OnI¶™d
(
POWER_ISLAND_MSS_SIPP
);

333 
ãmpSís‹Sèt
 +
	`DrvTempSís‹GëSam∂e
(
TSENS_MSS
, &
ãmp_MSS
);

334 
	`DrvC¥PowîTu∫OffI¶™d
(
POWER_ISLAND_MSS_SIPP
);

335 
	`DrvC¥PowîTu∫OffI¶™d
(
POWER_ISLAND_MSS_CPU
);

336 
ãmpSís‹Sèt
 +
	`DrvTempSís‹GëSam∂e
(
TSENS_UPA0
, &
ãmp_UPA0
);

337 
ãmpSís‹Sèt
 +
	`DrvTempSís‹GëSam∂e
(
TSENS_UPA1
, &
ãmp_UPA1
);

338 
	`¥›îlyChkRïEº‹
(
ãmpSís‹Sèt
,"Read Temperature Sensor value");

339 
	`¥ötf
("C‹êmW = %7.03f, DDR mW = %7.03f, Tem≥øtuª CSS=%2.1fC, MSS=%2.1fC, UPA0=%2.1fC, UPA1=%2.1fC\n", 
c‹eMw
, 
ddrMw
, 
ãmp_CSS
,
ãmp_MSS
,
ãmp_UPA0
,
ãmp_UPA1
);

341 
	`¥ötf
("C‹êmW = %7.03f, DDR mW = %7.03f\n", 
c‹eMw
, 
ddrMw
);

345 
	`tu∫OnDmaClocks
();

348 
°©us
 = 
	`DrvCmxDmaInôDeÁu…
();

349 i‡(
°©us
)

351 
	`¥ötf
("îr‹ %ld \n", 
°©us
);

352 
	`exô
(-1);

355 
id
 = 
	`DrvCmxDmaInôReque°î
(
DMA_PRIORITY_ONE
);

357 
	`¥ötf
("\nStaticÖower measurement with DMAÅransactions\n");

358 
j
 = 0; j < 10; j++)

361 
i
 = 0; i < 4; i++)

363 
	`fûlBuf„r
((
u8
*Ë
ddrBuffSrc
, 
size
);

364 
	`mem£t
((
u8
*Ë
ddrBuffDe°
, 0, 
size
);

366 
ªf
 = 
	`DrvCmxDmaCª©eTønß˘i⁄FuŒO±i⁄s
(
id
,

367 &
èsk
,

368 (
u8
*Ë
ddrBuffSrc
,

369 (
u8
*Ë
ddrBuffDe°
,

370 
BUFF_SIZE
,

371 
SIZE_1K
,

372 
SIZE_1K
,

373 
SIZE_1K
,

374 
SIZE_1K
);

376 
°©us
 = 
	`DrvCmxDmaSèπLi°Task
(
ªf
);

377 i‡(
°©us
 =
CDMA_TASK_ERR
)

379 
	`¥ötf
("îr‹ %ld \n", 
°©us
);

380 
	`exô
(-2);

385 i‡(
	`ßm∂eRaûs
(
i
, &
°©PowîH™dÀ
, &
powC⁄tCfg
, &
powRes
))

387 
	`¥ötf
("îr‹ %ld \n", 
°©us
);

388 
	`exô
(-3);

391 
°©us
 = 
	`DrvCmxDmaWaôTask
(
ªf
);

392 i‡(
°©us
)

394 
	`¥ötf
("îr‹ %ld \n", 
°©us
);

395 
	`exô
(-4);

398 #i‡
	`deföed
(
MA2150
Ë|| deföed(
MA2155
Ë|| deföed(
MA2450
Ë|| deföed(
MA2455
)

399 if(
i
 == 0)

401 
ãmpSís‹Sèt
 = 
	`DrvTempSís‹GëSam∂e
(
TSENS_CSS
, &
ãmp_CSS
);

402 
	`DrvC¥PowîTu∫OnI¶™d
(
POWER_ISLAND_MSS_SIPP
);

403 
ãmpSís‹Sèt
 +
	`DrvTempSís‹GëSam∂e
(
TSENS_MSS
, &
ãmp_MSS
);

404 
	`DrvC¥PowîTu∫OffI¶™d
(
POWER_ISLAND_MSS_SIPP
);

405 
ãmpSís‹Sèt
 +
	`DrvTempSís‹GëSam∂e
(
TSENS_UPA0
, &
ãmp_UPA0
);

406 
ãmpSís‹Sèt
 +
	`DrvTempSís‹GëSam∂e
(
TSENS_UPA1
, &
ãmp_UPA1
);

407 
	`¥›îlyChkRïEº‹
(
ãmpSís‹Sèt
,"Read Temperature Sensor value");

410 
	`unôTe°As£π
(
	`vîifyD©a
(
ddrBuffSrc
, 
ddrBuffDe°
, 
BUFF_SIZE
Ë=
NO_ERROR
);

412 
ddrMw
 = 0;

413 
ddrMa
 = 0;

414 
	`Brd198GëDdrPowîAndCuºít
(&
°©PowîH™dÀ
, &
powRes
, &
ddrMw
, &
ddrMa
);

415 
c‹eMw
 = 
powRes
.
tŸÆMûliW©ts
 - 
ddrMw
;

416 #i‡
	`deföed
(
MA2150
Ë|| deföed(
MA2155
Ë|| deföed(
MA2450
Ë|| deföed(
MA2455
)

417 
	`¥ötf
("C‹êmW = %7.03f, DDR mW = %7.03f, Tem≥øtuª CSS=%2.1fC, MSS=%2.1fC, UPA0=%2.1fC, UPA1=%2.1fC\n", 
c‹eMw
, 
ddrMw
, 
ãmp_CSS
,
ãmp_MSS
,
ãmp_UPA0
,
ãmp_UPA1
);

419 
	`¥ötf
("C‹êmW = %7.03f, DDR mW = %7.03f\n", 
c‹eMw
, 
ddrMw
);

423 
	`unôTe°FöÆRï‹t
();

426 
	}
}

	@Evaluation/ma2x5x/UsbMscDemo/leon/app_config.c

13 
	~"DrvDdr.h
"

14 
	~"DrvShaveL2Cache.h
"

15 
	~"OsDrvTimî.h
"

16 
	~"OsDrvC¥.h
"

27 
tyAuxClkDividîCfg
 
	gauxClk
[] =

30 .
auxClockE«bÀMask
 = 
AUX_CLK_MASK_USB_CTRL_SUSPEND_CLK
,

31 .
	gauxClockSour˚
 = 
CLK_SRC_PLL0
,

32 .
	gauxClockDivNumî©‹
 = 1,

33 .
	gauxClockDivDíomö©‹
 = 24

44 
	$öôClocksAndMem‹y
()

46 
s32
 
sc
;

49 
sc
 = 
	`OsDrvC¥Inô
();

50 if(
sc
)

51  
sc
;

52 
sc
 = 
	`OsDrvC¥O≥n
();

53 if(
sc
)

54  
sc
;

55 
sc
 = 
	`OsDrvC¥AuxClockAºayC⁄fig
(
auxClk
);

56 if(
sc
)

57  
sc
;

58 
	`DrvDdrInôüli£
(
NULL
);

61 
	}
}

	@Evaluation/ma2x5x/UsbMscDemo/leon/app_config.h

9 #i‚de‡
_APP_CONFIG_H_


10 
	#_APP_CONFIG_H_


	)

13 
	#PLL_DESIRED_FREQ_KHZ
 480000

	)

15 
	#DEFAULT_OSC0_KHZ
 12000

	)

16 
	#L2CACHE_NORMAL_MODE
 (0x6)

17 
	#L2CACHE_CFG
 (
L2CACHE_NORMAL_MODE
)

	)

18 
	#BIGENDIANMODE
 (0x01000786)

	)

21 #i‡
deföed
(
__RTEMS__
)

23 #i‡!
deföed
 (
__CONFIG__
)

24 
	#__CONFIG__


	)

27 
	#CONFIGURE_INIT


	)

29 #i‚de‡
RTEMS_POSIX_API


30 
	#RTEMS_POSIX_API


	)

33 
	#CONFIGURE_MICROSECONDS_PER_TICK
 1000

	)

35 
	#CONFIGURE_TICKS_PER_TIMESLICE
 50

	)

37 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

39 
	#CONFIGURE_APPLICATION_NEEDS_CLOCK_DRIVER


	)

41 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

43 
	#CONFIGURE_MINIMUM_TASK_STACK_SIZE
 (4096)

	)

45 
	#CONFIGURE_MAXIMUM_TASKS
 20

	)

47 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 5

	)

49 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 8

	)

51 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 8

	)

53 
	#CONFIGURE_MAXIMUM_POSIX_SEMAPHORES
 8

	)

55 
	#CONFIGURE_MAXIMUM_POSIX_MESSAGE_QUEUES
 8

	)

57 
	#CONFIGURE_MAXIMUM_POSIX_TIMERS
 4

	)

59 
	#CONFIGURE_MAXIMUM_TIMERS
 4

	)

61 
	#CONFIGURE_USE_IMFS_AS_BASE_FILESYSTEM


	)

63 
	#CONFIGURE_FILESYSTEM_DOSFS


	)

65 
	#CONFIGURE_MAXIMUM_DRIVERS
 10

	)

67 
	#CONFIGURE_MAXIMUM_SEMAPHORES
 (4 * 
RTEMS_DOSFS_SEMAPHORES_PER_INSTANCE
)

	)

69 
	#CONFIGURE_LIBIO_MAXIMUM_FILE_DESCRIPTORS
 30

	)

71 
	#CONFIGURE_APPLICATION_NEEDS_LIBBLOCK


	)

73 
	#CONFIGURE_POSIX_INIT_TASKS_TABLE


	)

75 *
POSIX_Inô
 (*
¨gs
);

77 
	~"ÁèlExãnsi⁄.h
"

79 
öôClocksAndMem‹y
();

81 
	#CONFIGURE_MAXIMUM_USER_EXTENSIONS
 1

	)

82 
	#CONFIGURE_INITIAL_EXTENSIONS
 { .
Áèl
 = 
F©Æ_exãnsi⁄
 }

	)

84 
	~<πems/c⁄fdefs.h
>

	@Evaluation/ma2x5x/UsbMscDemo/leon/main.c

11 
	~<°dio.h
>

12 
	~<°dlib.h
>

13 
	~<πems.h
>

14 
	~<πems/b•Io.h
>

15 
	~<b•.h
>

17 
	~<mv_ty≥s.h
>

18 
	~"≠p_c⁄fig.h
"

19 
	~"OsDrvUsbPhy.h
"

20 
	~"OsDrvC¥.h
"

21 
	~"DrvDdr.h
"

24 
	~"usbpumpdebug.h
"

25 
	~"usbpump_≠∂iˇti⁄_πems_≠i.h
"

32 
BSP_SET_CLOCK
(
DEFAULT_OSC0_KHZ
, 
PLL_DESIRED_FREQ_KHZ
, 1, 1, 
DEFAULT_RTEMS_CSS_LOS_CLOCKS
, 
DEFAULT_RTEMS_MSS_LRT_CLOCKS
,0,0,0);

34 
BSP_SET_L2C_CONFIG
(1,
DEFAULT_RTEMS_L2C_REPLACEMENT_POLICY
, 
DEFAULT_RTEMS_L2C_LOCKED_WAYS
,
DEFAULT_RTEMS_L2C_MODE
, 0, 0);

40 #i‚de‡
DISABLE_LEON_DCACHE


41 
	#USBPUMP_MDK_CACHE_ENABLE
 1

	)

43 
	#USBPUMP_MDK_CACHE_ENABLE
 0

	)

46 
USBPUMP_APPLICATION_RTEMS_CONFIGURATION
 
	gsg_D©aPump_AµC⁄fig
 =

47 
USBPUMP_APPLICATION_RTEMS_CONFIGURATION_INIT_V1
(

49  
NULL
,

54  
NULL
,

55  
NULL
,

56  
USBPUMP_MDK_CACHE_ENABLE
,

57  
UDMASK_ANY
 | 
UDMASK_ERRORS


66 *
	$POSIX_Inô
 (*
¨gs
)

68 (Ë
¨gs
;

70 
s32
 
sc
;

71 
osDrvUsbPhyP¨am_t
 
öôP¨am
 =

73 .
íabÀOtgBlock
 = 
USB_PHY_OTG_DISABLED
,

74 .
u£Exã∫ÆClock
 = 
USB_PHY_USE_EXT_CLK
,

75 .
fSñ
 = 
USB_REFCLK_20MHZ
,

76 .
ªfClkSñ0
 = 
USB_SUPER_SPEED_CLK_CONFIG
,

77 .
f‹˚HsO∆y
 = 
USB_PHY_HS_ONLY_OFF


80 
sc
 = 
	`öôClocksAndMem‹y
();

81 if(
sc
)

82 
	`exô
(
sc
);

84 
	`OsDrvUsbPhyInô
(&
öôP¨am
);

85 i‡(
	`UsbPump_Rãms_D©aPump_Sèπup
(&
sg_D©aPump_AµC⁄fig
Ë!
NULL
)

87 
	`¥ötf
("USB Mass Storage Class demo started\n\n");

91 
	`¥ötf
("\n\nUsbPump_Rtems_DataPump_Startup() failed!\n\n\n");

92 
	`exô
(1);

94  
NULL
;

95 
	}
}

	@Evaluation/ma2x5x/UsbMscDemo/leon/mscapplib.h

11 #i‚de‡
_MSCAPPLIB_H_


12 
	#_MSCAPPLIB_H_


	)

14 
	~"usbpum≥nv.h
"

15 
	~"usbpumpobje˘.h
"

16 
	~"usbio˘l_°‹age.h
"

17 
	~"msˇèpicfg.h
"

25 
	#MSCDEMO_RAMDISK_VENDOR_ID
 "MCCI"

	)

26 
	#MSCDEMO_RAMDISK_PRODUCT_ID_0
 "RAM-Disk-0"

	)

27 
	#MSCDEMO_RAMDISK_PRODUCT_ID_1
 "RAM-Disk-1"

	)

28 
	#MSCDEMO_RAMDISK_PRODUCT_ID_2
 "RAM-Disk-2"

	)

29 
	#MSCDEMO_RAMDISK_VERSION
 "1.00"

	)

31 
	#MSCDEMO_RAMDISK_LBA_SIZE
 512

	)

33 #i‚de‡
MSCDEMO_RAMDISK_NUM_LBA


34 
	#MSCDEMO_RAMDISK_NUM_LBA
 32 * 4096

	)

39 
__TMS_TYPE_DEF_STRUCT
(
MSCDEMO_RAMDISK_LUN_CONFIG
);

40 
__TMS_TYPE_DEF_STRUCT
(
MSCDEMO_RAMDISK_CONFIG
);

41 
__TMS_TYPE_DEF_STRUCT
(
MSCDEMO_DEVOBJ
);

42 
__TMS_TYPE_DEF_STRUCT
(
MSCDEMO_DEVOBJ_RAMDISK_LUN
);

43 
__TMS_TYPE_DEF_STRUCT
(
MSCDEMO_DEVOBJ_RAMDISK
);

44 
__TMS_TYPE_DEF_STRUCT
(
MSCDEMO_RAMDISK_REQUEST
);

55 
	$__TMS_STRUCTNAME
(
MSCDEMO_DEVOBJ
)

60 
__TMS_USBPUMP_OBJECT_HEADER
 
Hódî
;

63 
__TMS_PUSBPUMP_OBJECT_HEADER
 
pIoObje˘
;

66 
__TMS_PUDEVICE
 
pDevi˚
;

67 
__TMS_PUPLATFORM
 
pPœtf‹m
;

69 
	}
};

71 
	#MSCDEMO_DEVOBJ_TAG_RAMDISK
 
	`UHIL_MEMTAG
('R','d','s','k')

	)

73 
	#MSCDEMO_DEVOBJ_NAME_RAMDISK
 "ømdisk.osdrivî.mcci.com"

	)

76 
	$__TMS_STRUCTNAME
(
MSCDEMO_RAMDISK_REQUEST
)

78 
__TMS_UCALLBACKCOMPLETION
 
Evít
;

79 
__TMS_BYTES
 
Lba
;

80 
__TMS_BYTES
 
LbaCou¡
;

81 
__TMS_PUINT8
 
pBuf„r
;

82 
	}
};

84 
	$__TMS_STRUCTNAME
(
MSCDEMO_DEVOBJ_RAMDISK_LUN
)

86 
__TMS_MSCDEMO_DEVOBJ_RAMDISK
 * 
udrdl_pRamdisk
;

88 
__TMS_BYTES
 
udrdl_iLun
;

91 
__TMS_BYTES
 
udrdl_LbaOffs
;

92 
__TMS_BYTES
 
udrdl_nLba
;

95 
__TMS_MSCDEMO_RAMDISK_REQUEST
 
udrdl_RódReque°
;

96 
__TMS_MSCDEMO_RAMDISK_REQUEST
 
udrdl_WrôeReque°
;

98 
__TMS_USBPUMP_STORAGE_STATUS
 
udrdl_La°SètusRï‹ãd
;

99 
__TMS_BOOL
 
udrdl_fMediumLﬂded
;

100 
__TMS_BOOL
 
udrdl_fPªvítRemovÆ
;

101 
	}
};

103 
	$__TMS_STRUCTNAME
(
MSCDEMO_DEVOBJ_RAMDISK
)

105 
__TMS_MSCDEMO_DEVOBJ
 
udrd_DevObj
;

108 
__TMS_PUINT8
 
udrd_pMedü
;

109 
__TMS_BYTES
 
udrd_nLba
;

112 
__TMS_MSCDEMO_DEVOBJ_RAMDISK_LUN
 * 
udrd_pLun
;

113 
__TMS_BYTES
 
udrd_nLun
;

114 
	}
};

117 
__TMS_CONST
 
__TMS_UPROTO_MSCSUBCLASS_ATAPI_CONFIG


118 
gk_MscDemoI_RamdiskC⁄figV2
[];

120 
__TMS_CONST
 
__TMS_UPROTO_MSCSUBCLASS_ATAPI_CONFIG


121 
gk_MscDemoI_RamdiskC⁄fig
;

123 
__TMS_CONST
 
__TMS_UPROTO_MSCSUBCLASS_ATAPI_CONFIG


124 
gk_MscDemoI_RamdiskC⁄fig_D©aInStuff
;

127 
__TMS_BEGIN_DECLS


129 
__TMS_BOOL
 
MscDemo_Cª©eRamdisk
(

130 
__TMS_PUPLATFORM
 
pPœtf‹m
,

131 
__TMS_PUSBPUMP_OBJECT_HEADER
 
pFun˘i⁄Obje˘
,

132 
__TMS_PMSCDEMO_DEVOBJ_RAMDISK
 * 
µRamDisk


135 
__TMS_BOOL
 
MscDemo_Cª©eRamdiskV2
(

136 
__TMS_PUPLATFORM
 
pPœtf‹m
,

137 
__TMS_PUSBPUMP_OBJECT_HEADER
 
pFun˘i⁄Obje˘
,

138 
__TMS_PMSCDEMO_DEVOBJ_RAMDISK
 * 
µRamDisk
,

139 
__TMS_CONST
 
__TMS_MSCDEMO_RAMDISK_CONFIG
 * 
pC⁄figAŒ


142 
	g__TMS_END_DECLS


	@Evaluation/ma2x5x/UsbMscDemo/leon/mscapplibcfg.h

10 #i‚de‡
_MSCAPPLIBCFG_H


11 
	#_MSCAPPLIBCFG_H_


	)

13 
	~"msˇµlib.h
"

35 
	$__TMS_STRUCTNAME
(
MSCDEMO_RAMDISK_LUN_CONFIG
)

37 
__TMS_BYTES
 
LoLba
;

38 
__TMS_BYTES
 
HiLba
;

39 
	}
};

69 
	#__TMS_MSCDEMO_RAMDISK_LUN_CONFIG_SETUP_V1
( \

70 
pC⁄fig
, \

71 
ARG_LoLba
, \

72 
ARG_HiLba
 \

75 (
pC⁄fig
)->
LoLba
 = (
ARG_LoLba
); \

76 (
pC⁄fig
)->
HiLba
 = (
ARG_HiLba
); \

77 } 0)

	)

80 #i‡!
__TMS_CLOAKED_NAMES_ONLY


81 
	#MSCDEMO_RAMDISK_LUN_CONFIG_SETUP_V1
( \

82 
pC⁄fig
, \

83 
ARG_LoLba
, \

84 
ARG_HiLba
 \

86 
	`__TMS_MSCDEMO_RAMDISK_LUN_CONFIG_SETUP_V1
( \

87 
pC⁄fig
, \

88 
ARG_LoLba
, \

89 
ARG_HiLba
 \

90 )

	)

118 
	#__TMS_MSCDEMO_RAMDISK_LUN_CONFIG_INIT_V1
( \

119 
ARG_LoLba
, \

120 
ARG_HiLba
 \

123 (
ARG_LoLba
), \

124 (
ARG_HiLba
) \

125 }

	)

129 #i‡!
__TMS_CLOAKED_NAMES_ONLY


130 
	#MSCDEMO_RAMDISK_LUN_CONFIG_INIT_V1
( \

131 
ARG_LoLba
, \

132 
ARG_HiLba
 \

134 
	`__TMS_MSCDEMO_RAMDISK_LUN_CONFIG_INIT_V1
( \

135 
ARG_LoLba
, \

136 
ARG_HiLba
 \

137 )

	)

158 
	$__TMS_STRUCTNAME
(
MSCDEMO_RAMDISK_CONFIG
)

160 
__TMS_BYTES
 
nLba
;

164 
__TMS_CONST
 
__TMS_MSCDEMO_RAMDISK_LUN_CONFIG
 * 
pLun
;

165 
__TMS_BYTES
 
nLun
;

166 
	}
};

198 
	#__TMS_MSCDEMO_RAMDISK_CONFIG_SETUP_V1
( \

199 
pC⁄fig
, \

200 
ARG_nLba
, \

201 
ARG_pLun
 \

204 (
pC⁄fig
)->
nLba
 = (
ARG_nLba
); \

205 (
pC⁄fig
)->
pLun
 = (
ARG_pLun
); \

206 (
pC⁄fig
)->
nLun
 = 
	`__TMS_LENOF
(
ARG_pLun
); \

207 } 0)

	)

210 #i‡!
__TMS_CLOAKED_NAMES_ONLY


211 
	#MSCDEMO_RAMDISK_CONFIG_SETUP_V1
( \

212 
pC⁄fig
, \

213 
ARG_nLba
, \

214 
ARG_pLun
 \

216 
	`__TMS_MSCDEMO_RAMDISK_CONFIG_SETUP_V1
( \

217 
pC⁄fig
, \

218 
ARG_nLba
, \

219 
ARG_pLun
 \

220 )

	)

248 
	#__TMS_MSCDEMO_RAMDISK_CONFIG_INIT_V1
( \

249 
ARG_nLba
, \

250 
ARG_pLun
 \

253 (
ARG_nLba
), \

254 (
ARG_pLun
), \

255 
	`__TMS_LENOF
(
ARG_pLun
) \

256 }

	)

260 #i‡!
__TMS_CLOAKED_NAMES_ONLY


261 
	#MSCDEMO_RAMDISK_CONFIG_INIT_V1
( \

262 
ARG_nLba
, \

263 
ARG_pLun
 \

265 
	`__TMS_MSCDEMO_RAMDISK_CONFIG_INIT_V1
( \

266 
ARG_nLba
, \

267 
ARG_pLun
 \

268 )

	)

272 
__TMS_CONST
 
__TMS_MSCDEMO_RAMDISK_CONFIG


273 
gk_MscDemo_RamdiskAµC⁄fig
[];

	@Evaluation/ma2x5x/UsbMscDemo/leon/mscdemo_appinit.c

11 
	~"usb≠pöô.h
"

12 
	~"usbio˘l_°‹age.h
"

15 
	~"msˇèpi.h
"

18 
	~"msˇµlib.h
"

22 
	#EXTERN_USBRC_ROOTTABLE
(
NAME
) \

23 
CONST
 
USBRC_ROOTTABLE
 
NAME
;

	)

25 #ifde‡
DESCRIPTOR_ROOT_0


26 
	$EXTERN_USBRC_ROOTTABLE
(
DESCRIPTOR_ROOT_0
)

28 #ifde‡
DESCRIPTOR_ROOT_1


29 
	$EXTERN_USBRC_ROOTTABLE
(
DESCRIPTOR_ROOT_1
)

31 #ifde‡
DESCRIPTOR_ROOT_2


32 
	$EXTERN_USBRC_ROOTTABLE
(
DESCRIPTOR_ROOT_2
)

34 #ifde‡
DESCRIPTOR_ROOT_3


35 
	$EXTERN_USBRC_ROOTTABLE
(
DESCRIPTOR_ROOT_3
)

37 #ifde‡
DESCRIPTOR_ROOT_4


38 
	$EXTERN_USBRC_ROOTTABLE
(
DESCRIPTOR_ROOT_4
)

40 #ifde‡
DESCRIPTOR_ROOT_5


41 
	$EXTERN_USBRC_ROOTTABLE
(
DESCRIPTOR_ROOT_5
)

43 #ifde‡
DESCRIPTOR_ROOT_6


44 
	$EXTERN_USBRC_ROOTTABLE
(
DESCRIPTOR_ROOT_6
)

46 #ifde‡
DESCRIPTOR_ROOT_7


47 
	$EXTERN_USBRC_ROOTTABLE
(
DESCRIPTOR_ROOT_7
)

49 #ifde‡
DESCRIPTOR_ROOT_8


50 
	$EXTERN_USBRC_ROOTTABLE
(
DESCRIPTOR_ROOT_8
)

52 #ifde‡
DESCRIPTOR_ROOT_9


53 
	$EXTERN_USBRC_ROOTTABLE
(
DESCRIPTOR_ROOT_9
)

55 #i‚de‡
DESCRIPTOR_ROOT_0


56 #i‚de‡
DESCRIPTOR_ROOT_1


57 #i‚de‡
DESCRIPTOR_ROOT_2


58 #i‚de‡
DESCRIPTOR_ROOT_3


59 #i‚de‡
DESCRIPTOR_ROOT_4


60 #i‚de‡
DESCRIPTOR_ROOT_5


61 #i‚de‡
DESCRIPTOR_ROOT_6


62 #i‚de‡
DESCRIPTOR_ROOT_7


63 #i‚de‡
DESCRIPTOR_ROOT_8


64 #i‚de‡
DESCRIPTOR_ROOT_9


65 
	$EXTERN_USBRC_ROOTTABLE
(
gk_UsbDes¸ùt‹RoŸ
)

79 
VOID
 
	`MscDemo_Clõ¡Cª©e
(
UPLATFORM
 *
pPœtf‹m
);

83 
USB_DATAPUMP_APPLICATION_INIT_VECTOR_FINISH_FN
 
MscDemoI_AµInô_Ve˘‹Föish
;

87 
CONST
 
USBPUMP_PROTOCOL_INIT_NODE
 
InôNodes
[] =

89 
	`USBPUMP_PROTOCOL_INIT_NODE_INIT_V2
( \

91  
USB_bI¡îÁ˚Cœss_MassSt‹age
, \

92  
USB_bI¡îÁ˚SubCœss_MassSt‹ageScsi
, \

96  
USBPUMP_PROTOCOL_INIT_FLAG_AUTO_ADD
, \

97  
NULL
, \

98  
MscSubCœss_Aèpi_PrŸocﬁCª©e
, \

99  
NULL
, \

100  
NULL
, \

101  &
gk_MscDemoI_RamdiskC⁄fig
 \

103 
	}
};

106 
CONST
 
USBPUMP_PROTOCOL_INIT_NODE_VECTOR
 
	gInôHódî
 =

107 
USBPUMP_PROTOCOL_INIT_NODE_VECTOR_INIT_V1
(

108  
InôNodes
,

109  
NULL
,

110  
NULL


113 
	#INIT_VECTOR_NODE
(
a__UsbDes¸ùt‹RoŸ
) \

114 
	`USB_DATAPUMP_APPLICATION_INIT_VECTOR_INIT_V2
( \

115  &
a__UsbDes¸ùt‹RoŸ
, \

117 
UDMASK_ANY
 | 
UDMASK_ERRORS
 | 0, \

118  
NULL
, \

120 
UsbPump_GíîicAµliˇti⁄Inô_PrŸocﬁs
, \

121  &
InôHódî
 \

122 )

	)

131 
CONST
 
USB_DATAPUMP_APPLICATION_INIT_VECTOR
 
	gUsbPumpAµliˇti⁄InôVe˘‹
[] =

133 #ifde‡
DESCRIPTOR_ROOT_0


134 
INIT_VECTOR_NODE
(
DESCRIPTOR_ROOT_0
),

136 #ifde‡
DESCRIPTOR_ROOT_1


137 
INIT_VECTOR_NODE
(
DESCRIPTOR_ROOT_1
),

139 #ifde‡
DESCRIPTOR_ROOT_2


140 
INIT_VECTOR_NODE
(
DESCRIPTOR_ROOT_2
),

142 #ifde‡
DESCRIPTOR_ROOT_3


143 
INIT_VECTOR_NODE
(
DESCRIPTOR_ROOT_3
),

145 #ifde‡
DESCRIPTOR_ROOT_4


146 
INIT_VECTOR_NODE
(
DESCRIPTOR_ROOT_4
),

148 #ifde‡
DESCRIPTOR_ROOT_5


149 
INIT_VECTOR_NODE
(
DESCRIPTOR_ROOT_5
),

151 #ifde‡
DESCRIPTOR_ROOT_6


152 
INIT_VECTOR_NODE
(
DESCRIPTOR_ROOT_6
),

154 #ifde‡
DESCRIPTOR_ROOT_7


155 
INIT_VECTOR_NODE
(
DESCRIPTOR_ROOT_7
),

157 #ifde‡
DESCRIPTOR_ROOT_8


158 
INIT_VECTOR_NODE
(
DESCRIPTOR_ROOT_8
),

160 #ifde‡
DESCRIPTOR_ROOT_9


161 
INIT_VECTOR_NODE
(
DESCRIPTOR_ROOT_9
),

163 #i‚de‡
DESCRIPTOR_ROOT_0


164 #i‚de‡
DESCRIPTOR_ROOT_1


165 #i‚de‡
DESCRIPTOR_ROOT_2


166 #i‚de‡
DESCRIPTOR_ROOT_3


167 #i‚de‡
DESCRIPTOR_ROOT_4


168 #i‚de‡
DESCRIPTOR_ROOT_5


169 #i‚de‡
DESCRIPTOR_ROOT_6


170 #i‚de‡
DESCRIPTOR_ROOT_7


171 #i‚de‡
DESCRIPTOR_ROOT_8


172 #i‚de‡
DESCRIPTOR_ROOT_9


173 
INIT_VECTOR_NODE
(
gk_UsbDes¸ùt‹RoŸ
)

186 
CONST
 
USB_DATAPUMP_APPLICATION_INIT_VECTOR_HDR
 
	ggk_UsbPumpAµliˇti⁄InôHdr
 =

187 
USB_DATAPUMP_APPLICATION_INIT_VECTOR_HDR_INIT_V1
(

188 
UsbPumpAµliˇti⁄InôVe˘‹
,

189  
NULL
,

190  
MscDemoI_AµInô_Ve˘‹Föish


194 
VOID


195 
	$MscDemoI_AµInô_Ve˘‹Föish
(

196 
UPLATFORM
 * 
pPœtf‹m
,

197 
CONST
 
USB_DATAPUMP_APPLICATION_INIT_VECTOR_HDR
 *
pVecHdr
,

198 
VOID
 * 
pAµInôC⁄ãxt
,

199 
UINT
 
nP‹ts


202 
	`USBPUMP_UNREFERENCED_PARAMETER
(
pVecHdr
);

203 
	`USBPUMP_UNREFERENCED_PARAMETER
(
pAµInôC⁄ãxt
);

204 
	`USBPUMP_UNREFERENCED_PARAMETER
(
nP‹ts
);

206 
	`MscDemo_Clõ¡Cª©e
(
pPœtf‹m
);

207 
	}
}

	@Evaluation/ma2x5x/UsbMscDemo/leon/mscdemo_create.c

11 
	~"usbpum∑pi.h
"

12 
	~"msˇµlib.h
"

13 
	~"u∂©f‹m.h
"

14 
	~"usbpumpobje˘≠i.h
"

15 
	~"usbpumpobje˘«me.h
"

16 
	~"usbpum¥oŸ.h
"

17 
	~"msˇµlibcfg.h
"

21 
VOID
 
MscDemo_Clõ¡Cª©e
(
UPLATFORM
 *
pPœtf‹m
);

41 
VOID


42 
	$MscDemo_Clõ¡Cª©e
(
UPLATFORM
 *
pPœtf‹m
)

44 
USBPUMP_OBJECT_ROOT
 * 
CONST
 
pPumpRoŸ
 =

45 
	`UsbPumpObje˘_GëRoŸ
(&
pPœtf‹m
->
upf_Hódî
);

46 
USBPUMP_OBJECT_HEADER
 *
pFun˘i⁄Obje˘
;

48 
MSCDEMO_DEVOBJ_RAMDISK
 
RamDisk
;

49 
PMSCDEMO_DEVOBJ_RAMDISK
 
pRamDisk
 = &
RamDisk
;

52 
pFun˘i⁄Obje˘
 = 
NULL
;

56 (
pFun˘i⁄Obje˘
 = 
	`UsbPumpObje˘_Enumî©eM©chögNames
(

57 &
pPumpRoŸ
->
Hódî
,

58 
pFun˘i⁄Obje˘
,

59 
USBPUMP_OBJECT_NAME_ENUM_STORAGE


60 )Ë!
NULL
)

62 
	`MscDemo_Cª©eRamdiskV2
(

63 
pPœtf‹m
,

64 
pFun˘i⁄Obje˘
,

65 &
pRamDisk
,

66 &
gk_MscDemo_RamdiskAµC⁄fig
[1]

69 
	}
}

	@Evaluation/ma2x5x/UsbMscDemo/leon/mscdemo_ramdisk.c

11 
	~"msˇµlibcfg.h
"

12 
	~"ubufqópi.h
"

13 
	~"uevíäode.h
"

14 
	~"u∂©f‹m.h
"

15 
	~"u∂©f‹m≠i.h
"

16 
	~"usbpum∑pi.h
"

17 
	~"usbpumpdebug.h
"

18 
	~"usbpum∂ib.h
"

19 
	~"usbpum∂i°.h
"

20 
	~"usbpumpobje˘≠i.h
"

21 
	~"usbio˘Àdgecodes.h
"

22 
	~"usbio˘l_°‹age.h
"

23 
	~"usbpumpio˘œpi.h
"

24 
	~"usbmsc10.h
"

25 
	~"u°©.h
"

26 
	~"u‚≠i°‹age.h
"

27 
	~"usbpump_dev•ìd.h
"

29 
	~<°dio.h
>

30 
	~<πems.h
>

34 
	#STORAGE_SIZE
 (64 * 1024 * 1024)

	)

40 
UINT8
 
__©åibuã__
((
£˘i⁄
(".ddr_dúe˘.bss"))Ë
	gddrSt‹age
[
STORAGE_SIZE
];

41 
USBPUMP_OBJECT_IOCTL_FN
 
	gMscDemoI_Ramdisk_Io˘l
;

47 
USBPUMP_IOCTL_RESULT


48 
MscDemoI_Ramdisk_A˘iv©e
(

49 
MSCDEMO_DEVOBJ
 *, 
PUSBPUMP_IOCTL_EDGE_ACTIVATE_ARG


52 
USBPUMP_IOCTL_RESULT


53 
MscDemoI_Ramdisk_Dó˘iv©e
(

54 
MSCDEMO_DEVOBJ
 *, 
CONST
 
USBPUMP_IOCTL_EDGE_DEACTIVATE_ARG
 *

57 
USBPUMP_IOCTL_RESULT


58 
MscDemoI_Ramdisk_BusEvít
(

59 
MSCDEMO_DEVOBJ
 *, 
CONST
 
USBPUMP_IOCTL_EDGE_BUS_EVENT_ARG
 *

63 
USBPUMP_IOCTL_RESULT


64 
MscDemoI_Ramdisk_Ród
(

65 
MSCDEMO_DEVOBJ
 *, 
USBPUMP_IOCTL_EDGE_STORAGE_READ_ARG
 *

68 
USBPUMP_IOCTL_RESULT


69 
MscDemoI_Ramdisk_RódD⁄e
(

70 
MSCDEMO_DEVOBJ
 *, 
USBPUMP_IOCTL_EDGE_STORAGE_READ_DONE_ARG
 *

73 
USBPUMP_IOCTL_RESULT


74 
MscDemoI_Ramdisk_Wrôe
(

75 
MSCDEMO_DEVOBJ
 *, 
USBPUMP_IOCTL_EDGE_STORAGE_WRITE_ARG
 *

78 
USBPUMP_IOCTL_RESULT


79 
MscDemoI_Ramdisk_WrôeD©a
(

80 
MSCDEMO_DEVOBJ
 *, 
USBPUMP_IOCTL_EDGE_STORAGE_WRITE_DATA_ARG
 *

83 
USBPUMP_IOCTL_RESULT


84 
MscDemoI_Ramdisk_GëSètus
(

85 
MSCDEMO_DEVOBJ
 *, 
USBPUMP_IOCTL_EDGE_STORAGE_GET_STATUS_ARG
 *

88 
USBPUMP_IOCTL_RESULT


89 
MscDemoI_Ramdisk_Re£tDevi˚
(

90 
MSCDEMO_DEVOBJ
 *, 
USBPUMP_IOCTL_EDGE_STORAGE_RESET_DEVICE_ARG
 *

93 
USBPUMP_IOCTL_RESULT


94 
MscDemoI_Ramdisk_LﬂdOrEje˘
(

95 
MSCDEMO_DEVOBJ
 *, 
USBPUMP_IOCTL_EDGE_STORAGE_LOAD_OR_EJECT_ARG
 *

98 
USBPUMP_IOCTL_RESULT


99 
MscDemoI_Ramdisk_PªvítRemovÆ
(

100 
MSCDEMO_DEVOBJ
 *, 
USBPUMP_IOCTL_EDGE_STORAGE_PREVENT_REMOVAL_ARG
 *

103 
USBPUMP_IOCTL_RESULT


104 
MscDemoI_Ramdisk_Cu°omComm™d
(

105 
MSCDEMO_DEVOBJ
 *, 
USBPUMP_IOCTL_EDGE_STORAGE_CUSTOM_COMMAND_ARG
 *

108 
USBPUMP_IOCTL_RESULT


109 
MscDemoI_Ramdisk_Cu°omSídD⁄e
(

110 
MSCDEMO_DEVOBJ
 *, 
USBPUMP_IOCTL_EDGE_STORAGE_CUSTOM_SEND_DONE_ARG
 *

113 
USBPUMP_IOCTL_RESULT


114 
MscDemoI_Ramdisk_Cu°omRe˚iveD⁄e
(

115 
MSCDEMO_DEVOBJ
 *, 
USBPUMP_IOCTL_EDGE_STORAGE_CUSTOM_RECEIVE_DONE_ARG
 *

118 
UCALLBACKFN
 
	gMscDemoI_Ramdisk_RódCom∂ëe
;

119 
UCALLBACKFN
 
	gMscDemoI_Ramdisk_WrôeCom∂ëe
;

124 
CONST
 
MSCDEMO_RAMDISK_LUN_CONFIG
 
	gRamdiskAµ0_LunC⁄fig
[] =

126 
MSCDEMO_RAMDISK_LUN_CONFIG_INIT_V1
(

128  (
MSCDEMO_RAMDISK_NUM_LBA
/2)-1

131 
MSCDEMO_RAMDISK_LUN_CONFIG_INIT_V1
(

132  (
MSCDEMO_RAMDISK_NUM_LBA
/2),

133  
MSCDEMO_RAMDISK_NUM_LBA
-1

139 
CONST
 
MSCDEMO_RAMDISK_LUN_CONFIG
 
	gRamdiskAµ1_LunC⁄fig
[] =

141 
MSCDEMO_RAMDISK_LUN_CONFIG_INIT_V1
(

143  
MSCDEMO_RAMDISK_NUM_LBA
-1

148 
CONST
 
MSCDEMO_RAMDISK_CONFIG
 
	ggk_MscDemo_RamdiskAµC⁄fig
[] =

150 
MSCDEMO_RAMDISK_CONFIG_INIT_V1
(

151  
MSCDEMO_RAMDISK_NUM_LBA
,

152  
RamdiskAµ0_LunC⁄fig


155 
MSCDEMO_RAMDISK_CONFIG_INIT_V1
(

156  
MSCDEMO_RAMDISK_NUM_LBA
,

157  
RamdiskAµ1_LunC⁄fig


163 
CONST
 
UPROTO_MSCSUBCLASS_ATAPI_LUN_CONFIG
 
	gMassSt‹age0_LunC⁄fig
[] =

165 
UPROTO_MSCSUBCLASS_ATAPI_LUN_CONFIG_INIT_V1
(

166  
USBPUMP_STORAGE_DEVICE_TYPE_DIRECT_ACCESS
,

167  
TRUE
,

168  
MSCDEMO_RAMDISK_VENDOR_ID
,

169  
MSCDEMO_RAMDISK_PRODUCT_ID_0
,

170  
MSCDEMO_RAMDISK_VERSION


173 
UPROTO_MSCSUBCLASS_ATAPI_LUN_CONFIG_INIT_V1
(

174  
USBPUMP_STORAGE_DEVICE_TYPE_DIRECT_ACCESS
,

175  
TRUE
,

176  
MSCDEMO_RAMDISK_VENDOR_ID
,

177  
MSCDEMO_RAMDISK_PRODUCT_ID_1
,

178  
MSCDEMO_RAMDISK_VERSION


183 
CONST
 
UPROTO_MSCSUBCLASS_ATAPI_LUN_CONFIG
 
	gMassSt‹age1_LunC⁄fig
[] =

185 
UPROTO_MSCSUBCLASS_ATAPI_LUN_CONFIG_INIT_V1
(

186  
USBPUMP_STORAGE_DEVICE_TYPE_DIRECT_ACCESS
,

187  
TRUE
,

188  
MSCDEMO_RAMDISK_VENDOR_ID
,

189  
MSCDEMO_RAMDISK_PRODUCT_ID_2
,

190  
MSCDEMO_RAMDISK_VERSION


195 
CONST
 
UPROTO_MSCSUBCLASS_ATAPI_CONFIG
 
	ggk_MscDemoI_RamdiskC⁄figV2
[] =

197 
UPROTO_MSCSUBCLASS_ATAPI_CONFIG_INIT_V2
(

198 
MassSt‹age0_LunC⁄fig


201 
UPROTO_MSCSUBCLASS_ATAPI_CONFIG_INIT_V2
(

202 
MassSt‹age1_LunC⁄fig


207 
CONST
 
UPROTO_MSCSUBCLASS_ATAPI_CONFIG
 
	ggk_MscDemoI_RamdiskC⁄fig
 =

208 
UPROTO_MSCSUBCLASS_ATAPI_CONFIG_INIT_V1
(

209  
USBPUMP_STORAGE_DEVICE_TYPE_DIRECT_ACCESS
,

210  
TRUE
,

211  
MSCDEMO_RAMDISK_VENDOR_ID
,

212  
MSCDEMO_RAMDISK_PRODUCT_ID_0
,

213  
MSCDEMO_RAMDISK_VERSION


217 
CONST
 
UPROTO_MSCSUBCLASS_ATAPI_LUN_CONFIG
 
	gsk_MassSt‹age_LunC⁄fig
[] =

219 
UPROTO_MSCSUBCLASS_ATAPI_LUN_CONFIG_INIT_V1
(

220  
USBPUMP_STORAGE_DEVICE_TYPE_DIRECT_ACCESS
,

221  
TRUE
,

222  
MSCDEMO_RAMDISK_VENDOR_ID
,

223  
MSCDEMO_RAMDISK_PRODUCT_ID_0
,

224  
MSCDEMO_RAMDISK_VERSION


228 
CONST
 
UPROTO_MSCSUBCLASS_ATAPI_CONFIG
 
	ggk_MscDemoI_RamdiskC⁄fig_D©aInStuff
 =

229 
UPROTO_MSCSUBCLASS_ATAPI_CONFIG_INIT_V3
(

230 
sk_MassSt‹age_LunC⁄fig
,

231  
TRUE


240 
CONST
 
UINT8
 
	gMscDemo_FakeMbr
[512]=

330 
BOOL


331 
	$MscDemo_Cª©eRamdisk
(

332 
UPLATFORM
 * 
pPœtf‹m
,

333 
USBPUMP_OBJECT_HEADER
 * 
pFun˘i⁄Obje˘
,

334 
PMSCDEMO_DEVOBJ_RAMDISK
 * 
µRamDisk


337  
	`MscDemo_Cª©eRamdiskV2
(

338 
pPœtf‹m
,

339 
pFun˘i⁄Obje˘
,

340 
µRamDisk
,

341 
NULL


343 
	}
}

369 
BOOL


370 
	$MscDemo_Cª©eRamdiskV2
(

371 
UPLATFORM
 * 
pPœtf‹m
,

372 
USBPUMP_OBJECT_HEADER
 * 
pFun˘i⁄Obje˘
,

373 
PMSCDEMO_DEVOBJ_RAMDISK
 * 
µRamDisk
,

374 
CONST
 
MSCDEMO_RAMDISK_CONFIG
 * 
pC⁄fig


377 
UDEVICE
 * 
CONST
 
pDevi˚
 = 
	`UsbPumpObje˘_GëDevi˚
(

378 
pFun˘i⁄Obje˘


380 
MSCDEMO_DEVOBJ_RAMDISK
 * 
CONST
 
pRamDisk
 =

381 
	`UsbPumpPœtf‹m_MÆlocZîo
(

382 
pPœtf‹m
,

383 (*
pRamDisk
)

385 
MSCDEMO_DEVOBJ
 * 
CONST
 
pDevObj
 = 
pRamDisk
 ? &pRamDisk->
udrd_DevObj
 : 
NULL
;

386 
BOOL
 
SètusOK
 = (
pRamDisk
 !
NULL
);

389 i‡(
SètusOK
)

391 i‡(
pC⁄fig
)

393 
pRamDisk
->
udrd_nLba
 = 
pC⁄fig
->
nLba
;

394 
pRamDisk
->
udrd_nLun
 = 
pC⁄fig
->
nLun
;

398 
pRamDisk
->
udrd_nLba
 = 
MSCDEMO_RAMDISK_NUM_LBA
;

399 
pRamDisk
->
udrd_nLun
 = 1;

402 
pRamDisk
->
udrd_pLun
 = 
	`UsbPumpPœtf‹m_MÆlocZîo
(

403 
pPœtf‹m
,

404 
pRamDisk
->
udrd_nLun
*(*pRamDisk->
udrd_pLun
)

406 
SètusOK
 = (
pRamDisk
->
udrd_pLun
 !
NULL
);

409 i‡(
SètusOK
)

411 
	`UsbPumpObje˘_Inô
(

412 &
pDevObj
->
Hódî
,

413 
pPœtf‹m
->
upf_Hódî
.
pCœssP¨ít
,

414 
MSCDEMO_DEVOBJ_TAG_RAMDISK
,

415 (*
pRamDisk
),

416 
MSCDEMO_DEVOBJ_NAME_RAMDISK
,

417  
NULL
,

418  
MscDemoI_Ramdisk_Io˘l


422 
pDevObj
->
pDevi˚
 =ÖDevice;

423 
pDevObj
->
pPœtf‹m
 =ÖPlatform;

426 
pDevObj
->
pIoObje˘
 = 
	`UsbPumpObje˘_Fun˘i⁄O≥n
(

427  
pFun˘i⁄Obje˘
,

428  &
pDevObj
->
Hódî
,

429  
pRamDisk
,

430  
NULL


433 i‡(
pDevObj
->
pIoObje˘
 =
NULL
)

434 
SètusOK
 = 
FALSE
;

436 i‡(
SètusOK
)

438 
	`TTUSB_OBJPRINTF
((

439 
pFun˘i⁄Obje˘
,

440 
UDMASK_ANY
,

443 
pFun˘i⁄Obje˘
->
pName
,

444 
pFun˘i⁄Obje˘
->
In°™˚Numbî


449 
	`TTUSB_OBJPRINTF
((

450 
pFun˘i⁄Obje˘
,

451 
UDMASK_ANY
,

454 
pFun˘i⁄Obje˘
->
pName
,

455 
pFun˘i⁄Obje˘
->
In°™˚Numbî
,

456 
pFun˘i⁄Obje˘


462 i‡(
SètusOK
)

469 
pRamDisk
->
udrd_pMedü
 = 
ddrSt‹age
;

471 
SètusOK
 = (
pRamDisk
->
udrd_pMedü
 !
NULL
);

477 i‡(
SètusOK
)

479 
USBPUMP_IOCTL_RESULT
 
Io˘lResu…
;

481 
Io˘lResu…
 = 
	`UsbFnApiSt‹age_SëDevi˚Pr›îtõs
(

482 
pDevObj
->
pIoObje˘
,

483 
USBPUMP_STORAGE_DEVICE_TYPE_DIRECT_ACCESS
,

484  
TRUE
,

485  
MSCDEMO_RAMDISK_VENDOR_ID
,

486  
MSCDEMO_RAMDISK_PRODUCT_ID
,

487  
MSCDEMO_RAMDISK_VERSION


490 
SètusOK
 = 
	`USBPUMP_IOCTL_SUCCESS
(
Io˘lResu…
);

495 i‡(
SètusOK
)

497 
MSCDEMO_DEVOBJ_RAMDISK_LUN
 * 
pLun
 = 
pRamDisk
->
udrd_pLun
;

498 
USBPUMP_IOCTL_RESULT
 
Io˘lResu…
;

499 
BYTES
 
i
;

502 
i
=0; i < 
pRamDisk
->
udrd_nLun
 && 
SètusOK
; i++, 
pLun
++)

504 
pLun
->
udrdl_pRamdisk
 = 
pRamDisk
;

505 
pLun
->
udrdl_fMediumLﬂded
 = 
TRUE
;

507 
pLun
->
udrdl_iLun
 = 
i
;

508 
	`USBPUMP_CALLBACKCOMPLETION_INIT
(

509 &
pLun
->
udrdl_RódReque°
.
Evít
,

510 
MscDemoI_Ramdisk_RódCom∂ëe
,

511 
NULL


513 
	`USBPUMP_CALLBACKCOMPLETION_INIT
(

514 &
pLun
->
udrdl_WrôeReque°
.
Evít
,

515 
MscDemoI_Ramdisk_WrôeCom∂ëe
,

516 
NULL


519 i‡(
pC⁄fig
)

521 
pLun
->
udrdl_LbaOffs
 = 
pC⁄fig
->pLun[
i
].
LoLba
;

522 
pLun
->
udrdl_nLba
 = 
pC⁄fig
->pLun[
i
].
HiLba
-pC⁄fig->pLun[i].
LoLba
+1;

526 
pLun
->
udrdl_LbaOffs
 = 0;

527 
pLun
->
udrdl_nLba
 = 
MSCDEMO_RAMDISK_NUM_LBA
;

532 
	`UHIL_˝ybuf
(

533 
pRamDisk
->
udrd_pMedü
+

534 
MSCDEMO_RAMDISK_LBA_SIZE
*
pLun
->
udrdl_LbaOffs
,

535 
MscDemo_FakeMbr
,

536 
MSCDEMO_RAMDISK_LBA_SIZE


540 
Io˘lResu…
 = 
	`UsbFnApiSt‹age_SëCuºítMediumV3
(

541 
pDevObj
->
pIoObje˘
,

542 
pLun
->
udrdl_iLun
,

543 
pLun
->
udrdl_fMediumLﬂded
,

544 
FALSE
,

545 
pLun
->
udrdl_nLba
,

546 
MSCDEMO_RAMDISK_LBA_SIZE


549 
SètusOK
 = 
	`USBPUMP_IOCTL_SUCCESS
(
Io˘lResu…
);

553 i‡(
SètusOK
 && 
µRamDisk
)

555 *
µRamDisk
 = 
pRamDisk
;

560 i‡((! 
SètusOK
Ë&& 
pDevObj
)

563 i‡(
pDevObj
->
pIoObje˘
)

565 (
VOID
Ë
	`UsbPumpObje˘_Fun˘i⁄Clo£
(

566 
pDevObj
->
pIoObje˘
,

567 &
pDevObj
->
Hódî
,

568  
NULL


570 
pDevObj
->
pIoObje˘
 = 
NULL
;

574 
	`UsbPumpObje˘_DeInô
(

575 &
pDevObj
->
Hódî


578 i‡(
pRamDisk
->
udrd_pLun
)

580 
	`UsbPumpPœtf‹m_Fªe
(

581 
pPœtf‹m
,

582 
pRamDisk
->
udrd_pLun
,

583 
pRamDisk
->
udrd_nLun
*(*pRamDisk->
udrd_pLun
)

587 
	`UsbPumpPœtf‹m_Fªe
(

588 
pPœtf‹m
,

589 
pRamDisk
,

590 (*
pRamDisk
)

594  
SètusOK
;

595 
	}
}

648 
USBPUMP_IOCTL_RESULT


649 
	$MscDemoI_Ramdisk_Io˘l
(

650 
USBPUMP_OBJECT_HEADER
 * 
pDevObjHdr
,

651 
USBPUMP_IOCTL_CODE
 
Io˘l
,

652 
CONST
 
VOID
 * 
pInP¨am
,

653 
VOID
 * 
pOutP¨am


656 
MSCDEMO_DEVOBJ
 * 
CONST
 
pDevObj
 = 
	`__TMS_CONTAINER_OF
(

657 
pDevObjHdr
,

658 
MSCDEMO_DEVOBJ
,

659 
Hódî


662 
Io˘l
)

665 
USBPUMP_IOCTL_EDGE_ACTIVATE
:

666  
	`MscDemoI_Ramdisk_A˘iv©e
(

667 
pDevObj
,

668 
pOutP¨am


671 
USBPUMP_IOCTL_EDGE_DEACTIVATE
:

672  
	`MscDemoI_Ramdisk_Dó˘iv©e
(

673 
pDevObj
,

674 
pInP¨am


677 
USBPUMP_IOCTL_EDGE_BUS_EVENT
:

678  
	`MscDemoI_Ramdisk_BusEvít
(

679 
pDevObj
,

680 
pInP¨am


684 
USBPUMP_IOCTL_EDGE_STORAGE_READ
:

685  
	`MscDemoI_Ramdisk_Ród
(

686 
pDevObj
,

687 
pOutP¨am


690 
USBPUMP_IOCTL_EDGE_STORAGE_READ_DONE
:

691  
	`MscDemoI_Ramdisk_RódD⁄e
(

692 
pDevObj
,

693 
pOutP¨am


696 
USBPUMP_IOCTL_EDGE_STORAGE_WRITE
:

697  
	`MscDemoI_Ramdisk_Wrôe
(

698 
pDevObj
,

699 
pOutP¨am


702 
USBPUMP_IOCTL_EDGE_STORAGE_WRITE_DATA
:

703  
	`MscDemoI_Ramdisk_WrôeD©a
(

704 
pDevObj
,

705 
pOutP¨am


708 
USBPUMP_IOCTL_EDGE_STORAGE_GET_STATUS
:

709  
	`MscDemoI_Ramdisk_GëSètus
(

710 
pDevObj
,

711 
pOutP¨am


714 
USBPUMP_IOCTL_EDGE_STORAGE_RESET_DEVICE
:

715  
	`MscDemoI_Ramdisk_Re£tDevi˚
(

716 
pDevObj
,

717 
pOutP¨am


720 
USBPUMP_IOCTL_EDGE_STORAGE_LOAD_OR_EJECT
:

721  
	`MscDemoI_Ramdisk_LﬂdOrEje˘
(

722 
pDevObj
,

723 
pOutP¨am


726 
USBPUMP_IOCTL_EDGE_STORAGE_PREVENT_REMOVAL
:

727  
	`MscDemoI_Ramdisk_PªvítRemovÆ
(

728 
pDevObj
,

729 
pOutP¨am


732 
USBPUMP_IOCTL_EDGE_STORAGE_CUSTOM_COMMAND
:

733  
	`MscDemoI_Ramdisk_Cu°omComm™d
(

734 
pDevObj
,

735 
pOutP¨am


738 
USBPUMP_IOCTL_EDGE_STORAGE_CUSTOM_SEND_DONE
:

739  
	`MscDemoI_Ramdisk_Cu°omSídD⁄e
(

740 
pDevObj
,

741 
pOutP¨am


744 
USBPUMP_IOCTL_EDGE_STORAGE_CUSTOM_RECEIVE_DONE
:

745  
	`MscDemoI_Ramdisk_Cu°omRe˚iveD⁄e
(

746 
pDevObj
,

747 
pOutP¨am


751 
	`TTUSB_OBJPRINTF
((

752 
pDevObj
->
pIoObje˘
,

753 
UDMASK_ERRORS
,

756 
Io˘l


759  
USBPUMP_IOCTL_RESULT_NOT_CLAIMED
;

761 
	}
}

764 
USBPUMP_IOCTL_RESULT


765 
	$MscDemoI_Ramdisk_A˘iv©e
(

766 
MSCDEMO_DEVOBJ
 * 
pDevObj
,

767 
USBPUMP_IOCTL_EDGE_ACTIVATE_ARG
 * 
pOutArg


770 
	`USBPUMP_UNREFERENCED_PARAMETER
(
pDevObj
);

771 
	`USBPUMP_UNREFERENCED_PARAMETER
(
pOutArg
);

773 
MSCDEMO_DEVOBJ_RAMDISK
 * 
CONST
 
pRamDisk
 = 
pOutArg
->
pClõ¡C⁄ãxt
;

774 
	`TTUSB_OBJPRINTF
((

775 
pOutArg
->
pObje˘
, 
UDMASK_ENTRY
,

778 
pDevObj
,

779 
pOutArg
->
pObje˘
,

780 
pOutArg
->
pClõ¡C⁄ãxt


787 i‡(
	`USBPUMP_IS_SUPER_SPEED
(
pDevObj
->
pDevi˚
->
udev_bCuºítS≥ed
))

789 
	`¥ötf
("USB 3.0 storage device connected\n");

790 
	`¥ötf
("The drive shouldÇow be visible onÅhe host PC. Please format "

795 
	`¥ötf
("USB 2.0 storage device connected.\n");

796 
	`¥ötf
("The drive shouldÇow be visible onÅhe host PC. Please format "

798 
	`¥ötf
("WARNING!!! This device isábleÅoÖerformát higher speeds.\n");

799 
	`¥ötf
("Please connectÅhe boardÅoán USB 3 hostÅoáchieve USB 3Öerformance.\n");

802 
	`¥ötf
("Storage size: %.2f MB\n",

803 
pRamDisk
->
udrd_nLun
 *ÖRamDisk->
udrd_nLba
 * 
MSCDEMO_RAMDISK_LBA_SIZE
 / (1024 * 1024.0));

805  
USBPUMP_IOCTL_RESULT_SUCCESS
;

806 
	}
}

808 
USBPUMP_IOCTL_RESULT


809 
	$MscDemoI_Ramdisk_Dó˘iv©e
(

810 
MSCDEMO_DEVOBJ
 * 
pDevObj
,

811 
CONST
 
USBPUMP_IOCTL_EDGE_DEACTIVATE_ARG
 * 
pInArg


814 
	`USBPUMP_UNREFERENCED_PARAMETER
(
pDevObj
);

815 
	`USBPUMP_UNREFERENCED_PARAMETER
(
pInArg
);

817 
	`TTUSB_OBJPRINTF
((

818 
pInArg
->
pObje˘
, 
UDMASK_ENTRY
,

821 
pDevObj
,

822 
pInArg
->
pObje˘
,

823 
pInArg
->
pClõ¡C⁄ãxt


825 
	`¥ötf
("Device disconnected\n\n");

830  
USBPUMP_IOCTL_RESULT_SUCCESS
;

831 
	}
}

833 
USBPUMP_IOCTL_RESULT


834 
	$MscDemoI_Ramdisk_BusEvít
(

835 
MSCDEMO_DEVOBJ
 * 
pDevObj
,

836 
CONST
 
USBPUMP_IOCTL_EDGE_BUS_EVENT_ARG
 *
pInArg


839 
	`USBPUMP_UNREFERENCED_PARAMETER
(
pDevObj
);

841 
	`TTUSB_OBJPRINTF
(( \

842 
pInArg
->
pObje˘
, 
UDMASK_ENTRY
, \

846 
pDevObj
, \

847 
pInArg
->
pObje˘
, \

848 
pInArg
->
pClõ¡C⁄ãxt
, \

849 
pInArg
->
EvítCode
, \

850 
	`UsbPumpEvít_Name
(
pInArg
->
EvítCode
), \

851 
pInArg
->
pEvítS≥cificInfo
 \

855 
pInArg
->
EvítCode
)

857 
UEVENT_SUSPEND
:

858 
UEVENT_L1_SLEEP
:

859 
UEVENT_FUNCTION_SUSPEND
:

863 
UEVENT_RESUME
:

864 
UEVENT_FUNCTION_RESUME
:

868 
UEVENT_ATTACH
:

872 
UEVENT_DETACH
:

876 
UEVENT_RESET
:

887  
USBPUMP_IOCTL_RESULT_SUCCESS
;

888 
	}
}

923 
USBPUMP_IOCTL_RESULT


924 
	$MscDemoI_Ramdisk_Ród
(

925 
MSCDEMO_DEVOBJ
 * 
pDevObj
,

926 
USBPUMP_IOCTL_EDGE_STORAGE_READ_ARG
 * 
pOutArg


929 
MSCDEMO_DEVOBJ_RAMDISK
 * 
CONST
 
pRamDisk
 = 
pOutArg
->
pClõ¡C⁄ãxt
;

930 
MSCDEMO_DEVOBJ_RAMDISK_LUN
 * 
CONST
 
pLun
 = 
pRamDisk
->
udrd_pLun
+
pOutArg
->
iLun
;

932 
	`TTUSB_OBJPRINTF
((

933 &
pDevObj
->
Hódî
, 
UDMASK_ENTRY
,

936 
pDevObj
,

937 
pOutArg
->
pObje˘
,

938 
pOutArg
->
pClõ¡C⁄ãxt
,

939 
pOutArg
->
Lba
,

940 
pOutArg
->
LbaCou¡


943 
	`TTUSB_OBJPRINTF
((&
pDevObj
->
Hódî
, 
UDMASK_ANY
,

945 
pOutArg
->
LbaCou¡
,ÖOutArg->
Lba
,ÖOutArg->
iLun


948 
pLun
->
udrdl_RódReque°
.
Lba
 = 
pOutArg
->Lba;

949 
pLun
->
udrdl_RódReque°
.
LbaCou¡
 = 
pOutArg
->LbaCount;

950 
pLun
->
udrdl_RódReque°
.
pBuf„r
 = 
NULL
;

951 
	`UsbPo°IfNŸBusy
(

952 
pDevObj
->
pDevi˚
,

953 &
pLun
->
udrdl_RódReque°
.
Evít
,

954 
pLun


961 
pOutArg
->
Sètus
 = 
USBPUMP_STORAGE_STATUS_NONE
;

963 
pLun
->
udrdl_La°SètusRï‹ãd
 = 
pOutArg
->
Sètus
;

965  
USBPUMP_IOCTL_RESULT_SUCCESS
;

966 
	}
}

968 
VOID


969 
	$MscDemoI_Ramdisk_RódCom∂ëe
(

970 
VOID
 *
pC⁄ãxt


973 
MSCDEMO_DEVOBJ_RAMDISK_LUN
 * 
CONST


974 
pLun
 = (
MSCDEMO_DEVOBJ_RAMDISK_LUN
 *)
pC⁄ãxt
;

975 
MSCDEMO_DEVOBJ_RAMDISK
 * 
CONST


976 
pRamDisk
 = 
pLun
->
udrdl_pRamdisk
;

978 
	`UsbM¨kCom∂ëi⁄NŸBusy
(
pRamDisk
->
udrd_DevObj
.
pDevi˚
,

979 &
pLun
->
udrdl_RódReque°
.
Evít


982 (
VOID
)
	`UsbFnApiSt‹age_QueueRódV2
(

983  
pRamDisk
->
udrd_DevObj
.
pIoObje˘
,

984  
pLun
->
udrdl_iLun
,

985  
pRamDisk
->
udrd_pMedü
 +

986 ((
pLun
->
udrdl_LbaOffs
 +

987 
pLun
->
udrdl_RódReque°
.
Lba
) *

988 
MSCDEMO_RAMDISK_LBA_SIZE
),

989  
pLun
->
udrdl_RódReque°
.
LbaCou¡


991 
	}
}

1013 
USBPUMP_IOCTL_RESULT


1014 
	$MscDemoI_Ramdisk_RódD⁄e
(

1015 
MSCDEMO_DEVOBJ
 * 
pDevObj
,

1016 
USBPUMP_IOCTL_EDGE_STORAGE_READ_DONE_ARG
 * 
pOutArg


1019 
MSCDEMO_DEVOBJ_RAMDISK
 * 
CONST
 
pRamDisk
 = 
pOutArg
->
pClõ¡C⁄ãxt
;

1020 
MSCDEMO_DEVOBJ_RAMDISK_LUN
 * 
CONST
 
pLun
 = 
pRamDisk
->
udrd_pLun
+
pOutArg
->
iLun
;

1022 
	`USBPUMP_UNREFERENCED_PARAMETER
(
pDevObj
);

1024 
	`TTUSB_OBJPRINTF
((

1025 
pOutArg
->
pObje˘
, 
UDMASK_ENTRY
,

1028 
pDevObj
,

1029 
pOutArg
->
pObje˘
,

1030 
pOutArg
->
pClõ¡C⁄ãxt


1040 
pOutArg
->
Sètus
 = 
USBPUMP_STORAGE_STATUS_NONE
;

1042 
pLun
->
udrdl_La°SètusRï‹ãd
 = 
pOutArg
->
Sètus
;

1044  
USBPUMP_IOCTL_RESULT_SUCCESS
;

1045 
	}
}

1087 
USBPUMP_IOCTL_RESULT


1088 
	$MscDemoI_Ramdisk_Wrôe
(

1089 
MSCDEMO_DEVOBJ
 * 
pDevObj
,

1090 
USBPUMP_IOCTL_EDGE_STORAGE_WRITE_ARG
 * 
pOutArg


1093 
MSCDEMO_DEVOBJ_RAMDISK
 * 
CONST
 
pRamDisk
 = 
pOutArg
->
pClõ¡C⁄ãxt
;

1094 
MSCDEMO_DEVOBJ_RAMDISK_LUN
 * 
CONST
 
pLun
 = 
pRamDisk
->
udrd_pLun
+
pOutArg
->
iLun
;

1095 
USBPUMP_IOCTL_RESULT
 
Io˘lResu…
;

1097 
	`USBPUMP_UNREFERENCED_PARAMETER
(
pDevObj
);

1099 
	`TTUSB_OBJPRINTF
((

1100 &
pDevObj
->
Hódî
, 
UDMASK_ENTRY
,

1103 
pDevObj
,

1104 
pOutArg
->
pObje˘
,

1105 
pOutArg
->
pClõ¡C⁄ãxt


1108 
	`TTUSB_OBJPRINTF
((&
pDevObj
->
Hódî
, 
UDMASK_ANY
,

1110 
pOutArg
->
LbaCou¡
,ÖOutArg->
Lba
,ÖOutArg->
iLun


1119 
pLun
->
udrdl_WrôeReque°
.
Lba
 = 
pOutArg
->Lba;

1120 
pLun
->
udrdl_WrôeReque°
.
LbaCou¡
 = 
pOutArg
->LbaCount;

1121 
pLun
->
udrdl_WrôeReque°
.
pBuf„r
 =

1122 
pRamDisk
->
udrd_pMedü
 +

1123 ((
pLun
->
udrdl_LbaOffs
 +

1124 
pOutArg
->
Lba
) *

1125 
MSCDEMO_RAMDISK_LBA_SIZE
);

1126 
Io˘lResu…
 = 
	`UsbFnApiSt‹age_QueueWrôeV2
(

1127  
pRamDisk
->
udrd_DevObj
.
pIoObje˘
,

1128  
pOutArg
->
iLun
,

1129  
pLun
->
udrdl_WrôeReque°
.
pBuf„r
,

1130  
pOutArg
->
LbaCou¡


1136 i‡(
	`USBPUMP_IOCTL_SUCCESS
(
Io˘lResu…
))

1137 
pOutArg
->
Sètus
 = 
USBPUMP_STORAGE_STATUS_NONE
;

1139 
pOutArg
->
Sètus
 = 
USBPUMP_STORAGE_STATUS_WRITE_ERROR
;

1141 
pLun
->
udrdl_La°SètusRï‹ãd
 = 
pOutArg
->
Sètus
;

1143  
Io˘lResu…
;

1144 
	}
}

1170 
USBPUMP_IOCTL_RESULT


1171 
	$MscDemoI_Ramdisk_WrôeD©a
(

1172 
MSCDEMO_DEVOBJ
 * 
pDevObj
,

1173 
USBPUMP_IOCTL_EDGE_STORAGE_WRITE_DATA_ARG
 * 
pOutArg


1176 
MSCDEMO_DEVOBJ_RAMDISK
 * 
CONST
 
pRamDisk
 = 
pOutArg
->
pClõ¡C⁄ãxt
;

1177 
MSCDEMO_DEVOBJ_RAMDISK_LUN
 * 
CONST
 
pLun
 = 
pRamDisk
->
udrd_pLun
+
pOutArg
->
iLun
;

1179 
	`USBPUMP_UNREFERENCED_PARAMETER
(
pDevObj
);

1181 
	`TTUSB_OBJPRINTF
((

1182 
pOutArg
->
pObje˘
, 
UDMASK_ENTRY
,

1185 
pDevObj
,

1186 
pOutArg
->
pObje˘
,

1187 
pOutArg
->
pClõ¡C⁄ãxt


1194 
pLun
->
udrdl_WrôeReque°
.
LbaCou¡
 =

1195 
pOutArg
->
nByãs
 / 
MSCDEMO_RAMDISK_LBA_SIZE
;

1196 
pLun
->
udrdl_WrôeReque°
.
pBuf„r
 = 
pOutArg
->
pBuf
;

1197 
	`UsbPo°IfNŸBusy
(
pRamDisk
->
udrd_DevObj
.
pDevi˚
,

1198 &
pLun
->
udrdl_WrôeReque°
.
Evít
,

1199 
pLun


1202 
pOutArg
->
Sètus
 = 
USBPUMP_STORAGE_STATUS_NONE
;

1204 
pLun
->
udrdl_La°SètusRï‹ãd
 = 
pOutArg
->
Sètus
;

1206  
USBPUMP_IOCTL_RESULT_SUCCESS
;

1207 
	}
}

1209 
VOID


1210 
	$MscDemoI_Ramdisk_WrôeCom∂ëe
(

1211 
VOID
 *
pC⁄ãxt


1214 
MSCDEMO_DEVOBJ_RAMDISK_LUN
 * 
CONST


1215 
pLun
 = (
MSCDEMO_DEVOBJ_RAMDISK_LUN
 *)
pC⁄ãxt
;

1216 
MSCDEMO_DEVOBJ_RAMDISK
 * 
CONST


1217 
pRamDisk
 = 
pLun
->
udrdl_pRamdisk
;

1219 
	`UsbM¨kCom∂ëi⁄NŸBusy
(
pRamDisk
->
udrd_DevObj
.
pDevi˚
,

1220 &
pLun
->
udrdl_WrôeReque°
.
Evít


1223 (
VOID
)
	`UsbFnApiSt‹age_WrôeD⁄eV2
(

1224 
pRamDisk
->
udrd_DevObj
.
pIoObje˘
,

1225 
pLun
->
udrdl_iLun
,

1226 
USBPUMP_STORAGE_STATUS_NONE


1228 
	}
}

1265 
USBPUMP_IOCTL_RESULT


1266 
	$MscDemoI_Ramdisk_GëSètus
(

1267 
MSCDEMO_DEVOBJ
 * 
pDevObj
,

1268 
USBPUMP_IOCTL_EDGE_STORAGE_GET_STATUS_ARG
 * 
pOutArg


1271 
MSCDEMO_DEVOBJ_RAMDISK
 * 
CONST
 
pRamDisk
 = 
pOutArg
->
pClõ¡C⁄ãxt
;

1272 
MSCDEMO_DEVOBJ_RAMDISK_LUN
 * 
CONST
 
pLun
 = 
pRamDisk
->
udrd_pLun
+
pOutArg
->
iLun
;

1274 
	`USBPUMP_UNREFERENCED_PARAMETER
(
pDevObj
);

1276 
	`TTUSB_OBJPRINTF
((

1277 
pOutArg
->
pObje˘
, 
UDMASK_ENTRY
,

1280 
pDevObj
,

1281 
pOutArg
->
pObje˘
,

1282 
pOutArg
->
pClõ¡C⁄ãxt


1285 i‡(
pLun
->
udrdl_La°SètusRï‹ãd
 =
USBPUMP_STORAGE_STATUS_NO_MEDIA
)

1287 
USBPUMP_IOCTL_RESULT
 
Io˘lResu…
;

1291 
pLun
->
udrdl_fMediumLﬂded
 = 
TRUE
;

1294 
Io˘lResu…
 = 
	`UsbFnApiSt‹age_SëCuºítMediumV3
(

1295 
pRamDisk
->
udrd_DevObj
.
pIoObje˘
,

1296 
pOutArg
->
iLun
,

1297 
pLun
->
udrdl_fMediumLﬂded
,

1298 
FALSE
,

1299 
pLun
->
udrdl_nLba
,

1300 
MSCDEMO_RAMDISK_LBA_SIZE


1303 i‡(
	`USBPUMP_IOCTL_SUCCESS
(
Io˘lResu…
))

1305 
pOutArg
->
Sètus
 = 
USBPUMP_STORAGE_STATUS_MEDIA_CHANGE
;

1309 
pOutArg
->
Sètus
 = 
USBPUMP_STORAGE_STATUS_NO_MEDIA
;

1312 i‡(
pLun
->
udrdl_fMediumLﬂded
 =
FALSE
)

1314 
pOutArg
->
Sètus
 = 
USBPUMP_STORAGE_STATUS_NO_MEDIA
;

1318 
pOutArg
->
Sètus
 = 
USBPUMP_STORAGE_STATUS_NONE
;

1321 
pLun
->
udrdl_La°SètusRï‹ãd
 = 
pOutArg
->
Sètus
;

1323  
USBPUMP_IOCTL_RESULT_SUCCESS
;

1324 
	}
}

1351 
USBPUMP_IOCTL_RESULT


1352 
	$MscDemoI_Ramdisk_Re£tDevi˚
(

1353 
MSCDEMO_DEVOBJ
 * 
pDevObj
,

1354 
USBPUMP_IOCTL_EDGE_STORAGE_RESET_DEVICE_ARG
 * 
pOutArg


1357 
MSCDEMO_DEVOBJ_RAMDISK
 * 
CONST
 
pRamDisk
 = 
pOutArg
->
pClõ¡C⁄ãxt
;

1358 
UINT
 
i
;

1360 
	`USBPUMP_UNREFERENCED_PARAMETER
(
pDevObj
);

1362 
	`TTUSB_OBJPRINTF
((

1363 
pOutArg
->
pObje˘
, 
UDMASK_ENTRY
,

1366 
pDevObj
,

1367 
pOutArg
->
pObje˘
,

1368 
pOutArg
->
pClõ¡C⁄ãxt


1379 
pOutArg
->
Sètus
 = 
USBPUMP_STORAGE_STATUS_NONE
;

1381 
i
=0; i < 
pRamDisk
->
udrd_nLun
 ;i++)

1382 (
pRamDisk
->
udrd_pLun
+
i
)->
udrdl_La°SètusRï‹ãd
 = 
pOutArg
->
Sètus
;

1384  
USBPUMP_IOCTL_RESULT_SUCCESS
;

1385 
	}
}

1407 
USBPUMP_IOCTL_RESULT


1408 
	$MscDemoI_Ramdisk_LﬂdOrEje˘
(

1409 
MSCDEMO_DEVOBJ
 * 
pDevObj
,

1410 
USBPUMP_IOCTL_EDGE_STORAGE_LOAD_OR_EJECT_ARG
 * 
pOutArg


1413 
MSCDEMO_DEVOBJ_RAMDISK
 * 
CONST
 
pRamDisk
 = 
pOutArg
->
pClõ¡C⁄ãxt
;

1414 
MSCDEMO_DEVOBJ_RAMDISK_LUN
 * 
CONST
 
pLun
 = 
pRamDisk
->
udrd_pLun
+
pOutArg
->
iLun
;

1415 
USBPUMP_IOCTL_RESULT
 
Io˘lResu…
;

1417 
	`USBPUMP_UNREFERENCED_PARAMETER
(
pDevObj
);

1419 
	`TTUSB_OBJPRINTF
((

1420 
pOutArg
->
pObje˘
, 
UDMASK_ENTRY
,

1423 
pDevObj
,

1424 
pOutArg
->
pObje˘
,

1425 
pOutArg
->
pClõ¡C⁄ãxt


1429 i‡(
pLun
->
udrdl_fMediumLﬂded
)

1431 
pLun
->
udrdl_fMediumLﬂded
 = 
FALSE
;

1434 
Io˘lResu…
 = 
	`UsbFnApiSt‹age_SëCuºítMediumV3
(

1435 
pRamDisk
->
udrd_DevObj
.
pIoObje˘
,

1436 
pOutArg
->
iLun
,

1437 
pLun
->
udrdl_fMediumLﬂded
,

1438 
FALSE
,

1443 
pOutArg
->
Sètus
 = 
USBPUMP_STORAGE_STATUS_NONE
;

1447 
pLun
->
udrdl_fMediumLﬂded
 = 
TRUE
;

1450 
Io˘lResu…
 = 
	`UsbFnApiSt‹age_SëCuºítMediumV3
(

1451 
pRamDisk
->
udrd_DevObj
.
pIoObje˘
,

1452 
pOutArg
->
iLun
,

1453 
pLun
->
udrdl_fMediumLﬂded
,

1454 
FALSE
,

1455 
pLun
->
udrdl_nLba
,

1456 
MSCDEMO_RAMDISK_LBA_SIZE


1459 
pOutArg
->
Sètus
 = 
USBPUMP_STORAGE_STATUS_NONE
;

1462 
pLun
->
udrdl_La°SètusRï‹ãd
 = 
pOutArg
->
Sètus
;

1464  
Io˘lResu…
;

1465 
	}
}

1490 
USBPUMP_IOCTL_RESULT


1491 
	$MscDemoI_Ramdisk_PªvítRemovÆ
(

1492 
MSCDEMO_DEVOBJ
 * 
pDevObj
,

1493 
USBPUMP_IOCTL_EDGE_STORAGE_PREVENT_REMOVAL_ARG
 * 
pOutArg


1496 
MSCDEMO_DEVOBJ_RAMDISK
 * 
CONST
 
pRamDisk
 = 
pOutArg
->
pClõ¡C⁄ãxt
;

1497 
MSCDEMO_DEVOBJ_RAMDISK_LUN
 * 
CONST
 
pLun
 = 
pRamDisk
->
udrd_pLun
+
pOutArg
->
iLun
;

1499 
	`USBPUMP_UNREFERENCED_PARAMETER
(
pDevObj
);

1501 
	`TTUSB_OBJPRINTF
((

1502 
pOutArg
->
pObje˘
, 
UDMASK_ENTRY
,

1505 
pDevObj
,

1506 
pOutArg
->
pObje˘
,

1507 
pOutArg
->
pClõ¡C⁄ãxt
,

1508 
pOutArg
->
fPªvítRemovÆ
 ? "prevent" : "allow"

1511 
pLun
->
udrdl_fPªvítRemovÆ
 = 
pOutArg
->
fPªvítRemovÆ
;

1513 
pOutArg
->
Sètus
 = 
USBPUMP_STORAGE_STATUS_NONE
;

1515 
pLun
->
udrdl_La°SètusRï‹ãd
 = 
pOutArg
->
Sètus
;

1517  
USBPUMP_IOCTL_RESULT_SUCCESS
;

1518 
	}
}

1543 
USBPUMP_IOCTL_RESULT


1544 
	$MscDemoI_Ramdisk_Cu°omComm™d
(

1545 
MSCDEMO_DEVOBJ
 * 
pDevObj
,

1546 
USBPUMP_IOCTL_EDGE_STORAGE_CUSTOM_COMMAND_ARG
 * 
pOutArg


1549 
MSCDEMO_DEVOBJ_RAMDISK
 * 
CONST
 
pRamDisk
 = 
pOutArg
->
pClõ¡C⁄ãxt
;

1550 
USBPUMP_IOCTL_RESULT
 
Resu…
;

1551 
BOOL
 
fD©aTøns„rFromDevi˚ToHo°
;

1552 
UINT32
 
D©aTøns„rLígth
;

1554 
fD©aTøns„rFromDevi˚ToHo°
 = 
pOutArg
->fDataTransferFromDeviceToHost;

1555 
D©aTøns„rLígth
 = 
pOutArg
->DataTransferLength;

1557 
	`USBPUMP_UNREFERENCED_PARAMETER
(
pDevObj
);

1559 
	`TTUSB_OBJPRINTF
(( \

1560 
pOutArg
->
pObje˘
, 
UDMASK_ENTRY
 | 
UDMASK_PROTO
, \

1564 
pDevObj
, \

1565 
pOutArg
->
pObje˘
, \

1566 
pOutArg
->
pClõ¡C⁄ãxt
, \

1567 
D©aTøns„rLígth
, \

1568 
fD©aTøns„rFromDevi˚ToHo°
, \

1569 
pOutArg
->
pCbwcbBuf„r
[0] \

1572 
Resu…
 = 
USBPUMP_IOCTL_RESULT_SUCCESS
;

1573 
pOutArg
->
fReje˘
 = 
FALSE
;

1576 i‡(
pOutArg
->
pCbwcbBuf„r
[0] =0xd6 && 
D©aTøns„rLígth
 == 0)

1578 
Resu…
 = 
	`UsbFnApiSt‹age_Cu°omSídSètus
(

1579 
pRamDisk
->
udrd_DevObj
.
pIoObje˘
,

1580 
pOutArg
->
iLun
,

1581 
UPROTO_MSCBOT_CSW_STATUS_SUCCESS
,

1582 
USBPUMP_STORAGE_STATUS_NONE


1587 i‡(
pOutArg
->
pCbwcbBuf„r
[0] == 0xd7 &&

1588 
D©aTøns„rLígth
 > 0 && 
fD©aTøns„rFromDevi˚ToHo°
)

1591 
UINT8
 *
pBuf
;

1592 
pBuf
 = 
	`UsbAŒoˇãDevi˚Buf„r
(

1593 
pDevObj
->
pDevi˚
,

1594 
D©aTøns„rLígth


1597 i‡(!
pBuf
)

1599 
Resu…
 = 
USBPUMP_IOCTL_RESULT_FAILED
;

1603 
Resu…
 = 
	`UsbFnApiSt‹age_Cu°omSídD©a
(

1604 
pRamDisk
->
udrd_DevObj
.
pIoObje˘
,

1605 
pOutArg
->
iLun
,

1606 
pBuf
,

1607 
D©aTøns„rLígth


1613 i‡(
pOutArg
->
pCbwcbBuf„r
[0] == 0xd8 &&

1614 
D©aTøns„rLígth
 > 0 && !
fD©aTøns„rFromDevi˚ToHo°
)

1617 
UINT8
 *
pBuf
;

1618 
pBuf
 = 
	`UsbAŒoˇãDevi˚Buf„r
(

1619 
pDevObj
->
pDevi˚
,

1620 
D©aTøns„rLígth


1623 i‡(!
pBuf
)

1625 
Resu…
 = 
USBPUMP_IOCTL_RESULT_FAILED
;

1628 
Resu…
 = 
	`UsbFnApiSt‹age_Cu°omRe˚iveD©a
(

1629 
pRamDisk
->
udrd_DevObj
.
pIoObje˘
,

1630 
pOutArg
->
iLun
,

1631 
pBuf
,

1632 
D©aTøns„rLígth


1638 
pOutArg
->
fReje˘
 = 
TRUE
;

1639 
Resu…
 = 
USBPUMP_IOCTL_RESULT_SUCCESS
;

1642  
Resu…
;

1643 
	}
}

1667 
USBPUMP_IOCTL_RESULT


1668 
	$MscDemoI_Ramdisk_Cu°omSídD⁄e
(

1669 
MSCDEMO_DEVOBJ
 * 
pDevObj
,

1670 
USBPUMP_IOCTL_EDGE_STORAGE_CUSTOM_SEND_DONE_ARG
 *
pOutArg


1673 
MSCDEMO_DEVOBJ_RAMDISK
 * 
CONST
 
pRamDisk
 = 
pOutArg
->
pClõ¡C⁄ãxt
;

1674 
USBPUMP_IOCTL_RESULT
 
Resu…
;

1677 
	`UsbFªeDevi˚Buf„r
(

1678 
pDevObj
->
pDevi˚
,

1679 
pOutArg
->
pBuf
,

1680 
pOutArg
->
nBuf


1683 
Resu…
 = 
	`UsbFnApiSt‹age_Cu°omSídSètus
(

1684 
pRamDisk
->
udrd_DevObj
.
pIoObje˘
,

1685 
pOutArg
->
iLun
,

1686 
UPROTO_MSCBOT_CSW_STATUS_SUCCESS
,

1687 
USBPUMP_STORAGE_STATUS_NONE


1690 
pOutArg
->
fReje˘
 = 
FALSE
;

1692  
Resu…
;

1693 
	}
}

1714 
USBPUMP_IOCTL_RESULT


1715 
	$MscDemoI_Ramdisk_Cu°omRe˚iveD⁄e
(

1716 
MSCDEMO_DEVOBJ
 * 
pDevObj
,

1717 
USBPUMP_IOCTL_EDGE_STORAGE_CUSTOM_RECEIVE_DONE_ARG
 * 
pOutArg


1720 
MSCDEMO_DEVOBJ_RAMDISK
 * 
CONST
 
pRamDisk
 = 
pOutArg
->
pClõ¡C⁄ãxt
;

1721 
USBPUMP_IOCTL_RESULT
 
Resu…
;

1724 
	`UsbFªeDevi˚Buf„r
(

1725 
pDevObj
->
pDevi˚
,

1726 
pOutArg
->
pBuf
,

1727 
pOutArg
->
nBuf


1730 
Resu…
 = 
	`UsbFnApiSt‹age_Cu°omSídSètus
(

1731 
pRamDisk
->
udrd_DevObj
.
pIoObje˘
,

1732 
pOutArg
->
iLun
,

1733 
UPROTO_MSCBOT_CSW_STATUS_SUCCESS
,

1734 
USBPUMP_STORAGE_STATUS_NONE


1737 
pOutArg
->
fReje˘
 = 
FALSE
;

1739  
Resu…
;

1740 
	}
}

	@Evaluation/ma2x5x/UsbVideoIso/leon/app_config.c

13 
	~"DrvDdr.h
"

14 
	~"DrvShaveL2Cache.h
"

15 
	~"OsDrvTimî.h
"

16 
	~"OsDrvC¥.h
"

17 
	~"≠p_c⁄fig.h
"

22 
	#L2CACHE_CFG
 (
SHAVE_L2CACHE_NORMAL_MODE
)

	)

23 
	#PARTITION_0
 (0)

	)

24 
	#SHAVES_USED
 (12)

	)

34 
tyAuxClkDividîCfg
 
	gauxClk
[] =

37 .
auxClockE«bÀMask
 = 
AUX_CLK_MASK_MEDIA
,

38 .
	gauxClockSour˚
 = 
CLK_SRC_SYS_CLK_DIV2
 ,

39 .
	gauxClockDivNumî©‹
 = 1,

40 .
	gauxClockDivDíomö©‹
 = 1,

43 .
	gauxClockE«bÀMask
 = (
AUX_CLK_MASK_CIF0
 | 
AUX_CLK_MASK_CIF1
),

44 .
	gauxClockSour˚
 = 
CLK_SRC_SYS_CLK
,

45 .
	gauxClockDivNumî©‹
 = 1,

46 .
	gauxClockDivDíomö©‹
 = 1,

49 .
	gauxClockE«bÀMask
 = 
CLOCKS_MIPICFG
,

50 .
	gauxClockSour˚
 = 
CLK_SRC_SYS_CLK
 ,

51 .
	gauxClockDivNumî©‹
 = 1,

52 .
	gauxClockDivDíomö©‹
 = 24,

55 .
	gauxClockE«bÀMask
 = 
AUX_CLK_MASK_USB_CTRL_SUSPEND_CLK
,

56 .
	gauxClockSour˚
 = 
CLK_SRC_PLL0
,

57 .
	gauxClockDivNumî©‹
 = 1,

58 .
	gauxClockDivDíomö©‹
 = 24

68 
öt32_t
 
	$öôClocksAndMem‹y
()

70 
öt32_t
 
i
;

71 
öt32_t
 
sc
;

73 
sc
 = 
	`OsDrvC¥Inô
();

74 if(
sc
)

75  
sc
;

76 
sc
 = 
	`OsDrvC¥O≥n
();

77 if(
sc
)

78  
sc
;

79 
sc
 = 
	`OsDrvC¥AuxClockAºayC⁄fig
(
auxClk
);

80 if(
sc
)

81  
sc
;

83 
	`DrvC¥SysDevi˚A˘i⁄
(
SIPP_DOMAIN
, 
ASSERT_RESET
, 
DEV_SIPP_MIPI
);

84 
	`DrvC¥SysDevi˚A˘i⁄
(
UPA_DOMAIN
, 
ASSERT_RESET
, 
APP_UPA_CLOCKS
);

85 
	`DrvC¥SysDevi˚A˘i⁄
(
MSS_DOMAIN
, 
DEASSERT_RESET
, -1);

86 
	`DrvC¥SysDevi˚A˘i⁄
(
CSS_DOMAIN
, 
DEASSERT_RESET
, -1);

87 
	`DrvC¥SysDevi˚A˘i⁄
(
SIPP_DOMAIN
, 
DEASSERT_RESET
, -1);

88 
	`DrvC¥SysDevi˚A˘i⁄
(
UPA_DOMAIN
, 
DEASSERT_RESET
, -1);

90 
sc
 = 
	`OsDrvTimîInô
();

91 if(
sc
)

92  
sc
;

93 
	`DrvDdrInôüli£
(
NULL
);

96 
sc
 = 
	`DrvShaveL2CacheSëMode
(
L2CACHE_CFG
);

97 if(
sc
)

98  
sc
;

101 
	`DrvShaveL2CacheSëupP¨tôi⁄
(
SHAVEPART256KB
);

104 
sc
 = 
	`DrvShaveL2CacheAŒoˇãSëP¨tôi⁄s
();

105 if(
sc
)

106  
sc
;

109 
i
 = 0; i < 
SHAVES_USED
; i++)

111 
	`DrvShaveL2CacheSëLSUP¨tId
(
i
, 
PARTITION_0
);

114 
	`DrvShaveL2CacheP¨tôi⁄FlushAndInvÆid©e
(
PARTITION_0
);

117 
	}
}

	@Evaluation/ma2x5x/UsbVideoIso/leon/app_config.h

13 #i‚de‡
LOS_APP_CONFIG_H


14 
	#LOS_APP_CONFIG_H


	)

18 
	~"mv_ty≥s.h
"

22 
	#SYS_CLK_KHZ
 12000

23 

	)

24 
	#APP_UPA_CLOCKS
 (
DEV_UPA_SH0
 | \

25 
DEV_UPA_SH1
 | \

26 
DEV_UPA_SH2
 | \

27 
DEV_UPA_SH3
 | \

28 
DEV_UPA_SH4
 | \

29 
DEV_UPA_SH5
 | \

30 
DEV_UPA_SH6
 | \

31 
DEV_UPA_SHAVE_L2
 | \

32 
DEV_UPA_CDMA
 | \

33 
DEV_UPA_CTRL
 )

	)

35 
	#MSS_CLOCKS
 ( 
DEV_MSS_APB_SLV
 | \

36 
DEV_MSS_APB2_CTRL
 | \

37 
DEV_MSS_RTBRIDGE
 | \

38 
DEV_MSS_RTAHB_CTRL
 | \

39 
DEV_MSS_LRT
 | \

40 
DEV_MSS_LRT_DSU
 | \

41 
DEV_MSS_LRT_L2C
 | \

42 
DEV_MSS_LRT_ICB
 | \

43 
DEV_MSS_AXI_BRIDGE
 | \

44 
DEV_MSS_MXI_CTRL
 | \

45 
DEV_MSS_MXI_DEFSLV
 | \

46 
DEV_MSS_AXI_MON
 | \

47 
DEV_MSS_MIPI
 | \

48 
DEV_MSS_CIF0
 | \

49 
DEV_MSS_LCD
 | \

50 
DEV_MSS_AMC
 | \

51 
DEV_MSS_SIPP
 | \

52 
DEV_MSS_TIM
 )

	)

54 
	#APP_SIPP_CLOCKS
 ( 
DEV_SIPP_SIPP_ABPSLV
 | \

55 
DEV_SIPP_APB_SLV
 | \

56 
DEV_SIPP_MIPI
 | \

57 
DEV_SIPP_LUT
 | \

58 
DEV_SIPP_MIPI_RX1
 )

	)

61 
	#CLOCKS_MIPICFG
 (
AUX_CLK_MASK_MIPI_ECFG
 | 
AUX_CLK_MASK_MIPI_CFG
)

	)

64 
	#MAX_USED_BUF
 4

	)

67 
	#FRAME_WIDTH_SS
 2104

	)

68 
	#FRAME_HEIGHT_SS
 1560

	)

69 
	#FRAME_SIZE_SS
 (
FRAME_WIDTH_SS
 * 
FRAME_HEIGHT_SS
 * 2)

	)

72 
	#FRAME_WIDTH_HS
 640

	)

73 
	#FRAME_HEIGHT_HS
 480

	)

74 
	#FRAME_SIZE_HS
 (
FRAME_WIDTH_HS
 * 
FRAME_HEIGHT_HS
 * 2)

	)

76 
	#DDR_AREA
 
	`__©åibuã__
((
	`£˘i⁄
(".ddr_dúe˘.bss")))

	)

86 
öt32_t
 
öôClocksAndMem‹y
();

87 
blocksRe£tSûic⁄S≥cific
();

	@Evaluation/ma2x5x/UsbVideoIso/leon/main.c

13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~<°rög.h
>

16 
	~<DrvC¥.h
>

17 
	~<î∫o.h
>

18 
	~"πems_c⁄fig.h
"

19 
	~"OsDrvUsbPhy.h
"

20 
	~"usbpumpdebug.h
"

21 
	~"usbpump_≠∂iˇti⁄_πems_≠i.h
"

25 #i‚de‡
DISABLE_LEON_DCACHE


26 
	#USBPUMP_MDK_CACHE_ENABLE
 1

	)

28 
	#USBPUMP_MDK_CACHE_ENABLE
 0

	)

35 
USBPUMP_APPLICATION_RTEMS_CONFIGURATION
 
	gsg_D©aPump_AµC⁄fig
 =

36 
USBPUMP_APPLICATION_RTEMS_CONFIGURATION_INIT_V1
(

38  
NULL
,

43  
NULL
,

44  
NULL
,

45  
USBPUMP_MDK_CACHE_ENABLE
,

46  
UDMASK_ANY
 | 
UDMASK_ERRORS


54 *
	$POSIX_Inô
 (*
¨gs
)

56 
	`UNUSED
(
¨gs
);

58 
öt32_t
 
sc
;

59 
osDrvUsbPhyP¨am_t
 
öôP¨am
 =

61 .
íabÀOtgBlock
 = 
USB_PHY_OTG_DISABLED
,

62 .
u£Exã∫ÆClock
 = 
USB_PHY_USE_EXT_CLK
,

63 .
fSñ
 = 
USB_REFCLK_20MHZ
,

64 .
ªfClkSñ0
 = 
USB_SUPER_SPEED_CLK_CONFIG
,

65 .
f‹˚HsO∆y
 = 
USB_PHY_HS_ONLY_OFF


68 
sc
 = 
	`öôClocksAndMem‹y
();

69 if(
sc
)

70 
	`exô
(
sc
);

72 
	`OsDrvUsbPhyInô
(&
öôP¨am
);

73 i‡(
	`UsbPump_Rãms_D©aPump_Sèπup
(&
sg_D©aPump_AµC⁄fig
Ë!
NULL
)

75 
	`¥ötf
("USB started\n\n");

79 
	`¥ötf
("\n\nUsbPump_Rtems_DataPump_Startup() failed!\n\n\n");

80 
	`exô
(1);

84 
	`πems_èsk_wake_a·î
(100);

86 
	`exô
(0);

87 
	}
}

	@Evaluation/ma2x5x/UsbVideoIso/leon/rtems_config.h

9 #i‚de‡
_RTEMS_CONFIG_H_


10 
	#_RTEMS_CONFIG_H_


	)

14 
	~<πems.h
>

15 
	~<πems/b•Io.h
>

16 
	~"≠p_c⁄fig.h
"

17 
	~"ÁèlExãnsi⁄.h
"

21 #i‡
deföed
(
__RTEMS__
)

23 #i‡!
deföed
 (
__CONFIG__
)

24 
	#__CONFIG__


	)

27 
	#CONFIGURE_INIT


	)

29 #i‚de‡
RTEMS_POSIX_API


30 
	#RTEMS_POSIX_API


	)

33 
	#CONFIGURE_MICROSECONDS_PER_TICK
 1000

	)

35 
	#CONFIGURE_TICKS_PER_TIMESLICE
 10

	)

37 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

39 
	#CONFIGURE_APPLICATION_NEEDS_CLOCK_DRIVER


	)

41 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

43 
	#CONFIGURE_MINIMUM_TASK_STACK_SIZE
 4096

	)

45 
	#CONFIGURE_MAXIMUM_TASKS
 4

	)

47 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 4

	)

49 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 8

	)

51 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 8

	)

53 
	#CONFIGURE_MAXIMUM_POSIX_SEMAPHORES
 4

	)

55 
	#CONFIGURE_MAXIMUM_SEMAPHORES
 4

	)

57 
	#CONFIGURE_MAXIMUM_POSIX_MESSAGE_QUEUES
 8

	)

59 
	#CONFIGURE_MAXIMUM_POSIX_TIMERS
 4

	)

61 
	#CONFIGURE_MAXIMUM_TIMERS
 4

	)

65 
	#CONFIGURE_MAXIMUM_USER_EXTENSIONS
 1

	)

66 
	#CONFIGURE_INITIAL_EXTENSIONS
 { .
Áèl
 = 
F©Æ_exãnsi⁄
 }

	)

68 *
POSIX_Inô
 (*
¨gs
);

70 
	~<πems/c⁄fdefs.h
>

75 
BSP_SET_CLOCK
(12000, 480000, 1, 1,
DEFAULT_CORE_CSS_DSS_CLOCKS
, 
MSS_CLOCKS
, 
APP_UPA_CLOCKS
, 
APP_SIPP_CLOCKS
, 0x0);

78 
BSP_SET_L2C_CONFIG
(1, 
L2C_REPL_LRU
, 0, 
L2C_MODE_COPY_BACK
, 0, 
NULL
);

	@Evaluation/ma2x5x/UsbVideoIso/leon/videodemo.c

11 
	~"videodemo.h
"

13 
	~"udevi˚.h
"

14 
	~"¥Ÿovideo.h
"

15 
	~"video˛õ¡lib.h
"

16 
	~"u∂©f‹m≠i.h
"

17 
	~"usbpumpdebug.h
"

18 
	~"usbpum∂i°.h
"

19 
	~"usbpump_ty≥s.h
"

20 
	~"uisobufhdr.h
"

21 
	~"usbpum∂ib.h
"

22 
	~"usbpum∑pi.h
"

32 
UPROTO_VIDEO_CONTROL_OPEN_CB_FN
 
	gVideoClõ¡LibI_C⁄åﬁO≥n_CÆlback
;

33 
UPROTO_VIDEO_STREAM_OPEN_CB_FN
 
	gVideoClõ¡LibI_SåómO≥n_CÆlback
;

35 
CALLBACKFN
 
	gVideoClõ¡LibI_SåómO≥n_Sync
;

58 
	#FUNCTION
 "VideoDemo_Uncom¥es£dInô"

	)

60 
VIDEODEMO_CONTEXT
 *

61 
	$VideoDemo_Uncom¥es£dInô
(

62 
UPLATFORM
 * 
pPœtf‹m
,

63 
USBPUMP_OBJECT_HEADER
 * 
pFun˘i⁄Obje˘


66 
VIDEODEMO_CONTEXT
 * 
pVideoDemoCtx
;

67 
UPROTO_VIDEO
 * 
CONST
 
pVideo
 = 
	`__TMS_CONTAINER_OF
(

68 
pFun˘i⁄Obje˘
,

69 
UPROTO_VIDEO
,

70 
Obje˘Hódî


74 
pVideoDemoCtx
 = 
	`UsbPumpPœtf‹m_MÆlocZîo
(

75 
pPœtf‹m
,

76 (*
pVideoDemoCtx
)

79 i‡(
pVideoDemoCtx
 =
NULL
)

81 
	`TTUSB_OBJPRINTF
((

82 &
pVideo
->
Obje˘Hódî
,

83 
UDMASK_ERRORS
,

84 "?" 
FUNCTION
 ":"

87  
NULL
;

90 
pVideoDemoCtx
->
pVideo
 =ÖVideo;

91 
pVideoDemoCtx
->
pPœtf‹m
 =ÖPlatform;

92 
pVideoDemoCtx
->
pDevi˚
 = 
pVideo
->pDevice;

93 
pVideoDemoCtx
->
hVideoIn
 = 
UPROTO_VIDEO_STREAM_INVALID_HANDLE
;

94 
pVideoDemoCtx
->
hVideoOut
 = 
UPROTO_VIDEO_STREAM_INVALID_HANDLE
;

97 
pVideoDemoCtx
->
ProbeCur
.
bmHöt
 =

98 
pVideoDemoCtx
->
CommôCur
.
bmHöt
 =

99 
pVideoDemoCtx
->
ProbeMö
.
bmHöt
 =

100 
pVideoDemoCtx
->
CommôMö
.
bmHöt
 =

101 
pVideoDemoCtx
->
ProbeMax
.
bmHöt
 =

102 
pVideoDemoCtx
->
CommôMax
.
bmHöt
 =

103 
pVideoDemoCtx
->
ProbeDef
.
bmHöt
 =

104 
pVideoDemoCtx
->
CommôDef
.
bmHöt
 =

105 
PROBE_DEFAULT_bmHöt
;

106 
pVideoDemoCtx
->
ProbeCur
.
bF‹m©Index
 =

107 
pVideoDemoCtx
->
CommôCur
.
bF‹m©Index
 =

108 
pVideoDemoCtx
->
ProbeMö
.
bF‹m©Index
 =

109 
pVideoDemoCtx
->
CommôMö
.
bF‹m©Index
 =

110 
pVideoDemoCtx
->
ProbeMax
.
bF‹m©Index
 =

111 
pVideoDemoCtx
->
CommôMax
.
bF‹m©Index
 =

112 
pVideoDemoCtx
->
ProbeDef
.
bF‹m©Index
 =

113 
pVideoDemoCtx
->
CommôDef
.
bF‹m©Index
 =

114 
PROBE_DEFAULT_bF‹m©Index
;

115 
pVideoDemoCtx
->
ProbeCur
.
bFømeIndex
 =

116 
pVideoDemoCtx
->
CommôCur
.
bFømeIndex
 =

117 
pVideoDemoCtx
->
ProbeMö
.
bFømeIndex
 =

118 
pVideoDemoCtx
->
CommôMö
.
bFømeIndex
 =

119 
pVideoDemoCtx
->
ProbeMax
.
bFømeIndex
 =

120 
pVideoDemoCtx
->
CommôMax
.
bFømeIndex
 =

121 
pVideoDemoCtx
->
ProbeDef
.
bFømeIndex
 =

122 
pVideoDemoCtx
->
CommôDef
.
bFømeIndex
 =

123 
PROBE_DEFAULT_bFømeIndex
;

124 
pVideoDemoCtx
->
ProbeCur
.
dwFømeI¡îvÆ
 =

125 
pVideoDemoCtx
->
CommôCur
.
dwFømeI¡îvÆ
 =

126 
pVideoDemoCtx
->
ProbeMö
.
dwFømeI¡îvÆ
 =

127 
pVideoDemoCtx
->
CommôMö
.
dwFømeI¡îvÆ
 =

128 
pVideoDemoCtx
->
ProbeMax
.
dwFømeI¡îvÆ
 =

129 
pVideoDemoCtx
->
CommôMax
.
dwFømeI¡îvÆ
 =

130 
pVideoDemoCtx
->
ProbeDef
.
dwFømeI¡îvÆ
 =

131 
pVideoDemoCtx
->
CommôDef
.
dwFømeI¡îvÆ
 =

132 
PROBE_DEFAULT_dwFømeI¡îvÆ
;

133 
pVideoDemoCtx
->
ProbeCur
.
wKeyFømeR©e
 =

134 
pVideoDemoCtx
->
CommôCur
.
wKeyFømeR©e
 =

135 
pVideoDemoCtx
->
ProbeMö
.
wKeyFømeR©e
 =

136 
pVideoDemoCtx
->
CommôMö
.
wKeyFømeR©e
 =

137 
pVideoDemoCtx
->
ProbeMax
.
wKeyFømeR©e
 =

138 
pVideoDemoCtx
->
CommôMax
.
wKeyFømeR©e
 =

139 
pVideoDemoCtx
->
ProbeDef
.
wKeyFømeR©e
 =

140 
pVideoDemoCtx
->
CommôDef
.
wKeyFømeR©e
 =

141 
PROBE_DEFAULT_wKeyFømeR©e
;

142 
pVideoDemoCtx
->
ProbeCur
.
wPFømeR©e
 =

143 
pVideoDemoCtx
->
CommôCur
.
wPFømeR©e
 =

144 
pVideoDemoCtx
->
ProbeMö
.
wPFømeR©e
 =

145 
pVideoDemoCtx
->
CommôMö
.
wPFømeR©e
 =

146 
pVideoDemoCtx
->
ProbeMax
.
wPFømeR©e
 =

147 
pVideoDemoCtx
->
CommôMax
.
wPFømeR©e
 =

148 
pVideoDemoCtx
->
ProbeDef
.
wPFømeR©e
 =

149 
pVideoDemoCtx
->
CommôDef
.
wPFømeR©e
 =

150 
PROBE_DEFAULT_wPFømeR©e
;

151 
pVideoDemoCtx
->
ProbeCur
.
wCompQuÆôy
 =

152 
pVideoDemoCtx
->
CommôCur
.
wCompQuÆôy
 =

153 
pVideoDemoCtx
->
ProbeMö
.
wCompQuÆôy
 =

154 
pVideoDemoCtx
->
CommôMö
.
wCompQuÆôy
 =

155 
pVideoDemoCtx
->
ProbeMax
.
wCompQuÆôy
 =

156 
pVideoDemoCtx
->
CommôMax
.
wCompQuÆôy
 =

157 
pVideoDemoCtx
->
ProbeDef
.
wCompQuÆôy
 =

158 
pVideoDemoCtx
->
CommôDef
.
wCompQuÆôy
 =

159 
PROBE_DEFAULT_wCompQuÆôy
;

160 
pVideoDemoCtx
->
ProbeCur
.
wCompWödowSize
 =

161 
pVideoDemoCtx
->
CommôCur
.
wCompWödowSize
 =

162 
pVideoDemoCtx
->
ProbeMö
.
wCompWödowSize
 =

163 
pVideoDemoCtx
->
CommôMö
.
wCompWödowSize
 =

164 
pVideoDemoCtx
->
ProbeMax
.
wCompWödowSize
 =

165 
pVideoDemoCtx
->
CommôMax
.
wCompWödowSize
 =

166 
pVideoDemoCtx
->
ProbeDef
.
wCompWödowSize
 =

167 
pVideoDemoCtx
->
CommôDef
.
wCompWödowSize
 =

168 
PROBE_DEFAULT_wCompWödowSize
;

169 
pVideoDemoCtx
->
ProbeCur
.
wDñay
 =

170 
pVideoDemoCtx
->
CommôCur
.
wDñay
 =

171 
pVideoDemoCtx
->
ProbeMö
.
wDñay
 =

172 
pVideoDemoCtx
->
CommôMö
.
wDñay
 =

173 
pVideoDemoCtx
->
ProbeMax
.
wDñay
 =

174 
pVideoDemoCtx
->
CommôMax
.
wDñay
 =

175 
pVideoDemoCtx
->
ProbeDef
.
wDñay
 =

176 
pVideoDemoCtx
->
CommôDef
.
wDñay
 =

177 
PROBE_DEFAULT_wDñay
;

178 
pVideoDemoCtx
->
ProbeCur
.
dwMaxVideoFømeSize
 =

179 
pVideoDemoCtx
->
CommôCur
.
dwMaxVideoFømeSize
 =

180 
pVideoDemoCtx
->
ProbeMö
.
dwMaxVideoFømeSize
 =

181 
pVideoDemoCtx
->
CommôMö
.
dwMaxVideoFømeSize
 =

182 
pVideoDemoCtx
->
ProbeMax
.
dwMaxVideoFømeSize
 =

183 
pVideoDemoCtx
->
CommôMax
.
dwMaxVideoFømeSize
 =

184 
pVideoDemoCtx
->
ProbeDef
.
dwMaxVideoFømeSize
 =

185 
pVideoDemoCtx
->
CommôDef
.
dwMaxVideoFømeSize
 =

186 
PROBE_DEFAULT_dwMaxVideoFømeSize
;

190 
pVideoDemoCtx
->
ProbeCur
.
dwClockFªquícy
 =

191 
pVideoDemoCtx
->
CommôCur
.
dwClockFªquícy
 =

192 
pVideoDemoCtx
->
ProbeMö
.
dwClockFªquícy
 =

193 
pVideoDemoCtx
->
CommôMö
.
dwClockFªquícy
 =

194 
pVideoDemoCtx
->
ProbeMax
.
dwClockFªquícy
 =

195 
pVideoDemoCtx
->
CommôMax
.
dwClockFªquícy
 =

196 
pVideoDemoCtx
->
ProbeDef
.
dwClockFªquícy
 =

197 
pVideoDemoCtx
->
CommôDef
.
dwClockFªquícy
 =

198 
PROBE_DEFAULT_dwClockFªquícy
;

199 
pVideoDemoCtx
->
ProbeCur
.
bmFømögInfo
 =

200 
pVideoDemoCtx
->
CommôCur
.
bmFømögInfo
 =

201 
pVideoDemoCtx
->
ProbeMö
.
bmFømögInfo
 =

202 
pVideoDemoCtx
->
CommôMö
.
bmFømögInfo
 =

203 
pVideoDemoCtx
->
ProbeMax
.
bmFømögInfo
 =

204 
pVideoDemoCtx
->
CommôMax
.
bmFømögInfo
 =

205 
pVideoDemoCtx
->
ProbeDef
.
bmFømögInfo
 =

206 
pVideoDemoCtx
->
CommôDef
.
bmFømögInfo
 =

207 
PROBE_DEFAULT_bmFømögInfo
;

208 
pVideoDemoCtx
->
ProbeCur
.
bPª„ªdVîsi⁄
 =

209 
pVideoDemoCtx
->
CommôCur
.
bPª„ªdVîsi⁄
 =

210 
pVideoDemoCtx
->
ProbeMö
.
bPª„ªdVîsi⁄
 =

211 
pVideoDemoCtx
->
CommôMö
.
bPª„ªdVîsi⁄
 =

212 
pVideoDemoCtx
->
ProbeMax
.
bPª„ªdVîsi⁄
 =

213 
pVideoDemoCtx
->
CommôMax
.
bPª„ªdVîsi⁄
 =

214 
pVideoDemoCtx
->
ProbeDef
.
bPª„ªdVîsi⁄
 =

215 
pVideoDemoCtx
->
CommôDef
.
bPª„ªdVîsi⁄
 =

216 
PROBE_DEFAULT_bPª„ªdVîsi⁄
;

217 
pVideoDemoCtx
->
ProbeCur
.
bMöVîsi⁄
 =

218 
pVideoDemoCtx
->
CommôCur
.
bMöVîsi⁄
 =

219 
pVideoDemoCtx
->
ProbeMö
.
bMöVîsi⁄
 =

220 
pVideoDemoCtx
->
CommôMö
.
bMöVîsi⁄
 =

221 
pVideoDemoCtx
->
ProbeMax
.
bMöVîsi⁄
 =

222 
pVideoDemoCtx
->
CommôMax
.
bMöVîsi⁄
 =

223 
pVideoDemoCtx
->
ProbeDef
.
bMöVîsi⁄
 =

224 
pVideoDemoCtx
->
CommôDef
.
bMöVîsi⁄
 =

225 
PROBE_DEFAULT_bMöVîsi⁄
;

226 
pVideoDemoCtx
->
ProbeCur
.
bMaxVîsi⁄
 =

227 
pVideoDemoCtx
->
CommôCur
.
bMaxVîsi⁄
 =

228 
pVideoDemoCtx
->
ProbeMö
.
bMaxVîsi⁄
 =

229 
pVideoDemoCtx
->
CommôMö
.
bMaxVîsi⁄
 =

230 
pVideoDemoCtx
->
ProbeMax
.
bMaxVîsi⁄
 =

231 
pVideoDemoCtx
->
CommôMax
.
bMaxVîsi⁄
 =

232 
pVideoDemoCtx
->
ProbeDef
.
bMaxVîsi⁄
 =

233 
pVideoDemoCtx
->
CommôDef
.
bMaxVîsi⁄
 =

234 
PROBE_DEFAULT_bMaxVîsi⁄
;

237 
	`VideoClõ¡Lib_C⁄åﬁO≥n
(

238 
pVideoDemoCtx
->
pVideo
,

239 
VideoClõ¡LibI_C⁄åﬁO≥n_CÆlback
,

240 
pVideoDemoCtx
,

241 
pVideoDemoCtx
,

242 &
gk_VideoDemo_OutSwôch


245  
pVideoDemoCtx
;

246 
	}
}

248 #unde‡
FUNCTION


250 
	#FUNCTION
 "VideoClõ¡LibI_C⁄åﬁO≥n_CÆlback"

	)

253 
	$VideoClõ¡LibI_C⁄åﬁO≥n_CÆlback
(

254 * 
pCÆlbackCtx
,

255 
UINT32
 
Eº‹Code


258 
VIDEODEMO_CONTEXT
 * 
CONST
 
pVideoDemoCtx
 = 
pCÆlbackCtx
;

260 i‡(
Eº‹Code
 !
UPROTO_VIDEO_ERROR_OK
)

262 
	`TTUSB_OBJPRINTF
((

263 &
pVideoDemoCtx
->
pVideo
->
Obje˘Hódî
,

264 
UDMASK_ERRORS
,

265 "?" 
FUNCTION
 ":"

267 
	`UsbPumpVideo_GëEº‹Name
(
Eº‹Code
)

273 
	`USBPUMP_CALLBACKCOMPLETION_INIT
(

274 &
pVideoDemoCtx
->
InôCom∂ëi⁄
,

275 
VideoClõ¡LibI_SåómO≥n_Sync
,

276 
pVideoDemoCtx


279 
	`UsbPumpPœtf‹m_Po°Evít
(

280 
pVideoDemoCtx
->
pPœtf‹m
,

281 &
pVideoDemoCtx
->
InôCom∂ëi⁄


284 
	}
}

286 #unde‡
FUNCTION


289 
	$VideoClõ¡LibI_SåómO≥n_Sync
(

290 * 
pClõ¡C⁄ãxt


293 
VIDEODEMO_CONTEXT
 * 
CONST
 
pVideoDemoCtx
 = 
pClõ¡C⁄ãxt
;

296 
	`VideoClõ¡Lib_SåómO≥n
(

297 
pVideoDemoCtx
->
pVideo
,

298 
VideoClõ¡LibI_SåómO≥n_CÆlback
,

299 
pVideoDemoCtx
,

300 (
INT8
)(-1),

301 (
INT8
)(-1),

302 (
INT8
)(-1),

303 
FALSE


305 
	}
}

308 
	$VideoClõ¡LibI_SåómO≥n_CÆlback
(

309 * 
pCÆlbackCtx
,

310 
UINT32
 
Eº‹Code
,

311 
UPROTO_VIDEO_STREAM_HANDLE
 
hVideoSåóm


314 
VIDEODEMO_CONTEXT
 * 
CONST
 
pVideoDemoCtx
 = 
pCÆlbackCtx
;

316 i‡(
Eº‹Code
 !
UPROTO_VIDEO_ERROR_OK
)

318 
	`TTUSB_OBJPRINTF
((

319 &
pVideoDemoCtx
->
pVideo
->
Obje˘Hódî
,

320 
UDMASK_ERRORS
,

323 
	`UsbPumpVideo_GëEº‹Name
(
Eº‹Code
)

328 
pVideoDemoCtx
->
hVideoOut
 = 
hVideoSåóm
;

330 
	}
}

	@Evaluation/ma2x5x/UsbVideoIso/leon/videodemo.h

11 #i‚de‡
_VIDEODEMO_H_


12 
	#_VIDEODEMO_H_


	)

14 #i‚de‡
_PROTOVIDEO_H_


15 
	~"¥Ÿovideo.h
"

18 #i‚de‡
_UCALLBACK_H_


19 
	~"uˇŒback.h
"

22 
	~"≠p_c⁄fig.h
"

23 
	~<πems.h
>

24 
	~<£m≠h‹e.h
>

28 
__TMS_TYPE_DEF_STRUCT
(
VIDEODEMO_CONTEXT
);

29 
__TMS_TYPE_DEF_STRUCT
(
VIDEODEMO_BUFFER_HDR
);

30 
__TMS_TYPE_DEF_STRUCT
(
VIDEODEMO_BUFFER
);

31 
__TMS_TYPE_DEF_STRUCT
(
PROCESSING_UNIT
);

32 
__TMS_TYPE_DEF_STRUCT
(
PROBE_COMMIT
);

33 
__TMS_TYPE_DEF_STRUCT
(
STILL_PROBE_COMMIT
);

35 
	#MAX_FRAME_BUFFS
 
MAX_USED_BUF


	)

36 
	#VIDEO_PLANES_NUM
 1

	)

38 #i‚de‡ 
VIDEODEMO_CONFIG_CONTROLBUFFER_SIZE


39 
	#VIDEODEMO_CONFIG_CONTROLBUFFER_SIZE
 (512)

	)

42 #i‚de‡ 
VIDEODEMO_CONFIG_MAXQUEUED_BUFFER


43 
	#VIDEODEMO_CONFIG_MAXQUEUED_BUFFER
 (8)

	)

46 #i‚de‡ 
VIDEODEMO_CACHE_ALIGNMENT


47 
	#VIDEODEMO_CACHE_ALIGNMENT
 (4)

	)

51 
	#PAYLOAD_HEADER_SIZE
 (12)

	)

52 
	#HDR_BUFFER_COUNT
 (2)

	)

54 
	#UNCOMPRESSED_HDR_HLE_OFFSET
 0

	)

55 
	#UNCOMPRESSED_HDR_BFH_OFFSET
 1

	)

56 
	#UNCOMPRESSED_HDR_PTS_OFFSET
 2

	)

57 
	#UNCOMPRESSED_HDR_SCR_STC_OFFSET
 6

	)

58 
	#UNCOMPRESSED_HDR_SCR_SOF_OFFSET
 10

	)

59 
	#UNCOMPRESSED_HDR_EOH
 (1 << 7)

	)

60 
	#UNCOMPRESSED_HDR_ERR
 (1 << 6)

	)

61 
	#UNCOMPRESSED_HDR_STI
 (1 << 5)

	)

62 
	#UNCOMPRESSED_HDR_RES
 (1 << 4)

	)

63 
	#UNCOMPRESSED_HDR_SCR
 (1 << 3)

	)

64 
	#UNCOMPRESSED_HDR_PTS
 (1 << 2)

	)

65 
	#UNCOMPRESSED_HDR_EOF
 (1 << 1)

	)

66 
	#UNCOMPRESSED_HDR_FID
 (1 << 0)

	)

69 
	#PU_BACKLIGHT_COMPENSATION_CONTROL_INFO
 0x03

	)

70 
	#PU_BACKLIGHT_COMPENSATION_CONTROL_MIN
 0x0000

	)

71 
	#PU_BACKLIGHT_COMPENSATION_CONTROL_MAX
 0x0003

	)

72 
	#PU_BACKLIGHT_COMPENSATION_CONTROL_RES
 0x0001

	)

73 
	#PU_BACKLIGHT_COMPENSATION_CONTROL_DEF
 0x0000

	)

75 
	#PU_BRIGHTNESS_CONTROL_INFO
 0x03

	)

76 
	#PU_BRIGHTNESS_CONTROL_MIN
 0x0000

	)

77 
	#PU_BRIGHTNESS_CONTROL_MAX
 0x00FF

	)

78 
	#PU_BRIGHTNESS_CONTROL_RES
 0x0001

	)

79 
	#PU_BRIGHTNESS_CONTROL_DEF
 0x007F

	)

81 
	#PU_CONTRAST_CONTROL_INFO
 0x03

	)

82 
	#PU_CONTRAST_CONTROL_MIN
 0x0000

	)

83 
	#PU_CONTRAST_CONTROL_MAX
 0x00FF

	)

84 
	#PU_CONTRAST_CONTROL_RES
 0x0001

	)

85 
	#PU_CONTRAST_CONTROL_DEF
 0x007F

	)

87 
	#PU_POWER_LINE_FREQUENCY_CONTROL_INFO
 0x03

	)

88 
	#PU_POWER_LINE_FREQUENCY_CONTROL_MIN
 0x00

	)

89 
	#PU_POWER_LINE_FREQUENCY_CONTROL_MAX
 0x02

	)

90 
	#PU_POWER_LINE_FREQUENCY_CONTROL_RES
 0x01

	)

91 
	#PU_POWER_LINE_FREQUENCY_CONTROL_DEF
 0x01

	)

93 
	#PU_HUE_CONTROL_INFO
 0x03

	)

94 
	#PU_HUE_CONTROL_MIN
 0x0000

	)

95 
	#PU_HUE_CONTROL_MAX
 0x0168

	)

96 
	#PU_HUE_CONTROL_RES
 0x0064

	)

97 
	#PU_HUE_CONTROL_DEF
 0x0000

	)

99 
	#PU_SATURATION_CONTROL_INFO
 0x03

	)

100 
	#PU_SATURATION_CONTROL_MIN
 0x0000

	)

101 
	#PU_SATURATION_CONTROL_MAX
 0x00FF

	)

102 
	#PU_SATURATION_CONTROL_RES
 0x0001

	)

103 
	#PU_SATURATION_CONTROL_DEF
 0x007F

	)

105 
	#PU_SHARPNESS_CONTROL_INFO
 0x03

	)

106 
	#PU_SHARPNESS_CONTROL_MIN
 0x0000

	)

107 
	#PU_SHARPNESS_CONTROL_MAX
 0x000F

	)

108 
	#PU_SHARPNESS_CONTROL_RES
 0x0001

	)

109 
	#PU_SHARPNESS_CONTROL_DEF
 0x0000

	)

111 
	#PU_GAMMA_CONTROL_INFO
 0x03

	)

112 
	#PU_GAMMA_CONTROL_MIN
 0x0064

	)

113 
	#PU_GAMMA_CONTROL_MAX
 0x00DC

	)

114 
	#PU_GAMMA_CONTROL_RES
 0x003C

	)

115 
	#PU_GAMMA_CONTROL_DEF
 0x00A0

	)

117 
	#PU_WHITE_BALANCE_TEMPERATURE_CONTROL_INFO
 0x03

	)

118 
	#PU_WHITE_BALANCE_TEMPERATURE_CONTROL_MIN
 0x0AFA

	)

119 
	#PU_WHITE_BALANCE_TEMPERATURE_CONTROL_MAX
 0x1964

	)

120 
	#PU_WHITE_BALANCE_TEMPERATURE_CONTROL_RES
 0x03E8

	)

121 
	#PU_WHITE_BALANCE_TEMPERATURE_CONTROL_DEF
 0x16A8

	)

123 
	#PU_HUE_AUTO_CONTROL_INFO
 0x1

	)

124 
	#PU_HUE_AUTO_CONTROL_MIN
 0x0

	)

125 
	#PU_HUE_AUTO_CONTROL_MAX
 0x1

	)

126 
	#PU_HUE_AUTO_CONTROL_RES
 0x1

	)

127 
	#PU_HUE_AUTO_CONTROL_DEF
 0x0

	)

129 
	#PU_WHITE_BALANCE_TEMPERATURE_AUTO_CONTROL_INFO
 0x01

	)

130 
	#PU_WHITE_BALANCE_TEMPERATURE_AUTO_CONTROL_MIN
 0x00

	)

131 
	#PU_WHITE_BALANCE_TEMPERATURE_AUTO_CONTROL_MAX
 0xFF

	)

132 
	#PU_WHITE_BALANCE_TEMPERATURE_AUTO_CONTROL_RES
 0x01

	)

133 
	#PU_WHITE_BALANCE_TEMPERATURE_AUTO_CONTROL_DEF
 0x01

	)

136 
	#PROBE_DEFAULT_bmHöt
 0x0000

	)

137 
	#PROBE_DEFAULT_bF‹m©Index
 0x01

	)

138 
	#PROBE_DEFAULT_bFømeIndex
 0x01

	)

139 
	#PROBE_DEFAULT_dwFømeI¡îvÆ
 166663

	)

140 
	#PROBE_DEFAULT_wKeyFømeR©e
 0x0001

	)

141 
	#PROBE_DEFAULT_wPFømeR©e
 0x0000

	)

142 
	#PROBE_DEFAULT_wCompQuÆôy
 0x0000

	)

143 
	#PROBE_DEFAULT_wCompWödowSize
 0x0000

	)

144 
	#PROBE_DEFAULT_wDñay
 0x000

	)

145 
	#PROBE_DEFAULT_dwMaxVideoFømeSize
 \

146 (
FRAME_SIZE_SS
 + 
PAYLOAD_HEADER_SIZE
)

	)

147 
	#PROBE_DEFAULT_dwMaxVideoFømeSize_HS
 \

148 (
FRAME_SIZE_HS
 + 
PAYLOAD_HEADER_SIZE
)

	)

149 
	#PROBE_DEFAULT_dwClockFªquícy
 0x00000000

	)

150 
	#PROBE_DEFAULT_bmFømögInfo
 0x00

	)

151 
	#PROBE_DEFAULT_bPª„ªdVîsi⁄
 0x00

	)

152 
	#PROBE_DEFAULT_bMöVîsi⁄
 0x00

	)

153 
	#PROBE_DEFAULT_bMaxVîsi⁄
 0x00

	)

156 
	$__TMS_STRUCTNAME
(
PROCESSING_UNIT
)

158 
uöt16_t
 
wBackLightCom≥nßti⁄
;

159 
uöt16_t
 
wBrighäess
;

160 
uöt16_t
 
wC⁄åa°
;

161 
uöt8_t
 
bPowîLöeFªquícy
;

162 
uöt16_t
 
wHue
;

163 
uöt16_t
 
wS©uøti⁄
;

164 
uöt16_t
 
wSh¨≤ess
;

165 
uöt16_t
 
wGamma
;

166 
uöt16_t
 
wWhôeBÆ™˚Tem≥øtuª
;

167 
uöt8_t
 
bHueAuto
;

168 
uöt8_t
 
bWhôeBÆ™˚Tem≥øtuªAuto
;

169 
	}
};

174 
	$__TMS_STRUCTNAME
(
PROBE_COMMIT
)

176 
uöt16_t
 
bmHöt
;

177 
uöt8_t
 
bF‹m©Index
;

178 
uöt8_t
 
bFømeIndex
;

179 
uöt32_t
 
dwFømeI¡îvÆ
;

180 
uöt16_t
 
wKeyFømeR©e
;

181 
uöt16_t
 
wPFømeR©e
;

182 
uöt16_t
 
wCompQuÆôy
;

183 
uöt16_t
 
wCompWödowSize
;

184 
uöt16_t
 
wDñay
;

185 
uöt32_t
 
dwMaxVideoFømeSize
;

186 
uöt32_t
 
dwMaxPaylﬂdTøns„rSize
;

187 
uöt32_t
 
dwClockFªquícy
;

188 
uöt8_t
 
bmFømögInfo
;

189 
uöt8_t
 
bPª„ªdVîsi⁄
;

190 
uöt8_t
 
bMöVîsi⁄
;

191 
uöt8_t
 
bMaxVîsi⁄
;

192 
	}
};

196 
	$__TMS_STRUCTNAME
(
STILL_PROBE_COMMIT
)

198 
uöt8_t
 
bF‹m©Index
;

199 
uöt8_t
 
bFømeIndex
;

200 
uöt8_t
 
bCom¥essi⁄Index
;

201 
uöt32_t
 
dwMaxVideoFømeSize
;

202 
uöt32_t
 
dwMaxPaylﬂdTøns„rSize
;

203 
	}
};

206 
uöt8_t
 *
	mbuf„r
;

207 
uöt32_t
 
	mbuf„rSize
;

208 
uöt8_t
 *
	mhódîBuf„r
;

209 
uöt32_t
 
	mhódîBuf„rSize
;

210 
uöt32_t
 
	mœ°PackëSize
;

211 
uöt16_t
 
	misoPackësNum
;

212 
USBPUMP_BUFFER_HANDLE
 
	mhBuf„r
;

213 
USBPUMP_ISOCH_PACKET_DESCR
 *
	mpIsochDes¸
;

214 
uöt32_t
 
	misoDes¸Size
;

215 } 
	tVideoFømePœ√C⁄fig
;

219 
	$__TMS_STRUCTNAME
(
VIDEODEMO_BUFFER
)

221 
UCALLBACKCOMPLETION
 
Evít
;

222 
VIDEODEMO_CONTEXT
 * 
pVideoDemoCtx
;

223 
VideoFømePœ√C⁄fig
 
∂™es
[
VIDEO_PLANES_NUM
];

224 
uöt8_t
 
buf„rIdx
;

225 
	}
};

228 
	$__TMS_STRUCTNAME
(
VIDEODEMO_CONTEXT
)

230 
UPROTO_VIDEO
 * 
pVideo
;

231 
UPLATFORM
 * 
pPœtf‹m
;

232 
UDEVICE
 * 
pDevi˚
;

235 
UPROTO_VIDEO_STREAM_HANDLE
 
hVideoIn
;

236 
UPROTO_VIDEO_STREAM_HANDLE
 
hVideoOut
;

238 
uöt16_t
 
wVideoInMaxPackëSize
;

239 
uöt16_t
 
wVideoOutMaxPackëSize
;

241 
uöt16_t
 
wTøn•‹tHódîSize
;

243 
BOOL
 
fI≈utA˘iv©e
;

244 
BOOL
 
fOuçutA˘iv©e
;

247 
PROCESSING_UNIT
 
ProcUnôCur
;

250 
PROBE_COMMIT
 
ProbeCur
;

253 
PROBE_COMMIT
 
CommôCur
;

256 
PROBE_COMMIT
 
ProbeMö
;

259 
PROBE_COMMIT
 
ProbeMax
;

262 
PROBE_COMMIT
 
ProbeDef
;

265 
PROBE_COMMIT
 
CommôMö
;

268 
PROBE_COMMIT
 
CommôMax
;

271 
PROBE_COMMIT
 
CommôDef
;

275 
STILL_PROBE_COMMIT
 
StûlProbeCur
;

278 
STILL_PROBE_COMMIT
 
StûlCommôCur
;

281 
UCALLBACKCOMPLETION
 
InôCom∂ëi⁄
;

282 
UCALLBACKCOMPLETION
 
WrôeCÆlback
;

284 
UCALLBACKCOMPLETION
 
SëupCom∂ëi⁄
;

285 
UPROTO_VIDEO_CONTROL_REQUEST
 
C⁄åﬁReque°
;

286 
UPROTO_VIDEO_STREAM_HANDLE
 
hSåómReque°
;

287 
UPROTO_VIDEO_STREAM_REQUEST
 
SåómReque°
;

289 
VIDEODEMO_BUFFER
 
VideoBuf„r
[
MAX_FRAME_BUFFS
];

293 
uöt32_t
 
dwPTS
;

297 
uöt16_t
 
wSofCou¡î
;

299 
uöt8_t
 
hódîToggÀ
;

300 
uöt8_t
 
∑ylﬂdHódîSize
;

302 
uöt8_t
 
bStûlTriggî
;

304 
uöt16_t
 
isoPackëSize
;

305 
uöt32_t
 
∑ylﬂdSize
;

307 
£m_t
 
∑ckëSem
;

308 
uöt8_t
 
buf„rIndex
;

309 
BOOL
 
èskCª©ed
;

310 
	}
};

315 
__TMS_BEGIN_DECLS


317 
__TMS_CONST
 
UPROTO_VIDEO_OUTSWITCH
 
gk_VideoDemo_OutSwôch
;

318 
öt32_t
 
devi˚Aâached
;

320 
__TMS_VIDEODEMO_CONTEXT
 *

321 
VideoDemo_Uncom¥es£dInô
(

322 
__TMS_UPLATFORM
 * 
pPœtf‹m
,

323 
__TMS_USBPUMP_OBJECT_HEADER
 * 
pVideoFun˘i⁄


326 
__TMS_VOID


327 
VideoDemo_Sèπ
(
__TMS_VIDEODEMO_CONTEXT
 * 
pVideoDemoCtx
);

329 
UPROTO_VIDEO_CONTROL_STATUS_EVENT_CB_FN
 
	gVideoDemo_C⁄åﬁSètusEvít
;

330 
UPROTO_VIDEO_CONTROL_REQUEST_CB_FN
 
	gVideoDemo_Pro˚ssögUnôEvít
;

331 
UPROTO_VIDEO_STREAM_STATUS_EVENT_CB_FN
 
	gVideoDemo_SåómSètusEvít
;

332 
UPROTO_VIDEO_STREAM_REQUEST_CB_FN
 
	gVideoDemo_SåómI¡îÁ˚Evít
;

334 
	g__TMS_END_DECLS


	@Evaluation/ma2x5x/UsbVideoIso/leon/videodemo_appinit.c

11 
	~"videodemo.h
"

13 
	~"usb≠pöô.h
"

14 
	~"usb¥Ÿoöô.h
"

15 
	~"usbvideo11.h
"

16 
	~"usbpumpdebug.h
"

17 
	~"usbpump_dcd_öôve˘‹_deföes.h
"

24 
CONST
 
USBRC_ROOTTABLE
 
gk_UsbDes¸ùt‹RoŸ
;

28 
USB_DATAPUMP_APPLICATION_INIT_VECTOR_FINISH_FN
 
	gVideoDemoI_AµInô_Ve˘‹Föish
;

30 
VOID
 
VideoDemo_Clõ¡Cª©e
(
UPLATFORM
 * 
pPœtf‹m
);

32 
CONST
 
UPROTO_VIDEO_CONFIG
 
	gsk_VideoDemo_PrŸoC⁄fig
 =

33 
UPROTO_VIDEO_CONFIG_INIT_V1
(

34 &
gk_UsbPumpVideo_InSwôch
,

35 
VIDEODEMO_CONFIG_CONTROLBUFFER_SIZE
,

36 
VIDEODEMO_CONFIG_MAXQUEUED_BUFFER
,

43 
CONST
 
USBPUMP_PROTOCOL_INIT_NODE
 
	gInôNodes
[] =

45 
USBPUMP_PROTOCOL_INIT_NODE_INIT_V2
( \

47  
USB_bI¡îÁ˚Cœss_Video
, \

48  
USB_bI¡îÁ˚SubCœss_VideoC⁄åﬁ
, \

52  
USBPUMP_PROTOCOL_INIT_FLAG_AUTO_ADD
, \

53  
UsbPumpVideo_PrŸocﬁProbe
, \

54  
UsbPumpVideo_PrŸocﬁCª©e
, \

55  
NULL
, \

56  
UsbPumpVideo_PrŸocﬁAddI¡îÁ˚
, \

57  &
sk_VideoDemo_PrŸoC⁄fig
 \

62 
CONST
 
USBPUMP_PROTOCOL_INIT_NODE_VECTOR
 
	gInôHódî
 =

63 
USBPUMP_PROTOCOL_INIT_NODE_VECTOR_INIT_V1
(

64  
InôNodes
,

65  
NULL
,

66  
NULL


70 
CONST
 
USB_DATAPUMP_APPLICATION_INIT_VECTOR
 
	gUsbPumpAµliˇti⁄InôVe˘‹
[] =

72 
USBPUMP_DCD_INIT_VECTOR_NODES_V1
(

73  
UDMASK_ERRORS
 | 
UDMASK_PROTO
,

74 &
InôHódî


78 
CONST
 
USB_DATAPUMP_APPLICATION_INIT_VECTOR_HDR
 
	ggk_UsbPumpAµliˇti⁄InôHdr
 =

79 
USB_DATAPUMP_APPLICATION_INIT_VECTOR_HDR_INIT_V1
(

80 
UsbPumpAµliˇti⁄InôVe˘‹
,

81  
NULL
,

82  
VideoDemoI_AµInô_Ve˘‹Föish


90 
VOID


91 
	$VideoDemoI_AµInô_Ve˘‹Föish
(

92 
UPLATFORM
 * 
pPœtf‹m
,

93 
CONST
 
USB_DATAPUMP_APPLICATION_INIT_VECTOR_HDR
 *
pVecHdr
,

94 
VOID
 * 
pAµInôC⁄ãxt
,

95 
UINT
 
nP‹ts


98 
	`USBPUMP_UNREFERENCED_PARAMETER
(
pVecHdr
);

99 
	`USBPUMP_UNREFERENCED_PARAMETER
(
pAµInôC⁄ãxt
);

100 
	`USBPUMP_UNREFERENCED_PARAMETER
(
nP‹ts
);

102 
	`VideoDemo_Clõ¡Cª©e
(
pPœtf‹m
);

103 
	}
}

	@Evaluation/ma2x5x/UsbVideoIso/leon/videodemo_create.c

11 
	~"videodemo.h
"

13 
	~"usbpum∑pi.h
"

14 
	~"usbpumpobje˘.h
"

15 
	~"usbpumpobje˘≠i.h
"

16 
	~"usbpum¥oŸ.h
"

17 
	~"u∂©f‹m.h
"

24 
VIDEODEMO_CONTEXT
 * 
	gg_pVidemoDemoC⁄ãxt
;

53 
	$VideoDemo_Clõ¡Cª©e
(
UPLATFORM
 * 
pPœtf‹m
)

55 
USBPUMP_OBJECT_ROOT
 * 
CONST
 
pPumpRoŸ
 =

56 
	`UsbPumpObje˘_GëRoŸ
(&
pPœtf‹m
->
upf_Hódî
);

58 
USBPUMP_OBJECT_HEADER
 * 
pFun˘i⁄Obje˘
 = 
NULL
;

62 (
pFun˘i⁄Obje˘
 = 
	`UsbPumpObje˘_Enumî©eM©chögNames
(

63 &
pPumpRoŸ
->
Hódî
,

64 
pFun˘i⁄Obje˘
,

65 
USBPUMP_OBJECT_NAME_ENUM_VIDEO


66 )Ë!
NULL
)

68 
g_pVidemoDemoC⁄ãxt
 = 
	`VideoDemo_Uncom¥es£dInô
(

69 
pPœtf‹m
,

70 
pFun˘i⁄Obje˘


73 
	}
}

	@Evaluation/ma2x5x/UsbVideoIso/leon/videodemo_isoch.c

11 
	~"videodemo.h
"

13 
	~"udevi˚.h
"

14 
	~"¥Ÿovideo.h
"

15 
	~"video˛õ¡lib.h
"

16 
	~"u∂©f‹m≠i.h
"

17 
	~"usbpumpdebug.h
"

18 
	~"usbpum∂i°.h
"

19 
	~"usbpump_ty≥s.h
"

20 
	~"uisobufhdr.h
"

21 
	~"usbpum∂ib.h
"

22 
	~"usbpum∑pi.h
"

23 
	~"uhûÆign.h
"

24 
	~"usbpump_≠∂iˇti⁄_πems_≠i.h
"

25 
	~"usbpump_dev•ìd.h
"

26 
	~"usbpump_mdk_u∂©_uhûaux.h
"

28 
	~"≠p_c⁄fig.h
"

29 
	~"DrvLe⁄L2C.h
"

30 
	~<°dio.h
>

31 
	~<°dlib.h
>

32 
	~<b•.h
>

33 
	~<πems.h
>

34 
	~<±hªad.h
>

35 
	~<£m≠h‹e.h
>

39 
	#MAX_PACKETS_NUM
 256

	)

43 
uöt8_t
 
öputFøme1
[
FRAME_SIZE_SS
];

44 
uöt8_t
 
öputFøme2
[
FRAME_SIZE_SS
];

45 
uöt8_t
 
öputFøme3
[
FRAME_SIZE_HS
];

46 
uöt8_t
 
öputFøme4
[
FRAME_SIZE_HS
];

50 
uöt8_t
 *
	gusbBufPåSS
[
MAX_USED_BUF
] = {
öputFøme1
, i≈utFøme1, 
öputFøme2
, inputFrame2};

51 
uöt8_t
 *
	gusbBufPåHS
[
MAX_USED_BUF
] = {
öputFøme3
, i≈utFøme3, 
öputFøme4
, inputFrame4};

52 
uöt8_t
 
	ghódîBuf„r
[
MAX_USED_BUF
][
PAYLOAD_HEADER_SIZE
 * 
MAX_PACKETS_NUM
];

53 
USBPUMP_ISOCH_PACKET_DESCR
 
	gisochDes¸ùt‹s
[
MAX_USED_BUF
][
MAX_PACKETS_NUM
];

57 
UPROTO_VIDEO_STREAM_GET_INFO_CB_FN
 
	gVideoDemo_SåómGëInfo_CÆlback
;

58 
VOID
 
VideoDemo_SèπVideoSåóm
(
VIDEODEMO_CONTEXT
 * 
pVideoDemoCtx
);

59 
UPROTO_VIDEO_STREAM_WRITE_ISOCH_CB_FN
 
	gVideoDemo_SídVideoD©a_D⁄e
;

60 
UPROTO_VIDEO_STREAM_WRITE_ISOCH_CB_FN
 
	gVideoDemo_SídVideoD©a_Dummy
;

61 *
¸óãPackës
(*
pC⁄ãxt
);

62 
fûlHódîD©a
(
UINT8
* 
hódîBuf„r
, 
UINT32
 
hódîSize
,

63 
UINT32
 
numIsoFømes
, 
BOOL
 
£tEof
, *
pC⁄ãxt
);

64 
fûlPaylﬂdD©a
(
VIDEODEMO_BUFFER
 *
pVideoBuf
, 
UINT32
 
∂™eNum
, 
BOOL
 
toggÀ
);

66 
	$VOID
 (*
	tisochCback
)(
	tVOID
 *, 
	tUINT32
, 
	tUINT8
*, 
	tBYTES
, 
	tUSBPUMP_ISOCH_PACKET_DESCR
*, BYTES);

87 
VOID
 
	$VideoDemo_Sèπ
(
VIDEODEMO_CONTEXT
 * 
pVideoDemoCtx
)

89 
	`VideoClõ¡Lib_SåómGëInfo
(

90 
pVideoDemoCtx
->
pVideo
,

91 
VideoDemo_SåómGëInfo_CÆlback
,

92 
pVideoDemoCtx
,

93 
pVideoDemoCtx
->
hVideoOut


95 
	}
}

97 
	$°¨tPro˚ssögTask
(*
pC⁄ãxt
)

99 
±hªad_©å_t
 
©å
;

100 
±hªad_t
 
thªad
;

101 
sched_∑øm
 
∑øm
;

102 
sc
;

103 
VIDEODEMO_CONTEXT
 *
pVideoDemoCtx
 = 
pC⁄ãxt
;

105 
sc
 = 
	`±hªad_©å_öô
(&
©å
);

106 i‡(
sc
)

108 
	`¥ötf
("pthread_attr_initÉrror");

109 
	`exô
(
sc
);

111 
sc
 = 
	`±hªad_©å_£töhîôsched
(&
©å
, 
PTHREAD_EXPLICIT_SCHED
);

112 i‡(
sc
)

114 
	`¥ötf
("pthread_attr_setinheritschedÉrror");

115 
	`exô
(
sc
);

117 
sc
 = 
	`±hªad_©å_£tschedpﬁicy
(&
©å
, 
SCHED_RR
);

118 i‡(
sc
)

120 
	`¥ötf
("pthread_attr_setschedpolicyÉrror");

121 
	`exô
(
sc
);

123 
∑øm
.
sched_¥i‹ôy
 = 10;

124 
sc
 = 
	`±hªad_©å_£tsched∑øm
(&
©å
, &
∑øm
);

125 if(
sc
)

127 
	`¥ötf
("setÖriorityÉrror\n");

128 
	`exô
(
sc
);

130 
sc
 = 
	`£m_öô
(&
pVideoDemoCtx
->
∑ckëSem
, 0, 0);

131 i‡(
sc
 == -1)

133 
	`≥º‹
("sem_init");

134 
	`exô
(
sc
);

137 
sc
 = 
	`±hªad_¸óã
(&
thªad
, &
©å
, 
¸óãPackës
, 
pC⁄ãxt
);

138 i‡(
sc
)

140 
	`¥ötf
("Thªad 1 cª©i⁄ faûed: %d\n", 
sc
);

141 
	`exô
(
sc
);

143 
	}
}

145 
	$videoBufC⁄fig
(
VIDEODEMO_BUFFER
 *
pVideoBuf
)

147 
UINT32
 
i
;

148 
INT32
 
°©us
;

150 
VideoFømePœ√C⁄fig
 *
∂™es
 = 
pVideoBuf
->planes;

151 
VIDEODEMO_CONTEXT
 *
pVideoDemoCtx
 = 
pVideoBuf
->pVideoDemoCtx;

152 
UINT32
 
∑ylﬂdSize
 = 
pVideoDemoCtx
->payloadSize;

153 
UDEVICE
 *
pDevi˚
 = 
pVideoDemoCtx
->pDevice;

155 i‡(
	`USBPUMP_IS_SUPER_SPEED
(
pDevi˚
->
udev_bCuºítS≥ed
)) {

156 
∂™es
[0].
buf„r
 = 
usbBufPåSS
[
pVideoBuf
->
buf„rIdx
];

157 
∂™es
[0].
buf„rSize
 = 
FRAME_SIZE_SS
;

160 
∂™es
[0].
buf„r
 = 
usbBufPåHS
[
pVideoBuf
->
buf„rIdx
];

161 
∂™es
[0].
buf„rSize
 = 
FRAME_SIZE_HS
;

164 
i
 = 0; i < 
VIDEO_PLANES_NUM
; i++)

166 
∂™es
[
i
].
isoPackësNum
 =

167 (
∂™es
[
i
].
buf„rSize
 + 
∑ylﬂdSize
 - 1) /ÖayloadSize;

168 
∂™es
[
i
].
hódîBuf„rSize
 = 
PAYLOAD_HEADER_SIZE
 *Öœ√s[i].
isoPackësNum
;

169 
∂™es
[
i
].
hódîBuf„r
 = headerBuffer[i];

170 
∂™es
[
i
].
œ°PackëSize
 =Öœ√s[i].
buf„rSize
 % 
∑ylﬂdSize
 + 
PAYLOAD_HEADER_SIZE
;

173 
°©us
 = (*
pDevi˚
->
udev_pUhûAuxInCÆl
->
InCÆl
.
pCª©eHbuf„rWôhSegmítFn
)(

174 
pDevi˚
->
udev_hUhûAux
,

175 &
∂™es
[
i
].
hBuf„r
,

176 
∂™es
[
i
].
isoPackësNum
,

177 (
ADDRBITS
Ë
∂™es
[
i
].
hódîBuf„r
,

178 
pVideoDemoCtx
->
∑ylﬂdHódîSize
,

179 (
ADDRBITS
Ë
∂™es
[
i
].
buf„r
,

180 
pVideoDemoCtx
->
∑ylﬂdSize
,

181 
USBPUMP_UHILAUX_BUFFER_ACCESS_READ


183 i‡(
°©us
 !
USBPUMP_UHILAUX_STATUS_OK
)

185 
	`¥ötf
("îr‹ cª©ög buf„∏h™dÀ: %d\n", 
°©us
);

188 
∂™es
[
i
].
pIsochDes¸
 = 
isochDes¸ùt‹s
[i];

192 
	}
}

194 
VOID


195 
	$VideoDemo_SåómGëInfo_CÆlback
(

196 
VOID
 * 
pCÆlbackCtx
,

197 
UINT32
 
Eº‹Code
,

198 
UINT8
 
bI¡îÁ˚Numbî
,

199 
UINT8
 
bA…î«ãSëtög
,

200 
UINT8
 
bTîmöÆLök
,

201 
UINT16
 
wMaxPackëSize
,

202 
UINT16
 
wTøn•‹tHódîSize


205 
VIDEODEMO_CONTEXT
 * 
CONST
 
pVideoDemoCtx
 = 
pCÆlbackCtx
;

207 
	`USBPUMP_UNREFERENCED_PARAMETER
(
bI¡îÁ˚Numbî
);

208 
	`USBPUMP_UNREFERENCED_PARAMETER
(
bA…î«ãSëtög
);

209 
	`USBPUMP_UNREFERENCED_PARAMETER
(
bTîmöÆLök
);

211 i‡(
Eº‹Code
 !
UPROTO_VIDEO_ERROR_OK
)

213 
	`¥ötf
("GetStreamInfo() fail (%s)\n",

214 
	`UsbPumpVideo_GëEº‹Name
(
Eº‹Code
));

216 i‡(
wTøn•‹tHódîSize
 == 0)

218 
	`¥ötf
("wTransportHeaderSize == 0,Çot isochÉndpoint!\n");

222 
pVideoDemoCtx
->
wVideoOutMaxPackëSize
 = 
wMaxPackëSize
;

223 
pVideoDemoCtx
->
wTøn•‹tHódîSize
 = wTransportHeaderSize;

224 
pVideoDemoCtx
->
hódîToggÀ
 = 0;

226 i‡(
devi˚Aâached
)

228 i‡(
	`USBPUMP_IS_SUPER_SPEED
(
pVideoDemoCtx
->
pDevi˚
->
udev_bCuºítS≥ed
))

230 
	`¥ötf
("USB 3.0 video device detected\n");

231 
	`¥ötf
("StreamingÑesolution: 2104x1560\n");

232 
	`¥ötf
("Expected frameÑate 50fps\n");

236 
	`¥ötf
("USB 2.0 video device detected\n");

237 
	`¥ötf
("StreamingÑesolution: 640x480\n");

238 
	`¥ötf
("Expected frameÑate 40fps\n");

240 
devi˚Aâached
 = 0;

242 
	`VideoDemo_SèπVideoSåóm
(
pVideoDemoCtx
);

244 
	}
}

246 
VOID
 
	$VideoDemo_SèπVideoSåóm
(
VIDEODEMO_CONTEXT
 * 
pVideoDemoCtx
)

248 
BYTES
 
∑ylﬂdSize
;

249 
VIDEODEMO_BUFFER
 *
pVideoBuf
 = 
NULL
;

250 
UINT
 
i
;

251 
UDEVICE
* 
pDevi˚
 = 
pVideoDemoCtx
->pDevice;

253 
∑ylﬂdSize
 = 
pVideoDemoCtx
->
wVideoOutMaxPackëSize
 - 
PAYLOAD_HEADER_SIZE
;

255 
pVideoDemoCtx
->
isoPackëSize
 =ÖVideoDemoCtx->
wVideoOutMaxPackëSize
;

256 
pVideoDemoCtx
->
∑ylﬂdHódîSize
 = 
PAYLOAD_HEADER_SIZE
;

257 
pVideoDemoCtx
->
∑ylﬂdSize
 =ÖayloadSize;

259 i‡(
	`USBPUMP_IS_SUPER_SPEED
(
pDevi˚
->
udev_bCuºítS≥ed
)) {

260 
pVideoDemoCtx
->
ProbeCur
.
dwMaxVideoFømeSize
 =

261 
pVideoDemoCtx
->
CommôCur
.
dwMaxVideoFømeSize
 =

262 
pVideoDemoCtx
->
ProbeMö
.
dwMaxVideoFømeSize
 =

263 
pVideoDemoCtx
->
CommôMö
.
dwMaxVideoFømeSize
 =

264 
pVideoDemoCtx
->
ProbeMax
.
dwMaxVideoFømeSize
 =

265 
pVideoDemoCtx
->
CommôMax
.
dwMaxVideoFømeSize
 =

266 
pVideoDemoCtx
->
ProbeDef
.
dwMaxVideoFømeSize
 =

267 
pVideoDemoCtx
->
CommôDef
.
dwMaxVideoFømeSize
 =

268 
PROBE_DEFAULT_dwMaxVideoFømeSize
;

271 
pVideoDemoCtx
->
ProbeCur
.
dwMaxVideoFømeSize
 =

272 
pVideoDemoCtx
->
CommôCur
.
dwMaxVideoFømeSize
 =

273 
pVideoDemoCtx
->
ProbeMö
.
dwMaxVideoFømeSize
 =

274 
pVideoDemoCtx
->
CommôMö
.
dwMaxVideoFømeSize
 =

275 
pVideoDemoCtx
->
ProbeMax
.
dwMaxVideoFømeSize
 =

276 
pVideoDemoCtx
->
CommôMax
.
dwMaxVideoFømeSize
 =

277 
pVideoDemoCtx
->
ProbeDef
.
dwMaxVideoFømeSize
 =

278 
pVideoDemoCtx
->
CommôDef
.
dwMaxVideoFømeSize
 =

279 
PROBE_DEFAULT_dwMaxVideoFømeSize_HS
;

282 
pVideoDemoCtx
->
ProbeCur
.
dwMaxPaylﬂdTøns„rSize
 =

283 
pVideoDemoCtx
->
CommôCur
.
dwMaxPaylﬂdTøns„rSize
 =

284 
pVideoDemoCtx
->
ProbeMö
.
dwMaxPaylﬂdTøns„rSize
 =

285 
pVideoDemoCtx
->
CommôMö
.
dwMaxPaylﬂdTøns„rSize
 =

286 
pVideoDemoCtx
->
ProbeMax
.
dwMaxPaylﬂdTøns„rSize
 =

287 
pVideoDemoCtx
->
CommôMax
.
dwMaxPaylﬂdTøns„rSize
 =

288 
pVideoDemoCtx
->
ProbeDef
.
dwMaxPaylﬂdTøns„rSize
 =

289 
pVideoDemoCtx
->
CommôDef
.
dwMaxPaylﬂdTøns„rSize
 =ÖVideoDemoCtx->
wVideoOutMaxPackëSize
;

291 
i
 = 0; i < 
MAX_FRAME_BUFFS
; i++)

293 
pVideoBuf
 = &
pVideoDemoCtx
->
VideoBuf„r
[
i
];

294 
pVideoBuf
->
buf„rIdx
 = 
i
;

295 
pVideoBuf
->
pVideoDemoCtx
 =ÖVideoDemoCtx;

296 
	`videoBufC⁄fig
(
pVideoBuf
);

298 i‡(!
pVideoDemoCtx
->
èskCª©ed
)

300 
pVideoDemoCtx
->
èskCª©ed
 = 
TRUE
;

301 
	`°¨tPro˚ssögTask
(
pVideoDemoCtx
);

304 
	`£m_po°
(&
pVideoDemoCtx
->
∑ckëSem
);

305 
	}
}

307 
	$UsbIsoWrôeCÆlback
(
VOID
 *
˘x
) {

308 
VIDEODEMO_BUFFER
 * 
pVideoBuf
;

309 
UINT32
 
toggÀ
;

310 
UINT32
 
i
;

311 
VIDEODEMO_CONTEXT
 *
pVideoDemoCtx
 = (VIDEODEMO_CONTEXT*)
˘x
;

312 
isochCback
 
ˇŒback
;

314 
pVideoBuf
 = &
pVideoDemoCtx
->
VideoBuf„r
[pVideoDemoCtx->
buf„rIndex
];

315 
toggÀ
 = 
FALSE
;

316 
ˇŒback
 = 
VideoDemo_SídVideoD©a_Dummy
;

318 
i
 = 0; i < 
VIDEO_PLANES_NUM
; i++)

320 i‡(
i
 =
VIDEO_PLANES_NUM
 - 1)

322 
toggÀ
 = 
TRUE
;

323 
ˇŒback
 = 
VideoDemo_SídVideoD©a_D⁄e
;

325 
	`fûlHódîD©a
(
pVideoBuf
->
∂™es
[
i
].
hódîBuf„r
,

326 
pVideoDemoCtx
->
∑ylﬂdHódîSize
,

327 
pVideoBuf
->
∂™es
[
i
].
isoPackësNum
, 
TRUE
,ÖVideoBuf);

328 
	`fûlPaylﬂdD©a
(
pVideoBuf
, 
i
, 
toggÀ
);

330 
	`VideoClõ¡Lib_SåómWrôeIsochV2
(

331 
pVideoDemoCtx
->
pVideo
,

332 
ˇŒback
,

333 
pVideoBuf
,

334 
pVideoDemoCtx
->
hVideoOut
,

335 
pVideoBuf
->
∂™es
[
i
].
hódîBuf„r
,

336 
pVideoDemoCtx
->
isoPackëSize
 * (
pVideoBuf
->
∂™es
[
i
].
isoPackësNum
 - 1)

337 + 
pVideoBuf
->
∂™es
[
i
].
œ°PackëSize
,

338 
pVideoBuf
->
∂™es
[
i
].
hBuf„r
,

339 
pVideoBuf
->
∂™es
[
i
].
pIsochDes¸
,

340 
pVideoBuf
->
∂™es
[
i
].
isoDes¸Size


343 
pVideoDemoCtx
->
buf„rIndex
 = (pVideoDemoCtx->buf„rIndex + 1Ë% 
MAX_USED_BUF
;

345 
pVideoBuf
 = &
pVideoDemoCtx
->
VideoBuf„r
[pVideoDemoCtx->
buf„rIndex
];

346 
	}
}

348 *
	$¸óãPackës
(*
pC⁄ãxt
)

350 
VIDEODEMO_CONTEXT
 * 
pVideoDemoCtx
 = (VIDEODEMO_CONTEXT*)
pC⁄ãxt
;

351 
pVideoDemoCtx
->
buf„rIndex
 = 0;

353 
	`USBPUMP_CALLBACKCOMPLETION_INIT
(

354 &
pVideoDemoCtx
->
WrôeCÆlback
,

355 
UsbIsoWrôeCÆlback
,

356 (*)
pVideoDemoCtx


361 
	`£m_waô
(&
pVideoDemoCtx
->
∑ckëSem
);

362 
	`UsbPumpPœtf‹m_Po°Evít
(

363 
pVideoDemoCtx
->
pPœtf‹m
,

364 &
pVideoDemoCtx
->
WrôeCÆlback


367  
pC⁄ãxt
;

368 
	}
}

370 
	$fûlHódîD©a
(
UINT8
* 
hódîBuf„r
, 
UINT32
 
hódîSize
,

371 
UINT32
 
numIsoFømes
, 
BOOL
 
£tEof
, *
pC⁄ãxt
)

373 
VIDEODEMO_BUFFER
 * 
CONST
 
pVideoBuf
 = 
pC⁄ãxt
;

374 
VIDEODEMO_CONTEXT
 * 
CONST
 
pVideoDemoCtx
 = 
pVideoBuf
->pVideoDemoCtx;

375 
UINT
 
i
;

377 
i
 = 0; i < 
numIsoFømes
; i++)

379 
hódîBuf„r
[
UNCOMPRESSED_HDR_HLE_OFFSET
] =

380 
pVideoDemoCtx
->
∑ylﬂdHódîSize
;

382 
hódîBuf„r
[
UNCOMPRESSED_HDR_BFH_OFFSET
] =

383 
UNCOMPRESSED_HDR_PTS
 + 
UNCOMPRESSED_HDR_SCR
 + 
UNCOMPRESSED_HDR_EOH
 +

384 
pVideoDemoCtx
->
hódîToggÀ
;

386 
pVideoDemoCtx
->
dwPTS
 += 1;

387 
pVideoDemoCtx
->
wSofCou¡î
 += 1;

389 
	`UHIL_LE_PUTUINT32
(

390 
hódîBuf„r
 + 
UNCOMPRESSED_HDR_PTS_OFFSET
,

391 
pVideoDemoCtx
->
dwPTS


393 
	`UHIL_LE_PUTUINT32
(

394 
hódîBuf„r
 + 
UNCOMPRESSED_HDR_SCR_STC_OFFSET
,

395 
pVideoDemoCtx
->
dwPTS


397 
	`UHIL_LE_PUTUINT16
(

398 
hódîBuf„r
 + 
UNCOMPRESSED_HDR_SCR_SOF_OFFSET
,

399 
pVideoDemoCtx
->
wSofCou¡î


401 i‡((
i
 =
numIsoFømes
 - 1Ë&& 
£tEof
)

403 
hódîBuf„r
[
UNCOMPRESSED_HDR_BFH_OFFSET
] +
UNCOMPRESSED_HDR_EOF
;

406 
hódîBuf„r
 +
hódîSize
;

408 
	}
}

410 
	$fûlPaylﬂdD©a
(
VIDEODEMO_BUFFER
 *
pVideoBuf
,

411 
UINT32
 
∂™eIdx
, 
BOOL
 
toggÀ
)

413 
VIDEODEMO_CONTEXT
 * 
CONST
 
pVideoDemoCtx
 = 
pVideoBuf
->pVideoDemoCtx;

414 
BYTES
 
off£t
;

415 
USBPUMP_ISOCH_PACKET_DESCR
 *
pIsochDes¸
;

416 
INT
 
i
;

418 
pIsochDes¸
 = 
pVideoBuf
->
∂™es
[
∂™eIdx
].pIsochDescr;

420 
off£t
 = 0;

421 
i
 = 0; i < 
pVideoBuf
->
∂™es
[
∂™eIdx
].
isoPackësNum
 - 1; i++)

423 
pIsochDes¸
->
uOff£t
 = 
off£t
;

424 
off£t
 +
pVideoDemoCtx
->
isoPackëSize
;

425 
pIsochDes¸
->
usLígth
 = 
pVideoDemoCtx
->
isoPackëSize
;

427 ++
pIsochDes¸
;

430 
pIsochDes¸
->
uOff£t
 = 
off£t
;

431 
pIsochDes¸
->
usLígth
 = 
pVideoBuf
->
∂™es
[
∂™eIdx
].
œ°PackëSize
;

432 i‡(
toggÀ
)

433 
pVideoDemoCtx
->
hódîToggÀ
 = 1 -ÖVideoDemoCtx->headerToggle;

434 ++
pIsochDes¸
;

436 
pVideoBuf
->
∂™es
[
∂™eIdx
].
isoDes¸Size
 = (
UINT8
*)
pIsochDes¸
 -

437 (
UINT8
*)
pVideoBuf
->
∂™es
[
∂™eIdx
].
pIsochDes¸
;

438 
	}
}

440 
VOID
 
	$VideoDemo_SídVideoD©a_Dummy
(

441 
VOID
 * 
pC⁄ãxt
,

442 
UINT32
 
Eº‹Code
,

443 
UINT8
 * 
pD©a
,

444 
BYTES
 
nD©a
,

445 
USBPUMP_ISOCH_PACKET_DESCR
 * 
pIsochDes¸
,

446 
BYTES
 
IsochDes¸Size


449 
	`USBPUMP_UNREFERENCED_PARAMETER
(
Eº‹Code
);

450 
	`USBPUMP_UNREFERENCED_PARAMETER
(
pC⁄ãxt
);

451 
	`USBPUMP_UNREFERENCED_PARAMETER
(
pD©a
);

452 
	`USBPUMP_UNREFERENCED_PARAMETER
(
nD©a
);

453 
	`USBPUMP_UNREFERENCED_PARAMETER
(
pIsochDes¸
);

454 
	`USBPUMP_UNREFERENCED_PARAMETER
(
IsochDes¸Size
);

455 
	}
}

480 
VOID
 
	$VideoDemo_SídVideoD©a_D⁄e
(

481 
VOID
 * 
pC⁄ãxt
,

482 
UINT32
 
Eº‹Code
,

483 
UINT8
 * 
pD©a
,

484 
BYTES
 
nD©a
,

485 
USBPUMP_ISOCH_PACKET_DESCR
 * 
pIsochDes¸
,

486 
BYTES
 
IsochDes¸Size


489 
VIDEODEMO_BUFFER
 * 
CONST
 
pVideoBuf
 = 
pC⁄ãxt
;

490 
VIDEODEMO_CONTEXT
 * 
CONST
 
pVideoDemoCtx
 = 
pVideoBuf
->pVideoDemoCtx;

492 
	`USBPUMP_UNREFERENCED_PARAMETER
(
pD©a
);

493 
	`USBPUMP_UNREFERENCED_PARAMETER
(
nD©a
);

494 
	`USBPUMP_UNREFERENCED_PARAMETER
(
pIsochDes¸
);

495 
	`USBPUMP_UNREFERENCED_PARAMETER
(
IsochDes¸Size
);

497 i‡(
Eº‹Code
 !
UPROTO_VIDEO_ERROR_OK
)

499 
	`TTUSB_OBJPRINTF
((

500 &
pVideoDemoCtx
->
pVideo
->
Obje˘Hódî
,

501 
UDMASK_ERRORS
,

504 
	`UsbPumpVideo_GëEº‹Name
(
Eº‹Code
)

508 i‡(! 
pVideoDemoCtx
->
fOuçutA˘iv©e
 ||

509 
Eº‹Code
 =
UPROTO_VIDEO_ERROR_IO_NOTCFG
 ||

510 
Eº‹Code
 =
UPROTO_VIDEO_ERROR_INVALID_REQUEST
)

515 
	`£m_po°
(&
pVideoDemoCtx
->
∑ckëSem
);

516 
	}
}

	@Evaluation/ma2x5x/UsbVideoIso/leon/videodemo_outswitch.c

11 
	~"videodemo.h
"

13 
	~"¥Ÿovideo.h
"

14 
	~"video˛õ¡lib.h
"

15 
	~"usbpumpdebug.h
"

16 
	~"usbvideo11.h
"

17 
	~"u∂©f‹m≠i.h
"

18 
	~"usbpum∂ib.h
"

19 
	~<°dio.h
>

26 
öt32_t
 
	gdevi˚Aâached
;

33 
CALLBACKFN
 
	gVideoDemoI_Pro˚ssögUnôEvít_Sync
;

34 
UPROTO_VIDEO_CONTROL_REQUEST_REPLY_CB_FN
 
	gVideoDemoI_C⁄åﬁReque°_D⁄e
;

36 
CALLBACKFN
 
	gVideoDemoI_SåómI¡îÁ˚Evít_Sync
;

37 
UPROTO_VIDEO_STREAM_REQUEST_REPLY_CB_FN
 
	gVideoDemoI_SåómReque°_D⁄e
;

41 
CONST
 
UPROTO_VIDEO_OUTSWITCH
 
	ggk_VideoDemo_OutSwôch
 =

42 
UPROTO_VIDEO_OUTSWITCH_INIT_V1
( \

43 
VideoDemo_C⁄åﬁSètusEvít
, \

44 
VideoDemo_Pro˚ssögUnôEvít
, \

45 
VideoDemo_SåómSètusEvít
, \

46 
VideoDemo_SåómI¡îÁ˚Evít
 \

66 
VOID


67 
	$VideoDemo_C⁄åﬁSètusEvít
(

68 
VOID
 * 
pClõ¡C⁄ãxt
,

69 
UPROTO_VIDEO_STATUS
 
VideoSètusCode


72 
VIDEODEMO_CONTEXT
 * 
CONST
 
pVideoDemoCtx
 = 
pClõ¡C⁄ãxt
;

73 
UPROTO_VIDEO
 * 
CONST
 
pVideo
 = 
pVideoDemoCtx
->pVideo;

75 
	`USBPUMP_TRACE_PARAMETER
(
pVideo
);

76 
	`USBPUMP_TRACE_PARAMETER
(
VideoSètusCode
);

78 
	`TTUSB_OBJPRINTF
((

79 &
pVideo
->
Obje˘Hódî
,

80 
UDMASK_PROTO
,

82 
	`UsbPumpVideo_GëSètusName
(
VideoSètusCode
)

84 i‡(
VideoSètusCode
 =
UPROTO_VIDEO_STATUS_ATTACH
)

86 
devi˚Aâached
 = 1;

88 i‡(
VideoSètusCode
 =
UPROTO_VIDEO_STATUS_DETACH
)

90 
	`¥ötf
("Device disconnected\n");

92 
	}
}

115 
VOID


116 
	$VideoDemo_Pro˚ssögUnôEvít
(

117 
VOID
 * 
pClõ¡C⁄ãxt
,

118 
UPROTO_VIDEO_CONTROL_REQUEST
 * 
pReque°


121 
VIDEODEMO_CONTEXT
 * 
CONST
 
pVideoDemoCtx
 = 
pClõ¡C⁄ãxt
;

123 
	`UHIL_˝ybuf
(&
pVideoDemoCtx
->
C⁄åﬁReque°
, 
pReque°
, (*pRequest));

125 
	`USBPUMP_CALLBACKCOMPLETION_INIT
(

126 &
pVideoDemoCtx
->
SëupCom∂ëi⁄
,

127 
VideoDemoI_Pro˚ssögUnôEvít_Sync
,

128 
pVideoDemoCtx


131 
	`UsbPumpPœtf‹m_Po°Evít
(

132 
pVideoDemoCtx
->
pPœtf‹m
,

133 &
pVideoDemoCtx
->
SëupCom∂ëi⁄


135 
	}
}

137 
VOID


138 
	$VideoDemoI_Pro˚ssögUnôEvít_Sync
(

139 
VOID
 *
pClõ¡C⁄ãxt


142 
VIDEODEMO_CONTEXT
 * 
CONST
 
pVideoDemoCtx
 = 
pClõ¡C⁄ãxt
;

143 
UPROTO_VIDEO_CONTROL_REQUEST
 * 
pReque°
;

145 
	`UsbPumpPœtf‹m_M¨kCom∂ëi⁄NŸBusy
(

146 
pVideoDemoCtx
->
pPœtf‹m
,

147 &
pVideoDemoCtx
->
SëupCom∂ëi⁄


150 
pReque°
 = &
pVideoDemoCtx
->
C⁄åﬁReque°
;

151 
pReque°
->
Hdr
.
bAc˚±Reque°
 = 
TRUE
;

152 
pReque°
->
Hdr
.
bC⁄åﬁSñe˘‹
)

154 
USBVIDEO_bC⁄åﬁSñe˘‹_PU_BACKLIGHT_COMPENSATION_CONTROL
:

155 
pReque°
->
Hdr
.
bReque°
)

157 
USB_bReque°_Video_GET_INFO
:

158 
pReque°
->
Backlight
.
wBacklightCom≥nßti⁄
 =

159 
PU_BACKLIGHT_COMPENSATION_CONTROL_INFO
;

161 
USB_bReque°_Video_GET_MIN
:

162 
pReque°
->
Backlight
.
wBacklightCom≥nßti⁄
 =

163 
PU_BACKLIGHT_COMPENSATION_CONTROL_MIN
;

165 
USB_bReque°_Video_GET_MAX
:

166 
pReque°
->
Backlight
.
wBacklightCom≥nßti⁄
 =

167 
PU_BACKLIGHT_COMPENSATION_CONTROL_MAX
;

169 
USB_bReque°_Video_GET_RES
:

170 
pReque°
->
Backlight
.
wBacklightCom≥nßti⁄
 =

171 
PU_BACKLIGHT_COMPENSATION_CONTROL_RES
;

173 
USB_bReque°_Video_GET_DEF
:

174 
pReque°
->
Backlight
.
wBacklightCom≥nßti⁄
 =

175 
PU_BACKLIGHT_COMPENSATION_CONTROL_DEF
;

177 
USB_bReque°_Video_GET_CUR
:

178 
pReque°
->
Backlight
.
wBacklightCom≥nßti⁄
 =

179 
pVideoDemoCtx
->
ProcUnôCur
.
wBackLightCom≥nßti⁄
;

181 
USB_bReque°_Video_SET_CUR
:

183 
pVideoDemoCtx
->
ProcUnôCur
.
wBackLightCom≥nßti⁄
 =

184 
pReque°
->
Backlight
.
wBacklightCom≥nßti⁄
;

187 
pReque°
->
Hdr
.
bAc˚±Reque°
 = 
FALSE
;

192 
USBVIDEO_bC⁄åﬁSñe˘‹_PU_BRIGHTNESS_CONTROL
:

193 
pReque°
->
Hdr
.
bReque°
)

195 
USB_bReque°_Video_GET_INFO
:

196 
pReque°
->
Brighäess
.
wBrighäess
 =

197 
PU_BRIGHTNESS_CONTROL_INFO
;

199 
USB_bReque°_Video_GET_MIN
:

200 
pReque°
->
Brighäess
.
wBrighäess
 =

201 
PU_BRIGHTNESS_CONTROL_MIN
;

203 
USB_bReque°_Video_GET_MAX
:

204 
pReque°
->
Brighäess
.
wBrighäess
 =

205 
PU_BRIGHTNESS_CONTROL_MAX
;

207 
USB_bReque°_Video_GET_RES
:

208 
pReque°
->
Brighäess
.
wBrighäess
 =

209 
PU_BRIGHTNESS_CONTROL_RES
;

211 
USB_bReque°_Video_GET_DEF
:

212 
pReque°
->
Brighäess
.
wBrighäess
 =

213 
PU_BRIGHTNESS_CONTROL_DEF
;

215 
USB_bReque°_Video_GET_CUR
:

216 
pReque°
->
Brighäess
.
wBrighäess
 =

217 
pVideoDemoCtx
->
ProcUnôCur
.
wBrighäess
;

219 
USB_bReque°_Video_SET_CUR
:

221 
pVideoDemoCtx
->
ProcUnôCur
.
wBrighäess
 =

222 
pReque°
->
Brighäess
.
wBrighäess
;

225 
pReque°
->
Hdr
.
bAc˚±Reque°
 = 
FALSE
;

230 
USBVIDEO_bC⁄åﬁSñe˘‹_PU_CONTRAST_CONTROL
:

231 
pReque°
->
Hdr
.
bReque°
)

233 
USB_bReque°_Video_GET_INFO
:

234 
pReque°
->
C⁄åa°
.
wC⁄åa°
 =

235 
PU_CONTRAST_CONTROL_INFO
;

237 
USB_bReque°_Video_GET_MIN
:

238 
pReque°
->
C⁄åa°
.
wC⁄åa°
 =

239 
PU_CONTRAST_CONTROL_MIN
;

241 
USB_bReque°_Video_GET_MAX
:

242 
pReque°
->
C⁄åa°
.
wC⁄åa°
 =

243 
PU_CONTRAST_CONTROL_MAX
;

245 
USB_bReque°_Video_GET_RES
:

246 
pReque°
->
C⁄åa°
.
wC⁄åa°
 =

247 
PU_CONTRAST_CONTROL_RES
;

249 
USB_bReque°_Video_GET_DEF
:

250 
pReque°
->
C⁄åa°
.
wC⁄åa°
 =

251 
PU_CONTRAST_CONTROL_DEF
;

253 
USB_bReque°_Video_GET_CUR
:

254 
pReque°
->
C⁄åa°
.
wC⁄åa°
 =

255 
pVideoDemoCtx
->
ProcUnôCur
.
wC⁄åa°
;

257 
USB_bReque°_Video_SET_CUR
:

259 
pVideoDemoCtx
->
ProcUnôCur
.
wC⁄åa°
 =

260 
pReque°
->
C⁄åa°
.
wC⁄åa°
;

263 
pReque°
->
Hdr
.
bAc˚±Reque°
 = 
FALSE
;

268 
USBVIDEO_bC⁄åﬁSñe˘‹_PU_POWER_LINE_FREQUENCY_CONTROL
:

269 
pReque°
->
Hdr
.
bReque°
)

271 
USB_bReque°_Video_GET_INFO
:

272 
pReque°
->
PowîLöe
.
bPowîLöeFªquícy
 =

273 
PU_POWER_LINE_FREQUENCY_CONTROL_INFO
;

275 
USB_bReque°_Video_GET_MIN
:

276 
pReque°
->
PowîLöe
.
bPowîLöeFªquícy
 =

277 
PU_POWER_LINE_FREQUENCY_CONTROL_MIN
;

279 
USB_bReque°_Video_GET_MAX
:

280 
pReque°
->
PowîLöe
.
bPowîLöeFªquícy
 =

281 
PU_POWER_LINE_FREQUENCY_CONTROL_MAX
;

283 
USB_bReque°_Video_GET_RES
:

284 
pReque°
->
PowîLöe
.
bPowîLöeFªquícy
 =

285 
PU_POWER_LINE_FREQUENCY_CONTROL_RES
;

287 
USB_bReque°_Video_GET_DEF
:

288 
pReque°
->
PowîLöe
.
bPowîLöeFªquícy
 =

289 
PU_POWER_LINE_FREQUENCY_CONTROL_DEF
;

291 
USB_bReque°_Video_GET_CUR
:

292 
pReque°
->
PowîLöe
.
bPowîLöeFªquícy
 =

293 
pVideoDemoCtx
->
ProcUnôCur
.
bPowîLöeFªquícy
;

295 
USB_bReque°_Video_SET_CUR
:

297 
pVideoDemoCtx
->
ProcUnôCur
.
bPowîLöeFªquícy
 =

298 
pReque°
->
PowîLöe
.
bPowîLöeFªquícy
;

301 
pReque°
->
Hdr
.
bAc˚±Reque°
 = 
FALSE
;

306 
USBVIDEO_bC⁄åﬁSñe˘‹_PU_HUE_CONTROL
:

307 
pReque°
->
Hdr
.
bReque°
)

309 
USB_bReque°_Video_GET_INFO
:

310 
pReque°
->
Hue
.
wHue
 = 
PU_HUE_CONTROL_INFO
;

312 
USB_bReque°_Video_GET_MIN
:

313 
pReque°
->
Hue
.
wHue
 = 
PU_HUE_CONTROL_MIN
;

315 
USB_bReque°_Video_GET_MAX
:

316 
pReque°
->
Hue
.
wHue
 = 
PU_HUE_CONTROL_MAX
;

318 
USB_bReque°_Video_GET_RES
:

319 
pReque°
->
Hue
.
wHue
 = 
PU_HUE_CONTROL_RES
;

321 
USB_bReque°_Video_GET_DEF
:

322 
pReque°
->
Hue
.
wHue
 = 
PU_HUE_CONTROL_DEF
;

324 
USB_bReque°_Video_GET_CUR
:

325 
pReque°
->
Hue
.
wHue
 = 
pVideoDemoCtx
->
ProcUnôCur
.wHue;

327 
USB_bReque°_Video_SET_CUR
:

329 
pVideoDemoCtx
->
ProcUnôCur
.
wHue
 = 
pReque°
->
Hue
.wHue;

332 
pReque°
->
Hdr
.
bAc˚±Reque°
 = 
FALSE
;

337 
USBVIDEO_bC⁄åﬁSñe˘‹_PU_SATURATION_CONTROL
:

338 
pReque°
->
Hdr
.
bReque°
)

340 
USB_bReque°_Video_GET_INFO
:

341 
pReque°
->
S©uøti⁄
.
wS©uøti⁄
 =

342 
PU_SATURATION_CONTROL_INFO
;

344 
USB_bReque°_Video_GET_MIN
:

345 
pReque°
->
S©uøti⁄
.
wS©uøti⁄
 =

346 
PU_SATURATION_CONTROL_MIN
;

348 
USB_bReque°_Video_GET_MAX
:

349 
pReque°
->
S©uøti⁄
.
wS©uøti⁄
 =

350 
PU_SATURATION_CONTROL_MAX
;

352 
USB_bReque°_Video_GET_RES
:

353 
pReque°
->
S©uøti⁄
.
wS©uøti⁄
 =

354 
PU_SATURATION_CONTROL_RES
;

356 
USB_bReque°_Video_GET_DEF
:

357 
pReque°
->
S©uøti⁄
.
wS©uøti⁄
 =

358 
PU_SATURATION_CONTROL_DEF
;

360 
USB_bReque°_Video_GET_CUR
:

361 
pReque°
->
S©uøti⁄
.
wS©uøti⁄
 =

362 
pVideoDemoCtx
->
ProcUnôCur
.
wS©uøti⁄
;

364 
USB_bReque°_Video_SET_CUR
:

366 
pVideoDemoCtx
->
ProcUnôCur
.
wS©uøti⁄
 =

367 
pReque°
->
S©uøti⁄
.
wS©uøti⁄
 ;

370 
pReque°
->
Hdr
.
bAc˚±Reque°
 = 
FALSE
;

375 
USBVIDEO_bC⁄åﬁSñe˘‹_PU_SHARPNESS_CONTROL
:

376 
pReque°
->
Hdr
.
bReque°
)

378 
USB_bReque°_Video_GET_INFO
:

379 
pReque°
->
Sh¨≤ess
.
wSh¨≤ess
 =

380 
PU_SHARPNESS_CONTROL_INFO
;

382 
USB_bReque°_Video_GET_MIN
:

383 
pReque°
->
Sh¨≤ess
.
wSh¨≤ess
 =

384 
PU_SHARPNESS_CONTROL_MIN
;

386 
USB_bReque°_Video_GET_MAX
:

387 
pReque°
->
Sh¨≤ess
.
wSh¨≤ess
 =

388 
PU_SHARPNESS_CONTROL_MAX
;

390 
USB_bReque°_Video_GET_RES
:

391 
pReque°
->
Sh¨≤ess
.
wSh¨≤ess
 =

392 
PU_SHARPNESS_CONTROL_RES
;

394 
USB_bReque°_Video_GET_DEF
:

395 
pReque°
->
Sh¨≤ess
.
wSh¨≤ess
 =

396 
PU_SHARPNESS_CONTROL_DEF
;

398 
USB_bReque°_Video_GET_CUR
:

399 
pReque°
->
Sh¨≤ess
.
wSh¨≤ess
 =

400 
pVideoDemoCtx
->
ProcUnôCur
.
wSh¨≤ess
;

402 
USB_bReque°_Video_SET_CUR
:

404 
pVideoDemoCtx
->
ProcUnôCur
.
wSh¨≤ess
 =

405 
pReque°
->
Sh¨≤ess
.
wSh¨≤ess
;

408 
pReque°
->
Hdr
.
bAc˚±Reque°
 = 
FALSE
;

413 
USBVIDEO_bC⁄åﬁSñe˘‹_PU_GAMMA_CONTROL
:

414 
pReque°
->
Hdr
.
bReque°
)

416 
USB_bReque°_Video_GET_INFO
:

417 
pReque°
->
Gamma
.
wGamma
 = 
PU_GAMMA_CONTROL_INFO
;

419 
USB_bReque°_Video_GET_MIN
:

420 
pReque°
->
Gamma
.
wGamma
 = 
PU_GAMMA_CONTROL_MIN
;

422 
USB_bReque°_Video_GET_MAX
:

423 
pReque°
->
Gamma
.
wGamma
 = 
PU_GAMMA_CONTROL_MAX
;

425 
USB_bReque°_Video_GET_RES
:

426 
pReque°
->
Gamma
.
wGamma
 = 
PU_GAMMA_CONTROL_RES
;

428 
USB_bReque°_Video_GET_DEF
:

429 
pReque°
->
Gamma
.
wGamma
 = 
PU_GAMMA_CONTROL_DEF
;

431 
USB_bReque°_Video_GET_CUR
:

432 
pReque°
->
Gamma
.
wGamma
 =

433 
pVideoDemoCtx
->
ProcUnôCur
.
wGamma
;

435 
USB_bReque°_Video_SET_CUR
:

437 
pVideoDemoCtx
->
ProcUnôCur
.
wGamma
 =

438 
pReque°
->
Gamma
.
wGamma
;

441 
pReque°
->
Hdr
.
bAc˚±Reque°
 = 
FALSE
;

446 
USBVIDEO_bC⁄åﬁSñe˘‹_PU_WHITE_BALANCE_TEMPERATURE_CONTROL
:

447 
pReque°
->
Hdr
.
bReque°
)

449 
USB_bReque°_Video_GET_INFO
:

450 
pReque°
->
WhôeTemp
.
wWhôeBÆ™˚Tem≥øtuª
 =

451 
PU_WHITE_BALANCE_TEMPERATURE_CONTROL_INFO
;

453 
USB_bReque°_Video_GET_MIN
:

454 
pReque°
->
WhôeTemp
.
wWhôeBÆ™˚Tem≥øtuª
 =

455 
PU_WHITE_BALANCE_TEMPERATURE_CONTROL_MIN
;

457 
USB_bReque°_Video_GET_MAX
:

458 
pReque°
->
WhôeTemp
.
wWhôeBÆ™˚Tem≥øtuª
 =

459 
PU_WHITE_BALANCE_TEMPERATURE_CONTROL_MAX
;

461 
USB_bReque°_Video_GET_RES
:

462 
pReque°
->
WhôeTemp
.
wWhôeBÆ™˚Tem≥øtuª
 =

463 
PU_WHITE_BALANCE_TEMPERATURE_CONTROL_RES
;

465 
USB_bReque°_Video_GET_DEF
:

466 
pReque°
->
WhôeTemp
.
wWhôeBÆ™˚Tem≥øtuª
 =

467 
PU_WHITE_BALANCE_TEMPERATURE_CONTROL_DEF
;

469 
USB_bReque°_Video_GET_CUR
:

470 
pReque°
->
WhôeTemp
.
wWhôeBÆ™˚Tem≥øtuª
 =

471 
pVideoDemoCtx
->
ProcUnôCur
.
wWhôeBÆ™˚Tem≥øtuª
;

473 
USB_bReque°_Video_SET_CUR
:

475 
pVideoDemoCtx
->
ProcUnôCur
.
wWhôeBÆ™˚Tem≥øtuª
 =

476 
pReque°
->
WhôeTemp
.
wWhôeBÆ™˚Tem≥øtuª
;

479 
pReque°
->
Hdr
.
bAc˚±Reque°
 = 
FALSE
;

484 
USBVIDEO_bC⁄åﬁSñe˘‹_PU_HUE_AUTO_CONTROL
:

485 
pReque°
->
Hdr
.
bReque°
)

487 
USB_bReque°_Video_GET_INFO
:

488 
pReque°
->
HueAuto
.
bHueAuto
 =

489 
PU_HUE_AUTO_CONTROL_INFO
;

491 
USB_bReque°_Video_GET_MIN
:

492 
pReque°
->
HueAuto
.
bHueAuto
 =

493 
PU_HUE_AUTO_CONTROL_MIN
;

495 
USB_bReque°_Video_GET_MAX
:

496 
pReque°
->
HueAuto
.
bHueAuto
 =

497 
PU_HUE_AUTO_CONTROL_MAX
;

499 
USB_bReque°_Video_GET_RES
:

500 
pReque°
->
HueAuto
.
bHueAuto
 =

501 
PU_HUE_AUTO_CONTROL_RES
;

503 
USB_bReque°_Video_GET_DEF
:

504 
pReque°
->
HueAuto
.
bHueAuto
 =

505 
PU_HUE_AUTO_CONTROL_DEF
;

507 
USB_bReque°_Video_GET_CUR
:

508 
pReque°
->
HueAuto
.
bHueAuto
 =

509 
pVideoDemoCtx
->
ProcUnôCur
.
bHueAuto
;

511 
USB_bReque°_Video_SET_CUR
:

513 
pVideoDemoCtx
->
ProcUnôCur
.
bHueAuto
 =

514 
pReque°
->
HueAuto
.
bHueAuto
;

517 
pReque°
->
Hdr
.
bAc˚±Reque°
 = 
FALSE
;

522 
USBVIDEO_bC⁄åﬁSñe˘‹_PU_WHITE_BALANCE_TEMPERATURE_AUTO_CONTROL
:

523 
pReque°
->
Hdr
.
bReque°
)

525 
USB_bReque°_Video_GET_INFO
:

526 
pReque°
->
WhôeTempAuto
.
bWhôeBÆ™˚Tem≥øtuªAuto
 =

527 
PU_WHITE_BALANCE_TEMPERATURE_AUTO_CONTROL_INFO
;

529 
USB_bReque°_Video_GET_MIN
:

530 
pReque°
->
WhôeTempAuto
.
bWhôeBÆ™˚Tem≥øtuªAuto
 =

531 
PU_WHITE_BALANCE_TEMPERATURE_AUTO_CONTROL_MIN
;

533 
USB_bReque°_Video_GET_MAX
:

534 
pReque°
->
WhôeTempAuto
.
bWhôeBÆ™˚Tem≥øtuªAuto
 =

535 
PU_WHITE_BALANCE_TEMPERATURE_AUTO_CONTROL_MAX
;

537 
USB_bReque°_Video_GET_RES
:

538 
pReque°
->
WhôeTempAuto
.
bWhôeBÆ™˚Tem≥øtuªAuto
 =

539 
PU_WHITE_BALANCE_TEMPERATURE_AUTO_CONTROL_RES
;

541 
USB_bReque°_Video_GET_DEF
:

542 
pReque°
->
WhôeTempAuto
.
bWhôeBÆ™˚Tem≥øtuªAuto
 =

543 
PU_WHITE_BALANCE_TEMPERATURE_AUTO_CONTROL_DEF
;

545 
USB_bReque°_Video_GET_CUR
:

546 
pReque°
->
WhôeTempAuto
.
bWhôeBÆ™˚Tem≥øtuªAuto
 =

547 
pVideoDemoCtx
->
ProcUnôCur
.
bWhôeBÆ™˚Tem≥øtuªAuto
;

549 
USB_bReque°_Video_SET_CUR
:

551 
pVideoDemoCtx
->
ProcUnôCur
.
bWhôeBÆ™˚Tem≥øtuªAuto
 =

552 
pReque°
->
WhôeTempAuto
.
bWhôeBÆ™˚Tem≥øtuªAuto
;

555 
pReque°
->
Hdr
.
bAc˚±Reque°
 = 
FALSE
;

561 
pReque°
->
Hdr
.
bAc˚±Reque°
 = 
FALSE
;

566 
	`VideoClõ¡Lib_C⁄åﬁReque°Rïly
(

567 
pVideoDemoCtx
->
pVideo
,

568 
VideoDemoI_C⁄åﬁReque°_D⁄e
,

569 
pVideoDemoCtx
,

570 
pReque°


572 
	}
}

574 
VOID


575 
	$VideoDemoI_C⁄åﬁReque°_D⁄e
(

576 
VOID
 * 
pClõ¡C⁄ãxt
,

577 
UINT32
 
Eº‹Code


580 
	`USBPUMP_UNREFERENCED_PARAMETER
(
pClõ¡C⁄ãxt
);

581 
	`USBPUMP_UNREFERENCED_PARAMETER
(
Eº‹Code
);

582 
	}
}

603 
VOID


604 
	$VideoDemo_SåómSètusEvít
(

605 
VOID
 * 
pClõ¡C⁄ãxt
,

606 
UPROTO_VIDEO_STREAM_HANDLE
 
hVideoSåóm
,

607 
BOOL
 
fA˘iv©e


610 
VIDEODEMO_CONTEXT
 * 
CONST
 
pVideoDemoCtx
 = 
pClõ¡C⁄ãxt
;

611 
UPROTO_VIDEO
 * 
CONST
 
pVideo
 = 
pVideoDemoCtx
->pVideo;

613 
	`USBPUMP_TRACE_PARAMETER
(
pVideo
);

615 i‡(
hVideoSåóm
 =
pVideoDemoCtx
->
hVideoIn
)

617 
pVideoDemoCtx
->
fI≈utA˘iv©e
 = 
fA˘iv©e
;

619 
	`TTUSB_OBJPRINTF
((

620 &
pVideo
->
Obje˘Hódî
,

621 
UDMASK_PROTO
,

623 
fA˘iv©e
 ? "ACTIVATE" : "DEACTIVATE"

627 i‡(
hVideoSåóm
 =
pVideoDemoCtx
->
hVideoOut
)

629 
pVideoDemoCtx
->
fOuçutA˘iv©e
 = 
fA˘iv©e
;

631 
	`TTUSB_OBJPRINTF
((

632 &
pVideo
->
Obje˘Hódî
,

633 
UDMASK_PROTO
,

635 
fA˘iv©e
 ? "ACTIVATE" : "DEACTIVATE"

639 i‡(
fA˘iv©e
)

641 
	`VideoDemo_Sèπ
(
pVideoDemoCtx
);

644 
	}
}

665 
VOID


666 
	$VideoDemo_SåómI¡îÁ˚Evít
(

667 
VOID
 * 
pClõ¡C⁄ãxt
,

668 
UPROTO_VIDEO_STREAM_HANDLE
 
hVideoSåóm
,

669 
UPROTO_VIDEO_STREAM_REQUEST
 * 
pReque°


672 
VIDEODEMO_CONTEXT
 * 
CONST
 
pVideoDemoCtx
 = 
pClõ¡C⁄ãxt
;

674 
pVideoDemoCtx
->
hSåómReque°
 = 
hVideoSåóm
;

675 
	`UHIL_˝ybuf
(&
pVideoDemoCtx
->
SåómReque°
, 
pReque°
, (*pRequest));

677 
	`USBPUMP_CALLBACKCOMPLETION_INIT
(

678 &
pVideoDemoCtx
->
SëupCom∂ëi⁄
,

679 
VideoDemoI_SåómI¡îÁ˚Evít_Sync
,

680 
pVideoDemoCtx


683 
	`UsbPumpPœtf‹m_Po°Evít
(

684 
pVideoDemoCtx
->
pPœtf‹m
,

685 &
pVideoDemoCtx
->
SëupCom∂ëi⁄


687 
	}
}

689 
VOID


690 
	$VideoDemoI_SåómI¡îÁ˚Evít_Sync
(

691 
VOID
 *
pClõ¡C⁄ãxt


694 
VIDEODEMO_CONTEXT
 * 
CONST
 
pVideoDemoCtx
 = 
pClõ¡C⁄ãxt
;

695 
UPROTO_VIDEO_STREAM_REQUEST
 * 
pReque°
;

697 
pReque°
 = &
pVideoDemoCtx
->
SåómReque°
;

698 
pReque°
->
Hdr
.
bAc˚±Reque°
 = 
TRUE
;

699 
pReque°
->
Hdr
.
bC⁄åﬁSñe˘‹
)

701 
USBVIDEO_bC⁄åﬁSñe˘‹_VS_PROBE_CONTROL
:

702 
pReque°
->
Hdr
.
bReque°
)

704 
USB_bReque°_Video_GET_CUR
:

705 
pReque°
->
Video
.
bmHöt
 =

706 
pVideoDemoCtx
->
ProbeCur
.
bmHöt
;

707 
pReque°
->
Video
.
bF‹m©Index
 =

708 
pVideoDemoCtx
->
ProbeCur
.
bF‹m©Index
;

709 
pReque°
->
Video
.
bFømeIndex
 =

710 
pVideoDemoCtx
->
ProbeCur
.
bFømeIndex
;

711 
pReque°
->
Video
.
dwFømeI¡îvÆ
 =

712 
pVideoDemoCtx
->
ProbeCur
.
dwFømeI¡îvÆ
;

713 
pReque°
->
Video
.
wKeyFømeR©e
 =

714 
pVideoDemoCtx
->
ProbeCur
.
wKeyFømeR©e
;

715 
pReque°
->
Video
.
wPFømeR©e
 =

716 
pVideoDemoCtx
->
ProbeCur
.
wPFømeR©e
;

717 
pReque°
->
Video
.
wCompQuÆôy
 =

718 
pVideoDemoCtx
->
ProbeCur
.
wCompQuÆôy
;

719 
pReque°
->
Video
.
wCompWödowSize
 =

720 
pVideoDemoCtx
->
ProbeCur
.
wCompWödowSize
;

721 
pReque°
->
Video
.
wDñay
 =

722 
pVideoDemoCtx
->
ProbeCur
.
wDñay
;

723 
pReque°
->
Video
.
dwMaxVideoFømeSize
 =

724 
pVideoDemoCtx
->
ProbeCur
.
dwMaxVideoFømeSize
;

725 
pReque°
->
Video
.
dwMaxPaylﬂdTøns„rSize
 =

726 
pVideoDemoCtx
->
ProbeCur
.
dwMaxPaylﬂdTøns„rSize
;

727 
pReque°
->
Video
.
dwClockFªquícy
 =

728 
pVideoDemoCtx
->
ProbeCur
.
dwClockFªquícy
;

729 
pReque°
->
Video
.
bmFømögInfo
 =

730 
pVideoDemoCtx
->
ProbeCur
.
bmFømögInfo
;

731 
pReque°
->
Video
.
bPª„ªdVîsi⁄
 =

732 
pVideoDemoCtx
->
ProbeCur
.
bPª„ªdVîsi⁄
;

733 
pReque°
->
Video
.
bMöVîsi⁄
 =

734 
pVideoDemoCtx
->
ProbeCur
.
bMöVîsi⁄
;

735 
pReque°
->
Video
.
bMaxVîsi⁄
 =

736 
pVideoDemoCtx
->
ProbeCur
.
bMaxVîsi⁄
;

738 
USB_bReque°_Video_SET_CUR
:

741 i‡(
pReque°
->
Video
.
bmHöt
 != 0)

742 
pVideoDemoCtx
->
ProbeCur
.
bmHöt
 =

743 
pReque°
->
Video
.
bmHöt
;

744 i‡(
pReque°
->
Video
.
bF‹m©Index
 != 0)

745 
pVideoDemoCtx
->
ProbeCur
.
bF‹m©Index
 =

746 
pReque°
->
Video
.
bF‹m©Index
;

747 i‡(
pReque°
->
Video
.
bFømeIndex
 != 0)

748 
pVideoDemoCtx
->
ProbeCur
.
bFømeIndex
 =

749 
pReque°
->
Video
.
bFømeIndex
;

750 i‡(
pReque°
->
Video
.
dwFømeI¡îvÆ
 != 0)

751 
pVideoDemoCtx
->
ProbeCur
.
dwFømeI¡îvÆ
 =

752 
pReque°
->
Video
.
dwFømeI¡îvÆ
;

753 i‡(
pReque°
->
Video
.
wKeyFømeR©e
 != 0)

754 
pVideoDemoCtx
->
ProbeCur
.
wKeyFømeR©e
 =

755 
pReque°
->
Video
.
wKeyFømeR©e
;

756 i‡(
pReque°
->
Video
.
wPFømeR©e
 != 0)

757 
pVideoDemoCtx
->
ProbeCur
.
wPFømeR©e
 =

758 
pReque°
->
Video
.
wPFømeR©e
;

759 i‡(
pReque°
->
Video
.
wCompQuÆôy
 != 0)

760 
pVideoDemoCtx
->
ProbeCur
.
wCompQuÆôy
 =

761 
pReque°
->
Video
.
wCompQuÆôy
;

762 i‡(
pReque°
->
Video
.
wCompWödowSize
 != 0)

763 
pVideoDemoCtx
->
ProbeCur
.
wCompWödowSize
 =

764 
pReque°
->
Video
.
wCompWödowSize
;

765 i‡(
pReque°
->
Video
.
wDñay
 != 0)

766 
pVideoDemoCtx
->
ProbeCur
.
wDñay
 =

767 
pReque°
->
Video
.
wDñay
;

768 i‡(
pReque°
->
Video
.
dwMaxVideoFømeSize
 != 0)

769 
pVideoDemoCtx
->
ProbeCur
.
dwMaxVideoFømeSize
 =

770 
pReque°
->
Video
.
dwMaxVideoFømeSize
;

771 i‡(
pReque°
->
Video
.
dwMaxPaylﬂdTøns„rSize
 != 0)

772 
pVideoDemoCtx
->
ProbeCur
.
dwMaxPaylﬂdTøns„rSize
 =

773 
pReque°
->
Video
.
dwMaxPaylﬂdTøns„rSize
;

774 i‡(
pReque°
->
Video
.
dwClockFªquícy
 != 0)

775 
pVideoDemoCtx
->
ProbeCur
.
dwClockFªquícy
 =

776 
pReque°
->
Video
.
dwClockFªquícy
;

777 i‡(
pReque°
->
Video
.
bmFømögInfo
 != 0)

778 
pVideoDemoCtx
->
ProbeCur
.
bmFømögInfo
 =

779 
pReque°
->
Video
.
bmFømögInfo
;

780 i‡(
pReque°
->
Video
.
bPª„ªdVîsi⁄
 != 0)

781 
pVideoDemoCtx
->
ProbeCur
.
bPª„ªdVîsi⁄
 =

782 
pReque°
->
Video
.
bPª„ªdVîsi⁄
;

783 i‡(
pReque°
->
Video
.
bMöVîsi⁄
 != 0)

784 
pVideoDemoCtx
->
ProbeCur
.
bMöVîsi⁄
 =

785 
pReque°
->
Video
.
bMöVîsi⁄
;

786 i‡(
pReque°
->
Video
.
bMaxVîsi⁄
 != 0)

787 
pVideoDemoCtx
->
ProbeCur
.
bMaxVîsi⁄
 =

788 
pReque°
->
Video
.
bMaxVîsi⁄
;

791 
USB_bReque°_Video_GET_MIN
:

792 
pReque°
->
Video
.
bmHöt
 = 
pVideoDemoCtx
->
ProbeMö
.bmHint;

793 
pReque°
->
Video
.
bF‹m©Index
 = 
pVideoDemoCtx
->
ProbeMö
.bFormatIndex;

794 
pReque°
->
Video
.
bFømeIndex
 = 
pVideoDemoCtx
->
ProbeMö
.bFrameIndex;

795 
pReque°
->
Video
.
dwFømeI¡îvÆ
 =

796 
pVideoDemoCtx
->
ProbeMö
.
dwFømeI¡îvÆ
;

797 
pReque°
->
Video
.
wKeyFømeR©e
 =

798 
pVideoDemoCtx
->
ProbeMö
.
wKeyFømeR©e
;

799 
pReque°
->
Video
.
wPFømeR©e
 = 
pVideoDemoCtx
->
ProbeMö
.wPFrameRate;

800 
pReque°
->
Video
.
wCompQuÆôy
 = 
pVideoDemoCtx
->
ProbeMö
.wCompQuality;

801 
pReque°
->
Video
.
wCompWödowSize
 =

802 
pVideoDemoCtx
->
ProbeMö
.
wCompWödowSize
;

803 
pReque°
->
Video
.
wDñay
 = 
pVideoDemoCtx
->
ProbeMö
.wDelay;

804 
pReque°
->
Video
.
dwMaxVideoFømeSize
 =

805 
pVideoDemoCtx
->
ProbeMö
.
dwMaxVideoFømeSize
;

806 
pReque°
->
Video
.
dwMaxPaylﬂdTøns„rSize
 =

807 
pVideoDemoCtx
->
ProbeMö
.
dwMaxPaylﬂdTøns„rSize
;

808 
pReque°
->
Video
.
dwClockFªquícy
 =

809 
pVideoDemoCtx
->
ProbeMö
.
dwClockFªquícy
;

810 
pReque°
->
Video
.
bmFømögInfo
 =

811 
pVideoDemoCtx
->
ProbeMö
.
bmFømögInfo
;

812 
pReque°
->
Video
.
bPª„ªdVîsi⁄
 =

813 
pVideoDemoCtx
->
ProbeMö
.
bPª„ªdVîsi⁄
;

814 
pReque°
->
Video
.
bMöVîsi⁄
 = 
pVideoDemoCtx
->
ProbeMö
.bMinVersion;

815 
pReque°
->
Video
.
bMaxVîsi⁄
 = 
pVideoDemoCtx
->
ProbeMö
.bMaxVersion;

818 
USB_bReque°_Video_GET_MAX
:

819 
pReque°
->
Video
.
bmHöt
 = 
pVideoDemoCtx
->
ProbeMax
.bmHint;

820 
pReque°
->
Video
.
bF‹m©Index
 = 
pVideoDemoCtx
->
ProbeMax
.bFormatIndex;

821 
pReque°
->
Video
.
bFømeIndex
 = 
pVideoDemoCtx
->
ProbeMax
.bFrameIndex;

822 
pReque°
->
Video
.
dwFømeI¡îvÆ
 =

823 
pVideoDemoCtx
->
ProbeMax
.
dwFømeI¡îvÆ
;

824 
pReque°
->
Video
.
wKeyFømeR©e
 =

825 
pVideoDemoCtx
->
ProbeMax
.
wKeyFømeR©e
;

826 
pReque°
->
Video
.
wPFømeR©e
 = 
pVideoDemoCtx
->
ProbeMax
.wPFrameRate;

827 
pReque°
->
Video
.
wCompQuÆôy
 = 
pVideoDemoCtx
->
ProbeMax
.wCompQuality;

828 
pReque°
->
Video
.
wCompWödowSize
 =

829 
pVideoDemoCtx
->
ProbeMax
.
wCompWödowSize
;

830 
pReque°
->
Video
.
wDñay
 = 
pVideoDemoCtx
->
ProbeMax
.wDelay;

831 
pReque°
->
Video
.
dwMaxVideoFømeSize
 =

832 
pVideoDemoCtx
->
ProbeMax
.
dwMaxVideoFømeSize
;

833 
pReque°
->
Video
.
dwMaxPaylﬂdTøns„rSize
 =

834 
pVideoDemoCtx
->
ProbeMax
.
dwMaxPaylﬂdTøns„rSize
;

835 
pReque°
->
Video
.
dwClockFªquícy
 =

836 
pVideoDemoCtx
->
ProbeMax
.
dwClockFªquícy
;

837 
pReque°
->
Video
.
bmFømögInfo
 =

838 
pVideoDemoCtx
->
ProbeMax
.
bmFømögInfo
;

839 
pReque°
->
Video
.
bPª„ªdVîsi⁄
 =

840 
pVideoDemoCtx
->
ProbeMax
.
bPª„ªdVîsi⁄
;

841 
pReque°
->
Video
.
bMöVîsi⁄
 = 
pVideoDemoCtx
->
ProbeMax
.bMinVersion;

842 
pReque°
->
Video
.
bMaxVîsi⁄
 = 
pVideoDemoCtx
->
ProbeMax
.bMaxVersion;

845 
USB_bReque°_Video_GET_DEF
:

846 
pReque°
->
Video
.
bmHöt
 = 
pVideoDemoCtx
->
ProbeDef
.bmHint;

847 
pReque°
->
Video
.
bF‹m©Index
 = 
pVideoDemoCtx
->
ProbeDef
.bFormatIndex;

848 
pReque°
->
Video
.
bFømeIndex
 = 
pVideoDemoCtx
->
ProbeDef
.bFrameIndex;

849 
pReque°
->
Video
.
dwFømeI¡îvÆ
 =

850 
pVideoDemoCtx
->
ProbeDef
.
dwFømeI¡îvÆ
;

851 
pReque°
->
Video
.
wKeyFømeR©e
 =

852 
pVideoDemoCtx
->
ProbeDef
.
wKeyFømeR©e
;

853 
pReque°
->
Video
.
wPFømeR©e
 = 
pVideoDemoCtx
->
ProbeDef
.wPFrameRate;

854 
pReque°
->
Video
.
wCompQuÆôy
 = 
pVideoDemoCtx
->
ProbeDef
.wCompQuality;

855 
pReque°
->
Video
.
wCompWödowSize
 =

856 
pVideoDemoCtx
->
ProbeDef
.
wCompWödowSize
;

857 
pReque°
->
Video
.
wDñay
 = 
pVideoDemoCtx
->
ProbeDef
.wDelay;

858 
pReque°
->
Video
.
dwMaxVideoFømeSize
 =

859 
pVideoDemoCtx
->
ProbeDef
.
dwMaxVideoFømeSize
;

860 
pReque°
->
Video
.
dwMaxPaylﬂdTøns„rSize
 =

861 
pVideoDemoCtx
->
ProbeDef
.
dwMaxPaylﬂdTøns„rSize
;

862 
pReque°
->
Video
.
dwClockFªquícy
 =

863 
pVideoDemoCtx
->
ProbeDef
.
dwClockFªquícy
;

864 
pReque°
->
Video
.
bmFømögInfo
 =

865 
pVideoDemoCtx
->
ProbeDef
.
bmFømögInfo
;

866 
pReque°
->
Video
.
bPª„ªdVîsi⁄
 =

867 
pVideoDemoCtx
->
ProbeDef
.
bPª„ªdVîsi⁄
;

868 
pReque°
->
Video
.
bMöVîsi⁄
 = 
pVideoDemoCtx
->
ProbeDef
.bMinVersion;

869 
pReque°
->
Video
.
bMaxVîsi⁄
 = 
pVideoDemoCtx
->
ProbeDef
.bMaxVersion;

873 
pReque°
->
Hdr
.
bAc˚±Reque°
 = 
FALSE
;

878 
USBVIDEO_bC⁄åﬁSñe˘‹_VS_COMMIT_CONTROL
:

879 
pReque°
->
Hdr
.
bReque°
)

881 
USB_bReque°_Video_GET_CUR
:

882 
pReque°
->
Video
.
bmHöt
 =

883 
pVideoDemoCtx
->
CommôCur
.
bmHöt
;

884 
pReque°
->
Video
.
bF‹m©Index
 =

885 
pVideoDemoCtx
->
CommôCur
.
bF‹m©Index
;

886 
pReque°
->
Video
.
bFømeIndex
 =

887 
pVideoDemoCtx
->
CommôCur
.
bFømeIndex
;

888 
pReque°
->
Video
.
dwFømeI¡îvÆ
 =

889 
pVideoDemoCtx
->
CommôCur
.
dwFømeI¡îvÆ
;

890 
pReque°
->
Video
.
wKeyFømeR©e
 =

891 
pVideoDemoCtx
->
CommôCur
.
wKeyFømeR©e
;

892 
pReque°
->
Video
.
wPFømeR©e
 =

893 
pVideoDemoCtx
->
CommôCur
.
wPFømeR©e
;

894 
pReque°
->
Video
.
wCompQuÆôy
 =

895 
pVideoDemoCtx
->
CommôCur
.
wCompQuÆôy
;

896 
pReque°
->
Video
.
wCompWödowSize
 =

897 
pVideoDemoCtx
->
CommôCur
.
wCompWödowSize
;

898 
pReque°
->
Video
.
wDñay
 =

899 
pVideoDemoCtx
->
CommôCur
.
wDñay
;

900 
pReque°
->
Video
.
dwMaxVideoFømeSize
 =

901 
pVideoDemoCtx
->
CommôCur
.
dwMaxVideoFømeSize
;

902 
pReque°
->
Video
.
dwMaxPaylﬂdTøns„rSize
 =

903 
pVideoDemoCtx
->
CommôCur
.
dwMaxPaylﬂdTøns„rSize
;

904 
pReque°
->
Video
.
dwClockFªquícy
 =

905 
pVideoDemoCtx
->
CommôCur
.
dwClockFªquícy
;

906 
pReque°
->
Video
.
bmFømögInfo
 =

907 
pVideoDemoCtx
->
CommôCur
.
bmFømögInfo
;

908 
pReque°
->
Video
.
bPª„ªdVîsi⁄
 =

909 
pVideoDemoCtx
->
CommôCur
.
bPª„ªdVîsi⁄
;

910 
pReque°
->
Video
.
bMöVîsi⁄
 =

911 
pVideoDemoCtx
->
CommôCur
.
bMöVîsi⁄
;

912 
pReque°
->
Video
.
bMaxVîsi⁄
 =

913 
pVideoDemoCtx
->
CommôCur
.
bMaxVîsi⁄
;

915 
USB_bReque°_Video_SET_CUR
:

918 i‡(
pReque°
->
Video
.
bmHöt
 != 0)

919 
pVideoDemoCtx
->
CommôCur
.
bmHöt
 =

920 
pReque°
->
Video
.
bmHöt
;

921 i‡(
pReque°
->
Video
.
bF‹m©Index
 != 0)

922 
pVideoDemoCtx
->
CommôCur
.
bF‹m©Index
 =

923 
pReque°
->
Video
.
bF‹m©Index
;

924 i‡(
pReque°
->
Video
.
bFømeIndex
 != 0)

925 
pVideoDemoCtx
->
CommôCur
.
bFømeIndex
 =

926 
pReque°
->
Video
.
bFømeIndex
;

927 i‡(
pReque°
->
Video
.
dwFømeI¡îvÆ
 != 0)

928 
pVideoDemoCtx
->
CommôCur
.
dwFømeI¡îvÆ
 =

929 
pReque°
->
Video
.
dwFømeI¡îvÆ
;

930 i‡(
pReque°
->
Video
.
wKeyFømeR©e
 != 0)

931 
pVideoDemoCtx
->
CommôCur
.
wKeyFømeR©e
 =

932 
pReque°
->
Video
.
wKeyFømeR©e
;

933 i‡(
pReque°
->
Video
.
wPFømeR©e
 != 0)

934 
pVideoDemoCtx
->
CommôCur
.
wPFømeR©e
 =

935 
pReque°
->
Video
.
wPFømeR©e
;

936 i‡(
pReque°
->
Video
.
wCompQuÆôy
 != 0)

937 
pVideoDemoCtx
->
CommôCur
.
wCompQuÆôy
 =

938 
pReque°
->
Video
.
wCompQuÆôy
;

939 i‡(
pReque°
->
Video
.
wCompWödowSize
 != 0)

940 
pVideoDemoCtx
->
CommôCur
.
wCompWödowSize
 =

941 
pReque°
->
Video
.
wCompWödowSize
;

942 i‡(
pReque°
->
Video
.
wDñay
 != 0)

943 
pVideoDemoCtx
->
CommôCur
.
wDñay
 =

944 
pReque°
->
Video
.
wDñay
;

945 i‡(
pReque°
->
Video
.
dwMaxVideoFømeSize
 != 0)

946 
pVideoDemoCtx
->
CommôCur
.
dwMaxVideoFømeSize
 =

947 
pReque°
->
Video
.
dwMaxVideoFømeSize
;

948 i‡(
pReque°
->
Video
.
dwMaxPaylﬂdTøns„rSize
 != 0)

949 
pVideoDemoCtx
->
CommôCur
.
dwMaxPaylﬂdTøns„rSize
 =

950 
pReque°
->
Video
.
dwMaxPaylﬂdTøns„rSize
;

951 i‡(
pReque°
->
Video
.
dwClockFªquícy
 != 0)

952 
pVideoDemoCtx
->
CommôCur
.
dwClockFªquícy
 =

953 
pReque°
->
Video
.
dwClockFªquícy
;

954 i‡(
pReque°
->
Video
.
bmFømögInfo
 != 0)

955 
pVideoDemoCtx
->
CommôCur
.
bmFømögInfo
 =

956 
pReque°
->
Video
.
bmFømögInfo
;

957 i‡(
pReque°
->
Video
.
bPª„ªdVîsi⁄
 != 0)

958 
pVideoDemoCtx
->
CommôCur
.
bPª„ªdVîsi⁄
 =

959 
pReque°
->
Video
.
bPª„ªdVîsi⁄
;

960 i‡(
pReque°
->
Video
.
bMöVîsi⁄
 != 0)

961 
pVideoDemoCtx
->
CommôCur
.
bMöVîsi⁄
 =

962 
pReque°
->
Video
.
bMöVîsi⁄
;

963 i‡(
pReque°
->
Video
.
bMaxVîsi⁄
 != 0)

964 
pVideoDemoCtx
->
CommôCur
.
bMaxVîsi⁄
 =

965 
pReque°
->
Video
.
bMaxVîsi⁄
;

968 
pReque°
->
Hdr
.
bAc˚±Reque°
 = 
FALSE
;

973 
USBVIDEO_bC⁄åﬁSñe˘‹_VS_STILL_PROBE_CONTROL
:

974 
pReque°
->
Hdr
.
bReque°
)

976 
USB_bReque°_Video_GET_CUR
:

977 
pReque°
->
Stûl
.
bF‹m©Index
 =

978 
pVideoDemoCtx
->
StûlProbeCur
.
bF‹m©Index
;

979 
pReque°
->
Stûl
.
bFømeIndex
 =

980 
pVideoDemoCtx
->
StûlProbeCur
.
bFømeIndex
;

981 
pReque°
->
Stûl
.
bCom¥essi⁄Index
 =

982 
pVideoDemoCtx
->
StûlProbeCur
.
bCom¥essi⁄Index
;

983 
pReque°
->
Stûl
.
dwMaxVideoFømeSize
 =

984 
pVideoDemoCtx
->
StûlProbeCur
.
dwMaxVideoFømeSize
;

985 
pReque°
->
Stûl
.
dwMaxPaylﬂdTøns„rSize
 =

986 
pVideoDemoCtx
->
StûlProbeCur
.
dwMaxPaylﬂdTøns„rSize
;

988 
USB_bReque°_Video_SET_CUR
:

991 i‡(
pReque°
->
Stûl
.
bF‹m©Index
 != 0)

992 
pVideoDemoCtx
->
StûlProbeCur
.
bF‹m©Index
 =

993 
pReque°
->
Stûl
.
bF‹m©Index
;

994 i‡(
pReque°
->
Stûl
.
bFømeIndex
 != 0)

995 
pVideoDemoCtx
->
StûlProbeCur
.
bFømeIndex
 =

996 
pReque°
->
Stûl
.
bFømeIndex
;

997 i‡(
pReque°
->
Stûl
.
bCom¥essi⁄Index
 != 0)

998 
pVideoDemoCtx
->
StûlProbeCur
.
bCom¥essi⁄Index
 =

999 
pReque°
->
Stûl
.
bCom¥essi⁄Index
;

1000 i‡(
pReque°
->
Stûl
.
dwMaxVideoFømeSize
 != 0)

1001 
pVideoDemoCtx
->
StûlProbeCur
.
dwMaxVideoFømeSize
 =

1002 
pReque°
->
Stûl
.
dwMaxVideoFømeSize
;

1003 i‡(
pReque°
->
Stûl
.
dwMaxPaylﬂdTøns„rSize
 != 0)

1004 
pVideoDemoCtx
->
StûlProbeCur
.
dwMaxPaylﬂdTøns„rSize
 =

1005 
pReque°
->
Stûl
.
dwMaxPaylﬂdTøns„rSize
;

1008 
pReque°
->
Hdr
.
bAc˚±Reque°
 = 
FALSE
;

1013 
USBVIDEO_bC⁄åﬁSñe˘‹_VS_STILL_COMMIT_CONTROL
:

1014 
pReque°
->
Hdr
.
bReque°
)

1016 
USB_bReque°_Video_GET_CUR
:

1017 
pReque°
->
Stûl
.
bF‹m©Index
 =

1018 
pVideoDemoCtx
->
StûlCommôCur
.
bF‹m©Index
;

1019 
pReque°
->
Stûl
.
bFømeIndex
 =

1020 
pVideoDemoCtx
->
StûlCommôCur
.
bFømeIndex
;

1021 
pReque°
->
Stûl
.
bCom¥essi⁄Index
 =

1022 
pVideoDemoCtx
->
StûlCommôCur
.
bCom¥essi⁄Index
;

1023 
pReque°
->
Stûl
.
dwMaxVideoFømeSize
 =

1024 
pVideoDemoCtx
->
StûlCommôCur
.
dwMaxVideoFømeSize
;

1025 
pReque°
->
Stûl
.
dwMaxPaylﬂdTøns„rSize
 =

1026 
pVideoDemoCtx
->
StûlCommôCur
.
dwMaxPaylﬂdTøns„rSize
;

1028 
USB_bReque°_Video_SET_CUR
:

1031 i‡(
pReque°
->
Stûl
.
bF‹m©Index
 != 0)

1032 
pVideoDemoCtx
->
StûlCommôCur
.
bF‹m©Index
 =

1033 
pReque°
->
Stûl
.
bF‹m©Index
;

1034 i‡(
pReque°
->
Stûl
.
bFømeIndex
 != 0)

1035 
pVideoDemoCtx
->
StûlCommôCur
.
bFømeIndex
 =

1036 
pReque°
->
Stûl
.
bFømeIndex
;

1037 i‡(
pReque°
->
Stûl
.
bCom¥essi⁄Index
 != 0)

1038 
pVideoDemoCtx
->
StûlCommôCur
.
bCom¥essi⁄Index
 =

1039 
pReque°
->
Stûl
.
bCom¥essi⁄Index
;

1040 i‡(
pReque°
->
Stûl
.
dwMaxVideoFømeSize
 != 0)

1041 
pVideoDemoCtx
->
StûlCommôCur
.
dwMaxVideoFømeSize
 =

1042 
pReque°
->
Stûl
.
dwMaxVideoFømeSize
;

1043 i‡(
pReque°
->
Stûl
.
dwMaxPaylﬂdTøns„rSize
 != 0)

1044 
pVideoDemoCtx
->
StûlCommôCur
.
dwMaxPaylﬂdTøns„rSize
 =

1045 
pReque°
->
Stûl
.
dwMaxPaylﬂdTøns„rSize
;

1048 
pReque°
->
Hdr
.
bAc˚±Reque°
 = 
FALSE
;

1053 
USBVIDEO_bC⁄åﬁSñe˘‹_VS_STILL_IMAGE_TRIGGER_CONTROL
:

1054 
pReque°
->
Hdr
.
bReque°
)

1056 
USB_bReque°_Video_GET_CUR
:

1057 
pReque°
->
StûlImage
.
bTriggî
 =

1058 
pVideoDemoCtx
->
bStûlTriggî
;

1060 
USB_bReque°_Video_SET_CUR
:

1062 i‡(
pReque°
->
StûlImage
.
bTriggî
 != 0)

1063 
pVideoDemoCtx
->
bStûlTriggî
 =

1064 
pReque°
->
StûlImage
.
bTriggî
;

1067 
pReque°
->
Hdr
.
bAc˚±Reque°
 = 
FALSE
;

1073 
pReque°
->
Hdr
.
bAc˚±Reque°
 = 
FALSE
;

1077 
	`VideoClõ¡Lib_SåómReque°Rïly
(

1078 
pVideoDemoCtx
->
pVideo
,

1079 
VideoDemoI_SåómReque°_D⁄e
,

1080 
pVideoDemoCtx
,

1081 
pReque°


1083 
	}
}

1085 
VOID


1086 
	$VideoDemoI_SåómReque°_D⁄e
(

1087 
VOID
 * 
pClõ¡C⁄ãxt
,

1088 
UINT32
 
Eº‹Code


1091 
	`USBPUMP_UNREFERENCED_PARAMETER
(
pClõ¡C⁄ãxt
);

1092 
	`USBPUMP_UNREFERENCED_PARAMETER
(
Eº‹Code
);

1093 
	}
}

	@HowTo/BothLeons/leon/app_config.c

11 
	~<DrvC¥.h
>

12 
	~<DrvShaveL2Cache.h
>

13 
	~"≠p_c⁄fig.h
"

16 
	#L2CACHE_CFG
 (
SHAVE_L2CACHE_NORMAL_MODE
)

	)

29 
	$öôClocksAndMem‹y
()

31 
s32
 
sc
;

33 
tyAuxClkDividîCfg
 
auxClkAŒOn
[] =

35 {
AUX_CLK_MASK_UART
, 
CLK_SRC_REFCLK0
, 96, 625},

39 
tySocClockC⁄fig
 
≠pClockC⁄fig600_266
 =

41 .
ªfClk0I≈utKhz
 = 12000,

42 .
ªfClk1I≈utKhz
 = 0,

43 .
èrgëPŒ0FªqKhz
 = 266000,

44 .
èrgëPŒ1FªqKhz
 = 0,

45 .
˛kSrcPŒ1
 = 
CLK_SRC_REFCLK0
,

46 .
ma°îClkDivNumî©‹
 = 1,

47 .
ma°îClkDivDíomö©‹
 = 1,

48 .
cssDssClockE«bÀMask
 = 
DEFAULT_CORE_CSS_DSS_CLOCKS
,

49 .
mssClockE«bÀMask
 = 
APP_MSS_CLOCKS
,

50 .
u∑ClockE«bÀMask
 = 
DEV_UPA_SHAVE_L2
,

51 .
pAuxClkCfg
 = 
auxClkAŒOn
,

54 
sc
 = 
	`DrvC¥Inô
();

55 if(
sc
)

56  
sc
;

57 
sc
 = 
	`DrvC¥SëupClocks
(&
≠pClockC⁄fig600_266
);

58 if(
sc
)

59  
sc
;

61 
sc
 = 
	`DrvShaveL2CacheSëMode
(
L2CACHE_CFG
);

62 if(
sc
)

63  
sc
;

66 
	`DrvShaveL2CacheSëupP¨tôi⁄
(
SHAVEPART256KB
);

69 
sc
 = 
	`DrvShaveL2CacheAŒoˇãSëP¨tôi⁄s
();

70 if(
sc
)

71  
sc
;

73 
	`DrvShaveL2CacheP¨tôi⁄InvÆid©e
(
PARTITION_0
);

76 
	}
}

	@HowTo/BothLeons/leon/app_config.h

9 #i‚de‡
_APP_CONFIG_H_


10 
	#_APP_CONFIG_H_


	)

15 
	~<mv_ty≥s.h
>

19 
	#APP_MSS_CLOCKS
 (
DEV_MSS_APB_SLV
 | \

20 
DEV_MSS_APB2_CTRL
 | \

21 
DEV_MSS_RTBRIDGE
 | \

22 
DEV_MSS_RTAHB_CTRL
 | \

23 
DEV_MSS_LRT
 | \

24 
DEV_MSS_LRT_DSU
 | \

25 
DEV_MSS_LRT_L2C
 | \

26 
DEV_MSS_LRT_ICB
 | \

27 
DEV_MSS_AXI_BRIDGE
 | \

28 
DEV_MSS_MXI_CTRL
)

	)

31 
	#PARTITION_0
 (0)

	)

41 
öôClocksAndMem‹y
();

	@HowTo/BothLeons/leon/main.c

12 
	~<°dio.h
>

13 
	~<DrvLe⁄.h
>

14 
	~"≠p_c⁄fig.h
"

15 
	~<UnôTe°Api.h
>

22 
u32
 
Ãt_°¨t
;

31 
	$maö
()

33 
s32
 
sc
;

35 
sc
 = 
	`öôClocksAndMem‹y
();

36 if(
sc
)

37  
sc
;

38 
	`unôTe°Inô
 ();

39 
	`¥ötf
("Le⁄RT Sèπ Addr: 0x%lX\n",(
u32
)&
Ãt_°¨t
);

41 
	`¥ötf
("\n\nHello from LeonOS!\n\n\n");

43 
	`DrvLe⁄RTSèπup
((
u32
)&
Ãt_°¨t
);

44 
	`DrvLe⁄RTWaôExecuti⁄
();

45 
	`unôTe°FöÆRï‹t
 ();

47 
	}
}

	@HowTo/BothLeons/leon_rt/rthello.c

12 
	~<°dio.h
>

13 
	~"≠p_c⁄fig.h
"

14 
	~<swcLe⁄Utûs.h
>

15 
	~<DrvLe⁄L2C.h
>

16 
	~<DrvLe⁄.h
>

33 
	$maö
()

36 
	`¥ötf
("\n\nHello from LeonRT!\n\n\n");

37 
	`DrvLe⁄RTSig«lSt›
();

40 
	}
}

	@HowTo/CheckingCycles/leon/app_config.c

11 
	~<OsDrvC¥.h
>

12 
	~<OsDrvShaveL2Cache.h
>

13 
	~"≠p_c⁄fig.h
"

17 
	#L2CACHE_CFG
 (
SHAVE_L2CACHE_NORMAL_MODE
)

	)

30 
	$öôClocksAndMem‹y
()

32 
s32
 
sc
;

34 
tyAuxClkDividîCfg
 
auxClkAŒOn
[] =

36 {
AUX_CLK_MASK_UART
, 
CLK_SRC_REFCLK0
, 96, 625},

41 
sc
 = 
	`OsDrvC¥Inô
();

42 if(
sc
)

43  
sc
;

44 
sc
 = 
	`OsDrvC¥O≥n
();

45 if(
sc
)

46  
sc
;

47 
sc
 = 
	`OsDrvC¥AuxClockAºayC⁄fig
(
auxClkAŒOn
);

48 if(
sc
)

49  
sc
;

52 
sc
 = 
	`OsDrvShaveL2CacheInô
(
L2CACHE_CFG
);

53 if(
sc
)

54  
sc
;

57 
∑πôi⁄_id
;

58 
	`OsDrvShaveL2CGëP¨tôi⁄
(
SHAVEPART256KB
, &
∑πôi⁄_id
);

61 
sc
 = 
	`OsDrvShaveL2CacheAŒoˇãSëP¨tôi⁄s
();

62 if(
sc
)

63  
sc
;

66 
i
 = 0; i < 
SHAVES_USED
; i++)

68 
	`OsDrvShaveL2CSëN⁄WödowedP¨tôi⁄
(
i
, 0, 
NON_WINDOWED_DATA_PARTITION
);

69 
	`OsDrvShaveL2CSëN⁄WödowedP¨tôi⁄
(
i
, 0, 
NON_WINDOWED_INSTRUCTIONS_PARTITION
);

72 
	`OsDrvShaveL2CacheP¨tôi⁄InvÆid©e
(0);

75 
	}
}

	@HowTo/CheckingCycles/leon/app_config.h

9 #i‚de‡
_APP_CONFIG_H_


10 
	#_APP_CONFIG_H_


	)

17 
	#APP_UPA_CLOCKS
 (
DEV_UPA_SH0
 | \

18 
DEV_UPA_SHAVE_L2
 | \

19 
DEV_UPA_CDMA
 | \

20 
DEV_UPA_CTRL
 )

	)

24 
	#SHAVES_USED
 (1)

	)

33 
öôClocksAndMem‹y
();

	@HowTo/CheckingCycles/leon/main.c

10 
	~<°dlib.h
>

11 
	~<°dio.h
>

12 
	~<mv_ty≥s.h
>

13 
	~<OsDrvTimî.h
>

14 
	~<OsDrvSvu.h
>

15 
	~<πems.h
>

16 
	~<πems/b•Io.h
>

17 
	~<DrvC¥.h
>

18 
	~"πems_c⁄fig.h
"

19 
	~<UnôTe°Api.h
>

23 
	#SHAVE_USED
 0

	)

29 
u32
 
checkögCy˛es0_maö
;

30 vﬁ©ûê
checkögCy˛es0_myöt1
[4];

31 vﬁ©ûê
checkögCy˛es0_myöt2
[4];

32 vﬁ©ûê
checkögCy˛es0_myöåez
[4];

36 
osDrvSvuH™dÀr_t
 
	gh™dÀr
;

42 *
	$POSIX_Inô
 (*
¨gs
)

44 
	`UNUSED
(
¨gs
);

46 
tyTimeSèmp
 
timî_d©a
;

47 
u64
 
cy˛es_ñ≠£d
;

48 
u32
 
ru¬ög
;

49 
s32
 
sc
;

51 
sc
 = 
	`öôClocksAndMem‹y
();

52 if(
sc
)

53 
	`exô
(
sc
);

54 
	`unôTe°Inô
 ();

55 
	`¥ötf
("RTEMS Started.\n");

56 
	`¥ötf
("MeasuringÉxecutionÅime...\n");

59 
checkögCy˛es0_myöt1
[0] = 1;

60 
checkögCy˛es0_myöt1
[1] = 2;

61 
checkögCy˛es0_myöt1
[2] = 3;

62 
checkögCy˛es0_myöt1
[3] = 4;

64 
checkögCy˛es0_myöt2
[0] = 4;

65 
checkögCy˛es0_myöt2
[1] = 3;

66 
checkögCy˛es0_myöt2
[2] = 2;

67 
checkögCy˛es0_myöt2
[3] = 1;

71 
sc
 = 
	`OsDrvTimîInô
();

72 if(
sc
)

73 
	`exô
(
sc
);

74 
sc
 = 
	`OsDrvSvuInô
();

75 if(
sc
)

76 
	`exô
(
sc
);

79 
sc
 = 
	`OsDrvSvuO≥nShave
(&
h™dÀr
, 
SHAVE_USED
, 
OS_MYR_PROTECTION_SEM
);

80 i‡(
sc
 =
OS_MYR_DRV_SUCCESS
)

83 
sc
 = 
	`OsDrvTimîSèπTicksCou¡
(&
timî_d©a
);

84 if(
sc
)

85 
	`exô
(
sc
);

86 
sc
 = 
	`OsDrvSvuRe£tShave
(&
h™dÀr
);

87 if(
sc
)

88 
	`exô
(
sc
);

89 
sc
 = 
	`OsDrvSvuSëAbsﬁuãDeÁu…Sèck
(&
h™dÀr
);

90 if(
sc
)

91 
	`exô
(
sc
);

93 
sc
 = 
	`OsDrvSvuSèπShave
(&
h™dÀr
,(
u32
)&
checkögCy˛es0_maö
);

94 if(
sc
)

95 
	`exô
(
sc
);

96 
sc
 = 
	`OsDrvSvuWaôShaves
(1, &
h™dÀr
, 
OS_DRV_SVU_WAIT_FOREVER
, &
ru¬ög
);

97 if(
sc
)

98 
	`exô
(
sc
);

100 
sc
 = 
	`OsDrvTimîGëEœp£dTicks
(&
timî_d©a
, &
cy˛es_ñ≠£d
);

101 if(
sc
)

102 
	`exô
(
sc
);

103 
sc
 = 
	`OsDrvSvuClo£Shave
(&
h™dÀr
);

104 if(
sc
)

105 
	`exô
(
sc
);

108 
	`¥ötf
("[T2] c™nŸ o≥¿shavê%d\n", 
SHAVE_USED
);

109 
	`exô
(
sc
);

113 
	`¥ötf
("\nLe⁄ Cy˛e†Eœp£d %lu \n", (
u32
)(
cy˛es_ñ≠£d
));

114 
	`unôTe°FöÆRï‹t
 ();

116 
	`exô
(0);

117 
	}
}

	@HowTo/CheckingCycles/leon/rtems_config.h

9 #i‚de‡
_RTEMS_CONFIG_H_


10 
	#_RTEMS_CONFIG_H_


	)

14 
	~"≠p_c⁄fig.h
"

15 
	~"ÁèlExãnsi⁄.h
"

20 #i‡
deföed
(
__RTEMS__
)

22 #i‡!
deföed
 (
__CONFIG__
)

23 
	#__CONFIG__


	)

26 
	#CONFIGURE_INIT


	)

28 #i‚de‡
RTEMS_POSIX_API


29 
	#RTEMS_POSIX_API


	)

32 
	#CONFIGURE_MICROSECONDS_PER_TICK
 1000

	)

34 
	#CONFIGURE_TICKS_PER_TIMESLICE
 10

	)

36 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

38 
	#CONFIGURE_APPLICATION_NEEDS_CLOCK_DRIVER


	)

40 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

42 
	#CONFIGURE_MINIMUM_TASK_STACK_SIZE
 4096

	)

44 
	#CONFIGURE_MAXIMUM_TASKS
 4

	)

46 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 4

	)

48 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 8

	)

50 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 8

	)

52 
	#CONFIGURE_MAXIMUM_POSIX_SEMAPHORES
 8

	)

54 
	#CONFIGURE_MAXIMUM_POSIX_MESSAGE_QUEUES
 8

	)

56 
	#CONFIGURE_MAXIMUM_POSIX_TIMERS
 4

	)

58 
	#CONFIGURE_MAXIMUM_TIMERS
 4

	)

60 
	#CONFIGURE_MAXIMUM_SEMAPHORES
 2

	)

63 
	#CONFIGURE_MAXIMUM_USER_EXTENSIONS
 1

	)

64 
	#CONFIGURE_INITIAL_EXTENSIONS
 { .
Áèl
 = 
F©Æ_exãnsi⁄
 }

	)

71 *
POSIX_Inô
 (*
¨gs
);

73 
	~<πems/c⁄fdefs.h
>

81 
BSP_SET_CLOCK
(12000, 266000, 1, 1, 
DEFAULT_RTEMS_CSS_LOS_CLOCKS
, 
DEFAULT_RTEMS_MSS_LRT_CLOCKS
, 
APP_UPA_CLOCKS
, 0, 0);

84 
BSP_SET_L2C_CONFIG
(0, 
L2C_REPL_LRU
, 0, 
L2C_MODE_COPY_BACK
, 0, 
NULL
);

	@HowTo/CheckingCycles/shave/init.c

9 
	~<°dio.h
>

10 
	~<m©h.h
>

11 
	~<°dlib.h
>

12 
	~<moviVe˘‹Utûs.h
>

13 
	~<svuComm⁄Shave.h
>

15 
öt4
 
add_simd
(öt4 
öput1
, i¡4 
öput2
);

16 vﬁ©ûê
	gmyöt1
[4], 
	gmyöt2
[4], 
	gmyöåez
[4];

17 
öt4
 
	gmyvÆ1
, 
	gmyvÆ2
, 
	gmyªz
;

19 
	$maö
( )

21 
myvÆ1
[0] = 
myöt1
[0];

22 
myvÆ1
[1] = 
myöt1
[1];

23 
myvÆ1
[2] = 
myöt1
[2];

24 
myvÆ1
[3] = 
myöt1
[3];

26 
myvÆ2
[0] = 
myöt2
[0];

27 
myvÆ2
[1] = 
myöt2
[1];

28 
myvÆ2
[2] = 
myöt2
[2];

29 
myvÆ2
[3] = 
myöt2
[3];

31 
myªz
 = 
	`add_simd
(
myvÆ1
, 
myvÆ2
);

33 
myöåez
[0] = 
myªz
[0];

34 
myöåez
[1] = 
myªz
[1];

35 
myöåez
[2] = 
myªz
[2];

36 
myöåez
[3] = 
myªz
[3];

38 
SHAVE_HALT
;

40 
	}
}

	@HowTo/Cholesky/leon/app_config.c

1 
	~<ªgi°îsMyrüd.h
>

2 
	~<DrvC¥.h
>

3 
	~<DrvDdr.h
>

4 
	~<DrvLe⁄L2C.h
>

5 
	~<DrvShaveL2Cache.h
>

7 
	~"≠p_c⁄fig.h
"

10 
LL2CC⁄fig_t
 
	glosCacheC⁄fig
 = {

11 .
LL2CE«bÀ
 = 1,

12 .
	gwrôePﬁicy
 = 
WRITE_THROUGH


17 c⁄° 
tyAuxClkDividîCfg


18 
	gauxClkCfg
[] = {

19 { 
AUX_CLK_MASK_UART
, 
CLK_SRC_REFCLK0
, 0, 0 },

22 c⁄° 
tySocClockC⁄fig


23 
	g˛kCfg
 = {

24 .
ªfClk0I≈utKhz
 = 12000,

25 .
	gèrgëPŒ0FªqKhz
 = 600000,

26 .
	g˛kSrcPŒ1
 = 
CLK_SRC_REFCLK0
,

27 .
	gcssDssClockE«bÀMask
 = 
DEFAULT_CORE_CSS_DSS_CLOCKS
,

28 .
	gpAuxClkCfg
 = 
auxClkCfg


31 
	$öôClocksAndMem‹y
()

34 
	`DrvC¥Inô
();

36 
	`DrvC¥SëupClocks
–&
˛kCfg
 );

39 
	`DrvC¥SysDevi˚A˘i⁄
–
MSS_DOMAIN
, 
SET_CLKS
, 
APP_MSS_CLOCKS
 );

40 
	`DrvC¥SysDevi˚A˘i⁄
–
MSS_DOMAIN
, 
DISABLE_CLKS
, ~
APP_MSS_CLOCKS
 );

41 
	`DrvC¥SysDevi˚A˘i⁄
–
MSS_DOMAIN
, 
DEASSERT_RESET
, 
APP_MSS_CLOCKS
 );

42 
	`DrvC¥SysDevi˚A˘i⁄
–
UPA_DOMAIN
, 
SET_CLKS
, 
APP_UPA_CLOCKS
 );

43 
	`DrvC¥SysDevi˚A˘i⁄
–
UPA_DOMAIN
, 
DISABLE_CLKS
, ~
APP_UPA_CLOCKS
 );

44 
	`DrvC¥SysDevi˚A˘i⁄
–
UPA_DOMAIN
, 
DEASSERT_RESET
, 
APP_UPA_CLOCKS
 );

47 
	`DrvLL2CInôülize
–&
losCacheC⁄fig
 );

50 
	`DrvShaveL2CacheSëMode
–
L2CACHE_CFG
 );

51 
	`DrvShaveL2CacheSëupP¨tôi⁄
–
SHAVEPART256KB
 );

52 
	`DrvShaveL2CacheAŒoˇãSëP¨tôi⁄s
();

53 
	`DrvShaveL2CacheSëLSUP¨tId
( 0, 0 );

56 
	}
}

	@HowTo/Cholesky/leon/app_config.h

1 #i‚de‡
_APP_CONFIG_H_


2 
	#_APP_CONFIG_H_


	)

4 
	~<mv_ty≥s.h
>

10 
	#L2CACHE_CFG
 (
SHAVE_L2CACHE_NORMAL_MODE
)

	)

13 
	#APP_MSS_CLOCKS
 \

14 (
DEV_MSS_APB_SLV
 | 
DEV_MSS_APB2_CTRL
 | 
DEV_MSS_RTBRIDGE
 | \

15 
DEV_MSS_RTAHB_CTRL
 | 
DEV_MSS_AXI_BRIDGE
 | 
DEV_MSS_MXI_CTRL
 | \

16 
DEV_MSS_MXI_DEFSLV
 | 
DEV_MSS_AXI_MON
 )

	)

17 
	#APP_MSS_LRT_CLOCKS
 \

18 (
DEV_MSS_LRT
 | 
DEV_MSS_LRT_DSU
 )

	)

21 
	#APP_UPA_CLOCKS
 \

22 (
DEV_UPA_SH0
 | 
DEV_UPA_CTRL
 | 
DEV_UPA_SHAVE_L2
)

	)

25 
	#APP_AUX_CLOCKS
 \

26 (
AUX_CLK_MASK_GPIO
 | 
AUX_CLK_MASK_UART
 | 
AUX_CLK_MASK_DDR_REF
 | \

27 
AUX_CLK_MASK_MEDIA
 | 
AUX_CLK_MASK_DDR_CORE_CTRL
 | 
AUX_CLK_MASK_DDR_CORE_PHY
 | \

28 
AUX_CLK_MASK_CPR
 )

	)

32 
öôClocksAndMem‹y
();

	@HowTo/Cholesky/leon/main.c

1 
	~<°dio.h
>

2 
	~<°rög.h
>

3 
	~<DrvLe⁄L2C.h
>

5 
	~<DrvLe⁄L2C.h
>

6 
	~<DrvSvu.h
>

7 
	~<DrvTimî.h
>

9 
	~"≠p_c⁄fig.h
"

12 
	#N
 100

	)

15 
u8
 
__noöô_íd
[];

16 
u8
 
_LEON_STACK_POINTER
[];

19 
__©åibuã__
((
£˘i⁄
(".noöô"),
	$Æig√d
(16))Ë
A
[
N
][N];

20 
	`__©åibuã__
((
	`£˘i⁄
(".noöô"),
	$Æig√d
(16))Ë
b
[
N
];

21 
	`__©åibuã__
((
	`£˘i⁄
(".noöô"),
	$Æig√d
(16))Ë
x
[
N
];

23 
	`__©åibuã__
((
	`£˘i⁄
(".noöô"),
	$Æig√d
(16))Ë
tmp4cﬁs
[
N
][4];

26 
	`__©åibuã__
((
	`£˘i⁄
(".ddr.bss"),
	$Æig√d
(16))Ë
bak_M
[
N
][N];

27 
	`__©åibuã__
((
	`£˘i⁄
(".ddr.bss"),
	$Æig√d
(16))Ë
bak_c
[
N
];

28 
	`__©åibuã__
((
	`£˘i⁄
(".ddr.bss"),
	$Æig√d
(16))Ë
bak_y
[
N
];

31 
	`__©åibuã__
((
	`£˘i⁄
(".ddr.d©a"))Ë
_f‹˚_ddr_öô
 = 1;

34 
sys˛k_khz
;

35 
tyTimeSèmp
 
t
[5];

36 c⁄° *
‚s
[5];

38 
	#övd_ˇche
() \

39 { 
	`DrvLL2CFlushOpOnAŒLöes
(
LL2C_OPERATION_INVALIDATE
,0); 
asm
 vﬁ©ûe–"Êush" ); 
	}

	)
}

41 
do_gemvl_t
();

42 
do_syrk_ä_l
();

43 
do_pŸrf_ 
();

44 
do_åsvl_ 
();

45 
do_åsvl_…
();

47 
	$maö
()

49 
	`öôClocksAndMem‹y
();

52 
_f‹˚_ddr_öô
 = 2;

55 
sys˛k_khz
 = 
	`DrvC¥GëClockFªqKhz
–
SYS_CLK
, 0 );

56 
	`¥ötf
( "SystemÑunningát %u.%02uMHz\n"

63 
sys˛k_khz
/1000, (sysclk_khz%1000+5)/10,

64 (()&
maö
 - 0x70000000)>>17, ()
_LEON_STACK_POINTER
 - ()
__noöô_íd
, _LEON_STACK_POINTER,

65 
N
, N, 
A
, (*)–(
u32
)A + N*N*() - 1 ),

66 
N
, 
b
, (*)–(
u32
)b + N*() - 1 ),

67 
N
, 
x
, (*)–(
u32
)x + N*() - 1 ),

68 
N
, 
tmp4cﬁs
, (*)–(
u32
)tmp4cols + N*() - 1 )

72 
	`mem£t
–
x
, -1, (x) );

74 
	`swcRe£tShave
( 0 );

75 
	`swcSëAbsﬁuãDeÁu…Sèck
( 0 );

77 
	`¥ötf
( "Runningá fullÜineq sequence...\n" );

80 
	`do_gemvl_t
();

81 
	`övd_ˇche
();

82 
	`do_syrk_ä_l
();

83 
	`övd_ˇche
();

85 
	`mem˝y
–
bak_M
, 
A
, (A) );

86 
	`mem˝y
–
bak_c
, 
x
, (x) );

89 
	`do_pŸrf_ 
();

90 
	`övd_ˇche
();

93 
	`do_åsvl_ 
();

94 
	`övd_ˇche
();

96 
	`mem˝y
–
bak_y
, 
x
, (x) );

99 
	`do_åsvl_…
();

100 
	`övd_ˇche
();

102 
	`¥ötf
( "All done.\n" );

104 
	`¥ötf
( "\nComputationÅook:\n" );

105 
i
;

106 
tyTimeSèmp
 
t_Æl
 = 0;

107  
i
 = 0; i < (
‚s
)/(fns[0]); ++i ) {

108 
t_Æl
 +
t
[
i
];

109 
	`¥ötf
–" - %-14s: ", 
‚s
[
i
] );

110 
t_100us
 = (
u32
)–
t
[
i
] /–
sys˛k_khz
 / 10 ));

111 
	`¥ötf
–"%5u.%um†", 
t_100us
/10,Å_100us%10 );

112 
	`¥ötf
–"(%11Œucy˛es)\n", 
t
[
i
] );

114 
	`¥ötf
( "Total: " );

115 
t_100us
 = ()–
t_Æl
 /–
sys˛k_khz
 / 10 ));

116 
	`¥ötf
–"%u.%um†", 
t_100us
/10,Å_100us%10 );

117 
	`¥ötf
–"(%Œucy˛es)\n", 
t_Æl
 );

119 
	`¥ötf
( "All done.\n" );

121 
	}
}

125 
__©åibuã__
((
n‹ëu∫
)Ë
_exô
();

126 
u8
 
Chﬁesky0__exô
[];

129 
u8
 
Chﬁesky0_gemvl_t
[];

131 
	$do_gemvl_t
()

133 c⁄° *
p
 = 
Chﬁesky0_gemvl_t
;

135 
	`¥ötf
( ". gemvl_t( x @%p, A @%p, b @%p, %d, 0x%X )\n",

136 
x
, 
A
, 
b
, 
N
, N*() );

137 
	`swcRe£tShave
( 0 );

138 
	`swcSëAbsﬁuãDeÁu…Sèck
( 0 );

140 
	`DrvSvutIrfWrôe
–0, 30, (
u32
)
Chﬁesky0__exô
 );

141 
	`DrvTimîSèπTicksCou¡
–&
t
[0] );

143 
	`swcSèπShaveCC
–0, (
u32
)
p
, "iiiii", 
x
, 
A
, 
b
, 
N
, N*() );

144 
	`swcWaôShave
( 0 );

145 
	`DrvTimîGëEœp£dTicks
–&
t
[0], &t[0] );

146 
	}
}

149 
u8
 
Chﬁesky0_syrk_ä_l
[];

151 
	$do_syrk_ä_l
()

153 c⁄° *
p
 = 
Chﬁesky0_syrk_ä_l
;

156 
	`¥ötf
( ". syrk_tn_l( A @%p,Åmp @%p, %d, 0x%X )\n",

157 
A
, 
tmp4cﬁs
, 
N
, N*() );

159 
	`DrvSvutIrfWrôe
–0, 30, (
u32
)
Chﬁesky0__exô
 );

160 
	`DrvTimîSèπTicksCou¡
–&
t
[1] );

162 
	`swcSèπShaveCC
–0, (
u32
)
p
, "iiii", 
A
, 
tmp4cﬁs
, 
N
, N*());

163 
	`swcWaôShave
( 0 );

164 
	`DrvTimîGëEœp£dTicks
–&
t
[1], &t[1] );

165 
	}
}

168 
u8
 
Chﬁesky0_pŸrf_ 
[];

170 
	$do_pŸrf_ 
() {

172 c⁄° *
p
 = 
Chﬁesky0_pŸrf_ 
;

175 
	`¥ötf
( ".Öotrf_ln( A @%p, %d, 0x%X );\n",

176 
A
, 
N
, N*() );

178 
	`DrvSvutIrfWrôe
–0, 30, (
u32
)
Chﬁesky0__exô
 );

179 
	`DrvTimîSèπTicksCou¡
–&
t
[2] );

181 
	`swcSèπShaveCC
–0, (
u32
)
p
, "iii", 
A
, 
N
, N*() );

182 
	`swcWaôShave
( 0 );

183 
	`DrvTimîGëEœp£dTicks
–&
t
[2], &t[2] );

184 
	}
}

187 
u8
 
Chﬁesky0_åsvl_ 
[];

189 
	$do_åsvl_ 
() {

190 c⁄° *
p
 = 
Chﬁesky0_åsvl_ 
;

192 
	`¥ötf
( ".Årsvl_ln( x @%p, A @%p, x @%p, %d, 0x%X )\n",

193 
x
, 
A
, x, 
N
, N*() );

195 
	`DrvSvutIrfWrôe
–0, 30, (
u32
)
Chﬁesky0__exô
 );

196 
	`DrvTimîSèπTicksCou¡
–&
t
[3] );

198 
	`swcSèπShaveCC
–0, (
u32
)
p
, "iiiii", 
x
, 
A
, x, 
N
, N*() );

199 
	`swcWaôShave
( 0 );

200 
	`DrvTimîGëEœp£dTicks
–&
t
[3], &t[3] );

201 
	}
}

204 
u8
 
Chﬁesky0_åsvl_…
[];

206 
	$do_åsvl_…
() {

208 c⁄° *
p
 = 
Chﬁesky0_åsvl_…
;

210 
	`¥ötf
( ".Årsvl_lt( x @%p, A @%p, x @%p, %d, 0x%X )\n",

211 
x
, 
A
, x, 
N
, N*() );

213 
	`DrvSvutIrfWrôe
–0, 30, (
u32
)
Chﬁesky0__exô
 );

214 
	`DrvTimîSèπTicksCou¡
–&
t
[4] );

216 
	`swcSèπShaveCC
–0, (
u32
)
p
, "iiiii", 
x
, 
A
, x, 
N
, N*() );

217 
	`swcWaôShave
( 0 );

218 
	`DrvTimîGëEœp£dTicks
–&
t
[4], &t[4] );

219 
	}
}

221 c⁄° *
	g‚s
[] = {"gemvl_t@opt","syrk_tn_l@opt","potrf_ln@opt","trsvl_ln@opt","trsvl_lt@opt"};

	@HowTo/Cholesky/tools/lib/core.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<m©h.h
>

4 
	~<°rög.h
>

5 
	~"sﬁvî.h
"

9 
	$syrk_ä_l
–*
T_
, c⁄° *
A_
, 
n
 )

11 
	#T
(
i
,
j
Ë
T_
[(i)*
n
+(j)]

	)

12 
	#A
(
i
,
j
Ë
A_
[(i)*
n
+(j)]

	)

13 
i
;

14  
i
 = 0; i < 
n
; ++i ) {

15 
j
;

16  
j
 = 0; j <=
i
; ++j ) {

17 
s
 = 0;

18 
k
;

19  
k
 = 0; k < 
n
; ++k ) {

20 
s
 +
	`A
(
k
,
i
Ë* A(k,
j
);

21 ++
n_add
; ++
n_mul
;

23 
	`T
(
i
,
j
Ë
s
;

26 #unde‡
A


27 #unde‡
T


28 
	}
}

32 
	$gemv_n
–*
c
, c⁄° *
A_
, c⁄° *
b
, 
n
 )

34 
	#A
(
i
,
j
Ë
A_
[(i)*
n
+(j)]

	)

35 
i
;

36  
i
 = 0; i < 
n
; ++i ) {

37 
s
 = 0;

38 
j
;

39  
j
 = 0; j < 
n
; ++j ) {

40 
s
 +
	`A
(
i
,
j
Ë* 
b
[j];

41 ++
n_add
; ++
n_mul
;

43 
c
[
i
] = 
s
;

45 #unde‡
A


46 
	}
}

50 
	$gemv_t
–*
c
, c⁄° *
A_
, c⁄° *
b
, 
n
 )

52 
	#A
(
i
,
j
Ë
A_
[(i)*
n
+(j)]

	)

53 
i
;

54  
i
 = 0; i < 
n
; ++i ) {

55 
s
 = 0;

56 
j
;

57  
j
 = 0; j < 
n
; ++j ) {

58 
s
 +
	`A
(
j
,
i
Ë* 
b
[j];

59 ++
n_add
; ++
n_mul
;

61 
c
[
i
] = 
s
;

63 #unde‡
A


64 
	}
}

68 
	$pŸrf_ 
–*
L_
, c⁄° *
A_
, 
n
 )

70 
	#A
(
i
,
j
Ë
A_
[(i)*
n
+(j)]

	)

71 
	#L
(
i
,
j
Ë
L_
[(i)*
n
+(j)]

	)

72 
i
;

74  
i
 = 0; i < 
n
; ++i ) {

75 
j
;

76  
j
 = 0; j < 
i
; ++j ) {

77 
s
 = 
	`A
(
i
,
j
);

78 
k
;

79  
k
 = 0; k < 
j
; ++k ) {

80 
s
 -
	`L
(
i
,
k
Ë* L(
j
,k);

81 ++
n_add
; ++
n_mul
;

83 
	`L
(
i
,
j
Ë
s
 / L(j,j);

84 ++
n_div
;

86 
s
 = 
	`A
(
i
,i);

87  
j
 = 0; j < 
i
; ++j ) {

88 
s
 -
	`L
(
i
,
j
) * L(i,j);

89 ++
n_add
; ++
n_mul
;

91 
	`L
(
i
,iË
	`sqπf
–
s
 );

92 ++
n_sqπ
;

94 #unde‡
A


95 #unde‡
L


96 
	}
}

101 
	$åsv_ 
–*
x
, c⁄° *
L_
, c⁄° *
b
, 
n
 )

103 
	#L
(
i
,
j
Ë
L_
[(i)*
n
+(j)]

	)

104 
i
;

105  
i
 = 0; i < 
n
; ++i ) {

106 
s
 = 
b
[
i
];

107 
j
;

108  
j
 = 0; j < 
i
; ++j ) {

109 
s
 -
	`L
(
i
,
j
Ë* 
x
[j];

110 ++
n_add
; ++
n_mul
;

112 
x
[
i
] = 
s
 / 
	`L
(i,i);

113 ++
n_div
;

115 #unde‡
L


116 
	}
}

121 
	$åsv_…
–*
x
, c⁄° *
L_
, c⁄° *
b
, 
n
 )

123 
	#U
(
i
,
j
Ë
L_
[(j)*
n
+(i)]

	)

124 
i
;

125  
i
 = 
n
-1; i >= 0; --i ) {

126 
s
 = 
b
[
i
];

127 
j
;

128  
j
 = 
n
-1; j > 
i
; --j ) {

129 
s
 -
	`U
(
i
,
j
Ë* 
x
[j];

130 ++
n_add
; ++
n_mul
;

132 
x
[
i
] = 
s
 / 
	`U
(i,i);

133 ++
n_div
;

135 #unde‡
U


136 
	}
}

140 
row_add
–*
d
, *
s
, 
n
 );

141 
row_mul_add
–*
d
, *
s
, 
k
, 
n
 );

142 
row_sˇÀ
–*
d
, 
k
, 
n
 );

144 
	$gauss
–*
B_
, c⁄° *
A_
, 
n
 )

146 
	#B
(
i
,
j
Ë
B_
[(i)*
n
+(j)]

	)

148 *
myA
 = (*)
	`mÆloc
–
n
*n*() );

149 if–!
myA
 )

151 
	`mem˝y
–
myA
, 
A_
, 
n
*n*() );

152 
	#A
(
i
,
j
Ë
myA
[(i)*
n
+(j)]

	)

154 
	`mem£t
–
B_
, 0, 
n
*n*() );

155 
i
;

156  
i
 = 0; i < 
n
; ++i )

157 
	`B
(
i
,i) = 1.0f;

159  
i
 = 0; i < 
n
; ++i ) {

161 if–
	`Ábsf
–
	`A
(
i
,i) )<= 1e-6 ) {

163 
j
;

164  
j
 = 0; j < 
n
; ++j ) {

165 if–
i
 =
j
 )

167 ++
n_sˇn
;

168 if–
	`Ábsf
–
	`A
(
j
,
i
) )> 1e-6 ) {

169 
	`row_add
–&
	`A
(
i
,0), &A(
j
,0), 
n
 );

170 
	`row_add
–&
	`B
(
i
,0), &B(
j
,0), 
n
 );

176 
k
 = 1.0‡/ 
	`A
(
i
,i);

177 ++
n_div
;

178 
	`row_sˇÀ
–&
	`A
(
i
,0), 
k
, 
n
 );

179 
	`row_sˇÀ
–&
	`B
(
i
,0), 
k
, 
n
 );

181 
j
;

182  
j
 = 0; j < 
n
; ++j ) {

183 if–
i
 =
j
 )

185 
k
 = -
	`A
(
j
,
i
);

186 ++
n_add
;

187 
	`row_mul_add
–&
	`A
(
j
,0), &A(
i
,0), 
k
, 
n
 );

188 
	`row_mul_add
–&
	`B
(
j
,0), &B(
i
,0), 
k
, 
n
 );

191 #unde‡
A


192 #unde‡
B


193 
	}
}

195 
	$row_add
–*
d
, *
s
, 
n
 )

197 
i
;

198  
i
 = 0; i < 
n
; ++i ) {

199 *
d
++ +*
s
++;

200 ++
n_add
;

202 
	}
}

204 
	$row_mul_add
–*
d
, *
s
, 
k
, 
n
 )

206 
i
;

207  
i
 = 0; i < 
n
; ++i ) {

208 *
d
++ +
k
 * *
s
++;

209 ++
n_add
; ++
n_mul
;

211 
	}
}

213 
	$row_sˇÀ
–*
sd
, 
k
, 
n
 )

215 
i
;

216  
i
 = 0; i < 
n
; ++i ) {

217 *
sd
++ *
k
;

218 ++
n_mul
;

220 
	}
}

	@HowTo/Cholesky/tools/lib/helpers.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<m©h.h
>

4 
	~"sﬁvî.h
"

6 
	gn_add
, 
	gn_mul
, 
	gn_div
, 
	gn_sqπ
;

9 
	gn_sˇn
;

11 
	$ª£t_°©s
()

13 
n_add
 = 
n_mul
 = 
n_div
 = 
n_sqπ
 = 0;

14 
n_sˇn
 = 0;

15 
	}
}

20 
	$gíf
–*
A
, 
n
, 
mö
, 
max
 )

22 
i
, 
j
;

23  
i
 = 0; i < 
n
; ++i )

24 *
A
++ = 
mö
 +(–1.0‡/–1.0‡+ ()
RAND_MAX
 )* 
	`ønd
(Ë))*–
max
 - min );

25 
	}
}

29 
Æld©a
;

30 
	$¥ötm
–c⁄° *
hdr
, c⁄° *
A
, 
n
 )

32 
symmëric
 = 
	`issymm
–
A
, 
n
 );

33 
åünguœr
 = 
	`i¶tm
–
A
, 
n
 );

34 
	`¥ötf
–"%†%s%s{\n", 
hdr
, 
symmëric
?"#SYM ":"", 
åünguœr
?"#LT ":"" );

35 
i
;

36  
i
 = 0; i < 
n
; ++i ) {

37 
	`¥ötf
( " {" );

38 
j
;

39  
j
 = 0; j < 
n
; ++j ) {

40 
t
 = 
A
[
i
*
n
+
j
];

41 if–
åünguœr
 &&–
j
 > 
i
 ))

42 
	`¥ötf
( " - " );

43 if–
symmëric
 &&–
j
 > 
i
 ))

44 
	`¥ötf
( " s " );

45 if–
	`i¢™
(
t
) )

46 
	`¥ötf
( " NaN " );

47 if–
	`isöf
(
t
) &&(Å > 0 ))

48 
	`¥ötf
( " Inf " );

49 if–
	`isöf
(
t
) )

50 
	`¥ötf
( " -Inf " );

52 
	`¥ötf
–"% 10.3f", 
t
 );

53 if–!
Æld©a
 && 
j
 =15 && 
n
 > 16 ) {

54 
	`¥ötf
( " ..." );

58 
	`¥ötf
( " }\n" );

59 if–!
Æld©a
 && 
i
 =15 && 
n
 > 16 ) {

60 
	`¥ötf
( " ...\n" );

64 
	`¥ötf
( "}\n" );

65 
	}
}

69 
	$issymm
–c⁄° *
A
, 
n
 )

71 
i
, 
j
;

72  
i
 = 1; i < 
n
; ++i )

73  
j
 = 0; j < 
i
; ++j )

74 if–
A
[
i
*
n
+
j
] != A[j*n+i] )

77 
	}
}

81 
	$i¶tm
–c⁄° *
A
, 
n
 )

83 
i
, 
j
;

84  
i
 = 0; i < 
n
; ++i )

85  
j
 = 
i
+1; j < 
n
; ++j )

86 if–
A
[
i
*
n
+
j
] )

89 
	}
}

93 
	$¥ötv
–c⁄° *
hdr
, c⁄° *
x
, 
n
 )

95 
i
;

96 
	`¥ötf
–"%†\n", 
hdr
 );

97 
	`¥ötf
( " {" );

98  
i
 = 0; i < 
n
; ++i ) {

99 
t
 = *
x
++;

100 if–
	`i¢™
(
t
) )

101 
	`¥ötf
( " NaN " );

102 if–
	`isöf
(
t
) )

103 
	`¥ötf
–" %sIn‡ ", (
t
>0)?" ":"-" );

105 
	`¥ötf
–"% 10.3f", 
t
 );

106 if–!
Æld©a
 && 
i
 =15 && 
n
 > 16 ) {

107 
	`¥ötf
( " ..." );

111 
	`¥ötf
( " }\n" );

112 
	}
}

116 
	g‚ame
[256];

117 
	$ßvev
–c⁄° *
a
, 
n
, c⁄° *
«me
 )

119 
	`¢¥ötf
–
‚ame
, (‚ame), "%s_%u.f32", 
«me
, 
n
 );

120 
FILE
 *
f
;

121 if–!–
f
 = 
	`f›í
–
‚ame
, "wb" )))

123 
	`fwrôe
–
a
, 1, 
n
*(), 
f
 );

124 
	`f˛o£
–
f
 );

125 
	}
}

129 
	$ßvem
–c⁄° *
a
, 
n
, c⁄° *
«me
 )

131 
	`¢¥ötf
–
‚ame
, (‚ame), "%s_%ux%u.f32", 
«me
, 
n
,Ç );

132 
FILE
 *
f
;

133 if–!–
f
 = 
	`f›í
–
‚ame
, "wb" )))

135 
	`fwrôe
–
a
, 1, 
n
*n*(), 
f
 );

136 
	`f˛o£
–
f
 );

137 
	}
}

141 
	$n‹m
–c⁄° *
a
, c⁄° *
b
, 
n
 )

143 
e
 = 0.0;

144 
i
;

145  
i
 = 0; i < 
n
; ++i )

146 
e
 +=–
a
[
i
] - 
b
[i] )*(á[i] - b[i] );

147  
	`sqπ
–
e
 )/ 
n
;

148 
	}
}

	@HowTo/Cholesky/tools/lib/solver.h

1 #i‚de‡
SOLVER_H_INCLUDED


2 
	#SOLVER_H_INCLUDED


	)

6 
	gn_add
, 
	gn_mul
, 
	gn_div
, 
	gn_sqπ
;

7 
	gn_sˇn
;

12 
syrk_ä_l
–*
T_
, c⁄° *
A_
, 
n
 );

15 
gemv_t
–*
c
, c⁄° *
A_
, c⁄° *
b
, 
n
 );

18 
pŸrf_ 
–*
L_
, c⁄° *
A_
, 
n
 );

21 
åsv_ 
–*
y
, c⁄° *
L_
, c⁄° *
b
, 
n
 );

24 
åsv_…
–*
x
, c⁄° *
U_
, c⁄° *
y
, 
n
 );

27 
gauss
–*
B_
, c⁄° *
A_
, 
n
 );

32 
gemv
–*
x
, c⁄° *
A
, c⁄° *
b
, 
n
 );

35 
n‹m
–c⁄° *
a
, c⁄° *
b
, 
n
 );

40 
gíf
–*, , 
mö
, 
max
 );

43 
gemv_n
–*
c
, c⁄° *
A
, c⁄° *
b
, 
n
 );

46 
issymm
( const *, );

47 
i¶tm
( const *, );

50 
¥ötv
( const *, const *, );

52 
¥ötm
( const *, const *, );

55 
ßvev
( const *, , const * );

57 
ßvem
( const *, , const * );

	@HowTo/Cholesky/tools/matdiff.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

4 
	~<m©h.h
>

6 
hñp
( const * );

7 
¥ötsqm
–c⁄° *
a
, 
n
 );

8 
¥ötv
–c⁄° *
a
, 
n
 );

10 
	$maö
–
¨gc
, **
¨gv
 )

12 c⁄° *
whﬂmi
, *
z
;

13 c⁄° *
‚1
 = 0, *
‚2
 = 0;

14 
…
 = 0, 
ut
 = 0, 
vec
 = 0;

15 
vîbo£
 = 0, 
™y«me
 = 0;

16 
FILE
 *
f1
, *
f2
;

17 
i
;

19 
whﬂmi
 = 
¨gv
[0];

20 if(–
z
 = 
	`°ºchr
–
whﬂmi
, '/' )))

21 
whﬂmi
 = 
z
 = z+1;

22 if(–
z
 = 
	`°ºchr
–
whﬂmi
, '\\' )))

23 
whﬂmi
 = 
z
 = z+1;

24 if(–
z
 = 
	`°r°r
–
whﬂmi
, ".exe" )))

25 *(*)
z
 = 0;

28  
i
 = 1; i < 
¨gc
; ++i ) {

29 if–!
™y«me
 && !
	`°rˇ£cmp
–
¨gv
[
i
], "-lt" ))

30 
…
 = 1;

31 if–!
™y«me
 && !
	`°rˇ£cmp
–
¨gv
[
i
], "-ut" ))

32 
ut
 = 1;

33 if–!
™y«me
 && !
	`°rˇ£cmp
–
¨gv
[
i
], "-vec" ))

34 
vec
 = 1;

35 if–!
™y«me
 && !
	`°rˇ£cmp
–
¨gv
[
i
], "-v" ))

36 
vîbo£
 = 1;

37 if–!
™y«me
 && !
	`°rˇ£cmp
–
¨gv
[
i
], "-h" ) || !
	`°rcmp
(árgv[i], "-?" )) {

38 
	`hñp
–
whﬂmi
 );

41 if–!
™y«me
 && !
	`°rcmp
–
¨gv
[
i
], "--" ))

42 
™y«me
 = 1;

43 if–!
™y«me
 && 
¨gv
[
i
][0] == '-' ) {

44 
	`¥ötf
–"Unknow¿¨gumíà`%s'\n\n", 
¨gv
[
i
] );

45 
	`hñp
–
whﬂmi
 );

48 if–!
‚1
 )

49 
‚1
 = 
¨gv
[
i
];

50 if–!
‚2
 )

51 
‚2
 = 
¨gv
[
i
];

53 
	`¥ötf
–"Exå®¨gumíà`%s'\n\n", 
¨gv
[
i
] );

54 
	`hñp
–
whﬂmi
 );

58 if–!
‚1
 || !
‚2
 ) {

59 
	`hñp
–
whﬂmi
 );

62 if–
vec
 &&–
…
 || 
ut
 )) {

63 
	`¥ötf
( "Cannot specifyÅriangular flags for vectors\n" );

64 
	`hñp
–
whﬂmi
 );

69 if–!–
f1
 = 
	`f›í
–
‚1
, "rb" )))

70  
	`¥ötf
–"C™nŸÑód `%s'\n", 
‚1
 );

71 
	`f£ek
–
f1
, 0, 
SEEK_END
 );

72 
size_t
 
fsz
 = 
	`·ñl
–
f1
 );

73 
	`f£ek
–
f1
, 0, 
SEEK_SET
 );

74 if–!–
f2
 = 
	`f›í
–
‚2
, "rb" )))

75  
	`¥ötf
–"C™nŸÑód `%s'\n", 
‚2
 );

76 
	`f£ek
–
f2
, 0, 
SEEK_END
 );

77 
size_t
 
fsz2
 = 
	`·ñl
–
f2
 );

78 
	`f£ek
–
f2
, 0, 
SEEK_SET
 );

79 if–
fsz
 !
fsz2
 )

80  
	`¥ötf
–"Fûe†havê®dif„ª¡ sizê(%lu v†%lu)\n", 
fsz
, 
fsz2
 );

81 if–
fsz
 & 3 )

82  
	`¥ötf
–"Bad fûêsizê%lu,ÇŸá¿f32 c⁄èöî\n", 
fsz
 );

83 
n
 = 
fsz
 / 4;

84 
m
 = 
n
;

85 if–!
vec
 ) {

86 
m
 = ()
	`sqπ
–
n
 );

87 if–
m
*m !
n
 ) {

88 
	`¥ötf
( "Matricesáren't square.\n" );

92 *
a
 = (*)
	`mÆloc
–
fsz
 );

93 *
b
 = (*)
	`mÆloc
–
fsz
 );

94 *
e
 = (*)
	`mÆloc
–
fsz
 );

95 if–!
a
 || !
b
 )

96  
	`¥ötf
( "NotÉnough memory.\n" );

97 if–
	`‰ód
–
a
, 1, 
fsz
, 
f1
 )< 1 )

98  
	`¥ötf
–"C™nŸÑód from <%s>\n", 
‚1
 );

99 if–
	`‰ód
–
b
, 1, 
fsz
, 
f2
 )< 1 )

100  
	`¥ötf
–"C™nŸÑód from <%s>\n", 
‚2
 );

101 
	`f˛o£
(
f1
);

102 
	`f˛o£
(
f2
);

105 if–
…
 )

106  
i
 = 0; i < 
m
-1; ++i ) {

107 
	`mem£t
–
a
+
i
*
m
+1+i, 0, (m-1-i)*() );

108 
	`mem£t
–
b
+
i
*
m
+1+i, 0, (m-1-i)*() );

110 if–
ut
 )

111  
i
 = 1; i < 
m
; ++i ) {

112 
	`mem£t
–
a
+
i
*
m
, 0, i*() );

113 
	`mem£t
–
b
+
i
*
m
, 0, i*() );

117 
îr
 = 0.0;

118 
n‹m
 = 0.0;

119  
i
 = 0; i < 
n
; ++i ) {

120 
e
[
i
] = 
a
[i] - 
b
[i];

121 
n‹m
 +()
e
[
i
] *É[i];

122 
îr
 +
	`Ábs
–
a
[
i
] - 
b
[i] );

124 
n‹m
 = 
	`sqπ
–n‹m ) / 
n
;

125 if–
vîbo£
 &&–
	`i¢™
(
îr
Ë|| 
	`isöf
(err) ||Érr )) {

126 if–!
vec
 )

127 
	`¥ötsqm
–
e
, 
m
 );

129 
	`¥ötv
–
e
, 
m
 );

131 if–
	`i¢™
–
îr
 ))

132  
	`¥ötf
–"%†dif„ª¡,Éº‹ i†NaN\n", 
vec
?"Vectors":"Matrices" ), -1;

133 if–
	`isöf
–
îr
 ))

134  
	`¥ötf
–"%†dif„ª¡,Éº‹ i†Inf\n", 
vec
?"Vectors":"Matrices" ), -2;

135 if–
îr
 > 1e-4 )

136  
	`¥ötf
–"%†dif„ª¡,Éº‹s:Ç‹mÆized=%.7g,ábsﬁuã=%.7g\n", 
vec
?"Ve˘‹s":"M©ri˚s", 
n‹m
, 
îr
 ), -3;

137 if–
îr
 || 
n‹m
 )

138 
	`¥ötf
–"%†equÆ,Éº‹s:Ç‹mÆized=%.7g,ábsﬁuã=%.7g\n", 
vec
?"Ve˘‹s":"M©ri˚s", 
n‹m
, 
îr
 );

140 
	`¥ötf
–"%†¨êbö¨ûy idítiˇl\n", 
vec
?"Vectors":"Matrices" );

142 
	}
}

144 
	$hñp
–c⁄° *
whﬂmi
 )

146 
	`¥ötf
( "Use: %s [-lt] [-ut] [-v] [--] <mat1.f32> <mat2.f32> or\n"

150 " `-v'É«bÀ†vîbo£ mode\n", 
whﬂmi
, whoami );

151 
	}
}

153 
	$¥ötsqm
–c⁄° *
a
, 
n
 )

155 
	scﬁ∑øm_s
 {

156 
n
, 
p
;

157 
≈
, 
nP
;

158 } *
cﬁs
;

159 
cﬁs
 = (
cﬁ∑øm_s
*)
	`mÆloc
–
n
 * (cols[0]) );

161 
j
;

162  
j
 = 0; j < 
n
; ++j ) {

164 
maxvÆ
 = 1.0;

165 
have_n‹mÆ
 = 0, 
have_œrge
 = 0;

166 
have_√g
 = 0, 
have_œrge_√g
 = 0;

167 
i
;

168  
i
 = 0; i < 
n
; ++i ) {

169 
t
 = 
a
[
i
*
n
+
j
], 
â
 = 
	`Ábsf
(Å );

170 if–
	`isföôe
(
t
) ) {

172 if(–
t
 < 0 )&&–
â
 >= 1.0e10 )) {

173 
have_œrge_√g
 = 1;

174 
have_œrge
 = 1;

176 if–!
have_œrge
 ) {

177 if–
â
 >= 0.5e-6f )

178 
have_n‹mÆ
 = 1;

179 if(–
t
 > 0 )&&–
â
 > 
maxvÆ
 ))

180 
maxvÆ
 = 
â
;

181 if(–
t
 < 0 )&&–10.0*
â
 > 
maxvÆ
 ))

182 
maxvÆ
 = 10.0*
â
;

186 
maxvÆ
 *= 0.1;

187 
n_digôs_¥e
 = 1;

188  
maxvÆ
 >= 1.0 )

189 ++
n_digôs_¥e
, 
maxvÆ
 *= 0.1;

190 
n_digôs_po°
 = 6 - 
n_digôs_¥e
;

191 if–
n_digôs_po°
 < 1 )

192 
n_digôs_po°
 = 1;

193 
n_digôs
 = 1+
n_digôs_¥e
+1+
n_digôs_po°
;

196 if–
have_œrge
 &&–
n_digôs
 < 12+
have_œrge_√g
 )) {

197 
n_digôs_po°
 +12 + 
have_œrge_√g
 - 
n_digôs
;

198 
n_digôs
 = 12 + 
have_œrge_√g
;

200 
hdr_size
 = 
n_digôs
 - 
n_digôs_po°
 + 1;

201 
·r_size
 = 
n_digôs
 - 
hdr_size
;

202 if–!
have_n‹mÆ
 && !
have_œrge
) {

203 
hdr_size
 = 4 + 
have_√g
;

204 
·r_size
 = 0;

206 
cﬁs
[
j
].
n
 = 
n_digôs
;

207 
cﬁs
[
j
].
p
 = 
n_digôs_po°
;

208 
cﬁs
[
j
].
≈
 = 
hdr_size
;

209 
cﬁs
[
j
].
nP
 = 
·r_size
;

212 
i
;

213 
	`¥ötf
–"diff[%d][%d] = { \n", 
n
,Ç );

214  
i
 = 0; i < 
n
; ++i ) {

215 
	`¥ötf
( " {" );

216  
j
 = 0; j < 
n
; ++j ) {

217 
t
 = *
a
++, 
â
 = 
	`Ábsf
(t);

218 if–
	`i¢™
(
t
) )

219 
	`¥ötf
–"%*s%*s", 
cﬁs
[
j
].
≈
, "NaN", cﬁs[j].
nP
, "" );

220 if–
	`isöf
(
t
) &&(Å > 0 ))

221 
	`¥ötf
–"%*s%*s", 
cﬁs
[
j
].
≈
, "Inf", cﬁs[j].
nP
, "" );

222 if–
	`isöf
(
t
) )

223 
	`¥ötf
–"%*s%*s", 
cﬁs
[
j
].
≈
, "-Inf", cﬁs[j].
nP
, "" );

224 if–
â
 >= 1.0e10 )

225 
	`¥ötf
–"%*.5e", 
cﬁs
[
j
].
n
, 
t
 );

226 if–
â
 >= 0.5e-6f )

227 
	`¥ötf
–"%*.*f", 
cﬁs
[
j
].
n
, cﬁs[j].
p
, 
t
 );

228 if–
â
 )

229 
	`¥ötf
–"%*s%-*s", 
cﬁs
[
j
].
≈
-1, "0.", cﬁs[j].
nP
+1, "0" );

231 
	`¥ötf
–"%*s%*s", 
cﬁs
[
j
].
≈
, "0", cﬁs[j].
nP
, "" );

233 
	`¥ötf
( " }\n" );

235 
	`¥ötf
( " }\n" );

236 
	}
}

238 
	$¥ötv
–c⁄° *
a
, 
n
 )

240 
	`¥ötf
–"diff[%d] =\n", 
n
 );

241 
	`¥ötf
( " {" );

242 
i
;

243  
i
 = 0; i < 
n
; ++i ) {

244 
t
 = 
a
[
i
], 
â
 = 
	`Ábsf
(Å );

245 if–
	`i¢™
(
t
) )

246 
	`¥ötf
( " NaN" );

247 if–
	`isöf
(
t
) )

248 
	`¥ötf
(–
t
 > 0 )? " Inf":" -Inf" );

249 if–
â
 >= 1.0e6 )

250 
	`¥ötf
–" %.5e", 
t
 );

251 if–
â
 >= 0.5e-6f ) {

252 
n_digôs_¥e
 = 1;

253 
z
 = 
â
;

254  
z
 >= 1.0 )

255 ++
n_digôs_¥e
, 
z
 *= 0.1;

256 
	`¥ötf
–" %.*f", 6 - 
n_digôs_¥e
, 
t
 );

258 if–
â
 > 0 )

259 
	`¥ötf
(–
t
 > 0 )? " 0.0" : " -0.0" );

261 
	`¥ötf
( " 0" );

262 if–
i
 =15 && 
n
 > 16 ) {

263 
	`¥ötf
( " ..." );

267 
	`¥ötf
( " }\n" );

268 
	}
}

	@HowTo/Cholesky/tools/printsqm.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

4 
	~<m©h.h
>

6 
	$maö
–
¨gc
, **
¨gv
 )

8 
…
 = 0, 
ut
 = 0, 
™y«me
 = 0, 
bad
 = 0;

9 c⁄° *
‚ame
 = 0;

10 
FILE
 *
f
;

11 
i
;

12  
i
 = 1; i < 
¨gc
; ++i ) {

13 if–!
™y«me
 && 
¨gv
[
i
][0] == '-' ) {

14 if–!
	`°rˇ£cmp
–1+
¨gv
[
i
], "lt" )) {

15 if–
…
 ) 
bad
 = 1;

16 
…
 = 1;

18 if–!
	`°rˇ£cmp
–1+
¨gv
[
i
], "ltx" )) {

19 if–
…
 ) 
bad
 = 1;

20 
…
 = 2;

22 if–!
	`°rˇ£cmp
–1+
¨gv
[
i
], "ut" )) {

23 if–
ut
 ) 
bad
 = 1;

24 
ut
 = 1;

26 if–!
	`°rˇ£cmp
–1+
¨gv
[
i
], "utx" )) {

27 if–
ut
 ) 
bad
 = 1;

28 
ut
 = 2;

30 if–!
	`°rcmp
–1+
¨gv
[
i
], "-" ))

31 
™y«me
 = 1;

33 
bad
 = 1;

36 if–
‚ame
 )

37 
bad
 = 1;

38 
‚ame
 = 
¨gv
[
i
];

41 if–
bad
 || !
‚ame
 )

42  
	`¥ötf
–"U£: %†[-…[x]] [-ut[x]] [--] <m©.bö>\n", 
¨gv
[0] );

44 if–!–
f
 = 
	`f›í
–
‚ame
, "rb" )))

45  
	`¥ötf
–"C™nŸÑód <%s>\n", 
¨gv
[1] );

46 
	`f£ek
–
f
, 0, 
SEEK_END
 );

47 
size_t
 
fsz
 = 
	`·ñl
–
f
 );

48 
	`f£ek
–
f
, 0, 
SEEK_SET
 );

49 if–
fsz
 & 3 )

50  
	`¥ötf
–"Bad fûêsizê%lu,ÇŸá m©rix o‡Êﬂts\n", 
fsz
 );

51 
n
 = ()
	`sqπ
–()(
fsz
/4) );

52 
m
 = 
n
;

53 if–
n
*
m
*4 !
fsz
 ) {

54 
m
 = ()
	`sqπ
–()(
fsz
/8) );

55 
n
 = 2*
m
;

56 if–
n
*
m
*4 !
fsz
 ) {

57 
m
 = ()
	`sqπ
–()(
fsz
/12) );

58 
n
 = 3*
m
;

59 if–
n
*
m
*4 !
fsz
 ) {

60  
	`¥ötf
–"Su•iciou†fûêsizê%lu,ÇŸ 1/2/3 squ¨êm©ri˚s\n", 
fsz
 );

64 *
a
 = (*)
	`mÆloc
–
fsz
 );

65 if–!
a
 )

66  
	`¥ötf
( "NotÉnough memory.\n" );

67 if–
	`‰ód
–
a
, 1, 
fsz
, 
f
 )< 1 )

68  
	`¥ötf
–"C™nŸÑód from <%s>\n", 
¨gv
[1] );

69 
	`f˛o£
(
f
);

71 if–
…
 || 
ut
 ) {

73  
i
 = 0; i < 
n
; i +
m
 ) {

74 *
b
 = 
a
 + 
i
*
m
*m;

76 
j
;

77  
j
 = 0; j < 
m
; ++j ) {

78 if–
…
 =2 && 
j
 < 
m
-2 )

79 
	`mem£t
–&
b
[
j
*
m
+j+2], 0, (m-(j+2))*() );

80 if–
…
 =1 && 
j
 < 
m
-1 )

81 
	`mem£t
–&
b
[
j
*
m
+j+1], 0, (m-(j+1))*() );

82 if–
ut
 =2 && 
j
 > 1 )

83 
	`mem£t
–&
b
[
j
*
m
], 0, (j-1)*() );

84 if–
ut
 =1 && 
j
 > 0 )

85 
	`mem£t
–&
b
[
j
*
m
], 0, j*() );

89  
i
 = 0; i < 
n
; ++i ) {

90 if–!–
i
 % 
m
 ))

91 
	`¥ötf
–"%c[%d][%d] =\n", 'A'+
i
/
m
, m, m );

92 
	`¥ötf
( " {" );

93 
j
;

94  
j
 = 0; j < 
m
; ++j ) {

95 
t
 = 
a
[
i
*
m
+
j
];

96 if–
	`i¢™
(
t
) )

97 
	`¥ötf
( " NaN " );

98 if–
	`isöf
(
t
) &&(Å > 0 ))

99 
	`¥ötf
( " Inf " );

100 if–
	`isöf
(
t
) )

101 
	`¥ötf
( " -Inf " );

102 if–
	`Ábsf
(
t
) >= 0.5e-6f )

103 
	`¥ötf
–"% 10.6f", 
t
 );

105 
	`¥ötf
( " 0 " );

107 
	`¥ötf
( " }\n" );

110 
	}
}

	@HowTo/Cholesky/tools/solver.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

4 
	~<m©h.h
>

6 
	~"lib/sﬁvî.h
"

8 #i‚de‡
N


9 
	#N
 504

	)

12 *
	gA
;

13 *
	gb
;

14 *
	gx
;

16 *
	gM
;

17 *
	gc
;

18 *
	gL
;

19 *
	gy
;

21 *
	gB
;

22 *
	gz
;

25 *
	gp
;

26 *
	gq
;

28 
	gn
 = 
N
;

29 
	g£ed
 = 
N
/4;

30 
	gmö
 = -1.0;

31 
	gmax
 = 1.0;

32 
	gvîbo£
 = 0, 
	gquõt
 = 0;

33 
	gÆld©a
 = 0;

34 
	ggíd©a
 = 0;

35 
	ggíötd©a
 = 0;

36 
	gu£_gj
 = 1;

38 
∑r£_¨gs
( , ** );

39 
mem_Æloc
();

40 
ª£t_°©s
();

42 
	$maö
–
¨gc
, **
¨gv
 )

45 
	`∑r£_¨gs
–
¨gc
, 
¨gv
 );

46 
°¨t
:

47 
	`¥ötf
–"Sﬁvögá¿n=%d sy°em, RNG sìd=%d, vÆs=[%.2f:%.2f)\n", 
n
, 
£ed
, 
mö
, 
max
 );

48 
	`fÊush
–
°dout
 );

49 
	`§™d
–
£ed
 );

52 
	`mem_Æloc
();

55 
	`gíf
–
A
, 
n
*n, 
mö
, 
max
 );

57 
	`syrk_ä_l
–
M
, 
A
, 
n
 );

58 
	`pŸrf_ 
–
L
, 
M
, 
n
 );

59 if–
	`i¢™
–
L
[(
n
-1)*n+(n-1)] )||

60 
	`isöf
–
L
[(
n
-1)*n+(n-1)] )||

61 –
	`Ábsf
–
L
[(
n
-1)*n+(n-1)] )< 1e-6 ))

63 
	`¥ötf
( "WARNING: RNG seed %dÖroducedán indeterminate system.\n"

64 " Tryög %d...\n", 
£ed
, seed+1 );

65 ++
£ed
;

66 
°¨t
;

68 
	`gemv_t
–
c
, 
A
, 
b
, 
n
 );

69 if–
vîbo£
 ||–!
quõt
 &&–
n
 <= 16 )))

70 
	`¥ötm
–"A", 
A
, 
n
 );

71 if–
gíd©a
 )

72 
	`ßvem
–
A
, 
n
, "A" );

74 
	`gíf
–
b
, 
n
, 
mö
, 
max
 );

75 if–
vîbo£
 ||–!
quõt
 &&–
n
 <= 16 )))

76 
	`¥ötv
–"b", 
b
, 
n
 );

77 if–
gíd©a
 )

78 
	`ßvev
–
b
, 
n
, "b" );

81 
	`¥ötf
( "\n* CHOLESKY solution *\n" );

82 
	`ª£t_°©s
();

85 
	`gemv_t
–
c
, 
A
, 
b
, 
n
 );

86 if–
vîbo£
 ||–!
quõt
 &&–
n
 <= 16 )))

87 
	`¥ötv
–"¯A'b", 
c
, 
n
 );

88 if–
gíötd©a
 )

89 
	`ßvev
–
c
, 
n
, "c" );

91 
	`syrk_ä_l
–
M
, 
A
, 
n
 );

92 if–
vîbo£
 ||–!
quõt
 &&–
n
 <= 16 )))

93 
	`¥ötm
–"M = A'A", 
M
, 
n
 );

94 if–
gíötd©a
 )

95 
	`ßvem
–
M
, 
n
, "M" );

97 
	`pŸrf_ 
–
L
, 
M
, 
n
 );

98 if–
vîbo£
 ||–!
quõt
 &&–
n
 <= 16 )))

99 
	`¥ötm
–"L | LL'=M", 
L
, 
n
 );

100 if–
gíötd©a
 )

101 
	`ßvem
–
L
, 
n
, "L" );

103 
	`åsv_ 
–
y
, 
L
, 
c
, 
n
 );

104 if–
vîbo£
 ||–!
quõt
 &&–
n
 <= 16 )))

105 
	`¥ötv
–"y = c\\L", 
y
, 
n
 );

106 if–
gíötd©a
 )

107 
	`ßvev
–
y
, 
n
, "y" );

109 
	`åsv_…
–
x
, 
L
, 
y
, 
n
 );

110 if–
vîbo£
 ||–!
quõt
 &&–
n
 <= 16 )))

111 
	`¥ötv
–"x = y\\L'", 
x
, 
n
 );

112 if–
gíd©a
 )

113 
	`ßvev
–
x
, 
n
, "x" );

115 
	`¥ötf
( "Total operations for Chokesky flow:\n"

118 
n_add
, 
n_mul
, 
n_div
, 
n_sqπ
,

119 
n_sˇn
 );

121 
	`gemv_n
–
p
, 
A
, 
x
, 
n
 );

123 
e
 = 
	`n‹m
–
p
, 
b
, 
n
 );

124 
	`¥ötf
–"N‹mÆizedÉº‹ o‡thêChﬁesky modñ (||b-Ax||): %.7g\n", 
e
 );

126 if–
u£_gj
 ) {

128 
	`¥ötf
( "\n* GAUSS-JORDAN solution *\n" );

129 
	`ª£t_°©s
();

132 
	`gauss
–
B
, 
A
, 
n
 );

135 
	`gemv_n
–
z
, 
B
, 
b
, 
n
 );

138 
	`¥ötf
( "Total operations for Gauss-Jordan flow:\n"

141 
n_add
, 
n_mul
, 
n_div
, 
n_sqπ
,

142 
n_sˇn
 );

145 
	`gemv_n
–
q
, 
A
, 
z
, 
n
 );

146 
e
 = 
	`n‹m
–
q
, 
b
, 
n
 );

147 
	`¥ötf
–"N‹mÆizedÉº‹ o‡thêGauss-J‹d™ modñ (||b-Ax||): %.7g\n", 
e
 );

150 
	}
}

152 
hñp
( const * );

154 
	$∑r£_¨gs
–
¨gc
, **
¨gv
 )

156 
i
;

157  
i
 = 1; i < 
¨gc
; ++i ) {

158 if–!
	`°rcmp
–
¨gv
[
i
], "-h" ) || !strcmp(árgv[i], "--help" )) {

159 
	`hñp
–
¨gv
[0] );

160 
	`exô
( 0 );

162 if–!
	`°rcmp
–
¨gv
[
i
], "-noGJ" ) || !strcmp(árgv[i], "--disableGaussJordan" ) )

163 
u£_gj
 = 0;

164 if–!
	`°rcmp
–
¨gv
[
i
], "-g" ) || !strcmp(árgv[i], "--gendata" ) )

165 
gíd©a
 = 1;

166 if–!
	`°rcmp
–
¨gv
[
i
], "-gi" ) || !strcmp(árgv[i], "--genintdata" ) )

167 
gíötd©a
 = 1;

168 if–!
	`°rcmp
–
¨gv
[
i
], "-vv" ) || !strcmp(árgv[i], "--alldata" ) ) {

169 
vîbo£
 = 1; 
quõt
 = 0; 
Æld©a
 = 1;

171 if–!
	`°rcmp
–
¨gv
[
i
], "-v" ) || !strcmp(árgv[i], "--verbose" ) ) {

172 
vîbo£
 = 1; 
quõt
 = 0;

174 if–!
	`°rcmp
–
¨gv
[
i
], "-q" ) || !strcmp(árgv[i], "--quiet" ) ) {

175 
vîbo£
 = 0; 
quõt
 = 1;

177 if–!
	`°rcmp
–
¨gv
[
i
], "-n" ) &&–ò!
¨gc
-1 )) {

178 
n
 = 
	`©oi
–
¨gv
[++
i
] );

179 if(–
n
 < 4 )||(Ç & 3 )) {

180 
	`¥ötf
–"îr‹: m©rix sizêha†tÿbê®posôive,ÇŸÇuŒ, mu…ùÀ o‡4 (gŸ `%s')\n", 
¨gv
[
i
] );

181 
	`exô
( 1 );

184 if(–!
	`°rcmp
–
¨gv
[
i
], "-s" )|| !°rcmp–¨gv[i], "--£ed" ))&&–ò!
¨gc
-1 ))

185 
£ed
 = 
	`©oi
–
¨gv
[++
i
] );

186 if(–!
	`°rcmp
–
¨gv
[
i
], "-m" )|| !°rcmp–¨gv[i], "--mövÆ" ))&&–ò!
¨gc
-1 ))

187 
mö
 = 
	`©of
–
¨gv
[++
i
] );

188 if(–!
	`°rcmp
–
¨gv
[
i
], "-M" )|| !°rcmp–¨gv[i], "--maxvÆ" ))&&–ò!
¨gc
-1 ))

189 
max
 = 
	`©of
–
¨gv
[++
i
] );

191 
	`¥ötf
–"InvÆid sy¡axÇó∏¨gumíà`%s'\n", 
¨gv
[
i
] );

192 
	`hñp
–
¨gv
[0] );

193 
	`exô
( 3 );

196 if–
mö
 >
max
 ) {

197 
	`¥ötf
–"îr‹: möimum vÆuê(%.2fËha†tÿbêÀs†th™ maximum vÆuê(%.2f)\n", 
mö
, 
max
 );

198 
	`exô
( 2 );

200 
	}
}

202 
	$hñp
–c⁄° *
«me
 )

204 
	`¥ötf
–"U£: %†[›ti⁄s]\n", 
«me
 );

205 
	`¥ötf
( "Possible options:\n" );

206 
	`¥ötf
–" -¿<n> : m©rix size; ha†tÿbê4*k, wôh k>0 (deÁu…: %u)\n", 
N
 );

207 
	`¥ötf
–" -†<£ed>:Ñ™domÇumbî gíî©‹ sìd (deÁu…: %u)\n", 
N
/4 );

208 
	`¥ötf
( " -m <min> : minimum valueÅo be generated (default: -1.0)\n" );

209 
	`¥ötf
( " -M <max> : maximum valueÅo be generated; hasÅo be greaterÅhan <min>;\n"

211 
	`¥ötf
( " -v : verbose mode;Örint data (default: verbose forÇ <= 16)\n" );

212 
	`¥ötf
( " -vv :Ñeally verbose mode;ÖrintsállÅhe data (noÜimit on 16Ñows/cols)\n" );

213 
	`¥ötf
( " -q : quiet mode; doÇotÖrint data (default: quiet forÇ > 16)\n" );

214 
	`¥ötf
( " -g : generate input (A,b) / output (x) data files\n" );

215 
	`¥ötf
( " -gi : generate intermediate (M,c,L,y) data files\n" );

216 
	`¥ötf
( " -noGJ : disable Gauss/Jordan model\n" );

217 
	`¥ötf
( "\n" );

218 
	}
}

220 
	$mem_Æloc
() {

221 
A
 = (*)
	`mÆloc
–
n
*n*() );

222 
b
 = (*)
	`mÆloc
–
n
*() );

223 
x
 = (*)
	`mÆloc
–
n
*() );

225 
M
 = (*)
	`mÆloc
–
n
*n*() );

226 
c
 = (*)
	`mÆloc
–
n
*() );

227 
L
 = (*)
	`mÆloc
–
n
*n*() );

228 
y
 = (*)
	`mÆloc
–
n
*() );

230 
B
 = (*)
	`mÆloc
–
n
*n*() );

231 
z
 = (*)
	`mÆloc
–
n
*() );

233 
p
 = (*)
	`mÆloc
–
n
*() );

234 
q
 = (*)
	`mÆloc
–
n
*() );

236 if–!
A
 || !
b
 || !
x
 || !
M
 || !
c
 || !
L
 || !
y
 || !
B
 || !
z
 || !
p
 || !
q
 ) {

237 
	`¥ötf
( "error:ÇotÉnough memory\n" );

238 
	`exô
( 4 );

240 
	}
}

	@HowTo/CmxDmaTransfers/leon/app_config.c

13 
	~"OsDrvC¥.h
"

14 
	~"OsDrvShaveL2Cache.h
"

15 
	~"≠p_c⁄fig.h
"

19 
	#L2CACHE_CFG
 (
SHAVE_L2CACHE_NORMAL_MODE
)

	)

20 
	#L2CACHE_PARTITION_SIZE
 (
SHAVEPART256KB
)

	)

21 
	#L2CACHE_PARTITION_TYPE
 (
NON_WINDOWED_DATA_PARTITION
)

	)

35 
	$öôClocksAndMem‹y
()

37 
öt32_t
 
sc
;

39 
tyAuxClkDividîCfg
 
auxClkAŒOn
[] =

41 {
AUX_CLK_MASK_UART
, 
CLK_SRC_REFCLK0
, 96, 625},

46 
sc
 = 
	`OsDrvC¥Inô
();

47 if(
sc
)

48  
sc
;

49 
sc
 = 
	`OsDrvC¥O≥n
();

50 if(
sc
)

51  
sc
;

52 
sc
 = 
	`OsDrvC¥AuxClockAºayC⁄fig
(
auxClkAŒOn
);

53 if(
sc
)

54  
sc
;

57 
sc
 = 
	`OsDrvShaveL2CacheInô
(
L2CACHE_CFG
);

58 if(
sc
)

59  
sc
;

61 
∑πôi⁄Numbî
;

63 
sc
 = 
	`OsDrvShaveL2CGëP¨tôi⁄
(
L2CACHE_PARTITION_SIZE
, &
∑πôi⁄Numbî
);

64 if(
sc
)

65  
sc
;

67 
sc
 = 
	`OsDrvShaveL2CacheAŒoˇãSëP¨tôi⁄s
();

68 if(
sc
)

69  
sc
;

71 
shaveNumbî
 = 0; shaveNumbî < 
SHAVES_USED
; shaveNumber++)

73 
sc
 = 
	`OsDrvShaveL2CSëN⁄WödowedP¨tôi⁄
((
shaveId_t
)
shaveNumbî
, 
∑πôi⁄Numbî
, 
L2CACHE_PARTITION_TYPE
);

74 if(
sc
)

75  
sc
;

78 
sc
 = 
	`OsDrvShaveL2CacheP¨tôi⁄InvÆid©e
(
∑πôi⁄Numbî
);

79 if(
sc
)

80  
sc
;

83 
	}
}

	@HowTo/CmxDmaTransfers/leon/app_config.h

13 #i‚de‡
APP_CONFIG_H


14 
	#APP_CONFIG_H


	)

18 
	~"mv_ty≥s.h
"

22 
	#OSC_CLK_KHZ
 12000

23 
	#SYS_CLK_KHZ
 480000

24 

	)

25 
	#SHAVES_USED
 12

	)

27 
	#APP_MSS_CLOCKS
 (
DEFAULT_RTEMS_MSS_LRT_CLOCKS
 | \

28 
DEV_MSS_MXI_CTRL
)

	)

30 
	#APP_UPA_CLOCKS
 (
DEV_UPA_SH0
 | \

31 
DEV_UPA_SH1
 | \

32 
DEV_UPA_SH2
 | \

33 
DEV_UPA_SH3
 | \

34 
DEV_UPA_SH4
 | \

35 
DEV_UPA_SH5
 | \

36 
DEV_UPA_SH6
 | \

37 
DEV_UPA_SH7
 | \

38 
DEV_UPA_SH8
 | \

39 
DEV_UPA_SH9
 | \

40 
DEV_UPA_SH10
 | \

41 
DEV_UPA_SH11
 | \

42 
DEV_UPA_SHAVE_L2
 | \

43 
DEV_UPA_CDMA
 | \

44 
DEV_UPA_CTRL
 )

	)

55 
öôClocksAndMem‹y
();

	@HowTo/CmxDmaTransfers/leon/main.c

8 #¥agm®
GCC
 
dügno°ic
 
push


9 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wincompatible-pointer-types"

13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~<öây≥s.h
>

16 
	~"DrvC¥.h
"

17 
	~"DrvLe⁄.h
"

18 
	~"OsDrvCdma.h
"

19 
	~"πems_c⁄fig.h
"

20 
	~"sh¨ed_c⁄fig.h
"

24 
	#NO_WAIT
 0

	)

25 
	#WAIT
 1

	)

30 
u32
 *
Ãt_°¨t
;

34 
uöt8_t
 
__©åibuã__
((
£˘i⁄
(".cmx_dúe˘.d©a"))Ë
	g§c_buff
[
SRC_BUFF_SIZE
];

35 
uöt8_t
 
__©åibuã__
((
£˘i⁄
(".ddr_dúe˘.d©a"))Ë
	gd°_buff_1
[
DST_BUFF_SIZE
];

36 
u8
 
__©åibuã__
((
£˘i⁄
(".ddr_dúe˘.d©a"))Ë
	gd°_buff_2
[
DST_BUFF_SIZE
];

37 
OsDrvCmxDmaTønß˘i⁄Hnd
 
	gl1
, 
	gl2
;

38 
OsDrvCmxDmaTønß˘i⁄
 
	gli°1
[
LIST_SIZE
] 
__©åibuã__
((
£˘i⁄
(".cmx_direct.bss")));

39 
OsDrvCmxDmaTønß˘i⁄
 
	gli°2
[
LIST_SIZE
] 
__©åibuã__
((
£˘i⁄
(".cmx_direct.bss")));

46 
	$fûlBuf„r
(
uöt8_t
 *
buff
, 
uöt32_t
 
size
) {

47 
uöt32_t
 
i
;

49 
i
 = 0; i < 
size
; i++) {

50 
buff
[
i
] = i % 256;

52 
	}
}

54 
öt32_t
 
	$°rideCom∑ª
(

55 
uöt8_t
 *
§c
, uöt8_à*
d°
,

56 
uöt32_t
 
§c_width
, uöt32_à
d°_width
,

57 
uöt32_t
 
§c_°ride
, uöt32_à
d°_°ride
,

58 
uöt32_t
 
size
) {

59 
uöt32_t
 
§c_idx
 = 0;

60 
uöt32_t
 
d°_idx
 = 0;

61 
uöt8_t
 *
§c_±r
 = 
§c
;

62 
uöt8_t
 *
d°_±r
 = 
d°
;

64 i‡(
§c_±r
[
§c_idx
] !
d°_±r
[
d°_idx
]) {

65 
	`¥ötf
("Fú°Éº‹: srcIdx %"
PRIu32
" dstIdx %"PRIu32

67 
§c_idx
, 
d°_idx
, 
§c_±r
[§c_idx], 
d°_±r
[dst_idx]);

70 
§c_idx
++;

71 i‡(
§c_idx
 % 
§c_width
 == 0) {

72 
§c_idx
 = 0;

73 
§c_±r
 +
§c_°ride
;

75 
d°_idx
++;

76 i‡(
d°_idx
 % 
d°_width
 == 0) {

77 
d°_idx
 = 0;

78 
d°_±r
 +
d°_°ride
;

80 
size
--;

81 } 
size
 > 0);

83 
	}
}

85 
öt32_t
 
	$cmxDmaSim∂eTønß˘i⁄
(
uöt32_t
 
å™s„r_size
) {

86 
	`fûlBuf„r
(
§c_buff
, 
å™s„r_size
);

87 
	`mem£t
(
d°_buff_1
, 0, 
DST_BUFF_SIZE
);

88 
	`OsDrvCmxDmaCª©eTønß˘i⁄
(&
l1
, &
li°1
[0],

89 
§c_buff
, 
d°_buff_1
, 
å™s„r_size
);

90 
	`OsDrvCmxDmaSèπTøns„r
(&
l1
, 
WAIT
);

92 i‡(
	`memcmp
(
§c_buff
, 
d°_buff_1
, 
å™s„r_size
) == 0)

96 
	}
}

98 
öt32_t
 
	$cmxDmaSåideTønß˘i⁄
(

99 
uöt32_t
 
§c_width
, uöt32_à
d°_width
,

100 
uöt32_t
 
§c_°ride
, uöt32_à
d°_°ride
,

101 
uöt32_t
 
size
) {

102 
OsDrvCmxDmaTønß˘i⁄Hnd
 
h™dÀ
;

104 
	`fûlBuf„r
(
§c_buff
, 
SRC_BUFF_SIZE
);

105 
	`mem£t
(
d°_buff_1
, 0, 
DST_BUFF_SIZE
);

107 
	`OsDrvCmxDmaCª©eSåideTønß˘i⁄
(&
h™dÀ
, &
li°1
[0],

108 
§c_buff
, 
d°_buff_1
,

109 
§c_width
, 
d°_width
,

110 
§c_°ride
, 
d°_°ride
, 
size
);

111 
	`OsDrvCmxDmaSèπTøns„r
(&
h™dÀ
, 
WAIT
);

113  
	`°rideCom∑ª
(
§c_buff
, 
d°_buff_1
, 
§c_width
, 
d°_width
,

114 
§c_°ride
, 
d°_°ride
, 
size
);

115 
	}
}

117 
öt32_t
 
	$cmxDmaLi°Tønß˘i⁄
(
uöt32_t
 
å™s„r_size
,

118 
uöt32_t
 
li°1_size
, uöt32_à
li°2_size
) {

119 
uöt32_t
 
i
;

121 
	`fûlBuf„r
(
§c_buff
, 
å™s„r_size
);

122 
	`mem£t
(
d°_buff_1
, 0, 
DST_BUFF_SIZE
);

123 
	`mem£t
(
d°_buff_2
, 0, 
DST_BUFF_SIZE
);

126 
	`OsDrvCmxDmaCª©eTønß˘i⁄
(&
l1
, &
li°1
[0],

127 
§c_buff
, 
d°_buff_1
, 
å™s„r_size
);

128 
i
 = 1; i < 
li°1_size
; i++) {

129 
	`OsDrvCmxDmaAddTønß˘i⁄
–&
l1
, &
li°1
[
i
],

130 
§c_buff
, 
d°_buff_1
 + 
i
 * 
å™s„r_size
,Åransfer_size);

134 
	`OsDrvCmxDmaCª©eTønß˘i⁄
(&
l2
, &
li°2
[0],

135 
§c_buff
, 
d°_buff_2
, 
å™s„r_size
);

136 
i
 = 1; i < 
li°2_size
; i++) {

137 
	`OsDrvCmxDmaAddTønß˘i⁄
–&
l2
, &
li°2
[
i
],

138 
§c_buff
, 
d°_buff_2
 + 
i
 * 
å™s„r_size
,Åransfer_size);

141 
	`OsDrvCmxDmaSèπTøns„r
(&
l1
, 
WAIT
);

142 
	`OsDrvCmxDmaSèπTøns„r
(&
l2
, 
WAIT
);

144 
i
 = 0; i < 
li°1_size
; i++)

145 i‡(
	`memcmp
(
§c_buff
, 
d°_buff_1
 + 
i
 * 
å™s„r_size
,Åransfer_size) != 0)

147 
i
 = 0; i < 
li°2_size
; i++)

148 i‡(
	`memcmp
(
§c_buff
, 
d°_buff_2
 + 
i
 * 
å™s„r_size
,Åransfer_size) != 0)

151 
	}
}

153 *
	$POSIX_Inô
 (*
¨gs
) {

154 
	`UNUSED
(
¨gs
);

156 
öt32_t
 
sc
;

157 
öt32_t
 
°©us
;

159 
sc
 = 
	`öôClocksAndMem‹y
();

160 if(
sc
)

161 
	`exô
(
sc
);

163 
	`DrvLe⁄RTSèπup
((
u32
)&
Ãt_°¨t
);

165 i‡(
sc
)

166 
	`exô
(
sc
);

168 
°©us
 = 
	`OsDrvCmxDmaInôülize
(
NULL
);

170 i‡(
°©us
 =
OS_MYR_DRV_SUCCESS
) {

171 
	`¥ötf
("Running CMX DMAÅransfers on LOS\n\n");

172 
	`¥ötf
("CMX DMA simpleÅransfer: ");

173 i‡(
	`cmxDmaSim∂eTønß˘i⁄
(
TRANSFER_SIZE
) == 0)

174 
	`¥ötf
("transfer completed successfully\n");

176 
	`¥ötf
("transferÉrror\n");

178 
	`¥ötf
("CMX DMA simple strideÅransfer: ");

179 i‡(
	`cmxDmaSåideTønß˘i⁄
(

180 
TRANSFER_SIZE
 / 2, TRANSFER_SIZE / 4,

181 
TRANSFER_SIZE
 / 2, TRANSFER_SIZE / 2,

182 
TRANSFER_SIZE
) == 0)

183 
	`¥ötf
("transfer completed successfully\n");

185 
	`¥ötf
("transferÉrror\n");

187 
	`¥ötf
("CMX DMAÜistÅransfer: ");

188 i‡(
	`cmxDmaLi°Tønß˘i⁄
(
TRANSFER_SIZE
, 
LIST_SIZE
, LIST_SIZE / 2) == 0)

189 
	`¥ötf
("transfer completed successfully\n");

191 
	`¥ötf
("transferÉrror\n");

194 
	`¥ötf
("CMX DMA initializationÉrror\n");

197 
	`DrvLe⁄RTWaôF‹BoŸ
();

199 
	`DrvLe⁄RTWaôExecuti⁄
();

200 
	`exô
(0);

201 
	}
}

203 #¥agm®
GCC
 
dügno°ic
 
p›


	@HowTo/CmxDmaTransfers/leon/rtems_config.h

9 #i‚de‡
_RTEMS_CONFIG_H_


10 
	#_RTEMS_CONFIG_H_


	)

14 
	~<πems.h
>

15 
	~<πems/b•Io.h
>

16 
	~"≠p_c⁄fig.h
"

17 
	~"ÁèlExãnsi⁄.h
"

21 #i‡
deföed
(
__RTEMS__
)

23 #i‡!
deföed
 (
__CONFIG__
)

24 
	#__CONFIG__


	)

27 
	#CONFIGURE_INIT


	)

29 #i‚de‡
RTEMS_POSIX_API


30 
	#RTEMS_POSIX_API


	)

33 
	#CONFIGURE_MICROSECONDS_PER_TICK
 1000

	)

35 
	#CONFIGURE_TICKS_PER_TIMESLICE
 10

	)

37 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

39 
	#CONFIGURE_APPLICATION_NEEDS_CLOCK_DRIVER


	)

41 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

43 
	#CONFIGURE_MINIMUM_TASK_STACK_SIZE
 4096

	)

45 
	#CONFIGURE_MAXIMUM_TASKS
 4

	)

47 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 4

	)

49 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 8

	)

51 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 8

	)

53 
	#CONFIGURE_MAXIMUM_SEMAPHORES
 8

	)

55 
	#CONFIGURE_MAXIMUM_POSIX_MESSAGE_QUEUES
 8

	)

57 
	#CONFIGURE_MAXIMUM_POSIX_TIMERS
 4

	)

59 
	#CONFIGURE_MAXIMUM_TIMERS
 4

	)

63 
	#CONFIGURE_MAXIMUM_USER_EXTENSIONS
 1

	)

64 
	#CONFIGURE_INITIAL_EXTENSIONS
 { .
Áèl
 = 
F©Æ_exãnsi⁄
 }

	)

66 *
POSIX_Inô
 (*
¨gs
);

68 
	~<πems/c⁄fdefs.h
>

73 
BSP_SET_CLOCK
(
OSC_CLK_KHZ
, 
SYS_CLK_KHZ
, 1, 1, 
DEFAULT_CORE_CSS_DSS_CLOCKS
, 
APP_MSS_CLOCKS
, 
APP_UPA_CLOCKS
, 0x0, 0x0);

76 
BSP_SET_L2C_CONFIG
(1, 
L2C_REPL_LRU
, 0, 
L2C_MODE_COPY_BACK
, 0, 
NULL
);

	@HowTo/CmxDmaTransfers/leon_rt/app_config.c

13 
	~"≠p_c⁄fig.h
"

14 
	~"DrvC¥.h
"

15 
	~"DrvTimî.h
"

33 
	$öôClocksAndMem‹y
()

35 
s32
 
sc
;

36 
sc
 = 
	`DrvC¥InôClocks
(
SYS_CLK_KHZ
, 0, 0, 0, 0);

38 if(
sc
)

39  
sc
;

40 
sc
 = 
	`DrvTimîInô
();

41 if(
sc
)

42  
sc
;

44 
	}
}

	@HowTo/CmxDmaTransfers/leon_rt/app_config.h

13 #i‚de‡
APP_CONFIG_H


14 
	#APP_CONFIG_H


	)

18 
	~"mv_ty≥s.h
"

22 
	#SYS_CLK_KHZ
 12000

23 

	)

30 
öôClocksAndMem‹y
();

	@HowTo/CmxDmaTransfers/leon_rt/main.c

12 
	~<°dio.h
>

13 
	~<°rög.h
>

14 
	~<öây≥s.h
>

15 
	~"DrvC¥.h
"

16 
	~"DrvTimî.h
"

17 
	~"DrvLe⁄.h
"

18 
	~"≠p_c⁄fig.h
"

19 
	~"swcLe⁄Utûs.h
"

20 
	~"DrvCdma.h
"

21 
	~"swcShaveLﬂdî.h
"

22 
	~"sh¨ed_c⁄fig.h
"

26 
	#LIST_SIZE
 10

	)

27 
	#SRC_MAX_BUFF_SIZE
 (32 * 1024)

	)

28 
	#DST_MAX_BUFF_SIZE
 (
LIST_SIZE
 * 
SRC_MAX_BUFF_SIZE
)

	)

30 *
	tshaveFunc
(
	tuöt8_t
*, uöt8_t*, 
	tuöt32_t
);

31 *
	tshaveSåideFunc
(
	tuöt8_t
*, uöt8_t*, 
	tuöt32_t
, uint32_t,

32 
	tuöt32_t
, uint32_t, uint32_t);

36 
shaveFunc
 
cdma0_cmxDmaSim∂eTønß˘i⁄
;

37 
shaveFunc
 
cdma1_cmxDmaSim∂eTønß˘i⁄
;

38 
shaveFunc
 
cdma2_cmxDmaSim∂eTønß˘i⁄
;

39 
shaveFunc
 
cdma3_cmxDmaSim∂eTønß˘i⁄
;

40 
shaveFunc
 
cdma4_cmxDmaSim∂eTønß˘i⁄
;

41 
shaveFunc
 
cdma5_cmxDmaSim∂eTønß˘i⁄
;

42 
shaveFunc
 
cdma6_cmxDmaSim∂eTønß˘i⁄
;

43 
shaveFunc
 
cdma7_cmxDmaSim∂eTønß˘i⁄
;

44 
shaveFunc
 
cdma8_cmxDmaSim∂eTønß˘i⁄
;

45 
shaveFunc
 
cdma9_cmxDmaSim∂eTønß˘i⁄
;

46 
shaveFunc
 
cdma10_cmxDmaSim∂eTønß˘i⁄
;

47 
shaveFunc
 
cdma11_cmxDmaSim∂eTønß˘i⁄
;

49 
shaveFunc
 
cdma0_cmxDmaLi°Tønß˘i⁄
;

50 
shaveFunc
 
cdma1_cmxDmaLi°Tønß˘i⁄
;

51 
shaveFunc
 
cdma2_cmxDmaLi°Tønß˘i⁄
;

52 
shaveFunc
 
cdma3_cmxDmaLi°Tønß˘i⁄
;

53 
shaveFunc
 
cdma4_cmxDmaLi°Tønß˘i⁄
;

54 
shaveFunc
 
cdma5_cmxDmaLi°Tønß˘i⁄
;

55 
shaveFunc
 
cdma6_cmxDmaLi°Tønß˘i⁄
;

56 
shaveFunc
 
cdma7_cmxDmaLi°Tønß˘i⁄
;

57 
shaveFunc
 
cdma8_cmxDmaLi°Tønß˘i⁄
;

58 
shaveFunc
 
cdma9_cmxDmaLi°Tønß˘i⁄
;

59 
shaveFunc
 
cdma10_cmxDmaLi°Tønß˘i⁄
;

60 
shaveFunc
 
cdma11_cmxDmaLi°Tønß˘i⁄
;

62 
shaveSåideFunc
 
cdma0_cmxDmaSåideTønß˘i⁄
;

63 
shaveSåideFunc
 
cdma1_cmxDmaSåideTønß˘i⁄
;

64 
shaveSåideFunc
 
cdma2_cmxDmaSåideTønß˘i⁄
;

65 
shaveSåideFunc
 
cdma3_cmxDmaSåideTønß˘i⁄
;

66 
shaveSåideFunc
 
cdma4_cmxDmaSåideTønß˘i⁄
;

67 
shaveSåideFunc
 
cdma5_cmxDmaSåideTønß˘i⁄
;

68 
shaveSåideFunc
 
cdma6_cmxDmaSåideTønß˘i⁄
;

69 
shaveSåideFunc
 
cdma7_cmxDmaSåideTønß˘i⁄
;

70 
shaveSåideFunc
 
cdma8_cmxDmaSåideTønß˘i⁄
;

71 
shaveSåideFunc
 
cdma9_cmxDmaSåideTønß˘i⁄
;

72 
shaveSåideFunc
 
cdma10_cmxDmaSåideTønß˘i⁄
;

73 
shaveSåideFunc
 
cdma11_cmxDmaSåideTønß˘i⁄
;

77 
u8
 
__©åibuã__
((
£˘i⁄
(".cmx_dúe˘.d©a"))Ë
	g§c_buff
[
SRC_MAX_BUFF_SIZE
];

78 
u8
 
__©åibuã__
((
£˘i⁄
(".ddr_dúe˘.d©a"))Ë
	gd°_buff
[
DST_MAX_BUFF_SIZE
];

79 
DrvCmxDmaTønß˘i⁄
 
	gli°1
[
LIST_SIZE
] 
__©åibuã__
((
£˘i⁄
(".cmx_direct.bss")));

80 
DrvCmxDmaTønß˘i⁄
 
	gli°2
[
LIST_SIZE
] 
__©åibuã__
((
£˘i⁄
(".cmx_direct.bss")));

81 
DrvCmxDmaTønß˘i⁄Hnd
 
	gh™dÀ
[
LIST_SIZE
];

84 
uöt8_t
 
	g§c_buff_shv
[
USED_SHAVES_NO
][
SHV_SRC_BUFF_SIZE
] 
__©åibuã__
((
£˘i⁄
(".cmx_direct.bss")));

85 
uöt8_t
 
	gd°_buff_shv
[
USED_SHAVES_NO
][
SHV_DST_BUFF_SIZE
] 
__©åibuã__
((
£˘i⁄
(".ddr_direct.bss")));

86 c⁄° 
uöt32_t
 
	gkU£dShave
[
USED_SHAVES_NO
] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11};

87 
shaveFunc
 *
	gkFuncTabÀSim∂e
[
USED_SHAVES_NO
] = {

88 &
cdma0_cmxDmaSim∂eTønß˘i⁄
,

89 &
cdma1_cmxDmaSim∂eTønß˘i⁄
,

90 &
cdma2_cmxDmaSim∂eTønß˘i⁄
,

91 &
cdma3_cmxDmaSim∂eTønß˘i⁄
,

92 &
cdma4_cmxDmaSim∂eTønß˘i⁄
,

93 &
cdma5_cmxDmaSim∂eTønß˘i⁄
,

94 &
cdma6_cmxDmaSim∂eTønß˘i⁄
,

95 &
cdma7_cmxDmaSim∂eTønß˘i⁄
,

96 &
cdma8_cmxDmaSim∂eTønß˘i⁄
,

97 &
cdma9_cmxDmaSim∂eTønß˘i⁄
,

98 &
cdma10_cmxDmaSim∂eTønß˘i⁄
,

99 &
cdma11_cmxDmaSim∂eTønß˘i⁄


102 
shaveSåideFunc
 *
	gkFuncTabÀSåide
[
USED_SHAVES_NO
] = {

103 &
cdma0_cmxDmaSåideTønß˘i⁄
,

104 &
cdma1_cmxDmaSåideTønß˘i⁄
,

105 &
cdma2_cmxDmaSåideTønß˘i⁄
,

106 &
cdma3_cmxDmaSåideTønß˘i⁄
,

107 &
cdma4_cmxDmaSåideTønß˘i⁄
,

108 &
cdma5_cmxDmaSåideTønß˘i⁄
,

109 &
cdma6_cmxDmaSåideTønß˘i⁄
,

110 &
cdma7_cmxDmaSåideTønß˘i⁄
,

111 &
cdma8_cmxDmaSåideTønß˘i⁄
,

112 &
cdma9_cmxDmaSåideTønß˘i⁄
,

113 &
cdma10_cmxDmaSåideTønß˘i⁄
,

114 &
cdma11_cmxDmaSåideTønß˘i⁄


117 
shaveFunc
 *
	gkFuncTabÀLi°
[
USED_SHAVES_NO
] = {

118 &
cdma0_cmxDmaLi°Tønß˘i⁄
,

119 &
cdma1_cmxDmaLi°Tønß˘i⁄
,

120 &
cdma2_cmxDmaLi°Tønß˘i⁄
,

121 &
cdma3_cmxDmaLi°Tønß˘i⁄
,

122 &
cdma4_cmxDmaLi°Tønß˘i⁄
,

123 &
cdma5_cmxDmaLi°Tønß˘i⁄
,

124 &
cdma6_cmxDmaLi°Tønß˘i⁄
,

125 &
cdma7_cmxDmaLi°Tønß˘i⁄
,

126 &
cdma8_cmxDmaLi°Tønß˘i⁄
,

127 &
cdma9_cmxDmaLi°Tønß˘i⁄
,

128 &
cdma10_cmxDmaLi°Tønß˘i⁄
,

129 &
cdma11_cmxDmaLi°Tønß˘i⁄


137 
	$fûlBuf„r
(
uöt8_t
 *
buff
, 
uöt32_t
 
size
) {

138 
uöt32_t
 
i
;

140 
i
 = 0; i < 
size
; i++) {

141 
buff
[
i
] = i % 256;

143 
	}
}

145 
öt32_t
 
	$°rideCom∑ª
(

146 
uöt8_t
 *
§c
, uöt8_à*
d°
,

147 
uöt32_t
 
§c_width
, uöt32_à
d°_width
,

148 
uöt32_t
 
§c_°ride
, uöt32_à
d°_°ride
,

149 
uöt32_t
 
size
) {

150 
uöt32_t
 
§c_idx
 = 0;

151 
uöt32_t
 
d°_idx
 = 0;

152 
uöt8_t
 *
§c_±r
 = 
§c
;

153 
uöt8_t
 *
d°_±r
 = 
d°
;

155 i‡(
§c_±r
[
§c_idx
] !
d°_±r
[
d°_idx
]) {

156 
	`¥ötf
("Fú°Éº‹: srcIdx %"
PRIu32
" dstIdx %"PRIu32

158 
§c_idx
, 
d°_idx
, 
§c_±r
[§c_idx], 
d°_±r
[dst_idx]);

161 
§c_idx
++;

162 i‡(
§c_idx
 % 
§c_width
 == 0) {

163 
§c_idx
 = 0;

164 
§c_±r
 +
§c_°ride
;

166 
d°_idx
++;

167 i‡(
d°_idx
 % 
d°_width
 == 0) {

168 
d°_idx
 = 0;

169 
d°_±r
 +
d°_°ride
;

171 
size
--;

172 } 
size
 > 0);

174 
	}
}

176 
	$com∂ëi⁄CÆlback
(
DrvCmxDmaTønß˘i⁄Hnd
 *
h™dÀ
, * 
˘x
) {

177 
	`UNUSED
(
h™dÀ
);

178 
uöt32_t
 
size
 = (uöt32_t)
˘x
;

179 i‡(
	`memcmp
(
§c_buff
, 
d°_buff
, 
size
) == 0)

180 
	`¥ötf
("transfer finished successfully\n");

182 
	`¥ötf
("transferÉrror\n");

183 
	}
}

185 
	$cmxDmaSim∂eTønß˘i⁄
(
uöt32_t
 
å™s„r_size
) {

186 
	`fûlBuf„r
(
§c_buff
, 
å™s„r_size
);

188 
	`DrvCmxDmaCª©eTønß˘i⁄
(&
h™dÀ
[0], &
li°1
[0],

189 
§c_buff
, 
d°_buff
, 
å™s„r_size
);

190 
	`DrvCmxDmaSèπTøns„r
(&
h™dÀ
[0],

191 
com∂ëi⁄CÆlback
, (*)
å™s„r_size
);

192 
	`DrvCmxDmaWaôTønß˘i⁄
(&
h™dÀ
[0]);

193 
	}
}

195 
öt32_t
 
	$cmxDmaSåideTønß˘i⁄
(

196 
uöt32_t
 
§c_width
, uöt32_à
d°_width
,

197 
uöt32_t
 
§c_°ride
, uöt32_à
d°_°ride
,

198 
uöt32_t
 
size
) {

199 
DrvCmxDmaTønß˘i⁄Hnd
 
h™dÀ
;

201 
	`fûlBuf„r
(
§c_buff
, 
SRC_BUFF_SIZE
);

202 
	`mem£t
(
d°_buff
, 0, 
DST_BUFF_SIZE
);

204 
	`DrvCmxDmaCª©eSåideTønß˘i⁄
(&
h™dÀ
, &
li°1
[0],

205 
§c_buff
, 
d°_buff
,

206 
§c_width
, 
d°_width
,

207 
§c_°ride
, 
d°_°ride
, 
size
);

208 
	`DrvCmxDmaSèπTøns„r
(&
h™dÀ
, 
NULL
, NULL);

209 
	`DrvCmxDmaWaôTønß˘i⁄
(&
h™dÀ
);

211  
	`°rideCom∑ª
(
§c_buff
, 
d°_buff
, 
§c_width
, 
d°_width
,

212 
§c_°ride
, 
d°_°ride
, 
size
);

213 
	}
}

215 
öt32_t
 
	$cmxDmaLi°Tønß˘i⁄
(
uöt32_t
 
å™s„r_size
,

216 
uöt32_t
 
li°1_size
, uöt32_à
li°2_size
) {

217 
uöt32_t
 
i
;

219 
uöt8_t
 *
±r_l2_d°
;

220 
	`fûlBuf„r
(
§c_buff
, 
å™s„r_size
);

221 
	`mem£t
(
d°_buff
, 0, 
DST_BUFF_SIZE
);

222 
DrvCmxDmaTønß˘i⁄Hnd
 
hnd1
, 
hnd2
;

225 
	`DrvCmxDmaCª©eTønß˘i⁄
(&
hnd1
, &
li°1
[0],

226 
§c_buff
, 
d°_buff
, 
å™s„r_size
);

227 
i
 = 1; i < 
li°1_size
; i++) {

228 
	`DrvCmxDmaAddTønß˘i⁄
–&
hnd1
, &
li°1
[
i
],

229 
§c_buff
, 
d°_buff
 + 
i
 * 
å™s„r_size
,Åransfer_size);

233 
±r_l2_d°
 = 
d°_buff
 + 
li°2_size
 * 
å™s„r_size
;

234 
	`DrvCmxDmaCª©eTønß˘i⁄
(&
hnd2
, &
li°2
[0],

235 
§c_buff
, 
±r_l2_d°
, 
å™s„r_size
);

236 
i
 = 1; i < 
li°2_size
; i++) {

237 
	`DrvCmxDmaAddTønß˘i⁄
–&
hnd2
, &
li°2
[
i
],

238 
§c_buff
, 
±r_l2_d°
 + 
i
 * 
å™s„r_size
,Åransfer_size);

242 
	`DrvCmxDmaLökTønß˘i⁄s
(&
hnd1
, 2, &hnd1, &
hnd2
);

244 
	`DrvCmxDmaSèπTøns„r
(&
hnd1
, 
NULL
, NULL);

245 
	`DrvCmxDmaWaôTønß˘i⁄
(&
hnd1
);

247 
i
 = 0; i < 
li°1_size
 + 
li°2_size
; i++)

248 i‡(
	`memcmp
(
§c_buff
, 
d°_buff
 + 
i
 * 
å™s„r_size
,Åransfer_size) != 0)

251 
	}
}

254 
	$°¨tShaveTe°s
(
shaveFunc
 *
func_èbÀ
[]) {

255 
uöt32_t
 
i
;

258 
i
 = 0; i < 
USED_SHAVES_NO
; i++) {

259 
	`fûlBuf„r
(
§c_buff_shv
[
i
], 
SHV_SRC_BUFF_SIZE
);

260 
	`mem£t
(
d°_buff_shv
[
i
], 0xFF, 
SHV_DST_BUFF_SIZE
);

262 
i
 = 0; i < 
USED_SHAVES_NO
; i++)

264 
	`swcRe£tShave
(
kU£dShave
[
i
]);

265 
	`swcSëAbsﬁuãDeÁu…Sèck
(
kU£dShave
[
i
]);

266 
	`swcSèπShaveCC
(
kU£dShave
[
i
], (
uöt32_t
)
func_èbÀ
[i], "iii",

267 (
uöt32_t
)
§c_buff_shv
[
i
], (uöt32_t)
d°_buff_shv
[i], 
SHV_TRANSFER_SIZE
);

269 
i
 = 0; i < 
USED_SHAVES_NO
; i++) {

270 
	`swcWaôShave
(
kU£dShave
[
i
]);

272 
	}
}

274 
	$shaveSim∂eTøns„rsCheck
() {

275 
uöt32_t
 
i
;

277 
i
 = 0; i < 
USED_SHAVES_NO
; i++) {

278 
	`¥ötf
("SHAVE: %"
PRIu32
": ", 
kU£dShave
[
i
]);

279 i‡(
	`memcmp
(
§c_buff_shv
[
i
], 
d°_buff_shv
[i], 
SHV_TRANSFER_SIZE
) == 0)

280 
	`¥ötf
("transfer completed successfully\n");

282 
	`¥ötf
("transferÉrror\n");

284 
	}
}

286 
	$shaveLi°Tøns„rsCheck
() {

287 
uöt32_t
 
i
, 
j
;

288 
öt32_t
 
îr_˙t
;

290 
i
 = 0; i < 
USED_SHAVES_NO
; i++) {

291 
îr_˙t
 = 0;

292 
	`¥ötf
("SHAVE: %"
PRIu32
": ", 
kU£dShave
[
i
]);

293 
j
 = 0; j < 2 * 
LIST_SIZE
; j++) {

294 i‡(
	`memcmp
(
§c_buff_shv
[
i
], 
d°_buff_shv
[i] + 
j
 * 
SHV_TRANSFER_SIZE
,

295 
SHV_TRANSFER_SIZE
) != 0)

296 
îr_˙t
++;

298 i‡(
îr_˙t
 > 0)

299 
	`¥ötf
("transferÉrror\n");

301 
	`¥ötf
("transfer completed successfully\n");

303 
	}
}

305 
	$shaveSåideTe°
(){

306 
uöt32_t
 
i
;

309 
i
 = 0; i < 
USED_SHAVES_NO
; i++) {

310 
	`fûlBuf„r
(
§c_buff_shv
[
i
], 
SHV_SRC_BUFF_SIZE
);

311 
	`mem£t
(
d°_buff_shv
[
i
], 0xFF, 
SHV_DST_BUFF_SIZE
);

313 
i
 = 0; i < 
USED_SHAVES_NO
; i++)

315 
	`swcRe£tShave
(
kU£dShave
[
i
]);

316 
	`swcSëAbsﬁuãDeÁu…Sèck
(
kU£dShave
[
i
]);

317 
	`swcSèπShaveCC
(
kU£dShave
[
i
], (
uöt32_t
)
kFuncTabÀSåide
[i], "iiiiiii",

318 (
uöt32_t
)
§c_buff_shv
[
i
], (uöt32_t)
d°_buff_shv
[i],

319 
SHV_TRANSFER_SIZE
 / 4, SHV_TRANSFER_SIZE / 8,

320 
SHV_TRANSFER_SIZE
 / 4, SHV_TRANSFER_SIZE / 8,

321 
SHV_TRANSFER_SIZE
);

323 
i
 = 0; i < 
USED_SHAVES_NO
; i++) {

324 
	`swcWaôShave
(
kU£dShave
[
i
]);

326 
i
 = 0; i < 
USED_SHAVES_NO
; i++) {

327 
	`¥ötf
("SHAVE: %"
PRIu32
": ", 
kU£dShave
[
i
]);

328 i‡(
	`°rideCom∑ª
(

329 
§c_buff_shv
[
i
], 
d°_buff_shv
[i],

330 
SHV_TRANSFER_SIZE
 / 4, SHV_TRANSFER_SIZE / 8,

331 
SHV_TRANSFER_SIZE
 / 4, SHV_TRANSFER_SIZE / 8,

332 
SHV_TRANSFER_SIZE
) == 0)

333 
	`¥ötf
("transfer completed successfully\n");

335 
	`¥ötf
("transferÉrror\n");

337 
	}
}

339 
	$maö
()

341 
öt32_t
 
°©us
;

343 
°©us
 = 
	`öôClocksAndMem‹y
();

344 if(
°©us
)

345  
°©us
;

346 
	`swcLe⁄SëPIL
(0);

348 
	`DrvLe⁄RTSig«lBoŸCom∂ëed
();

350 
°©us
 = 
	`DrvCmxDmaInôülize
(
NULL
);

352 i‡(
°©us
 =
MYR_DRV_SUCCESS
) {

353 
	`¥ötf
("Running CMX DMAÅransfers on LRT\n\n");

355 
	`¥ötf
("CMX DMA simpleÅransfer: ");

356 i‡(
°©us
 =
MYR_DRV_SUCCESS
)

357 
	`cmxDmaSim∂eTønß˘i⁄
(
SRC_BUFF_SIZE
);

359 
	`¥ötf
("CMX DMA simple strideÅransfer: ");

360 i‡(
	`cmxDmaSåideTønß˘i⁄
(

361 
TRANSFER_SIZE
 / 2, TRANSFER_SIZE / 4,

362 
TRANSFER_SIZE
 / 2, TRANSFER_SIZE / 2,

363 
TRANSFER_SIZE
) == 0)

364 
	`¥ötf
("transfer completed successfully\n");

366 
	`¥ötf
("transferÉrror\n");

368 
	`¥ötf
("CMX DMAÜistÅransfer: ");

369 i‡(
	`cmxDmaLi°Tønß˘i⁄
(
TRANSFER_SIZE
, 
LIST_SIZE
 / 2, LIST_SIZE / 2) == 0)

370 
	`¥ötf
("transfer completed successfully\n");

372 
	`¥ötf
("transferÉrror\n");

375 
	`¥ötf
("Running CMX DMAÅransfers on SHAVEs\n\n");

376 
	`¥ötf
("SimpleÅransfer on SHAVEs\n");

377 
	`°¨tShaveTe°s
(
kFuncTabÀSim∂e
);

378 
	`shaveSim∂eTøns„rsCheck
();

380 
	`¥ötf
("\nStrideÅransfer on SHAVEs\n");

381 
	`shaveSåideTe°
();

383 
	`¥ötf
("\nListÅransfer on SHAVEs\n");

384 
	`°¨tShaveTe°s
(
kFuncTabÀLi°
);

385 
	`shaveLi°Tøns„rsCheck
();

388 
	`¥ötf
("CMX DMA initializationÉrror\n");

391 
	`DrvLe⁄RTSig«lSt›
();

393 
	}
}

	@HowTo/CmxDmaTransfers/shared/shared_config.h

10 #i‚de‡
SHARED_CONFIG_H


11 
	#SHARED_CONFIG_H


	)

18 
	#LIST_NO
 2

	)

19 
	#LIST_SIZE
 10

	)

20 
	#TRANSFER_SIZE
 16 * 1024

	)

21 
	#SRC_BUFF_SIZE
 
TRANSFER_SIZE


	)

22 
	#DST_BUFF_SIZE
 (
LIST_NO
 * 
LIST_SIZE
 * 
SRC_BUFF_SIZE
)

	)

24 
	#USED_SHAVES_NO
 12

	)

26 
	#SHV_LIST_NO
 3

	)

27 
	#SHV_LIST_SIZE
 16

	)

28 
	#SHV_TRANSFER_SIZE
 8 * 1024

	)

29 
	#SHV_SRC_BUFF_SIZE
 
SHV_TRANSFER_SIZE


	)

30 
	#SHV_DST_BUFF_SIZE
 (
SHV_LIST_NO
 * 
SHV_LIST_SIZE
 * 
SHV_TRANSFER_SIZE
)

	)

	@HowTo/CmxDmaTransfers/shaveApps/cdma/shaveMain.c

9 
	~<°dio.h
>

10 
	~<°döt.h
>

11 
	~<°rög.h
>

12 
	~<öây≥s.h
>

13 
	~"scCmxDma.h
"

14 
	~"svuComm⁄Shave.h
"

15 
	~"swcWhoAmI.h
"

16 
	~"sh¨ed_c⁄fig.h
"

18 
	#SHAVE_ITER_NUM
 100

	)

20 
ScCmxDmaTønß˘i⁄
 
	gli°1
[
SHV_LIST_SIZE
];

21 
ScCmxDmaTønß˘i⁄
 
	gli°2
[
SHV_LIST_SIZE
];

23 
	$E¡ry
(){
	}
}

25 
__©åibuã__
((
dŒexp‹t
))

26 
	$cmxDmaSim∂eTønß˘i⁄
(
uöt8_t
 *
§c_buff
, uöt8_à*
d°_buff
, 
uöt32_t
 
size
) {

27 
ScCmxDmaTønß˘i⁄Hnd
 
h™dÀ
;

29 
	`ScCmxDmaInôülize
(
NULL
);

30 
	`ScCmxDmaCª©eTønß˘i⁄
(&
h™dÀ
, &
li°1
[0], 
§c_buff
, 
d°_buff
, 
size
);

31 
	`ScCmxDmaSèπTøns„r
(&
h™dÀ
);

32 
	`ScCmxDmaWaôTønß˘i⁄
(&
h™dÀ
);

34 
SHAVE_HALT
;

35 
	}
}

37 
__©åibuã__
((
dŒexp‹t
))

38 
öt32_t
 
	$cmxDmaSåideTønß˘i⁄
(

39 
uöt8_t
 *
§c_buff
, uöt8_à*
d°_buff
,

40 
uöt32_t
 
§c_width
, uöt32_à
d°_width
,

41 
uöt32_t
 
§c_°ride
, uöt32_à
d°_°ride
,

42 
uöt32_t
 
size
) {

43 
ScCmxDmaTønß˘i⁄Hnd
 
h™dÀ
;

45 
	`ScCmxDmaCª©eSåideTønß˘i⁄
(&
h™dÀ
, &
li°1
[0],

46 
§c_buff
, 
d°_buff
,

47 
§c_width
, 
d°_width
,

48 
§c_°ride
, 
d°_°ride
, 
size
);

49 
	`ScCmxDmaSèπTøns„r
(&
h™dÀ
);

50 
	`ScCmxDmaWaôTønß˘i⁄
(&
h™dÀ
);

52 
SHAVE_HALT
;

53 
	}
}

55 
__©åibuã__
((
dŒexp‹t
))

56 
	$cmxDmaLi°Tønß˘i⁄
(
uöt8_t
 *
§c_buff
, uöt8_à*
d°_buff
, 
uöt32_t
 
size
) {

57 
uöt32_t
 
i
;

58 
ScCmxDmaTønß˘i⁄Hnd
 
l1
;

59 
ScCmxDmaTønß˘i⁄Hnd
 
l2
;

61 
	`ScCmxDmaInôülize
(
NULL
);

62 
	`ScCmxDmaCª©eTønß˘i⁄
(&
l1
, &
li°1
[0],

63 
§c_buff
, 
d°_buff
, 
size
);

64 
	`ScCmxDmaCª©eTønß˘i⁄
(&
l2
, &
li°2
[0],

65 
§c_buff
, 
d°_buff
 + 
SHV_LIST_SIZE
 * 
size
, size);

67 
i
 = 1; i < 
SHV_LIST_SIZE
; i++) {

68 
	`ScCmxDmaAddTønß˘i⁄
(&
l1
, &
li°1
[
i
],

69 
§c_buff
, 
d°_buff
 + 
i
 * 
size
, size);

70 
	`ScCmxDmaAddTønß˘i⁄
(&
l2
, &
li°2
[
i
],

71 
§c_buff
, 
d°_buff
 + (
SHV_LIST_SIZE
 * 
size
Ë+ 
i
 * size, size);

74 
	`ScCmxDmaSèπTøns„r
(&
l1
);

75 
	`ScCmxDmaSèπTøns„r
(&
l2
);

77 
	`ScCmxDmaWaôTønß˘i⁄
(&
l1
);

78 
	`ScCmxDmaWaôTønß˘i⁄
(&
l2
);

80 
SHAVE_HALT
;

81 
	}
}

	@HowTo/Cpp/CppExample/leon/app_config.c

12 
	~<DrvC¥.h
>

13 
	~<DrvShaveL2Cache.h
>

14 
	~"≠p_c⁄fig.h
"

18 
	#L2CACHE_CFG
 (
SHAVE_L2CACHE_NORMAL_MODE
)

	)

27 
	$öôClocksAndMem‹y
()

29 
s32
 
sc
;

30 
tyAuxClkDividîCfg
 
auxClkAŒOn
[] =

32 {
AUX_CLK_MASK_UART
, 
CLK_SRC_REFCLK0
, 96, 625},

36 
tySocClockC⁄fig
 
≠pClockC⁄fig600_266
 =

38 .
ªfClk0I≈utKhz
 = 12000,

39 .
ªfClk1I≈utKhz
 = 0,

40 .
èrgëPŒ0FªqKhz
 = 266000,

41 .
èrgëPŒ1FªqKhz
 = 0,

42 .
˛kSrcPŒ1
 = 
CLK_SRC_REFCLK0
,

43 .
ma°îClkDivNumî©‹
 = 1,

44 .
ma°îClkDivDíomö©‹
 = 1,

45 .
cssDssClockE«bÀMask
 = 
DEFAULT_CORE_CSS_DSS_CLOCKS
,

46 .
mssClockE«bÀMask
 = 0,

47 .
u∑ClockE«bÀMask
 = 0,

48 .
pAuxClkCfg
 = 
auxClkAŒOn
,

51 
sc
 = 
	`DrvC¥Inô
();

52 if(
sc
)

53  
sc
;

54 
sc
 = 
	`DrvC¥SëupClocks
(&
≠pClockC⁄fig600_266
);

55 if(
sc
)

56  
sc
;

59 
sc
 = 
	`DrvShaveL2CacheSëMode
(
L2CACHE_CFG
);

60 if(
sc
)

61  
sc
;

64 
	`DrvShaveL2CacheSëupP¨tôi⁄
(
SHAVEPART256KB
);

67 
sc
 = 
	`DrvShaveL2CacheAŒoˇãSëP¨tôi⁄s
();

68 if(
sc
)

69  
sc
;

71 
	`DrvShaveL2CacheP¨tôi⁄InvÆid©e
(
PARTITION_0
);

74 
	}
}

	@HowTo/Cpp/CppExample/leon/app_config.h

13 #i‚de‡
APP_CONFIG_H


14 
	#APP_CONFIG_H


	)

18 
	~"mv_ty≥s.h
"

22 #ifde‡
__˝lu•lus


26 
	#APP_MSS_CLOCKS
 (
DEV_MSS_APB_SLV
 | \

27 
DEV_MSS_APB2_CTRL
 | \

28 
DEV_MSS_RTBRIDGE
 | \

29 
DEV_MSS_RTAHB_CTRL
 | \

30 
DEV_MSS_LRT
 | \

31 
DEV_MSS_LRT_DSU
 | \

32 
DEV_MSS_LRT_L2C
 | \

33 
DEV_MSS_LRT_ICB
 | \

34 
DEV_MSS_AXI_BRIDGE
 | \

35 
DEV_MSS_MXI_CTRL
 | \

36 
DEV_MSS_MXI_DEFSLV
 | \

37 
DEV_MSS_AXI_MON
 | \

38 
DEV_MSS_TIM
 )

	)

40 
	#APP_UPA_CLOCKS
 (
DEV_UPA_SH0
 | \

41 
DEV_UPA_SHAVE_L2
 | \

42 
DEV_UPA_CDMA
 | \

43 
DEV_UPA_CTRL
 )

	)

46 
	#PARTITION_0
 (0)

	)

54 
öôClocksAndMem‹y
();

56 #ifde‡
__˝lu•lus


	@HowTo/Cpp/CppExample/leon/main.cpp

9 
	~<°dio.h
>

10 
	~<ªgi°îsMyrüd.h
>

11 
	~"mv_ty≥s.h
"

12 
	~"≠p_c⁄fig.h
"

13 
	~"mvHñ≥rsApi.h
"

14 
	~<°dlib.h
>

15 
	~<°rög.h
>

16 
	~<as£π.h
>

17 
	~<UnôTe°Api.h
>

19 
usög
 
«me•a˚
 
	g°d
;

21 
	~<io°ªam
>

22 
	~<°rög
>

24 ˛as†
	cSu≥rCœss
 {

25 
	mpublic
:

26 c⁄° *
whîe
;

27 
	$Su≥rCœss
(c⁄° *
whîe
)

29 
this
->
whîe
 = where;

30 
	`¥ötf
("C⁄°ru˘ög obje˘ o¿%s,áàaddªs†0x%08x!\n", 
whîe
, ()
this
);

32 ~
	$Su≥rCœss
()

34 
	`¥ötf
("De°royög obje˘ o¿%s,áàaddªs†0x%08x!\n", 
whîe
, ()
this
);

35 
	}
}

36 
vútuÆ
 
fun
() = 0;

39 ˛as†
	cSubCœss
 : 
public
 
Su≥rCœss
 {

40 
public
:

42 
	$SubCœss
(c⁄° *
whîe
Ë: 
	$Su≥rCœss
(
whîe
)

47 
vútuÆ
 
	$fun
() {

48 
	`¥ötf
("Ovîriddí fun˘i⁄ (obj o¿%s), obj @ 0x%08x\n", 
whîe
, ()(
this
));

49 
	}
}

52 
SubCœss
 
	gglob
 = SubClass("global");

53 
SubCœss
 
	gglob2
 = SubClass("global2");

55 
	$maö
(
¨gc
, * 
¨gv
[])

57 
	`UNUSED
(
¨gc
);

58 
	`UNUSED
(
¨gv
);

60 
°rög
 
my«me
;

61 
ã°I≈ut
[20];

62 
s32
 
sc
;

64 
sc
 = 
	`öôClocksAndMem‹y
();

65 if(
sc
)

66  
sc
;

67 
	`unôTe°Inô
 ();

68 
	`mem˝y
((*)
ã°I≈ut
,(const *)"Myriad2 String\n",20);

69 
	`mvSëRódPoöãr
(
ã°I≈ut
);

71 
cout
 << "YourÇame:";

73 
	`gëlöe
(
cö
,
my«me
);

74 
cout
 << "Hñlÿ"<< 
my«me
 << "!" << 
ídl
;

76 
SubCœss
 
x
 = 
	`SubCœss
("stack");

77 
Su≥rCœss
 * 
y
 = &
x
;

79 
y
->
	`fun
();

89 
glob
.
	`fun
();

92 
	`¥ötf
("After block where object isállocated on stack,\n (destructor should have been called)\n");

93 
	`unôTe°FöÆRï‹t
 ();

96 
	}
}

	@HowTo/Cpp/cppRtems_LosLrtShave/leon/app_config.cpp

12 
	~<OsDrvShaveL2Cache.h
>

13 
	~<OsDrvC¥.h
>

16 
	~"≠p_c⁄fig.h
"

20 
	#L2CACHE_CFG
 (
SHAVE_L2CACHE_NORMAL_MODE
)

	)

34 
	$öôClocksAndMem‹y
()

36 
s32
 
sc
;

38 
tyAuxClkDividîCfg
 
auxClkAŒOn
[] =

40 {
AUX_CLK_MASK_UART
, 
CLK_SRC_REFCLK0
, 96, 625},

41 {0,(
tyC¥ClockSrc
)0,0,0},

45 
sc
 = 
	`OsDrvC¥Inô
();

46 if(
sc
)

47  
sc
;

48 
sc
 = 
	`OsDrvC¥O≥n
();

49 if(
sc
)

50  
sc
;

51 
sc
 = 
	`OsDrvC¥AuxClockAºayC⁄fig
(
auxClkAŒOn
);

52 if(
sc
)

53  
sc
;

55 
sc
 = 
	`OsDrvShaveL2CacheInô
((
osDrvShaveL2CacheModes_t
)
SHAVE_L2CACHE_NORMAL_MODE
);

56 if(
sc
)

57  
sc
;

60 
∑πôi⁄_id
;

61 
	`OsDrvShaveL2CGëP¨tôi⁄
(
SHAVEPART256KB
, &
∑πôi⁄_id
);

64 
sc
 = 
	`OsDrvShaveL2CacheAŒoˇãSëP¨tôi⁄s
();

65 if(
sc
)

66  
sc
;

69 
i
 = 0; i < 
SHAVES_USED
; i++)

71 
	`OsDrvShaveL2CSëN⁄WödowedP¨tôi⁄
((
shaveId_t
)
i
, 0, 
NON_WINDOWED_DATA_PARTITION
);

72 
	`OsDrvShaveL2CSëN⁄WödowedP¨tôi⁄
((
shaveId_t
)
i
, 0, 
NON_WINDOWED_INSTRUCTIONS_PARTITION
);

75 
	`OsDrvShaveL2CacheP¨tôi⁄InvÆid©e
(0);

78 
	}
}

	@HowTo/Cpp/cppRtems_LosLrtShave/leon/app_config.h

9 #i‚de‡
_APP_CONFIG_H_


10 
	#_APP_CONFIG_H_


	)

17 
	#APP_UPA_CLOCKS
 (
DEV_UPA_SH0
 | \

18 
DEV_UPA_SHAVE_L2
 | \

19 
DEV_UPA_CDMA
 | \

20 
DEV_UPA_CTRL
 )

	)

22 
	#EXTRACLOCKS
 (
DEV_MSS_APB_SLV
 | \

23 
DEV_MSS_APB2_CTRL
 | \

24 
DEV_MSS_RTBRIDGE
 | \

25 
DEV_MSS_RTAHB_CTRL
 | \

26 
DEV_MSS_LRT
 | \

27 
DEV_MSS_LRT_DSU
 | \

28 
DEV_MSS_LRT_L2C
 | \

29 
DEV_MSS_LRT_ICB
 | \

30 
DEV_MSS_AXI_BRIDGE
 | \

31 
DEV_MSS_MXI_CTRL
 )

	)

33 
	#SHAVES_USED
 (1)

	)

44 
öôClocksAndMem‹y
();

	@HowTo/Cpp/cppRtems_LosLrtShave/leon/main.cpp

11 
	~<°dio.h
>

12 
	~<°dlib.h
>

13 
	~<≠p_c⁄fig.h
>

14 
	~<DrvC¥.h
>

15 
	~<DrvLe⁄.h
>

16 
	~<±hªad.h
>

17 
	~<UnôTe°Api.h
>

23 
u32
 
Ãt_°¨t
;

24 
Ãt_msgbuff
[128];

28 
	grc1
;

29 
±hªad_t
 
	gthªad1
;

33 *
fun˘i⁄C
(*
±r
);

37 "C" *
	$POSIX_Inô
 (*
¨gs
)

39 
	`UNUSED
(
¨gs
);

41 
±hªad_©å_t
 
©å
;

42 
s32
 
sc
;

44 
sc
 = 
	`öôClocksAndMem‹y
();

45 if(
sc
)

46 
	`exô
(
sc
);

48 
	`unôTe°Inô
 ();

49 
	`¥ötf
 ("RTEMS POSIX Started\n");

51 
sc
 = 
	`±hªad_©å_öô
(&
©å
);

52 if(
sc
) {

53 
	`¥ötf
("pthread_attr_initÉrror");

54 
	`exô
(
sc
);

56 
sc
 = 
	`±hªad_©å_£töhîôsched
(&
©å
, 
PTHREAD_EXPLICIT_SCHED
);

57 if(
sc
) {

58 
	`¥ötf
("pthread_attr_setinheritschedÉrror");

59 
	`exô
(
sc
);

61 
sc
 = 
	`±hªad_©å_£tschedpﬁicy
(&
©å
, 
SCHED_RR
);

62 if(
sc
) {

63 
	`¥ötf
("pthread_attr_setschedpolicyÉrror");

64 
	`exô
(
sc
);

67 i‡((
rc1
=
	`±hªad_¸óã
–&
thªad1
, &
©å
, 
fun˘i⁄C
, &
Ãt_°¨t
))) {

68 
	`¥ötf
("Thªad 1 cª©i⁄ faûed: %d\n", 
rc1
);

69 
	`exô
(
rc1
);

72 
	`¥ötf
("Thread 1 created\n");

75 if(
	`±hªad_joö
–
thªad1
, 
NULL
)) {

76 
	`¥ötf
("pthread_joinÉrror!\n");

80 
	`exô
(0);

81 
	}
}

83 *
	$fun˘i⁄C
(*
±r
){

85 
	`¥ötf
("Le⁄RT Sèπ Addr: 0x%X\n", 
ªöãΩªt_ˇ°
 < > (
±r
) );

87 
	`DrvLe⁄RTSèπup
((
u32
)
±r
);

88 
	`DrvLe⁄RTWaôExecuti⁄
();

90 
	`¥ötf
("%s", 
Ãt_msgbuff
);

91 
	`¥ötf
("LeonRT Stop.\n");

92 
	`unôTe°FöÆRï‹t
 ();

94  
NULL
;

95 
	}
}

	@HowTo/Cpp/cppRtems_LosLrtShave/leon/rtems_config.c

11 
	~"≠p_c⁄fig.h
"

12 
	~<DrvC¥.h
>

13 
	~<πems.h
>

14 
	~<πems/b•Io.h
>

15 
	~"ÁèlExãnsi⁄.h
"

21 
	#CONFIGURE_INIT


	)

23 #i‚de‡
RTEMS_POSIX_API


24 
	#RTEMS_POSIX_API


	)

27 
	#CONFIGURE_MICROSECONDS_PER_TICK
 1000

	)

29 
	#CONFIGURE_TICKS_PER_TIMESLICE
 10

	)

31 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

33 
	#CONFIGURE_APPLICATION_NEEDS_CLOCK_DRIVER


	)

35 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

37 
	#CONFIGURE_MINIMUM_TASK_STACK_SIZE
 2048

	)

39 
	#CONFIGURE_MAXIMUM_TASKS
 4

	)

41 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 4

	)

43 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 8

	)

45 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 8

	)

47 
	#CONFIGURE_MAXIMUM_POSIX_SEMAPHORES
 8

	)

49 
	#CONFIGURE_MAXIMUM_POSIX_MESSAGE_QUEUES
 8

	)

51 
	#CONFIGURE_MAXIMUM_POSIX_TIMERS
 4

	)

53 
	#CONFIGURE_MAXIMUM_TIMERS
 4

	)

56 
	#CONFIGURE_MAXIMUM_USER_EXTENSIONS
 1

	)

57 
	#CONFIGURE_INITIAL_EXTENSIONS
 { .
Áèl
 = 
F©Æ_exãnsi⁄
 }

	)

59 *
POSIX_Inô
 (*
¨gs
);

61 
	~<πems/c⁄fdefs.h
>

66 
BSP_SET_CLOCK
(12000, 266000, 1, 1, 
DEFAULT_RTEMS_CSS_LOS_CLOCKS
, 
DEFAULT_RTEMS_MSS_LRT_CLOCKS
 | 
EXTRACLOCKS
, 
APP_UPA_CLOCKS
, 0, 0);

69 
BSP_SET_L2C_CONFIG
(0, 
L2C_REPL_LRU
, 0, 
L2C_MODE_COPY_BACK
, 0, 
NULL
);

	@HowTo/Cpp/cppRtems_LosLrtShave/leon_rt/Shave.cpp

14 
	~<°dio.h
>

15 
	~<mv_ty≥s.h
>

16 
	~<ªgi°îsMyrüd.h
>

17 
	~<DrvSvu.h
>

18 
	~<swcShaveLﬂdî.h
>

19 
	~"Shave.h
"

21 
	gShave
::
	$Shave
(
a
){

24 
this
->
id
 = 
a
;

25 
	}
}

27 
	gShave
::~
	$Shave
(){

30 
	}
}

32 
Shave
* Shave::
h™dÀs
[]={
NULL
, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL};

34 
Shave
* 
	gShave
::
	$gëh™dÀ
(
a
){

36 
Shave
 *
obj
;

38 i‡(
a
>
SHAVES_CNT
){

39 
	`¥ötf
("Error: invalid shave ID\n");

40  
NULL
;

43 i‡(
h™dÀs
[
a
]==
NULL
){

44 
obj
 = 
√w
 
	`Shave
(
a
);

45 
h™dÀs
[
a
] = 
obj
;

47  
obj
;

49  
h™dÀs
[
a
];

52 
	}
}

54 
	gShave
::
	$de°roy
(
a
){

56 i‡(
a
>
SHAVES_CNT
){

57 
	`¥ötf
("Error: invalid shave ID\n");

61 i‡(
h™dÀs
[
a
]!=
NULL
){

62 
dñëe
 
h™dÀs
[
a
];

63 
h™dÀs
[
a
]=
NULL
;

65 
	}
}

68 
	gShave
::
	$ª£t
(){

70 
	`swcRe£tShave
(
this
->
id
);

71 
	}
}

74 
	gShave
::
	$£tdeÁu…°ack
(){

76 
	`swcSëAbsﬁuãDeÁu…Sèck
(
this
->
id
);

78 
	}
}

80 
	gShave
::
	$°¨t
(
±r
){

82 
	`swcSèπShave
(
this
->
id
,
±r
);

83 
this
->
busyÊag
 = 1;

84 
	}
}

86 
	gShave
::
	$waô
(){

88 
	`swcWaôShave
(
this
->
id
);

89 
this
->
busyÊag
 = 0;

91 
	}
}

	@HowTo/Cpp/cppRtems_LosLrtShave/leon_rt/Shave.h

3 #i‚de‡
__SHAVE_H__


5 
	#__SHAVE_H__


	)

6 
	#SHAVES_CNT
 (12 - 1)

	)

8 ˛as†
	cShave
{

10 
	m¥iv©e
:

12 
Shave
 *
h™dÀs
[
SHAVES_CNT
+1];

13 
	mid
;

14 
	mbusyÊag
;

17 
	mpublic
:

18 
Shave
 *
gëh™dÀ
(
a
);

19 
de°roy
(
a
);

20 
Shave
(
a
);

21 ~
Shave
();

23 
ª£t
();

24 
£tdeÁu…°ack
();

25 
°¨t
(
±r
);

26 
waô
();

	@HowTo/Cpp/cppRtems_LosLrtShave/leon_rt/leonrt_main.cpp

13 
	~<DrvLe⁄L2C.h
>

14 
	~<DrvLe⁄.h
>

15 
	~<DrvShaveL2Cache.h
>

16 
	~<°dio.h
>

17 
	~<°rög.h
>

18 
	~<swcLe⁄Utûs.h
>

19 
	~<DrvSvu.h
>

20 
	~<swcShaveLﬂdî.h
>

21 
	~"Shave.h
"

23 
u32
 
Sim∂eSùp0_shave_°¨t
;

30 
	#SHAVE_USED
 0

	)

44 
__©åibuã__
((
£˘i⁄
(".cmx.d©a"))Ë
	gmsgbuff
[128];

47 
Shave
 *
	gshave
;

48 
	$maö
()

50 
	`°∫˝y
(
msgbuff
, "LeonRT Started.\n", 128);

53 
shave
 = 
Shave
::
	`gëh™dÀ
(
SHAVE_USED
);

54 
shave
->
	`ª£t
();

55 
shave
->
	`£tdeÁu…°ack
();

56 
shave
->
	`°¨t
((
u32
)&
Sim∂eSùp0_shave_°¨t
);

57 
shave
->
	`waô
();

58 
Shave
::
	`de°roy
(
SHAVE_USED
);

60 
	`DrvLe⁄RTSig«lSt›
();

63 
	}
}

	@HowTo/Cpp/cppRtems_LosLrtShave/shave/shave_main.c

11 
	~<°dio.h
>

12 
	~<svuComm⁄Shave.h
>

25 
	$shave_°¨t
()

27 
	`¥ötf
("SHAVE Started.\n");

29 
SHAVE_HALT
;

32 
	}
}

	@HowTo/Cpp/cppbaremetal/leon/Geometry.cpp

1 
	~<°dlib.h
>

2 
	~<°dio.h
>

3 
	~"Geomëry.h
"

28 
	gGeomëry
::
	$Geomëry
(){

29 
	`¥ötf
("Geometry object createdátáddress, 0x%x\n",

30 
ªöãΩªt_ˇ°
 < > (
this
));

32 
	}
}

34 
	gGeomëry
::~
	$Geomëry
(){

35 
	`¥ötf
("Geomëry obje˘: 0x%x de°royed.\n", 
ªöãΩªt_ˇ°
 < > (
this
));

36 
	}
}

38 
	gGeomëry
::
	$somefun
(){

40 
	}
}

43 
	gGeomëry
::
	$¥ötme
(){

44 
	`¥ötf
("Hello from Geometry\n");

46 
	}
}

	@HowTo/Cpp/cppbaremetal/leon/Geometry.h

3 #i‚de‡
_GEOMETRY_H_


5 
	#_GEOMETRY_H_


	)

6 
	~"Sh≠e.h
"

9 ˛as†
	cGeomëry
: 
public
 
Sh≠e
{

10 
public
:

11 
Geomëry
();

12 ~
Geomëry
();

13 
somefun
();

14 
¥ötme
();

	@HowTo/Cpp/cppbaremetal/leon/Shape.cpp

1 
	~<°dlib.h
>

2 
	~<°dio.h
>

3 
	~"Sh≠e.h
"

9 
	gSh≠e
::
	$Sh≠e
(){

10 
	`¥ötf
("Sh≠êobje˘ cª©edáàaddªss, 0x%x\n",
ªöãΩªt_ˇ°
 < > (
this
));

12 
	}
}

14 
	gSh≠e
::~
	$Sh≠e
(){

15 
	`¥ötf
("Sh≠êobje˘: 0x%x de°royed.\n", 
ªöãΩªt_ˇ°
 < > (
this
));

16 
	}
}

18 
	gSh≠e
::
	$£tTy≥
(
ty≥
){

19 
this
->
ty≥
 =Åype;

21 
	}
}

23 
	gSh≠e
::
	$gëTy≥
(){

25  
this
->
ty≥
;

26 
	}
}

29 
	gSh≠e
::
	$¥ötme
(){

30 
	`¥ötf
("Hello from Shape\n");

32 
	}
}

	@HowTo/Cpp/cppbaremetal/leon/Shape.h

2 #i‚de‡
_SHAPE_H_


3 
	#_SHAPE_H_


	)

5 ˛as†
	cSh≠e
{

6 
	m¥iv©e
:

7 
ty≥
;

9 
	mpublic
:

10 
Sh≠e
();

11 ~
Sh≠e
();

13 
£tTy≥
(
ty≥
);

14 
gëTy≥
();

15 
¥ötme
();

	@HowTo/Cpp/cppbaremetal/leon/app_config.c

11 
	~<DrvC¥.h
>

12 
	~<DrvShaveL2Cache.h
>

13 
	~"≠p_c⁄fig.h
"

17 
	#L2CACHE_CFG
 (
SHAVE_L2CACHE_NORMAL_MODE
)

	)

30 
	$öôClocksAndMem‹y
()

32 
s32
 
sc
;

35 
	`DrvC¥SèπAŒClocks
();

38 
sc
 = 
	`DrvShaveL2CacheSëMode
(
L2CACHE_CFG
);

39 if(
sc
)

40  
sc
;

43 
	`DrvShaveL2CacheSëupP¨tôi⁄
(
SHAVEPART256KB
);

46 
sc
 = 
	`DrvShaveL2CacheAŒoˇãSëP¨tôi⁄s
();

47 if(
sc
)

48  
sc
;

50 
	`DrvShaveL2CacheP¨tôi⁄InvÆid©e
(
PARTITION_0
);

53 
	}
}

	@HowTo/Cpp/cppbaremetal/leon/app_config.h

9 #i‚de‡
_APP_CONFIG_H_


10 
	#_APP_CONFIG_H_


	)

12 
	~<mv_ty≥s.h
>

14 #ifde‡
__˝lu•lus


19 
	#PARTITION_0
 (0)

	)

23 
öôClocksAndMem‹y
();

25 #ifde‡
__˝lu•lus


	@HowTo/Cpp/cppbaremetal/leon/main.cpp

12 
	~<°dio.h
>

13 
	~"≠p_c⁄fig.h
"

14 
	~"Geomëry.h
"

15 
	~"Sh≠e.h
"

16 
	~<UnôTe°Api.h
>

30 
Geomëry
 
	gglobÆobj
;

31 
Geomëry
 *
	gdynglobÆobj
;

33 
	$maö
()

35 
s32
 
sc
;

37 
sc
 = 
	`öôClocksAndMem‹y
();

38 if(
sc
)

39  
sc
;

40 
	`unôTe°Inô
 ();

41 
	`¥ötf
("\n\nHello from LEON!\n\n\n");

43 
	`¥ötf
("Creating obj statically...\n");

44 
Geomëry
 
obj
;

45 
id2
 = 
obj
.
	`somefun
();

46 
	`¥ötf
("obj somefu¿ªtu∫ed: %d\n", 
id2
);

48 
	`¥ötf
("Creating dynobj dynamically...\n");

49 
Geomëry
 *
dynobj
 = 
√w
 
	`Geomëry
();

50 
id

dynobj
->
	`somefun
();

51 
	`¥ötf
("dynobj somefu¿ªtu∫ed: %d\n", 
id
);

53 
	`¥ötf
("Accessing inherited method: of dynobj\n");

54 
dynobj
->
	`£tTy≥
(6);

55 
ty≥
 = 
dynobj
->
	`gëTy≥
();

56 
	`¥ötf
("Dynobj sh≠êty≥: %d\n", 
ty≥
);

58 
	`¥ötf
("Testing method overriding\n");

59 
Sh≠e
 *
sh≠e
 = 
√w
 
	`Geomëry
();

60 
Geomëry
 *
geom
 = 
√w
 
	`Geomëry
();

62 
sh≠e
->
	`¥ötme
();

63 
geom
->
	`¥ötme
();

65 
	`¥ötf
("Printme from global...\n");

66 
globÆobj
.
	`¥ötme
();

67 
	`¥ötf
("Printme from global dynamically...\n");

68 
dynglobÆobj
 = 
√w
 
	`Geomëry
();

69 
dynglobÆobj
->
	`¥ötme
();

71 
	`¥ötf
("Destroying objects\n");

72 
dñëe
 
dynobj
;

73 
dñëe
 
sh≠e
;

74 
dñëe
 
geom
;

75 
	`¥ötf
("Destroying Static objects\n");

76 
	`¥ötf
("....................\n");

77 
	`unôTe°FöÆRï‹t
 ();

79 
	}
}

	@HowTo/Cpp/cpprtems/leon/Geometry.cpp

1 
	~<°dlib.h
>

2 
	~<°dio.h
>

3 
	~"Geomëry.h
"

5 
	gGeomëry
::
	$Geomëry
(){

7 
	}
}

9 
Geomëry
::~
	$Geomëry
(){

11 
	}
}

13 
Geomëry
::
	$somefun
(){

15 
	}
}

17 
	gGeomëry
::
	$¥ötme
(){

18 
	`¥ötf
("Printme.\n");

19 
	}
}

	@HowTo/Cpp/cpprtems/leon/Geometry.h

3 #i‚de‡
__GEOMETRY_H__


4 
	#__GEOMETRY_H__


	)

7 ˛as†
	cGeomëry
{

8 
	mpublic
:

9 
Geomëry
();

10 ~
Geomëry
();

11 
somefun
();

12 
¥ötme
();

	@HowTo/Cpp/cpprtems/leon/app_config.cpp

12 
	~<ªgi°îsMyrüd.h
>

13 
	~<OsDrvC¥.h
>

14 
	~"OsDrvTimî.h
"

15 
	~<DrvRegUtûs.h
>

16 
	~<OsDrvShaveL2Cache.h
>

17 
	~"DrvDdr.h
"

19 
	~"≠p_c⁄fig.h
"

23 
	#L2CACHE_CFG
 (
SHAVE_L2CACHE_NORMAL_MODE
)

	)

36 
	$öôClocksAndMem‹y
()

38 
s32
 
sc
;

40 
tyAuxClkDividîCfg
 
auxClkAŒOn
[] =

42 {
AUX_CLK_MASK_UART
, 
CLK_SRC_REFCLK0
, 96, 625},

43 {0,(
tyC¥ClockSrc
)0,0,0},

47 
sc
 = 
	`OsDrvC¥Inô
();

48 if(
sc
)

49  
sc
;

50 
sc
 = 
	`OsDrvC¥O≥n
();

51 if(
sc
)

52  
sc
;

53 
sc
 = 
	`OsDrvC¥AuxClockAºayC⁄fig
(
auxClkAŒOn
);

54 if(
sc
)

55  
sc
;

58 
sc
 = 
	`OsDrvShaveL2CacheInô
((
osDrvShaveL2CacheModes_t
)
L2CACHE_CFG
);

59 if(
sc
)

60  
sc
;

63 
∑πôi⁄_id
;

64 
	`OsDrvShaveL2CGëP¨tôi⁄
(
SHAVEPART256KB
, &
∑πôi⁄_id
);

67 
sc
 = 
	`OsDrvShaveL2CacheAŒoˇãSëP¨tôi⁄s
();

68 if(
sc
)

69  
sc
;

71 
	`OsDrvShaveL2CacheP¨tôi⁄InvÆid©e
(0);

74 
	}
}

	@HowTo/Cpp/cpprtems/leon/app_config.h

9 #i‚de‡
_APP_CONFIG_H_


10 
	#_APP_CONFIG_H_


	)

17 
	#APP_UPA_CLOCKS
 (
DEV_UPA_SHAVE_L2
 | \

18 
DEV_UPA_CDMA
 | \

19 
DEV_UPA_CTRL
 )

	)

29 
öôClocksAndMem‹y
();

	@HowTo/Cpp/cpprtems/leon/main.cpp

10 
	~<°dlib.h
>

11 
	~<°dio.h
>

12 
	~<°rög.h
>

13 
	~<î∫o.h
>

14 
	~<πems.h
>

15 
	~<±hªad.h
>

16 
	~<sched.h
>

17 
	~<f˙é.h
>

18 
	~<mv_ty≥s.h
>

19 
	~<mvMa¸os.h
>

20 
	~<πems/˝uu£.h
>

21 
	~"b•.h
"

22 
	~<DrvC¥.h
>

23 
	~"Geomëry.h
"

24 
	~<UnôTe°Api.h
>

26 
	~"≠p_c⁄fig.h
"

35 
	grc1
, 
	grc2
;

36 
Geomëry
 
	gglobÆobj
;

37 
±hªad_t
 
	gthªad1
;

41 *
fun˘i⁄C
(*
±r
);

45 "C" *
	$POSIX_Inô
 (*
¨gs
)

47 
	`UNUSED
(
¨gs
);

49 
±hªad_©å_t
 
©å
;

50 
s32
 
sc
;

52 
sc
 = 
	`öôClocksAndMem‹y
();

53 if(
sc
)

54 
	`exô
(
sc
);

55 
	`unôTe°Inô
 ();

56 
	`¥ötf
 ("\n");

57 
	`¥ötf
 ("RTEMS POSIX Started\n");

59 
sc
 = 
	`±hªad_©å_öô
(&
©å
);

60 if(
sc
) {

61 
	`¥ötf
("pthread_attr_initÉrror");

62 
	`exô
(
sc
);

64 
sc
 = 
	`±hªad_©å_£töhîôsched
(&
©å
, 
PTHREAD_EXPLICIT_SCHED
);

65 if(
sc
) {

66 
	`¥ötf
("pthread_attr_setinheritschedÉrror");

67 
	`exô
(
sc
);

70 
sc
 = 
	`±hªad_©å_£tschedpﬁicy
(&
©å
, 
SCHED_RR
);

71 if(
sc
) {

72 
	`¥ötf
("pthread_attr_setschedpolicyÉrror");

73 
	`exô
(
sc
);

76 i‡((
rc1
=
	`±hªad_¸óã
–&
thªad1
, &
©å
, &
fun˘i⁄C
, &
globÆobj
))) {

77 
	`¥ötf
("Thªad 1 cª©i⁄ faûed: %d\n", 
rc1
);

78 
	`exô
(
rc1
);

81 
	`¥ötf
("Thread 1 created\n");

84 if(
	`±hªad_joö
–
thªad1
, 
NULL
)) {

85 
	`¥ötf
("pthread_joinÉrror!\n");

88 
	`exô
(0);

89 
	}
}

91 *
	$fun˘i⁄C
(*
±r
)

93 
Geomëry
 *
obj
 = (Geomëry *)
±r
;

94 
i
=0;i<10;i++){

95 
obj
->
	`¥ötme
();

97 
	`unôTe°FöÆRï‹t
 ();

99  
NULL
;

100 
	}
}

	@HowTo/Cpp/cpprtems/leon/rtems_config.c

11 
	~<πems.h
>

12 
	~<πems/b•Io.h
>

13 
	~<DrvC¥.h
>

14 
	~"≠p_c⁄fig.h
"

15 
	~"ÁèlExãnsi⁄.h
"

21 
	#CONFIGURE_INIT


	)

23 #i‚de‡
RTEMS_POSIX_API


24 
	#RTEMS_POSIX_API


	)

27 
	#CONFIGURE_MICROSECONDS_PER_TICK
 1000

	)

29 
	#CONFIGURE_TICKS_PER_TIMESLICE
 10

	)

31 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

33 
	#CONFIGURE_APPLICATION_NEEDS_CLOCK_DRIVER


	)

35 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

37 
	#CONFIGURE_MINIMUM_TASK_STACK_SIZE
 2048

	)

39 
	#CONFIGURE_MAXIMUM_TASKS
 4

	)

41 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 4

	)

43 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 8

	)

45 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 8

	)

47 
	#CONFIGURE_MAXIMUM_POSIX_SEMAPHORES
 8

	)

49 
	#CONFIGURE_MAXIMUM_POSIX_MESSAGE_QUEUES
 8

	)

51 
	#CONFIGURE_MAXIMUM_POSIX_TIMERS
 4

	)

53 
	#CONFIGURE_MAXIMUM_TIMERS
 4

	)

56 
	#CONFIGURE_MAXIMUM_USER_EXTENSIONS
 1

	)

64 
	#CONFIGURE_INITIAL_EXTENSIONS
 { .
Áèl
 = 
F©Æ_exãnsi⁄
 }

	)

66 *
POSIX_Inô
 (*
¨gs
);

68 
	~<πems/c⁄fdefs.h
>

72 
BSP_SET_CLOCK
(12000, 266000, 1, 1, 
DEFAULT_RTEMS_CSS_LOS_CLOCKS
, 
DEFAULT_RTEMS_MSS_LRT_CLOCKS
, 
APP_UPA_CLOCKS
, 0, 0);

75 
BSP_SET_L2C_CONFIG
(0, 
L2C_REPL_LRU
, 0, 
L2C_MODE_COPY_BACK
, 0, 
NULL
);

	@HowTo/Cpp/cppshave/leon/Shave.cpp

14 
	~<°dio.h
>

15 
	~<mv_ty≥s.h
>

16 
	~<ªgi°îsMyrüd.h
>

17 
	~<DrvSvu.h
>

18 
	~<swcShaveLﬂdî.h
>

19 
	~"≠p_c⁄fig.h
"

20 
	~"Shave.h
"

22 
˝pshave0___¸töô
;

23 
˝pshave0___¸tföi
;

25 
	gShave
::
	$Shave
(
a
){

27 
	`¥ötf
("Shavêc⁄°ru˘u∏ˇŒed f‹ id:%dáà0x%x\n", 
a
, 
ªöãΩªt_ˇ°
 < > (
this
));

28 
this
->
id
 = 
a
;

29 
	}
}

31 
	gShave
::~
	$Shave
(){

33 
	`¥ötf
("Shavêde°ru˘‹ cÆÀd f‹ %dáà0x%x\n", 
this
->
id
, 
ªöãΩªt_ˇ°
 < > (this));

34 
	}
}

36 
Shave
* 
	gShave
::
h™dÀs
[]={
NULL
, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL};

38 
Shave
* 
	gShave
::
	$gëh™dÀ
(
a
){

40 
Shave
 *
obj
;

42 i‡(
a
>
SHAVES_CNT
){

43 
	`¥ötf
("Error: invalid shave ID\n");

44  
NULL
;

47 i‡(
h™dÀs
[
a
]==
NULL
){

48 
obj
 = 
√w
 
	`Shave
(
a
);

49 
h™dÀs
[
a
] = 
obj
;

51  
obj
;

53  
h™dÀs
[
a
];

56 
	}
}

58 
	gShave
::
	$öô
() {

59 
	`ª£t
();

60 
	`£tdeÁu…°ack
();

61 
	`°¨t
((
u32
)&
˝pshave0___¸töô
);

62 
	`waô
();

63 
	}
}

65 
	gShave
::
	$deöô
() {

66 
	`°¨t
((
u32
)&
˝pshave0___¸tföi
);

67 
	`waô
();

68 
	}
}

70 
	gShave
::
	$de°roy
(
a
){

72 i‡(
a
>
SHAVES_CNT
){

73 
	`¥ötf
("Error: invalid shave ID\n");

77 i‡(
h™dÀs
[
a
]!=
NULL
){

78 
dñëe
 
h™dÀs
[
a
];

79 
h™dÀs
[
a
]=
NULL
;

81 
	}
}

84 
	gShave
::
	$ª£t
(){

86 
	`swcRe£tShave
(
this
->
id
);

87 
	}
}

90 
	gShave
::
	$£tdeÁu…°ack
(){

92 
	`swcSëAbsﬁuãDeÁu…Sèck
(
this
->
id
);

94 
	}
}

96 
	gShave
::
	$°¨t
(
±r
){

98 
	`swcSèπShave
(
this
->
id
,
±r
);

99 
this
->
busyÊag
 = 1;

100 
	}
}

102 
	gShave
::
	$waô
(){

104 
	`swcWaôShave
(
this
->
id
);

105 
this
->
busyÊag
 = 0;

107 
	}
}

	@HowTo/Cpp/cppshave/leon/Shave.h

3 #i‚de‡
__SHAVE_H__


5 
	#__SHAVE_H__


	)

6 
	#SHAVES_CNT
 (12 - 1)

	)

8 ˛as†
	cShave
{

10 
	m¥iv©e
:

12 
Shave
 *
h™dÀs
[
SHAVES_CNT
+1];

13 
	mid
;

14 
	mbusyÊag
;

15 
Shave
(
a
);

16 ~
Shave
();

18 
	mpublic
:

19 
Shave
 *
gëh™dÀ
(
a
);

20 
de°roy
(
a
);

22 
öô
();

23 
deöô
();

24 
ª£t
();

25 
£tdeÁu…°ack
();

26 
°¨t
(
±r
);

27 
waô
();

	@HowTo/Cpp/cppshave/leon/app_config.c

11 
	~<DrvC¥.h
>

12 
	~<DrvShaveL2Cache.h
>

13 
	~"≠p_c⁄fig.h
"

17 
	#L2CACHE_CFG
 (
SHAVE_L2CACHE_NORMAL_MODE
)

	)

31 
	$öôClocksAndMem‹y
()

33 
s32
 
sc
;

36 
	`DrvC¥SèπAŒClocks
();

39 
sc
 = 
	`DrvShaveL2CacheSëMode
(
L2CACHE_CFG
);

40 if(
sc
)

41  
sc
;

44 
	`DrvShaveL2CacheSëupP¨tôi⁄
(
SHAVEPART256KB
);

47 
sc
 = 
	`DrvShaveL2CacheAŒoˇãSëP¨tôi⁄s
();

48 if(
sc
)

49  
sc
;

52 
i
 = 0; i < 
SHAVES_USED
; i++)

54 
	`DrvShaveL2CacheSëLSUP¨tId
(
i
, 
PARTITION_0
);

57 
	`DrvShaveL2CacheP¨tôi⁄InvÆid©e
(
PARTITION_0
);

60 
	}
}

	@HowTo/Cpp/cppshave/leon/app_config.h

9 #i‚de‡
_APP_CONFIG_H_


10 
	#_APP_CONFIG_H_


	)

12 
	~<mv_ty≥s.h
>

14 
	#SHAVES_USED
 (1)

	)

16 
	#PARTITION_0
 (0)

	)

18 #ifde‡
__˝lu•lus


25 
öôClocksAndMem‹y
();

27 #ifde‡
__˝lu•lus


	@HowTo/Cpp/cppshave/leon/main.cpp

12 
	~<°dio.h
>

13 
	~<DrvSvu.h
>

14 
	~"Shave.h
"

15 
	~"≠p_c⁄fig.h
"

16 
	~<UnôTe°Api.h
>

20 
	#SHAVE_USED
 0

	)

24 
˝pshave0_maö
;

25 
˝pshave0_shaveSå
[];

34 
	$maö
()

36 
s32
 
sc
;

38 
sc
 = 
	`öôClocksAndMem‹y
();

39 if(
sc
)

40  
sc
;

42 
	`unôTe°Inô
 ();

43 
	`¥ötf
("\n\nHello from LEON!\n\n\n");

44 
Shave
 *
shave
;

45 
Shave
 *
ã°
;

48 
shave
 = 
Shave
::
	`gëh™dÀ
(
SHAVE_USED
);

49 
ã°
 = 
Shave
::
	`gëh™dÀ
(
SHAVE_USED
);

51 i‡(((
u32
)
shave
)!=((u32)
ã°
)){

52 
	`¥ötf
("Error in singleton designÖattern!\n");

55 
shave
->
	`öô
();

56 
shave
->
	`°¨t
((
u32
)&
˝pshave0_maö
);

57 
shave
->
	`waô
();

58 
shave
->
	`deöô
();

59 
shave
->
	`°¨t
((
u32
)&
˝pshave0_maö
);

60 
shave
->
	`waô
();

61 
shave
->
	`deöô
();

62 
shave
->
	`°¨t
((
u32
)&
˝pshave0_maö
);

63 
shave
->
	`waô
();

64 
shave
->
	`deöô
();

66 
	`¥ötf
("%s", 
˝pshave0_shaveSå
);

68 
Shave
::
	`de°roy
(
SHAVE_USED
);

69 
	`unôTe°FöÆRï‹t
 ();

72 
	}
}

	@HowTo/Cpp/cppshave/shave/heap.cpp

1 
	~<°dlib.h
>

2 
	~<°dio.h
>

3 
	~<sys/shave_sy°em.h
>

5 
	#HEAP_SIZE
 (10 * 1024)

	)

9 
	ghóp
[
HEAP_SIZE
];

13 
	$öôHóp
()

15 
	`¥ötf
("\tInôülizêShavêhó∞© 0x%p\n", 
hóp
);

17 
	`__£thóp
((*)
hóp
, 
HEAP_SIZE
);

18 
	}
}

26 
__©åibuã__
((
£˘i⁄
(".preinit")))

27 (*
¥eInôHópPå
)(Ë&
öôHóp
;

	@HowTo/Cpp/cppshave/shave/shaveStart.cpp

11 
	~<°dio.h
>

12 
	~<°rög.h
>

13 
	~<svuComm⁄Shave.h
>

20 
	gshaveSå
[250];

28 c⁄° 
	gmesßge
[] = "Message from Shave's %s!\n";

30 ˛as†
	cTe°
{

31 
	m¥iv©e
:

32 * 
°r
;

33 
	m«me
[32];

35 
	mpublic
:

36 
	$Te°
(c⁄° * 
«me
) {

37 
	`¥ötf
("\t%†obje˘ c⁄°ru˘ed o¿Shavê© 0x%p\n", 
«me
, 
this
);

38 
	`°r˝y
(
this
->
«me
,Çame);

40 
°r
 = 
√w
 [250];

41 i‡(!
°r
)

42 
	`¥ötf
("\t\tMemory couldÇot beállocated onÅhe Shave\n");

44 
	`•rötf
(
°r
, 
mesßge
, 
«me
);

47 ~
	$Te°
() {

48 
	`¥ötf
("\t%†obje˘ de°ru˘ed o¿Shave\n", 
this
->
«me
);

49 
dñëe
 
°r
;

50 
	}
}

52 
	$hñlo
() {

53 
	`¥ötf
("\t\tHñlÿ‰om Shave'†%†•a˚\n", 
this
->
«me
);

54 
	`°r˝y
(
shaveSå
, 
°r
);

55 
	}
}

59 
Te°
 
gã°
("Global");

61 
__©åibuã__
((
dŒexp‹t
)Ë
	$maö
( )

63 
Te°
 
	`°e°
("Stack");

65 
gã°
.
	`hñlo
();

66 
°e°
.
	`hñlo
();

69 
	}
}

	@HowTo/DynamicInfrastructure_C/leon/app_config.c

11 
	~<ªgi°îsMyrüd.h
>

12 
	~<OsDrvC¥.h
>

13 
	~"OsDrvTimî.h
"

14 
	~<DrvRegUtûs.h
>

15 
	~<OsDrvShaveL2Cache.h
>

16 
	~"DrvDdr.h
"

17 
	~"≠p_c⁄fig.h
"

33 
	$öôClocksAndMem‹y
() {

34 
tyAuxClkDividîCfg
 
auxClkAŒOn
[] =

37 { 
AUX_CLK_MASK_UART
, 
CLK_SRC_REFCLK0
, 96, 625 },

42 
	`OsDrvC¥Inô
();

43 
	`OsDrvC¥O≥n
();

44 
	`OsDrvC¥AuxClockAºayC⁄fig
(
auxClkAŒOn
);

47 
	`OsDrvC¥SysDevi˚A˘i⁄
(
UPA_DOMAIN
, 
PULSE_RESET
, 
APP_UPA_CLOCKS
);

50 
	}
}

52 
	$InôShaveL2C
()

54 
s32
 
sc
;

56 
sc
=
	`OsDrvShaveL2CacheInô
(
L2CACHE_CFG
);

57 if(
sc
)

58  
sc
;

61 
sc
=
	`OsDrvShaveL2CRe£tP¨tôi⁄s
();

62  
sc
;

63 
	}
}

66 
	$C⁄figShaveL2C
()

68 
s32
 
sc
 = 
OS_MYR_DRV_SUCCESS
;

69 
uöt32_t
 
i
;

70 
∑πôi⁄_id
[8];

72 
i
 = 0; i < 8; ++i) {

73 
sc
 +
	`OsDrvShaveL2CGëP¨tôi⁄
(
SHAVEPART16KB
, &
∑πôi⁄_id
[
i
]);

76 
i
=0; i < 12; i++) {

78 
sc
 +
	`OsDrvShaveL2CSëN⁄WödowedP¨tôi⁄
(
i
, 
∑πôi⁄_id
[0], 
NON_WINDOWED_INSTRUCTIONS_PARTITION
);

79 
sc
 +
	`OsDrvShaveL2CSëWödowP¨tôi⁄
(
i
, 
SHAVEL2CACHEWIN_A
, 
∑πôi⁄_id
[1+(i%7)]);

82 
sc
 +
	`OsDrvShaveL2CacheAŒoˇãSëP¨tôi⁄s
();

84 
i
 = 0; i < 8; ++i) {

85 
	`OsDrvShaveL2CacheP¨tôi⁄InvÆid©e
(
∑πôi⁄_id
[
i
]);

88  
sc
;

89 
	}
}

	@HowTo/DynamicInfrastructure_C/leon/app_config.h

9 #i‚de‡
_APP_CONFIG_H_


10 
	#_APP_CONFIG_H_


	)

12 
	~<DrvC¥Deföes.h
>

19 
	#L2CACHE_CFG
 (
SHAVE_L2CACHE_NORMAL_MODE
)

	)

22 
	#DEFAULT_APP_CLOCK_KHZ
 480000

	)

23 
	#DEFAULT_OSC_CLOCK_KHZ
 12000

	)

25 
	#MSS_CLOCKS
 (
DEV_MSS_APB_SLV
 | \

26 
DEV_MSS_APB2_CTRL
 | \

27 
DEV_MSS_RTBRIDGE
 | \

28 
DEV_MSS_RTAHB_CTRL
 | \

29 
DEV_MSS_LRT
 | \

30 
DEV_MSS_LRT_DSU
 | \

31 
DEV_MSS_LRT_L2C
 | \

32 
DEV_MSS_LRT_ICB
 | \

33 
DEV_MSS_AXI_BRIDGE
 | \

34 
DEV_MSS_MXI_CTRL
 | \

35 
DEV_MSS_MXI_DEFSLV
 | \

36 
DEV_MSS_AXI_MON
 | \

37 
DEV_MSS_LCD
 | \

38 
DEV_MSS_AMC
 | \

39 
DEV_MSS_SIPP
 | \

40 
DEV_MSS_TIM
 )

	)

42 
	#APP_UPA_CLOCKS
 (
DEV_UPA_SH0
 | \

43 
DEV_UPA_SH1
 | \

44 
DEV_UPA_SH2
 | \

45 
DEV_UPA_SH3
 | \

46 
DEV_UPA_SH4
 | \

47 
DEV_UPA_SH5
 | \

48 
DEV_UPA_SH6
 | \

49 
DEV_UPA_SH7
 | \

50 
DEV_UPA_SH8
 | \

51 
DEV_UPA_SH9
 | \

52 
DEV_UPA_SH10
 | \

53 
DEV_UPA_SH11
 | \

54 
DEV_UPA_SHAVE_L2
 | \

55 
DEV_UPA_CDMA
 | \

56 
DEV_UPA_CTRL
 )

	)

58 
	#APP_SIPP_CLOCKS
 (
DEV_SIPP_RAW
 | \

59 
DEV_SIPP_LSC
 | \

60 
DEV_SIPP_DBYR
 | \

61 
DEV_SIPP_CHROMA
 | \

62 
DEV_SIPP_LUMA
 | \

63 
DEV_SIPP_SHARPEN
 | \

64 
DEV_SIPP_MED
 | \

65 
DEV_SIPP_LUT
 | \

66 
DEV_SIPP_CC
 | \

67 
DEV_SIPP_MIPI_RX1
 )

	)

77 
öôClocksAndMem‹y
();

78 
InôShaveL2C
();

79 
C⁄figShaveL2C
();

	@HowTo/DynamicInfrastructure_C/leon/main.c

11 
	~<°dlib.h
>

12 
	~<°dio.h
>

13 
	~<πems.h
>

14 
	~<πems/b•Io.h
>

15 
	~<DrvLe⁄.h
>

16 
	~"OsDrvSvu.h
"

17 
	~"πems_c⁄fig.h
"

18 
	~"theDynC⁄ãxt.h
"

19 
	~<UnôTe°Api.h
>

23 
	#NO_OF_MESG_APP_INSTANCES_ONE
 1

	)

24 
	#NO_OF_MESG_APP_INSTANCES_TWO
 1

	)

28 
Dy«micC⁄ãxt_t
 
MODULE_DATA
(
MesgO√
);

29 
Dy«micC⁄ãxt_t
 
MODULE_DATA
(
MesgTwo
);

31 
Ãt_°¨t
;

33 
__©åibuã__
((
£˘i⁄
(".cmx.bss"))Ë
	gsomeAºay
[200];

38 *
	$POSIX_Inô
(*
¨gs
) {

39 
shaveU£dA
, 
shaveU£dB
, 
°©us
;

40 
u32
 
ru¬ög
;

41 
swcShaveUnô_t
 
shaveLi°MesgO√
[
NO_OF_MESG_APP_INSTANCES_ONE
] = {0};

42 
swcShaveUnô_t
 
shaveLi°MesgTwo
[
NO_OF_MESG_APP_INSTANCES_TWO
] = {3};

44 
	`UNUSED
(
¨gs
);

48 
	`unôTe°Inô
 ();

49 
	`¥ötf
("\n");

50 
	`¥ötf
("RTEMS POSIX Started with some CMXát 0x%X is setás 0x%X\n",

51 (Ë&
someAºay
[100], someArray[100]);

53 
°©us
 = 
	`öôClocksAndMem‹y
();

54 i‡(
°©us
 !
OS_MYR_DRV_SUCCESS
)

55 
	`¥ötf
("Error initializing clocksánd memory.\n");

58 
°©us
 = 
	`InôShaveL2C
();

59 i‡(
°©us
 !
OS_MYR_DRV_SUCCESS
)

60 
	`¥ötf
("Error initializing shave L2 cache. \n");

62 
°©us
 = 
	`C⁄figShaveL2C
();

63 i‡(
°©us
 !
OS_MYR_DRV_SUCCESS
)

64 
	`¥ötf
("Error configuring shave L2 cache. \n");

66 
°©us
 = 
	`OsDrvSvuInô
();

67 i‡(
°©us
)

68 
	`exô
(
°©us
);

70 
	`¥ötf
("Launching first shaveÖrogram with dyncontextát 0x%X\n",

71 (Ë&
	`MODULE_DATA
(
MesgO√
));

73 
°©us
 = 
	`OsDrvSvuSëupDynShaveAµs
(&
	`MODULE_DATA
(
MesgO√
), 
shaveLi°MesgO√
, 
NO_OF_MESG_APP_INSTANCES_ONE
);

74 i‡(
°©us
 !
OS_MYR_DYN_INFR_SUCCESS
)

75 
	`OSDRV_DYN_INFR_CHECK_CODE
(
°©us
);

77 
°©us
 = 
	`OsDrvSvuO≥nShaves
(
shaveLi°MesgO√
, 
NO_OF_MESG_APP_INSTANCES_ONE
, 
OS_MYR_PROTECTION_SELF
);

78 i‡(
°©us
 !
OS_MYR_DYN_INFR_SUCCESS
)

79 
	`OSDRV_DYN_INFR_CHECK_CODE
(
°©us
);

81 
°©us
 = 
	`OsDrvSvuRunShaveAlgo
(&
	`MODULE_DATA
(
MesgO√
), &
shaveU£dA
);

82 i‡(
°©us
 !
OS_MYR_DYN_INFR_SUCCESS
)

83 
	`OSDRV_DYN_INFR_CHECK_CODE
(
°©us
);

85 
°©us
 = 
	`OsDrvSvuDynWaôShaves
(
shaveLi°MesgO√
, 
NO_OF_MESG_APP_INSTANCES_ONE
, 
OS_DRV_SVU_WAIT_FOREVER
, &
ru¬ög
);

86 i‡(
°©us
 !
OS_MYR_DYN_INFR_SUCCESS
)

87 
	`OSDRV_DYN_INFR_CHECK_CODE
(
°©us
);

89 
	`¥ötf
("O≥øti⁄†abovêexecuãd by shavê%d \n", 
shaveU£dA
);

90 
	`¥ötf
("Launching second shaveÖrogram oná different shave\n");

92 
°©us
 = 
	`OsDrvSvuSëupDynShaveAµs
(&
	`MODULE_DATA
(
MesgTwo
), 
shaveLi°MesgTwo
, 
NO_OF_MESG_APP_INSTANCES_TWO
);

93 i‡(
°©us
 !
OS_MYR_DYN_INFR_SUCCESS
)

94 
	`OSDRV_DYN_INFR_CHECK_CODE
(
°©us
);

96 
°©us
 = 
	`OsDrvSvuO≥nShaves
(
shaveLi°MesgTwo
, 
NO_OF_MESG_APP_INSTANCES_TWO
, 
OS_MYR_PROTECTION_SELF
);

97 i‡(
°©us
 !
OS_MYR_DYN_INFR_SUCCESS
)

98 
	`OSDRV_DYN_INFR_CHECK_CODE
(
°©us
);

100 
°©us
 = 
	`OsDrvSvuRunShaveAlgo
(&
	`MODULE_DATA
(
MesgTwo
), &
shaveU£dB
);

101 i‡(
°©us
 !
OS_MYR_DYN_INFR_SUCCESS
)

102 
	`OSDRV_DYN_INFR_CHECK_CODE
(
°©us
);

104 
°©us
 = 
	`OsDrvSvuDynWaôShaves
(
shaveLi°MesgTwo
, 
NO_OF_MESG_APP_INSTANCES_TWO
, 
OS_DRV_SVU_WAIT_FOREVER
, &
ru¬ög
);

105 i‡(
°©us
 !
OS_MYR_DYN_INFR_SUCCESS
)

106 
	`OSDRV_DYN_INFR_CHECK_CODE
(
°©us
);

108 
	`¥ötf
("O≥øti⁄†abovêexecuãd by shavê%d \n", 
shaveU£dB
);

109 
	`¥ötf
("Launching bothátÅhe sameÅime:\n");

111 
°©us
 = 
	`OsDrvSvuRunShaveAlgo
(&
	`MODULE_DATA
(
MesgTwo
), &
shaveU£dB
);

112 i‡(
°©us
 !
OS_MYR_DYN_INFR_SUCCESS
)

113 
	`OSDRV_DYN_INFR_CHECK_CODE
(
°©us
);

115 
°©us
 = 
	`OsDrvSvuRunShaveAlgo
(&
	`MODULE_DATA
(
MesgO√
), &
shaveU£dA
);

116 i‡(
°©us
 !
OS_MYR_DYN_INFR_SUCCESS
)

117 
	`OSDRV_DYN_INFR_CHECK_CODE
(
°©us
);

119 
°©us
 = 
	`OsDrvSvuDynWaôShaves
(
shaveLi°MesgTwo
, 
NO_OF_MESG_APP_INSTANCES_TWO
, 
OS_DRV_SVU_WAIT_FOREVER
, &
ru¬ög
);

120 i‡(
°©us
 !
OS_MYR_DYN_INFR_SUCCESS
)

121 
	`OSDRV_DYN_INFR_CHECK_CODE
(
°©us
);

123 
°©us
 = 
	`OsDrvSvuDynWaôShaves
(
shaveLi°MesgO√
, 
NO_OF_MESG_APP_INSTANCES_ONE
, 
OS_DRV_SVU_WAIT_FOREVER
, &
ru¬ög
);

124 i‡(
°©us
 !
OS_MYR_DYN_INFR_SUCCESS
)

125 
	`OSDRV_DYN_INFR_CHECK_CODE
(
°©us
);

127 
	`¥ötf
("O≥øti⁄†abovêexecuãd by shave†%dánd %d\n", 
shaveU£dB
, 
shaveU£dA
);

130 
°©us
 = 
	`OsDrvSvuClo£Shaves
(
shaveLi°MesgO√
, 
NO_OF_MESG_APP_INSTANCES_ONE
);

131 i‡(
°©us
 !
OS_MYR_DYN_INFR_SUCCESS
)

132 
	`OSDRV_DYN_INFR_CHECK_CODE
(
°©us
);

134 
°©us
 = 
	`OsDrvSvuClo£Shaves
(
shaveLi°MesgTwo
, 
NO_OF_MESG_APP_INSTANCES_TWO
);

135 i‡(
°©us
 !
OS_MYR_DYN_INFR_SUCCESS
)

136 
	`OSDRV_DYN_INFR_CHECK_CODE
(
°©us
);

139 
°©us
 = 
	`OsDrvSvuCÀ™upDynShaveAµs
(&
	`MODULE_DATA
(
MesgTwo
));

140 i‡(
°©us
 !
OS_MYR_DYN_INFR_SUCCESS
)

141 
	`OSDRV_DYN_INFR_CHECK_CODE
(
°©us
);

143 
°©us
 = 
	`OsDrvSvuCÀ™upDynShaveAµs
(&
	`MODULE_DATA
(
MesgO√
));

144 i‡(
°©us
 !
OS_MYR_DYN_INFR_SUCCESS
)

145 
	`OSDRV_DYN_INFR_CHECK_CODE
(
°©us
);

148 
	`DrvLe⁄RTSèπup
((
u32
Ë&
Ãt_°¨t
);

149 
	`DrvLe⁄RTWaôExecuti⁄
();

151 
	`unôTe°FöÆRï‹t
 ();

152 
	`exô
(0);

153 
	}
}

	@HowTo/DynamicInfrastructure_C/leon/rtems_config.h

8 #i‚de‡
LEON_RTEMS_CONFIG_H_


9 
	#LEON_RTEMS_CONFIG_H_


	)

12 #i‚de‡
_RTEMS_CONFIG_H_


13 
	#_RTEMS_CONFIG_H_


	)

17 
	~"≠p_c⁄fig.h
"

18 
	~"ÁèlExãnsi⁄.h
"

20 #i‡
deföed
(
__RTEMS__
)

22 #i‡!
deföed
 (
__CONFIG__
)

23 
	#__CONFIG__


	)

29 
	#CONFIGURE_INIT


	)

32 #i‚de‡
RTEMS_POSIX_API


33 
	#RTEMS_POSIX_API


	)

36 
	#CONFIGURE_MICROSECONDS_PER_TICK
 1000

	)

38 
	#CONFIGURE_TICKS_PER_TIMESLICE
 10

	)

40 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

42 
	#CONFIGURE_APPLICATION_NEEDS_CLOCK_DRIVER


	)

44 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

46 
	#CONFIGURE_MINIMUM_TASK_STACK_SIZE
 4096

	)

48 
	#CONFIGURE_MAXIMUM_TASKS
 4

	)

50 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 4

	)

52 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 8

	)

54 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 8

	)

56 
	#CONFIGURE_MAXIMUM_POSIX_SEMAPHORES
 8

	)

58 
	#CONFIGURE_MAXIMUM_POSIX_MESSAGE_QUEUES
 8

	)

60 
	#CONFIGURE_MAXIMUM_POSIX_TIMERS
 4

	)

62 
	#CONFIGURE_MAXIMUM_TIMERS
 4

	)

64 
	#CONFIGURE_MAXIMUM_SEMAPHORES
 2

	)

67 
	#CONFIGURE_MAXIMUM_USER_EXTENSIONS
 1

	)

68 
	#CONFIGURE_INITIAL_EXTENSIONS
 { .
Áèl
 = 
F©Æ_exãnsi⁄
 }

	)

75 *
POSIX_Inô
 (*
¨gs
);

77 
	~<πems/c⁄fdefs.h
>

85 
BSP_SET_CLOCK
(
DEFAULT_OSC_CLOCK_KHZ
, 
DEFAULT_APP_CLOCK_KHZ
, 1, 1, 
DEFAULT_RTEMS_CSS_LOS_CLOCKS
, 
MSS_CLOCKS
,
APP_UPA_CLOCKS
,
APP_SIPP_CLOCKS
,0);

87 
BSP_SET_L2C_CONFIG
(0, 
DEFAULT_RTEMS_L2C_REPLACEMENT_POLICY
, 
DEFAULT_RTEMS_L2C_LOCKED_WAYS
,
DEFAULT_RTEMS_L2C_MODE
, 0, 0);

	@HowTo/DynamicInfrastructure_C/leon_rt/BayerISPModel.c

13 
	~"BayîISPModñ.h
"

15 
	~<ö˛ude/sùpHwDefs.h
>

16 
	~<fûãrs/√g©ive/√g©ive.h
>

20 
UI¡8
 
DDR_DATA
 
	gBayîISPModñ_dmaIn0_buf„r
[522 * 128 * 1 ]
ALIGNED
(8);

21 
UI¡8
 
DDR_DATA
 
	gBayîISPModñ_dmaOut1_buf„r
[522 * 128 * 1 ]
ALIGNED
(8);

24 
	$ªadBayîISPModñI≈ut
(
BayîISPModñ
 *
pPl
)

26 
	`sùpRdFûeU8
((
UI¡8
*)
BayîISPModñ_dmaIn0_buf„r
,522 * 128 * 1 * (UInt8),"../../../resources/test_522x128.raw");

28 ()(
pPl
);

30 
	}
}

32 
	$wrôeBayîISPModñOuçut
(
BayîISPModñ
 *
pPl
)

34 
	`sùpWrFûeU8
((
UI¡8
*)
BayîISPModñ_dmaOut1_buf„r
,522 * 128 * 1 * (UInt8),"test_neg_522x128.raw");

36 ()(
pPl
);

38 
	}
}

40 
	$buûdBayîISPModñ
(
BayîISPModñ
 *
pPl
)

43 
pPl
->
∂
 = 
	`sùpCª©ePùñöe
(4, 7, 
	`SIPP_MBIN
(
mböImgSùp
));

46 
pPl
->
dmaIn0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x00, 522, 128, 
	`N_PL
(1), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

47 
pPl
->
√g©ive0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x0, 522, 128, 
	`N_PL
(1), 
	`SZ
(
UI¡8
), 0, 
	`SVU_SYM
(
svuNeg©ive
), 0);

48 
pPl
->
dmaOut1
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x00, 522, 128, 
	`N_PL
(1), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

51 
	`sùpLökFûãr
(
pPl
->
√g©ive0
,ÖPl->
dmaIn0
, 1,1 );

52 
	`sùpLökFûãr
(
pPl
->
dmaOut1
,ÖPl->
√g©ive0
, 1,1 );

54 
	}
}

57 
	$c⁄figBayîISPModñ
(
BayîISPModñ
 *
pPl
)

59 
DmaP¨am
 *
dmaIn0Cfg
 = (DmaP¨am *)
pPl
->
dmaIn0
->
∑øms
;

60 
DmaP¨am
 *
dmaOut1Cfg
 = (DmaP¨am *)
pPl
->
dmaOut1
->
∑øms
;

65 
dmaIn0Cfg
->
ddrAddr
 = (
UI¡32
)&
BayîISPModñ_dmaIn0_buf„r
;

66 
dmaOut1Cfg
->
ddrAddr
 = (
UI¡32
)&
BayîISPModñ_dmaOut1_buf„r
;

69 
	}
}

	@HowTo/DynamicInfrastructure_C/leon_rt/BayerISPModel.h

13 #i‚de‡
__BAYERISPMODEL_H__


14 
	#__BAYERISPMODEL_H__


	)

16 
	~<sùp.h
>

17 
	~<sùpTe°Comm⁄.h
>

19 
	~"BayîPùñöeP¨ams.h
"

23 
UI¡8
 
DDR_DATA
 
BayîISPModñ_dmaIn0_buf„r
[ 522 * 128 * 1 ]
ALIGNED
(8);

24 
UI¡8
 
DDR_DATA
 
BayîISPModñ_dmaOut1_buf„r
[ 522 * 128 * 1 ]
ALIGNED
(8);

28 
	sBayîISPModñ


31 
SùpPùñöe
 *
	m∂
;

34 
SùpFûãr
 *
	mdmaIn0
;

35 
SùpFûãr
 *
	mdmaOut1
;

36 
SùpFûãr
 *
	m√g©ive0
;

38 } 
	tBayîISPModñ
;

40 
ªadBayîISPModñI≈ut
(
BayîISPModñ
 *
pPl
);

41 
wrôeBayîISPModñOuçut
(
BayîISPModñ
 *
pPl
);

43 
buûdBayîISPModñ
(
BayîISPModñ
 *
pPl
);

44 
c⁄figBayîISPModñ
(
BayîISPModñ
 *
pPl
);

	@HowTo/DynamicInfrastructure_C/leon_rt/BayerPipelineParams.c

7 
	~<sùp.h
>

8 
	~<sùpTe°Comm⁄.h
>

9 
	~"≠p_c⁄fig.h
"

10 
	~"BayîPùñöeP¨ams.h
"

11 
	#POLY_KSZ
 7

	)

13 
UI¡16
 
	gsh¨≥n_c€ffs
[4] = {0x2583,

18 
UI¡16
 
	ggammaTabÀ
[256] 
ALIGNED
(8) = {

37 
UI¡8
 
	glumaDnsLut
[32] 
ALIGNED
(8) =

43 
UI¡16
 
	gh‹zC€fs
[] 
ALIGNED
(8) = {

47 
UI¡16
 
	gvîtC€fs
[] 
ALIGNED
(8) = {

52 
	gbôpos
 = 3;

54 
	gccm
[9] = {

60 
UI¡8
 
	gyDnsGammaLut
[256] = {

95 
UI¡8
 
	gyDnsRefLut
[256] = {

131 
UI¡16
 
	glscMesh
[44 * 56] 
ALIGNED
(8) =

	@HowTo/DynamicInfrastructure_C/leon_rt/BayerPipelineParams.h

1 
	~"sùpPœtf‹m.h
"

5 
	#SZ_IN_IMG
 "cﬁos˚√_f6400k_3264x2448_12ms_1x.øw"

	)

11 
	#BAYER_W
 522

	)

12 
	#BAYER_H
 128

	)

14 
	#IMG_W
 (
BAYER_W
-10)

	)

15 
	#IMG_H
 (
BAYER_H
-10)

	)

17 
	#BAYER_BITS
 10

	)

21 
	#BLACK_LEVEL
 0.015625

22 

	)

24 
	#LSC_GAIN_MAP_W
 56

	)

25 
	#LSC_GAIN_MAP_H
 44

	)

28 
UI¡16
 
lscMesh
[44 * 56] 
ALIGNED
(8);

31 
	#BAD_PIX_ALPHA_G_HOT
 0x6

32 
	#BAD_PIX_ALPHA_RB_HOT
 0x6

33 
	#BAD_PIX_ALPHA_G_COLD
 0x6

34 
	#BAD_PIX_ALPHA_RB_COLD
 0x6

35 
	#BAD_PIX_NOISE_LEVEL
 0x0000

36 

	)

38 
	#GRGB_IMBAL_PLAT_DARK
 576

	)

39 
	#GRGB_IMBAL_DECAY_DARK
 640

	)

40 
	#GRGB_IMBAL_PLAT_BRIGHT
 800

	)

41 
	#GRGB_IMBAL_DECAY_BRIGHT
 960

	)

42 
	#GRGB_IMBAL_THRESHOLD
 1000

43 

	)

44 
	#CHROMA_GEN_EPSILON
 0.000978

	)

45 
	#CHROMA_MEDIAN_SIZE
 3

	)

48 
	#DIGI_GAIN_GR
 0x0104>>2

49 
	#DIGI_GAIN_GB
 0x0104>>2

50 
	#DIGI_GAIN_R
 0x01ab>>2

51 
	#DIGI_GAIN_B
 0x01ac>>2

52 

	)

53 
	#DIGI_SAT_GR
 255

54 
	#DIGI_SAT_GB
 255

55 
	#DIGI_SAT_R
 255

56 
	#DIGI_SAT_B
 255

57 

	)

59 
	#SHARP_SIGMA
 1.300000

	)

60 
	#SHARP_STRENGTH
 0x3e00

61 
	#SHARP_ALPHA
 0x3666

62 
	#SHARP_OVERSHOOT
 0x3c9a

63 
	#SHARP_UNDERSHOOT
 0x3af5

64 

	)

65 
	#SHARP_RANGE_STOP_0
 0x1c04

66 
	#SHARP_RANGE_STOP_1
 0x2d05

67 
	#SHARP_RANGE_STOP_2
 0x3ae7

68 
	#SHARP_RANGE_STOP_3
 0x3bd8

69 

	)

70 
	#SHARP_MIN_THR
 0x1a25

71 

	)

73 
	#LUMA_DNS_STRENGTH
 12.000000

	)

74 
	#LUMA_DNS_ALPHA
 96

75 

	)

79 
	#LUMA_DNS_F2
 0x55555555

	)

82 
UI¡8
 
yDnsRefLut
[256];

83 
UI¡8
 
yDnsGammaLut
[256];

85 
	#LUMA_DNS_REF_SHIFT
 14

	)

86 
	#LUMA_DNS_REF_GAMMA
 0.800000

	)

89 
	#LUMA_RAND_NOISE_STRENGTH
 0.080000

	)

92 
	#CHROMA_DNS_T1
 4

	)

93 
	#CHROMA_DNS_T2
 5

	)

94 
	#CHROMA_DNS_H_ENAB
 1

	)

97 
ccm
[9];

99 
	#DESAT_T1
 0.007843

	)

100 
	#DESAT_MUL
 19.615385

	)

103 
	#GAMMA_DARK
 1.700000

	)

104 
	#GAMMA_BRIGHT
 2.200000

	)

105 
	#GAMMA_ACE_SUB
 0.047059

	)

106 
	#GAMMA_ACE_MUL
 1.053719

	)

108 
UI¡16
 
sh¨≥n_c€ffs
[4];

109 
UI¡16
 
gammaTabÀ
[256] 
ALIGNED
(8);

110 
UI¡8
 
lumaDnsLut
[32] 
ALIGNED
(8);

111 
UI¡16
 
h‹zC€fs
[] 
ALIGNED
(8);

112 
UI¡16
 
vîtC€fs
[] 
ALIGNED
(8);

113 
bôpos
;

116 
	#HORZ_N
 1

	)

117 
	#HORZ_D
 2

	)

119 
	#VERT_N
 1

	)

120 
	#VERT_D
 2

	)

122 
	#CCM_COEF
(
x
Ë(
UI¡16
)(x*1024)

	)

	@HowTo/DynamicInfrastructure_C/leon_rt/rtmain.c

3 
	~<°dio.h
>

4 
	~<DrvLe⁄.h
>

5 
	~<swcShaveLﬂdî.h
>

6 
	~"BayîISPModñ.h
"

7 
	~"BayîPùñöeP¨ams.h
"

8 
	~"theDynC⁄ãxt.h
"

10 
	#NO_OF_MESG_APP_INSTANCES_THREE
 2

	)

11 
BayîISPModñ
 
	gmyPl
;

13 
MesgThªóµdynd©a
[];

14 
DEFAULT_SHAVE_GROUPgΩdynd©a
[];

16 
Dy«micC⁄ãxt_t
 
MODULE_DATA
(
MesgThªe
);

18 
__©åibuã__
((
£˘i⁄
(".cmx.bss"))Ë
	gsomeRTAºay
[20];

20 
	$maö
() {

21 
i
;

22 
shaveU£d
[
NO_OF_MESG_APP_INSTANCES_THREE
];

23 
°©us
[
NO_OF_MESG_APP_INSTANCES_THREE
];

25 
swcShaveUnô_t
 
shaveLi°MesgThªe
[
NO_OF_MESG_APP_INSTANCES_THREE
] = {1,2};

27 
	`¥ötf
("AndÇow from LeonRT.\n");

29 
°©us
[0] = 
	`swcSëupDynShaveAµs
(&
	`MODULE_DATA
(
MesgThªe
), 
shaveLi°MesgThªe
, 
NO_OF_MESG_APP_INSTANCES_THREE
);

30 i‡(
°©us
[0] !
MYR_DYN_INFR_SUCCESS
)

31 
	`MYR_DYN_INFR_CHECK_CODE
(
°©us
[0]);

33 
i
 = 0; i < 
NO_OF_MESG_APP_INSTANCES_THREE
; i++) {

34 
°©us
[
i
] = 
	`swcRunShaveAlgo
(&
	`MODULE_DATA
(
MesgThªe
), &
shaveU£d
[i]);

35 i‡(
°©us
[
i
] !
MYR_DYN_INFR_SUCCESS
)

36 
	`MYR_DYN_INFR_CHECK_CODE
(
°©us
[
i
]);

37 
	`swcWaôShave
(
shaveU£d
[
i
]);

40 
	`¥ötf
("AndÜet's seeá SIPPÖipeline working:\n");

41 
	`sùpInôülize
();

42 
	`buûdBayîISPModñ
(&
myPl
);

43 
	`c⁄figBayîISPModñ
(&
myPl
);

44 
	`ªadBayîISPModñI≈ut
(&
myPl
);

45 
	`sùpPro˚ssFøme
(
myPl
.
∂
);

46 
	`wrôeBayîISPModñOuçut
(&
myPl
);

47 
	`¥ötf
("SIPPÖipelineÑan\n");

50 
°©us
[0] = 
	`swcCÀ™upDynShaveAµs
(&
	`MODULE_DATA
(
MesgThªe
));

51 i‡(
°©us
[0] !
MYR_DYN_INFR_SUCCESS
)

52 
	`MYR_DYN_INFR_CHECK_CODE
(
°©us
[0]);

54 
	`DrvLe⁄RTSig«lSt›
();

56 
	}
}

	@HowTo/DynamicInfrastructure_C/shaveDynApps/MesgOne/Entry.c

7 
	~<°dio.h
>

8 
	~<°dlib.h
>

9 
	~<swcCdma.h
>

10 
	~<svuComm⁄Shave.h
>

11 
	~"theDynC⁄ãxt.h
"

13 
__©åibuã__
((
£˘i⁄
(".bss"))Ë
	gmyAºay
[1024];

15 (*
	t¥ötfunc_t
)(c⁄° *
	tf‹m©
, ...);

16 
someAºay
[200];

18 
¥ötfunc_t
 
theMDK¥ötf
;

20 
dmaTønß˘i⁄Li°_t
 
	`__©åibuã__
((
	`£˘i⁄
(".cmx.cdmaDes¸ùt‹s"))Ë
èsk1
;

21 
dmaTønß˘i⁄Li°_t
 
	`__©åibuã__
((
	`£˘i⁄
(".cmx.cdmaDes¸ùt‹s"))Ë*
ªf1
;

23 
	$CMXCODE
–
CMXFun˘i⁄
)()

25 
	`scMuãxReque°
(4);

26 (
theMDK¥ötf
)("SettingÅhe memoryÅo somethingÉlseÑunning fromá CMX function!\n");

27 
	`scMuãxRñó£
(4);

28 
myAºay
[512]=0xC0FEBABE;

29 
	}
}

31 
__©åibuã__
((
noölöe
)Ë
	$DDRFun˘i⁄
() {

32 
	`scMuãxReque°
(4);

33 (
theMDK¥ötf
)("SettingÅhe memoryÅo somethingÉlseÑunning fromá DDR function.\n");

34 
	`scMuãxRñó£
(4);

35 
myAºay
[512] = 0xC0FEBEEF;

36 
	}
}

38 
	$E¡ry
() {

39 
someV¨
;

40 
u32
* 
öAddªss
;

41 
u32
* 
outAddªss
;

43 
	`scMuãxReque°
(4);

44 
i
;

45 
someV¨
 = 7.0;

46 
	`¥ötf
("Prötögá flﬂàvÆue: %0.2f\n", 
someV¨
);

47 
myAºay
[512] = 513;

48 
	`¥ötf
("Somêloˇ»mem‹y is: 0x%X\n", 
myAºay
[512]);

49 
	`¥ötf
("SomêÀ⁄ sh¨ed mem‹y is: 0x%X\n", 
someAºay
[150]);

50 
	`scMuãxRñó£
(4);

54 
u32
 
id1
 = 
	`dmaInôReque°î
(1);

56 
öAddªss
 = (
u32
*) ((u32) 0x80000000);

57 
outAddªss
 = (
u32
*) (0x70000000 + 1024 * 128 * 6);

60 
ªf1
 = 
	`dmaCª©eTønß˘i⁄
(
id1
, &
èsk1
, (
u8
*Ë
öAddªss
, (u8*Ë
outAddªss
,

62 
	`dmaSèπLi°Task
(
ªf1
);

63 
	`dmaWaôTask
(
ªf1
);

64 
	`scMuãxReque°
(4);

65 
	`¥ötf
("---------------------------------------------\n");

66 
	`¥ötf
("Some ofÅhe original DDR values:\n");

67 
i
 = 0; i < 3; i++) {

68 
	`¥ötf
("0x%X=0x%X|", (Ë&
öAddªss
[
i
], inAddress[i]);

69 i‡((
i
 & 0x3) == 0)

70 
	`¥ötf
("\n");

72 
	`¥ötf
("\n");

73 
	`¥ötf
("The same in CMX:\n");

74 
i
 = 0; i < 3; i++) {

75 
	`¥ötf
("0x%X=0x%X|", (Ë&
outAddªss
[
i
], outAddress[i]);

76 i‡((
i
 & 0x3) == 0)

77 
	`¥ötf
("\n");

79 
	`¥ötf
("---------------------------------------------\n");

80 
	`¥ötf
("\n");

81 
	`scMuãxRñó£
(4);

83 
	}
}

	@HowTo/DynamicInfrastructure_C/shaveDynApps/MesgThree/Entry.c

7 
	~<°dio.h
>

8 
	~<°dlib.h
>

9 
	~<svuComm⁄Shave.h
>

11 (*
	t¥ötfunc_t
)(c⁄° *
	tf‹m©
, ...);

13 
	`__©åibuã__
((
	`£˘i⁄
(".bss"))Ë
myAºay
[1024];

14 
Ãt_someRTAºay
[20];

16 
¥ötfunc_t
 
theMDK¥ötf
;

18 
	$CMXCODE
–
CMXFun˘i⁄
)()

20 
	`scMuãxReque°
(4);

21 (
theMDK¥ötf
)("I'm settingÅhe other memoryÅo somethingÉlseÑunning fromá CMX function!\n");

22 
	`scMuãxRñó£
(4);

23 
myAºay
[512]=0xC0FEBABE;

24 
	}
}

26 
	$DDRFun˘i⁄
() {

27 
	`scMuãxReque°
(4);

28 (
theMDK¥ötf
)("SettingÅhe memoryÅo somethingÉlseÑunning fromá DDR function\n");

29 
	`scMuãxRñó£
(4);

30 
myAºay
[512] = 0xC0FEBEEF;

31 
	}
}

33 
	$E¡ry
() {

34 
	`scMuãxReque°
(4);

35 
	`¥ötf
("OthîÜoˇ»mem‹yÅÿMesgThªêis: 0x%X\n", 
myAºay
[512]);

36 
	`scMuãxRñó£
(4);

37 
myAºay
[512] = 0xC0FEC0FE;

38 
	`scMuãxReque°
(4);

39 
	`¥ötf
("Samêmem‹y from MesgThªêi†now: 0x%X\n", 
myAºay
[512]);

40 
	`scMuãxRñó£
(4);

42 
theMDK¥ötf
 = (
¥ötfunc_t
Ë
¥ötf
;

43 
	`DDRFun˘i⁄
();

45 
	`CMXFun˘i⁄
();

46 
	`scMuãxReque°
(4);

47 
	`¥ötf
("A·î jumpög ouào‡®CMX fun˘i⁄,Åh© mem‹y beˇme: 0x%X\n", 
myAºay
[512]);

48 
	`scMuãxRñó£
(4);

49 
	`scMuãxReque°
(4);

50 
	`¥ötf
("Shared memory fromÅhis shaveátÜocation 0x%X fromá LeonOS declared variable is 0x%X.\n",

51 (Ë&
Ãt_someRTAºay
[10],Ürt_someRTArray[10]);

52 
	`scMuãxRñó£
(4);

54 
	}
}

	@HowTo/DynamicInfrastructure_C/shaveDynApps/MesgTwo/Entry.c

7 
	~<°dio.h
>

8 
	~<°dlib.h
>

9 
	~<svuComm⁄Shave.h
>

11 
__©åibuã__
((
£˘i⁄
(".bss"))Ë
	gmyAºay
[1024];

13 (*
	t¥ötfunc_t
)(c⁄° *
	tf‹m©
, ...);

14 
someAºay
[200];

16 
¥ötfunc_t
 
theMDK¥ötf
;

18 
	$CMXCODE
–
CMXFun˘i⁄
)()

20 
	`scMuãxReque°
(4);

21 (
theMDK¥ötf
)("SettingÅhe other memoryÅo somethingÉlseÑunning fromá CMX function.\n");

22 
	`scMuãxRñó£
(4);

23 
myAºay
[512]=0xC0FEBABE;

24 
	}
}

26 
	$DDRFun˘i⁄
() {

27 
	`scMuãxReque°
(4);

28 (
theMDK¥ötf
)("SettingÅhe memoryÅo somethingÉlseÑunning fromá DDR function.\n");

29 
	`scMuãxRñó£
(4);

30 
myAºay
[512] = 0xC0FEBEEF;

31 
	}
}

33 
	$E¡ry
() {

34 
	`scMuãxReque°
(4);

35 
	`¥ötf
("Othî mem‹y from MesgTwÿ≠∞is: 0x%X\n", 
myAºay
[512]);

36 
	`scMuãxRñó£
(4);

37 
myAºay
[512] = 0xC0FEC0FE;

38 
	`scMuãxReque°
(4);

39 
	`¥ötf
("Samêmem‹y f‹ MesgTwÿi†now: 0x%X\n", 
myAºay
[512]);

40 
	`scMuãxRñó£
(4);

42 
theMDK¥ötf
 = (
¥ötfunc_t
Ë
¥ötf
;

43 
	`DDRFun˘i⁄
();

45 
	`CMXFun˘i⁄
();

46 
	`scMuãxReque°
(4);

47 
	`¥ötf
("I'vêgŸánŸhî o‡the£ mesßge†a·î jumpög ouào‡®CMX fun˘i⁄! Iàßy†th© mem‹y beˇme: 0x%X\n",
myAºay
[512]);

48 
	`scMuãxRñó£
(4);

49 
	`scMuãxReque°
(4);

50 
	`¥ötf
("Some shared memory fromÅhis shaveátÜocation 0x%X fromá LeonOS declared variable is 0x%X.\n",

51 (Ë&
someAºay
[100], someArray[100]);

52 
	`scMuãxRñó£
(4);

55 
	}
}

	@HowTo/DynamicInfrastructure_CPP/leon/app_config.c

11 
	~<ªgi°îsMyrüd.h
>

12 
	~<OsDrvC¥.h
>

13 
	~"OsDrvTimî.h
"

14 
	~<DrvRegUtûs.h
>

15 
	~<OsDrvShaveL2Cache.h
>

16 
	~"≠p_c⁄fig.h
"

21 
	#L2CACHE_CFG
 (
SHAVE_L2CACHE_NORMAL_MODE
)

	)

36 
	$öôClocksAndMem‹y
()

38 
tyAuxClkDividîCfg
 
auxClkAŒOn
[] =

40 {
AUX_CLK_MASK_UART
, 
CLK_SRC_REFCLK0
, 96, 625},

45 
	`OsDrvC¥Inô
();

46 
	`OsDrvC¥O≥n
();

47 
	`OsDrvC¥AuxClockAºayC⁄fig
(
auxClkAŒOn
);

50 
	`OsDrvC¥SysDevi˚A˘i⁄
(
UPA_DOMAIN
,
PULSE_RESET
,
APP_UPA_CLOCKS
);

53 
	}
}

55 
	$InôShaveL2C
()

57 
s32
 
sc
;

59 
sc
=
	`OsDrvShaveL2CacheInô
(
L2CACHE_CFG
);

60 if(
sc
)

61  
sc
;

64 
sc
=
	`OsDrvShaveL2CRe£tP¨tôi⁄s
();

65  
sc
;

66 
	}
}

69 
	$C⁄figShaveL2C
()

71 
s32
 
sc
 = 
OS_MYR_DRV_SUCCESS
;

72 
uöt32_t
 
i
;

73 
∑πôi⁄_id
;

75 
sc
 +
	`OsDrvShaveL2CGëP¨tôi⁄
(
SHAVEPART16KB
, &
∑πôi⁄_id
);

76 
i
=0; i < 12; i++){

78 
sc
 +
	`OsDrvShaveL2CSëWödowP¨tôi⁄
(
i
, 
SHAVEL2CACHEWIN_A
, 
∑πôi⁄_id
);

81 
sc
 +
	`OsDrvShaveL2CacheAŒoˇãSëP¨tôi⁄s
();

82  
sc
;

83 
	}
}

	@HowTo/DynamicInfrastructure_CPP/leon/app_config.h

9 #i‚de‡
_APP_CONFIG_H_


10 
	#_APP_CONFIG_H_


	)

12 
	~<DrvC¥Deföes.h
>

19 
	#L2CACHE_CFG
 (
SHAVE_L2CACHE_NORMAL_MODE
)

	)

23 
	#DEFAULT_APP_CLOCK_KHZ
 480000

	)

24 
	#DEFAULT_OSC_CLOCK_KHZ
 12000

	)

27 
	#MSS_CLOCKS
 (
DEV_MSS_APB_SLV
 | \

28 
DEV_MSS_APB2_CTRL
 | \

29 
DEV_MSS_RTBRIDGE
 | \

30 
DEV_MSS_RTAHB_CTRL
 | \

31 
DEV_MSS_LRT
 | \

32 
DEV_MSS_LRT_DSU
 | \

33 
DEV_MSS_LRT_L2C
 | \

34 
DEV_MSS_LRT_ICB
 | \

35 
DEV_MSS_AXI_BRIDGE
 | \

36 
DEV_MSS_MXI_CTRL
 | \

37 
DEV_MSS_MXI_DEFSLV
 | \

38 
DEV_MSS_AXI_MON
 | \

39 
DEV_MSS_LCD
 | \

40 
DEV_MSS_AMC
 | \

41 
DEV_MSS_SIPP
 | \

42 
DEV_MSS_TIM
 )

	)

44 
	#APP_UPA_CLOCKS
 (
DEV_UPA_SH0
 | \

45 
DEV_UPA_SH1
 | \

46 
DEV_UPA_SH2
 | \

47 
DEV_UPA_SH3
 | \

48 
DEV_UPA_SH4
 | \

49 
DEV_UPA_SH5
 | \

50 
DEV_UPA_SH6
 | \

51 
DEV_UPA_SH7
 | \

52 
DEV_UPA_SH8
 | \

53 
DEV_UPA_SH9
 | \

54 
DEV_UPA_SH10
 | \

55 
DEV_UPA_SH11
 | \

56 
DEV_UPA_SHAVE_L2
 | \

57 
DEV_UPA_CDMA
 | \

58 
DEV_UPA_CTRL
 )

	)

60 
	#APP_SIPP_CLOCKS
 (
DEV_SIPP_RAW
 | \

61 
DEV_SIPP_LSC
 | \

62 
DEV_SIPP_DBYR
 | \

63 
DEV_SIPP_CHROMA
 | \

64 
DEV_SIPP_LUMA
 | \

65 
DEV_SIPP_SHARPEN
 | \

66 
DEV_SIPP_MED
 | \

67 
DEV_SIPP_LUT
 | \

68 
DEV_SIPP_CC
 | \

69 
DEV_SIPP_MIPI_RX1
 )

	)

80 
öôClocksAndMem‹y
();

81 
InôShaveL2C
();

82 
C⁄figShaveL2C
();

	@HowTo/DynamicInfrastructure_CPP/leon/main.c

11 
	~<°dlib.h
>

12 
	~<°dio.h
>

13 
	~<°rög.h
>

14 
	~<πems.h
>

15 
	~<πems/b•Io.h
>

16 
	~"swcFømeTy≥s.h
"

17 
	~<DrvLe⁄.h
>

18 
	~"OsDrvSvu.h
"

19 
	~"πems_c⁄fig.h
"

20 
	~"theDynC⁄ãxt.h
"

21 
	~<UnôTe°Api.h
>

25 
	#NO_OF_MESG_APP_INSTANCES_ONE
 1

	)

26 
	#NO_OF_MESG_APP_INSTANCES_TWO
 1

	)

30 
Dy«micC⁄ãxt_t
 
MODULE_DATA
(
MesgO√
);

31 
Dy«micC⁄ãxt_t
 
MODULE_DATA
(
MesgTwo
);

32 
Dy«micC⁄ãxt_t
 
MODULE_DATA
(
MesgThªe
);

34 
Ãt_°¨t
;

36 
__©åibuã__
((
£˘i⁄
(".cmx.bss"))Ë
	gsomeAºay
[20];

37 
__©åibuã__
((
£˘i⁄
(".cmx.d©a"))Ë
	ghópSèπAddr
;

43 *
	$POSIX_Inô
(*
¨gs
) {

44 
shaveU£dA
, 
shaveU£dB
, 
°©us
;

45 
u32
 
ru¬ög
;

46 
swcShaveUnô_t
 
shaveLi°MesgO√
[
NO_OF_MESG_APP_INSTANCES_ONE
] = {0};

47 
swcShaveUnô_t
 
shaveLi°MesgTwo
[
NO_OF_MESG_APP_INSTANCES_TWO
] = {1};

49 
	`UNUSED
(
¨gs
);

53 
	`unôTe°Inô
 ();

54 
	`¥ötf
("\n");

55 
	`¥ötf
("RTEMS POSIX Started with some CMXát 0x%X is setás 0x%X\n",

56 (Ë&
someAºay
[10], someArray[10]);

58 
°©us
 = 
	`öôClocksAndMem‹y
();

59 i‡(
°©us
 !
OS_MYR_DRV_SUCCESS
)

60 
	`¥ötf
("Error initializing clocksánd memory.\n");

63 
°©us
 = 
	`InôShaveL2C
();

64 i‡(
°©us
 !
OS_MYR_DRV_SUCCESS
)

65 
	`¥ötf
("Error initializing shave L2 cache. \n");

67 
°©us
 = 
	`C⁄figShaveL2C
();

68 i‡(
°©us
 !
OS_MYR_DRV_SUCCESS
)

69 
	`¥ötf
("Error configuring shave L2 cache. \n");

72 
°©us
 = 
	`OsDrvSvuInô
();

73 i‡(
°©us
)

74 
	`exô
(
°©us
);

77 
someAºay
[10] = 500;

78 
someAºay
[15] = 400;

79 
	`¥ötf
("Launching first shaveÖrogram with dyncontextát 0x%X\n",

80 (Ë&
	`MODULE_DATA
(
MesgO√
));

82 
°©us
 = 
	`OsDrvSvuSëupDynShaveAµs
(&
	`MODULE_DATA
(
MesgO√
), 
shaveLi°MesgO√
, 
NO_OF_MESG_APP_INSTANCES_ONE
);

83 i‡(
°©us
 !
OS_MYR_DYN_INFR_SUCCESS
)

84 
	`OSDRV_DYN_INFR_CHECK_CODE
(
°©us
);

86 
°©us
 = 
	`OsDrvSvuO≥nShaves
(
shaveLi°MesgO√
, 
NO_OF_MESG_APP_INSTANCES_ONE
, 
OS_MYR_PROTECTION_SELF
);

87 i‡(
°©us
 !
OS_MYR_DYN_INFR_SUCCESS
)

88 
	`OSDRV_DYN_INFR_CHECK_CODE
(
°©us
);

90 
°©us
 = 
	`OsDrvSvuRunShaveAlgo
(&
	`MODULE_DATA
(
MesgO√
), &
shaveU£dA
);

91 i‡(
°©us
 !
OS_MYR_DYN_INFR_SUCCESS
)

92 
	`OSDRV_DYN_INFR_CHECK_CODE
(
°©us
);

94 
°©us
 = 
	`OsDrvSvuDynWaôShaves
(
shaveLi°MesgO√
, 
NO_OF_MESG_APP_INSTANCES_ONE
, 
OS_DRV_SVU_WAIT_FOREVER
, &
ru¬ög
);

95 i‡(
°©us
 !
OS_MYR_DYN_INFR_SUCCESS
)

96 
	`OSDRV_DYN_INFR_CHECK_CODE
(
°©us
);

98 
	`¥ötf
("O≥øti⁄†abovêexecuãd by shavê%d \n", 
shaveU£dA
);

99 
	`¥ötf
("Launching second shaveÖrogram oná different shave\n");

101 
°©us
 = 
	`OsDrvSvuSëupDynShaveAµs
(&
	`MODULE_DATA
(
MesgTwo
), 
shaveLi°MesgTwo
, 
NO_OF_MESG_APP_INSTANCES_TWO
);

102 i‡(
°©us
 !
OS_MYR_DYN_INFR_SUCCESS
)

103 
	`OSDRV_DYN_INFR_CHECK_CODE
(
°©us
);

105 
°©us
 = 
	`OsDrvSvuO≥nShaves
(
shaveLi°MesgTwo
, 
NO_OF_MESG_APP_INSTANCES_TWO
, 
OS_MYR_PROTECTION_SELF
);

106 i‡(
°©us
 !
OS_MYR_DYN_INFR_SUCCESS
)

107 
	`OSDRV_DYN_INFR_CHECK_CODE
(
°©us
);

109 
°©us
 = 
	`OsDrvSvuRunShaveAlgo
(&
	`MODULE_DATA
(
MesgTwo
), &
shaveU£dB
);

110 i‡(
°©us
 !
OS_MYR_DYN_INFR_SUCCESS
)

111 
	`OSDRV_DYN_INFR_CHECK_CODE
(
°©us
);

113 
°©us
 = 
	`OsDrvSvuDynWaôShaves
(
shaveLi°MesgTwo
, 
NO_OF_MESG_APP_INSTANCES_TWO
, 
OS_DRV_SVU_WAIT_FOREVER
, &
ru¬ög
);

114 i‡(
°©us
 !
OS_MYR_DYN_INFR_SUCCESS
)

115 
	`OSDRV_DYN_INFR_CHECK_CODE
(
°©us
);

117 
	`¥ötf
("O≥øti⁄†abovêexecuãd by shavê%d \n", 
shaveU£dB
);

118 
	`¥ötf
("Launching bothátÅhe sameÅime:\n");

120 
°©us
 = 
	`OsDrvSvuRunShaveAlgo
(&
	`MODULE_DATA
(
MesgTwo
), &
shaveU£dB
);

121 i‡(
°©us
 !
OS_MYR_DYN_INFR_SUCCESS
)

122 
	`OSDRV_DYN_INFR_CHECK_CODE
(
°©us
);

124 
°©us
 = 
	`OsDrvSvuRunShaveAlgo
(&
	`MODULE_DATA
(
MesgO√
), &
shaveU£dA
);

125 i‡(
°©us
 !
OS_MYR_DYN_INFR_SUCCESS
)

126 
	`OSDRV_DYN_INFR_CHECK_CODE
(
°©us
);

128 
°©us
 = 
	`OsDrvSvuDynWaôShaves
(
shaveLi°MesgTwo
, 
NO_OF_MESG_APP_INSTANCES_TWO
, 
OS_DRV_SVU_WAIT_FOREVER
, &
ru¬ög
);

129 i‡(
°©us
 !
OS_MYR_DYN_INFR_SUCCESS
)

130 
	`OSDRV_DYN_INFR_CHECK_CODE
(
°©us
);

132 
°©us
 = 
	`OsDrvSvuDynWaôShaves
(
shaveLi°MesgO√
, 
NO_OF_MESG_APP_INSTANCES_ONE
, 
OS_DRV_SVU_WAIT_FOREVER
, &
ru¬ög
);

133 i‡(
°©us
 !
OS_MYR_DYN_INFR_SUCCESS
)

134 
	`OSDRV_DYN_INFR_CHECK_CODE
(
°©us
);

136 
	`¥ötf
("O≥øti⁄†abovêexecuãd by shave†%dánd %d\n", 
shaveU£dB
, 
shaveU£dA
);

139 
°©us
 = 
	`OsDrvSvuClo£Shaves
(
shaveLi°MesgO√
, 
NO_OF_MESG_APP_INSTANCES_ONE
);

140 i‡(
°©us
 !
OS_MYR_DYN_INFR_SUCCESS
)

141 
	`OSDRV_DYN_INFR_CHECK_CODE
(
°©us
);

143 
°©us
 = 
	`OsDrvSvuClo£Shaves
(
shaveLi°MesgTwo
, 
NO_OF_MESG_APP_INSTANCES_TWO
);

144 i‡(
°©us
 !
OS_MYR_DYN_INFR_SUCCESS
)

145 
	`OSDRV_DYN_INFR_CHECK_CODE
(
°©us
);

148 
	`MODULE_DATA
(
MesgThªe
).
ö°™˚sD©a
->
HópPoﬁs
[
shaveLi°MesgO√
[0]] = &
hópSèπAddr
;

150 
	`MODULE_DATA
(
MesgThªe
).
¸tC⁄ãxtInfo
[2].
hóp_size
 = 5 * 1024;

151 
	`MODULE_DATA
(
MesgThªe
).
¸tC⁄ãxtInfo
[3].
hóp_size
 = 5 * 1024;

153 
	`MODULE_DATA
(
MesgThªe
).
¸tC⁄ãxtInfo
[2].
°ack_size
 = 3 * 1024;

154 
	`MODULE_DATA
(
MesgThªe
).
¸tC⁄ãxtInfo
[3].
°ack_size
 = 3 * 1024;

157 
	`DrvLe⁄RTSèπup
((
u32
Ë&
Ãt_°¨t
);

158 
	`DrvLe⁄RTWaôExecuti⁄
();

161 
°©us
 = 
	`swcCÀ™upDynShaveAµs
(&
	`MODULE_DATA
(
MesgTwo
));

162 i‡(
°©us
 !
OS_MYR_DYN_INFR_SUCCESS
)

163 
	`OSDRV_DYN_INFR_CHECK_CODE
(
°©us
);

165 
°©us
 = 
	`swcCÀ™upDynShaveAµs
(&
	`MODULE_DATA
(
MesgO√
));

166 i‡(
°©us
 !
OS_MYR_DYN_INFR_SUCCESS
)

167 
	`OSDRV_DYN_INFR_CHECK_CODE
(
°©us
);

168 
	`unôTe°FöÆRï‹t
 ();

170 
	`exô
(0);

171 
	}
}

	@HowTo/DynamicInfrastructure_CPP/leon/rtems_config.h

8 #i‚de‡
LEON_RTEMS_CONFIG_H_


9 
	#LEON_RTEMS_CONFIG_H_


	)

12 #i‚de‡
_RTEMS_CONFIG_H_


13 
	#_RTEMS_CONFIG_H_


	)

17 
	~"≠p_c⁄fig.h
"

18 
	~"ÁèlExãnsi⁄.h
"

20 #i‡
deföed
(
__RTEMS__
)

22 #i‡!
deföed
 (
__CONFIG__
)

23 
	#__CONFIG__


	)

29 
	#CONFIGURE_INIT


	)

32 #i‚de‡
RTEMS_POSIX_API


33 
	#RTEMS_POSIX_API


	)

36 
	#CONFIGURE_MICROSECONDS_PER_TICK
 1000

	)

38 
	#CONFIGURE_TICKS_PER_TIMESLICE
 10

	)

40 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

42 
	#CONFIGURE_APPLICATION_NEEDS_CLOCK_DRIVER


	)

44 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

46 
	#CONFIGURE_MINIMUM_TASK_STACK_SIZE
 4096

	)

48 
	#CONFIGURE_MAXIMUM_TASKS
 4

	)

50 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 4

	)

52 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 8

	)

54 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 8

	)

56 
	#CONFIGURE_MAXIMUM_POSIX_SEMAPHORES
 8

	)

58 
	#CONFIGURE_MAXIMUM_POSIX_MESSAGE_QUEUES
 8

	)

60 
	#CONFIGURE_MAXIMUM_POSIX_TIMERS
 4

	)

62 
	#CONFIGURE_MAXIMUM_TIMERS
 4

	)

64 
	#CONFIGURE_MAXIMUM_SEMAPHORES
 2

	)

67 
	#CONFIGURE_MAXIMUM_USER_EXTENSIONS
 1

	)

68 
	#CONFIGURE_INITIAL_EXTENSIONS
 { .
Áèl
 = 
F©Æ_exãnsi⁄
 }

	)

75 *
POSIX_Inô
 (*
¨gs
);

77 
	~<πems/c⁄fdefs.h
>

85 
BSP_SET_CLOCK
(
DEFAULT_OSC_CLOCK_KHZ
, 
DEFAULT_APP_CLOCK_KHZ
, 1, 1, 
DEFAULT_RTEMS_CSS_LOS_CLOCKS
, 
MSS_CLOCKS
,
APP_UPA_CLOCKS
,
APP_SIPP_CLOCKS
,0);

87 
BSP_SET_L2C_CONFIG
(0, 
DEFAULT_RTEMS_L2C_REPLACEMENT_POLICY
, 
DEFAULT_RTEMS_L2C_LOCKED_WAYS
,
DEFAULT_RTEMS_L2C_MODE
, 0, 0);

	@HowTo/DynamicInfrastructure_CPP/leon_rt/BayerISPModel.c

13 
	~"BayîISPModñ.h
"

15 
	~<ö˛ude/sùpHwDefs.h
>

16 
	~<fûãrs/√g©ive/√g©ive.h
>

20 
UI¡8
 
DDR_DATA
 
	gBayîISPModñ_dmaIn0_buf„r
[522 * 128 * 1 ]
ALIGNED
(8);

21 
UI¡8
 
DDR_DATA
 
	gBayîISPModñ_dmaOut1_buf„r
[522 * 128 * 1 ]
ALIGNED
(8);

24 
	$ªadBayîISPModñI≈ut
(
BayîISPModñ
 *
pPl
)

26 
	`sùpRdFûeU8
((
UI¡8
*)
BayîISPModñ_dmaIn0_buf„r
,522 * 128 * 1 * (UInt8),"../../../resources/test_522x128.raw");

28 ()(
pPl
);

30 
	}
}

32 
	$wrôeBayîISPModñOuçut
(
BayîISPModñ
 *
pPl
)

34 
	`sùpWrFûeU8
((
UI¡8
*)
BayîISPModñ_dmaOut1_buf„r
,522 * 128 * 1 * (UInt8),"test_neg_522x128.raw");

36 ()(
pPl
);

38 
	}
}

40 
	$buûdBayîISPModñ
(
BayîISPModñ
 *
pPl
)

43 
pPl
->
∂
 = 
	`sùpCª©ePùñöe
(4, 7, 
	`SIPP_MBIN
(
mböImgSùp
));

46 
pPl
->
dmaIn0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x00, 522, 128, 
	`N_PL
(1), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

47 
pPl
->
√g©ive0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x0, 522, 128, 
	`N_PL
(1), 
	`SZ
(
UI¡8
), 0, 
	`SVU_SYM
(
svuNeg©ive
), 0);

48 
pPl
->
dmaOut1
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x00, 522, 128, 
	`N_PL
(1), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

51 
	`sùpLökFûãr
(
pPl
->
√g©ive0
,ÖPl->
dmaIn0
, 1,1 );

52 
	`sùpLökFûãr
(
pPl
->
dmaOut1
,ÖPl->
√g©ive0
, 1,1 );

54 
	}
}

57 
	$c⁄figBayîISPModñ
(
BayîISPModñ
 *
pPl
)

59 
DmaP¨am
 *
dmaIn0Cfg
 = (DmaP¨am *)
pPl
->
dmaIn0
->
∑øms
;

60 
DmaP¨am
 *
dmaOut1Cfg
 = (DmaP¨am *)
pPl
->
dmaOut1
->
∑øms
;

65 
dmaIn0Cfg
->
ddrAddr
 = (
UI¡32
)&
BayîISPModñ_dmaIn0_buf„r
;

66 
dmaOut1Cfg
->
ddrAddr
 = (
UI¡32
)&
BayîISPModñ_dmaOut1_buf„r
;

69 
	}
}

	@HowTo/DynamicInfrastructure_CPP/leon_rt/BayerISPModel.h

13 #i‚de‡
__BAYERISPMODEL_H__


14 
	#__BAYERISPMODEL_H__


	)

16 
	~<sùp.h
>

17 
	~<sùpTe°Comm⁄.h
>

19 
	~"BayîPùñöeP¨ams.h
"

23 
UI¡8
 
DDR_DATA
 
BayîISPModñ_dmaIn0_buf„r
[ 522 * 128 * 1 ]
ALIGNED
(8);

24 
UI¡8
 
DDR_DATA
 
BayîISPModñ_dmaOut1_buf„r
[ 522 * 128 * 1 ]
ALIGNED
(8);

28 
	sBayîISPModñ


31 
SùpPùñöe
 *
	m∂
;

34 
SùpFûãr
 *
	mdmaIn0
;

35 
SùpFûãr
 *
	mdmaOut1
;

36 
SùpFûãr
 *
	m√g©ive0
;

38 } 
	tBayîISPModñ
;

40 
ªadBayîISPModñI≈ut
(
BayîISPModñ
 *
pPl
);

41 
wrôeBayîISPModñOuçut
(
BayîISPModñ
 *
pPl
);

43 
buûdBayîISPModñ
(
BayîISPModñ
 *
pPl
);

44 
c⁄figBayîISPModñ
(
BayîISPModñ
 *
pPl
);

	@HowTo/DynamicInfrastructure_CPP/leon_rt/BayerPipelineParams.c

7 
	~<sùp.h
>

8 
	~<sùpTe°Comm⁄.h
>

9 
	~"≠p_c⁄fig.h
"

10 
	~"BayîPùñöeP¨ams.h
"

11 
	#POLY_KSZ
 7

	)

13 
UI¡16
 
	gsh¨≥n_c€ffs
[4] = {0x2583,

18 
UI¡16
 
	ggammaTabÀ
[256] 
ALIGNED
(8) = {

37 
UI¡8
 
	glumaDnsLut
[32] 
ALIGNED
(8) =

43 
UI¡16
 
	gh‹zC€fs
[] 
ALIGNED
(8) = {

47 
UI¡16
 
	gvîtC€fs
[] 
ALIGNED
(8) = {

52 
	gbôpos
 = 3;

54 
	gccm
[9] = {

60 
UI¡8
 
	gyDnsGammaLut
[256] = {

95 
UI¡8
 
	gyDnsRefLut
[256] = {

131 
UI¡16
 
	glscMesh
[44 * 56] 
ALIGNED
(8) =

	@HowTo/DynamicInfrastructure_CPP/leon_rt/BayerPipelineParams.h

1 
	~"sùpPœtf‹m.h
"

5 
	#SZ_IN_IMG
 "cﬁos˚√_f6400k_3264x2448_12ms_1x.øw"

	)

11 
	#BAYER_W
 522

	)

12 
	#BAYER_H
 128

	)

14 
	#IMG_W
 (
BAYER_W
-10)

	)

15 
	#IMG_H
 (
BAYER_H
-10)

	)

17 
	#BAYER_BITS
 10

	)

21 
	#BLACK_LEVEL
 0.015625

22 

	)

24 
	#LSC_GAIN_MAP_W
 56

	)

25 
	#LSC_GAIN_MAP_H
 44

	)

28 
UI¡16
 
lscMesh
[44 * 56] 
ALIGNED
(8);

31 
	#BAD_PIX_ALPHA_G_HOT
 0x6

32 
	#BAD_PIX_ALPHA_RB_HOT
 0x6

33 
	#BAD_PIX_ALPHA_G_COLD
 0x6

34 
	#BAD_PIX_ALPHA_RB_COLD
 0x6

35 
	#BAD_PIX_NOISE_LEVEL
 0x0000

36 

	)

38 
	#GRGB_IMBAL_PLAT_DARK
 576

	)

39 
	#GRGB_IMBAL_DECAY_DARK
 640

	)

40 
	#GRGB_IMBAL_PLAT_BRIGHT
 800

	)

41 
	#GRGB_IMBAL_DECAY_BRIGHT
 960

	)

42 
	#GRGB_IMBAL_THRESHOLD
 1000

43 

	)

44 
	#CHROMA_GEN_EPSILON
 0.000978

	)

45 
	#CHROMA_MEDIAN_SIZE
 3

	)

48 
	#DIGI_GAIN_GR
 0x0104>>2

49 
	#DIGI_GAIN_GB
 0x0104>>2

50 
	#DIGI_GAIN_R
 0x01ab>>2

51 
	#DIGI_GAIN_B
 0x01ac>>2

52 

	)

53 
	#DIGI_SAT_GR
 255

54 
	#DIGI_SAT_GB
 255

55 
	#DIGI_SAT_R
 255

56 
	#DIGI_SAT_B
 255

57 

	)

59 
	#SHARP_SIGMA
 1.300000

	)

60 
	#SHARP_STRENGTH
 0x3e00

61 
	#SHARP_ALPHA
 0x3666

62 
	#SHARP_OVERSHOOT
 0x3c9a

63 
	#SHARP_UNDERSHOOT
 0x3af5

64 

	)

65 
	#SHARP_RANGE_STOP_0
 0x1c04

66 
	#SHARP_RANGE_STOP_1
 0x2d05

67 
	#SHARP_RANGE_STOP_2
 0x3ae7

68 
	#SHARP_RANGE_STOP_3
 0x3bd8

69 

	)

70 
	#SHARP_MIN_THR
 0x1a25

71 

	)

73 
	#LUMA_DNS_STRENGTH
 12.000000

	)

74 
	#LUMA_DNS_ALPHA
 96

75 

	)

79 
	#LUMA_DNS_F2
 0x55555555

	)

82 
UI¡8
 
yDnsRefLut
[256];

83 
UI¡8
 
yDnsGammaLut
[256];

85 
	#LUMA_DNS_REF_SHIFT
 14

	)

86 
	#LUMA_DNS_REF_GAMMA
 0.800000

	)

89 
	#LUMA_RAND_NOISE_STRENGTH
 0.080000

	)

92 
	#CHROMA_DNS_T1
 4

	)

93 
	#CHROMA_DNS_T2
 5

	)

94 
	#CHROMA_DNS_H_ENAB
 1

	)

97 
ccm
[9];

99 
	#DESAT_T1
 0.007843

	)

100 
	#DESAT_MUL
 19.615385

	)

103 
	#GAMMA_DARK
 1.700000

	)

104 
	#GAMMA_BRIGHT
 2.200000

	)

105 
	#GAMMA_ACE_SUB
 0.047059

	)

106 
	#GAMMA_ACE_MUL
 1.053719

	)

108 
UI¡16
 
sh¨≥n_c€ffs
[4];

109 
UI¡16
 
gammaTabÀ
[256] 
ALIGNED
(8);

110 
UI¡8
 
lumaDnsLut
[32] 
ALIGNED
(8);

111 
UI¡16
 
h‹zC€fs
[] 
ALIGNED
(8);

112 
UI¡16
 
vîtC€fs
[] 
ALIGNED
(8);

113 
bôpos
;

116 
	#HORZ_N
 1

	)

117 
	#HORZ_D
 2

	)

119 
	#VERT_N
 1

	)

120 
	#VERT_D
 2

	)

122 
	#CCM_COEF
(
x
Ë(
UI¡16
)(x*1024)

	)

	@HowTo/DynamicInfrastructure_CPP/leon_rt/rtmain.c

3 
	~<°dio.h
>

4 
	~<DrvLe⁄.h
>

5 
	~<swcShaveLﬂdî.h
>

6 
	~"BayîISPModñ.h
"

7 
	~"BayîPùñöeP¨ams.h
"

8 
	~"theDynC⁄ãxt.h
"

10 
	#NO_OF_MESG_APP_INSTANCES_THREE
 2

	)

11 
BayîISPModñ
 
	gmyPl
;

13 
MesgThªóµdynd©a
[];

14 
DEFAULT_SHAVE_GROUPgΩdynd©a
[];

16 
Dy«micC⁄ãxt_t
 
MODULE_DATA
(
MesgThªe
);

18 
__©åibuã__
((
£˘i⁄
(".cmx.bss"))Ë
	gsomeRTAºay
[20];

20 
	$maö
() {

21 
i
;

22 
shaveU£d
[
NO_OF_MESG_APP_INSTANCES_THREE
];

23 
°©us
[
NO_OF_MESG_APP_INSTANCES_THREE
];

25 
swcShaveUnô_t
 
shaveLi°MesgThªe
[
NO_OF_MESG_APP_INSTANCES_THREE
] = {2,3};

26 
	`¥ötf
("AndÇow from LeonRT. Setting shared memoryÅo 300\n");

27 
someRTAºay
[10] = 300;

29 
°©us
[0] = 
	`swcSëupDynShaveAµs
(&
	`MODULE_DATA
(
MesgThªe
), 
shaveLi°MesgThªe
, 
NO_OF_MESG_APP_INSTANCES_THREE
);

30 i‡(
°©us
[0] !
MYR_DYN_INFR_SUCCESS
)

31 
	`MYR_DYN_INFR_CHECK_CODE
(
°©us
[0]);

33 
i
 = 0; i < 
NO_OF_MESG_APP_INSTANCES_THREE
; i++) {

34 
°©us
[
i
] = 
	`swcRunShaveAlgo
(&
	`MODULE_DATA
(
MesgThªe
), &
shaveU£d
[i]);

35 i‡(
°©us
[
i
] !
MYR_DYN_INFR_SUCCESS
)

36 
	`MYR_DYN_INFR_CHECK_CODE
(
°©us
[
i
]);

37 
	`swcWaôShave
(
shaveU£d
[
i
]);

40 
	`¥ötf
("AndÜet's seeá SIPPÖipeline working:\n");

41 
	`sùpInôülize
();

42 
	`buûdBayîISPModñ
(&
myPl
);

43 
	`c⁄figBayîISPModñ
(&
myPl
);

45 
	`ªadBayîISPModñI≈ut
(&
myPl
);

46 
	`sùpPro˚ssFøme
(
myPl
.
∂
);

47 
	`wrôeBayîISPModñOuçut
(&
myPl
);

48 
	`¥ötf
("SIPPÖipelineÑan\n");

51 
°©us
[0] = 
	`swcCÀ™upDynShaveAµs
(&
	`MODULE_DATA
(
MesgThªe
));

52 i‡(
°©us
[0] !
MYR_DYN_INFR_SUCCESS
)

53 
	`MYR_DYN_INFR_CHECK_CODE
(
°©us
[0]);

55 
	`DrvLe⁄RTSig«lSt›
();

57 
	}
}

	@HowTo/DynamicInfrastructure_CPP/shaveDynApps/MesgOne/Entry.c

7 
	~<°dio.h
>

8 
	~<°dlib.h
>

9 
	~<swcCdma.h
>

10 
	~<svuComm⁄Shave.h
>

11 
	~"theDynC⁄ãxt.h
"

13 
__©åibuã__
((
£˘i⁄
(".bss"))Ë
	gmyAºay
[10];

15 (*
	t¥ötfunc_t
)(c⁄° *
	tf‹m©
, ...);

16 
someAºay
[20];

18 
¥ötfunc_t
 
theMDK¥ötf
;

20 
dmaTønß˘i⁄Li°_t
 
	`__©åibuã__
((
	`£˘i⁄
(".cmx.cdmaDes¸ùt‹s"))Ë
èsk1
;

21 
dmaTønß˘i⁄Li°_t
 
	`__©åibuã__
((
	`£˘i⁄
(".cmx.cdmaDes¸ùt‹s"))Ë*
ªf1
;

23 
	$CMXCODE
–
CMXFun˘i⁄
)()

25 
	`scMuãxReque°
(4);

26 (
theMDK¥ötf
)("SettingÅhe memoryÅo somethingÉlseÑunning fromá CMX function!\n");

27 
	`scMuãxRñó£
(4);

28 
myAºay
[5]=0xC0FEBABE;

29 
	}
}

31 
__©åibuã__
((
noölöe
)Ë
	$DDRFun˘i⁄
() {

32 
	`scMuãxReque°
(4);

33 (
theMDK¥ötf
)("SettingÅhe memoryÅo somethingÉlseÑunning fromá DDR function.\n");

34 
	`scMuãxRñó£
(4);

35 
myAºay
[5] = 0xC0FEBEEF;

36 
	}
}

38 
	$E¡ry
() {

39 
someV¨
;

40 
u32
* 
öAddªss
;

41 
u32
* 
outAddªss
;

43 
	`scMuãxReque°
(4);

44 
i
;

45 
someV¨
 = 7.0;

46 
	`¥ötf
("Prötögá flﬂàvÆue: %0.2f\n", 
someV¨
);

47 
myAºay
[5] = 513;

48 
	`¥ötf
("Somêloˇ»mem‹y is: 0x%X\n", 
myAºay
[5]);

49 
	`¥ötf
("SomêÀ⁄ sh¨ed mem‹y is: 0x%X\n", 
someAºay
[15]);

50 
	`scMuãxRñó£
(4);

54 
u32
 
id1
 = 
	`dmaInôReque°î
(1);

56 
öAddªss
 = (
u32
*) ((u32) 0x80000000);

57 
outAddªss
 = (
u32
*) (0x70000000 + 1024 * 128 * 6);

60 
ªf1
 = 
	`dmaCª©eTønß˘i⁄
(
id1
, &
èsk1
, (
u8
*Ë
öAddªss
, (u8*Ë
outAddªss
,

62 
	`dmaSèπLi°Task
(
ªf1
);

63 
	`dmaWaôTask
(
ªf1
);

64 
	`scMuãxReque°
(4);

65 
	`¥ötf
("---------------------------------------------\n");

66 
	`¥ötf
("Some ofÅhe original DDR values:\n");

67 
i
 = 0; i < 3; i++) {

68 
	`¥ötf
("0x%X=0x%X|", (Ë&
öAddªss
[
i
], inAddress[i]);

69 i‡((
i
 & 0x3) == 0)

70 
	`¥ötf
("\n");

72 
	`¥ötf
("\n");

73 
	`¥ötf
("The same in CMX:\n");

74 
i
 = 0; i < 3; i++) {

75 
	`¥ötf
("0x%X=0x%X|", (Ë&
outAddªss
[
i
], outAddress[i]);

76 i‡((
i
 & 0x3) == 0)

77 
	`¥ötf
("\n");

79 
	`¥ötf
("---------------------------------------------\n");

80 
	`¥ötf
("\n");

81 
	`scMuãxRñó£
(4);

83 
	}
}

	@HowTo/DynamicInfrastructure_CPP/shaveDynApps/MesgThree/Entry.cpp

7 
	~<°dio.h
>

8 
	~<°dlib.h
>

9 
	~<svuComm⁄Shave.h
>

10 
	~<io°ªam
>

11 
usög
 
«me•a˚
 
	g°d
;

13 (*
	t¥ötfunc_t
)(c⁄° *
	tf‹m©
, ...);

14 
Ãt_someRTAºay
[20];

16 
¥ötfunc_t
 
theMDK¥ötf
;

18 ˛as†
	cTe°


20 
¥iv©e
:

21 *
°r
;

22 
public
:

24 
	$mëhod
(
a
, 
b
) {

25 
c
;

26 
c
 = 
a
 + 
b
;

27 
°r
 = 
√w
 [25];

28 i‡(
nuŒ±r
 =
°r
)

29 
	`¥ötf
("Memory couldÇot beállocated onÅhe shave\n");

31 
	`¥ötf
("Somêhó∞Æloˇãd mem‹yáà0x%x\n", (Ë
°r
);

32  
c
;

34 
	}
};

36 
__©åibuã__
((
noölöe
)Ë
	$DDRFun˘i⁄
() {

37 
	`scMuãxReque°
(4);

38 (
theMDK¥ötf
)("CallingÖrintf fromá DDR function.\n");

39 
	`scMuãxRñó£
(4);

40 
	}
}

42 
__©åibuã__
((
noölöe
)Ë
	$funABC
(
p1
, 
p2
) {

43 
	`__©åibuã__
((
unu£d
)Ë
m
;

45 
Te°
 
t
;

46 
m
 = 
t
.
	`mëhod
(
p1
, 
p2
);

47 
	}
}

49 "C" 
	$E¡ry
() {

50 
	`funABC
(2, 8);

52 
theMDK¥ötf
 = (
¥ötfunc_t
Ë
¥ötf
;

53 
	`DDRFun˘i⁄
();

55 
	`scMuãxReque°
(4);

56 
	`¥ötf
("Some shared memory fromÅhis shaveátÜocation 0x%X fromá LeonRT declared variable is 0x%X.\n",

57 (Ë&
Ãt_someRTAºay
[10],Ürt_someRTArray[10]);

58 
	`scMuãxRñó£
(4);

61 
	}
}

	@HowTo/DynamicInfrastructure_CPP/shaveDynApps/MesgTwo/Entry.c

7 
	~<°dio.h
>

8 
	~<°dlib.h
>

9 
	~<svuComm⁄Shave.h
>

11 
__©åibuã__
((
£˘i⁄
(".bss"))Ë
	gmyAºay
[10];

13 (*
	t¥ötfunc_t
)(c⁄° *
	tf‹m©
, ...);

14 
someAºay
[20];

16 
¥ötfunc_t
 
theMDK¥ötf
;

18 
	$CMXCODE
–
CMXFun˘i⁄
)()

20 
	`scMuãxReque°
(4);

21 (
theMDK¥ötf
)("SettingÅhe other memoryÅo somethingÉlseÑunning fromá CMX function.\n");

22 
	`scMuãxRñó£
(4);

23 
myAºay
[5]=0xC0FEBABE;

24 
	}
}

26 
	$DDRFun˘i⁄
() {

27 
	`scMuãxReque°
(4);

28 (
theMDK¥ötf
)("SettingÅhe memoryÅo somethingÉlseÑunning fromá DDR function.\n");

29 
	`scMuãxRñó£
(4);

30 
myAºay
[5] = 0xC0FEBEEF;

31 
	}
}

33 
	$E¡ry
() {

34 
	`scMuãxReque°
(4);

35 
	`¥ötf
("Othî mem‹y from MesgTwÿ≠∞is: 0x%X\n", 
myAºay
[5]);

36 
	`scMuãxRñó£
(4);

37 
myAºay
[5] = 0xC0FEC0FE;

38 
	`scMuãxReque°
(4);

39 
	`¥ötf
("Samêmem‹y f‹ MesgTwÿi†now: 0x%X\n", 
myAºay
[5]);

40 
	`scMuãxRñó£
(4);

42 
theMDK¥ötf
 = (
¥ötfunc_t
Ë
¥ötf
;

43 
	`DDRFun˘i⁄
();

45 
	`CMXFun˘i⁄
();

46 
	`scMuãxReque°
(4);

47 
	`¥ötf
("I'vêgŸánŸhî o‡the£ mesßge†a·î jumpög ouào‡®CMX fun˘i⁄! Iàßy†th© mem‹y beˇme: 0x%X\n", 
myAºay
[5]);

48 
	`scMuãxRñó£
(4);

49 
	`scMuãxReque°
(4);

50 
	`¥ötf
("Some shared memory fromÅhis shaveátÜocation 0x%X fromá LeonOS declared variable is 0x%X.\n",

51 (Ë&
someAºay
[10], someArray[10]);

52 
	`scMuãxRñó£
(4);

55 
	}
}

	@HowTo/EFuse/EFuseProgrammer/leon/app_config.c

11 
	~<DrvC¥.h
>

12 
	~"≠p_c⁄fig.h
"

13 
	~<DrvShaveL2Cache.h
>

17 
	#L2CACHE_CFG
 (
SHAVE_L2CACHE_NORMAL_MODE
)

	)

19 
	#MSS_CLOCKS_BASIC
 (
DEV_MSS_APB_SLV
 | \

20 
DEV_MSS_APB2_CTRL
 | \

21 
DEV_MSS_RTBRIDGE
 | \

22 
DEV_MSS_RTAHB_CTRL
 )

	)

29 
tyAuxClkDividîCfg
 
	gauxClkCfgExam∂e
[] =

31 {
AUX_CLK_MASK_UART
, 
CLK_SRC_REFCLK0
, 96, 625},

35 
tySocClockC⁄fig
 
	g˛kCfgExam∂e
 =

37 .
ªfClk0I≈utKhz
 = 12000,

38 .
	gªfClk1I≈utKhz
 = 0,

39 .
	gèrgëPŒ0FªqKhz
 = 492000,

40 .
	gèrgëPŒ1FªqKhz
 = 0,

41 .
	g˛kSrcPŒ1
 = 
CLK_SRC_REFCLK0
,

42 .
	gma°îClkDivNumî©‹
 = 
DONT_TOUCH_MASTER_DIVIDER
,

43 .
	gma°îClkDivDíomö©‹
 = 
DONT_TOUCH_MASTER_DIVIDER
,

44 .
	gcssDssClockE«bÀMask
 = 
DEFAULT_CORE_CSS_DSS_CLOCKS
,

45 .
	gmssClockE«bÀMask
 = 
MSS_CLOCKS_BASIC
,

46 .
	gsùpClockE«bÀMask
 = 0,

47 .
	gu∑ClockE«bÀMask
 = 
DEFAULT_UPA_CLOCKS
,

48 .
	gpAuxClkCfg
 = 
auxClkCfgExam∂e
,

57 
	$öôClocksAndMem‹y
()

59 
u32
 
sc
;

61 
	`DrvC¥Inô
();

62 
	`DrvC¥SëupClocks
(&
˛kCfgExam∂e
);

64 
sc
 = 
	`DrvShaveL2CacheSëMode
(
L2CACHE_CFG
);

65 if(
sc
)

66  
sc
;

69 
	`DrvShaveL2CacheSëupP¨tôi⁄
(
SHAVEPART256KB
);

72 
sc
 = 
	`DrvShaveL2CacheAŒoˇãSëP¨tôi⁄s
();

73 if(
sc
)

74  
sc
;

76 
	`DrvShaveL2CacheP¨tôi⁄InvÆid©e
(
PARTITION_0
);

81 
	}
}

	@HowTo/EFuse/EFuseProgrammer/leon/app_config.h

9 #i‚de‡
_APP_CONFIG_H_


10 
	#_APP_CONFIG_H_


	)

12 
	~<mv_ty≥s.h
>

14 #ifde‡
__˝lu•lus


18 
	#PARTITION_0
 (0)

	)

23 
öôClocksAndMem‹y
();

25 #ifde‡
__˝lu•lus


	@HowTo/EFuse/EFuseProgrammer/leon/main.c

13 
	~<°dio.h
>

14 
	~<DrvC¥.h
>

15 
	~<DrvTimî.h
>

16 
	~<DrvEfu£.h
>

17 
	~<DrvGpio.h
>

18 
	~"≠p_c⁄fig.h
"

23 
	#EXECUTION_GUARD


	)

27 
	#EFUSE_VDDQ_GPIO_EN
 0

	)

40 
	$efu£VddqSëSèã
(
u32
 
íabÀ
)

42 
u32
 
¥evE«bÀd
 = 
	`DrvGpioGëRaw
(
EFUSE_VDDQ_GPIO_EN
);

43 
	`DrvGpioSëPö
(
EFUSE_VDDQ_GPIO_EN
, 
íabÀ
);

45 if(!
¥evE«bÀd
 && 
íabÀ
)

46 
	`DrvTimîSÀïMi¸o
(1000);

47 
	}
}

49 
	$maö
()

51 
efu£MaskSë
 
£t
;

52 
u64
 
ifcfg
;

53 
ªs
;

57 
u8
 
	`__©åibuã__
((
unu£d
)Ë
´s_key
[
EFUSE_SIZEOF_AES_KEY
] = {

61 
u8
 
	`__©åibuã__
((
unu£d
)Ë
ecc_pubkey
[
EFUSE_SIZEOF_ECC_PUBKEY
] = {

69 
	`öôClocksAndMem‹y
();

71 
	`¥ötf
("eFuseÖrogrammerÉxample\n\n");

73 #ifde‡
EXECUTION_GUARD


74 
	`¥ötf
("By defaultÅhisÉxample willÖlaceán MA2155 intoán unusable state.\n");

75 
	`¥ötf
("Therefore, fullÉxecution ofÅheÉxample code is disabled by default.\n\n");

76 
	`¥ötf
("In orderÅo useÅhisÉxample, modifyÅhe valuesÅo beÖrogrammed\n");

77 
	`¥ötf
("and comment outÅhe definition of EXECUTION_GUARD beforeÑe-running.\n");

85 
ifcfg
 = 
	`EFUSE_IFCFG_USBD_FSEL
(0x31Ë| 
EFUSE_IFCFG_USBD_CLKSEL_EXT
;

87 
	`DrvEfu£CÀ¨MaskSë
(&
£t
);

89 
	`DrvEfu£SëVÆueMask64
(&
£t
, 
EFUSE_BOOTIFCFG_START
, 
EFUSE_BOOTIFCFG_END
, 
ifcfg
);

90 
	`DrvEfu£SëVÆueMask32
(&
£t
, 
EFUSE_BOOTPLLCFG_START
, 
EFUSE_BOOTPLLCFG_END
, 
EFUSE_PLLCFG_RANGE_B
);

91 
	`DrvEfu£SëVÆueMask32
(&
£t
, 
EFUSE_BOOTIFSEL_START
, 
EFUSE_BOOTIFSEL_END
, 
EFUSE_IFSEL_USBD
);

94 
	`DrvEfu£SëVÆueMask32
(&
£t
, 
EFUSE_SECURITY_CODE_START
, 
EFUSE_SECURITY_CODE_END
, 
EFUSE_SECURITY_SECURE
);

96 
	`DrvEfu£SëVÆueMaskPåRev
(&
£t
, 
EFUSE_AES_KEY_START
, 
EFUSE_AES_KEY_END
, 
´s_key
);

98 
	`DrvEfu£SëVÆueMaskPå
(&
£t
, 
EFUSE_ECC_PUBKEY_START
, 
EFUSE_ECC_PUBKEY_END
, 
ecc_pubkey
);

102 
	`efu£VddqSëSèã
(1);

109 
ªs
 = 
	`DrvEfu£ProgømWôhMask
(&
£t
, 
DRVEFUSE_FLAG_REDUNDANCY
);

110 if(
ªs
 != 0) {

111 
	`¥ötf
("DrvEfu£ProgømWôhMask -Éº‹ %d\n", 
ªs
);

113 
	`¥ötf
("EFuses successfullyÖrogrammedánd verified successfully\n");

119 
ªs
 = 
	`DrvEfu£LockRedund™cy
(
DRVEFUSE_LOCK_TOKEN
);

120 if(
ªs
 != 0) {

121 
	`¥ötf
("DrvEfu£LockRedund™cy -Éº‹ %d\n", 
ªs
);

123 
	`¥ötf
("EFuses successfullyÜocked\n");

129 
	`efu£VddqSëSèã
(0);

132 
	}
}

	@HowTo/EFuse/EFuseReader/leon/app_config.c

11 
	~<DrvC¥.h
>

12 
	~"≠p_c⁄fig.h
"

13 
	~<DrvShaveL2Cache.h
>

17 
	#L2CACHE_CFG
 (
SHAVE_L2CACHE_NORMAL_MODE
)

	)

19 
	#MSS_CLOCKS_BASIC
 (
DEV_MSS_APB_SLV
 | \

20 
DEV_MSS_APB2_CTRL
 | \

21 
DEV_MSS_RTBRIDGE
 | \

22 
DEV_MSS_RTAHB_CTRL
 )

	)

29 
tyAuxClkDividîCfg
 
	gauxClkCfgExam∂e
[] =

31 {
AUX_CLK_MASK_UART
, 
CLK_SRC_REFCLK0
, 96, 625},

35 
tySocClockC⁄fig
 
	g˛kCfgExam∂e
 =

37 .
ªfClk0I≈utKhz
 = 12000,

38 .
	gªfClk1I≈utKhz
 = 0,

39 .
	gèrgëPŒ0FªqKhz
 = 492000,

40 .
	gèrgëPŒ1FªqKhz
 = 0,

41 .
	g˛kSrcPŒ1
 = 
CLK_SRC_REFCLK0
,

42 .
	gma°îClkDivNumî©‹
 = 
DONT_TOUCH_MASTER_DIVIDER
,

43 .
	gma°îClkDivDíomö©‹
 = 
DONT_TOUCH_MASTER_DIVIDER
,

44 .
	gcssDssClockE«bÀMask
 = 
DEFAULT_CORE_CSS_DSS_CLOCKS
,

45 .
	gmssClockE«bÀMask
 = 
MSS_CLOCKS_BASIC
,

46 .
	gsùpClockE«bÀMask
 = 0,

47 .
	gu∑ClockE«bÀMask
 = 
DEFAULT_UPA_CLOCKS
,

48 .
	gpAuxClkCfg
 = 
auxClkCfgExam∂e
,

57 
	$öôClocksAndMem‹y
()

59 
u32
 
sc
;

60 
	`DrvC¥Inô
();

61 
	`DrvC¥SëupClocks
(&
˛kCfgExam∂e
);

64 
sc
 = 
	`DrvShaveL2CacheSëMode
(
L2CACHE_CFG
);

65 if(
sc
)

66  
sc
;

69 
	`DrvShaveL2CacheSëupP¨tôi⁄
(
SHAVEPART256KB
);

72 
sc
 = 
	`DrvShaveL2CacheAŒoˇãSëP¨tôi⁄s
();

73 if(
sc
)

74  
sc
;

76 
	`DrvShaveL2CacheP¨tôi⁄InvÆid©e
(
PARTITION_0
);

79 
	}
}

	@HowTo/EFuse/EFuseReader/leon/app_config.h

9 #i‚de‡
_APP_CONFIG_H_


10 
	#_APP_CONFIG_H_


	)

12 
	~<mv_ty≥s.h
>

14 #ifde‡
__˝lu•lus


23 
	#PARTITION_0
 (0)

	)

25 
öôClocksAndMem‹y
();

27 #ifde‡
__˝lu•lus


	@HowTo/EFuse/EFuseReader/leon/main.c

13 
	~<°dio.h
>

14 
	~<DrvC¥.h
>

15 
	~<DrvEfu£.h
>

16 
	~"≠p_c⁄fig.h
"

17 
	~<UnôTe°Api.h
>

23 
	#SERIAL_SIZEOF
 8

	)

24 
	#EFUSE_SERIAL_START
 (
EFUSE_CUSTOMER_USE_START
 + 0)

	)

25 
	#EFUSE_SERIAL_END
 (
EFUSE_CUSTOMER_USE_START
 + 0 + (
SERIAL_SIZEOF
 * 8))

	)

38 
	$maö
()

40 
efu£Së
 
£t
;

41 
i
;

42 
u8
 
£rül
[
SERIAL_SIZEOF
];

44 
	`unôTe°Inô
 ();

45 
	`öôClocksAndMem‹y
();

47 
	`¥ötf
("eFuseÑeaderÉxample\n\n");

50 if((
i
 = 
	`DrvEfu£RódEFu£s
(&
£t
, 
APPLY_FIX
, 
NORMAL_MODE
)) != 0) {

51 
	`¥ötf
("DrvEfu£RódEFu£†-Éº‹ %d\n", 
i
);

53 
	`¥ötf
("EFusesÑead successfully\n\n");

56 
	`¥ötf
("IFSEL: %lu\n",

57 
	`DrvEfu£GëVÆue32
(&
£t
, 
EFUSE_BOOTIFSEL_START
, 
EFUSE_BOOTIFSEL_END
));

58 
	`¥ötf
("IFCFG: 0x%016llx\n",

59 
	`DrvEfu£GëVÆue64
(&
£t
, 
EFUSE_BOOTIFCFG_START
, 
EFUSE_BOOTIFCFG_END
));

62 
	`DrvEfu£GëVÆuePå
(&
£t
, 
EFUSE_SERIAL_START
, 
EFUSE_SERIAL_END
, 
£rül
);

63 
	`¥ötf
("Serial: ");

64 
i
=0; i<
SERIAL_SIZEOF
; i++)

65 
	`¥ötf
("%s%02x", 
i
==0?"":"-", 
£rül
[i]);

66 
	`¥ötf
("\n\n");

68 #¥agm®
GCC
 
dügno°ic
 
push


69 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wstrict-aliasing"

70 
	`¥ötf
("DumpingÉntire EFuse contents\n");

71 
i
=0; i<(
EFUSE_NUM_BITS
/8); i+=4) {

72 
	`¥ötf
(" [%4u:%4u] : 0x%08lx\n",

73 (
i
 * 8) + 31,

74 
i
 * 8,

75 *(
u32
*)&
£t
.
vÆues
[
i
]);

79 #¥agm®
GCC
 
dügno°ic
 
p›


80 
	`unôTe°FöÆRï‹t
 ();

83 
	}
}

	@HowTo/ExplicitVectorisation/leon/app_config.c

11 
	~<OsDrvC¥.h
>

12 
	~<OsDrvShaveL2Cache.h
>

13 
	~"≠p_c⁄fig.h
"

17 
	#L2CACHE_CFG
 (
SHAVE_L2CACHE_NORMAL_MODE
)

	)

32 
	$öôClocksAndMem‹y
()

34 
s32
 
sc
;

36 
tyAuxClkDividîCfg
 
auxClkAŒOn
[] =

38 {
AUX_CLK_MASK_UART
, 
CLK_SRC_REFCLK0
, 96, 625},

43 
sc
 = 
	`OsDrvC¥Inô
();

44 if(
sc
)

46  
sc
;

47 
sc
 = 
	`OsDrvC¥O≥n
();

48 if(
sc
)

50  
sc
;

51 
sc
 = 
	`OsDrvC¥AuxClockAºayC⁄fig
(
auxClkAŒOn
);

52 if(
sc
)

54  
sc
;

56 
sc
 = 
	`OsDrvShaveL2CacheInô
(
L2CACHE_CFG
);

57 if(
sc
)

58  
sc
;

61 
∑πôi⁄_id
;

62 
	`OsDrvShaveL2CGëP¨tôi⁄
(
SHAVEPART256KB
, &
∑πôi⁄_id
);

65 
sc
 = 
	`OsDrvShaveL2CacheAŒoˇãSëP¨tôi⁄s
();

66 if(
sc
)

67  
sc
;

70 
i
 = 0; i < 
SHAVES_USED
; i++)

72 
	`OsDrvShaveL2CSëN⁄WödowedP¨tôi⁄
(
i
, 0, 
NON_WINDOWED_DATA_PARTITION
);

73 
	`OsDrvShaveL2CSëN⁄WödowedP¨tôi⁄
(
i
, 0, 
NON_WINDOWED_INSTRUCTIONS_PARTITION
);

76 
	`OsDrvShaveL2CacheP¨tôi⁄InvÆid©e
(0);

79 
	}
}

	@HowTo/ExplicitVectorisation/leon/app_config.h

9 #i‚de‡
_APP_CONFIG_H_


10 
	#_APP_CONFIG_H_


	)

17 
	#SHAVES_USED
 (1)

	)

18 
	#APP_UPA_CLOCKS
 (
DEV_UPA_SH0
 | \

19 
DEV_UPA_SHAVE_L2
 | \

20 
DEV_UPA_CDMA
 | \

21 
DEV_UPA_CTRL
 )

	)

31 
öôClocksAndMem‹y
();

	@HowTo/ExplicitVectorisation/leon/main.c

11 
	~<°dio.h
>

12 
	~<°dlib.h
>

13 
	~<OsDrvSvu.h
>

14 
	~<πems.h
>

15 
	~<πems/b•Io.h
>

16 
	~<DrvShaveL2Cache.h
>

17 
	~<DrvC¥.h
>

18 
	~"πems_c⁄fig.h
"

19 
	~<UnôTe°Api.h
>

23 
	#SHAVE_USED
 0

	)

29 
u32
 
exvec0_maö
;

30 vﬁ©ûê
exvec0_myöt1
[4];

31 vﬁ©ûê
exvec0_myöt2
[4];

32 vﬁ©ûê
exvec0_myöåez
[4];

36 
osDrvSvuH™dÀr_t
 
	gh™dÀr
;

44 *
	$POSIX_Inô
 (*
¨gs
)

46 
	`UNUSED
(
¨gs
);

48 
u32
 
i
;

49 
u32
 
ã°_∑ss
 = 1;

50 
u32
 
ru¬ög
;

51 
s32
 
sc
;

53 
	`unôTe°Inô
 ();

54 
sc
 = 
	`öôClocksAndMem‹y
();

55 if(
sc
)

56 
	`exô
(
sc
);

57 
sc
 = 
	`OsDrvSvuInô
();

58 if(
sc
)

59 
	`exô
(
sc
);

60 
	`¥ötf
("Executing Explicit VectorisationÅest...\n");

63 
exvec0_myöt1
[0] = 4;

64 
exvec0_myöt1
[1] = 25;

65 
exvec0_myöt1
[2] = 313;

66 
exvec0_myöt1
[3] = 13;

68 
exvec0_myöt2
[0] = 4;

69 
exvec0_myöt2
[1] = 30;

70 
exvec0_myöt2
[2] = 400;

71 
exvec0_myöt2
[3] = 500;

73 
sc
 = 
	`OsDrvSvuO≥nShave
(&
h™dÀr
, 
SHAVE_USED
, 
OS_MYR_PROTECTION_SEM
);

74 if(
sc
)

75 
	`exô
(
sc
);

77 i‡(
sc
 =
OS_MYR_DRV_SUCCESS
)

79 
sc
 = 
	`OsDrvSvuRe£tShave
(&
h™dÀr
);

80 if(
sc
)

81 
	`exô
(
sc
);

82 
sc
 = 
	`OsDrvSvuSëAbsﬁuãDeÁu…Sèck
(&
h™dÀr
);

83 if(
sc
)

84 
	`exô
(
sc
);

85 
sc
 = 
	`OsDrvSvuSèπShave
(&
h™dÀr
,(
u32
)&
exvec0_maö
);

86 if(
sc
)

87 
	`exô
(
sc
);

88 
sc
 = 
	`OsDrvSvuWaôShaves
(1, &
h™dÀr
, 
OS_DRV_SVU_WAIT_FOREVER
, &
ru¬ög
);

89 if(
sc
)

90 
	`exô
(
sc
);

91 
sc
 = 
	`OsDrvSvuClo£Shave
(&
h™dÀr
);

92 if(
sc
)

93 
	`exô
(
sc
);

96 
	`¥ötf
("[T2] c™nŸ o≥¿shavê%d\n", 
SHAVE_USED
);

100 
i
 = 0; i < 3; i++)

101 i‡(
exvec0_myöåez
[
i
] !(
exvec0_myöt1
[i] + 
exvec0_myöt2
[i]))

102 
ã°_∑ss
 = 0;

104 i‡(
ã°_∑ss
)

105 
	`¥ötf
("\n Explicit Vector AddÖassed \n\n");

107 
	`¥ötf
("Explicit Vector Add failed\n");

108 
	`unôTe°FöÆRï‹t
 ();

110 
	`exô
(0);

111 
	}
}

	@HowTo/ExplicitVectorisation/leon/rtems_config.h

9 #i‚de‡
_RTEMS_CONFIG_H_


10 
	#_RTEMS_CONFIG_H_


	)

14 
	~"≠p_c⁄fig.h
"

15 
	~"ÁèlExãnsi⁄.h
"

20 #i‡
deföed
(
__RTEMS__
)

22 #i‡!
deföed
 (
__CONFIG__
)

23 
	#__CONFIG__


	)

26 
	#CONFIGURE_INIT


	)

28 #i‚de‡
RTEMS_POSIX_API


29 
	#RTEMS_POSIX_API


	)

32 
	#CONFIGURE_MICROSECONDS_PER_TICK
 1000

	)

34 
	#CONFIGURE_TICKS_PER_TIMESLICE
 10

	)

36 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

38 
	#CONFIGURE_APPLICATION_NEEDS_CLOCK_DRIVER


	)

40 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

42 
	#CONFIGURE_MINIMUM_TASK_STACK_SIZE
 4096

	)

44 
	#CONFIGURE_MAXIMUM_TASKS
 4

	)

46 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 4

	)

48 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 8

	)

49 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 8

	)

51 
	#CONFIGURE_MAXIMUM_POSIX_SEMAPHORES
 8

	)

53 
	#CONFIGURE_MAXIMUM_POSIX_MESSAGE_QUEUES
 8

	)

55 
	#CONFIGURE_MAXIMUM_POSIX_TIMERS
 4

	)

57 
	#CONFIGURE_MAXIMUM_TIMERS
 4

	)

59 
	#CONFIGURE_MAXIMUM_SEMAPHORES
 2

	)

62 
	#CONFIGURE_MAXIMUM_USER_EXTENSIONS
 1

	)

63 
	#CONFIGURE_INITIAL_EXTENSIONS
 { .
Áèl
 = 
F©Æ_exãnsi⁄
 }

	)

70 *
POSIX_Inô
 (*
¨gs
);

72 
	~<πems/c⁄fdefs.h
>

80 
BSP_SET_CLOCK
(12000, 266000, 1, 1, 
DEFAULT_RTEMS_CSS_LOS_CLOCKS
, 
DEFAULT_RTEMS_MSS_LRT_CLOCKS
, 
APP_UPA_CLOCKS
, 0, 0);

83 
BSP_SET_L2C_CONFIG
(0, 
L2C_REPL_LRU
, 0, 
L2C_MODE_COPY_BACK
, 0, 
NULL
);

	@HowTo/ExplicitVectorisation/shave/init.c

10 
	~<moviVe˘‹Utûs.h
>

11 
	~<svuComm⁄Shave.h
>

13 vﬁ©ûê
	gmyöt1
[4];

14 vﬁ©ûê
	gmyöt2
[4];

15 vﬁ©ûê
	gmyöåez
[4];

17 
__©åibuã__
((
dŒexp‹t
)Ë
	$maö
( )

21 
uöt4
* 
v_1
 = (uöt4*)&(
myöt1
[0]);

22 
uöt4
* 
v_2
 = (uöt4*)&(
myöt2
[0]);

23 
uöt4
* 
v_ªs
 = (uöt4*)&(
myöåez
[0]);

26 *
v_ªs
 = *
v_1
 + *
v_2
;

30 
SHAVE_HALT
;

33 
	}
}

	@HowTo/FramePump/leon/appConfigDefines.h

11 #i‚de‡
APP_CONFIG_DEF_H


12 
	#APP_CONFIG_DEF_H


	)

14 
	~<DrvC¥.h
>

29 #i‚de‡
DESPERATE_CLOCKS


31 
	#CSS_LOS_CLOCKS
 ( \

32 
DEFAULT_CORE_CSS_DSS_CLOCKS
 | \

33 
DEV_CSS_LAHB_CTRL
 | \

34 
DEV_CSS_APB4_CTRL
 | \

35 
DEV_CSS_CPR
 | \

36 
DEV_CSS_ROM
 | \

37 
DEV_CSS_LOS_L2C
 | \

38 
DEV_CSS_MAHB_CTRL
 | \

39 
DEV_CSS_LOS_ICB
 | \

40 
DEV_CSS_LOS_DSU
 | \

41 
DEV_CSS_LOS_TIM
 | \

42 
DEV_CSS_APB1_CTRL
 | \

43 
DEV_CSS_APB3_CTRL
 | \

44 
DEV_CSS_SAHB_CTRL
 | \

45 
DEV_CSS_MSS_MAS
 | \

46 
DEV_CSS_UPA_MAS
 | \

47 
DEV_CSS_LAHB2SHB
 | \

48 
DEV_CSS_SAHB2MAHB
 | \

49 
DEV_CSS_I2C0
 | \

50 
DEV_CSS_I2C1
 | \

51 
DEV_CSS_I2C2
 )

	)

53 
	#MSS_CLOCKS
 ( \

54 
DEV_MSS_APB_SLV
 | \

55 
DEV_MSS_APB2_CTRL
 | \

56 
DEV_MSS_RTBRIDGE
 | \

57 
DEV_MSS_RTAHB_CTRL
 | \

58 
DEV_MSS_LRT
 | \

59 
DEV_MSS_LRT_DSU
 | \

60 
DEV_MSS_LRT_L2C
 | \

61 
DEV_MSS_LRT_ICB
 | \

62 
DEV_MSS_AXI_BRIDGE
 | \

63 
DEV_MSS_MXI_CTRL
 | \

64 
DEV_MSS_MXI_DEFSLV
 | \

65 
DEV_MSS_AXI_MON
 | \

66 
DEV_MSS_MIPI
 | \

67 
DEV_MSS_CIF0
 | \

68 
DEV_MSS_CIF1
 | \

69 
DEV_MSS_AMC
 | \

70 
DEV_MSS_SIPP
 | \

71 
DEV_MSS_TIM
)

	)

73 
	#SIPP_CLOCKS
 ( \

74 
DEV_SIPP_MIPI_RX0
 | \

75 
DEV_SIPP_MIPI_RX1
 | \

76 
DEV_SIPP_MIPI_RX2
 | \

77 
DEV_SIPP_MIPI_RX3
 | \

78 
DEV_SIPP_MIPI
 | \

79 
DEV_SIPP_SIPP_ABPSLV
 | \

80 
DEV_SIPP_APB_SLV
 )

	)

82 
	#UPA_CLOCKS
 ( \

83 
DEV_UPA_SHAVE_L2
 | \

84 
DEV_UPA_CDMA
 | \

85 
DEV_UPA_CTRL
 )

	)

87 
	#CSS_LOS_CLOCKS
 (0xFFFFFFFFFFFFFFFFULL)

	)

88 
	#MSS_CLOCKS
 (0xFFFFFFFFUL)

	)

89 
	#SIPP_CLOCKS
 (0xFFFFFFFFUL)

	)

90 
	#UPA_CLOCKS
 (0xFFFFFFFFUL)

	)

95 
	#APP_CLOCK_KHZ
 (600000)

	)

99 c⁄° 
tyAuxClkDividîCfg
 
	gauxClkC⁄fig
[] = {

101 .
auxClockE«bÀMask
 = 
AUX_CLK_MASK_MEDIA
 | 
AUX_CLK_MASK_CIF0
 | 
AUX_CLK_MASK_CIF1
,

102 .
	gauxClockSour˚
 = 
CLK_SRC_SYS_CLK_DIV2
,

103 .
	gauxClockDivNumî©‹
 = 1,

104 .
	gauxClockDivDíomö©‹
 = 1,

107 .
	gauxClockE«bÀMask
 = 
AUX_CLK_MASK_MIPI_ECFG
 | 
AUX_CLK_MASK_MIPI_CFG
,

108 .
	gauxClockSour˚
 = 
CLK_SRC_SYS_CLK_DIV2
,

109 .
	gauxClockDivNumî©‹
 = 1,

110 .
	gauxClockDivDíomö©‹
 = 14,

115 c⁄° 
tySocClockC⁄fig
 
	g≠pClockC⁄fig
 = {

116 .
ªfClk0I≈utKhz
 = 12000,

117 .
	gªfClk1I≈utKhz
 = 0,

118 .
	gèrgëPŒ0FªqKhz
 = 
APP_CLOCK_KHZ
,

119 .
	gèrgëPŒ1FªqKhz
 = 0,

120 .
	g˛kSrcPŒ1
 = 
CLK_SRC_REFCLK0
,

121 .
	gma°îClkDivNumî©‹
 = 1,

122 .
	gma°îClkDivDíomö©‹
 = 1,

123 .
	gcssDssClockE«bÀMask
 = 
CSS_LOS_CLOCKS
,

124 .
	gmssClockE«bÀMask
 = 
MSS_CLOCKS
,

125 .
	gsùpClockE«bÀMask
 = 
SIPP_CLOCKS
,

126 .
	gu∑ClockE«bÀMask
 = 
UPA_CLOCKS
,

127 .
	gpAuxClkCfg
 = 
auxClkC⁄fig
,

	@HowTo/FramePump/leon/brdRtems.c

12 
	~"brdRãms.h
"

13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~<πems.h
>

16 
	~<πems/shñl.h
>

17 
	~<πems/°©us-checks.h
>

18 
	~<πems/libi2c.h
>

19 
	~<πems/libio.h
>

20 
	~<î∫o.h
>

21 
	~<OsDrvI2cBus.h
>

22 
	~<OsDrvC¥.h
>

23 
	~<OsDrvTimî.h
>

24 
	~<DrvDdr.h
>

25 
	~"≠pC⁄figDeföes.h
"

26 
	~"OsDrvI2cMyr2.h
"

27 #i‡
deföed
(
MA2150
)

28 
	~<OsBrdMv0182.h
>

29 #ñi‡
deföed
(
MA2450
)

30 
	~<OsMV0212.h
>

34 
	~<OsCDCEL.h
>

35 
	~<DrvShaveL2Cache.h
>

36 
	~<FømePump.h
>

37 
	~<FømePumpCif.h
>

38 
	~<FømePumpSùp.h
>

39 
	~<FømePumpC⁄åﬁ.h
>

40 
	~"comm⁄Te°s.h
"

41 
	~"DrvLe⁄L2C.h
"

43 
	~<OsImx208.h
>

44 
	~"FømePumpOv9282.h
"

45 
	~"FømePumpImx378.h
"

47 
	~<mvLog.h
>

50 
	#MAX_I2C_BUSES_PER_DEV
 (3)

	)

51 
	#MAX_I2C_ADDRESSES_PER_DEV
 (8)

	)

55 c⁄° * 
	m«me
;

56 c⁄° 
πems_libi2c_drv_t
* 
	m¥ŸocﬁDesc
;

57 
öt32_t
 
	mbusIds
[
MAX_I2C_BUSES_PER_DEV
];

58 
uöt16_t
 
	maddªs£s
[
MAX_I2C_ADDRESSES_PER_DEV
];

59 }
	tBﬂrdDevLi°
;

61 
BﬂrdDevLi°
 
	gi2cDevi˚Li°Ov9282CamPaú
[] = {

63 .
«me
 = "ov9282_tracking_left",

64 .
	g¥ŸocﬁDesc
 = &
libi2cOv9282PrŸocﬁDrvTbl
,

65 .
	gbusIds
 = {0, 1, -1},

66 .
	gaddªs£s
 = {0x61, 0, 0, 0, 0, 0, 0},

69 .
	g«me
 = "ov9282_tracking_right",

70 .
	g¥ŸocﬁDesc
 = &
libi2cOv9282PrŸocﬁDrvTbl
,

71 .
	gbusIds
 = {0, 1, -1},

72 .
	gaddªs£s
 = {0x62, 0, 0, 0, 0, 0, 0},

75 .
	g«me
 = "ov9282_tracking",

76 .
	g¥ŸocﬁDesc
 = &
libi2cOv9282Brﬂdˇ°PrŸocﬁDrvTbl
,

77 .
	gbusIds
 = {0, 1, -1},

78 .
	gaddªs£s
 = {0x71, 0, 0, 0, 0, 0, 0},

81 .
	g«me
 = 
NULL
,

82 .
	g¥ŸocﬁDesc
 = 
NULL
,

83 .
	gbusIds
 = {-1, -1, -1},

84 .
	gaddªs£s
 = {0, 0, 0, 0, 0, 0, 0, 0},

88 
BﬂrdDevLi°
 
	gi2cDevi˚Li°Imx208CamPaú
[] =

91 .
«me
 = "imx208_left",

92 .
	g¥ŸocﬁDesc
 = &
imx208PrŸocﬁDrvTbl
,

93 .
	gbusIds
 = {0, 1, -1},

94 .
	gaddªs£s
 = {(0x6c >> 1), 0, 0, 0, 0, 0, 0},

97 .
	g«me
 = "imx208_right",

98 .
	g¥ŸocﬁDesc
 = &
imx208PrŸocﬁDrvTbl
,

99 .
	gbusIds
 = {0, 1, -1},

100 .
	gaddªs£s
 = {(0x6e >> 1), 0, 0, 0, 0, 0, 0},

103 .
	g«me
 = 
NULL
,

104 .
	g¥ŸocﬁDesc
 = 
NULL
,

105 .
	gbusIds
 = {-1, -1, -1},

106 .
	gaddªs£s
 = {0, 0, 0, 0, 0, 0, 0, 0},

110 
BﬂrdDevLi°
 
	gi2cDevi˚Li°CamA
[] = {

112 .
«me
 = "imx378",

113 .
	g¥ŸocﬁDesc
 = &
imx378PrŸocﬁDrvTbl
,

114 .
	gbusIds
 = {1, -1},

115 .
	gaddªs£s
 = {
IMX378_I2C_ADDRESS
, 0, 0, 0, 0, 0, 0},

118 .
	g«me
 = 
NULL
,

119 .
	g¥ŸocﬁDesc
 = 
NULL
,

120 .
	gbusIds
 = {-1, -1, -1},

121 .
	gaddªs£s
 = {0, 0, 0, 0, 0, 0, 0, 0},

126 
	$öôCachesAndOthîStuff
()

129 
	`DrvC¥SysDevi˚A˘i⁄
(
UPA_DOMAIN
, 
DEASSERT_RESET
, -1);

131 
	`DrvShaveL2CacheSëMode
(
SHAVEL2C_MODE_NORMAL
);

134 
	`DrvShaveL2CacheSëupP¨tôi⁄
(
SHAVEPART64KB
);

135 
	`DrvShaveL2CacheSëupP¨tôi⁄
(
SHAVEPART64KB
);

136 
	`DrvShaveL2CacheSëupP¨tôi⁄
(
SHAVEPART64KB
);

137 
	`DrvShaveL2CacheSëupP¨tôi⁄
(
SHAVEPART64KB
);

140 
	`DrvShaveL2CacheAŒoˇãSëP¨tôi⁄s
();

142 
	`DrvShaveL2CacheSëLSUP¨tId
(0, 0);

143 
	`DrvShaveL2CacheSëLSUP¨tId
(1, 1);

144 
	`DrvShaveL2CacheSëLSUP¨tId
(5, 2);

145 
	`DrvShaveL2CacheSëLSUP¨tId
(6, 3);

146 
	}
}

149 
OS_MYRIAD_DRIVER_STATUS_CODE
 
	$brdInôülizeC¥
()

151 
OS_MYRIAD_DRIVER_STATUS_CODE
 
mdsc
 = 
OS_MYR_DRV_SUCCESS
;

153 
mdsc
 = 
	`OsDrvC¥Inô
();

154 i‡(
mdsc
 !
OS_MYR_DRV_SUCCESS
) {

155  
mdsc
;

158 
mdsc
 = 
	`OsDrvC¥O≥n
();

159 i‡(
mdsc
 !
OS_MYR_DRV_SUCCESS
) {

160  
mdsc
;

163 
mdsc
 = 
	`OsDrvC¥SëupClocks
(&
≠pClockC⁄fig
);

164 i‡(
mdsc
 !
OS_MYR_DRV_SUCCESS
) {

165  
mdsc
;

168 
mdsc
 = 
	`OsDrvC¥SysDevi˚A˘i⁄
(
MSS_DOMAIN
, 
DEASSERT_RESET
, -1);

169 i‡(
mdsc
 !
OS_MYR_DRV_SUCCESS
) {

170  
mdsc
;

173 
mdsc
 = 
	`OsDrvC¥SysDevi˚A˘i⁄
(
CSS_DOMAIN
, 
DEASSERT_RESET
, -1);

174 i‡(
mdsc
 !
OS_MYR_DRV_SUCCESS
) {

175  
mdsc
;

178 
mdsc
 = 
	`OsDrvC¥SysDevi˚A˘i⁄
(
SIPP_DOMAIN
, 
DEASSERT_RESET
, -1);

179 i‡(
mdsc
 !
OS_MYR_DRV_SUCCESS
) {

180  
mdsc
;

183 
mdsc
 = 
	`OsDrvC¥SysDevi˚A˘i⁄
(
UPA_DOMAIN
, 
DEASSERT_RESET
, -1);

184 i‡(
mdsc
 !
OS_MYR_DRV_SUCCESS
) {

185  
mdsc
;

188  
OS_MYR_DRV_SUCCESS
;

189 
	}
}

191 
boﬁ
 
	gmùiCål
[6] = {
Ál£
};

193 
πems_°©us_code
 
	$brdInôülizeSís‹s
()

195 
πems_°©us_code
 
sc
 = 
RTEMS_SUCCESSFUL
;

196 
uöt32_t
 
‰amePumpMaj‹
 = 0;

197 
uöt32_t
 
i
 = 0;

198 
sc
 = 
	`πems_io_ªgi°î_drivî
–0, &
FømePumpDrvTblName
, &
‰amePumpMaj‹
 );

199 
	`RTEMS_CHECK_SC
(
sc
, "rtems_io_register_driver FramePump");

201 
FømePumpVideoDevi˚Sís‹
 
£ns‹Devi˚
[] = {

203 .
vd
 = {

204 .
«me
 = "/dev/video_tracking_left",

205 .
c⁄åﬁDevi˚
 = "/dev/i2c.imx208_left",

206 #ifde‡
USE_SIPP_CMX


207 .
hwFnc
 = &
sùpCmxFunc
,

209 .
hwFnc
 = &
sùpFunc
,

211 .
öãºu±Levñ
 = 10,

213 .
˘æNo
 = 
MIPI_CTRL_2
,

214 .
gpiﬂ
 = 
NULL
,

215 .
•ec
 = &
‰amePumpimx208_ˇmCfg
,

219 .
vd
 = {

220 .
«me
 = "/dev/video_tracking_right",

221 .
c⁄åﬁDevi˚
 = "/dev/i2c.imx208_right",

222 .
hwFnc
 = &
cifFunc
,

223 .
öãºu±Levñ
 = 10,

225 .
˘æNo
 = 
MIPI_CTRL_3
,

226 .
gpiﬂ
 = 
NULL
,

227 .
•ec
 = &
‰amePumpimx208_ˇmCfg
,

230 .
vd
 = {

231 .
«me
 = "/dev/video_tracking_left",

232 .
c⁄åﬁDevi˚
 = "/dev/i2c.ov7750_tracking_left",

233 .
sh¨edC⁄åﬁDevi˚
 = "/dev/i2c.ov7750_tracking",

234 #ifde‡
USE_SIPP_CMX


235 .
hwFnc
 = &
sùpCmxFunc
,

237 .
hwFnc
 = &
sùpFunc
,

239 .
öãºu±Levñ
 = 10,

241 .
˘æNo
 = 
MIPI_CTRL_2
,

242 .
gpiﬂ
 = 
NULL
,

243 .
•ec
 = &
‰amePumpOv7750Raw10_ˇmCfg
,

246 .
vd
 = {

247 .
«me
 = "/dev/video_tracking_right",

248 .
c⁄åﬁDevi˚
 = "/dev/i2c.ov7750_tracking_right",

249 .
sh¨edC⁄åﬁDevi˚
 = "/dev/i2c.ov7750_tracking",

250 .
hwFnc
 = &
cifFunc
,

251 .
öãºu±Levñ
 = 10,

253 .
˘æNo
 = 
MIPI_CTRL_3
,

254 .
gpiﬂ
 = 
NULL
,

255 .
•ec
 = &
‰amePumpOv7750Raw10_ˇmCfg
,

258 .
vd
 = {

259 .
«me
 = "/dev/video_tracking_left",

260 .
c⁄åﬁDevi˚
 = "/dev/i2c.ov9282_tracking_left",

261 .
sh¨edC⁄åﬁDevi˚
 = "/dev/i2c.ov9282_tracking",

262 #ifde‡
USE_SIPP_CMX


263 .
hwFnc
 = &
sùpCmxFunc
,

265 .
hwFnc
 = &
sùpFunc
,

267 .
öãºu±Levñ
 = 10,

269 .
˘æNo
 = 
MIPI_CTRL_2
,

270 .
gpiﬂ
 = 
NULL
,

271 .
•ec
 = &
‰amePumpOv9282Raw8_ˇmCfg
,

274 .
vd
 = {

275 .
«me
 = "/dev/video_tracking_right",

276 .
c⁄åﬁDevi˚
 = "/dev/i2c.ov9282_tracking_right",

277 .
sh¨edC⁄åﬁDevi˚
 = "/dev/i2c.ov9282_tracking",

278 .
hwFnc
 = &
cifFunc
,

279 .
öãºu±Levñ
 = 10,

281 .
˘æNo
 = 
MIPI_CTRL_3
,

282 .
gpiﬂ
 = 
NULL
,

283 .
•ec
 = &
‰amePumpOv9282Raw8_ˇmCfg
,

286 .
vd
 = {

287 .
«me
 = "/dev/video_streaming",

288 .
c⁄åﬁDevi˚
 = "/dev/i2c.imx214_video",

289 #ifde‡
USE_SIPP_CMX


290 .
hwFnc
 = &
sùpCmxFunc
,

292 .
hwFnc
 = &
sùpFunc
,

294 .
öãºu±Levñ
 = 10,

296 .
˘æNo
 = 
MIPI_CTRL_0
,

297 .
gpiﬂ
 = 
NULL
,

298 .
•ec
 = &
‰amePumpimx214_bönög_ˇmCfg
,

301 .
vd
 = {

302 .
«me
 = "/dev/video_streaming",

303 .
c⁄åﬁDevi˚
 = "/dev/i2c.imx378",

304 .
hwFnc
 = &
cifFunc
,

305 .
öãºu±Levñ
 = 10,

307 .
˘æNo
 = 
MIPI_CTRL_0
,

308 .
gpiﬂ
 = 
NULL
,

309 .
•ec
 = &
‰amePumpimx378_ˇmCfg
,

313 
i
 = 0 ; i < 
	`COUNT_OF
(
£ns‹Devi˚
); i++) {

316 i‡(
mùiCål
[
£ns‹Devi˚
[
i
].
˘æNo
] =
Ál£
) {

317 
sc
 = 
	`πems_io_öôülize
(
‰amePumpMaj‹
, 0, (*)&
£ns‹Devi˚
[
i
]);

318 i‡(
sc
 !
RTEMS_SUCCESSFUL
) {

319 
	`mvLog
(
MVLOG_WARN
, "Error initializing %s video device with %sÉrror %s",

320 
£ns‹Devi˚
[
i
].
vd
.
«me
, sís‹Devi˚[i].vd.
c⁄åﬁDevi˚
,

321 
	`°ªº‹
(
î∫o
));

323 
	`mvLog
(
MVLOG_INFO
, "Initialized %s video device with %s",

324 
£ns‹Devi˚
[
i
].
vd
.
«me
, sís‹Devi˚[i].vd.
c⁄åﬁDevi˚
);

325 
mùiCål
[
£ns‹Devi˚
[
i
].
˘æNo
] = 
åue
;

330  
sc
;

331 
	}
}

333 
öt32_t
 
i2cbusH™dÀrs
[
MAX_I2C_BUSES_PER_DEV
];

335 
πems_°©us_code
 
	$bﬂrdRegi°îI2CDevi˚s
 (
BﬂrdDevLi°
* 
i2c_devi˚_li°
)

337 
	`mvLog
(
MVLOG_INFO
, "RegisteringáÜist of I2C devices:");

338 
uöt32_t
 
dev_öd
 = 0;

339 
öt32_t
 
i
 = 0;

340 
öt32_t
 
j
 = 0;

341 
öt32_t
 
i2c_drv_mö‹
 = 0;

342 
BﬂrdDevLi°
* 
devi˚
 = &
i2c_devi˚_li°
[
dev_öd
];

343 
πems_°©us_code
 
sc
 = 
RTEMS_SUCCESSFUL
;

345 
devi˚
->
«me
 !
NULL
) {

346 
	`mvLog
(
MVLOG_INFO
, "Regi°îög I2C devi˚ %s", 
devi˚
->
«me
);

347 
i
 = 0;

348 
j
 = 0;

349 
i
 < 
MAX_I2C_BUSES_PER_DEV
 && 
devi˚
->
busIds
[i] != -1) {

350 
j
 = 0;

351 
j
 < 
MAX_I2C_ADDRESSES_PER_DEV
 && 
devi˚
->
addªs£s
[j] != 0) {

352 
	`mvLog
(
MVLOG_INFO
, "Pollingáddress 0x%x on bus %ld",

353 
devi˚
->
addªs£s
[
j
], devi˚->
busIds
[
i
]);

354 
i2c_drv_mö‹
 = 
	`πems_libi2c_ªgi°î_drv
(
devi˚
->
«me
,

355 (
πems_libi2c_drv_t
*Ë
devi˚
->
¥ŸocﬁDesc
,

356 
i2cbusH™dÀrs
[
devi˚
->
busIds
[
i
]],

357 
devi˚
->
addªs£s
[
j
]);

358 i‡(
i2c_drv_mö‹
 >= 0) {

359 
	`mvLog
(
MVLOG_INFO
, "I2C device %sÑegisteredát bus %ld with"

361 
devi˚
->
«me
, devi˚->
busIds
[
i
],

362 
devi˚
->
addªs£s
[
j
]);

365 
j
++;

368 i‡(
j
 < 
MAX_I2C_ADDRESSES_PER_DEV
 && 
devi˚
->
addªs£s
[j] != 0) {

372 
i
++;

374 i‡(
i
 >
MAX_I2C_BUSES_PER_DEV
 || 
devi˚
->
busIds
[i] == -1 ) {

377 
	`mvLog
(
MVLOG_WARN
, "DeviceÇot found");

378 
sc
 = -1;

380 
	`mvLog
(
MVLOG_INFO
, "----------------------------------------");

381 
devi˚
 = &
i2c_devi˚_li°
[++
dev_öd
];

384  
sc
;

385 
	}
}

387 
πems_°©us_code
 
	$brdInôülizeBﬂrd
 ()

389 
πems_°©us_code
 
sc
 = 
RTEMS_SUCCESSFUL
;

390 
OS_MYRIAD_DRIVER_STATUS_CODE
 
mdsc
 = 
OS_MYR_DRV_SUCCESS
;

391 
°©
 
°
 = {0};

392 c⁄° *
cd˚l_«me
 = "/dev/i2c.cdcel";

393 
πems_devi˚_maj‹_numbî
 
cd˚l_maj‹
 = 0;

394 
πems_devi˚_mö‹_numbî
 
cd˚l_mö‹
 = 0;

395 
πems_libio_io˘l_¨gs_t
 
cd˚lC⁄åﬁ
 = {0};

398 
mdsc
 = 
	`brdInôülizeC¥
();

400 ()
mdsc
;

402 #ifde‡
DDISABLE_LEON_DCACHE


403 
	`DrvLL2CDißbÀ
(
LL2C_OPERATION_INVALIDATE
);

406 
	`OsDrvTimîInô
();

408 #i‡
	`deföed
(
MA2150
)

409 
tyOsBﬂrd0182C⁄figuøti⁄
 
brdC⁄fig
[] = {

411 .
ty≥
 = 
MV182_CAM_B_I2C_BUS
,

415 .
vÆue
 = 
MV182_I2C0


418 .
ty≥
 = 
MV182_END
,

419 .
vÆue
 = 0

422 
tyOsBrd182Eº‹Code
 
îrCode
;

423 
îrCode
 = 
	`osBﬂrd0182Inôüli£
((
tyOsBﬂrd0182C⁄figuøti⁄
*)
brdC⁄fig
);

424 i‡(
îrCode
 !
DRV_OS_BRD_182_DRV_SUCCESS
) {

425 
	`mvLog
(
MVLOG_WARN
, "Board initializationÖroblem.");

426 
	`ÁûTe°
–
__func__
, 
__LINE__
 );

428 #ñi‡
	`deföed
(
MA2450
)

429 
BﬂrdI2CDevC⁄figuøti⁄
 
i2cC⁄fig
[] = {

430 {
MV212_CAM_B_I2C_BUS
, 
MV212_I2C0
},

431 { 
MV212_END
, 0 }};

432 
BﬂrdC⁄figDesc
 
brdC⁄fig
[] = {

434 .
ty≥
 = 
BRDCONFIG_I2CDEVLIST
,

435 .
c⁄fig
 = &
i2cC⁄fig


438 .
ty≥
 = 
BRDCONFIG_END
,

439 .
c⁄fig
 = 0

442 
	`BﬂrdInô
(
brdC⁄fig
);

443 
	`mvLog
(
MVLOG_INFO
, "Board 212 started");

446 i‡(
	`°©
("/dev/i2c.ov7750_åackög", 
NULL
) != 0) {

447 
	`bﬂrdRegi°îI2CDevi˚s
(
i2cDevi˚Li°Ov9282CamPaú
);

450 
	`bﬂrdRegi°îI2CDevi˚s
(
i2cDevi˚Li°CamA
);

454 
	`bﬂrdRegi°îI2CDevi˚s
(
i2cDevi˚Li°Imx208CamPaú
);

456 
	`öôCachesAndOthîStuff
();

460 
cd˚lC⁄åﬁ
.
comm™d
 = 
EXT_PLL_CFG_148_24_24MHZ
;

461 i‡((
sc
 = 
	`°©
(
cd˚l_«me
, &
°
))) {

462 
	`mvLog
(
MVLOG_WARN
, "CDCELÉrror");

463 
	`ÁûTe°
–
__func__
, 
__LINE__
 );

465 
cd˚l_maj‹
 = 
	`πems_fûesy°em_dev_maj‹_t
(
°
.
°_rdev
);

466 
cd˚l_mö‹
 = 
	`πems_fûesy°em_dev_mö‹_t
(
°
.
°_rdev
);

468 
sc
 = 
	`πems_io_›í
(
cd˚l_maj‹
, 
cd˚l_mö‹
, 
NULL
);

469 i‡(
sc
 !
RTEMS_SUCCESSFUL
) {

470 
	`mvLog
(
MVLOG_WARN
, "CDCEL o≥¿îr‹: %d", 
sc
);

471 
	`ÁûTe°
–
__func__
, 
__LINE__
 );

474 
sc
 = 
	`πems_io_c⁄åﬁ
(
cd˚l_maj‹
, 
cd˚l_mö‹
, &
cd˚lC⁄åﬁ
);

475 i‡(
sc
 !
RTEMS_SUCCESSFUL
) {

476 
	`mvLog
(
MVLOG_WARN
, "CDCEL c⁄åﬁÉº‹: %d", 
sc
);

477 
	`ÁûTe°
–
__func__
, 
__LINE__
 );

480 
	`DrvDdrInôüli£
(
NULL
);

481 
	`brdInôülizeSís‹s
();

483  
RTEMS_SUCCESSFUL
;

484 
	}
}

	@HowTo/FramePump/leon/brdRtems.h

1 #i‚de‡
BRD_RTEMS_H_


2 
	#BRD_RTEMS_H_


	)

4 
	~<πems.h
>

6 
	~<FømePumpImx208.h
>

7 
	~<FømePumpOv7750.h
>

8 
	~<FømePumpOv9282.h
>

9 
	~<FømePumpImx214.h
>

11 
	#IN_FRAMES_QUEUE_SIZE
 (4)

12 
	#OUT_FRAMES_QUEUE_SIZE
 (4)

	)

14 
	#I2C_BUS_NAME
 "/dev/i2c"

	)

16 
πems_°©us_code
 
brdInôülizeBﬂrd
();

	@HowTo/FramePump/leon/commonTests.c

12 
	~"comm⁄Te°s.h
"

14 
	~<°dio.h
>

15 
	~<°dlib.h
>

16 
	~<°rög.h
>

17 
	~<uni°d.h
>

18 
	~<sys/ty≥s.h
>

19 
	~<swcCrc.h
>

20 
	~<swcLe⁄Utûs.h
>

21 
	~<mvMa¸os.h
>

22 
	~"brdRãms.h
"

23 
	~<±hªad.h
>

24 
	~<OsDrvTimî.h
>

25 
	~<sched.h
>

26 
	~"mvLog.h
"

28 
èskC⁄ãxt
 
	gˇms
[] = {

30 .
«me
 = "/dev/video_streaming",

31 .
	gÂs
 = 30,

34 .
	g«me
 = "/dev/video_tracking_left",

35 .
	gÂs
 = 30,

38 .
	g«me
 = "/dev/video_tracking_right",

39 .
	gÂs
 = 30,

43 
±hªad_©å_t
 
	gn‹mÆPrioThªadAâr
;

45 
	$öôSèπTe°Thªads
()

47 
i
 = 0;

48 
πems_°©us_code
 
sc
 = 
RTEMS_SUCCESSFUL
;

51 i‡(
	`±hªad_©å_öô
(&
n‹mÆPrioThªadAâr
) !=0) {

52 
	`mvLog
(
MVLOG_WARN
, "pthread_attr_initÉrror");

56 i‡(
	`±hªad_©å_£töhîôsched
(&
n‹mÆPrioThªadAâr
, 
PTHREAD_EXPLICIT_SCHED
) != 0) {

57 
	`mvLog
(
MVLOG_WARN
, "pthread_attr_setinheritschedÉrror");

60 i‡(
	`±hªad_©å_£tschedpﬁicy
(&
n‹mÆPrioThªadAâr
, 
SCHED_RR
) != 0) {

61 
	`mvLog
(
MVLOG_WARN
, "pthread_attr_setschedpolicyÉrror");

65 
i
 = 0; i < 
	`COUNT_OF
(
ˇms
); i++) {

66 
ˇms
[
i
].
˙t
 = i;

69 
sc
 = 
	`±hªad_¸óã
–&
ˇms
[
i
].
id
, &
n‹mÆPrioThªadAâr
, 
ã°ThªadFunc
, (*)&cams[i]);

70 i‡(
sc
 !
RTEMS_SUCCESSFUL
) {

71 
	`≥º‹
("Thread creation failed");

75 
i
 = 0; i < 
	`COUNT_OF
(
ˇms
); i++) {

76 *
vÆue
;

79 
sc
 = 
	`±hªad_joö
–
ˇms
[
i
].
id
, &
vÆue
);

80 i‡(
sc
 !
RTEMS_SUCCESSFUL
) {

81 
	`≥º‹
("Thread join failed");

84 
	}
}

86 
öt32_t
 
	$checkTórögM¨ks
(
FømePumpBuf„r
 *
Âb
, 
èskC⁄ãxt
 * 
tc
)

88 
öt32_t
 
ªtCode
 = 0;

89 
uöt32_t
 
t›M¨k
 = 0;

90 
uöt32_t
 
btmM¨k
 = 0;

91 
uöt32_t
 
‰amebyãsize
 = 0;

93 
‰amebyãsize
 = 
Âb
->
fb
.
•ec
.
height
 * fpb->fb.•ec.
°ride
;

95 
t›M¨k
 = *(
uöt32_t
*)(
Âb
->
fb
.
p1
);

96 
btmM¨k
 = *(
uöt32_t
*)(
Âb
->
fb
.
p1
 + 
‰amebyãsize
 - (uint32_t));

98 i‡(
Âb
->
‰ameCou¡
 !
t›M¨k
 || fpb->‰ameCou¡ !
btmM¨k
) {

100 
ªtCode
 += -2;

101 
	`mvLog
(
MVLOG_WARN
, " > FrameÅearing detected !! fc: %10luÅm: %10lu bm: %10lu !!",

102 
Âb
->
‰ameCou¡
, 
t›M¨k
, 
btmM¨k
);

105 i‡(
Âb
->
‰ameCou¡
 !
tc
->
¥eviousFømeM¨k
 + 1) {

107 
ªtCode
 += -1;

108 
	`mvLog
(
MVLOG_WARN
, " > FrameÜost here, got %10luÉxpected %10lu !!",

109 
Âb
->
‰ameCou¡
, 
tc
->
¥eviousFømeM¨k
 + 1);

112 
tc
->
¥eviousFømeM¨k
 = 
Âb
->
‰ameCou¡
;

114  
ªtCode
;

115 
	}
}

117 
	$ÁûTe°
(c⁄° * 
ÁûedFunc
, 
ÁûedLöe
)

119 
	`mvLog
(
MVLOG_WARN
, "Faûed i¿%s,Üöê%d", 
ÁûedFunc
, 
ÁûedLöe
);

121 
	`exô
(1);

122 
	}
}

125 
	$runAµ
()

127 
πems_°©us_code
 
sc
 = 
RTEMS_SUCCESSFUL
;

129 
sc
 = 
	`brdInôülizeBﬂrd
();

130 i‡(
sc
 !
RTEMS_SUCCESSFUL
) {

131 
	`mvLog
(
MVLOG_WARN
, "FaûuªÅÿöôülizêbﬂrd drivî %d!", 
sc
);

132 
	`ÁûTe°
–
__func__
, 
__LINE__
 );

135 
	`öôSèπTe°Thªads
();

137 
	`mvLog
(
MVLOG_INFO
, "Test finished");

140 
	`exô
(0);

141 
	}
}

	@HowTo/FramePump/leon/commonTests.h

12 
	~<°dio.h
>

13 
	~<°dlib.h
>

14 
	~<°rög.h
>

15 
	~<sys/ty≥s.h
>

16 
	~<swcCrc.h
>

17 
	~<swcLe⁄Utûs.h
>

18 
	~<mvMa¸os.h
>

19 
	~"swcFømeTy≥s.h
"

20 
	~"FømePump.h
"

22 
	sèskC⁄ãxt
 {

23 c⁄° *
	m«me
;

24 
	m˙t
;

25 
±hªad_t
 
	mid
;

26 
uöt32_t
 
	m¥eviousFømeM¨k
;

27 
uöt64_t
 
	m¥eviousTimeSèmpNs
;

28 
uöt32_t
 
	mÂs
;

31 
èskC⁄ãxt
 
ˇms
[3];

34 
öôSèπTe°Thªads
();

35 
öt32_t
 
checkTórögM¨ks
(
FømePumpBuf„r
 *
Âb
, 
èskC⁄ãxt
 * 
tc
);

36 
ÁûTe°
(const *, );

37 
runAµ
();

40 *
ã°ThªadFunc
(*
˘x
);

	@HowTo/FramePump/leon/main.c

12 
	~<°dlib.h
>

13 
	~"comm⁄Te°s.h
"

16 
	$POSIX_Inô
(*
¨gs
)

18 ()
¨gs
;

20 
	`runAµ
();

21 
	}
}

	@HowTo/FramePump/leon/rtems_config.c

9 
	~<b•.h
>

10 
	~<πems.h
>

11 
	~<mv_ty≥s.h
>

12 
	~"ÁèlExãnsi⁄.h
"

14 
	#DEFAULT_APP_CLOCK_KHZ
 (600000)

	)

15 
	#DEFAULT_OSC_CLOCK_KHZ
 (12000)

	)

19 
BSP_SET_CLOCK
(
DEFAULT_OSC_CLOCK_KHZ
,

20 
DEFAULT_APP_CLOCK_KHZ
,

22 
DEFAULT_RTEMS_CSS_LOS_CLOCKS
,

26 
BSP_SET_L2C_CONFIG
(1,

27 
DEFAULT_RTEMS_L2C_REPLACEMENT_POLICY
,

28 
DEFAULT_RTEMS_L2C_LOCKED_WAYS
,

29 
L2C_MODE_WRITE_THROUGH
,

34 
	#CONFIGURE_INIT


	)

36 #i‚de‡
RTEMS_POSIX_API


37 
	#RTEMS_POSIX_API


	)

40 
	#CONFIGURE_MICROSECONDS_PER_TICK
 (1000Ë

	)

42 
	#CONFIGURE_TICKS_PER_TIMESLICE
 (1Ë

	)

44 #i‚de‡
NO_PRINT


45 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

48 
	#CONFIGURE_APPLICATION_NEEDS_CLOCK_DRIVER


	)

50 
	#CONFIGURE_MINIMUM_TASK_STACK_SIZE
 (3*1024)

	)

52 
	#CONFIGURE_MAXIMUM_TASKS
 (12)

	)

53 
	#CONFIGURE_MAXIMUM_SEMAPHORES
 (20)

	)

55 
	#CONFIGURE_UNIFIED_WORK_AREAS


	)

56 
	#CONFIGURE_UNLIMITED_OBJECTS


	)

59 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

60 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 (12)

	)

61 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 (12)

	)

62 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 (12)

	)

63 
	#CONFIGURE_MAXIMUM_POSIX_SEMAPHORES
 (12)

	)

64 
	#CONFIGURE_MAXIMUM_POSIX_MESSAGE_QUEUES
 (12)

	)

65 
	#CONFIGURE_MAXIMUM_POSIX_TIMERS
 (12)

	)

67 
	#CONFIGURE_MAXIMUM_TIMERS
 (20)

	)

68 
	#CONFIGURE_MAXIMUM_MESSAGE_QUEUES
 (20)

	)

70 
	#CONFIGURE_MAXIMUM_DRIVERS
 (20)

	)

71 
	#CONFIGURE_MAXIMUM_DEVICES
 (20)

	)

73 
	#CONFIGURE_LIBIO_MAXIMUM_FILE_DESCRIPTORS
 (40)

	)

75 
	#CONFIGURE_APPLICATION_NEEDS_LIBBLOCK


	)

76 
	#CONFIGURE_USE_IMFS_AS_BASE_FILESYSTEM


	)

78 
	~<πems/shñl.h
>

79 
	#CONFIGURE_SHELL_COMMANDS_INIT


	)

80 
	#CONFIGURE_SHELL_COMMANDS_ALL


	)

81 
	~<πems/shñlc⁄fig.h
>

83 
POSIX_Inô
 (*
¨gs
);

85 
F©Æ_exãnsi⁄
(

86 
I¡î«l_îr‹s_Sour˚
 
the_sour˚
,

87 
boﬁ
 
is_öã∫Æ
,

88 
I¡î«l_îr‹s_t
 
the_îr‹


91 
	#CONFIGURE_MAXIMUM_USER_EXTENSIONS
 (1)

	)

92 
	#CONFIGURE_INITIAL_EXTENSIONS
 { .
Áèl
 = 
F©Æ_exãnsi⁄
 }

	)

94 
	~<πems/c⁄fdefs.h
>

	@HowTo/FramePump/leon/threadFunc.c

12 
	~<°dio.h
>

13 
	~<°dlib.h
>

14 
	~<°rög.h
>

15 
	~<sys/ty≥s.h
>

16 
	~<sys/°©.h
>

17 
	~<f˙é.h
>

18 
	~<uni°d.h
>

19 
	~<sys/io˘l.h
>

20 
	~<î∫o.h
>

21 
	~<swcCrc.h
>

22 
	~<swcLe⁄Utûs.h
>

23 
	~<FømePump.h
>

24 
	~<mvMa¸os.h
>

25 
	~<±hªad.h
>

26 
	~"mvLog.h
"

28 
	~"brdRãms.h
"

29 
	~"comm⁄Te°s.h
"

34 
	#NB_OF_FRAMES
 (100)

	)

40 vﬁ©ûê
uöt64_t
 
	gts
[10];

48 *
	$ã°ThªadFunc
(*
˘x
)

50 
èskC⁄ãxt
 *
tc
 = (èskC⁄ãxà*)
˘x
;

51 
FømePumpBuf„r
 
Âb
 = {0};

52 
fd
 = 0;

53 
πems_°©us_code
 
sc
 = 
RTEMS_SUCCESSFUL
;

54 
i
 = 0;

55 
‰ameS≥c
 
ˇmFømeS≥c
 = {0};

57 
	`mvLog
(
MVLOG_INFO
, "O≥¬ög %†ˇmîa...", 
tc
->
«me
);

58 
fd
 = 
	`›í
(
tc
->
«me
, 
O_RDWR
, 
S_IRWXU
 | 
S_IRWXG
 | 
S_IRWXO
);

59 i‡(
fd
 < 0) {

60 
	`mvLog
(
MVLOG_WARN
, "FaûedÅÿ›í camî®%†: %s", 
tc
->
«me
, 
	`°ªº‹
(
î∫o
));

61  
NULL
;

64 
sc
 = 
	`io˘l
(
fd
, 
FRAME_PUMP_GET_FRAME_SPEC
, &
ˇmFømeS≥c
);

65 i‡(
sc
 !
RTEMS_SUCCESSFUL
) {

66 
	`≥º‹
("FailedÅo get camFrameSpec!!!");

67 
	`ÁûTe°
–
__func__
, 
__LINE__
);

70 
	`mvLog
(
MVLOG_INFO
, "AŒoˇtög FømePum∞buf„rs", 
tc
->
«me
);

71 
i
 = 0; i < 
IN_FRAMES_QUEUE_SIZE
; i++) {

73 * 
‰ameD©a
 = 
NULL
;

74 
size_t
 
‰ameSize
 = 
ˇmFømeS≥c
.
width
 * camFømeS≥c.
height
 * camFømeS≥c.
byãsPP
;

76 
	`mem£t
(&
Âb
, 0, (
FømePumpBuf„r
));

78 
sc
 = 
	`posix_memÆign
(&
‰ameD©a
, 64, 
‰ameSize
);

79 i‡(
sc
 !
RTEMS_SUCCESSFUL
) {

80 
	`mvLog
(
MVLOG_WARN
, "No more space");

83 
Âb
.
fbMem
.
p1
 = 
‰ameD©a
;

85 
	`mem£t
(
Âb
.
fbMem
.
p1
, 0, 
ˇmFømeS≥c
.
width
 * camFømeS≥c.
height
 * camFømeS≥c.
byãsPP
);

87 
sc
 = 
	`wrôe
(
fd
, &
Âb
, (
FømePumpBuf„r
));

88 i‡(
sc
 !(
FømePumpBuf„r
)) {

89 
	`≥º‹
("FailedÅo write!!!");

90 
	`ÁûTe°
–
__func__
, 
__LINE__
);

92 
	`mvLog
(
MVLOG_INFO
, "Inôü»pushÅÿFPump: 0x%lx", (
uöt32_t
)
Âb
.
fbMem
.
p1
);

96 
	`mvLog
(
MVLOG_INFO
, "Sèπög FømePump", 
tc
->
«me
);

97 i‡(-1 =
	`io˘l
(
fd
, 
	`FP_SHARED_CTL
(
FRAME_PUMP_START
))) {

98 
	`≥º‹
("FailedÅo send start!!!");

99 
	`ÁûTe°
–
__func__
, 
__LINE__
);

102 
tc
->
¥eviousFømeM¨k
 = -1;

103 
uöt32_t
 
loˇlCou¡
 = 0;

105 
	`mvLog
(
MVLOG_INFO
, "Ródög fømes", 
tc
->
«me
);

106 
loˇlCou¡
 < 
NB_OF_FRAMES
) {

108 
sc
 = 
	`ªad
(
fd
, &
Âb
, (fpb));

109 i‡(
sc
 !(
FømePumpBuf„r
)) {

110 
	`mvLog
(
MVLOG_WARN
, "FaûedÅÿªad from camî®%†: %s", 
tc
->
«me
, 
	`°ªº‹
(
î∫o
));

111 
	`ÁûTe°
–
__func__
, 
__LINE__
);

114 
loˇlCou¡
++;

116 i‡(-1 =
	`checkTórögM¨ks
(&
Âb
, 
tc
)) {

117 
	`mvLog
(
MVLOG_WARN
, "MarkÅearing found");

121 
	`mvLog
(
MVLOG_INFO
, "New fømê(%d, 0x%x, dñè %ŒumsË‰om %s", ()
Âb
.
‰ameCou¡
, ()Âb.
fb
.
p1
, (Âb.
time°ampNs
 - 
ts
[
tc
->
˙t
])/1000000,Åc->
«me
);

122 
ts
[
tc
->
˙t
] = 
Âb
.
time°ampNs
;

125 
sc
 = 
	`wrôe
(
fd
, &
Âb
, (fpb));

126 i‡(
sc
 !(
FømePumpBuf„r
)) {

127 
	`≥º‹
("FailedÅo write!!!");

128 
	`ÁûTe°
–
__func__
, 
__LINE__
);

132 
sc
 = 
	`˛o£
(
fd
);

133 i‡(
sc
 < 0) {

134 
	`≥º‹
("FailedÅo close camera");

135 
	`ÁûTe°
–
__func__
, 
__LINE__
);

138  
NULL
;

139 
	}
}

	@HowTo/FunctionProfilerExample/leon/app_config.cpp

12 
	~<OsDrvShaveL2Cache.h
>

13 
	~<OsDrvC¥.h
>

16 
	~"≠p_c⁄fig.h
"

20 
	#L2CACHE_CFG
 (
SHAVE_L2CACHE_NORMAL_MODE
)

	)

35 
	$öôClocksAndMem‹y
()

37 
s32
 
sc
;

39 
tyAuxClkDividîCfg
 
auxClkAŒOn
[] =

41 {
AUX_CLK_MASK_UART
, 
CLK_SRC_REFCLK0
, 96, 625},

42 {0,(
tyC¥ClockSrc
)0,0,0},

46 
sc
 = 
	`OsDrvC¥Inô
();

47 if(
sc
)

48  
sc
;

50 
sc
 = 
	`OsDrvC¥O≥n
();

51 if(
sc
)

52  
sc
;

54 
sc
 = 
	`OsDrvC¥AuxClockAºayC⁄fig
(
auxClkAŒOn
);

55 if(
sc
)

56  
sc
;

59 
sc
 = 
	`OsDrvShaveL2CacheInô
((
osDrvShaveL2CacheModes_t
)
L2CACHE_CFG
);

60 if(
sc
)

61  
sc
;

64 
∑πôi⁄_id
;

65 
	`OsDrvShaveL2CGëP¨tôi⁄
(
SHAVEPART256KB
, &
∑πôi⁄_id
);

68 
sc
 = 
	`OsDrvShaveL2CacheAŒoˇãSëP¨tôi⁄s
();

69 if(
sc
)

70  
sc
;

73 
i
 = 0; i < 
SHAVES_USED
; i++)

75 
	`OsDrvShaveL2CSëN⁄WödowedP¨tôi⁄
((
shaveId_t
)
i
, 0, 
NON_WINDOWED_DATA_PARTITION
);

76 
	`OsDrvShaveL2CSëN⁄WödowedP¨tôi⁄
((
shaveId_t
)
i
, 0, 
NON_WINDOWED_INSTRUCTIONS_PARTITION
);

79 
	`OsDrvShaveL2CacheP¨tôi⁄InvÆid©e
(0);

82 
	}
}

	@HowTo/FunctionProfilerExample/leon/app_config.h

9 #i‚de‡
_APP_CONFIG_H_


10 
	#_APP_CONFIG_H_


	)

17 
	#APP_UPA_CLOCKS
 (
DEV_UPA_SH0
 | \

18 
DEV_UPA_SH1
 | \

19 
DEV_UPA_SH2
 | \

20 
DEV_UPA_SHAVE_L2
 | \

21 
DEV_UPA_CDMA
 | \

22 
DEV_UPA_CTRL
 )

	)

24 
	#EXTRACLOCKS
 (
DEV_MSS_APB_SLV
 | \

25 
DEV_MSS_APB2_CTRL
 | \

26 
DEV_MSS_RTBRIDGE
 | \

27 
DEV_MSS_RTAHB_CTRL
 | \

28 
DEV_MSS_LRT
 | \

29 
DEV_MSS_LRT_DSU
 | \

30 
DEV_MSS_LRT_L2C
 | \

31 
DEV_MSS_LRT_ICB
 | \

32 
DEV_MSS_AXI_BRIDGE
 | \

33 
DEV_MSS_MXI_CTRL
 )

	)

35 
	#SHAVES_USED
 (3)

	)

45 #ifde‡
__˝lu•lus


48 
öôClocksAndMem‹y
();

	@HowTo/FunctionProfilerExample/leon/init.c

9 
	~<DrvLe⁄.h
>

10 
	~<OsDrvTimî.h
>

11 
	~<DrvIcb.h
>

12 
	~<DrvTimî.h
>

13 
	~<°dio.h
>

16 
	~"πems_c⁄fig.h
"

18 
	#THREAD_NUM
 3

	)

20 
	#USED_TIMER_0
 2

	)

21 
	#USED_TIMER_1
 3

	)

23 
	#LEVEL_TIMER_0
 10

	)

24 
	#LEVEL_TIMER_1
 11

	)

26 
	#CFG_TIMER_TICKS
 (500)

	)

29 
	#D_TIMER_CFG_ENABLE
 (1 << 0)

	)

30 
	#D_TIMER_CFG_RESTART
 (1 << 1)

	)

31 
	#D_TIMER_CFG_EN_INT
 (1 << 2)

	)

32 
	#D_TIMER_CFG_CHAIN
 (1 << 3)

	)

33 
	#D_TIMER_CFG_IRQ_PENDING
 (1 << 4)

	)

34 
	#D_TIMER_CFG_FORCE_RELOAD
 (1 << 5)

	)

36 
	g°uff
 = 0;

37 
	$öcStuff
() {

38 
°uff
++;

39 
	}
}

41 
	$timîIrqH™dÀr
(
u32
 
icb_§c
)

43 
u32
 
timî
 = 
icb_§c
 - 
IRQ_TIMER
;

44 
u32
 
ªgAddr
 = (
TIM0_BASE_ADR
 + 
TIM0_CONFIG_OFFSET
 - 0x10Ë+ (0x10 * 
timî
);

45 
u32
 
mask
 = (
D_TIMER_CFG_IRQ_PENDING
 | 
D_TIMER_CFG_EN_INT
);

47 
	`DrvCÀ¨TimC⁄figRegBô
(
ªgAddr
,
mask
);

49 
	`öcStuff
();

51 
	`DrvIcbIrqCÀ¨
(
IRQ_TIMER
 + 
timî
);

52 
	}
}

55 
uöt32_t
 
	gtimîC⁄fig
;

57 
	$c⁄figTimî
(
u32
 
timî
, 
¥i‹ôy
)

60 
	`CLR_REG_BITS_MASK
((
TIM0_BASE_ADR
 + 
TIM0_CONFIG_OFFSET
 - 0x10Ë+ (0x10 * 
timî
), 
D_TIMER_CFG_IRQ_PENDING
);

62 
	`DrvIcbSëupIrq
(
IRQ_TIMER
 + 
timî
, 
¥i‹ôy
, 
POS_LEVEL_INT
, 
timîIrqH™dÀr
 );

66 
timîC⁄fig
 = 
D_TIMER_CFG_FORCE_RELOAD
 |

67 
D_TIMER_CFG_ENABLE
 |

68 
D_TIMER_CFG_EN_INT
;

69 
	}
}

75 
__©åibuã__
((
no_ö°rumít_fun˘i⁄
)Ë
	$ã°ög
(Ë{
	}
}

78 
	$öôProfûîTimîs
() {

79 
	`öôClocksAndMem‹y
();

81 
	`OsDrvTimîInô
();

82 
	`c⁄figTimî
(
USED_TIMER_0
, 
LEVEL_TIMER_0
);

83 
	`c⁄figTimî
(
USED_TIMER_1
, 
LEVEL_TIMER_1
);

84 
	`DrvSèπTimî
(
USED_TIMER_0
, 
CFG_TIMER_TICKS
, 
timîC⁄fig
);

85 
	`DrvSèπTimî
(
USED_TIMER_1
, 
CFG_TIMER_TICKS
, 
timîC⁄fig
);

86 
	}
}

	@HowTo/FunctionProfilerExample/leon/main.cpp

11 
	~<°dio.h
>

12 
	~<°dlib.h
>

13 
	~<DrvC¥.h
>

14 
	~<DrvLe⁄.h
>

16 
	~<±hªad.h
>

18 
	~<dbgTø˚rApi.h
>

20 
	~<UnôTe°Api.h
>

29 
u32
 
Ãt_°¨t
;

30 
Ãt_msgbuff
[128];

34 
	grc1
, 
	grc2
, 
	grc3
;

35 
±hªad_t
 
	gthªad1
, 
	gthªad2
, 
	gthªad3
;

39 * 
fun˘i⁄C
(*
±r
);

40 * 
fun˘i⁄D
(*
±r
);

41 * 
fun˘i⁄E
(*
±r
);

43 #i‡
no_ö°rumít_w‹ks


44 
	gãm∂©e
 <
	ghowM™yTimes
>

46 
ölöe
 
__©åibuã__
((
Æways_ölöe
))

47 
	$_n›
() {

48 
asm
 volatile ("nop");

49 
_n›
<
howM™yTimes
-1>();

50 
	}
}

51 
	gãm∂©e
<>

53 
ölöe
 
__©åibuã__
((
Æways_ölöe
))

54 
	g_n›
<0>() { }

56 
	gãm∂©e
 <
	gn
>

57 
ölöe
 
__©åibuã__
((
Æways_ölöe
))

58 
	$_n›
() {

59 
i
=0; i<
n
; ++iË
asm
 volatile ("nop");

60 
	}
}

63 
	$someSèticFun˘i⁄
() {

64 
_n›
<15>();

65 
	}
}

72 
__©åibuã__
 ((
visibûôy
 ("hiddí"))Ë
	$hiddíFun˘i⁄
() {

74 
	}
}

87 
__©åibuã__
 ((
visibûôy
 ("öã∫Æ"))Ë
	$öã∫ÆFun˘i⁄
() {

89 
	}
}

97 
__©åibuã__
 ((
visibûôy
 ("¥Ÿe˘ed"))Ë
	$¥Ÿe˘edFun˘i⁄
() {

99 
	}
}

102 
	gãm∂©e
 <
	gnbN›sBef‹e
, 
	gnbN›sA·î
>

103 
	$ªcFunc
(
Àvñ
) {

105 
_n›
<
nbN›sBef‹e
>();

107 i‡(
Àvñ
 > 1) {

108 
ªcFunc
<
nbN›sBef‹e
, 
nbN›sA·î
>(
Àvñ
 - 1);

111 
_n›
<
nbN›sA·î
>();

113 
	}
}

116 "C" 
öôProfûîTimîs
();

121 *
	$POSIX_Inô
 (* )

123 
±hªad_©å_t
 
©å
;

124 
s32
 
sc
;

131 
	`öôProfûîTimîs
();

133 
	`unôTe°Inô
 ();

135 
	`¥ötf
 ("RTEMS POSIX Started\n");

137 
sc
 = 
	`±hªad_©å_öô
(&
©å
);

138 if(
sc
) {

139 
	`¥ötf
("pthread_attr_initÉrror");

140 
	`exô
(
sc
);

142 
sc
 = 
	`±hªad_©å_£töhîôsched
(&
©å
, 
PTHREAD_EXPLICIT_SCHED
);

143 if(
sc
) {

144 
	`¥ötf
("pthread_attr_setinheritschedÉrror");

145 
	`exô
(
sc
);

147 
sc
 = 
	`±hªad_©å_£tschedpﬁicy
(&
©å
, 
SCHED_RR
);

148 if(
sc
) {

149 
	`¥ötf
("pthread_attr_setschedpolicyÉrror");

150 
	`exô
(
sc
);

153 i‡((
rc1
=
	`±hªad_¸óã
–&
thªad1
, &
©å
, 
fun˘i⁄C
, &
Ãt_°¨t
))) {

154 
	`¥ötf
("Thªad 1 cª©i⁄ faûed: %d\n", 
rc1
);

155 
	`exô
(
rc1
);

158 
	`¥ötf
("Thread 1 created\n");

162 i‡((
rc2
=
	`±hªad_¸óã
–&
thªad2
, &
©å
, 
fun˘i⁄D
, &
Ãt_°¨t
))) {

163 
	`¥ötf
("Thªad 2 cª©i⁄ faûed: %d\n", 
rc1
);

164 
	`exô
(
rc1
);

167 
	`¥ötf
("Thread 2 created\n");

170 i‡((
rc3
=
	`±hªad_¸óã
–&
thªad3
, &
©å
, 
fun˘i⁄E
, &
Ãt_°¨t
))) {

171 
	`¥ötf
("Thªad 3 cª©i⁄ faûed: %d\n", 
rc1
);

172 
	`exô
(
rc1
);

175 
	`¥ötf
("Thread 3 created\n");

178 if(
	`±hªad_joö
–
thªad1
, 
NULL
Ë||Öthªad_joö–
thªad2
, NULLË||Öthªad_joö–
thªad3
, NULL) ) {

179 
	`¥ötf
("pthread_joinÉrror!\n");

183 
	`unôTe°FöÆRï‹t
 ();

185 
	`exô
(0);

186 
	}
}

188 * 
	$fun˘i⁄C
(*
±r
){

190 
	`¥ötf
("Le⁄RT Sèπ Addr: 0x%lX\n",(
uöt32_t
)
±r
);

192 
	`DrvLe⁄RTSèπup
((
u32
)
±r
);

193 
	`DrvLe⁄RTWaôExecuti⁄
();

195 
	`¥ötf
("%s", 
Ãt_msgbuff
);

196 
	`¥ötf
("LeonRT Stop.\n");

199  
nuŒ±r
;

200 
	}
}

202 * 
	$fun˘i⁄D
(* ){

204 
	`¥ötf
("thread D start\n");

205 
i
=0; i<1000; i++) {

206 
ªcFunc
<400, 800>(4);

207 
ªcFunc
<200, 300>(2);

209 
	`someSèticFun˘i⁄
();

211 
	`¥ötf
("thread DÉnding\n");

213  
nuŒ±r
;

214 
	}
}

216 * 
	$fun˘i⁄E
(* ){

218 
	`¥ötf
("thread E start\n");

219 
ªcFunc
<200, 300>(2);

220 
	`hiddíFun˘i⁄
();

221 
	`öã∫ÆFun˘i⁄
();

222 
	`¥Ÿe˘edFun˘i⁄
();

223 
	`¥ötf
("thread EÉnding\n");

225  
nuŒ±r
;

226 
	}
}

	@HowTo/FunctionProfilerExample/leon/rtems_config.h

9 #i‚de‡
_RTEMS_CONFIG_H_


10 
	#_RTEMS_CONFIG_H_


	)

14 
	~"≠p_c⁄fig.h
"

15 
	~<πems.h
>

19 #i‡
deföed
(
__RTEMS__
)

21 #i‡!
deföed
 (
__CONFIG__
)

22 
	#__CONFIG__


	)

25 
	#CONFIGURE_INIT


	)

27 #i‚de‡
RTEMS_POSIX_API


28 
	#RTEMS_POSIX_API


	)

31 
	#CONFIGURE_MICROSECONDS_PER_TICK
 1000

	)

33 
	#CONFIGURE_TICKS_PER_TIMESLICE
 10

	)

35 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

37 
	#CONFIGURE_APPLICATION_NEEDS_CLOCK_DRIVER


	)

39 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

41 
	#CONFIGURE_MINIMUM_TASK_STACK_SIZE
 2048

	)

43 
	#CONFIGURE_MAXIMUM_TASKS
 4

	)

45 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 4

	)

47 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 8

	)

49 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 8

	)

51 
	#CONFIGURE_MAXIMUM_POSIX_SEMAPHORES
 8

	)

53 
	#CONFIGURE_MAXIMUM_POSIX_MESSAGE_QUEUES
 8

	)

55 
	#CONFIGURE_MAXIMUM_POSIX_TIMERS
 4

	)

57 
	#CONFIGURE_MAXIMUM_TIMERS
 4

	)

59 
	~"ÁèlExãnsi⁄.h
"

62 *
POSIX_Inô
 (*
¨gs
);

64 
	#CONFIGURE_MAXIMUM_USER_EXTENSIONS
 3

	)

65 
	#CONFIGURE_INITIAL_EXTENSIONS
 { .
Áèl
 = 
F©Æ_exãnsi⁄
 }

	)

72 #ifde‡
__˝lu•lus


75 
	~<πems/c⁄fdefs.h
>

76 #ifde‡
__˝lu•lus


86 
BSP_SET_CLOCK
(12000, 480000, 1, 1, 
DEFAULT_RTEMS_CSS_LOS_CLOCKS
, 
DEFAULT_RTEMS_MSS_LRT_CLOCKS
 | 
EXTRACLOCKS
 | 
DEV_CSS_LOS_DSU
|
DEV_CSS_LOS_TIM
|
DEV_CSS_MSS_MAS
, 
APP_UPA_CLOCKS
, 0, 0);

89 
BSP_SET_L2C_CONFIG
(0, 
L2C_REPL_LRU
, 0, 
L2C_MODE_COPY_BACK
, 0, 
NULL
);

	@HowTo/FunctionProfilerExample/leon_rt/Shave.cpp

14 
	~<°dio.h
>

15 
	~<mv_ty≥s.h
>

16 
	~<ªgi°îsMyrüd.h
>

17 
	~<DrvSvu.h
>

18 
	~<swcShaveLﬂdî.h
>

19 
	~"Shave.h
"

21 
	gShave
::
	$Shave
(
a
Ë: 
	$busyÊag
(
Ál£
) {

24 
this
->
id
 = 
a
;

25 
	}
}

27 
	gShave
::~
	$Shave
(){

30 
	}
}

32 
Shave
* Shave::
h™dÀs
[]={
nuŒ±r
,Çullptr,Çullptr,Çullptr,Çullptr,Çullptr,Çullptr,Çullptr,Çullptr,Çullptr,Çullptr,Çullptr};

34 
Shave
* 
	gShave
::
	$gëh™dÀ
(
a
){

36 
Shave
 *
obj
;

38 i‡(
a
>
SHAVES_CNT
){

39 
	`¥ötf
("Error: invalid shave ID\n");

40  
nuŒ±r
;

43 i‡(!
h™dÀs
[
a
]){

44 
obj
 = 
√w
 
	`Shave
(
a
);

45 
h™dÀs
[
a
] = 
obj
;

47  
obj
;

49  
h™dÀs
[
a
];

52 
	}
}

54 
	gShave
::
	$de°roy
(
a
){

56 i‡(
a
>
SHAVES_CNT
){

57 
	`¥ötf
("Error: invalid shave ID\n");

61 i‡(
h™dÀs
[
a
] !
nuŒ±r
){

62 
dñëe
 
h™dÀs
[
a
];

63 
h™dÀs
[
a
] = 
nuŒ±r
;

65 
	}
}

68 
	gShave
::
	$ª£t
(){

70 
	`swcRe£tShave
(
this
->
id
);

71 
	}
}

74 
	gShave
::
	$£tdeÁu…°ack
(){

76 
	`swcSëAbsﬁuãDeÁu…Sèck
(
this
->
id
);

78 
	}
}

80 
	gShave
::
	$°¨t
(
±r
){

82 
	`swcSèπShave
(
this
->
id
,
±r
);

83 
this
->
busyÊag
 = 
åue
;

84 
	}
}

86 
	gShave
::
	$waô
(){

88 
	`swcWaôShave
(
this
->
id
);

89 
this
->
busyÊag
 = 
Ál£
;

91 
	}
}

	@HowTo/FunctionProfilerExample/leon_rt/Shave.h

3 #i‚de‡
__SHAVE_H__


5 
	#__SHAVE_H__


	)

6 
	#SHAVES_CNT
 (12 - 1)

	)

8 ˛as†
	cShave
{

10 
	m¥iv©e
:

12 
Shave
 *
h™dÀs
[
SHAVES_CNT
+1];

13 
	mid
;

14 
boﬁ
 
	mbusyÊag
;

17 
	mpublic
:

18 
Shave
 *
gëh™dÀ
(
a
);

19 
de°roy
(
a
);

20 
Shave
(
a
);

21 ~
Shave
();

23 
ª£t
();

24 
£tdeÁu…°ack
();

25 
°¨t
(
±r
);

26 
waô
();

	@HowTo/FunctionProfilerExample/leon_rt/leonrt_main.cpp

13 
	~<DrvLe⁄L2C.h
>

14 
	~<DrvLe⁄.h
>

15 
	~<DrvShaveL2Cache.h
>

16 
	~<°dio.h
>

17 
	~<°rög.h
>

18 
	~<swcLe⁄Utûs.h
>

19 
	~<DrvSvu.h
>

20 
	~<swcShaveLﬂdî.h
>

21 
	~<DrvTimî.h
>

23 
	~"Shave.h
"

25 
	~<¨øy
>

27 
u32
 
Sim∂eShave0_shave_zîo
;

28 
u32
 
Sim∂eShave1_shave_⁄e
;

29 
u32
 
Sim∂eShave2_shave_two
;

37 
	eShaveId
 {

38 
	mSHAVE0
 = 0,

39 
	mSHAVE1
 = 1,

40 
	mSHAVE2
 = 2

56 
__©åibuã__
((
£˘i⁄
(".cmx.d©a"))Ë
	gmsgbuff
[128];

60 
	#DO_NOPS
(
n
Ë{
i
=0; i<n; i++Ë{ 
asm
 vﬁ©ûê("n›"); } }

	)

62 
	gtŸÆC›yCt‹sCÆÀd
 = 0;

64 ˛as†
	cGogﬁoi
 {

65 
	mpublic
:

66 
	$Gogﬁoi
() {

68 
	$Gogﬁoi
(
Gogﬁoi
&) {

69 
	`DO_NOPS
(500);

70 
tŸÆC›yCt‹sCÆÀd
++;

71 
	}
}

72 
	$gëU£ÀssE√rgyWa°ed
(Ë{  
tŸÆC›yCt‹sCÆÀd
; 
	}
}

76 
f1
(
Gogﬁoi
 
g
);

77 
f2
(
Gogﬁoi
 
g
);

78 
f3
(
Gogﬁoi
 
g
);

81 
	$f1
(
Gogﬁoi
 
g
) {

82 
	`DO_NOPS
(100);

83 
i
=0; i<500; i++){

84 
	`f2
(
g
);

85 
	`DO_NOPS
(30);

86 
	`f3
(
g
);

88 
	`DO_NOPS
(300);

89  
g
.
	`gëU£ÀssE√rgyWa°ed
();

90 
	}
}

92 
	$f2
(
Gogﬁoi
 
g
) {

93 
ªt
 = 
g
.
	`gëU£ÀssE√rgyWa°ed
();

94 
	`DO_NOPS
(22);

95 
ªt
 +
	`f3
(
g
) + f3(g) + f3(g);

96 
	`DO_NOPS
(500);

97  
ªt
;

98 
	}
}

100 
	$f3
(
Gogﬁoi
 
g
) {

101 
	`DO_NOPS
(30);

102  
g
.
	`gëU£ÀssE√rgyWa°ed
();

103 
	}
}

105 
Shave
 *
	gshave
;

106 
	$maö
()

108 
	`DrvTimîInô
();

109 
	`°∫˝y
(
msgbuff
, "LeonRT Started.\n", 128);

112 
Shave
* 
w‹kîs
 [] = {

113 
Shave
::
	`gëh™dÀ
(
SHAVE0
),

114 
Shave
::
	`gëh™dÀ
(
SHAVE1
),

115 
Shave
::
	`gëh™dÀ
(
SHAVE2
)

118 
c⁄°ex¥
 
tŸÆW‹kîs
 = (
w‹kîs
)/(workers[0]);

119 
uöt32_t
 
code
[
tŸÆW‹kîs
] = {

120 (
uöt32_t
Ë&
Sim∂eShave0_shave_zîo
,

121 (
uöt32_t
Ë&
Sim∂eShave1_shave_⁄e
,

122 (
uöt32_t
Ë&
Sim∂eShave2_shave_two


125 áutÿ
d‹ñ
 : 
w‹kîs
 ) {

126 
d‹ñ
->
	`ª£t
();

127 
d‹ñ
->
	`£tdeÁu…°ack
();

130 
i
=0; i<
tŸÆW‹kîs
; ++i) {

131 
w‹kîs
[
i
]->
	`°¨t
(
code
[i]);

135 
	`DO_NOPS
(20);

137 
Gogﬁoi
 
g
;

138 
	`f1
(
g
);

140 
	`DO_NOPS
(30);

143 áutÿ
obosôu
 : 
w‹kîs
 ) {

144 
obosôu
->
	`waô
();

147 
Shave
::
	`de°roy
(
SHAVE0
);

148 
Shave
::
	`de°roy
(
SHAVE1
);

149 
Shave
::
	`de°roy
(
SHAVE2
);

152 
	`¥ötf
("All shaves finished work\n");

154 
	`DrvLe⁄RTSig«lSt›
();

157 
	}
}

	@HowTo/FunctionProfilerExample/shave/nopGenerator.cpp

7 
	~"mv_ty≥s.h
"

9 ˛as†
	cEm±y
 {

10 
	mpublic
:

11 
ex∂icô
 
	$Em±y
() {

13 ~
	$Em±y
() {

14 
	}
}

17 
	gãm∂©e
 <
	ghowM™yTimes
>

18 
ölöe
 
__©åibuã__
((
Æways_ölöe
))

20 
Em±y
 
	$n›
(
Em±y
 
e
) {

21 
asm
 volatile ("nop");

22  
n›
<
howM™yTimes
-1>(
e
);

23 
	}
}

25 
	gãm∂©e
<>

26 
ölöe
 
__©åibuã__
((
Æways_ölöe
))

28 
Em±y
 
	gn›
<0>(Em±y 
	ge
) {

29  
	ge
;

33 
	$exquisôeW‹kOf
(
cou¡
) {

34 
i
=0; i<
cou¡
; ++i) {

35 
n›
<20>(
	`Em±y
());

37 
	}
}

39 
ölöe
 
__©åibuã__
((
Æways_ölöe
))

40 
	$esˇ≥
(* 
p
) {

41 
asm
 vﬁ©ûe("" : : "g"(
p
) : "memory");

42 
	}
}

44 
ölöe
 
__©åibuã__
((
Æways_ölöe
))

45 
	$˛obbî
(*) {

46 
asm
 volatile("" : : : "memory");

47 
	}
}

	@HowTo/FunctionProfilerExample/shave/shave_main.c

11 
	~<°dio.h
>

12 
	~<svuComm⁄Shave.h
>

25 
exquisôeW‹kOf
(
cou¡
);

27 
	gdv
 = 0;

29 
	$dummy
() {

30 
dv
++;

31 
	}
}

33 
	$aSèticFun˘i⁄
() {

34 
dv
++;

35 
	}
}

37 
	$f2
() {

38 
	`exquisôeW‹kOf
(20);

39 
	}
}

41 
	$f1
() {

42 
	`dummy
();

43 
	`exquisôeW‹kOf
(50);

45 
	`aSèticFun˘i⁄
();

47 
	`f2
();

48 
	}
}

57 
	$shave_zîo
()

59 
	`exquisôeW‹kOf
(5);

61 
SHAVE_HALT
;

64 
	}
}

66 
	$shave_⁄e
()

68 
i
=0; i<10; i++)

69 
	`dummy
();

71 
SHAVE_HALT
;

73 
	}
}

75 
	$shave_two
()

77 
	`f1
();

78 
	`dummy
(); dummy();

81 
SHAVE_HALT
;

83 
	}
}

	@HowTo/GtImageWarp/leon/app_config.c

13 
	~<ªgi°îsMyrüd.h
>

14 
	~<DrvC¥.h
>

15 
	~<DrvRegUtûs.h
>

16 
	~<DrvShaveL2Cache.h
>

17 
	~<DrvTimî.h
>

18 
	~"DrvDdr.h
"

19 
	~"≠p_c⁄fig.h
"

20 
	~"DrvLe⁄L2C.h
"

25 
	#L2CACHE_CFG
 (
SHAVE_L2CACHE_NORMAL_MODE
)

	)

27 #i‚de‡
BUP_PLL0_FREQ


29 
	#BUP_PLL0_FREQ
 300000

	)

32 #i‚de‡
BUP_PLL1_FREQ


34 
	#BUP_PLL1_FREQ
 300000

	)

49 
tyAuxClkDividîCfg
 
	g≠pAuxClkCfg600_266
[] =

51 {
AUX_CLK_MASK_UART
 ,
CLK_SRC_REFCLK0
,1,1},

54 
tySocClockC⁄fig
 
	g≠pClockC⁄fig
 =

56 .
ªfClk0I≈utKhz
 = 12000,

57 .
	gªfClk1I≈utKhz
 = 0,

58 .
	gèrgëPŒ0FªqKhz
 = 
BUP_PLL0_FREQ
,

59 .
	gèrgëPŒ1FªqKhz
 = 
BUP_PLL1_FREQ
,

60 .
	g˛kSrcPŒ1
 = 
CLK_SRC_REFCLK0
,

61 .
	gma°îClkDivNumî©‹
 = 1,

62 .
	gma°îClkDivDíomö©‹
 = 1,

63 .
	gcssDssClockE«bÀMask
 = 
DEFAULT_CORE_CSS_DSS_CLOCKS
,

64 .
	gmssClockE«bÀMask
 = 0xFFFFFFFF,

65 .
	gsùpClockE«bÀMask
 = 0xFFFFFFFF,

66 .
	gu∑ClockE«bÀMask
 = 
DEFAULT_UPA_CLOCKS
,

67 .
	gpAuxClkCfg
 = 
≠pAuxClkCfg600_266
,

70 
	$öôClocksAndMem‹y
()

72 
i
;

73 
	`DrvTimîInô
();

74 
	`DrvC¥Inô
();

75 
	`DrvC¥SëupClocks
(&
≠pClockC⁄fig
);

77 
	`DrvC¥SysDevi˚A˘i⁄
(
MSS_DOMAIN
, 
DEASSERT_RESET
, 0xFFFFFFFF);

78 
	`DrvC¥SysDevi˚A˘i⁄
(
UPA_DOMAIN
, 
DEASSERT_RESET
, 
APP_UPA_CLOCKS
);

79 
LL2CC⁄fig_t
 
Œ2C⁄fig
;

82 
	`DrvLL2CFlushOpOnAŒLöes
(
LL2C_OPERATION_INVALIDATE
, 0);

84 
Œ2C⁄fig
.
LL2CE«bÀ
 = 0;

85 
Œ2C⁄fig
.
LL2CLockedWaysNo
 = 0;

86 
Œ2C⁄fig
.
LL2CWayToRïœ˚
 = 0;

87 
Œ2C⁄fig
.
busUßge
 = 
BUS_WRAPPING_MODE
;

88 
Œ2C⁄fig
.
hôR©e
 = 
HIT_WRAPPING_MODE
;

89 
Œ2C⁄fig
.
ª∂a˚Pﬁicy
 = 
LRU
;

90 
Œ2C⁄fig
.
wrôePﬁicy
 = 
WRITE_THROUGH
;

92 
	`DrvLL2CInôülize
(&
Œ2C⁄fig
);

94 
	`DrvDdrInôüli£
(
NULL
);

97 
	`DrvShaveL2CacheSëMode
(
L2CACHE_CFG
);

99 
	`DrvShaveL2CacheSëupP¨tôi⁄
(
SHAVEPART256KB
);

101 
	`DrvShaveL2CacheAŒoˇãSëP¨tôi⁄s
();

103 
i
 = 0; i < 12; i++)

105 
	`DrvShaveL2CacheSëLSUP¨tId
(
i
, 0);

107 
	`DrvShaveL2CacheP¨tôi⁄InvÆid©e
(0);

111 
	}
}

	@HowTo/GtImageWarp/leon/app_config.h

9 #i‚de‡
_APP_CONFIG_H_


10 
	#_APP_CONFIG_H_


	)

15 
	~<mv_ty≥s.h
>

19 
	#APP_UPA_CLOCKS
 (
DEV_UPA_SH0
 | \

20 
DEV_UPA_SHAVE_L2
 | \

21 
DEV_UPA_CDMA
 | \

22 
DEV_UPA_CTRL
 )

	)

35 
öôClocksAndMem‹y
();

	@HowTo/GtImageWarp/leon/main.c

11 
	~"≠p_c⁄fig.h
"

12 
	~"mesh.h
"

13 
	~"imageW¨pDeföes.h
"

14 
	~"Deföes.h
"

15 
	~"swcLe⁄Utûs.h
"

18 
	~<°dio.h
>

19 
	~<°rög.h
>

23 
	~<DrvShaveL2Cache.h
>

26 
	~<swcShaveLﬂdî.h
>

27 
	~<swcFømeTy≥s.h
>

29 
	~<swcTe°Utûs.h
>

30 
	~<swcCrc.h
>

33 
	~<UnôTe°Api.h
>

34 
	~<VcsHooksApi.h
>

37 
	~<Buf„rs.h
>

41 
	#SHAVE_NUMBER
 0

	)

42 
	#CRC_USED
 0x572104A1

	)

48 
u32
 
fish_eye0_imageW¨p
;

49 
	$ALIGNED
(128Ë
tûeLi°
 
tûeNodes
[
MESH_HEIGHT
 * 
MESH_WIDTH
];

54 
u32
 
Fnfish_Sched
 = (u32)&
fish_eye0_imageW¨p
;

62 
	$runSched
(
swcShaveUnô_t
 
svu
, 
meshSåu˘
* 
mesh
,

63 
‰ameBuf„r
 *
öputFb
,

64 
‰ameBuf„r
 *
ouçutFb
,

65 
∑ddögvÆue
)

68 
≥rf‹m™˚Såu˘
 
≥rfSå
;

71 
	`swcShaveProfInô
(&
≥rfSå
);

73 
	`swcRe£tShave
(
svu
);

74 
	`swcSëAbsﬁuãDeÁu…Sèck
(
svu
);

77 
	`swcShaveProfSèπG©hîögFõlds
(
svu
, 
PERF_INSTRUCT_COUNT
);

78 
	`swcSèπShaveCC
(
svu
, 
Fnfish_Sched
, "iiiiiii", 
mesh
,

79 
öputFb
,

80 
ouçutFb
,

81 
tûeNodes
,

82 
∑ddögvÆue
,0,0);

83 
	`swcWaôShave
(
svu
);

85 
	`swcShaveProfSt›FõldsG©hîög
(
svu
, 
PERF_INSTRUCT_COUNT
);

88 
	`swcShaveProfPröt
(
svu
, &
≥rfSå
);

90 
	`DrvShaveL2CacheP¨tôi⁄FlushAndInvÆid©e
(
svu
);

91 
	}
}

94 
	$maö
()

98 
	`öôClocksAndMem‹y
();

99 
	`DrvShaveL2CacheP¨tôi⁄FlushAndInvÆid©e
(
SHAVE_NUMBER
);

101 
	`lﬂdMemFromFûeSim∂e
("öput_240x320_P400.øw", 
IMG_WIDTH
 * 
IMG_HEIGHT
 * (), (*)
öput‰ame
);

102 
	`mem£t
(
ouçut‰ame
, 0x0, 
OUT_IMG_WIDTH
 * 
OUT_IMG_HEIGHT
);

103 
	`¥ötf
("fish_eyeálgorithm.\n");

104 
‰ameBuf„r
 
öFøme
, 
outFøme
;

105 
‰ameS≥c
 
‰S≥c
;

106 
‰S≥c
.
byãsPP
 = 1;

107 
‰S≥c
.
height
 = 
IMG_HEIGHT
;

108 
‰S≥c
.
width
 = 
IMG_WIDTH
;

109 
‰S≥c
.
°ride
 = frS≥c.
width
 * frS≥c.
byãsPP
;

110 
‰S≥c
.
ty≥
 = 
RAW8
;

111 
öFøme
.
p1
 = 
öput‰ame
;

112 
öFøme
.
p2
 = 
NULL
;

113 
öFøme
.
p3
 = 
NULL
;

114 
öFøme
.
•ec
 = 
‰S≥c
;

115 
‰S≥c
.
height
 = 
OUT_IMG_HEIGHT
;

116 
‰S≥c
.
width
 = 
OUT_IMG_WIDTH
;

117 
‰S≥c
.
°ride
 = frS≥c.
width
 * frS≥c.
byãsPP
;

118 
outFøme
.
p1
 = 
ouçut‰ame
;

119 
outFøme
.
p2
 = 
NULL
;

120 
outFøme
.
p3
 = 
NULL
;

121 
outFøme
.
•ec
 = 
‰S≥c
;

123 
meshSåu˘
 
mesh
;

124 
mesh
.
meshWidth
 = 
MESH_WIDTH
;

125 
mesh
.
meshHeight
 = 
MESH_HEIGHT
;

126 
mesh
.
meshX
 = (*Ë
mesh_x
;

127 
mesh
.
meshY
 = (*Ë
mesh_y
;

128 
mesh
.
co‹d_mö_y
 = 0;

129 
mesh
.
co‹d_mö_x
 = 0;

130 
mesh
.
co‹d_max_x
 = 
OUT_IMG_WIDTH
;

131 
mesh
.
co‹d_max_y
 = 
OUT_IMG_HEIGHT
;

134 
	`runSched
(
SHAVE_NUMBER
, &
mesh
, &
öFøme
, &
outFøme
, 0);

136 
	`unôTe°Inô
();

138 
	`unôTe°CrcCheck
(
ouçut‰ame
, 
outFøme
.
•ec
.
°ride
 * outFøme.•ec.
height
, 
CRC_USED
);

139 
	`unôTe°FöÆRï‹t
();

140 
	`ßveMem‹yToFûe
(()
ouçut‰ame
, 
outFøme
.
•ec
.
°ride
 * outFøme.•ec.
height
, "output_240x320_P400.raw");

143 
	}
}

	@HowTo/GtImageWarp/leon/mesh.h

1 
	~"Deföes.h
"

3 
	gmesh_x
[
MESH_HEIGHT
][
MESH_WIDTH
] = {

28 
	gmesh_y
[
MESH_HEIGHT
][
MESH_WIDTH
] = {

	@HowTo/GtImageWarp/shared/Buffers.h

11 
	~<mv_ty≥s.h
>

12 
	~<Deföes.h
>

14 
DDR_BSS
 
u8
 
	göput‰ame
[
IMG_WIDTH
 * 
IMG_HEIGHT
];

15 
DDR_BSS
 
u8
 
	gouçut‰ame
[
OUT_IMG_WIDTH
 * 
OUT_IMG_HEIGHT
];

	@HowTo/GtImageWarp/shared/Defines.h

1 #i‚de‡
__DEFINES_SPARSE_H__


2 
	#__DEFINES_SPARSE_H__


	)

3 
	~"imageW¨pDeföes.h
"

6 
	#IMG_WIDTH
 240

	)

7 
	#IMG_HEIGHT
 320

	)

9 
	#OUT_IMG_WIDTH
 240

	)

10 
	#OUT_IMG_HEIGHT
 320

	)

12 
	#MESH_WIDTH
 (
IMG_WIDTH
 / 
MESH_CELL_SIZE
 + 1)

	)

13 
	#MESH_HEIGHT
 (
IMG_HEIGHT
 / 
MESH_CELL_SIZE
 + 1)

	)

15 #ifde‡
__PC__


16 
	#CMX_DMA


	)

17 
	#DDR_DATA


	)

18 
	#DDR_BSS


	)

19 
	#CMX_DATA


	)

20 
	#CMX_DATA_GLOBAL


	)

21 
	#ALIGNED
(
x
)

	)

22 
	#DMA_DESCRIPTORS


	)

23 
	#ENTRYPOINT


	)

24 
	#SHAVE_HALT


	)

26 
	#CMX_DMA
 
	`__©åibuã__
((
	`£˘i⁄
(".cmx.cdmaDes¸ùt‹s")))

	)

27 
	#DDR_DATA
 
	`__©åibuã__
((
	`£˘i⁄
(".ddr.d©a")))

	)

28 
	#DDR_BSS
 
	`__©åibuã__
((
	`£˘i⁄
(".ddr.bss")))

	)

29 
	#CMX_DATA
 
	`__©åibuã__
((
	`£˘i⁄
(".cmx.d©a")))

	)

30 
	#CMX_DATA_GLOBAL
 
	`__©åibuã__
((
	`£˘i⁄
(".cmx.d©a.globÆ")))

	)

31 
	#ALIGNED
(
x
Ë
	`__©åibuã__
((
	`Æig√d
(x)))

	)

32 
	#DMA_DESCRIPTORS
 
	`__©åibuã__
((
	`£˘i⁄
(".cmx.cdmaDes¸ùt‹s")))

	)

33 
	#ENTRYPOINT
 "C"

	)

	@HowTo/JpegEncoderParallel/leon/app_config.c

22 
	~"≠p_c⁄fig.h
"

23 
	~"J≥gEncodîApi.h
"

24 
	~<ªgi°îsMyrüd.h
>

25 
	~<DrvC¥.h
>

26 
	~<DrvSvu.h
>

27 
	~<DrvRegUtûs.h
>

28 
	~<DrvShaveL2Cache.h
>

29 
	~<DrvDdr.h
>

30 
	~<DrvLe⁄L2C.h
>

35 
	#L2CACHE_CFG
 (
SHAVE_L2CACHE_NORMAL_MODE
)

	)

38 
	#APP_UPA_CLOCKS
 (
DEV_UPA_SH0
 | \

39 
DEV_UPA_SH1
 | \

40 
DEV_UPA_SH2
 | \

41 
DEV_UPA_SH3
 | \

42 
DEV_UPA_SH4
 | \

43 
DEV_UPA_SH5
 | \

44 
DEV_UPA_SH6
 | \

45 
DEV_UPA_SH7
 | \

46 
DEV_UPA_SH8
 | \

47 
DEV_UPA_SH9
 | \

48 
DEV_UPA_SH10
 | \

49 
DEV_UPA_SH11
 | \

50 
DEV_UPA_SHAVE_L2
 | \

51 
DEV_UPA_CDMA
 | \

52 
DEV_UPA_CTRL
 )

	)

54 
	#EXTRACLOCKS
 (
DEV_MSS_APB_SLV
 | \

55 
DEV_MSS_APB2_CTRL
 | \

56 
DEV_MSS_RTBRIDGE
 | \

57 
DEV_MSS_RTAHB_CTRL
 | \

58 
DEV_MSS_LRT
 | \

59 
DEV_MSS_LRT_DSU
 | \

60 
DEV_MSS_LRT_L2C
 | \

61 
DEV_MSS_LRT_ICB
 | \

62 
DEV_MSS_AXI_BRIDGE
 | \

63 
DEV_MSS_MXI_CTRL
 )

	)

68 
u32
 
__l2_c⁄fig
 
__©åibuã__
((
£˘i⁄
(".l2.mode"))Ë
L2CACHE_CFG
;

73 
	g∑πôi⁄Numbî
[
SHAVES_USED
] = {

74 
PARTITION_0
,

75 
PARTITION_1
,

76 
PARTITION_2
,

77 
PARTITION_3
,

78 
PARTITION_4
,

79 
PARTITION_5
,

80 
PARTITION_6
,

81 
PARTITION_7
,

82 
PARTITION_0
,

83 
PARTITION_1
,

84 
PARTITION_2
,

85 
PARTITION_3


94 
	$öôClocksAndMem‹y
()

96 
i
;

97 
sc
;

99 
tyAuxClkDividîCfg
 
≠pAuxClkCfg
[] =

101 {
AUX_CLK_MASK_UART
, 
CLK_SRC_REFCLK0
, 96, 625},

110 
tySocClockC⁄fig
 
≠pClockC⁄fig600_266
 =

112 .
ªfClk0I≈utKhz
 = 12000,

113 .
ªfClk1I≈utKhz
 = 0,

114 .
èrgëPŒ0FªqKhz
 = 480000,

115 .
èrgëPŒ1FªqKhz
 = 0,

116 .
˛kSrcPŒ1
 = 
CLK_SRC_REFCLK0
,

117 .
ma°îClkDivNumî©‹
 = 1,

118 .
ma°îClkDivDíomö©‹
 = 1,

119 .
cssDssClockE«bÀMask
 = 
DEFAULT_CORE_CSS_DSS_CLOCKS
,

120 .
mssClockE«bÀMask
 = 
EXTRACLOCKS
,

121 .
u∑ClockE«bÀMask
 = 
APP_UPA_CLOCKS
,

122 .
pAuxClkCfg
 = 
≠pAuxClkCfg
,

125 
	`DrvC¥Inô
();

126 
	`DrvC¥SëupClocks
(&
≠pClockC⁄fig600_266
);

128 
	`DrvDdrInôüli£
(
NULL
);

130 
	`DrvC¥SysDevi˚A˘i⁄
(
UPA_DOMAIN
, 
DEASSERT_RESET
, 
APP_UPA_CLOCKS
);

131 
	`DrvC¥SysDevi˚A˘i⁄
(
MSS_DOMAIN
, 
DEASSERT_RESET
, 
EXTRACLOCKS
);

134 
sc
 = 
	`DrvShaveL2CacheSëMode
(
L2CACHE_CFG
);

135 if(
sc
)

136  
sc
;

139 
	`DrvLL2CFlushOpOnAŒLöes
(
LL2C_OPERATION_INVALIDATE
, 0);

142 
i
 = 0; i < 8; i++)

144 
	`DrvShaveL2CacheSëupP¨tôi⁄
(
SHAVEPART32KB
);

148 
	`DrvShaveL2CacheAŒoˇãSëP¨tôi⁄s
();

151 
i
 = 0; i < 
SHAVES_USED
; i++)

153 
	`DrvShaveL2CacheSëLSUP¨tId
(
i
, 
∑πôi⁄Numbî
[i % 8]);

154 
	`DrvShaveL2CacheP¨tôi⁄FlushAndInvÆid©e
(
∑πôi⁄Numbî
[
i
 % 8]);

157 
	`swcLe⁄SëPIL
(0);

159 
	}
}

	@HowTo/JpegEncoderParallel/leon/app_config.h

9 #i‚de‡
_APP_CONFIG_H_


10 
	#_APP_CONFIG_H_


	)

12 
	~<mv_ty≥s.h
>

14 
	#SHAVES_USED
 12

	)

16 
u32
 
__l2_c⁄fig
 ;

21 
öôClocksAndMem‹y
();

	@HowTo/JpegEncoderParallel/leon/main.c

11 
	~<°rög.h
>

12 
	~<°dio.h
>

13 
	~"mv_ty≥s.h
"

14 
	~"J≥gEncodîApi.h
"

15 
	~"≠p_c⁄fig.h
"

16 
	~"DrvTimî.h
"

17 
	~<swcCrc.h
>

18 
	~<DrvShaveL2Cache.h
>

19 
	~<DrvCmxDma.h
>

22 
	~<UnôTe°Api.h
>

23 
	~<VcsHooksApi.h
>

27 
	#MAX_WIDTH
 4096

	)

28 
	#MAX_HEIGHT
 3072

	)

30 
	#EXPECTED_CRC_IMG_BAYWATCH
 (0x28048228)

	)

31 
	#EXPECTED_CRC_IMG_COBKITCHEN
 (0x38A37F1B)

	)

33 
	#INPUT_BUFF_SIZE_SHAVE
 32*1024

	)

38 
u8
 
__©åibuã__
((
£˘i⁄
(".ddr.bss"))Ë
	gjpgbuff
[
MAX_WIDTH
 * 
MAX_HEIGHT
];

39 
u8
 
__©åibuã__
((
£˘i⁄
(".ddr.bss"))Ë
	gimg_yuv
[
MAX_WIDTH
 * 
MAX_HEIGHT
 * 3];

40 
‰ameBuf„r
 
	ggimgöfo
;

44 
C⁄figuªImgFuŒ
(
yuvF‹m©
, 
width
, 
height
);

45 
j≥gEncodeAndCheck
(
yuvF‹m©
, 
width
, 
height
, *
öputFûe
, * 
outFûe
, 
u32
 
ex≥˘edCRC
);

50 
	$maö
()

52 
	`unôTe°Inô
();

53 
	`öôClocksAndMem‹y
();

54 
	`DrvCmxDmaInôDeÁu…
();

56 
	`j≥gEncodeAndCheck
(
JPEG_422_PLANAR
, 512, 512 , "../../../ªsour˚s/Bayw©ch_512x512_P422.yuv", "Bayw©ch.jpg" ,
EXPECTED_CRC_IMG_BAYWATCH
 );

57 
	`j≥gEncodeAndCheck
(
JPEG_420_PLANAR
, 1280, 720, "../../../ªsour˚s/CobKôchí_1280x720.yuv" , "CobKôchí.jpg",
EXPECTED_CRC_IMG_COBKITCHEN
);

59 
	`unôTe°FöÆRï‹t
();

62 
	}
}

65 
	$C⁄figuªImgFuŒ
(
yuvF‹m©
, 
width
, 
height
)

67 
lumaVÆuesPîChroma
 = 4;

68 
öputSizeC€f
 = 1.5;

69 if(
yuvF‹m©
 =
JPEG_422_PLANAR
)

71 
lumaVÆuesPîChroma
 = 2;

72 
öputSizeC€f
 = 2;

74 if(
yuvF‹m©
 =
JPEG_444_PLANAR
)

76 
lumaVÆuesPîChroma
 = 1;

77 
öputSizeC€f
 = 3;

80 
gimgöfo
.
p1
 = (
u8
*Ë(
img_yuv
);

81 
gimgöfo
.
p2
 = (
u8
*Ë((
img_yuv
Ë+ 
width
 * 
height
);

82 
gimgöfo
.
p3
 = (
u8
*Ë((
img_yuv
Ë+ 
width
 * 
height
 + width * height/
lumaVÆuesPîChroma
);

84 
gimgöfo
.
•ec
.
width
 = width;

85 
gimgöfo
.
•ec
.
height
 = height;

87  
öputSizeC€f
;

88 
	}
}

90 
	$j≥gEncodeAndCheck
(
yuvF‹m©
, 
width
, 
height
, *
öputFûe
, * 
outFûe
, 
u32
 
ex≥˘edCRC
)

92 
tyTimeSèmp
 
timî_d©a
;

93 
u64
 
cy˛esEœp£d
;

94 
öputSizeC€f
;

95 
ícodeTimeMs
;

96 
‰amesPîSec⁄d
;

97 
u32
 
ouçutSize
;

98 
u32
 
¸cTe°
;

100 
	`¥ötf
("Sèπög JPEG Encodêf‹ %s\n", 
öputFûe
);

101 
	`¥ötf
("Loading Yuv file,Ölease wait...\n");

103 
	`mem£t
(
jpgbuff
, 0, (jpgbuff));

104 
	`mem£t
(
img_yuv
, 0, (img_yuv));

105 
öputSizeC€f
 = 
	`C⁄figuªImgFuŒ
(
yuvF‹m©
, 
width
, 
height
);

106 
	`lﬂdMemFromFûe
(
öputFûe
, 0, 0, 
width
 * 
height
* 
öputSizeC€f
, 
img_yuv
);

108 
	`DrvTimîSèπTicksCou¡
(&
timî_d©a
);

110 
ouçutSize
 = 
	`JPEG_ícode
(
gimgöfo
, 
jpgbuff
, 
SHAVES_USED
, 
INPUT_BUFF_SIZE_SHAVE
, 
yuvF‹m©
);

112 
	`DrvTimîGëEœp£dTicks
(&
timî_d©a
,&
cy˛esEœp£d
);

113 
ícodeTimeMs
 = 
	`DrvTimîTicksToMs
(
cy˛esEœp£d
);

114 
‰amesPîSec⁄d
 = 1000.0 / 
ícodeTimeMs
;

115 
	`¥ötf
("Encoded in: %lu cy˛e†(%‡ms; %5.0‡‰ame†≥∏£c⁄d)\n", (
u32
Ë
cy˛esEœp£d
,
ícodeTimeMs
,
‰amesPîSec⁄d
);

117 
	`ßveMem‹yToFûe
((
u32
)&
jpgbuff
[0], 
ouçutSize
,
outFûe
);

119 
¸cTe°
 = 
	`swcCÆcCrc32
(
jpgbuff
, 
ouçutSize
, 
À_poöãr
);

120 
	`unôTe°As£π
(
¸cTe°
 =
ex≥˘edCRC
);

121 i‡(
¸cTe°
 =
ex≥˘edCRC
){

122 
	`¥ötf
("Encoded ImagêCRC32 OK [0x%08lX]\n", 
¸cTe°
);

124 
	`¥ötf
("Encoded ImagêCRC32 FAIL [Ex≥˘ed:0x%08lX, GOT:0x%08lX\n",
ex≥˘edCRC
, 
¸cTe°
);

127 
	}
}

	@HowTo/LamaBLISMatrixMatrixMultiply/PCmatrixGenerator/multiplyNxN.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

5 
	#N_MAX
 2048

	)

7 
	gaGlob
[
N_MAX
*N_MAX];

8 
	gbGlob
[
N_MAX
*N_MAX];

9 
	gaGlobT
[
N_MAX
*N_MAX];

10 
	gbGlobT
[
N_MAX
*N_MAX];

11 
	gabGlob
[
N_MAX
*N_MAX];

12 
	gabGlobT
[
N_MAX
*N_MAX];

14 
gíR™domNxN
(*
a
, 
n
, 
£ed
, 
low_num
, 
hi_num
);

15 
mu…ùlyNxN
(*
a
, *
b
, *
ab
, 
n
);

16 
å™po£
(*
a
, *
b
, 
size
);

18 
	$maö
(
¨gc
, *
¨gv
[])

21 
n
 = 
	`©oi
(
¨gv
[1]);

22 
£ed
 = 
	`©oi
(
¨gv
[2]);

24 
	`gíR™domNxN
(
aGlob
, 
n
, 
£ed
, -1.0, 1.0);

25 
	`gíR™domNxN
(
bGlob
, 
n
, 
£ed
+99, -1.0, 1.0);

27 
	`mu…ùlyNxN
(
aGlob
, 
bGlob
, 
abGlob
, 
n
);

29 
	`å™po£
(
abGlobT
, 
abGlob
, 
n
);

30 
	`å™po£
(
aGlobT
, 
aGlob
, 
n
);

31 
	`å™po£
(
bGlobT
, 
bGlob
, 
n
);

33 
FILE
 *
aFûe
;

34 
FILE
 *
bFûe
;

35 
FILE
 *
aFûeT
;

36 
FILE
 *
bFûeT
;

37 
FILE
 *
abFûe
;

38 
FILE
 *
abTFûe
;

40 
aFûe
 = 
	`f›í
("a.bin", "wb");

41 
bFûe
 = 
	`f›í
("b.bin","wb");

42 
aFûeT
 = 
	`f›í
("aTranspose.bin", "wb");

43 
bFûeT
 = 
	`f›í
("bTranspose.bin","wb");

44 
abFûe
 = 
	`f›í
("ab.bin", "wb");

45 
abTFûe
 = 
	`f›í
("abTranspose.bin", "wb");

47 
	`fwrôe
 (
aGlob
, (), 
n
*n, 
aFûe
);

48 
	`fwrôe
 (
bGlob
, (), 
n
*n, 
bFûe
);

49 
	`fwrôe
 (
aGlobT
, (), 
n
*n, 
aFûeT
);

50 
	`fwrôe
 (
bGlobT
, (), 
n
*n, 
bFûeT
);

51 
	`fwrôe
 (
abGlob
, (), 
n
*n, 
abFûe
);

52 
	`fwrôe
 (
abGlobT
, (), 
n
*n, 
abTFûe
);

54 
	`f˛o£
(
aFûe
);

55 
	`f˛o£
(
bFûe
);

56 
	`f˛o£
(
aFûeT
);

57 
	`f˛o£
(
bFûeT
);

58 
	`f˛o£
(
abFûe
);

59 
	`f˛o£
(
abTFûe
);

61 
	`¥ötf
("Done matrix generating\n");

63 
	}
}

65 
	$mu…ùlyNxN
(*
a
, *
b
, *
ab
, 
n
)

68 
i
, 
j
, 
k
;

70 
i
 = 0; i < 
n
 *Ç; i++)

72 
ab
[
i
] = 0.0F;

75  
i
 = 0; i < 
n
; ++i )

77 
	`¥ötf
(". ");

78  
j
 = 0; j < 
n
; ++j )

80  
k
 = 0; k < 
n
; ++k )

82 
ab
[
i
*
n
+
j
] +
a
[i*n+
k
] * 
b
[k*n+j];

86 
	}
}

88 
	$å™po£
(*
a
, *
b
, 
size
)

90 
i
, 
j
;

91 
i
 = 0; i < 
size
; i++)

92 
j
 = 0; j < 
size
; j++)

93 
a
[
i
*
size
+
j
] = 
b
[j*size+i];

94 
	}
}

96 
	$gíR™domNxN
(*
a
, 
n
, 
£ed
, 
low_num
, 
hi_num
)

98 
i
;

99 
	`§™d
(
£ed
);

101 
i
 = 0; i < 
n
 *Ç; i++)

103 
ãmp
 =()–
	`ønd
() & 0x7FFF )/ 32768.0f;

104 
a
[
i
] = 
low_num
 + 
ãmp
 * ( 
hi_num
 -Üow_num );

107 
	}
}

	@HowTo/LamaBLISMatrixMatrixMultiply/leon/Helpers.c

2 
	~"Hñ≥rs.h
"

4 
	~<mv_ty≥s.h
>

5 
	~<swcFømeTy≥s.h
>

6 
	~<Deföes.h
>

8 #ifde‡
SHAVE_PERFORMANCE_ONLY


9 
	gtime_shave
;

11 
	gnumbîShaves
 = 
MAX_SHAVES
;

13 * (
BLISTe°0_°¨tSGEMM
);

14 * (
BLISTe°0_°¨tSGEMMTRSM_LL
);

15 * (
BLISTe°0_°¨tSGEMMTRSM_LU
);

16 * (
BLISTe°0_°¨tSGEMMTRSM_RU
);

17 * (
BLISTe°0_°¨tSGEMMTRSM_RL
);

20 
swcShaveUnô_t
 
	gli°Shaves
[
MAX_SHAVES
] = {0};

22 
u32
 
	gíåyPoötsSGEMM
[
MAX_SHAVES
] =

24 (
u32
)&
BLISTe°0_°¨tSGEMM


27 
u32
 
	gíåyPoötsSGEMMTRSM_LL
[
MAX_SHAVES
] =

29 (
u32
)&
BLISTe°0_°¨tSGEMMTRSM_LL


32 
u32
 
	gíåyPoötsSGEMMTRSM_LU
[
MAX_SHAVES
] =

34 (
u32
)&
BLISTe°0_°¨tSGEMMTRSM_LU


37 
u32
 
	gíåyPoötsSGEMMTRSM_RU
[
MAX_SHAVES
] =

39 (
u32
)&
BLISTe°0_°¨tSGEMMTRSM_RU


42 
u32
 
	gíåyPoötsSGEMMTRSM_RL
[
MAX_SHAVES
] =

44 (
u32
)&
BLISTe°0_°¨tSGEMMTRSM_RL


	@HowTo/LamaBLISMatrixMatrixMultiply/leon/Helpers.h

1 #i‚de‡
__HELPERS_H__


2 
	#__HELPERS_H__


	)

4 
	~"bli_c⁄fig.h
"

5 
	~"Deföes.h
"

6 
	~"swcShaveLﬂdî.h
"

7 
	~<DrvShaveL2Cache.h
>

10 #ifde‡
SHAVE_PERFORMANCE_ONLY


11 
time_shave
;

14 
swcShaveUnô_t
 
li°Shaves
[
MAX_SHAVES
];

15 
numbîShaves
;

17 
u32
 
íåyPoötsSGEMM
[
MAX_SHAVES
];

18 
u32
 
íåyPoötsSGEMMTRSM_LL
[
MAX_SHAVES
];

19 
u32
 
íåyPoötsSGEMMTRSM_LU
[
MAX_SHAVES
];

20 
u32
 
íåyPoötsSGEMMTRSM_RU
[
MAX_SHAVES
];

21 
u32
 
íåyPoötsSGEMMTRSM_RL
[
MAX_SHAVES
];

	@HowTo/LamaBLISMatrixMatrixMultiply/leon/app_config.c

12 
	~"≠p_c⁄fig.h
"

13 
	~"DrvC¥.h
"

14 
	~"DrvDdr.h
"

15 
	~"as£π.h
"

16 
	~"ªgi°îsMyrüd.h
"

17 
	~"DrvRegUtûs.h
"

18 
	~"DrvGpioDeföes.h
"

19 
	~"DrvGpio.h
"

20 
	~"ªgi°îsMyrüd.h
"

21 
	~"brdGpioCfgs/brdMv0182GpioDeÁu…s.h
"

22 
	~"DrvShaveL2Cache.h
"

23 
	~"DrvTimî.h
"

24 
	~"DrvMùi.h
"

25 
	~"DrvMùiDeföes.h
"

26 
	~"DrvMssDeföes.h
"

30 
	#SYS_CLK_KHZ
 12000

31 
	#PLL0_FREQ
 300000

	)

32 
	#APP_UPA_CLOCKS
 (
DEV_UPA_SH0
 | \

33 
DEV_UPA_SH1
 | \

34 
DEV_UPA_SH2
 | \

35 
DEV_UPA_SH3
 | \

36 
DEV_UPA_SH4
 | \

37 
DEV_UPA_SH5
 | \

38 
DEV_UPA_SH6
 | \

39 
DEV_UPA_SH7
 | \

40 
DEV_UPA_SH8
 | \

41 
DEV_UPA_SH9
 | \

42 
DEV_UPA_SH10
 | \

43 
DEV_UPA_SH11
 | \

44 
DEV_UPA_SHAVE_L2
 | \

45 
DEV_UPA_CDMA
 | \

46 
DEV_UPA_CTRL
 )

	)

47 
	#L2CACHE_CFG
 (
SHAVE_L2CACHE_NORMAL_MODE
)

	)

52 
u32
 
__l2_c⁄fig
 
__©åibuã__
((
£˘i⁄
(".l2.mode"))Ë
L2CACHE_CFG
;

57 #i‡(
deföed
 
MYRIAD2
)

58 
tyAuxClkDividîCfg
 
	gauxClk
[] =

61 .
auxClockE«bÀMask
 = 
AUX_CLK_MASK_LCD
 | 
CSS_AUX_MEDIA
,

62 .
	gauxClockSour˚
 = 
CLK_SRC_SYS_CLK
,

63 .
	gauxClockDivNumî©‹
 = 1,

64 .
	gauxClockDivDíomö©‹
 = 1

70 
tySocClockC⁄fig
 
	g˛ocksC⁄fig
 =

72 .
ªfClk0I≈utKhz
 = 
SYS_CLK_KHZ
 ,

73 .
	gªfClk1I≈utKhz
 = 0 ,

74 .
	gèrgëPŒ0FªqKhz
 = 
PLL0_FREQ
,

75 .
	gèrgëPŒ1FªqKhz
 = 0,

76 .
	g˛kSrcPŒ1
 = 
CLK_SRC_REFCLK0
,

77 .
	gma°îClkDivNumî©‹
 = 1,

78 .
	gma°îClkDivDíomö©‹
 = 1,

79 .
	gcssDssClockE«bÀMask
 = 
DEFAULT_CORE_CSS_DSS_CLOCKS
,

80 .
	gu∑ClockE«bÀMask
 = 
DEFAULT_UPA_CLOCKS
,

81 .
	gmssClockE«bÀMask
 = 0xFFFFFFFF,

82 .
	gsùpClockE«bÀMask
 = 0,

83 .
	gpAuxClkCfg
 = 
auxClk
,

93 
	$öôClocksAndMem‹y
()

95 
i
;

98 
	`DrvC¥Inô
();

99 
	`DrvC¥SëupClocks
(&
˛ocksC⁄fig
);

100 
	`DrvC¥SysDevi˚A˘i⁄
(
MSS_DOMAIN
, 
DEASSERT_RESET
, 0xFFFFFFFF);

101 
	`DrvC¥SysDevi˚A˘i⁄
(
UPA_DOMAIN
, 
DEASSERT_RESET
, 
APP_UPA_CLOCKS
);

103 
	`DrvRe£tMssGpioLcdMùiLo›backCfgRegi°îVÆues
();

105 
	`DrvTimîInô
();

106 
	`DrvDdrInôüli£
(
NULL
);

109 
	`DrvShaveL2CacheSëupP¨tôi⁄
(
SHAVEPART256KB
);

112 
	`DrvShaveL2CacheAŒoˇãSëP¨tôi⁄s
();

115 
i
 = 0; i < 12; i++)

117 
	`DrvShaveL2CacheSëLSUP¨tId
(
i
, 0);

121 
	`DrvGpioInôüli£R™ge
(
brdMV0182GpioCfgDeÁu…
);

124 
	}
}

	@HowTo/LamaBLISMatrixMatrixMultiply/leon/app_config.h

9 #i‚de‡
_APP_CONFIG_H_


10 
	#_APP_CONFIG_H_


	)

12 
	~<mv_ty≥s.h
>

15 
u32
 
__l2_c⁄fig
 ;

20 
öôClocksAndMem‹y
();

	@HowTo/LamaBLISMatrixMatrixMultiply/leon/main.c

11 
	~<°dio.h
>

12 
	~<°rög.h
>

13 
	~<DrvLe⁄L2C.h
>

14 
	~<UnôTe°Api.h
>

15 
	~<VcsHooksApi.h
>

16 
	~<DrvTimî.h
>

18 
	~"mv_ty≥s.h
"

19 
	~"≠p_c⁄fig.h
"

23 
	#N_MAX
 2048

	)

24 
	#SIZE
 2048

	)

25 
	#DELTA
 1.0

	)

27 
	~"blis.h
"

28 
	~"Deföes.h
"

29 
	~"Hñ≥rs.h
"

33 #ifde‡
LEON_MALLOC_ISSUE


42 
	#LEON_HEAP
 ( 54*1024*1024)

	)

43 
DDR_LEON_HEAP
 
	$ALIGNED
(16Ë
À⁄_hóp
[
LEON_HEAP
];

48 
DDR_BSS
 
m©rixA
[
N_MAX
 * N_MAX];

49 
DDR_BSS
 
m©rixB
[
N_MAX
 * N_MAX];

50 
DDR_BSS
 
m©rixC
[
N_MAX
 * N_MAX];

51 
DDR_BSS
 
m©rixAB
[
N_MAX
 * N_MAX];

53 
tyTimeSèmp
 
timî_d©a
;

57 
	`¸óãM©rixObj
(
dim_t
 
gs
, 
num_t
 
dt
, 
å™s_t
 
å™s
, 
°‹age
, dim_à
m
,

58 
dim_t
 
n
, 
obj_t
* 
a
);

59 
	`m©rixCmp
(*
a˘uÆ
, *
ex≥˘ed
, 
width
, 
dñè
);

64 
	$maö
() {

66 
	`öôClocksAndMem‹y
();

68 
	`unôTe°Inô
();

69 
	`unôTe°Vîbosôy
(
VERBOSITY_ALL
);

71 #ifde‡
SHAVE_BLIS


72 
	`¥ötf
("\nSèπ usög %d SHAVEs!\n", 
numbîShaves
);

74 
	`¥ötf
("\nStart using LEON only!\n");

76 #ifde‡
LEON_MALLOC_ISSUE


77 
	`bli_öô_À⁄
(
À⁄_hóp
, 
LEON_HEAP
);

80 
	`bli_öô
();

82 
dim_t
 
m
, 
n
, 
k
;

83 
å™s_t
 
å™ß
, 
å™sb
;

84 
obj_t
 
k≠∑
;

85 
obj_t
 
Æpha
, 
a
, 
b
, 
bëa
, 
c
;

87 
num_t
 
d©©y≥
 = 
BLIS_FLOAT
;

88 
°‹age
 = 'c';

91 
m
 = 
SIZE
;

92 
n
 = 
SIZE
;

93 
k
 = 
SIZE
;

96 
å™ß
 = 
BLIS_NO_TRANSPOSE
;

97 
å™sb
 = 
BLIS_NO_TRANSPOSE
;

100 
	`bli_obj_sˇœr_öô_dëached
(
d©©y≥
, &
k≠∑
);

101 
	`bli_obj_sˇœr_öô_dëached
(
d©©y≥
, &
Æpha
);

102 
	`bli_obj_sˇœr_öô_dëached
(
d©©y≥
, &
bëa
);

105 
	`¸óãM©rixObj
(32, 
d©©y≥
, 
å™ß
, 
°‹age
, 
m
, 
k
, &
a
);

106 
	`¸óãM©rixObj
(32, 
d©©y≥
, 
å™sb
, 
°‹age
, 
k
, 
n
, &
b
);

107 
	`¸óãM©rixObj
(32, 
d©©y≥
, 
BLIS_NO_TRANSPOSE
, 
°‹age
, 
m
, 
n
, &
c
);

109 
	`mem˝y
(
a
.
buf„r
, 
m©rixA
, 
SIZE
*SIZE*());

110 
	`mem˝y
(
b
.
buf„r
, 
m©rixB
, 
SIZE
*SIZE*());

113 
	`bli_£tsc
(1.0, 0.0, &
Æpha
);

114 
	`bli_£tsc
(0.0, 0.0, &
bëa
);

117 
	`bli_obj_£t_c⁄jå™s
(
å™ß
, 
a
);

118 
	`bli_obj_£t_c⁄jå™s
(
å™sb
, 
b
);

121 
	`DrvTimîSèπTicksCou¡
(&
timî_d©a
);

122 
	`bli_gemm
(&
Æpha
, &
a
, &
b
, &
bëa
, &
c
);

123 
u64
 
cy˛es_ñ≠£d
;

124 
	`DrvTimîGëEœp£dTicks
(&
timî_d©a
,&
cy˛es_ñ≠£d
);

126 
	`DrvLL2CFlushOpOnAŒLöes
(
LL2C_OPERATION_INVALIDATE
, 0);

127 
asm
 volatile("flush");

130 
	`unôTe°As£π
(
	`m©rixCmp
(
c
.
buf„r
, 
m©rixAB
, 
SIZE
, 
DELTA
));

131 
	`unôTe°FöÆRï‹t
();

135 
	`bli_obj_‰ì
(&
a
);

136 
	`bli_obj_‰ì
(&
b
);

137 
	`bli_obj_‰ì
(&
c
);

138 
	`¥ötf
("\nD⁄êö %Œu cy˛es\n", 
cy˛es_ñ≠£d
);

140 
	}
}

143 
	$m©rixCmp
(*
a˘uÆ
, *
ex≥˘ed
, 
width
, 
dñè
) {

144 
i
;

145 
i
 = 0; i < 
width
 * width; i++) {

146 i‡(
	`Ábs
(
a˘uÆ
[
i
] - 
ex≥˘ed
[i]Ë> 
dñè
)

148 
	`¥ötf
("◊˘uÆ vÆË%‡”x≥˘ed vÆË%‡poz:%d\n", 
a˘uÆ
[
i
], 
ex≥˘ed
[i], i);

153 
	}
}

155 
	$¸óãM©rixObj
(
dim_t
 
gs
, 
num_t
 
dt
, 
å™s_t
 
å™s
, 
°‹age
, dim_à
m
,

156 
dim_t
 
n
, 
obj_t
* 
a
)

158 
dim_t
 
m_å™s
 = 
m
;

159 
dim_t
 
n_å™s
 = 
n
;

160 
dim_t
 
rs_g
;

161 
dim_t
 
cs_g
;

164 
	`bli_£t_dims_wôh_å™s
(
å™s
, 
m
, 
n
, 
m_å™s
, 
n_å™s
);

168 
rs_g
 = 
gs
 * 1;

169 
cs_g
 = 
gs
 * 
m_å™s
;

171 i‡(
°‹age
 == 'c')

172 
	`bli_obj_¸óã
(
dt
, 
m_å™s
, 
n_å™s
, 0, 0, 
a
);

173 i‡(
°‹age
 == 'r')

174 
	`bli_obj_¸óã
(
dt
, 
m_å™s
, 
n_å™s
,Ç_å™s, 1, 
a
);

175 i‡(
°‹age
 == 'g')

176 
	`bli_obj_¸óã
(
dt
, 
m_å™s
, 
n_å™s
, 
rs_g
, 
cs_g
, 
a
);

179 
	`¥ötf
("InvÆid st‹agêch¨a˘î: %c\n", 
°‹age
);

181 
	}
}

	@HowTo/LamaBLISMatrixMatrixMultiply/shared/Defines.h

8 #i‚de‡
__DEFINES_H__


9 
	#__DEFINES_H__


	)

12 
	#MAX_SHAVES
 1

	)

17 
	#MAX_M_ITER
 8

	)

18 
	#MAX_K
 512

	)

20 
	#DDR_TO_DDRCACHE
(
_addªss
Ë((
u8
*)(((
u32
)_addªss)&0xF7FFFFFF))

	)

21 
	#ALIGNED
(
_vÆue
Ë
	`__©åibuã__
((
	`Æig√d
(_vÆue)))

	)

22 
	#DDR_DATA
 
	`__©åibuã__
((
	`£˘i⁄
(".ddr.d©a"))Ë
	`ALIGNED
(16)

	)

23 
	#DDR_BSS
 
	`__©åibuã__
((
	`£˘i⁄
(".ddr.bss"))Ë
	`ALIGNED
(16)

	)

24 
	#DDR_LEON_HEAP
 
	`__©åibuã__
((
	`£˘i⁄
(".ddr.bss"))Ë
	`ALIGNED
(16)

	)

28 *
	ma
;

29 *
	mb
;

30 *
	mc
;

31 *
	mÆpha
;

32 *
	mbëa
;

33 
	mk
;

34 
	mn_ôî
;

35 
	mm_ôî
;

36 
	mn_À·
;

37 
	mm_À·
;

38 
	mrs_c
;

39 
	mcs_c
;

40 
	mr°ï_a
;

41 
	mc°ï_b
;

42 } 
	tkî√lInfo_t
;

	@HowTo/LamaBLISMatrixMatrixMultiply/shave/Buffers.c

1 
	~"Buf„rs.h
"

4 
	$ALIGNED
(16Ë
a_buff
[
A_BUFF_SIZE
];

6 
	$ALIGNED
(16Ë
b_buff
[2][
B_BUFF_SIZE
];

8 
	$ALIGNED
(16Ë
c_buff
[3][
C_BUFF_SIZE
];

10 
	$ALIGNED
(16Ë
˘
[
MR
 * 
NR
];

	@HowTo/LamaBLISMatrixMatrixMultiply/shave/Buffers.h

1 #i‚de‡
__BUFFERS_H__


2 
	#__BUFFERS_H__


	)

4 
	~<mv_ty≥s.h
>

5 
	~"Deföes.h
"

7 
	#MR
 4

	)

8 
	#NR
 4

	)

9 
	#PACKMR
 4

	)

10 
	#PACKNR
 4

	)

12 
	#A_BUFF_SIZE
 (4 * 
MAX_K
 * 
MAX_M_ITER
)

	)

13 
	#B_BUFF_SIZE
 (4 * 
MAX_K
)

	)

14 
	#C_BUFF_SIZE
 (4 * 4 * 
MAX_M_ITER
)

	)

16 
	$ALIGNED
(16Ë
a_buff
[
A_BUFF_SIZE
];

17 
	$ALIGNED
(16Ë
b_buff
[2][
B_BUFF_SIZE
];

18 
	$ALIGNED
(16Ë
c_buff
[3][
C_BUFF_SIZE
];

21 
	$ALIGNED
(16Ë
˘
[
MR
 * 
NR
];

	@HowTo/LeonToLeonMessage/leon/app_config.c

11 
	~<OsDrvC¥.h
>

12 
	~<OsDrvShaveL2Cache.h
>

13 
	~"≠p_c⁄fig.h
"

17 
	#L2CACHE_CFG
 (
SHAVE_L2CACHE_NORMAL_MODE
)

	)

30 
	$öôClocksAndMem‹y
()

32 
u32
 
sc
;

33 
tyAuxClkDividîCfg
 
auxClkAŒOn
[] =

35 {
AUX_CLK_MASK_UART
, 
CLK_SRC_REFCLK0
, 96, 625},

40 
	`OsDrvC¥Inô
();

41 
	`OsDrvC¥O≥n
();

42 
	`OsDrvC¥AuxClockAºayC⁄fig
(
auxClkAŒOn
);

45 
	`DrvC¥SysDevi˚A˘i⁄
(
MSS_DOMAIN
,
DEASSERT_RESET
,
DEFAULT_RTEMS_MSS_LRT_CLOCKS
);

48 
sc
 = 
	`OsDrvShaveL2CacheInô
(
L2CACHE_CFG
);

49 if(
sc
)

50  
sc
;

53 
∑πôi⁄_id
;

54 
	`OsDrvShaveL2CGëP¨tôi⁄
(
SHAVEPART256KB
, &
∑πôi⁄_id
);

57 
sc
 = 
	`OsDrvShaveL2CacheAŒoˇãSëP¨tôi⁄s
();

58 if(
sc
)

59  
sc
;

61 
	`OsDrvShaveL2CacheP¨tôi⁄InvÆid©e
(0);

63 
	}
}

	@HowTo/LeonToLeonMessage/leon/app_config.h

9 #i‚de‡
_APP_CONFIG_H_


10 
	#_APP_CONFIG_H_


	)

25 
öôClocksAndMem‹y
();

	@HowTo/LeonToLeonMessage/leon/main.c

10 
	~<°dio.h
>

11 
	~<°dlib.h
>

12 
	~<°rög.h
>

13 
	~<πems.h
>

14 
	~<πems/b•Io.h
>

15 
	~<Le⁄IPCApi.h
>

16 
	~<DrvLe⁄.h
>

17 
	~"πems_c⁄fig.h
"

21 
	#MSG_SIZE
 1

	)

22 
	#MSG_QUEUE_SIZE
 5

	)

27 
u32
 
Ãt_°¨t
;

29 
u32
 
Ãt_°¨t
;

30 
À⁄IPCCh™√l_t
 
__©åibuã__
((
£˘i⁄
(".cmx_dúe˘.d©a"))Ë
	gÃt_LOStoLRTCh™√l
;

31 
uöt32_t
 
__©åibuã__
((
£˘i⁄
(".cmx_dúe˘.d©a"))Ë
	gmesßgePoﬁ
[
MSG_QUEUE_SIZE
 * 
MSG_SIZE
];

32 
uöt32_t
 
__©åibuã__
((
£˘i⁄
(".cmx_dúe˘.d©a"))Ë
	gsomeV¨
;

33 vﬁ©ûê
uöt32_t
 
__©åibuã__
((
£˘i⁄
(".cmx_dúe˘.d©a"))Ë
	gLπSídMesßge
;

37 vﬁ©ûê
uöt32_t
 
	gMesßgesSít
;

45 *
	$POSIX_Inô
 (*
¨gs
)

47 
	`UNUSED
(
¨gs
);

49 
loˇlMesßgeC¡
;

50 
°©us
;

52 
	`öôClocksAndMem‹y
();

53 
	`¥ötf
("LeonOS Started.\n");

54 
	`¥ötf
("Le⁄RT Sèπ Addr: 0x%lX\n",(
u32
)&
Ãt_°¨t
);

56 
°©us
 = 
	`Le⁄IPCTxInô
(&
Ãt_LOStoLRTCh™√l
, 
mesßgePoﬁ
, 
MSG_QUEUE_SIZE
, 
MSG_SIZE
);

59 
	`DrvLe⁄RTSèπup
((
u32
)&
Ãt_°¨t
);

60 
	`DrvLe⁄RTWaôF‹BoŸ
();

62 
LπSídMesßge
=0;

63 
loˇlMesßgeC¡
=0;

65 
MesßgesSít
 < 5)

67 i‡(
LπSídMesßge
 == 1)

69 
someV¨
 = 0xCAFE0000 + (++
loˇlMesßgeC¡
);

70 
°©us
 = 
	`Le⁄IPCSídMesßge
(&
Ãt_LOStoLRTCh™√l
, &
someV¨
);

71 i‡(
°©us
 !
IPC_SUCCESS
)

73 
	`¥ötf
("Mesßgê£ndög faûed wôh codê0x%X:\n", 
°©us
);

74 
°©us
)

76 
IPC_RX_NOTINITIALIZED
:

77 
	`¥ötf
("LRT didÇot initialize Rx\n");

79 
MSG_QUEUE_OVERFLOW
:

80 
	`¥ötf
("No spaceÜeft inÅhe queue foránother message\n");

83 
	`¥ötf
("Unknown failure\n");

89 
MesßgesSít
++;

91 
LπSídMesßge
 = 0;

95 
	`DrvLe⁄RTWaôExecuti⁄
();

97 
	`¥ötf
("LeonRT Stop.\n");

99 
	`exô
(0);

100 
	}
}

	@HowTo/LeonToLeonMessage/leon/rtems_config.h

8 #i‚de‡
_RTEMS_CONFIG_H_


9 
	#_RTEMS_CONFIG_H_


	)

13 
	~"≠p_c⁄fig.h
"

14 
	~"ÁèlExãnsi⁄.h
"

19 #i‡
deföed
(
__RTEMS__
)

21 #i‡!
deföed
 (
__CONFIG__
)

22 
	#__CONFIG__


	)

25 
	#CONFIGURE_INIT


	)

27 #i‚de‡
RTEMS_POSIX_API


28 
	#RTEMS_POSIX_API


	)

31 
	#CONFIGURE_MICROSECONDS_PER_TICK
 1000

	)

33 
	#CONFIGURE_TICKS_PER_TIMESLICE
 10

	)

35 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

37 
	#CONFIGURE_APPLICATION_NEEDS_CLOCK_DRIVER


	)

39 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

41 
	#CONFIGURE_MINIMUM_TASK_STACK_SIZE
 4096

	)

43 
	#CONFIGURE_MAXIMUM_TASKS
 4

	)

45 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 4

	)

47 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 8

	)

49 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 8

	)

51 
	#CONFIGURE_MAXIMUM_POSIX_SEMAPHORES
 8

	)

53 
	#CONFIGURE_MAXIMUM_POSIX_MESSAGE_QUEUES
 8

	)

55 
	#CONFIGURE_MAXIMUM_POSIX_TIMERS
 4

	)

57 
	#CONFIGURE_MAXIMUM_TIMERS
 4

	)

59 
	#CONFIGURE_MAXIMUM_SEMAPHORES
 4

60 

	)

62 
	#CONFIGURE_MAXIMUM_USER_EXTENSIONS
 1

	)

63 
	#CONFIGURE_INITIAL_EXTENSIONS
 { .
Áèl
 = 
F©Æ_exãnsi⁄
 }

	)

70 *
POSIX_Inô
 (*
¨gs
);

72 
	~<πems/c⁄fdefs.h
>

77 
BSP_SET_CLOCK
(12000, 266000, 1, 1, 
DEFAULT_RTEMS_CSS_LOS_CLOCKS
, 
DEFAULT_RTEMS_MSS_LRT_CLOCKS
, 0, 0, 0);

80 
BSP_SET_L2C_CONFIG
(0, 
L2C_REPL_LRU
, 0, 
L2C_MODE_COPY_BACK
, 0, 
NULL
);

	@HowTo/LeonToLeonMessage/leon_rt/rt_main.c

12 
	~<°dio.h
>

13 
	~<swcLe⁄Utûs.h
>

14 
	~<DrvLe⁄.h
>

15 
	~<DrvIcb.h
>

16 
	~<DrvTimî.h
>

17 
	~<DrvC¥.h
>

18 
	~<Le⁄IPCApi.h
>

22 
	#MSG_SIZE
 1

	)

23 
	#MSG_QUEUE_SIZE
 5

	)

30 
	#MESSAGE_POOL_BYTE_SIZE
 (1024)

	)

32 
À⁄IPCCh™√l_t
 
LOStoLRTCh™√l
;

33 
uöt32_t
 
__©åibuã__
((
£˘i⁄
(".ddr.d©a"))Ë
	gª˚ived
[
MSG_QUEUE_SIZE
 * 
MSG_SIZE
];

34 
uöt32_t
 
__©åibuã__
((
£˘i⁄
(".ddr.d©a"))Ë
	gsomeV¨
;

36 
uöt32_t
 
	gmesßgePoﬁ
[
MSG_QUEUE_SIZE
 * 
MSG_SIZE
];

37 vﬁ©ûê
uöt32_t
 
__©åibuã__
((
£˘i⁄
(".ddr.d©a"))Ë
	gMesßgesRe˚ived
;

45 
	#MSS_LRT_RESETS_TO_DEASSERT
 ( \

46 –
DEV_MSS_LRT_DSU
 ) | \

47 –
DEV_MSS_LRT_L2C
 ) | \

48 –
DEV_MSS_LRT_ICB
 ) | \

49 –
DEV_MSS_TIM
 ) | \

50 –
DEV_MSS_RTAHB_CTRL
 ) | \

51 –
DEV_MSS_LRT
 ) | \

52 –
DEV_MSS_RTBRIDGE
 ) | \

53 –
DEV_MSS_APB2_CTRL
 ) | \

54 –
DEV_MSS_APB_SLV
 ) )

	)

56 vﬁ©ûê
	gloˇlC¡
=0;

58 
	$LRTSig«l
(
À⁄IPCCh™√l_t
 *
ch™√l
)

60 
uöt32_t
 
msgNo
, 
i
;

62 
	`Le⁄IPCNumbîOfPídögMesßges
(
ch™√l
, &
msgNo
);

63 
i
 = 0; i < 
msgNo
; i++)

65 i‡(
	`Le⁄IPCRódMesßge
(
ch™√l
, &
ª˚ived
[
MesßgesRe˚ived
]Ë=
IPC_SUCCESS
)

67 
	`¥ötf
("LRT: Co„êª˚ived from LOS: 0x%lX\n", 
ª˚ived
[
MesßgesRe˚ived
]);

68 
MesßgesRe˚ived
++;

71 
	}
}

73 
Le⁄IPCMesßgögISR
(
uöt32_t
 
úqSrc
);

75 
	$maö
()

77 
	`UNUSED
(
mesßgePoﬁ
);

82 
	`DrvC¥SysDevi˚A˘i⁄
(
MSS_DOMAIN
,
DEASSERT_RESET
,
MSS_LRT_RESETS_TO_DEASSERT
);

84 
	`swcLe⁄SëPIL
(0);

86 
	`Le⁄IPCRxInô
(&
LOStoLRTCh™√l
, &
LRTSig«l
, 
IRQ_DYNAMIC_5
, 5); 
	`DrvLe⁄RTSig«lBoŸCom∂ëed
();

89 
MesßgesRe˚ived
 < 5)

92 
	`DrvLe⁄RTSig«lSt›
();

95 
	}
}

	@HowTo/LowPower/leon/app_config.h

9 #i‚de‡
_APP_CONFIG_H_


10 
	#_APP_CONFIG_H_


	)

12 
	#DEFAULT_APP_CLOCK_KHZ
 600000

	)

13 #ifde‡
MA2X8X


14 
	#DEFAULT_OSC_CLOCK_KHZ
 24000

	)

16 
	#DEFAULT_OSC_CLOCK_KHZ
 12000

	)

18 
	#CLOCK_DIVIDER_NOMINATOR
 1

	)

19 
	#CLOCK_DIVIDER_DENOMINATOR
 1

	)

20 
	#L2CACHE_NORMAL_MODE
 (0x6)

21 
	#L2CACHE_CFG
 (
L2CACHE_NORMAL_MODE
)

	)

22 
	#BIGENDIANMODE
 (0x01000786)

	)

24 
	#NUMTASKS
 3

	)

25 
	#TASK
(
i
Ë(1<<(31-(i)))

	)

26 #ifde‡
MA2X8X


27 
	#GPIO_ID
 31

28 #ñ£

	)

29 
	#GPIO_ID
 81

31 

	)

32 
	#LP_GPIO_32KHZ_STATE_IDX
 0

	)

34 
	#SEMLOCK
 
	`πems_£m≠h‹e_obèö
(
¥Ÿe˘ed_¥öt
, 
RTEMS_WAIT
, 
RTEMS_NO_TIMEOUT
);

	)

35 
	#SEMUNLOCK
 
	`πems_£m≠h‹e_ªÀa£
(
¥Ÿe˘ed_¥öt
);

	)

36 
	#DPRINTK
(...Ëdo{ 
SEMLOCK
; 
	`¥ötk
(
__VA_ARGS__
);
SEMUNLOCK
; }0)

	)

37 
	#DPRINTF
(...Ëdo{ 
SEMLOCK
; 
	`¥ötf
(
__VA_ARGS__
);
SEMUNLOCK
; }0)

	)

39 #i‡
deföed
(
__RTEMS__
)

41 #i‡!
deföed
 (
__CONFIG__
)

42 
	#__CONFIG__


	)

45 
	#CONFIGURE_INIT


	)

47 
	#CONFIGURE_MICROSECONDS_PER_TICK
 1000

	)

48 
	#CONFIGURE_TICKS_PER_TIMESLICE
 10

	)

50 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

51 
	#CONFIGURE_APPLICATION_NEEDS_CLOCK_DRIVER


	)

52 
	#CONFIGURE_RTEMS_INIT_TASKS_TABLE


	)

54 
	#CONFIGURE_LIBIO_MAXIMUM_FILE_DESCRIPTORS
 10

	)

55 
	#CONFIGURE_MINIMUM_TASK_STACK_SIZE
 8192

	)

56 
	#CONFIGURE_MAXIMUM_TASKS
 7

	)

57 
	#CONFIGURE_MAXIMUM_TIMERS
 4

	)

58 
	#CONFIGURE_MAXIMUM_SEMAPHORES
 10

	)

59 
	#CONFIGURE_MAXIMUM_DRIVERS
 8

	)

60 
	#CONFIGURE_MAXIMUM_DEVICES
 8

	)

61 
	#CONFIGURE_APPLICATION_NEEDS_ZERO_DRIVER


	)

62 
	#CONFIGURE_APPLICATION_NEEDS_NULL_DRIVER


	)

63 
	#CONFIGURE_APPLICATION_NEEDS_STUB_DRIVER


	)

65 
πems_èsk
 
Inô
(
πems_èsk_¨gumít
 
¨gumítx
);

67 
	~"ÁèlExãnsi⁄.h
"

70 
	#CONFIGURE_MAXIMUM_USER_EXTENSIONS
 1

	)

71 
	#CONFIGURE_INITIAL_EXTENSIONS
 { .
Áèl
 = 
F©Æ_exãnsi⁄
 }

	)

74 
	~<πems/c⁄fdefs.h
>

78 
BSP_SET_CLOCK
(
DEFAULT_OSC_CLOCK_KHZ
, 
DEFAULT_APP_CLOCK_KHZ
, 
CLOCK_DIVIDER_NOMINATOR
, 
CLOCK_DIVIDER_DENOMINATOR
, 
DEFAULT_RTEMS_CSS_LOS_CLOCKS
 | ( 1ULL << 
CSS_I2C2
), 
DEFAULT_RTEMS_MSS_LRT_CLOCKS
, 0,0,0);

79 
BSP_SET_L2C_CONFIG
(1, 
DEFAULT_RTEMS_L2C_REPLACEMENT_POLICY
, 
DEFAULT_RTEMS_L2C_LOCKED_WAYS
,
DEFAULT_RTEMS_L2C_MODE
, 0, 0);

	@HowTo/LowPower/leon/main.c

9 
	~<°dio.h
>

10 
	~<πems.h
>

11 
	~<f˙é.h
>

13 #i‚de‡
MA2X8X


14 
	~<OsDrvC¥.h
>

16 
	~<pwr_m™agî.h
>

17 
	~"≠p_c⁄fig.h
"

19 
πems_id
 
	göô_èsk_id
;

20 
πems_id
 
	g¥Ÿe˘ed_¥öt
;

22 
uöt32_t
 
	gcb_ªque°_cou¡
[
NUMTASKS
] = {0};

23 
uöt32_t
 
	gcb_gø¡ed_cou¡
[
NUMTASKS
] = {0};

24 
uöt32_t
 
	gcb_ˇn˚l_cou¡
[
NUMTASKS
] = {0};

25 
uöt32_t
 
	gcb_exô_cou¡
[
NUMTASKS
] = {0};

27 #ifde‡
MA2X8X


28 
LowPowîInfo
 
	gÕ_gpio_32khz
 = {{
LP_WAKEUP_SOURCE_GPIO
, {{
GPIO_ID
}}}, {
LP_SRC_32KHZ_CLK
}};

29 
LowPowîInfo
 
	gÕ_πc_32khz
 = {{
LP_WAKEUP_SOURCE_RTC
, {{5000}}}, {
LP_SRC_32KHZ_CLK
}};

31 
LowPowîInfo
 
	gÕ_gpio_32khz
 = {{
LP_WAKEUP_SOURCE_GPIO
, {{
GPIO_ID
}}}, {
LP_SRC_32KHZ_CLK
, {{1, 1 }}}};

34 
PwrM™agîIo˘lPowîSèã
 
	gp°©e
;

35 
uöt32_t
 
	gpwr_mngr_maj‹
;

39 
πems_°©us_code
 
	$cbReque°
(*
∑øm
) {

40 
uöt32_t
 
mö‹
 = (uöt32_t)
∑øm
;

42 
	`DPRINTK
("called cbRequest\n");

46 i‡((
cb_ªque°_cou¡
[
mö‹
]++) > 0)

47  
RTEMS_SUCCESSFUL
;

49  
RTEMS_IO_ERROR
;

50 
	}
}

52 
πems_°©us_code
 
	$cbC™˚l
(*
∑øm
) {

53 
uöt32_t
 
mö‹
 = (uöt32_t)
∑øm
;

55 
	`DPRINTK
("called cbCancel\n");

58 
cb_ˇn˚l_cou¡
[
mö‹
]++;

60  
RTEMS_SUCCESSFUL
;

61 
	}
}

63 
πems_°©us_code
 
	$cbGø¡ed
(*
∑øm
) {

64 
uöt32_t
 
mö‹
 = (uöt32_t)
∑øm
;

65 
uöt32_t
 
tŸÆ_cou¡
 = 0;

67 
	`DPRINTK
("called cbGranted\n");

71 
cb_gø¡ed_cou¡
[
mö‹
]++;

73 i‡((
tŸÆ_cou¡
++) >= 2)

75 
	`DPRINTK
("\n The system willÇowÉnter intoÅhe configuredÜowÖower mode;\n");

76 #ifde‡
MA2X8X


77 
	`DPRINTK
(" The system willáutomatically wake up in 5 seconds\n\n");

79 
	`DPRINTK
("Åo wakeupÅhe system, setÅhe DIP SWITCH8Åo ON (UPÖosition)\n\n");

83  
RTEMS_SUCCESSFUL
;

84 
	}
}

86 
πems_°©us_code
 
	$cbExô
(*
∑øm
) {

87 
uöt32_t
 
mö‹
 = (uöt32_t)
∑øm
;

89 
	`DPRINTK
("called cbExit\n");

92 
cb_exô_cou¡
[
mö‹
]++;

94  
RTEMS_SUCCESSFUL
;

95 
	}
}

98 
πems_èsk
 
	$ÕMu…iTask
(
πems_èsk_¨gumít
 
¨g
) {

100 
PwrM™agîCÆlbacksTabÀ
 
cb_¨øy
 = { &
cbReque°
, &
cbC™˚l
, &
cbGø¡ed
, &
cbExô
 };

101 
PwrM™agîIo˘lCÆlback
 
cuºít_èsk_cb
;

102 
öt32_t
 
cuºít_èsk_fd
;

103 
uöt32_t
 
cuª¡_èsk_id
 = (uöt32_t)(
¨g
);

105 
	`DPRINTF
(" Task%ld sèπed\n", 
cuª¡_èsk_id
);

108 
cuºít_èsk_fd
 = 
	`›í
(
OSDRVPWRMANAGER_DEVNAME
, 
O_RDONLY
, 0);

109 i‡(
cuºít_èsk_fd
 < 0)

110 
	`DPRINTF
("Eº‹ whûê›íögÅhêpowî m™agî comp⁄íàf‹Åask%ld: %ld \n", 
cuª¡_èsk_id
, 
cuºít_èsk_fd
);

112 
cuºít_èsk_cb
.
ˇŒbacks
 = 
cb_¨øy
;

113 
cuºít_èsk_cb
.
ˇŒback_¨gumít
 = (*)
cuª¡_èsk_id
;

115 
öt32_t
 
ªt
 = 
	`io˘l
(
cuºít_èsk_fd
, 
PWR_MANAGER_ADD_NOTIFICATION_CALLBACKS
, &
cuºít_èsk_cb
.
ˇŒbacks
);

116 i‡(
ªt
 !=0 )

117 
	`DPRINTF
("Eº‹ whíáddögÇŸifiˇti⁄ cÆlback†f‹Åhêèsk%ld \n", 
cuª¡_èsk_id
);

120 
	`¶ìp
(1);

122 
	`DPRINTF
(" Task%ld föished\n", 
cuª¡_èsk_id
);

124 
ªt
 = 
	`˛o£
(
cuºít_èsk_fd
);

125 i‡(
ªt
 !=0 )

126 
	`DPRINTF
("Eº‹ whí closögÅhêèsk%ld \n", 
cuª¡_èsk_id
);

128 
	`πems_evít_£nd
(
öô_èsk_id
, 
	`TASK
(
cuª¡_èsk_id
));

129 
	`πems_èsk_dñëe
(
RTEMS_SELF
);

130 
	}
}

133 
	$°¨tLowPowîM™agemítTask
()

135 
πems_id
 
èsk_id
[
NUMTASKS
];

136 
πems_«me
 
èsk_«me
[
NUMTASKS
];

137 
uöt32_t
 
evíts_out
;

138 
uöt32_t
 
i
;

139 
öt32_t
 
maö_fd
;

141 
	`DPRINTF
(" *** TestÉnteringÜowÖower withá multitaskingápplication\n");

144 
maö_fd
 = 
	`›í
(
OSDRVPWRMANAGER_DEVNAME
, 
O_RDONLY
, 0);

145 i‡(
maö_fd
 < 0)

146 
	`DPRINTF
("Eº‹ whûê›íögÅhêpowî m™agî comp⁄ít: %ld \n", 
maö_fd
);

151 
p°©e
.
mode_idx
 = 
LP_GPIO_32KHZ_STATE_IDX
;

152 
öt32_t
 
ªt
 = 
	`io˘l
(
maö_fd
, 
PWR_MANAGER_SWITCH_POWER_STATE
, &
p°©e
);

153 i‡(
ªt
 !=0 )

154 
	`DPRINTF
("Error whenÑequestingÅhe switchÅoÜowÖower mode !\n");

156 
ªt
 = 
	`˛o£
(
maö_fd
);

157 i‡(
ªt
 !=0 )

158 
	`DPRINTF
("Error when closingÅhe mainÅask \n");

161 
i
=0;i<
NUMTASKS
;i++) {

162 
èsk_«me
[
i
] = 
	`πems_buûd_«me
('T','S','K','0'+i);

164 i‡(
RTEMS_SUCCESSFUL
 !
	`πems_èsk_¸óã
(
èsk_«me
[
i
], 1, 
RTEMS_MINIMUM_STACK_SIZE
,

165 
RTEMS_PREEMPT
 | 
RTEMS_TIMESLICE
 | 
RTEMS_ASR
 | 
	`RTEMS_INTERRUPT_LEVEL
(0),

166 
RTEMS_DEFAULT_ATTRIBUTES
, &
èsk_id
[
i
]))

167 
	`DPRINTF
("Error while creatingÅheÅasks\n");

171 
i
=0;i<
NUMTASKS
;i++)

172 i‡(
RTEMS_SUCCESSFUL
 !
	`πems_èsk_°¨t
(
èsk_id
[
i
], 
ÕMu…iTask
, i))

173 
	`DPRINTF
("Error while startingÅheÅasks\n");

176 
i
=0;i<
NUMTASKS
;i++) {

177 i‡(
RTEMS_SUCCESSFUL
 !
	`πems_evít_ª˚ive
(
	`TASK
(
i
), 
RTEMS_WAIT
|
RTEMS_EVENT_ALL
, 
RTEMS_NO_TIMEOUT
, &
evíts_out
))

178 
	`DPRINTF
("Error while synchronizing betweenÅasks\n");

186 
uöt32_t
 
ex≥˘ed_ªque°_cou¡
[
NUMTASKS
] = {4,3,2};

187 
uöt32_t
 
ex≥˘ed_ˇn˚l_cou¡
[
NUMTASKS
] = {2,1,0};

188 
uöt32_t
 
ex≥˘ed_gø¡ed_cou¡
[
NUMTASKS
] = {1,1,1};

189 
uöt32_t
 
ex≥˘ed_exô_cou¡
[
NUMTASKS
] = {1,1,1};

191 
i
=0;i<
NUMTASKS
;i++) {

192 i‡–(
cb_ªque°_cou¡
[
i
] !
ex≥˘ed_ªque°_cou¡
[i]) ||

193 (
cb_ˇn˚l_cou¡
[
i
] !
ex≥˘ed_ˇn˚l_cou¡
[i]) ||

194 (
cb_gø¡ed_cou¡
[
i
] !
ex≥˘ed_gø¡ed_cou¡
[i]) ||

195 (
cb_exô_cou¡
[
i
] !
ex≥˘ed_exô_cou¡
[i]) )

196 
	`DPRINTF
("ErrorÖlayingÅheÅest: one ofÅhe callbacks wasÇotÖroperly called !\n");

198 
	}
}

202 
πems_èsk
 
	$Inô
(
πems_èsk_¨gumít
 
¨gumítx
) {

203 
	`UNUSED
(
¨gumítx
);

204 
πems_°©us_code
 
sc
;

206 
PwrM™agîPowîSèãs
 
vÆid_powî_°©es
[2] = {

207 {.
mode
 = 
POWER_MANAGER_MODE_LOW_POWER
,

208 #ifde‡
MA2X8X


209 .
low_powî_d©a
 = 
Õ_πc_32khz


211 .
low_powî_d©a
 = 
Õ_gpio_32khz


217 #i‚de‡
MA2X8X


218 
OS_MYRIAD_DRIVER_STATUS_CODE
 
ªs
 = 
	`OsDrvC¥Inô
();

219 i‡(
ªs
 =
OS_MYR_DRV_SUCCESS
 ||

220 
ªs
 =
OS_MYR_DRV_ALREADY_INITIALIZED
 ||

221 
ªs
 =
OS_MYR_DRV_ALREADY_OPENED
) {

222 i‡(
ªs
 !
OS_MYR_DRV_ALREADY_OPENED
)

223 
	`OsDrvC¥O≥n
();

226 
	`DPRINTF
(" Cpr driver initialization failed \n");

230 i‡(
	`πems_£m≠h‹e_¸óã
(
	`πems_buûd_«me
–'S', 'E', 'M', 'P' ), 1, 
RTEMS_DEFAULT_ATTRIBUTES
, 0, &
¥Ÿe˘ed_¥öt
))

231 
	`DPRINTF
("Prints willÇot beÖrotected \n\n");

233 
öô_èsk_id
 = 
	`πems_èsk_£lf
();

236 
sc
 = 
	`πems_io_ªgi°î_drivî
–0, &
osDrvPwrM™agîTbl
, &
pwr_mngr_maj‹
 );

237 i‡(
sc
 !
RTEMS_SUCCESSFUL
 )

238 
	`DPRINTF
("Eº‹ whûêªgi°îögÅhêpowî m™agî comp⁄ít: %u \n", 
sc
);

241 
sc
 = 
	`πems_io_öôülize
(
pwr_mngr_maj‹
, 0, 
vÆid_powî_°©es
);

242 i‡(
sc
 !
RTEMS_SUCCESSFUL
 )

243 
	`DPRINTF
("Eº‹ whûêöôülizögÅhêpowî m™agî comp⁄ít: %u \n", 
sc
);

246 
	`°¨tLowPowîM™agemítTask
();

248 
	`DPRINTF
("\n Test finished\n");

250 
	`πems_shutdown_executive
(0);

251 
	}
}

	@HowTo/MV0198PowerMeasure/leon/app_config.c

13 
	~"DrvC¥.h
"

14 
	~"DrvDdr.h
"

15 
	~"as£π.h
"

16 
	~"ªgi°îsMyrüd.h
"

17 
	~"DrvRegUtûs.h
"

18 
	~"DrvGpioDeföes.h
"

19 
	~"DrvGpio.h
"

20 
	~"ªgi°îsMyrüd.h
"

21 
	~"OsDrvShaveL2Cache.h
"

22 
	~"OsDrvTimî.h
"

23 
	~"DrvMssDeföes.h
"

24 
	~"OsDrvC¥.h
"

25 
	~"≠p_c⁄fig.h
"

29 
	#SYS_CLK_KHZ
 12000

30 

	)

31 
	#L2CACHE_CFG
 (
SHAVE_L2CACHE_NORMAL_MODE
)

	)

41 
	#MSS_CLOCKS
 ( 
DEV_MSS_APB_SLV
 | \

42 
DEV_MSS_APB2_CTRL
 | \

43 
DEV_MSS_RTBRIDGE
 | \

44 
DEV_MSS_RTAHB_CTRL
 | \

45 
DEV_MSS_LRT
 | \

46 
DEV_MSS_LRT_DSU
 | \

47 
DEV_MSS_LRT_L2C
 | \

48 
DEV_MSS_LRT_ICB
 | \

49 
DEV_MSS_AXI_BRIDGE
 | \

50 
DEV_MSS_MXI_CTRL
 | \

51 
DEV_MSS_AXI_MON
 | \

52 
DEV_MSS_TIM
 )

	)

55 
	#APP_UPA_CLOCKS
 ( 
DEV_UPA_SH0
 | \

56 
DEV_UPA_SH1
 | \

57 
DEV_UPA_SH2
 | \

58 
DEV_UPA_SH3
 | \

59 
DEV_UPA_SH4
 | \

60 
DEV_UPA_SH5
 | \

61 
DEV_UPA_SH6
 | \

62 
DEV_UPA_SH7
 | \

63 
DEV_UPA_SH8
 | \

64 
DEV_UPA_SH9
 | \

65 
DEV_UPA_SH10
 | \

66 
DEV_UPA_SH11
 | \

67 
DEV_UPA_SHAVE_L2
 | \

68 
DEV_UPA_CDMA
 | \

69 
DEV_UPA_CTRL
 )

	)

72 
	#CORE_CSS_DSS_CLOCKS
 ( 
DEV_CSS_LOS
 | \

73 
DEV_CSS_LAHB_CTRL
 | \

74 
DEV_CSS_APB4_CTRL
 | \

75 
DEV_CSS_CPR
 | \

76 
DEV_CSS_ROM
 | \

77 
DEV_CSS_LOS_L2C
 | \

78 
DEV_CSS_MAHB_CTRL
 | \

79 
DEV_CSS_LOS_ICB
 | \

80 
DEV_CSS_LOS_DSU
 | \

81 
DEV_CSS_LOS_TIM
 | \

82 
DEV_CSS_GPIO
 | \

83 
DEV_CSS_JTAG
 | \

84 
DEV_CSS_APB1_CTRL
 | \

85 
DEV_CSS_APB3_CTRL
 | \

86 
DEV_CSS_UART
 | \

87 
DEV_CSS_SAHB_CTRL
 | \

88 
DEV_CSS_MSS_MAS
 | \

89 
DEV_CSS_UPA_MAS
 | \

90 
DEV_CSS_DSS_APB
 | \

91 
DEV_CSS_DSS_APB_RST_PHY
 | \

92 
DEV_CSS_DSS_APB_RST_CTRL
| \

93 
DEV_CSS_DSS_BUS
 | \

94 
DEV_CSS_DSS_BUS_MAHB
 | \

95 
DEV_CSS_DSS_BUS_DXI
 | \

96 
DEV_CSS_DSS_BUS_AAXI
 | \

97 
DEV_CSS_DSS_BUS_MXI
 | \

98 
DEV_CSS_LAHB2SHB
 | \

99 
DEV_CSS_SAHB2MAHB
 )

	)

101 
BSP_SET_CLOCK
(12000, 480000, 1, 1,

102 
CORE_CSS_DSS_CLOCKS
, \

103 
MSS_CLOCKS
, \

104 
APP_UPA_CLOCKS
, \

109 
BSP_SET_L2C_CONFIG
(0, 
L2C_REPL_LRU
, 0, 
L2C_MODE_COPY_BACK
, 0, 
NULL
);

111 
tyAuxClkDividîCfg
 
	gauxClk
[] =

122 
	$öôClocksAndMem‹y
()

124 
u32
 
sc
;

127 
	`OsDrvC¥Inô
();

128 
	`OsDrvC¥O≥n
();

129 
	`OsDrvC¥AuxClockAºayC⁄fig
(
auxClk
);

131 
	`OsDrvTimîInô
();

132 
	`DrvDdrInôüli£
(
NULL
);

135 
sc
 = 
	`OsDrvShaveL2CacheInô
(
L2CACHE_CFG
);

136 if(
sc
)

137  
sc
;

140 
∑πôi⁄_id
;

141 
	`OsDrvShaveL2CGëP¨tôi⁄
(
SHAVEPART256KB
, &
∑πôi⁄_id
);

144 
sc
 = 
	`OsDrvShaveL2CacheAŒoˇãSëP¨tôi⁄s
();

145 if(
sc
)

146  
sc
;

149 
i
 = 0; i < 
SHAVES_USED
; i++)

151 
	`OsDrvShaveL2CSëN⁄WödowedP¨tôi⁄
(
i
, 0, 
NON_WINDOWED_DATA_PARTITION
);

152 
	`OsDrvShaveL2CSëN⁄WödowedP¨tôi⁄
(
i
, 0, 
NON_WINDOWED_INSTRUCTIONS_PARTITION
);

155 
	`OsDrvShaveL2CacheP¨tôi⁄InvÆid©e
(0);

158 
	}
}

	@HowTo/MV0198PowerMeasure/leon/app_config.h

13 #i‚de‡
APP_CONFIG_H


14 
	#APP_CONFIG_H


	)

18 
	~"mv_ty≥s.h
"

19 
	~<πems.h
>

23 
	#SHAVES_USED
 (12)

	)

31 
öôClocksAndMem‹y
();

34 
πems_èsk
 
Mósuª_èsk
(
πems_èsk_¨gumít
 
unu£d
);

	@HowTo/MV0198PowerMeasure/leon/main.c

12 
	~<DrvRegUtûsDeföes.h
>

13 
	~<DrvLe⁄.h
>

14 
	~<DrvC¥.h
>

15 
	~<DrvTimî.h
>

16 
	~<DrvDdr.h
>

17 
	~<swcLe⁄Utûs.h
>

18 
	~"≠p_c⁄fig.h
"

19 
	~<°dlib.h
>

20 
	~<°dio.h
>

21 
	~<b•.h
>

22 
	~"πemsC⁄fig.h
"

23 
	~<dbgTø˚rApi.h
>

24 
	~<dbgLogEvíts.h
>

25 
	~<DrvLe⁄.h
>

29 
	#DDR_BUF
 
	`__©åibuã__
((
	`£˘i⁄
(".ddr.d©a")))

	)

44 
u32
 *
Ãt_°¨t
;

46 *
	$POSIX_Inô
 (*
¨gs
)

48 
	`UNUSED
(
¨gs
);

50 
πems_°©us_code
 
°©us
;

51 
πems_id
 
èsk_id
;

52 
πems_«me
 
èsk_«me
;

53 
	`¥ötf
("\n---- Measure Test App ----\n");

55 
	`öôClocksAndMem‹y
();

57 
	`DrvLe⁄RTSèπup
((
u32
)&
Ãt_°¨t
);

60 
èsk_«me
 = 
	`πems_buûd_«me
('P', 'M', 'E', 'S');

63 
°©us
 = 
	`πems_èsk_¸óã
(
èsk_«me
, 1, 
RTEMS_MINIMUM_STACK_SIZE
 * 2,

64 
RTEMS_DEFAULT_MODES
, 
RTEMS_DEFAULT_ATTRIBUTES
, &
èsk_id
);

66 i‡(
°©us
 !
RTEMS_SUCCESSFUL
)

68 
	`¥ötf
("πems_èsk_¸óã faûed wôh %d\n", 
°©us
);

72 !
	`DrvLe⁄RTHasBoŸed
())

73 
	`πems_èsk_wake_a·î
(1);

76 
°©us
 = 
	`πems_èsk_°¨t
(
èsk_id
, 
Mósuª_èsk
, 1);

77 i‡(
°©us
 !
RTEMS_SUCCESSFUL
) {

78 
	`¥ötf
("πems_èsk_°¨àÁûed wôh %d\n", 
°©us
);

81 
	`πems_èsk_dñëe
–
RTEMS_SELF
);

82 
	`exô
(0);

83 
	}
}

	@HowTo/MV0198PowerMeasure/leon/measureTask.c

13 
	~"≠p_c⁄fig.h
"

14 
	~"brdMv0198.h
"

15 
	~<°dlib.h
>

16 
	~<°dio.h
>

17 
	~<DrvLe⁄.h
>

23 #ifde‡
DRV_DEBUG


24 
	#DPRINTF
(...Ë
	`¥ötf
(
__VA_ARGS__
)

	)

26 
	#DPRINTF
(...)

	)

41 
I2CM_Devi˚
 *
Ãt_i2c2Bus
;

44 
πems_èsk
 
	$Mósuª_èsk
(
πems_èsk_¨gumít
 
unu£d
)

46 (Ë
unu£d
;

48 
ªtVÆ
;

49 
tyBrd198H™dÀ
 
powîM⁄H™dÀ
;

50 
tyAdcResu…AŒRaûs
 
ªs
;

53 
ªtVÆ
 = 
	`Brd198Inô
(&
powîM⁄H™dÀ
, 
Ãt_i2c2Bus
,
NULL
);

54 if(
ªtVÆ
 != 0)

56 
	`¥ötf
("Board 198 initÉrror\n");

61 if(
	`DrvLe⁄RTHasSt›≥d
())

63 
	`¥ötf
("Measurement was finished \n");

64 
	`exô
(0);

66 
	`Brd198Sam∂eAŒRaûs
(&
powîM⁄H™dÀ
, &
ªs
);

69 
	`πems_èsk_dñëe
(
RTEMS_SELF
);

70 
	}
}

	@HowTo/MV0198PowerMeasure/leon/rtemsConfig.h

9 #i‚de‡
_RTEMS_CONFIG_H_


10 
	#_RTEMS_CONFIG_H_


	)

12 
	~<πems.h
>

13 
	~<πems/b•Io.h
>

14 
	~"ÁèlExãnsi⁄.h
"

16 #i‡
deföed
(
__RTEMS__
)

18 #i‡!
deföed
 (
__CONFIG__
)

19 
	#__CONFIG__


	)

22 
	#CONFIGURE_INIT


	)

24 #i‚de‡
RTEMS_POSIX_API


25 
	#RTEMS_POSIX_API


	)

28 
	#CONFIGURE_MICROSECONDS_PER_TICK
 1000

	)

30 
	#CONFIGURE_TICKS_PER_TIMESLICE
 10

	)

32 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

34 
	#CONFIGURE_APPLICATION_NEEDS_CLOCK_DRIVER


	)

36 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

38 
	#CONFIGURE_MINIMUM_TASK_STACK_SIZE
 4096

	)

40 
	#CONFIGURE_MAXIMUM_TASKS
 4

	)

42 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 2

	)

44 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 8

	)

46 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 8

	)

48 
	#CONFIGURE_MAXIMUM_POSIX_SEMAPHORES
 8

	)

50 
	#CONFIGURE_MAXIMUM_POSIX_MESSAGE_QUEUES
 8

	)

52 
	#CONFIGURE_MAXIMUM_POSIX_TIMERS
 4

	)

54 
	#CONFIGURE_MAXIMUM_TIMERS
 4

	)

57 
	#CONFIGURE_MAXIMUM_DRIVERS
 8

	)

58 
	#CONFIGURE_MAXIMUM_DEVICES
 8

	)

59 
	#CONFIGURE_MAXIMUM_SEMAPHORES
 10

	)

62 
	#CONFIGURE_MAXIMUM_USER_EXTENSIONS
 1

	)

63 
	#CONFIGURE_INITIAL_EXTENSIONS
 { .
Áèl
 = 
F©Æ_exãnsi⁄
 }

	)

65 *
POSIX_Inô
 (*
¨gs
);

67 
	~<πems/c⁄fdefs.h
>

	@HowTo/MV0198PowerMeasure/leon_rt/app_config.c

12 
	~"≠p_c⁄fig.h
"

13 
	~<ªgi°îsMyrüd.h
>

14 
	~<DrvC¥.h
>

15 
	~<DrvDdr.h
>

16 
	~<DrvTimî.h
>

17 
	~<DrvRegUtûs.h
>

18 
	~<DrvShaveL2Cache.h
>

35 
	$öôClocksAndMem‹y
()

37 
i
;

39 
	`DrvC¥InôClocks
(12000, 0, 0, 0, 0);

41 
	`DrvC¥SysDevi˚A˘i⁄
(
UPA_DOMAIN
, 
ASSERT_RESET
, -1);

42 
	`DrvC¥SysDevi˚A˘i⁄
(
UPA_DOMAIN
, 
DEASSERT_RESET
,-1);

44 
	`DrvTimîInô
();

47 
	`DrvShaveL2CacheSëupP¨tôi⁄
(
SHAVEPART256KB
);

50 
	`DrvShaveL2CacheAŒoˇãSëP¨tôi⁄s
();

53 
i
 = 0; i < 
SHAVES_USED
; i++)

55 
	`DrvShaveL2CacheSëLSUP¨tId
(
i
, 
PARTITION_0
);

59 
	}
}

	@HowTo/MV0198PowerMeasure/leon_rt/app_config.h

9 #i‚de‡
_APP_CONFIG_H_


10 
	#_APP_CONFIG_H_


	)

14 
	~<mv_ty≥s.h
>

16 
	#PARTITION_0
 0

	)

17 
	#SHAVES_USED
 10

19 

	)

24 
u32
 
__l2_c⁄fig
 ;

33 
öôClocksAndMem‹y
();

	@HowTo/MV0198PowerMeasure/leon_rt/main.c

12 
	~<swcShaveLﬂdî.h
>

13 
	~"≠p_c⁄fig.h
"

14 
	~"DrvTimî.h
"

15 
	~"DrvSvu.h
"

16 #ifde‡
MV0212


17 
	~"MV0212.h
"

18 
	~"brdGpioCfgs/brdMv0182R5GpioDeÁu…s.h
"

19 #ñi‡
deföed
(
MV0182
)

20 
	~<Bﬂrd182Api.h
>

22 
	~"DrvCDCEL.h
"

23 
	~<DrvLe⁄.h
>

24 
	~<dbgTø˚rApi.h
>

27 
	~<DrvShaveL2Cache.h
>

30 
	~<VcsHooksApi.h
>

33 
	~<°dio.h
>

34 
	~<°dlib.h
>

37 
	#DDR_BUF
 
	`__©åibuã__
((
	`£˘i⁄
(".ddr.d©a")))

	)

39 
	#FRAME_WIDTH
 1280

	)

40 
	#FRAME_HEIGHT
 720

	)

42 
	#SHAVE_0
 0

	)

43 
	#SHAVE_1
 1

	)

44 
	#SHAVE_2
 2

	)

45 
	#SHAVE_3
 3

	)

46 
	#SHAVE_4
 4

	)

47 
	#SHAVE_5
 5

	)

48 
	#SHAVE_6
 6

	)

49 
	#SHAVE_7
 7

	)

50 
	#SHAVE_8
 8

	)

51 
	#SHAVE_9
 9

	)

53 
	#SHAVE_0_CLK
 0x001

	)

54 
	#SHAVES_1_3_CLK
 0x00E

	)

55 
	#SHAVES_4_9_CLK
 0x3F0

	)

57 
	#PADDING_SIZE
 2

	)

58 
DDR_BUF
 
u8
 
	gouçutFømeLoˇti⁄
[
FRAME_WIDTH
 * 
FRAME_HEIGHT
];

61 #ifde‡
MV0212


62 
	#NUM_I2C_DEVS
 3

	)

66 
I2CM_Devi˚
 *
	gi2c2Bus
;

68 
u32
 
mv0198Aµ0_shaveRun
[];

69 
u32
 
mv0198Aµ1_shaveRun
[];

70 
u32
 
mv0198Aµ2_shaveRun
[];

71 
u32
 
mv0198Aµ3_shaveRun
[];

72 
u32
 
mv0198Aµ4_shaveRun
[];

73 
u32
 
mv0198Aµ5_shaveRun
[];

74 
u32
 
mv0198Aµ6_shaveRun
[];

75 
u32
 
mv0198Aµ7_shaveRun
[];

76 
u32
 
mv0198Aµ8_shaveRun
[];

77 
u32
 
mv0198Aµ9_shaveRun
[];

79 
u32
* 
	gshavesE¡ryRun
[10] =

81 
mv0198Aµ0_shaveRun
,

82 
mv0198Aµ1_shaveRun
,

83 
mv0198Aµ2_shaveRun
,

84 
mv0198Aµ3_shaveRun
,

85 
mv0198Aµ4_shaveRun
,

86 
mv0198Aµ5_shaveRun
,

87 
mv0198Aµ6_shaveRun
,

88 
mv0198Aµ7_shaveRun
,

89 
mv0198Aµ8_shaveRun
,

90 
mv0198Aµ9_shaveRun
,

93 
u8
 
‰ameLoˇti⁄
;

104 
	$¥o˚ssImage
(
u8
 *
öputFøme
, u8 *
ouçutFøme
)

106 
shaveP¨tHeight
 = 
FRAME_HEIGHT
 / 
SHAVES_USED
;

107 
i
;

109 
	`DrvTimîSÀïMs
(100);

112 
	`DrvC¥Tu∫OnShaveMask
(
SHAVE_0_CLK
);

114 
	`swcRe£tShave
(
SHAVE_0
);

115 
	`swcSëAbsﬁuãDeÁu…Sèck
(
SHAVE_0
);

117 
	`swcSèπShaveCC
(
SHAVE_0
, (
u32
Ë
shavesE¡ryRun
[SHAVE_0], "iiii", &
öputFøme
[0 * 
shaveP¨tHeight
 * 
FRAME_WIDTH
],

118 &
ouçutFøme
[0 * 
shaveP¨tHeight
 * 
FRAME_WIDTH
], FRAME_WIDTH, shavePartHeight);

119 
	`swcWaôShave
(
SHAVE_0
);

121 
	`DrvShaveL2CacheP¨tôi⁄FlushAndInvÆid©e
(
PARTITION_0
);

122 
	`DrvSvutSt›
(
SHAVE_0
);

123 
	`DrvC¥Tu∫OffShaveMask
(
SHAVE_0_CLK
);

126 
	`DrvTimîSÀïMs
(100);

129 
	`DrvC¥Tu∫OnShaveMask
(
SHAVES_1_3_CLK
);

131 
i
 = 
SHAVE_1
; i <
SHAVE_3
; i++)

133 
	`swcRe£tShave
(
i
);

134 
	`swcSëAbsﬁuãDeÁu…Sèck
(
i
);

137 
	`swcSèπShaveCC
(
SHAVE_1
, (
u32
Ë
shavesE¡ryRun
[ SHAVE_1], "iiii", &
öputFøme
[1 * 
shaveP¨tHeight
 * 
FRAME_WIDTH
],

138 &
ouçutFøme
[1 * 
shaveP¨tHeight
 * 
FRAME_WIDTH
], FRAME_WIDTH, shavePartHeight);

139 
	`swcSèπShaveCC
(
SHAVE_2
, (
u32
Ë
shavesE¡ryRun
[ SHAVE_2], "iiii", &
öputFøme
[2 * 
shaveP¨tHeight
 * 
FRAME_WIDTH
],

140 &
ouçutFøme
[2 * 
shaveP¨tHeight
 * 
FRAME_WIDTH
], FRAME_WIDTH, shavePartHeight);

141 
	`swcSèπShaveCC
(
SHAVE_3
, (
u32
Ë
shavesE¡ryRun
[ SHAVE_3], "iiii", &
öputFøme
[3 * 
shaveP¨tHeight
 * 
FRAME_WIDTH
],

142 &
ouçutFøme
[3 * 
shaveP¨tHeight
 * 
FRAME_WIDTH
], FRAME_WIDTH, shavePartHeight);

144 
	`swcWaôShave
(
SHAVE_1
);

145 
	`swcWaôShave
(
SHAVE_2
);

146 
	`swcWaôShave
(
SHAVE_3
);

148 
	`DrvShaveL2CacheP¨tôi⁄FlushAndInvÆid©e
(
PARTITION_0
);

149 
i
 = 
SHAVE_1
; i <
SHAVE_3
; i++)

151 
	`DrvSvutSt›
(
i
);

154 
	`DrvC¥Tu∫OffShaveMask
(
SHAVES_1_3_CLK
);

155 
	`DrvTimîSÀïMs
(100);

158 
	`DrvC¥Tu∫OnShaveMask
(
SHAVES_4_9_CLK
);

159 
i
 = 
SHAVE_4
; i <
SHAVE_9
; i++)

161 
	`swcRe£tShave
(
i
);

162 
	`swcSëAbsﬁuãDeÁu…Sèck
(
i
);

165 
	`swcSèπShaveCC
(
SHAVE_4
, (
u32
Ë
shavesE¡ryRun
[ SHAVE_4], "iiii", &
öputFøme
[4 * 
shaveP¨tHeight
 * 
FRAME_WIDTH
],

166 &
ouçutFøme
[4 * 
shaveP¨tHeight
 * 
FRAME_WIDTH
], FRAME_WIDTH, shavePartHeight);

167 
	`swcSèπShaveCC
(
SHAVE_5
, (
u32
Ë
shavesE¡ryRun
[ SHAVE_5], "iiii", &
öputFøme
[5 * 
shaveP¨tHeight
 * 
FRAME_WIDTH
],

168 &
ouçutFøme
[5 * 
shaveP¨tHeight
 * 
FRAME_WIDTH
], FRAME_WIDTH, shavePartHeight);

169 
	`swcSèπShaveCC
(
SHAVE_6
, (
u32
Ë
shavesE¡ryRun
[ SHAVE_6], "iiii", &
öputFøme
[6 * 
shaveP¨tHeight
 * 
FRAME_WIDTH
],

170 &
ouçutFøme
[6 * 
shaveP¨tHeight
 * 
FRAME_WIDTH
], FRAME_WIDTH, shavePartHeight);

171 
	`swcSèπShaveCC
(
SHAVE_7
, (
u32
Ë
shavesE¡ryRun
[ SHAVE_7], "iiii", &
öputFøme
[7 * 
shaveP¨tHeight
 * 
FRAME_WIDTH
],

172 &
ouçutFøme
[7 * 
shaveP¨tHeight
 * 
FRAME_WIDTH
], FRAME_WIDTH, shavePartHeight);

173 
	`swcSèπShaveCC
(
SHAVE_8
, (
u32
Ë
shavesE¡ryRun
[ SHAVE_8], "iiii", &
öputFøme
[8 * 
shaveP¨tHeight
 * 
FRAME_WIDTH
],

174 &
ouçutFøme
[8 * 
shaveP¨tHeight
 * 
FRAME_WIDTH
], FRAME_WIDTH, shavePartHeight);

175 
	`swcSèπShaveCC
(
SHAVE_9
, (
u32
Ë
shavesE¡ryRun
[ SHAVE_9], "iiii", &
öputFøme
[9 * 
shaveP¨tHeight
 * 
FRAME_WIDTH
],

176 &
ouçutFøme
[9 * 
shaveP¨tHeight
 * 
FRAME_WIDTH
], FRAME_WIDTH, shaveP¨tHeighà- 
PADDING_SIZE
);

181 
	`swcWaôShave
(
SHAVE_4
);

182 
	`swcWaôShave
(
SHAVE_5
);

183 
	`swcWaôShave
(
SHAVE_6
);

184 
	`swcWaôShave
(
SHAVE_7
);

185 
	`swcWaôShave
(
SHAVE_8
);

186 
	`swcWaôShave
(
SHAVE_9
);

188 
	`DrvShaveL2CacheP¨tôi⁄FlushAndInvÆid©e
(
PARTITION_0
);

189 
i
 = 
SHAVE_4
; i <
SHAVE_9
; i++) {

190 
	`DrvSvutSt›
(
i
);

193 
	`DrvC¥Tu∫OffShaveMask
(
SHAVES_4_9_CLK
);

194 
	`DrvTimîSÀïMs
(100);

195 
	}
}

196 
	$addPaddög
(
u8
* 
‰ame
)

198 
s32
 
i
;

200 
i
 = 0; i < 
FRAME_WIDTH
; i++)

202 *(
‰ame
+
i
) = 0x00;

205 
i
 = 0; i < 
FRAME_WIDTH
; i++)

207 *(
‰ame
+
i
+ 
FRAME_WIDTH
* ( 
FRAME_HEIGHT
-2) )= 0X00;

209 
	}
}

210 
	$maö
()

212 
u8
 *
öput
;

213 
s32
 
bﬂrdSètus
;

215 
	`öôClocksAndMem‹y
();

216 #ifde‡
MV0212


217 
öt32_t
 
rc
;

218 
uöt32_t
 
ªv
;

219 
BﬂrdI2CInfo
 
öfo
[
NUM_I2C_DEVS
];

220 
BﬂrdC⁄figDesc
 
c⁄fig
[] =

223 
BRDCONFIG_GPIO
,

225 (*)
brdMV0182R5GpioCfgDeÁu…


228 
BRDCONFIG_END
,

229 
NULL


233 
rc
 = 
	`BﬂrdInô
(
c⁄fig
);

234 i‡(
rc
!=
BRDCONFIG_SUCCESS
)

236 
	`¥ötf
("Error: board initialization failed with %ld status\n",

237 
rc
);

238  
rc
;

241 
rc
 = 
	`BﬂrdGëPCBRevisi⁄
(&
ªv
);

242 i‡(
rc
!=
BRDCONFIG_SUCCESS
)

244 
	`¥ötf
("Error: board configurationÑead failed with %ld status\n",

245 
rc
);

246  
rc
;

248 
	`¥ötf
("Bﬂrd Mv0212 inôülized,Ñevisi⁄ = %lu \n", 
ªv
);

250 
bﬂrdSètus
 = 
	`BﬂrdInôExtPŒ
(
EXT_PLL_CFG_148_24_24MHZ
);

251 i‡(
bﬂrdSètus
 !
BRDCONFIG_SUCCESS
)

253 
	`¥ötf
("Error: board initialization failed with %ld status\n",

254 
bﬂrdSètus
);

258 
rc
 = 
	`BﬂrdGëI2CInfo
(
öfo
, 
NUM_I2C_DEVS
);

259 i‡(
rc
!=
BRDCONFIG_SUCCESS
)

261 
	`¥ötf
("Eº‹: bﬂrd c⁄figuøti⁄Ñód faûed wôh %ld sètus\n",
rc
);

262  
rc
;

265 
i2c2Bus
 = 
öfo
[2].
h™dÀr
;

266 #ñi‡
	`deföed
(
MV0182
)

267 
bﬂrdSètus
 = 
	`BﬂrdInôüli£
(
EXT_PLL_CFG_148_24_24MHZ
);

268 
i2c2Bus
 = 
gAµDevHndls
.
i2c2H™dÀ
;

269 i‡(
bﬂrdSètus
 !
B_SUCCESS
)

271 
	`¥ötf
("Error: board initialization failed with %ld status\n",

272 
bﬂrdSètus
);

277 
	`DrvC¥Tu∫OffShaveMask
(0xFFF);

280 
	`DrvLe⁄RTSig«lBoŸCom∂ëed
();

282 
öput
 = (
u8
*)((
u32
)&
‰ameLoˇti⁄
 );

284 
	`¥o˚ssImage
(
öput
,&
ouçutFømeLoˇti⁄
[0+
FRAME_WIDTH
]);

286 
	`DrvLe⁄RTSig«lSt›
();

288 
	`addPaddög
(
ouçutFømeLoˇti⁄
);

290 
	`ßveMem‹yToFûe
((
u32
)
ouçutFømeLoˇti⁄
, 
FRAME_WIDTH
 * 
FRAME_HEIGHT
, "output/output_image_1280x720_u8.raw");

291 
	`¥ötf
("FinishÅo download image\n");

292 
	`exô
(0);

293 
	}
}

	@HowTo/MV0198PowerMeasure/shave/shave.c

13 
	~<swcCdma.h
>

14 
	~<swcWhoAmI.h
>

15 
	~"shave.h
"

16 
	~"mv_ty≥s.h
"

17 
	~<swcWhoAmI.h
>

18 
	~<svuComm⁄Shave.h
>

19 
	~<swcCdma.h
>

23 
	#DDR_DATA
 
	`__©åibuã__
((
	`£˘i⁄
(".ddr.d©a")))

	)

24 
	#ENTRYPOINT
 "C"

	)

25 
	#DMA_DESCRIPTORS
 
	`__©åibuã__
((
	`£˘i⁄
(".cmx.cdmaDes¸ùt‹s")))

	)

26 
	#KERNEL_NR_LINES
 3

	)

27 
	#MAX_LINE_WIDTH
 4096

	)

31 
mvcvDû©e3x3
(
u8
** 
§c
, u8** 
d°
, u8** 
kî√l
, 
u32
 
width
);

35 
dmaTønß˘i⁄Li°_t
 
DMA_DESCRIPTORS
 
	gèsk1
, 
	gèsk2
, 
	gèsk3
, 
	gèsk4
;

36 
dmaTønß˘i⁄Li°_t
 *
	gªf1
, *
	gªf2
, *
	gªf3
, *
	gªf4
;

44 
	$shaveRun
(
u8
 *
öputImage
, u8 *
ouçutImage
, 
u32
 
width
, u32 
height
)

46 
u8
 *
öAddªss
;

47 
u8
 *
outAddªss
;

48 
u32
 
id1
;

49 
u8
* 
öput
[
KERNEL_NR_LINES
];

50 
u8
* 
ouçut
[1];

51 
u32
 
löe
;

52 
u8
 
m©rix
[3][3]= { {1, 1, 1}, {1, 1, 1}, {1, 1, 1}};

53 
u8
 
buf„ªdInLöeA
[
MAX_LINE_WIDTH
*
KERNEL_NR_LINES
];

54 
u8
 
buf„ªdInLöeB
[
MAX_LINE_WIDTH
];

56 
u8
** 
kî√lDû©e
;

57 
u8
* 
kî√lLöeDû©e
[3];

58 
u8
 
ödex
;

60 
id1
 = 
	`dmaInôReque°î
(1);

62 
löe
 = 0;Üöê< 
height
;Üine++)

64 
öAddªss
 = (
u8
*Ë((
u32
Ë
öputImage
 + 
löe
 * 
width
);

65 
outAddªss
 = (
u8
*Ë((
u32
Ë
ouçutImage
 + 
löe
 * 
width
);

67 
ªf1
 = 
	`dmaCª©eTønß˘i⁄
(
id1
, &
èsk1
, (
öAddªss
 + 0*
width
), &
buf„ªdInLöeA
[0 * 
MAX_LINE_WIDTH
], width);

68 
	`dmaSèπLi°Task
(
ªf1
);

69 
	`dmaWaôTask
(
ªf1
);

71 
ªf2
 = 
	`dmaCª©eTønß˘i⁄
(
id1
, &
èsk2
, (
öAddªss
 + 1*
width
), &
buf„ªdInLöeA
[1 * 
MAX_LINE_WIDTH
], width);

72 
	`dmaSèπLi°Task
(
ªf2
);

73 
	`dmaWaôTask
(
ªf2
);

75 
ªf3
 = 
	`dmaCª©eTønß˘i⁄
(
id1
, &
èsk3
, (
öAddªss
 + 2*
width
), &
buf„ªdInLöeA
[2 * 
MAX_LINE_WIDTH
], width);

76 
	`dmaSèπLi°Task
(
ªf3
);

77 
	`dmaWaôTask
(
ªf3
);

80 
öput
[0] = &
buf„ªdInLöeA
[(0)*
MAX_LINE_WIDTH
];

81 
öput
[1] = &
buf„ªdInLöeA
[(1)*
MAX_LINE_WIDTH
];

82 
öput
[2] = &
buf„ªdInLöeA
[(2)*
MAX_LINE_WIDTH
];

84 
ouçut
[0]=&
buf„ªdInLöeB
[0];

86  
ödex
 = 0;ödex < 
KERNEL_NR_LINES
; index++)

88 
kî√lLöeDû©e
[
ödex
] = 
m©rix
[index];

91 
kî√lDû©e
 = (
u8
**)
kî√lLöeDû©e
;

93 
	`mvcvDû©e3x3
(
öput
,
ouçut
, 
kî√lDû©e
, 
width
);

95 
ªf4
 = 
	`dmaCª©eTønß˘i⁄
(
id1
, &
èsk4
, &
buf„ªdInLöeB
[0], 
outAddªss
, 
width
);

96 
	`dmaSèπLi°Task
(
ªf4
);

97 
	`dmaWaôTask
(
ªf4
);

99 
SHAVE_HALT
;

100 
	}
}

	@HowTo/MV0198PowerMeasure/shave/shave.h

9 #i‚de‡
SHAVE_H


10 
	#SHAVE_H


	)

13 
	~<mv_ty≥s.h
>

21 
shaveRun
(
u8
* 
öputImage
, u8 *
ouçutImage
, 
u32
 
width
, u32 
height
);

	@HowTo/SampleProfilerExample/leon/app_config.h

10 #i‚de‡
_APP_CONFIG_H_


11 
	#_APP_CONFIG_H_


	)

13 
	#L2CACHE_CFG
 (
SHAVE_L2CACHE_NORMAL_MODE
)

	)

15 
	#DEFAULT_APP_CLOCK_KHZ
 300000

	)

16 
	#DEFAULT_OSC_CLOCK_KHZ
 12000

	)

18 #i‡
deföed
(
__RTEMS__
)

20 
	~<πems/b•Io.h
>

21 
	~"ÁèlExãnsi⁄.h
"

23 #i‡!
deföed
 (
__CONFIG__
)

24 
	#__CONFIG__


	)

27 
	#CONFIGURE_INIT


	)

29 #i‚de‡
RTEMS_POSIX_API


30 
	#RTEMS_POSIX_API


	)

33 
	#CONFIGURE_MICROSECONDS_PER_TICK
 100

	)

35 
	#CONFIGURE_TICKS_PER_TIMESLICE
 10

	)

37 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

38 
	#CONFIGURE_APPLICATION_NEEDS_CLOCK_DRIVER


	)

40 
	#CONFIGURE_MINIMUM_TASK_STACK_SIZE
 4096

	)

41 
	#CONFIGURE_MAXIMUM_TASKS
 4

	)

43 
	#CONFIGURE_RTEMS_INIT_TASKS_TABLE


	)

44 
	#CONFIGURE_EXTRA_TASK_STACKS
 (5 * 
RTEMS_MINIMUM_STACK_SIZE
)

	)

46 
	#CONFIGURE_MAXIMUM_TIMERS
 4

	)

48 
	#CONFIGURE_MAXIMUM_MUTEXES
 4

	)

49 
	#CONFIGURE_MAXIMUM_SEMAPHORES
 4

	)

53 
	#CONFIGURE_MAXIMUM_USER_EXTENSIONS
 1

	)

54 
	#CONFIGURE_INITIAL_EXTENSIONS
 { .
Áèl
 = 
F©Æ_exãnsi⁄
 }

	)

57 *
POSIX_Inô
 (*
¨gs
);

59 
	~<πems/c⁄fdefs.h
>

	@HowTo/SampleProfilerExample/leon/init.c

11 
	~<°dio.h
>

12 
	~<πems.h
>

13 
	~<b•.h
>

14 
	~"OsDrvC¥.h
"

15 
	~"OsDrvSvu.h
"

16 
	~"sy°em.h
"

17 
	~"≠p_c⁄fig.h
"

18 
	~<DrvLe⁄.h
>

19 
	~<UnôTe°Api.h
>

20 
	~"DrvDdr.h
"

21 
	~<DrvShaveL2Cache.h
>

23 
	#EXTRACLOCKS
 (
DEV_MSS_APB_SLV
 | \

24 
DEV_MSS_APB2_CTRL
 | \

25 
DEV_MSS_RTBRIDGE
 | \

26 
DEV_MSS_RTAHB_CTRL
 | \

27 
DEV_MSS_LRT
 | \

28 
DEV_MSS_LRT_DSU
 | \

29 
DEV_MSS_LRT_L2C
 | \

30 
DEV_MSS_LRT_ICB
 | \

31 
DEV_MSS_AXI_BRIDGE
 | \

32 
DEV_MSS_MXI_CTRL
 )

	)

33 
	#APP_CSS_DSS_CLOCKS
 ( 
DEV_CSS_LOS
 | \

34 
DEV_CSS_LAHB_CTRL
 | \

35 
DEV_CSS_APB4_CTRL
 | \

36 
DEV_CSS_CPR
 | \

37 
DEV_CSS_LOS_L2C
 | \

38 
DEV_CSS_LOS_ICB
 | \

39 
DEV_CSS_GPIO
 | \

40 
DEV_CSS_JTAG
 | \

41 
DEV_CSS_UART
 | \

42 
DEV_CSS_MSS_MAS
 | \

43 
DEV_CSS_UPA_MAS
 | \

44 
DEV_CSS_LOS_DSU
 | \

45 
DEV_CSS_AON
 )

	)

47 
	#APP_MSS_CLOCKS
 ( 
DEV_MSS_SIPP
 | \

48 
DEV_MSS_AMC
 | \

49 
DEV_MSS_LRT
 | \

50 
DEV_MSS_LRT_DSU
 | \

51 
DEV_MSS_LRT_L2C
 | \

52 
DEV_MSS_LRT_ICB
 )

	)

57 
BSP_SET_CLOCK
(
DEFAULT_OSC_CLOCK_KHZ
, 300000, 1, 1,

58 
DEFAULT_RTEMS_CSS_LOS_CLOCKS
, 
DEFAULT_RTEMS_MSS_LRT_CLOCKS
 | 
EXTRACLOCKS
 |

59 
DEV_CSS_LOS_DSU
|
DEV_CSS_LOS_TIM
|
DEV_CSS_MSS_MAS
,

60 
APP_UPA_CLOCKS
,0,0);

63 
BSP_SET_L2C_CONFIG
(0, 
DEFAULT_RTEMS_L2C_REPLACEMENT_POLICY
, 
DEFAULT_RTEMS_L2C_LOCKED_WAYS
,
DEFAULT_RTEMS_L2C_MODE
, 0, 0);

67 
πems_id
 
	göôId
;

70 
u32
 
Ãt_°¨t
;

80 
πems_èsk
 
	$Inô
(
πems_èsk_¨gumít
 
¨gumít
)

82 (Ë
¨gumít
;

84 
πems_«me
 
èsk_«me
;

85 
πems_°©us_code
 
°©us
;

86 
πems_id
 
èsk_id
;

87 
u32
 
evítsOut
;

89 
	`¥ötf
("StartingÖrofilerÉxample...\n");

91 
	`unôTe°Inô
();

92 
	`DrvC¥Inô
();

93 
	`DrvDdrInôüli£
(
NULL
);

94 
öôId
 = 
	`πems_èsk_£lf
();

96 
°©us
 = 
	`OsDrvSvuInô
();

97 if(
°©us
 != 0)

98 
	`¥ötf
("Eº‹ SVU inô, sètu†%u!0\n",
°©us
);

102 
èsk_«me
 = 
	`πems_buûd_«me
( 'S', 'H', 'V', '0' );

105 
°©us
 = 
	`πems_èsk_¸óã
(

106 
èsk_«me
, 1, 
RTEMS_MINIMUM_STACK_SIZE
 * 2,

107 
RTEMS_DEFAULT_MODES
,

108 
RTEMS_DEFAULT_ATTRIBUTES
, &
èsk_id
);

111 
°©us
 = 
	`πems_èsk_°¨t
(
èsk_id
, 
SVU_èsk1
, 1);

114 
	`πems_evít_ª˚ive
(
	`TASK
(1), 
RTEMS_WAIT
|
RTEMS_EVENT_ALL
, 
RTEMS_NO_TIMEOUT
, &
evítsOut
);

117 
	`¥ötf
("Starting LRT..\n");

118 
	`DrvLe⁄RTSèπup
((
u32
)&
Ãt_°¨t
);

121 
	`DrvLe⁄RTWaôExecuti⁄
();

122 
	`¥ötf
("LRT stoped. LOSÉxiting...\n");

125 
	`¥ötf
("SampleÖrofilerÉxampleÉxecuted successfully\n");

127 
	`DrvSvuFlushInvÆid©eL1D©aCache
(0, 12, 
SVUL1DATACACHE_FLUSH_INVALIDATE_ALL
);

128 
s
=0; s<12; s++Ë
	`DrvShaveL2CacheP¨tôi⁄FlushAndInvÆid©e
(s%
MAX_SHAVE_L2C_PARTITIONS
);

129 
	`unôTe°FöÆRï‹t
();

131 
	`πems_shutdown_executive
(0);

132 
	}
}

	@HowTo/SampleProfilerExample/leon/system.h

16 #i‚de‡
_SYS_H


17 
	#_SYS_H


	)

19 
	~<πems.h
>

20 
	~<öây≥s.h
>

23 #ifde‡
__˝lu•lus


27 
	#APP_UPA_CLOCKS
 ( (1 << 
UPA_SH0
) | \

28 (1 << 
UPA_SH1
) | \

29 (1 << 
UPA_SH2
) | \

30 (1 << 
UPA_SH3
) | \

31 (1 << 
UPA_SH4
) | \

32 (1 << 
UPA_SH5
) | \

33 (1 << 
UPA_SH6
) | \

34 (1 << 
UPA_SH7
) | \

35 (1 << 
UPA_SH8
) | \

36 (1 << 
UPA_SH9
) | \

37 (1 << 
UPA_SH10
) | \

38 (1 << 
UPA_SH11
) | \

39 (1 << 
UPA_SHAVE_L2
) | \

40 (1 << 
UPA_CDMA
) | \

41 (1 << 
UPA_CTRL
Ë)

	)

45 
πems_èsk
 
Inô
(
πems_èsk_¨gumít
 
¨gumít
);

47 
πems_èsk
 
SVU_èsk1
(
πems_èsk_¨gumít
 
¨gumít
);

50 
πems_id
 
öôId
;

56 
	#TASK
(
i
Ë(1 << (31 - (i)))

	)

62 #ifde‡
__˝lu•lus


	@HowTo/SampleProfilerExample/leon/tasks.c

11 
	~"sy°em.h
"

12 
	~<°dio.h
>

13 
	~"OsDrvSvu.h
"

17 
	#NUMBER_OF_SHAVES
 8

	)

18 
	#WAIT_FOR_ONE_SHAVE
 1

	)

22 
•Exam∂e0_¥ofûe
;

23 
•Exam∂e1_¥ofûe
;

24 
•Exam∂e2_¥ofûe
;

25 
•Exam∂e3_¥ofûe
;

26 
•Exam∂e4_¥ofûe
;

27 
•Exam∂e5_¥ofûe
;

28 
•Exam∂e6_¥ofûe
;

29 
•Exam∂e7_¥ofûe
;

31 
u32
 
	gíåypoöts
[] =

33 (
u32
)&
•Exam∂e0_¥ofûe
,

34 (
u32
)&
•Exam∂e1_¥ofûe
,

35 (
u32
)&
•Exam∂e2_¥ofûe
,

36 (
u32
)&
•Exam∂e3_¥ofûe
,

37 (
u32
)&
•Exam∂e4_¥ofûe
,

38 (
u32
)&
•Exam∂e5_¥ofûe
,

39 (
u32
)&
•Exam∂e6_¥ofûe
,

40 (
u32
)&
•Exam∂e7_¥ofûe
,

45 
swcShaveUnô_t
 
	gSHAVE_NUMBER
[
NUMBER_OF_SHAVES
] = {0, 1, 2, 3, 4, 5, 6, 7};

46 
osDrvSvuH™dÀr_t
 
	gh™dÀr
[
NUMBER_OF_SHAVES
];

54 
πems_èsk
 
	$SVU_èsk1
(
πems_èsk_¨gumít
 
unu£d
)

56 
	`UNUSED
(
unu£d
);

58 
u32
 
°©us
;

59 
u32
 
shaveIndex
;

60 
u32
 
ru¬ög
;

61 
shaveIndex
 = 0; shaveIndex < 
NUMBER_OF_SHAVES
; shaveIndex++)

63 
°©us
 = 
	`OsDrvSvuO≥nShave
(&
h™dÀr
[
shaveIndex
], 
SHAVE_NUMBER
[shaveIndex],
OS_MYR_PROTECTION_SEM
);

64 i‡–
°©us
 =
OS_MYR_DRV_SUCCESS
)

66 
°©us
 = 
	`OsDrvSvuRe£tShave
(&
h™dÀr
[
shaveIndex
]);

67 if(
°©us
 !
OS_MYR_DRV_SUCCESS
)

68 
	`¥ötf
("C™nŸÑe£àshavê%lu, sètu†%lu \n", 
SHAVE_NUMBER
[
shaveIndex
],
°©us
);

70 
°©us
 = 
	`OsDrvSvuSëAbsﬁuãDeÁu…Sèck
(&
h™dÀr
[
shaveIndex
]);

71 if(
°©us
 !
OS_MYR_DRV_SUCCESS
)

72 
	`¥ötf
("C™nŸ së sèck shavê%lu, sètu†%lu \n", 
SHAVE_NUMBER
[
shaveIndex
],
°©us
);

74 
	`¥ötf
("Sèπög shavê%lu from LOSÑãm†èsk...\n", 
SHAVE_NUMBER
[
shaveIndex
]);

75 
°©us
 = 
	`OsDrvSvuSèπShave
(&
h™dÀr
[
shaveIndex
], 
íåypoöts
[shaveIndex]);

76 if(
°©us
 !
OS_MYR_DRV_SUCCESS
)

77 
	`¥ötf
("C™nŸ sèπ shavê%lu, sètu†%lu \n", 
SHAVE_NUMBER
[
shaveIndex
],
°©us
);

79 
°©us
 = 
	`OsDrvSvuWaôShaves
(
WAIT_FOR_ONE_SHAVE
, &
h™dÀr
[
shaveIndex
], 
OS_DRV_SVU_WAIT_FOREVER
, &
ru¬ög
);

80 if(
°©us
 !
OS_MYR_DRV_SUCCESS
)

81 
	`¥ötf
("C™nŸ waô shavê%lu, sètu†%lu \n", 
SHAVE_NUMBER
[
shaveIndex
],
°©us
);

83 
°©us
 = 
	`OsDrvSvuClo£Shave
(&
h™dÀr
[
shaveIndex
]);

84 
	`¥ötf
("Shavê%luÉxecuti⁄ föished i¿LOSÑãm†èsk.\n", 
SHAVE_NUMBER
[
shaveIndex
]);

86 if(
°©us
 !
OS_MYR_DRV_SUCCESS
)

87 
	`¥ötf
("C™nŸ clo£ shavê%lu, sètu†%lu \n", 
SHAVE_NUMBER
[
shaveIndex
],
°©us
);

91 
	`¥ötf
("C™nŸ o≥¿shavê%lu, sètu†%lu \n", 
SHAVE_NUMBER
[
shaveIndex
],
°©us
);

94 
	`πems_evít_£nd
(
öôId
, 
	`TASK
(1));

95 
	`πems_èsk_dñëe
(
RTEMS_SELF
);

96 
	}
}

	@HowTo/SampleProfilerExample/leon_rt/app_config.c

11 
	~<DrvC¥.h
>

12 
	~<DrvDdr.h
>

13 
	~<DrvShaveL2Cache.h
>

14 
	~"≠p_c⁄fig.h
"

18 
	#L2CACHE_CFG
 (
SHAVE_L2CACHE_NORMAL_MODE
)

	)

31 
	$öôClocksAndMem‹y
()

33 
s32
 
sc
;

34 
	`DrvC¥SysDevi˚A˘i⁄
(
UPA_DOMAIN
, 
ASSERT_RESET
, -1);

35 
	`DrvC¥SysDevi˚A˘i⁄
(
UPA_DOMAIN
, 
DEASSERT_RESET
,-1);

36 
	`DrvC¥Inô
();

38 
	`DrvC¥InôClocks
(12000, 0, 0, 0, 0);

45 
sc
 = 
	`DrvShaveL2CacheSëMode
(
L2CACHE_CFG
);

46 if(
sc
)

47  
sc
;

50 
	`DrvShaveL2CacheSëupP¨tôi⁄
(
SHAVEPART256KB
);

53 
sc
 = 
	`DrvShaveL2CacheAŒoˇãSëP¨tôi⁄s
();

54 if(
sc
)

55  
sc
;

58 
i
 = 0; i < 
SHAVES_USED
; i++)

60 
	`DrvShaveL2CacheSëLSUP¨tId
(
i
, 
PARTITION_0
);

63 
	`DrvShaveL2CacheP¨tôi⁄InvÆid©e
(
PARTITION_0
);

65 
	}
}

	@HowTo/SampleProfilerExample/leon_rt/app_config.h

9 #i‚de‡
_APP_CONFIG_H_


10 
	#_APP_CONFIG_H_


	)

12 
	~<mv_ty≥s.h
>

14 
	#SHAVES_USED
 (12)

	)

15 
	#PARTITION_0
 (0)

	)

20 
öôClocksAndMem‹y
();

	@HowTo/SampleProfilerExample/leon_rt/main.c

12 
	~<°dio.h
>

13 
	~"DrvTimî.h
"

14 
	~"DrvSvu.h
"

15 
	~"≠p_c⁄fig.h
"

16 
	~<DrvLe⁄.h
>

20 
	#SHAVE_4
 4

	)

21 
	#SHAVE_12
 12

	)

22 
	#SHAVES_NUMBER
 8

	)

28 
u32
 
•Exam∂e4_¥ofûe
[];

29 
u32
 
•Exam∂e5_¥ofûe
[];

30 
u32
 
•Exam∂e6_¥ofûe
[];

31 
u32
 
•Exam∂e7_¥ofûe
[];

32 
u32
 
•Exam∂e8_¥ofûe
[];

33 
u32
 
•Exam∂e9_¥ofûe
[];

34 
u32
 
•Exam∂e10_¥ofûe
[];

35 
u32
 
•Exam∂e11_¥ofûe
[];

37 
u32
* 
	gshavesE¡ry
[
SHAVES_NUMBER
] =

39 
•Exam∂e4_¥ofûe
,

40 
•Exam∂e5_¥ofûe
,

41 
•Exam∂e6_¥ofûe
,

42 
•Exam∂e7_¥ofûe
,

43 
•Exam∂e8_¥ofûe
,

44 
•Exam∂e9_¥ofûe
,

45 
•Exam∂e10_¥ofûe
,

46 
•Exam∂e11_¥ofûe


55 
	$maö
()

57 
u32
 
shaveIndex
;

60 
	`öôClocksAndMem‹y
();

61 
	`DrvTimîInô
();

63 
	`¥ötf
("LRT started..\n");

65 
shaveIndex
 = 
SHAVE_4
; shaveIndex < 
SHAVE_12
; shaveIndex++)

67 
	`¥ötf
("Sèπög Shavê%lu..\n", 
shaveIndex
);

68 
	`swcRe£tShave
(
shaveIndex
);

69 
	`swcSëAbsﬁuãDeÁu…Sèck
(
shaveIndex
);

72 
	`swcSèπShave
(
shaveIndex
,(
u32
)
shavesE¡ry
[shaveIndex-
SHAVE_4
]);

76 
	`swcWaôShave
(
shaveIndex
);

77 
	`¥ötf
("Shavê%lu föished.\n", 
shaveIndex
);

80 
	`DrvLe⁄RTSig«lSt›
();

82 
	}
}

	@HowTo/SampleProfilerExample/shave/config.h

2 
	#LOOP_BASE
 (666 * 13)

	)

3 
	#MAX_FUNC_CNT
 (16)

	)

4 
	#LOOP_LENGTH_FUNC0
(
n
Ë((
MAX_FUNC_CNT
-n)*(
LOOP_BASE
))

	)

5 
	#LOOP_LENGTH_FUNC
(
n
Ë(
	`LOOP_LENGTH_FUNC0
“Ë+ LOOP_LENGTH_FUNC0“+1))

	)

	@HowTo/SampleProfilerExample/shave/init.c

9 
	~<°dio.h
>

10 
	~<°dlib.h
>

11 
	~<m©h.h
>

12 
	~<svuComm⁄Shave.h
>

13 
	~<c⁄fig.h
>

15 vﬁ©ûê
	g˙t
 = 0;

17 
ölöe
 
__©åibuã__
((
Æways_ölöe
)Ë
	$lo›In¸emít
(vﬁ©ûê
cou¡
) {

18 vﬁ©ûê
x
=0; x<
cou¡
; x++) {

19 
asm
 volatile("" : : : "memory");

20 
˙t
++;

22 
	}
}

24 
__©åibuã__
 ((
noölöe
)Ë
	$func1
()

26 
	`lo›In¸emít
(
	`LOOP_LENGTH_FUNC
(1));

28 
	}
}

29 
__©åibuã__
 ((
noölöe
)Ë
	$func2
()

31 
	`lo›In¸emít
(
	`LOOP_LENGTH_FUNC
(2));

33 
	}
}

34 
__©åibuã__
 ((
noölöe
)Ë
	$func3
()

36 
	`lo›In¸emít
(
	`LOOP_LENGTH_FUNC
(3));

38 
	}
}

39 
__©åibuã__
 ((
noölöe
)Ë
	$func4
()

41 
	`lo›In¸emít
(
	`LOOP_LENGTH_FUNC
(4));

43 
	}
}

44 
__©åibuã__
 ((
noölöe
)Ë
	$func5
()

46 
	`lo›In¸emít
(
	`LOOP_LENGTH_FUNC
(5));

48 
	}
}

49 
__©åibuã__
 ((
noölöe
)Ë
	$func6
()

51 
	`lo›In¸emít
(
	`LOOP_LENGTH_FUNC
(6));

53 
	}
}

54 
__©åibuã__
 ((
noölöe
)Ë
	$func7
()

56 
	`lo›In¸emít
(
	`LOOP_LENGTH_FUNC
(7));

58 
	}
}

59 
__©åibuã__
 ((
noölöe
)Ë
	$func8
()

61 
	`lo›In¸emít
(
	`LOOP_LENGTH_FUNC
(8));

63 
	}
}

64 
__©åibuã__
 ((
noölöe
)Ë
	$func9
()

66 
	`lo›In¸emít
(
	`LOOP_LENGTH_FUNC
(9));

68 
	}
}

69 
__©åibuã__
 ((
noölöe
)Ë
	$func10
()

71 
	`lo›In¸emít
(
	`LOOP_LENGTH_FUNC
(10));

73 
	}
}

74 
__©åibuã__
 ((
noölöe
)Ë
	$func11
()

76 
	`lo›In¸emít
(
	`LOOP_LENGTH_FUNC
(11));

78 
	}
}

79 
__©åibuã__
 ((
noölöe
)Ë
	$func12
()

81 
	`lo›In¸emít
(
	`LOOP_LENGTH_FUNC
(12));

83 
	}
}

84 
__©åibuã__
 ((
noölöe
)Ë
	$func13
()

86 
	`lo›In¸emít
(
	`LOOP_LENGTH_FUNC
(13));

88 
	}
}

89 
__©åibuã__
 ((
noölöe
)Ë
	$func14
()

91 
	`lo›In¸emít
(
	`LOOP_LENGTH_FUNC
(14));

93 
	}
}

94 
__©åibuã__
 ((
noölöe
)Ë
	$func15
()

96 
	`lo›In¸emít
(
	`LOOP_LENGTH_FUNC
(15));

98 
	}
}

103 
	$¥ofûe
()

105 
	`¥ötf
("Hello from Shave\n");

107 
i
=0; i<10; i++){

108 
	`func1
();

109 
	`func2
();

110 
	`func3
();

111 
	`func4
();

112 
	`func5
();

113 
	`func6
();

114 
	`func7
();

115 
	`func8
();

116 
	`func9
();

117 
	`func10
();

118 
	`func11
();

119 
	`func12
();

120 
	`func13
();

121 
	`func14
();

122 
	`func15
();

125 
SHAVE_HALT
;

127 
	}
}

	@HowTo/SampleUnitTesting/sampleApp.c

1 
	~"ßm∂eAµ.h
"

3 
	$ßm∂eAµ
(*
ö
, 
width
, 
vÆue
, 
›î©i⁄
, 
pxToCh™ge
, *
out
)

5 
i
;

6 
aux
;

8 
›î©i⁄
)

12 
i
 = 0; i < 
pxToCh™ge
; i++)

14 
aux
 = ()
ö
[
i
] - ()
vÆue
;

15 if–
aux
 < 0)

16 
aux
 = 0;

17 
out
[
i
] = (Ë
aux
;

22 
i
 = 0; i < 
pxToCh™ge
; i++)

24 
aux
 = ()
ö
[
i
] + ()
vÆue
;

25 i‡–
aux
 > 255)

26 
aux
 = 255;

27 
out
[
i
] = (Ë
aux
;

33 
i
 = 
pxToCh™ge
; i < 
width
; i++)

34 
out
[
i
] = 
ö
[i];

35 
	}
}

	@HowTo/SampleUnitTesting/sampleApp.h

8 
ßm∂eAµ
 (*
ö
, 
width
, 
vÆue
, 
›î©i⁄
, 
pxToCh™ge
, *
out
);

9 
ßm∂eAµ_asm
 (*
ö
, 
width
, 
vÆue
, 
›î©i⁄
, 
pxToCh™ge
, *
out
);

	@HowTo/SampleUnitTesting/unittest/dummy/leon/app_config.c

12 
	~"≠p_c⁄fig.h
"

13 
	~"°dio.h
"

15 
	~<DrvC¥.h
>

16 
	~<DrvDdr.h
>

17 
	~<DrvRegUtûs.h
>

19 
	~<ªgi°îsMyrüd.h
>

20 
	~<DrvShaveL2Cache.h
>

21 
	~<DrvSvu.h
>

25 
	#L2CACHE_CFG
 (
SHAVE_L2CACHE_NORMAL_MODE
)

	)

26 
	#APP_UPA_CLOCKS
 (
DEV_UPA_SH0
 | \

27 
DEV_UPA_SHAVE_L2
 | \

28 
DEV_UPA_CDMA
 | \

29 
DEV_UPA_CTRL
 )

	)

31 
	#MSS_BASIC_CLOCKS
 (
DEV_MSS_APB_SLV
 | \

32 
DEV_MSS_APB2_CTRL
 | \

33 
DEV_MSS_RTBRIDGE
 | \

34 
DEV_MSS_RTAHB_CTRL
 | \

35 
DEV_MSS_LRT
 | \

36 
DEV_MSS_LRT_DSU
 | \

37 
DEV_MSS_LRT_L2C
 | \

38 
DEV_MSS_LRT_ICB
 | \

39 
DEV_MSS_AXI_BRIDGE
 | \

40 
DEV_MSS_MXI_CTRL
 | \

41 
DEV_MSS_MXI_DEFSLV
 | \

42 
DEV_MSS_AXI_MON
 | \

43 
DEV_MSS_AMC
 | \

44 
DEV_MSS_SIPP
 | \

45 
DEV_MSS_TIM
)

	)

49 
tyAuxClkDividîCfg
 
	g≠pAuxClkCfg
[] =

51 {
AUX_CLK_MASK_UART
, 
CLK_SRC_REFCLK0
, 96, 625},

58 
tySocClockC⁄fig
 
	g˛k_cfg_mvcv
 =

60 .
ªfClk0I≈utKhz
 = 12000,

61 .
	gªfClk1I≈utKhz
 = 0,

62 .
	gèrgëPŒ0FªqKhz
 = 480000,

63 .
	gèrgëPŒ1FªqKhz
 = 0,

64 .
	g˛kSrcPŒ1
 = 
CLK_SRC_REFCLK0
,

65 .
	gma°îClkDivNumî©‹
 = 1,

66 .
	gma°îClkDivDíomö©‹
 = 1,

67 .
	gcssDssClockE«bÀMask
 = 
DEFAULT_CORE_CSS_DSS_CLOCKS
,

68 .
	gmssClockE«bÀMask
 = 
MSS_BASIC_CLOCKS
,

69 .
	gu∑ClockE«bÀMask
 = 
APP_UPA_CLOCKS
,

70 .
	gpAuxClkCfg
 = 
≠pAuxClkCfg
,

82 
	$öôClocksAndMem‹y
()

84 
i
;

87 
	`DrvC¥Inô
();

88 
	`DrvC¥SèπAŒClocks
();

89 
	`DrvC¥SëupClocks
(&
˛k_cfg_mvcv
);

91 #ifde‡
INT_DDR


93 
	`DrvDdrInôüli£
(
NULL
);

96 
	`DrvShaveL2CacheSëMode
(
SHAVE_L2CACHE_NORMAL_MODE
);

98 
	`DrvShaveL2CacheCÀ¨P¨tôi⁄s
();

101 
	`DrvShaveL2CacheSëupP¨tôi⁄
(
SHAVEPART256KB
);

104 
	`DrvShaveL2CacheAŒoˇãSëP¨tôi⁄s
();

107 
i
 = 0; i < 
SHAVES_USED
; i++)

109 
	`DrvShaveL2CacheSëLSUP¨tId
(
i
, 
PARTITION_0
);

112 
	`DrvShaveL2CacheP¨tôi⁄InvÆid©e
(
PARTITION_0
);

115 #ifde‡
AUTOCHECK_ELF_FILE


117 
i
 = 0; i < 32; i++){

118 
	`DrvSvutIrfWrôe
(0, 
i
, 0xAAAAAAAA);

119 
	`DrvSvutVrfWrôe
(0, 
i
, 0, 0xAAAAAAAA);

120 
	`DrvSvutVrfWrôe
(0, 
i
, 1, 0xAAAAAAAA);

121 
	`DrvSvutVrfWrôe
(0, 
i
, 2, 0xAAAAAAAA);

122 
	`DrvSvutVrfWrôe
(0, 
i
, 3, 0xAAAAAAAA);

127 
	}
}

	@HowTo/SampleUnitTesting/unittest/dummy/leon/app_config.h

9 #i‚de‡
APP_CONFIG_H


10 
	#APP_CONFIG_H


	)

12 
	~"mv_ty≥s.h
"

14 
	#SHAVES_USED
 12

	)

16 #ifde‡
MYRIAD2


17 
CmxRamLayoutCfgTy≥
 
__cmx_c⁄fig
;

19 
u32
 
__cmx_c⁄fig
;

22 
u32
 
__l2_c⁄fig
 ;

27 
öôClocksAndMem‹y
();

32 #ifde‡
VCS_TESTING_DUMP_ELF


33 
	~<UnôTe°Api.h
>

34 
	~<VcsHooksApi.h
>

35 vﬁ©ûê
u32
 
vc°e°8_ßvedElf
;

36 
u32
 
vc°e°8_ƒOfCheckV¨übÀ
;

37 
u32
 
vc°e°8_SèπAddrPcBﬂrdLígth
;

38 
ölöe
 
	$∑r£AndCeckKî√ls
()

40 
u32
 
i
;

41 
u32
 *
°¨tAddrPcBﬂrdLígth
 = &
vc°e°8_SèπAddrPcBﬂrdLígth
;

42 
i
 = 0; i < 
vc°e°8_ƒOfCheckV¨übÀ
; i++)

44 
	`unôTe°MemCom∑ª
((*)
°¨tAddrPcBﬂrdLígth
[0],

45 (*)
°¨tAddrPcBﬂrdLígth
[1], startAddrPcBoardLength[2]);

46 
°¨tAddrPcBﬂrdLígth
 +=3;

48 
	}
}

49 
	#INIT_END_OF_CODE_AREEA
 vﬁ©ûê
u32
 
InôEndOfShaveCode
[4] 
	`__©åibuã__
((
	`£˘i⁄
(".shv8.S.öôRem"))Ë{0xdededede, 0xdededede, 0xdededede, 0xdededede};

	)

50 
	#AUTOCHECK_ELF_FILE
 
InôEndOfShaveCode
[0]; if(
vc°e°8_ßvedElf
) { \

51 
	`unôTe°Inô
();
	`∑r£AndCeckKî√ls
(); 
	`unôTe°FöÆRï‹t
();}

	)

53 
	#AUTOCHECK_ELF_FILE


	)

54 
	#INIT_END_OF_CODE_AREEA


	)

	@HowTo/SampleUnitTesting/unittest/dummy/leon/main.c

9 
	~<°dio.h
>

10 
	~<°dlib.h
>

11 
	~<°rög.h
>

12 
	~<mv_ty≥s.h
>

13 
	~<DrvC¥.h
>

14 
	~<swcShaveLﬂdî.h
>

15 
	~"≠p_c⁄fig.h
"

16 
	~<ªgi°îsMyrüd.h
>

17 
	~<DrvSvu.h
>

18 
	~<DrvTimî.h
>

19 
	~<swcTe°Utûs.h
>

20 
	~<swcLe⁄Utûs.h
>

21 #ifde‡
MYRIAD2


22 
	~<DrvLe⁄L2C.h
>

23 
	~<DrvShaveL2Cache.h
>

28 
	mFINISH
 = -2,

29 
	mSHAVE_ALL
 = -1,

30 
	mSHAVE0
 = 0,

31 
	mSHAVE1
,

32 
	mSHAVE2
,

33 
	mSHAVE3
,

34 
	mSHAVE4
,

35 
	mSHAVE5
,

36 
	mSHAVE6
,

37 
	mSHAVE7
,

38 
	mSHAVE8
,

39 
	mSHAVE9
,

40 
	mSHAVE10
,

41 
	mSHAVE11
,

42 
	mLEON_OS
,

43 
	mLEON_RT
,

44 
	mLEON
 = 
LEON_OS


45 } 
	tT¨gëToRun
;

48 
	#kî√lAµSV_E¡ryPoöt
 
dummy0_maö


	)

49 * (
kî√lAµSV_E¡ryPoöt
);

52 
u32
 
	gshavesE¡ryPoöt
[
SHAVES_USED
] =

54 (
u32
)&
kî√lAµSV_E¡ryPoöt
, (u32)&kernelAppSV_EntryPoint, (u32)&kernelAppSV_EntryPoint, (u32)&kernelAppSV_EntryPoint,

55 (
u32
)&
kî√lAµSV_E¡ryPoöt
, (u32)&kernelAppSV_EntryPoint, (u32)&kernelAppSV_EntryPoint, (u32)&kernelAppSV_EntryPoint,

56 (
u32
)&
kî√lAµSV_E¡ryPoöt
, (u32)&kernelAppSV_EntryPoint, (u32)&kernelAppSV_EntryPoint, (u32)&kernelAppSV_EntryPoint,

59 
u32
 
	gfú°Shave
 = 0;

60 
u32
 
	gœ°Shave
 = 0;

61 
u32
 
	gd⁄e
 = 0;

62 
u32
 
	grunOn˚
 = -1;

63 
u32
 
	gcy˛eCou¡
;

64 
u32
 
	gbªakpoötC¡
;

65 
T¨gëToRun
 
	gèrgë
 = 
LEON_OS
;

67 (*
	gÀ⁄E¡ryPoöt
)();

70 
≥rf‹m™˚Såu˘
 
	g≥rfSå
[
SHAVES_USED
];

72 
	gINIT_END_OF_CODE_AREEA
;

74 
	$runLe⁄
()

76 i‡(
À⁄E¡ryPoöt
 !
NULL
)

77 
	`À⁄E¡ryPoöt
();

78 
	}
}

80 
	$bªakpoöt
()

82 
bªakpoötC¡
++;

83 
	}
}

85 
	$°¨tTe°
()

87 
	}
}

89 
	$runShaves
()

91 
u32
 
i
;

94 
i
 = 
fú°Shave
; i <
œ°Shave
; i++)

96 
	`swcRe£tShave
(
i
);

97 
	`swcSëAbsﬁuãDeÁu…Sèck
(
i
);

98 
	`swcShaveProfSèπG©hîög
(
i
, &
≥rfSå
[i]);

99 
	`swcSèπShave
(
i
, 
shavesE¡ryPoöt
[i]);

103 
	`swcShavesRu¬ög
(
fú°Shave
, 
œ°Shave
))

106 #ifde‡
INT_DDR


107 
	`DrvShaveL2CacheP¨tôi⁄FlushAndInvÆid©e
(
PARTITION_0
);

111 
i
 = 
fú°Shave
; i <
œ°Shave
; i++)

113 
	`swcShaveProfSt›G©hîög
(
i
, &
≥rfSå
[i]);

115 
cy˛eCou¡
 +
≥rfSå
[
i
].
≥rfCou¡îExec
;

119 
cy˛eCou¡
 /(
œ°Shave
 - 
fú°Shave
 + 1);

120 
	}
}

122 
	$maö
()

125 
	`öôClocksAndMem‹y
();

127 #i‚de‡
MYRIAD2


128 
	`swcLe⁄DißbÀDˇche
();

132 
d⁄e
 == 0)

135 
	`swcLe⁄D©aCacheFlush
();

136 
èrgë
)

138 
LEON_OS
: 
	`runLe⁄
(); ;

139 
SHAVE_ALL
: 
	`runShaves
(); ;

140 
FINISH
: 
d⁄e
 = 1; ;

141 : 
	`¥ötf
("PCáµ cho£á wr⁄gÅ¨gë (%d). Exôög...\n", 
èrgë
);

142 
d⁄e
 = 1;

145 i‡(
runOn˚
 == 1)

146 
d⁄e
 = 1;

149 
	`bªakpoöt
();

152 
AUTOCHECK_ELF_FILE
;

155 
	}
}

	@HowTo/SampleUnitTesting/unittest/dummy/shave/init.c

1 
	~<ßm∂eAµ.h
>

2 
	~<svuComm⁄Shave.h
>

5 
	#MAX_WIDTH
 1920

	)

6 
__©åibuã__
 ((
	$Æig√d
 (16))Ë
ö
[
MAX_WIDTH
];

7 
	`__©åibuã__
 ((
	$Æig√d
 (16))Ë
width
;

8 
	`__©åibuã__
 ((
	$Æig√d
 (16))Ë
vÆue
;

9 
	`__©åibuã__
 ((
	$Æig√d
 (16))Ë
›
;

10 
	`__©åibuã__
 ((
	$Æig√d
 (16))Ë
pxToCh™ge
;

11 
	`__©åibuã__
 ((
	$Æig√d
 (16))Ë
out
[
MAX_WIDTH
];

13 
	$maö
( )

17 
	`ßm∂eAµ_asm
(
ö
, 
width
, 
vÆue
, 
›
, 
pxToCh™ge
, 
out
);

19 
SHAVE_HALT
;

21 
	}
}

	@HowTo/SampleUnitTesting/unittest/sampleApp_asm_test.cpp

1 
	~"Te°Ru¬î.h
"

2 
	~"R™domGíî©‹.h
"

3 
	~"moviDebugDŒ.h
"

4 
	~"Fun˘i⁄Info.h
"

5 
	~<c°dio
>

7 
	#EXPECTED_CC
 (3)

	)

9 
Te°Ru¬î
 
ßm∂eAµTe°Ru¬î
(
APP_PATH
, 
APP_ELFPATH
, 
KERNEL_ASM_LABEL
, 
DBG_INTERFACE
);

11 
	gSam∂eAµCy˛eCou¡
;

13 
	$Sam∂eAµ_asm_ã°
(*
ö
, 
width
, 
vÆue
, 
›î©i⁄
, 
pxToCh™ge
, *
out
)

16 
Fun˘i⁄Info
& 
fun˘i⁄Info
 = Fun˘i⁄Info::
	`In°™˚
();

17 
ßm∂eAµTe°Ru¬î
.
	`Inô
();

18 
ßm∂eAµTe°Ru¬î
.
	`SëI≈ut
("ö", 
ö
, 
width
, 
SHAVE0
);

19 
ßm∂eAµTe°Ru¬î
.
	`SëI≈ut
("width", 
width
, 
SHAVE0
);

20 
ßm∂eAµTe°Ru¬î
.
	`SëI≈ut
("vÆue", 
vÆue
, 
SHAVE0
);

21 
ßm∂eAµTe°Ru¬î
.
	`SëI≈ut
("›", 
›î©i⁄
, 
SHAVE0
);

22 
ßm∂eAµTe°Ru¬î
.
	`SëI≈ut
("pxToCh™ge", 
pxToCh™ge
, 
SHAVE0
);

24 
ßm∂eAµTe°Ru¬î
.
	`Run
(
SHAVE0
);

25 
Sam∂eAµCy˛eCou¡
 = 
ßm∂eAµTe°Ru¬î
.
	`GëV¨übÀVÆue
(
°d
::
	`°rög
("cycleCount"));

26 
fun˘i⁄Info
.
	`AddCy˛ePîPixñInfo
(()(
Sam∂eAµCy˛eCou¡
 - 2)/ ()
width
);

27 
fun˘i⁄Info
.
	`£tEx≥˘edCy˛es
(()
EXPECTED_CC
);

28 
ßm∂eAµTe°Ru¬î
.
	`GëOuçut
(
	`°rög
("out"), 
SHAVE0
, 
width
, 
out
);

29 
	}
}

	@HowTo/SampleUnitTesting/unittest/sampleApp_asm_test.h

1 #i‚de‡
_SAMPLEAPP_ASM_TEST_H_


2 
	#_SAMPLEAPP_ASM_TEST_H_


	)

4 
Sam∂eAµCy˛eCou¡
;

6 
Sam∂eAµ_asm_ã°
(*
ö
, 
width
, 
vÆue
, 
›î©i⁄
, 
pxToCh™ge
, *
out
);

	@HowTo/SampleUnitTesting/unittest/sampleApp_unittest.cpp

1 
	~"ßm∂eAµ.h
"

2 
	~"ßm∂eAµ_asm_ã°.h
"

3 
	~"I≈utGíî©‹.h
"

4 
	~"Unif‹mGíî©‹.h
"

5 
	~"R™domGíî©‹.h
"

6 
	~<˘ime
>

7 
	~<mem‹y
>

8 
	~<°dlib.h
>

9 
	~"AºayCheckî.h
"

11 
	gusög
 ::
ã°ög
::
Te°WôhP¨am
;

12 
	gusög
 ::
ã°ög
::
VÆues
;

14 
˛ass
 
	gSam∂eAµTe°
 : 
public
 ::
ã°ög
::
Te°WôhP¨am
< > {

15 
¥Ÿe˘ed
:

17 
vútuÆ
 
SëUp
()

19 
øndGí
.
ª£t
(
√w
 
R™domGíî©‹
);

20 
	guniGí
.
ª£t
(
√w
 
Unif‹mGíî©‹
);

21 
	göputGí
.
AddGíî©‹
(
°d
::
°rög
("øndom"), 
øndGí
.
gë
());

22 
	göputGí
.
AddGíî©‹
(
°d
::
°rög
("unif‹m"), 
uniGí
.
gë
());

25 *
	göput
;

26 *
	goutAsm
;

27 *
	goutC
;

28 
	gvÆue
;

29 
	g›î©i⁄
;

30 
	gpxToCh™ge
;

31 
	gwidth
;

33 
R™domGíî©‹
 
	gd©aGíî©‹
;

34 
I≈utGíî©‹
 
	göputGí
;

35 
AºayCheckî
 
	gouçutCheck
;

36 
	g°d
::
auto_±r
<
R™domGíî©‹
> 
øndGí
;

37 
	g°d
::
auto_±r
<
Unif‹mGíî©‹
> 
uniGí
;

42 
	$TEST_F
(
Sam∂eAµTe°
 , 
R™domI≈utAddôi⁄
)

45 
öputGí
.
	`Sñe˘Gíî©‹
("random");

46 
width
 = 64;

47 
öput
 = 
öputGí
.
	`GëLöe
(
width
, 0, 255);

48 
vÆue
 = 
øndGí
->
	`Gíî©eUCh¨
(0,255);

49 
outAsm
 = 
öputGí
.
	`GëEm±yLöe
(
width
);

50 
outC
 = 
öputGí
.
	`GëEm±yLöe
(
width
);

51 
pxToCh™ge
 = 16;

52 
›î©i⁄
 = 1;

53 
	`Sam∂eAµ_asm_ã°
(
öput
, 
width
, 
vÆue
, 
›î©i⁄
, 
pxToCh™ge
, 
outAsm
);

54 
	`ßm∂eAµ
(
öput
, 
width
, 
vÆue
, 
›î©i⁄
, 
pxToCh™ge
, 
outC
);

55 
	`Rec‹dPr›îty
("Cy˛eCou¡", 
Sam∂eAµCy˛eCou¡
);

56 
ouçutCheck
.
	`Com∑ªAºays
(
outC
, 
outAsm
, 
width
);

57 
	}
}

59 
	$TEST_F
(
Sam∂eAµTe°
 , 
R™domI≈utSubåa˘i⁄
)

62 
öputGí
.
	`Sñe˘Gíî©‹
("random");

63 
width
 = 64;

64 
öput
 = 
öputGí
.
	`GëLöe
(
width
, 0, 255);

65 
vÆue
 = 
øndGí
->
	`Gíî©eUCh¨
(0,255);

66 
outAsm
 = 
öputGí
.
	`GëEm±yLöe
(
width
);

67 
outC
 = 
öputGí
.
	`GëEm±yLöe
(
width
);

68 
pxToCh™ge
 = 16;

69 
›î©i⁄
 = 0;

70 
	`Sam∂eAµ_asm_ã°
(
öput
, 
width
, 
vÆue
, 
›î©i⁄
, 
pxToCh™ge
, 
outAsm
);

71 
	`ßm∂eAµ
(
öput
, 
width
, 
vÆue
, 
›î©i⁄
, 
pxToCh™ge
, 
outC
);

72 
	`Rec‹dPr›îty
("Cy˛eCou¡", 
Sam∂eAµCy˛eCou¡
);

73 
ouçutCheck
.
	`Com∑ªAºays
(
outC
, 
outAsm
, 
width
);

74 
	}
}

76 
	$TEST_F
(
Sam∂eAµTe°
 , 
Unif‹mI≈utAddôi⁄
)

79 
öputGí
.
	`Sñe˘Gíî©‹
("uniform");

80 
width
 = 64;

81 
öput
 = 
öputGí
.
	`GëLöe
(
width
, 50);

82 
vÆue
 = 
øndGí
->
	`Gíî©eUCh¨
(0,255);

83 
outAsm
 = 
öputGí
.
	`GëEm±yLöe
(
width
);

84 
outC
 = 
öputGí
.
	`GëEm±yLöe
(
width
);

85 
pxToCh™ge
 = 16;

86 
›î©i⁄
 = 1;

87 
	`Sam∂eAµ_asm_ã°
(
öput
, 
width
, 
vÆue
, 
›î©i⁄
, 
pxToCh™ge
, 
outAsm
);

88 
	`ßm∂eAµ
(
öput
, 
width
, 
vÆue
, 
›î©i⁄
, 
pxToCh™ge
, 
outC
);

89 
	`Rec‹dPr›îty
("Cy˛eCou¡", 
Sam∂eAµCy˛eCou¡
);

90 
ouçutCheck
.
	`Com∑ªAºays
(
outC
, 
outAsm
, 
width
);

91 
	}
}

93 
	$TEST_F
(
Sam∂eAµTe°
 , 
Unif‹mI≈utSubåa˘i⁄
)

96 
öputGí
.
	`Sñe˘Gíî©‹
("uniform");

97 
width
 = 64;

98 
öput
 = 
öputGí
.
	`GëLöe
(
width
, 50);

99 
vÆue
 = 
øndGí
->
	`Gíî©eUCh¨
(0,255);

100 
outAsm
 = 
öputGí
.
	`GëEm±yLöe
(
width
);

101 
outC
 = 
öputGí
.
	`GëEm±yLöe
(
width
);

102 
pxToCh™ge
 = 16;

103 
›î©i⁄
 = 0;

104 
	`Sam∂eAµ_asm_ã°
(
öput
, 
width
, 
vÆue
, 
›î©i⁄
, 
pxToCh™ge
, 
outAsm
);

105 
	`ßm∂eAµ
(
öput
, 
width
, 
vÆue
, 
›î©i⁄
, 
pxToCh™ge
, 
outC
);

106 
	`Rec‹dPr›îty
("Cy˛eCou¡", 
Sam∂eAµCy˛eCou¡
);

107 
ouçutCheck
.
	`Com∑ªAºays
(
outC
, 
outAsm
, 
width
);

108 
	}
}

112 
INSTANTIATE_TEST_CASE_P
(
R™domI≈uts
, 
Sam∂eAµTe°
,

113 
VÆues
(8u, 32u, 320u, 640u, 800u, 1280u, 1920u);

116 
	$TEST_P
(
Sam∂eAµTe°
, 
Te°WidthR™domD©a
)

118 
öputGí
.
	`Sñe˘Gíî©‹
("random");

119 
width
 = 
	`GëP¨am
();

120 
öput
 = 
öputGí
.
	`GëLöe
(
width
, 0, 255);

121 
vÆue
 = 
øndGí
->
	`Gíî©eUCh¨
(0,255);

122 
outAsm
 = 
öputGí
.
	`GëEm±yLöe
(
width
);

123 
outC
 = 
öputGí
.
	`GëEm±yLöe
(
width
);

124 
pxToCh™ge
 = (
width
 =8Ë? 8 : 
øndGí
->
	`Gíî©eUI¡
(8,width, 8);

125 
›î©i⁄
 = 0;

126 
	`Sam∂eAµ_asm_ã°
(
öput
, 
width
, 
vÆue
, 
›î©i⁄
, 
pxToCh™ge
, 
outAsm
);

127 
	`ßm∂eAµ
(
öput
, 
width
, 
vÆue
, 
›î©i⁄
, 
pxToCh™ge
, 
outC
);

128 
	`Rec‹dPr›îty
("Cy˛eCou¡", 
Sam∂eAµCy˛eCou¡
);

129 
ouçutCheck
.
	`Com∑ªAºays
(
outC
, 
outAsm
, 
width
);

130 
	}
}

	@HowTo/SharingExample/leon/app_config.c

11 
	~<OsDrvC¥.h
>

12 
	~<OsDrvShaveL2Cache.h
>

13 
	~"≠p_c⁄fig.h
"

17 
	#L2CACHE_CFG
 
SHAVE_L2CACHE_NORMAL_MODE


	)

30 
	$öôClocksAndMem‹y
()

32 
s32
 
sc
;

34 
tyAuxClkDividîCfg
 
auxClkAŒOn
[] =

36 {
AUX_CLK_MASK_UART
, 
CLK_SRC_REFCLK0
, 96, 625},

41 
sc
 = 
	`OsDrvC¥Inô
();

42 if(
sc
)

43  
sc
;

45 
sc
 = 
	`OsDrvC¥O≥n
();

46 if(
sc
)

47  
sc
;

49 
sc
 = 
	`OsDrvC¥AuxClockAºayC⁄fig
(
auxClkAŒOn
);

50 if(
sc
)

51  
sc
;

54 
sc
 = 
	`OsDrvShaveL2CacheInô
(
L2CACHE_CFG
);

55 if(
sc
)

56  
sc
;

59 
∑πôi⁄_id
;

60 
	`OsDrvShaveL2CGëP¨tôi⁄
(
SHAVEPART256KB
, &
∑πôi⁄_id
);

63 
sc
 = 
	`OsDrvShaveL2CacheAŒoˇãSëP¨tôi⁄s
();

64 if(
sc
)

65  
sc
;

68 
i
 = 0; i < 
SHAVES_USED
; i++)

70 
	`OsDrvShaveL2CSëN⁄WödowedP¨tôi⁄
(
i
, 
∑πôi⁄_id
, 
NON_WINDOWED_DATA_PARTITION
);

71 
	`OsDrvShaveL2CSëN⁄WödowedP¨tôi⁄
(
i
, 
∑πôi⁄_id
, 
NON_WINDOWED_INSTRUCTIONS_PARTITION
);

74 
	`OsDrvShaveL2CacheP¨tôi⁄InvÆid©e
(
∑πôi⁄_id
);

77 
	}
}

	@HowTo/SharingExample/leon/app_config.h

9 #i‚de‡
_APP_CONFIG_H_


10 
	#_APP_CONFIG_H_


	)

18 
	#APP_UPA_CLOCKS
 (
DEV_UPA_SH0
 | \

19 
DEV_UPA_SH1
 | \

20 
DEV_UPA_SH2
 | \

21 
DEV_UPA_SH3
 | \

22 
DEV_UPA_SHAVE_L2
 | \

23 
DEV_UPA_CDMA
 | \

24 
DEV_UPA_CTRL
 )

	)

26 
	#SHAVES_USED
 (4)

	)

35 
öôClocksAndMem‹y
();

	@HowTo/SharingExample/leon/main.c

11 
	~<°dio.h
>

12 
	~<°dlib.h
>

13 
	~"mv_ty≥s.h
"

14 
	~<b•.h
>

15 
	~<DrvC¥.h
>

16 
	~<DrvLe⁄.h
>

17 
	~<UnôTe°Api.h
>

19 
	~"πems_c⁄fig.h
"

27 
u32
 
Ãt_°¨t
;

29 vﬁ©ûê
Ãt_sh¨ed3
[];

40 *
	$POSIX_Inô
 (*
¨gs
)

42 
	`UNUSED
(
¨gs
);

44 
s32
 
sc
;

46 
	`unôTe°Inô
();

47 
sc
 = 
	`öôClocksAndMem‹y
();

48 if(
sc
)

49 
	`exô
(
sc
);

50 
	`¥ötf
("LeonOS Started.\n");

51 
	`¥ötf
("Le⁄RT Sèπ Addr: 0x%lX\n",(
u32
)&
Ãt_°¨t
);

54 
	`DrvLe⁄RTSèπup
((
u32
)&
Ãt_°¨t
);

55 
	`DrvLe⁄RTWaôExecuti⁄
();

56 
	`¥ötf
("Sh¨ed d©®bëwì¿Le⁄s: %d %d %d %d\n", 
Ãt_sh¨ed3
[0],Ürt_shared3[1],Ürt_shared3[2],Ürt_shared3[3]);

58 
	`¥ötf
("\nDone.\n");

60 
	`unôTe°FöÆRï‹t
();

61 
	`exô
(0);

62 
	}
}

	@HowTo/SharingExample/leon/rtems_config.h

8 #i‚de‡
_RTEMS_CONFIG_H_


9 
	#_RTEMS_CONFIG_H_


	)

13 
	~"≠p_c⁄fig.h
"

14 
	~"ÁèlExãnsi⁄.h
"

19 #i‡
deföed
(
__RTEMS__
)

21 #i‡!
deföed
 (
__CONFIG__
)

22 
	#__CONFIG__


	)

25 
	#CONFIGURE_INIT


	)

27 #i‚de‡
RTEMS_POSIX_API


28 
	#RTEMS_POSIX_API


	)

31 
	#CONFIGURE_MICROSECONDS_PER_TICK
 1000

	)

33 
	#CONFIGURE_TICKS_PER_TIMESLICE
 10

	)

35 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

37 
	#CONFIGURE_APPLICATION_NEEDS_CLOCK_DRIVER


	)

39 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

41 
	#CONFIGURE_MINIMUM_TASK_STACK_SIZE
 4096

	)

43 
	#CONFIGURE_MAXIMUM_TASKS
 4

	)

45 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 4

	)

47 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 8

	)

49 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 8

	)

51 
	#CONFIGURE_MAXIMUM_POSIX_SEMAPHORES
 8

	)

53 
	#CONFIGURE_MAXIMUM_POSIX_MESSAGE_QUEUES
 8

	)

55 
	#CONFIGURE_MAXIMUM_POSIX_TIMERS
 4

	)

57 
	#CONFIGURE_MAXIMUM_TIMERS
 4

	)

60 
	#CONFIGURE_MAXIMUM_USER_EXTENSIONS
 1

	)

61 
	#CONFIGURE_INITIAL_EXTENSIONS
 { .
Áèl
 = 
F©Æ_exãnsi⁄
 }

	)

68 *
POSIX_Inô
 (*
¨gs
);

70 
	~<πems/c⁄fdefs.h
>

78 
BSP_SET_CLOCK
(12000, 266000, 1, 1, 
DEFAULT_RTEMS_CSS_LOS_CLOCKS
, 
DEFAULT_RTEMS_MSS_LRT_CLOCKS
 | 
DEV_CSS_LOS_DSU
| 
DEV_CSS_LOS_TIM
| 
DEV_CSS_MSS_MAS
, 
APP_UPA_CLOCKS
, 0, 0);

81 
BSP_SET_L2C_CONFIG
(0, 
L2C_REPL_LRU
, 0, 
L2C_MODE_COPY_BACK
, 0, 
NULL
);

	@HowTo/SharingExample/leon_rt/rt_main.c

12 
	~<°dio.h
>

13 
	~<°rög.h
>

14 
	~<swcLe⁄Utûs.h
>

15 
	~<DrvLe⁄L2C.h
>

16 
	~<DrvLe⁄.h
>

17 
	~"DrvSvu.h
"

25 
u32
 
diff_sh¨ög0_maö
;

26 
u32
 
diff_sh¨ög1_maö
;

27 
u32
 
globÆ_sh¨ög2_maö
;

28 
u32
 
globÆ_sh¨ög3_maö
;

30 vﬁ©ûê
diff_sh¨ög0_myöt1
[4];

31 vﬁ©ûê
diff_sh¨ög0_myöt2
[4];

32 vﬁ©ûê
diff_sh¨ög1_myöt1
[4];

33 vﬁ©ûê
diff_sh¨ög1_myöt2
[4];

35 
diff_sh¨ög0_myöåez
[4];

36 
diff_sh¨ög1_myöåez
[4];

38 
globÆ_sh¨ög2_myöåez
[4];

39 
globÆ_sh¨ög3_myöåez
[4];

41 vﬁ©ûê
__©åibuã__
((
£˘i⁄
(".cmx.sh¨ed"))Ë
	gsh¨ed1
[4];

42 vﬁ©ûê
__©åibuã__
((
£˘i⁄
(".cmx.sh¨ed"))Ë
	gsh¨ed2
[4];

43 vﬁ©ûê
	gsh¨ed3
[4];

55 
	$sh¨ög_ã°
()

57 
u32
 
i
;

58 
u32
 
ã°_∑ss
 = 1;

60 
	`swcLe⁄DißbÀDˇche
();

64 
	`¥ötf
("\n<<< ExampleA : Simple Leon - Shave0 Sharing using global data >>>\n\n");

67 
diff_sh¨ög0_myöt1
[0] = 4;

68 
diff_sh¨ög0_myöt1
[1] = 25;

69 
diff_sh¨ög0_myöt1
[2] = 313;

70 
diff_sh¨ög0_myöt1
[3] = 13;

72 
diff_sh¨ög0_myöt2
[0] = 4;

73 
diff_sh¨ög0_myöt2
[1] = 30;

74 
diff_sh¨ög0_myöt2
[2] = 400;

75 
diff_sh¨ög0_myöt2
[3] = 500;

78 
	`¥ötf
("Sèπ Shave0áàaddr:0x%X \n", ()&
diff_sh¨ög0_maö
);

79 
	`swcRe£tShave
(0);

80 
	`swcSëAbsﬁuãDeÁu…Sèck
(0);

81 
	`swcSèπShave
(0, (
u32
)&
diff_sh¨ög0_maö
);

82 
	`swcWaôShave
(0);

85 
	`¥ötf
("ª† : %d %d %d %d\n",
diff_sh¨ög0_myöåez
[0], diff_sharing0_myintrez[1], diff_sharing0_myintrez[2], diff_sharing0_myintrez[3]);

87 
i
 = 0; i < 4; i++)

88 i‡(
diff_sh¨ög0_myöåez
[
i
] !(
diff_sh¨ög0_myöt1
[i] + 
diff_sh¨ög0_myöt2
[i]))

89 
ã°_∑ss
 = 0;

91 i‡(
ã°_∑ss
)

92 
	`¥ötf
("\n\nDiff_sharing Executed Successfully on Shave0\n\n");

94 
	`¥ötf
("Diff_sharing failed on Shave0\n");

98 
	`¥ötf
("\n<<< ExampleB : Simple Leon - Shave1 Sharing using global data >>>\n\n");

99 
ã°_∑ss
 = 1;

102 
diff_sh¨ög1_myöt1
[0] = 4;

103 
diff_sh¨ög1_myöt1
[1] = 25;

104 
diff_sh¨ög1_myöt1
[2] = 313;

105 
diff_sh¨ög1_myöt1
[3] = 13;

107 
diff_sh¨ög1_myöt2
[0] = 4;

108 
diff_sh¨ög1_myöt2
[1] = 30;

109 
diff_sh¨ög1_myöt2
[2] = 400;

110 
diff_sh¨ög1_myöt2
[3] = 500;

113 
	`¥ötf
("Sèπ Shave1áàaddr:0x%X \n", ()&
diff_sh¨ög1_maö
);

114 
	`swcRe£tShave
(1);

115 
	`swcSëAbsﬁuãDeÁu…Sèck
(1);

116 
	`swcSèπShave
(1, (
u32
)&
diff_sh¨ög1_maö
);

117 
	`swcWaôShave
(1);

120 
	`¥ötf
("ª† : %d %d %d %d\n",
diff_sh¨ög1_myöåez
[0], diff_sharing1_myintrez[1], diff_sharing1_myintrez[2], diff_sharing1_myintrez[3]);

122 
i
 = 0; i < 4; i++)

123 i‡(
diff_sh¨ög1_myöåez
[
i
] !(
diff_sh¨ög1_myöt1
[i] + 
diff_sh¨ög1_myöt2
[i]))

124 
ã°_∑ss
 = 0;

126 i‡(
ã°_∑ss
)

127 
	`¥ötf
("\n\nDiff_sharing Executed Successfully on Shave 1\n\n");

129 
	`¥ötf
("Diff_sharing failed on Shave 1\n");

133 
	`¥ötf
("\n<<< ExampleC : Share data between Shaves 2ánd 3 >>>\n\n");

134 
ã°_∑ss
 = 1;

137 
sh¨ed1
[0] = 4;

138 
sh¨ed1
[1] = 25;

139 
sh¨ed1
[2] = 313;

140 
sh¨ed1
[3] = 13;

142 
sh¨ed2
[0] = 4;

143 
sh¨ed2
[1] = 30;

144 
sh¨ed2
[2] = 400;

145 
sh¨ed2
[3] = 500;

148 
	`¥ötf
("Sèπ Shave2áàaddr:0x%X \n", ()&
globÆ_sh¨ög2_maö
);

149 
	`swcRe£tShave
(2);

150 
	`swcSëAbsﬁuãDeÁu…Sèck
(2);

151 
	`swcSèπShave
(2, (
u32
)&
globÆ_sh¨ög2_maö
);

152 
	`swcWaôShave
(2);

155 
	`¥ötf
("ª† : %d %d %d %d\n",
globÆ_sh¨ög2_myöåez
[0], global_sharing2_myintrez[1], global_sharing2_myintrez[2], global_sharing2_myintrez[3]);

157 
i
 = 0; i < 4; i++)

158 i‡(
globÆ_sh¨ög2_myöåez
[
i
] !(
sh¨ed1
[i] + 
sh¨ed2
[i]))

159 
ã°_∑ss
 = 0;

161 i‡(
ã°_∑ss
)

162 
	`¥ötf
("\n\nGlobal_sharing Executed Successfully on Shave 2\n\n");

164 
	`¥ötf
("Global_sharing failed on Shave 2\n");

168 
	`¥ötf
("\n<<< ExampleC - Shave 3Öart >>>\n\n");

169 
ã°_∑ss
 = 1;

172 
	`¥ötf
("Sèπ Shave3áàaddr:0x%X \n", ()&
globÆ_sh¨ög3_maö
);

173 
	`swcRe£tShave
(3);

174 
	`swcSëAbsﬁuãDeÁu…Sèck
(3);

175 
	`swcSèπShave
(3,(
u32
)&
globÆ_sh¨ög3_maö
);

176 
	`swcWaôShave
(3);

179 
	`¥ötf
("ª† : %d %d %d %d\n",
globÆ_sh¨ög3_myöåez
[0], global_sharing3_myintrez[1], global_sharing3_myintrez[2], global_sharing3_myintrez[3]);

181 
i
 = 0; i < 4; i++)

182 i‡(
globÆ_sh¨ög3_myöåez
[
i
] !(
sh¨ed1
[i] + 
sh¨ed2
[i]))

183 
ã°_∑ss
 = 0;

185 i‡(
ã°_∑ss
)

186 
	`¥ötf
("\n\nGlobal_sharing Executed Successfully on Shave 3\n\n");

188 
	`¥ötf
("Global_sharing failed on Shave 3\n");

193 
	`¥ötf
("\n<<< ExampleD : Sharing data betweenÅhe Leons >>>\n\n");

196 
i
 = 0; i < 4; i++) {

197 
sh¨ed3
[
i
] = 
sh¨ed1
[i] + 
sh¨ed2
[i];

201 
	}
}

203 
	$maö
()

205 
	`¥ötf
("Executing sharingÅest...\n\n");

207 
	`sh¨ög_ã°
();

209 
	`DrvLe⁄RTSig«lSt›
();

212 
	}
}

	@HowTo/SharingExample/shave/diff_sharing/init0.c

9 
	~<°dio.h
>

10 
	~<m©h.h
>

11 
	~<svuComm⁄Shave.h
>

12 
	~<moviVe˘‹Utûs.h
>

14 
öt4
 
add_simd
(öt4 
öput1
, i¡4 
öput2
);

16 vﬁ©ûê
	gmyöt1
[4], 
	gmyöt2
[4];

17 
	gmyöåez
[4];

18 
öt4
 
	gmyvÆ1
, 
	gmyvÆ2
, 
	gmyªz
;

20 
	$maö
( )

22 
myvÆ1
[0] = 
myöt1
[0];

23 
myvÆ1
[1] = 
myöt1
[1];

24 
myvÆ1
[2] = 
myöt1
[2];

25 
myvÆ1
[3] = 
myöt1
[3];

27 
myvÆ2
[0] = 
myöt2
[0];

28 
myvÆ2
[1] = 
myöt2
[1];

29 
myvÆ2
[2] = 
myöt2
[2];

30 
myvÆ2
[3] = 
myöt2
[3];

32 
myªz
 = 
	`add_simd
(
myvÆ1
, 
myvÆ2
);

34 
myöåez
[0] = 
myªz
[0];

35 
myöåez
[1] = 
myªz
[1];

36 
myöåez
[2] = 
myªz
[2];

37 
myöåez
[3] = 
myªz
[3];

39 
SHAVE_HALT
;

42 
	}
}

	@HowTo/SharingExample/shave/global_sharing/init2.c

9 
	~<°dio.h
>

10 
	~<m©h.h
>

11 
	~<svuComm⁄Shave.h
>

12 
	~<moviVe˘‹Utûs.h
>

14 
öt4
 
add_simd
(öt4 
öput1
,öt4 
öput2
);

16 vﬁ©ûê
sh¨ed1
[4], 
sh¨ed2
[4];

18 
	gmyöåez
[4];

19 
öt4
 
	gmyvÆ1
, 
	gmyvÆ2
, 
	gmyªz
;

21 
	$maö
( )

23 
myvÆ1
[0] = 
sh¨ed1
[0];

24 
myvÆ1
[1] = 
sh¨ed1
[1];

25 
myvÆ1
[2] = 
sh¨ed1
[2];

26 
myvÆ1
[3] = 
sh¨ed1
[3];

28 
myvÆ2
[0] = 
sh¨ed2
[0];

29 
myvÆ2
[1] = 
sh¨ed2
[1];

30 
myvÆ2
[2] = 
sh¨ed2
[2];

31 
myvÆ2
[3] = 
sh¨ed2
[3];

33 
myªz
 = 
	`add_simd
(
myvÆ1
, 
myvÆ2
);

35 
myöåez
[0] = 
myªz
[0];

36 
myöåez
[1] = 
myªz
[1];

37 
myöåez
[2] = 
myªz
[2];

38 
myöåez
[3] = 
myªz
[3];

40 
SHAVE_HALT
;

43 
	}
}

	@HowTo/SimpleCrossCompilableCVPipe/myriad/leon/app_config.c

13 
	~<ªgi°îsMyrüd.h
>

14 
	~<DrvC¥.h
>

15 
	~<DrvRegUtûs.h
>

16 
	~<DrvShaveL2Cache.h
>

17 
	~<DrvTimî.h
>

18 
	~"DrvDdr.h
"

19 
	~"≠p_c⁄fig.h
"

24 
	#L2CACHE_CFG
 (
SHAVE_L2CACHE_NORMAL_MODE
)

	)

26 #i‚de‡
BUP_PLL0_FREQ


28 
	#BUP_PLL0_FREQ
 300000

	)

31 #i‚de‡
BUP_PLL1_FREQ


33 
	#BUP_PLL1_FREQ
 300000

	)

48 
tyAuxClkDividîCfg
 
	g≠pAuxClkCfg600_266
[] =

50 {
AUX_CLK_MASK_UART
 ,
CLK_SRC_REFCLK0
,1,1},

53 
tySocClockC⁄fig
 
	g≠pClockC⁄fig
 =

55 .
ªfClk0I≈utKhz
 = 12000,

56 .
	gªfClk1I≈utKhz
 = 0,

57 .
	gèrgëPŒ0FªqKhz
 = 
BUP_PLL0_FREQ
,

58 .
	gèrgëPŒ1FªqKhz
 = 0,

59 .
	g˛kSrcPŒ1
 = 
CLK_SRC_REFCLK0
,

60 .
	gma°îClkDivNumî©‹
 = 1,

61 .
	gma°îClkDivDíomö©‹
 = 1,

62 .
	gcssDssClockE«bÀMask
 = 
DEFAULT_CORE_CSS_DSS_CLOCKS
,

63 .
	gmssClockE«bÀMask
 = 0xFFFFFFFF,

64 .
	gsùpClockE«bÀMask
 = 0xFFFFFFFF,

65 .
	gu∑ClockE«bÀMask
 = 
DEFAULT_UPA_CLOCKS
,

66 .
	gpAuxClkCfg
 = 
≠pAuxClkCfg600_266
,

69 
	$öôClocksAndMem‹y
()

71 
s32
 
sc
;

73 
sc
 = 
	`DrvTimîInô
();

74 if(
sc
)

75  
sc
;

76 
sc
 = 
	`DrvC¥Inô
();

77 if(
sc
)

78  
sc
;

79 
sc
 = 
	`DrvC¥SëupClocks
(&
≠pClockC⁄fig
);

80 if(
sc
)

81  
sc
;

82 
	`DrvC¥SysDevi˚A˘i⁄
(
MSS_DOMAIN
, 
DEASSERT_RESET
, 0xFFFFFFFF);

83 
	`DrvC¥SysDevi˚A˘i⁄
(
UPA_DOMAIN
, 
DEASSERT_RESET
, 
APP_UPA_CLOCKS
);

85 
	`DrvDdrInôüli£
(
NULL
);

88 
sc
 = 
	`DrvShaveL2CacheSëMode
(
L2CACHE_CFG
);

89 if(
sc
)

90  
sc
;

93 
	`DrvShaveL2CacheSëupP¨tôi⁄
(
SHAVEPART256KB
);

96 
sc
 = 
	`DrvShaveL2CacheAŒoˇãSëP¨tôi⁄s
();

97 if(
sc
)

98  
sc
;

101 
i
 = 0; i < 
SHAVES_USED
; i++)

103 
	`DrvShaveL2CacheSëLSUP¨tId
(
i
, 
PARTITION_0
);

106 
	`DrvShaveL2CacheP¨tôi⁄InvÆid©e
(
PARTITION_0
);

109 
	}
}

	@HowTo/SimpleCrossCompilableCVPipe/myriad/leon/app_config.h

9 #i‚de‡
_APP_CONFIG_H_


10 
	#_APP_CONFIG_H_


	)

15 
	~<mv_ty≥s.h
>

19 
	#APP_UPA_CLOCKS
 (
DEV_UPA_SH0
 | \

20 
DEV_UPA_SHAVE_L2
 | \

21 
DEV_UPA_CDMA
 | \

22 
DEV_UPA_CTRL
 )

	)

23 
	#SHAVE_NUMBER
 (0)

	)

24 
	#SHAVES_USED
 (1)

	)

26 
	#PARTITION_0
 (0)

	)

38 
öôClocksAndMem‹y
();

	@HowTo/SimpleCrossCompilableCVPipe/myriad/leon/main.c

11 
	~"≠p_c⁄fig.h
"

14 
	~<°dio.h
>

15 
	~<°rög.h
>

18 
	~<DrvShaveL2Cache.h
>

21 
	~<swcShaveLﬂdî.h
>

22 
	~<swcTe°Utûs.h
>

23 
	~<swcCrc.h
>

26 
	~<UnôTe°Api.h
>

27 
	~<VcsHooksApi.h
>

30 
	~<Buf„rs.h
>

35 
	#CRC_USED
 0x51799046

	)

40 
u32
 
Sim∂eCrossCompûabÀCVPùe0_Sim∂eCrossCompûabÀCVPùeInô
;

41 
u32
 
Sim∂eCrossCompûabÀCVPùe0_Sim∂eCrossCompûabÀCVPùeRun
;

45 
u32
 
	gFnSim∂eCrossCompûabÀCVPùeInô
 = (u32)&
Sim∂eCrossCompûabÀCVPùe0_Sim∂eCrossCompûabÀCVPùeInô
;

46 
u32
 
	gFnSim∂eCrossCompûabÀCVPùeRun
 = (u32)&
Sim∂eCrossCompûabÀCVPùe0_Sim∂eCrossCompûabÀCVPùeRun
;

54 
	$öôAlgo
(
swcShaveUnô_t
 
svu
, 
u32
 
width
)

56 
	`swcRe£tShave
(
svu
);

57 
	`swcSëAbsﬁuãDeÁu…Sèck
(
svu
);

58 
	`swcSèπShaveCC
(
svu
, 
FnSim∂eCrossCompûabÀCVPùeInô
, "i", 
width
);

59 
	`swcWaôShave
(
svu
);

60 
	`DrvShaveL2CacheP¨tôi⁄FlushAndInvÆid©e
(
PARTITION_0
);

61 
	}
}

64 
	$runAlgo
(
swcShaveUnô_t
 
svu
, 
u8
* 
öput‰ame
, u8* 
ouçut‰ame
, 
u32
 
width
, u32 
height
)

68 
≥rf‹m™˚Såu˘
 
≥rfSå
;

71 
	`swcShaveProfInô
(&
≥rfSå
);

73 
	`swcRe£tShave
(
svu
);

74 
	`swcSëAbsﬁuãDeÁu…Sèck
(
svu
);

77 
	`swcShaveProfSèπG©hîögFõlds
(
svu
, 
PERF_INSTRUCT_COUNT
);

78 
	`swcSèπShaveCC
(
svu
, 
FnSim∂eCrossCompûabÀCVPùeRun
, "iiii", 
öput‰ame
, 
ouçut‰ame
, 
width
, 
height
);

79 
	`swcWaôShave
(
svu
);

81 
	`swcShaveProfSt›FõldsG©hîög
(
svu
, 
PERF_INSTRUCT_COUNT
);

84 
	`swcShaveProfPröt
(
svu
, &
≥rfSå
);

86 
	`DrvShaveL2CacheP¨tôi⁄FlushAndInvÆid©e
(
PARTITION_0
);

87 
	}
}

90 
	$maö
()

92 
s32
 
sc
;

94 
	`unôTe°Inô
();

97 
sc
 = 
	`öôClocksAndMem‹y
();

98 if(
sc
) {

99  
sc
;

101 
	`DrvShaveL2CacheP¨tôi⁄FlushAndInvÆid©e
(
PARTITION_0
);

103 
	`¥ötf
("SimpleCrossCompilableCVPipeálgorithm.\n");

106 c⁄° 
u32
 
width
 = 
MAX_WIDTH
;

107 c⁄° 
u32
 
height
 = 
MAX_HEIGHT
;

109 
	`lﬂdMemFromFûeSim∂e
("../öput/DunLoghaúe_320x240.yuv", 
width
 * 
height
, (*)
öput‰ame
);

112 
	`öôAlgo
(
SHAVE_NUMBER
, 
width
);

113 
	`runAlgo
(
SHAVE_NUMBER
, (
u8
*)
öput‰ame
, (u8*)
ouçut‰ame
, 
width
, 
height
);

115 
u32
 
¸cUniTe°
 = 
	`swcCÆcCrc32
(
ouçut‰ame
, (Ë* 
width
 * 
height
, 
À_poöãr
);

117 
	`unôTe°As£π
(
¸cUniTe°
 =
CRC_USED
);

119 
	`unôTe°FöÆRï‹t
();

122 
	}
}

	@HowTo/SimpleCrossCompilableCVPipe/myriad/shared/Buffers.h

11 
	~<mv_ty≥s.h
>

12 
	~<Deföes.h
>

14 
DDR_BSS
 
u8
 
	göput‰ame
[
MAX_WIDTH
 * 
MAX_HEIGHT
];

15 
DDR_BSS
 
u8
 
	gouçut‰ame
[
MAX_WIDTH
 * 
MAX_HEIGHT
];

	@HowTo/SimpleCrossCompilableCVPipe/myriad/shared/Defines.h

1 #i‚de‡
__DEFINES_SPARSE_H__


2 
	#__DEFINES_SPARSE_H__


	)

5 
	#MAX_WIDTH
 320

6 
	#MAX_HEIGHT
 240

7 

	)

9 
	#CONV7x7_KERNEL_SIZE
 7

	)

10 
	#CONV3x3_KERNEL_SIZE
 3

	)

12 
	#MAX_PADDING_8
 8

	)

14 #ifde‡
__PC__


15 
	#DDR_DATA


	)

16 
	#DDR_BSS


	)

17 
	#ALIGNED
(
x
)

	)

18 
	#DMA_DESCRIPTORS


	)

19 
	#ENTRYPOINT


	)

21 
	#DDR_DATA
 
	`__©åibuã__
((
	`£˘i⁄
(".ddr.d©a")))

	)

22 
	#DDR_BSS
 
	`__©åibuã__
((
	`£˘i⁄
(".ddr.bss")))

	)

23 
	#ALIGNED
(
x
Ë
	`__©åibuã__
((
	`Æig√d
(x)))

	)

24 
	#DMA_DESCRIPTORS
 
	`__©åibuã__
((
	`£˘i⁄
(".cmx.cdmaDes¸ùt‹s")))

	)

25 
	#ENTRYPOINT
 "C"

	)

	@HowTo/SimpleCrossCompilableCVPipe/myriad/shave/SimpleCrossCompilableCVPipe.cpp

14 
	~<°dio.h
>

15 
	~<°dlib.h
>

16 
	~<°rög.h
>

19 
	~"Sim∂eCrossCompûabÀCVPùe.h
"

20 
	~<Deföes.h
>

22 
	~<absﬁuãDiff_öå.h
>

23 
	~<c⁄vﬁuti⁄3x3_öå.h
>

24 
	~<c⁄vﬁuti⁄7x7_öå.h
>

27 
	~<swcCdma.h
>

28 
	~<svuComm⁄Shave.h
>

30 #i‚de‡
__PC__


31 
	~<swcWhoAmI.h
>

40 
u8
 
	$ALIGNED
(8Ë
c⁄v7x7buf
[
CONV7x7_KERNEL_SIZE
 + 1][
MAX_WIDTH
 + 2 * 
MAX_PADDING_8
];

41 
u8
 
	$ALIGNED
(8Ë
c⁄v3x3buf
[
CONV3x3_KERNEL_SIZE
 + 1][
MAX_WIDTH
 + 2 * 
MAX_PADDING_8
];

42 
u8
 
	$ALIGNED
(8Ë
c⁄v7x7out_buf
[
MAX_WIDTH
];

43 
u8
 
	$ALIGNED
(8Ë
c⁄v3x3out_buf
[
MAX_WIDTH
];

44 
u8
 
	$ALIGNED
(8Ë
ªsu…_buf
[
MAX_WIDTH
 * 2];

45 
u8
* 
c⁄7x7out_poöãr
[1];

46 
u8
* 
c⁄3x3out_poöãr
[1];

47 
u8
* 
ªsu…_poöãr
[2];

49 
u8
* 
löesPoöãrC⁄v7x7
[
CONV7x7_KERNEL_SIZE
 + 1];

50 
u8
* 
löesPoöãrC⁄v3x3
[
CONV3x3_KERNEL_SIZE
 + 1];

53 c⁄° 
u16
 
	$ALIGNED
(8Ë
C⁄v3x3
[9] =

58 
	}
};

61 c⁄° 
u16
 
	$ALIGNED
(8Ë
C⁄v7x7
[49] =

70 
	}
};

72 
dmaTønß˘i⁄Li°_t
 
DMA_DESCRIPTORS
 
	gèsk1
, 
	gèsk2
, 
	gèsk3
, 
	gèsk4
;

79 
addPaddög
(
u8
* 
poöãr
, 
u32
 
width
, u32 
∑ddögSize
);

82 
rŸ©ePoöãrs
();

85 
˛amp
(
x
, 
y
, 
z
);

89 
ENTRYPOINT
 
	$Sim∂eCrossCompûabÀCVPùeInô
(
u32
 
width
)

91 
u32
 
i
;

93 
i
 = 0; i < 
CONV7x7_KERNEL_SIZE
 + 1; i++)

95 
löesPoöãrC⁄v7x7
[
i
] = (
u8
*)
c⁄v7x7buf
 + 
MAX_PADDING_8
 + i * (
width
 + 2 * MAX_PADDING_8);

98 
i
 = 0; i < 
CONV3x3_KERNEL_SIZE
; i++)

100 
löesPoöãrC⁄v3x3
[
i
] = (
u8
*)
c⁄v3x3buf
 + 
MAX_PADDING_8
 + i * (
width
 + 2 * MAX_PADDING_8);

103 
c⁄7x7out_poöãr
[0] = (
u8
*)
c⁄v7x7out_buf
;

104 
c⁄3x3out_poöãr
[0] = (
u8
*)
c⁄v3x3out_buf
;

105 
ªsu…_poöãr
[0] = (
u8
*)
ªsu…_buf
;

106 
ªsu…_poöãr
[1] = (
u8
*)
ªsu…_buf
 + 
width
;

108 
SHAVE_HALT
;

109 
	}
}

113 
ENTRYPOINT
 
	$Sim∂eCrossCompûabÀCVPùeRun
(
u8
* 
öputImage
,

114 
u8
 *
ouçutImage
,

115 
u32
 
width
,

116 
u32
 
height
)

119 
dmaTønß˘i⁄Li°_t
 *
ªf1
, *
ªf2
, *
ªf3
, *
ªf4
;

120 
dmaReque°îId
 
id1
 = 
	`dmaInôReque°î
(0);

121 
u32
 
i
;

122 
u32
 
¸tInLn
 = -3;

124 
i
 = 0; i < 
CONV7x7_KERNEL_SIZE
 + 1; i++)

126 
ªf1
 = 
	`dmaCª©eTønß˘i⁄
(
id1
, &
èsk1
, 
öputImage
 + 
	`˛amp
(
¸tInLn
, 0, 
height
Ë* 
width
, 
löesPoöãrC⁄v7x7
[
i
], width);

127 
	`dmaSèπLi°Task
(
ªf1
);

128 
	`dmaWaôTask
(
ªf1
);

130 
	`addPaddög
(
löesPoöãrC⁄v7x7
[
i
],
width
, 8);

131 
¸tInLn
++;

133 
löesPoöãrC⁄v3x3
[0] = 
löesPoöãrC⁄v7x7
[2];

134 
löesPoöãrC⁄v3x3
[1] = 
löesPoöãrC⁄v7x7
[3];

135 
löesPoöãrC⁄v3x3
[2] = 
löesPoöãrC⁄v7x7
[4];

137 
	`C⁄vﬁuti⁄3x3_öå
(
löesPoöãrC⁄v3x3
, &
c⁄3x3out_poöãr
[0], (
hÆf
*)
C⁄v3x3
, 
width
);

138 
	`C⁄vﬁuti⁄7x7_öå
(
löesPoöãrC⁄v7x7
, &
c⁄7x7out_poöãr
[0], (
hÆf
*)
C⁄v7x7
, 
width
);

139 
	`AbsﬁuãDiff_öå
(&
c⁄3x3out_poöãr
[0], &
c⁄7x7out_poöãr
[0], &
ªsu…_poöãr
[0], 
width
);

141 
	`rŸ©ePoöãrs
();

143 
i
 = 1; i < 
height
; i++)

145 
ªf2
 = 
	`dmaCª©eTønß˘i⁄
(
id1
, &
èsk2
, 
öputImage
 + 
	`˛amp
(
¸tInLn
, 0, 
height
-1Ë* 
width
, 
löesPoöãrC⁄v7x7
[7], width);

146 
ªf3
 = 
	`dmaCª©eTønß˘i⁄
(
id1
, &
èsk3
, 
ªsu…_poöãr
[1], 
ouçutImage
, 
width
);

147 
	`dmaLökTasks
(
ªf2
, 1, 
ªf3
);

148 
	`dmaSèπLi°Task
(
ªf2
);

150 
¸tInLn
++;

151 
ouçutImage
 +
width
;

153 
	`C⁄vﬁuti⁄3x3_öå
(
löesPoöãrC⁄v3x3
, &
c⁄3x3out_poöãr
[0], (
hÆf
 *)
C⁄v3x3
, 
width
);

154 
	`C⁄vﬁuti⁄7x7_öå
(
löesPoöãrC⁄v7x7
, &
c⁄7x7out_poöãr
[0], (
hÆf
 *)
C⁄v7x7
, 
width
);

155 
	`AbsﬁuãDiff_öå
(&
c⁄3x3out_poöãr
[0], &
c⁄7x7out_poöãr
[0], &
ªsu…_poöãr
[0], 
width
);

157 
	`dmaWaôTask
(
ªf2
);

159 
	`addPaddög
(
löesPoöãrC⁄v7x7
[7],
width
, 8);

160 
	`rŸ©ePoöãrs
();

163 
ªf4
 = 
	`dmaCª©eTønß˘i⁄
(
id1
, &
èsk4
, 
ªsu…_poöãr
[1], 
ouçutImage
, 
width
);

164 
	`dmaSèπLi°Task
(
ªf4
);

165 
	`dmaWaôTask
(
ªf4
);

167 
SHAVE_HALT
;

168 
	}
}

170 
	$addPaddög
(
u8
* 
poöãr
, 
u32
 
width
, u32 
∑ddögSize
)

172 
u32
 
widthAux
 = 
width
 - 1;

174 
u32
 
i
 = 1; i <
∑ddögSize
; i++)

177 *(
poöãr
 - 
i
) = *pointer;

178 *(
poöãr
 + 
widthAux
 + 
i
) = *(pointer + widthAux);

180 
	}
}

182 
	$rŸ©ePoöãrs
()

185 
u8
* 
öã∫ÆP
 = 
löesPoöãrC⁄v7x7
[0];

186 
löesPoöãrC⁄v7x7
[0] =ÜinesPointerConv7x7[1];

187 
löesPoöãrC⁄v7x7
[1] =ÜinesPointerConv7x7[2];

188 
löesPoöãrC⁄v7x7
[2] =ÜinesPointerConv7x7[3];

189 
löesPoöãrC⁄v7x7
[3] =ÜinesPointerConv7x7[4];

190 
löesPoöãrC⁄v7x7
[4] =ÜinesPointerConv7x7[5];

191 
löesPoöãrC⁄v7x7
[5] =ÜinesPointerConv7x7[6];

192 
löesPoöãrC⁄v7x7
[6] =ÜinesPointerConv7x7[7];

193 
löesPoöãrC⁄v7x7
[7] = 
öã∫ÆP
;

195 
löesPoöãrC⁄v3x3
[0] = 
löesPoöãrC⁄v7x7
[2];

196 
löesPoöãrC⁄v3x3
[1] = 
löesPoöãrC⁄v7x7
[3];

197 
löesPoöãrC⁄v3x3
[2] = 
löesPoöãrC⁄v7x7
[4];

200 
öã∫ÆP
 = 
ªsu…_poöãr
[0];

201 
ªsu…_poöãr
[0] =Ñesult_pointer[1];

202 
ªsu…_poöãr
[1] = 
öã∫ÆP
;

203 
	}
}

205 
s32
 
	$˛amp
(
s32
 
vÆ
, s32 
lowVÆ
, s32 
highVÆ
)

207 i‡(
vÆ
 < 
lowVÆ
)

209  
lowVÆ
;

213 i‡(
vÆ
 > 
highVÆ
)

215  
highVÆ
;

219  
vÆ
;

222 
	}
}

	@HowTo/SimpleCrossCompilableCVPipe/myriad/shave/SimpleCrossCompilableCVPipe.h

10 #i‚de‡
SIMPLE_CROSS_H


11 
	#SIMPLE_CROSS_H


	)

15 
	~<mvcv.h
>

17 
	~<Deföes.h
>

31 
ENTRYPOINT
 
Sim∂eCrossCompûabÀCVPùeInô
(
u32
 
width
);

49 
ENTRYPOINT
 
Sim∂eCrossCompûabÀCVPùeRun
(
u8
 *
öputBuf„r
,

50 
u8
 *
ouçutBuf„r
,

51 
u32
 
width
,

52 
u32
 
height
);

	@HowTo/SimpleCrossCompilableCVPipe/myriad/shave/kernels/absoluteDiff/absoluteDiff_intr.cpp

1 
	~"absﬁuãDiff_öå.h
"

2 
	~<°dlib.h
>

4 
	$AbsﬁuãDiff_öå
(
u8
** 
ö1
, u8** 
ö2
, u8** 
out
, 
u32
 
width
)

7 
u32
 
i
;

8 
uch¨16
 *
öput1
 = *(uch¨16 **)
ö1
;

9 
uch¨16
 *
öput2
 = *(uch¨16 **)
ö2
;

10 
uch¨16
 *
ouçut
 = *(uch¨16 **)
out
;

12 
width
 = width >> 4;

15 
i
=0;i<
width
;i++)

17 
ouçut
[
i
] = 
	`__buûtö_shave_vau_adiff_u8_º
(
öput1
[i], 
öput2
[i]);

21 
	}
}

	@HowTo/SimpleCrossCompilableCVPipe/myriad/shave/kernels/absoluteDiff/absoluteDiff_intr.h

1 #i‚de‡
__ABSOLUTEDIFF_INTR_H__


2 
	#__ABSOLUTEDIFF_INTR_H__


	)

3 
	~<mv_ty≥s.h
>

4 
	~<mvcv_ma¸o.h
>

14 "C" 
AbsﬁuãDiff_öå
–
u8
** 
ö1
, u8** 
ö2
, u8** 
out
, 
u32
 
width
);

	@HowTo/SimpleCrossCompilableCVPipe/myriad/shave/kernels/convolution3x3/convolution3x3_intr.cpp

1 
	~"c⁄vﬁuti⁄3x3_öå.h
"

2 
	~<°dio.h
>

3 
	~<°dlib.h
>

10 
	$C⁄vﬁuti⁄3x3_öå
(
u8
** 
ö
, u8** 
out
, 
hÆf
 
c⁄v
[9], 
u32
 
öWidth
)

12 
i
,
j
;

13 
u8
* 
löes
[3];

14 
u8
 *
ouçut
 = *
out
;

16 
hÆf8
 
ö1
, 
ö2
, 
ö3
, 
ö4
, 
ö5
, 
ö6
, 
ö7
, 
ö8
, 
ö9
;

17 
hÆf8
 
ªz1
, 
ªz2
, 
ªz3
, 
ªz4
, 
ªz5
, 
ªz6
, 
ªz7
, 
ªz8
, 
ªz9
;

18 
hÆf8
 
c⁄v1
, 
c⁄v2
, 
c⁄v3
, 
c⁄v4
, 
c⁄v5
, 
c⁄v6
, 
c⁄v7
, 
c⁄v8
, 
c⁄v9
;

21 
löes
[0] = 
ö
[0];

22 
löes
[1] = 
ö
[1];

23 
löes
[2] = 
ö
[2];

25 
c⁄v1
[0] = 
c⁄v
[0]; 
c⁄v2
[0] = c⁄v[1]; 
c⁄v3
[0] = c⁄v[2]; 
c⁄v4
[0] = c⁄v[3]; 
c⁄v5
[0] = c⁄v[4]; 
c⁄v6
[0] = c⁄v[5]; 
c⁄v7
[0] = c⁄v[6]; 
c⁄v8
[0] = c⁄v[7]; 
c⁄v9
[0] = conv[8];

26 
c⁄v1
[1] = 
c⁄v
[0]; 
c⁄v2
[1] = c⁄v[1]; 
c⁄v3
[1] = c⁄v[2]; 
c⁄v4
[1] = c⁄v[3]; 
c⁄v5
[1] = c⁄v[4]; 
c⁄v6
[1] = c⁄v[5]; 
c⁄v7
[1] = c⁄v[6]; 
c⁄v8
[1] = c⁄v[7]; 
c⁄v9
[1] = conv[8];

27 
c⁄v1
[2] = 
c⁄v
[0]; 
c⁄v2
[2] = c⁄v[1]; 
c⁄v3
[2] = c⁄v[2]; 
c⁄v4
[2] = c⁄v[3]; 
c⁄v5
[2] = c⁄v[4]; 
c⁄v6
[2] = c⁄v[5]; 
c⁄v7
[2] = c⁄v[6]; 
c⁄v8
[2] = c⁄v[7]; 
c⁄v9
[2] = conv[8];

28 
c⁄v1
[3] = 
c⁄v
[0]; 
c⁄v2
[3] = c⁄v[1]; 
c⁄v3
[3] = c⁄v[2]; 
c⁄v4
[3] = c⁄v[3]; 
c⁄v5
[3] = c⁄v[4]; 
c⁄v6
[3] = c⁄v[5]; 
c⁄v7
[3] = c⁄v[6]; 
c⁄v8
[3] = c⁄v[7]; 
c⁄v9
[3] = conv[8];

29 
c⁄v1
[4] = 
c⁄v
[0]; 
c⁄v2
[4] = c⁄v[1]; 
c⁄v3
[4] = c⁄v[2]; 
c⁄v4
[4] = c⁄v[3]; 
c⁄v5
[4] = c⁄v[4]; 
c⁄v6
[4] = c⁄v[5]; 
c⁄v7
[4] = c⁄v[6]; 
c⁄v8
[4] = c⁄v[7]; 
c⁄v9
[4] = conv[8];

30 
c⁄v1
[5] = 
c⁄v
[0]; 
c⁄v2
[5] = c⁄v[1]; 
c⁄v3
[5] = c⁄v[2]; 
c⁄v4
[5] = c⁄v[3]; 
c⁄v5
[5] = c⁄v[4]; 
c⁄v6
[5] = c⁄v[5]; 
c⁄v7
[5] = c⁄v[6]; 
c⁄v8
[5] = c⁄v[7]; 
c⁄v9
[5] = conv[8];

31 
c⁄v1
[6] = 
c⁄v
[0]; 
c⁄v2
[6] = c⁄v[1]; 
c⁄v3
[6] = c⁄v[2]; 
c⁄v4
[6] = c⁄v[3]; 
c⁄v5
[6] = c⁄v[4]; 
c⁄v6
[6] = c⁄v[5]; 
c⁄v7
[6] = c⁄v[6]; 
c⁄v8
[6] = c⁄v[7]; 
c⁄v9
[6] = conv[8];

32 
c⁄v1
[7] = 
c⁄v
[0]; 
c⁄v2
[7] = c⁄v[1]; 
c⁄v3
[7] = c⁄v[2]; 
c⁄v4
[7] = c⁄v[3]; 
c⁄v5
[7] = c⁄v[4]; 
c⁄v6
[7] = c⁄v[5]; 
c⁄v7
[7] = c⁄v[6]; 
c⁄v8
[7] = c⁄v[7]; 
c⁄v9
[7] = conv[8];

39 
i
 = 0; i < (
s32
)
öWidth
; i = i +8){

40 
ö1
[0] = (
hÆf
)
löes
[0][
i
-1]; 
ö2
[0] = (hÆfÓöes[0][i+0]; 
ö3
[0] = (half)lines[0][i+1];

41 
ö1
[1] = (
hÆf
)
löes
[0][
i
-0]; 
ö2
[1] = (hÆfÓöes[0][i+1]; 
ö3
[1] = (half)lines[0][i+2];

42 
ö1
[2] = (
hÆf
)
löes
[0][
i
+1]; 
ö2
[2] = (hÆfÓöes[0][i+2]; 
ö3
[2] = (half)lines[0][i+3];

43 
ö1
[3] = (
hÆf
)
löes
[0][
i
+2]; 
ö2
[3] = (hÆfÓöes[0][i+3]; 
ö3
[3] = (half)lines[0][i+4];

44 
ö1
[4] = (
hÆf
)
löes
[0][
i
+3]; 
ö2
[4] = (hÆfÓöes[0][i+4]; 
ö3
[4] = (half)lines[0][i+5];

45 
ö1
[5] = (
hÆf
)
löes
[0][
i
+4]; 
ö2
[5] = (hÆfÓöes[0][i+5]; 
ö3
[5] = (half)lines[0][i+6];

46 
ö1
[6] = (
hÆf
)
löes
[0][
i
+5]; 
ö2
[6] = (hÆfÓöes[0][i+6]; 
ö3
[6] = (half)lines[0][i+7];

47 
ö1
[7] = (
hÆf
)
löes
[0][
i
+6]; 
ö2
[7] = (hÆfÓöes[0][i+7]; 
ö3
[7] = (half)lines[0][i+8];

49 
ö4
[0] = (
hÆf
)
löes
[1][
i
-1]; 
ö5
[0] = (hÆfÓöes[1][i+0]; 
ö6
[0] = (half)lines[1][i+1];

50 
ö4
[1] = (
hÆf
)
löes
[1][
i
-0]; 
ö5
[1] = (hÆfÓöes[1][i+1]; 
ö6
[1] = (half)lines[1][i+2];

51 
ö4
[2] = (
hÆf
)
löes
[1][
i
+1]; 
ö5
[2] = (hÆfÓöes[1][i+2]; 
ö6
[2] = (half)lines[1][i+3];

52 
ö4
[3] = (
hÆf
)
löes
[1][
i
+2]; 
ö5
[3] = (hÆfÓöes[1][i+3]; 
ö6
[3] = (half)lines[1][i+4];

53 
ö4
[4] = (
hÆf
)
löes
[1][
i
+3]; 
ö5
[4] = (hÆfÓöes[1][i+4]; 
ö6
[4] = (half)lines[1][i+5];

54 
ö4
[5] = (
hÆf
)
löes
[1][
i
+4]; 
ö5
[5] = (hÆfÓöes[1][i+5]; 
ö6
[5] = (half)lines[1][i+6];

55 
ö4
[6] = (
hÆf
)
löes
[1][
i
+5]; 
ö5
[6] = (hÆfÓöes[1][i+6]; 
ö6
[6] = (half)lines[1][i+7];

56 
ö4
[7] = (
hÆf
)
löes
[1][
i
+6]; 
ö5
[7] = (hÆfÓöes[1][i+7]; 
ö6
[7] = (half)lines[1][i+8];

58 
ö7
[0] = (
hÆf
)
löes
[2][
i
-1]; 
ö8
[0] = (hÆfÓöes[2][i+0]; 
ö9
[0] = (half)lines[2][i+1];

59 
ö7
[1] = (
hÆf
)
löes
[2][
i
-0]; 
ö8
[1] = (hÆfÓöes[2][i+1]; 
ö9
[1] = (half)lines[2][i+2];

60 
ö7
[2] = (
hÆf
)
löes
[2][
i
+1]; 
ö8
[2] = (hÆfÓöes[2][i+2]; 
ö9
[2] = (half)lines[2][i+3];

61 
ö7
[3] = (
hÆf
)
löes
[2][
i
+2]; 
ö8
[3] = (hÆfÓöes[2][i+3]; 
ö9
[3] = (half)lines[2][i+4];

62 
ö7
[4] = (
hÆf
)
löes
[2][
i
+3]; 
ö8
[4] = (hÆfÓöes[2][i+4]; 
ö9
[4] = (half)lines[2][i+5];

63 
ö7
[5] = (
hÆf
)
löes
[2][
i
+4]; 
ö8
[5] = (hÆfÓöes[2][i+5]; 
ö9
[5] = (half)lines[2][i+6];

64 
ö7
[6] = (
hÆf
)
löes
[2][
i
+5]; 
ö8
[6] = (hÆfÓöes[2][i+6]; 
ö9
[6] = (half)lines[2][i+7];

65 
ö7
[7] = (
hÆf
)
löes
[2][
i
+6]; 
ö8
[7] = (hÆfÓöes[2][i+7]; 
ö9
[7] = (half)lines[2][i+8];

70 
ªz1
 = 
	`__buûtö_shave_vau_mul_f16_º
 (
ö1
, 
c⁄v1
);

71 
ªz2
 = 
	`__buûtö_shave_vau_mul_f16_º
 (
ö2
, 
c⁄v2
);

72 
ªz3
 = 
	`__buûtö_shave_vau_mul_f16_º
 (
ö3
, 
c⁄v3
);

73 
ªz4
 = 
	`__buûtö_shave_vau_mul_f16_º
 (
ö4
, 
c⁄v4
);

74 
ªz5
 = 
	`__buûtö_shave_vau_mul_f16_º
 (
ö5
, 
c⁄v5
);

75 
ªz6
 = 
	`__buûtö_shave_vau_mul_f16_º
 (
ö6
, 
c⁄v6
);

76 
ªz7
 = 
	`__buûtö_shave_vau_mul_f16_º
 (
ö7
, 
c⁄v7
);

77 
ªz8
 = 
	`__buûtö_shave_vau_mul_f16_º
 (
ö8
, 
c⁄v8
);

78 
ªz9
 = 
	`__buûtö_shave_vau_mul_f16_º
 (
ö9
, 
c⁄v9
);

80 
ªz2
 = 
	`__buûtö_shave_vau_add_f16_º
 ( 
ªz1
,Ñez2 );

81 
ªz4
 = 
	`__buûtö_shave_vau_add_f16_º
 ( 
ªz3
,Ñez4 );

82 
ªz6
 = 
	`__buûtö_shave_vau_add_f16_º
 ( 
ªz5
,Ñez6 );

83 
ªz8
 = 
	`__buûtö_shave_vau_add_f16_º
 ( 
ªz7
,Ñez8 );

85 
ªz4
 = 
	`__buûtö_shave_vau_add_f16_º
 ( 
ªz2
,Ñez4 );

86 
ªz8
 = 
	`__buûtö_shave_vau_add_f16_º
 ( 
ªz6
,Ñez8 );

88 
ªz8
 = 
	`__buûtö_shave_vau_add_f16_º
 ( 
ªz4
,Ñez8 );

89 
ªz9
 = 
	`__buûtö_shave_vau_add_f16_º
 ( 
ªz8
,Ñez9 );

91 
j
 = 0; j< 8; j++)

93 *
ouçut
 = (
ªz9
[
j
] > (
hÆf
)255Ë? 255 : (
u8
)rez9[j];

94 *
ouçut
 = (
ªz9
[
j
] < (
hÆf
)0Ë? 0 : (
u8
)rez9[j];

96 
ouçut
++;

101 
	}
}

	@HowTo/SimpleCrossCompilableCVPipe/myriad/shave/kernels/convolution3x3/convolution3x3_intr.h

1 #i‚de‡
__CONVOLUTION3X3_INTR_H__


2 
	#__CONVOLUTION3X3_INTR_H__


	)

3 
	~<mv_ty≥s.h
>

4 
	~<mvcv_ma¸o.h
>

14 "C" 
C⁄vﬁuti⁄3x3_öå
(
u8
** 
ö
, u8** 
out
, 
hÆf
 
c⁄v
[9], 
u32
 
öWidth
);

	@HowTo/SimpleCrossCompilableCVPipe/myriad/shave/kernels/convolution7x7/convolution7x7_intr.cpp

1 
	~"c⁄vﬁuti⁄7x7_öå.h
"

3 
	$C⁄vﬁuti⁄7x7_öå
(
u8
** 
ö
, u8** 
out
, 
hÆf
 *
c⁄v
, 
öWidth
)

6 
i
,
j
;

7 
u8
* 
löes
[7];

8 
u8
 *
ouçut_buf
 = *
out
;

9 
hÆf8
 
c⁄vx
[49], 
ªz
[49], 
öput
[49], 
ouçut
;

13 
löes
[0] = 
ö
[0]; 
ouçut
[0] = (
hÆf
)0;

14 
löes
[1] = 
ö
[1]; 
ouçut
[1] = (
hÆf
)0;

15 
löes
[2] = 
ö
[2]; 
ouçut
[2] = (
hÆf
)0;

16 
löes
[3] = 
ö
[3]; 
ouçut
[3] = (
hÆf
)0;

17 
löes
[4] = 
ö
[4]; 
ouçut
[4] = (
hÆf
)0;

18 
löes
[5] = 
ö
[5]; 
ouçut
[5] = (
hÆf
)0;

19 
löes
[6] = 
ö
[6]; 
ouçut
[6] = (
hÆf
)0;

21 
i
=0; i<49; i++)

23 
j
=0;j<8;j++)

25 
c⁄vx
[
i
][
j
] = 
c⁄v
[i];

31 
i
 = 0; i < (
s32
)
öWidth
; i = i+8)

33 
ouçut
 =
	`__buûtö_shave_vau_sub_f16_º
 ( output, output );

34 
öput
[0][0] = (
hÆf
)
löes
[0][
i
-3]; input[1][0] = (half)lines[0][i-2]; input[2][0] = (half)lines[0][i-1]; input[3][0] = (half)lines[0][i-0]; input[4][0] = (half)lines[0][i+1]; input[5][0] = (half)lines[0][i+2]; input[6][0] = (half)lines[0][i+3];

35 
öput
[0][1] = (
hÆf
)
löes
[0][
i
-2]; input[1][1] = (half)lines[0][i-1]; input[2][1] = (half)lines[0][i-0]; input[3][1] = (half)lines[0][i+1]; input[4][1] = (half)lines[0][i+2]; input[5][1] = (half)lines[0][i+3]; input[6][1] = (half)lines[0][i+4];

36 
öput
[0][2] = (
hÆf
)
löes
[0][
i
-1]; input[1][2] = (half)lines[0][i-0]; input[2][2] = (half)lines[0][i+1]; input[3][2] = (half)lines[0][i+2]; input[4][2] = (half)lines[0][i+3]; input[5][2] = (half)lines[0][i+4]; input[6][2] = (half)lines[0][i+5];

37 
öput
[0][3] = (
hÆf
)
löes
[0][
i
-0]; input[1][3] = (half)lines[0][i+1]; input[2][3] = (half)lines[0][i+2]; input[3][3] = (half)lines[0][i+3]; input[4][3] = (half)lines[0][i+4]; input[5][3] = (half)lines[0][i+5]; input[6][3] = (half)lines[0][i+6];

38 
öput
[0][4] = (
hÆf
)
löes
[0][
i
+1]; input[1][4] = (half)lines[0][i+2]; input[2][4] = (half)lines[0][i+3]; input[3][4] = (half)lines[0][i+4]; input[4][4] = (half)lines[0][i+5]; input[5][4] = (half)lines[0][i+6]; input[6][4] = (half)lines[0][i+7];

39 
öput
[0][5] = (
hÆf
)
löes
[0][
i
+2]; input[1][5] = (half)lines[0][i+3]; input[2][5] = (half)lines[0][i+4]; input[3][5] = (half)lines[0][i+5]; input[4][5] = (half)lines[0][i+6]; input[5][5] = (half)lines[0][i+7]; input[6][5] = (half)lines[0][i+8];

40 
öput
[0][6] = (
hÆf
)
löes
[0][
i
+3]; input[1][6] = (half)lines[0][i+4]; input[2][6] = (half)lines[0][i+5]; input[3][6] = (half)lines[0][i+6]; input[4][6] = (half)lines[0][i+7]; input[5][6] = (half)lines[0][i+8]; input[6][6] = (half)lines[0][i+9];

41 
öput
[0][7] = (
hÆf
)
löes
[0][
i
+4]; input[1][7] = (half)lines[0][i+5]; input[2][7] = (half)lines[0][i+6]; input[3][7] = (half)lines[0][i+7]; input[4][7] = (half)lines[0][i+8]; input[5][7] = (half)lines[0][i+9]; input[6][7] = (half)lines[0][i+10];

43 
öput
[7][0] = (
hÆf
)
löes
[1][
i
-3]; input[8][0] = (half)lines[1][i-2]; input[9][0] = (half)lines[1][i-1]; input[10][0] = (half)lines[1][i-0]; input[11][0] = (half)lines[1][i+1]; input[12][0] = (half)lines[1][i+2]; input[13][0] = (half)lines[1][i+3];

44 
öput
[7][1] = (
hÆf
)
löes
[1][
i
-2]; input[8][1] = (half)lines[1][i-1]; input[9][1] = (half)lines[1][i-0]; input[10][1] = (half)lines[1][i+1]; input[11][1] = (half)lines[1][i+2]; input[12][1] = (half)lines[1][i+3]; input[13][1] = (half)lines[1][i+4];

45 
öput
[7][2] = (
hÆf
)
löes
[1][
i
-1]; input[8][2] = (half)lines[1][i-0]; input[9][2] = (half)lines[1][i+1]; input[10][2] = (half)lines[1][i+2]; input[11][2] = (half)lines[1][i+3]; input[12][2] = (half)lines[1][i+4]; input[13][2] = (half)lines[1][i+5];

46 
öput
[7][3] = (
hÆf
)
löes
[1][
i
-0]; input[8][3] = (half)lines[1][i+1]; input[9][3] = (half)lines[1][i+2]; input[10][3] = (half)lines[1][i+3]; input[11][3] = (half)lines[1][i+4]; input[12][3] = (half)lines[1][i+5]; input[13][3] = (half)lines[1][i+6];

47 
öput
[7][4] = (
hÆf
)
löes
[1][
i
+1]; input[8][4] = (half)lines[1][i+2]; input[9][4] = (half)lines[1][i+3]; input[10][4] = (half)lines[1][i+4]; input[11][4] = (half)lines[1][i+5]; input[12][4] = (half)lines[1][i+6]; input[13][4] = (half)lines[1][i+7];

48 
öput
[7][5] = (
hÆf
)
löes
[1][
i
+2]; input[8][5] = (half)lines[1][i+3]; input[9][5] = (half)lines[1][i+4]; input[10][5] = (half)lines[1][i+5]; input[11][5] = (half)lines[1][i+6]; input[12][5] = (half)lines[1][i+7]; input[13][5] = (half)lines[1][i+8];

49 
öput
[7][6] = (
hÆf
)
löes
[1][
i
+3]; input[8][6] = (half)lines[1][i+4]; input[9][6] = (half)lines[1][i+5]; input[10][6] = (half)lines[1][i+6]; input[11][6] = (half)lines[1][i+7]; input[12][6] = (half)lines[1][i+8]; input[13][6] = (half)lines[1][i+9];

50 
öput
[7][7] = (
hÆf
)
löes
[1][
i
+4]; input[8][7] = (half)lines[1][i+5]; input[9][7] = (half)lines[1][i+6]; input[10][7] = (half)lines[1][i+7]; input[11][7] = (half)lines[1][i+8]; input[12][7] = (half)lines[1][i+9]; input[13][7] = (half)lines[1][i+10];

52 
öput
[14][0] = (
hÆf
)
löes
[2][
i
-3]; input[15][0] = (half)lines[2][i-2]; input[16][0] = (half)lines[2][i-1]; input[17][0] = (half)lines[2][i-0]; input[18][0] = (half)lines[2][i+1]; input[19][0] = (half)lines[2][i+2]; input[20][0] = (half)lines[2][i+3];

53 
öput
[14][1] = (
hÆf
)
löes
[2][
i
-2]; input[15][1] = (half)lines[2][i-1]; input[16][1] = (half)lines[2][i-0]; input[17][1] = (half)lines[2][i+1]; input[18][1] = (half)lines[2][i+2]; input[19][1] = (half)lines[2][i+3]; input[20][1] = (half)lines[2][i+4];

54 
öput
[14][2] = (
hÆf
)
löes
[2][
i
-1]; input[15][2] = (half)lines[2][i-0]; input[16][2] = (half)lines[2][i+1]; input[17][2] = (half)lines[2][i+2]; input[18][2] = (half)lines[2][i+3]; input[19][2] = (half)lines[2][i+4]; input[20][2] = (half)lines[2][i+5];

55 
öput
[14][3] = (
hÆf
)
löes
[2][
i
-0]; input[15][3] = (half)lines[2][i+1]; input[16][3] = (half)lines[2][i+2]; input[17][3] = (half)lines[2][i+3]; input[18][3] = (half)lines[2][i+4]; input[19][3] = (half)lines[2][i+5]; input[20][3] = (half)lines[2][i+6];

56 
öput
[14][4] = (
hÆf
)
löes
[2][
i
+1]; input[15][4] = (half)lines[2][i+2]; input[16][4] = (half)lines[2][i+3]; input[17][4] = (half)lines[2][i+4]; input[18][4] = (half)lines[2][i+5]; input[19][4] = (half)lines[2][i+6]; input[20][4] = (half)lines[2][i+7];

57 
öput
[14][5] = (
hÆf
)
löes
[2][
i
+2]; input[15][5] = (half)lines[2][i+3]; input[16][5] = (half)lines[2][i+4]; input[17][5] = (half)lines[2][i+5]; input[18][5] = (half)lines[2][i+6]; input[19][5] = (half)lines[2][i+7]; input[20][5] = (half)lines[2][i+8];

58 
öput
[14][6] = (
hÆf
)
löes
[2][
i
+3]; input[15][6] = (half)lines[2][i+4]; input[16][6] = (half)lines[2][i+5]; input[17][6] = (half)lines[2][i+6]; input[18][6] = (half)lines[2][i+7]; input[19][6] = (half)lines[2][i+8]; input[20][6] = (half)lines[2][i+9];

59 
öput
[14][7] = (
hÆf
)
löes
[2][
i
+4]; input[15][7] = (half)lines[2][i+5]; input[16][7] = (half)lines[2][i+6]; input[17][7] = (half)lines[2][i+7]; input[18][7] = (half)lines[2][i+8]; input[19][7] = (half)lines[2][i+9]; input[20][7] = (half)lines[2][i+10];

61 
öput
[21][0] = (
hÆf
)
löes
[3][
i
-3]; input[22][0] = (half)lines[3][i-2]; input[23][0] = (half)lines[3][i-1]; input[24][0] = (half)lines[3][i-0]; input[25][0] = (half)lines[3][i+1]; input[26][0] = (half)lines[3][i+2]; input[27][0] = (half)lines[3][i+3];

62 
öput
[21][1] = (
hÆf
)
löes
[3][
i
-2]; input[22][1] = (half)lines[3][i-1]; input[23][1] = (half)lines[3][i-0]; input[24][1] = (half)lines[3][i+1]; input[25][1] = (half)lines[3][i+2]; input[26][1] = (half)lines[3][i+3]; input[27][1] = (half)lines[3][i+4];

63 
öput
[21][2] = (
hÆf
)
löes
[3][
i
-1]; input[22][2] = (half)lines[3][i-0]; input[23][2] = (half)lines[3][i+1]; input[24][2] = (half)lines[3][i+2]; input[25][2] = (half)lines[3][i+3]; input[26][2] = (half)lines[3][i+4]; input[27][2] = (half)lines[3][i+5];

64 
öput
[21][3] = (
hÆf
)
löes
[3][
i
-0]; input[22][3] = (half)lines[3][i+1]; input[23][3] = (half)lines[3][i+2]; input[24][3] = (half)lines[3][i+3]; input[25][3] = (half)lines[3][i+4]; input[26][3] = (half)lines[3][i+5]; input[27][3] = (half)lines[3][i+6];

65 
öput
[21][4] = (
hÆf
)
löes
[3][
i
+1]; input[22][4] = (half)lines[3][i+2]; input[23][4] = (half)lines[3][i+3]; input[24][4] = (half)lines[3][i+4]; input[25][4] = (half)lines[3][i+5]; input[26][4] = (half)lines[3][i+6]; input[27][4] = (half)lines[3][i+7];

66 
öput
[21][5] = (
hÆf
)
löes
[3][
i
+2]; input[22][5] = (half)lines[3][i+3]; input[23][5] = (half)lines[3][i+4]; input[24][5] = (half)lines[3][i+5]; input[25][5] = (half)lines[3][i+6]; input[26][5] = (half)lines[3][i+7]; input[27][5] = (half)lines[3][i+8];

67 
öput
[21][6] = (
hÆf
)
löes
[3][
i
+3]; input[22][6] = (half)lines[3][i+4]; input[23][6] = (half)lines[3][i+5]; input[24][6] = (half)lines[3][i+6]; input[25][6] = (half)lines[3][i+7]; input[26][6] = (half)lines[3][i+8]; input[27][6] = (half)lines[3][i+9];

68 
öput
[21][7] = (
hÆf
)
löes
[3][
i
+4]; input[22][7] = (half)lines[3][i+5]; input[23][7] = (half)lines[3][i+6]; input[24][7] = (half)lines[3][i+7]; input[25][7] = (half)lines[3][i+8]; input[26][7] = (half)lines[3][i+9]; input[27][7] = (half)lines[3][i+10];

70 
öput
[28][0] = (
hÆf
)
löes
[4][
i
-3]; input[29][0] = (half)lines[4][i-2]; input[30][0] = (half)lines[4][i-1]; input[31][0] = (half)lines[4][i-0]; input[32][0] = (half)lines[4][i+1]; input[33][0] = (half)lines[4][i+2]; input[34][0] = (half)lines[4][i+3];

71 
öput
[28][1] = (
hÆf
)
löes
[4][
i
-2]; input[29][1] = (half)lines[4][i-1]; input[30][1] = (half)lines[4][i-0]; input[31][1] = (half)lines[4][i+1]; input[32][1] = (half)lines[4][i+2]; input[33][1] = (half)lines[4][i+3]; input[34][1] = (half)lines[4][i+4];

72 
öput
[28][2] = (
hÆf
)
löes
[4][
i
-1]; input[29][2] = (half)lines[4][i-0]; input[30][2] = (half)lines[4][i+1]; input[31][2] = (half)lines[4][i+2]; input[32][2] = (half)lines[4][i+3]; input[33][2] = (half)lines[4][i+4]; input[34][2] = (half)lines[4][i+5];

73 
öput
[28][3] = (
hÆf
)
löes
[4][
i
-0]; input[29][3] = (half)lines[4][i+1]; input[30][3] = (half)lines[4][i+2]; input[31][3] = (half)lines[4][i+3]; input[32][3] = (half)lines[4][i+4]; input[33][3] = (half)lines[4][i+5]; input[34][3] = (half)lines[4][i+6];

74 
öput
[28][4] = (
hÆf
)
löes
[4][
i
+1]; input[29][4] = (half)lines[4][i+2]; input[30][4] = (half)lines[4][i+3]; input[31][4] = (half)lines[4][i+4]; input[32][4] = (half)lines[4][i+5]; input[33][4] = (half)lines[4][i+6]; input[34][4] = (half)lines[4][i+7];

75 
öput
[28][5] = (
hÆf
)
löes
[4][
i
+2]; input[29][5] = (half)lines[4][i+3]; input[30][5] = (half)lines[4][i+4]; input[31][5] = (half)lines[4][i+5]; input[32][5] = (half)lines[4][i+6]; input[33][5] = (half)lines[4][i+7]; input[34][5] = (half)lines[4][i+8];

76 
öput
[28][6] = (
hÆf
)
löes
[4][
i
+3]; input[29][6] = (half)lines[4][i+4]; input[30][6] = (half)lines[4][i+5]; input[31][6] = (half)lines[4][i+6]; input[32][6] = (half)lines[4][i+7]; input[33][6] = (half)lines[4][i+8]; input[34][6] = (half)lines[4][i+9];

77 
öput
[28][7] = (
hÆf
)
löes
[4][
i
+4]; input[29][7] = (half)lines[4][i+5]; input[30][7] = (half)lines[4][i+6]; input[31][7] = (half)lines[4][i+7]; input[32][7] = (half)lines[4][i+8]; input[33][7] = (half)lines[4][i+9]; input[34][7] = (half)lines[4][i+10];

79 
öput
[35][0] = (
hÆf
)
löes
[5][
i
-3]; input[36][0] = (half)lines[5][i-2]; input[37][0] = (half)lines[5][i-1]; input[38][0] = (half)lines[5][i-0]; input[39][0] = (half)lines[5][i+1]; input[40][0] = (half)lines[5][i+2]; input[41][0] = (half)lines[5][i+3];

80 
öput
[35][1] = (
hÆf
)
löes
[5][
i
-2]; input[36][1] = (half)lines[5][i-1]; input[37][1] = (half)lines[5][i-0]; input[38][1] = (half)lines[5][i+1]; input[39][1] = (half)lines[5][i+2]; input[40][1] = (half)lines[5][i+3]; input[41][1] = (half)lines[5][i+4];

81 
öput
[35][2] = (
hÆf
)
löes
[5][
i
-1]; input[36][2] = (half)lines[5][i-0]; input[37][2] = (half)lines[5][i+1]; input[38][2] = (half)lines[5][i+2]; input[39][2] = (half)lines[5][i+3]; input[40][2] = (half)lines[5][i+4]; input[41][2] = (half)lines[5][i+5];

82 
öput
[35][3] = (
hÆf
)
löes
[5][
i
-0]; input[36][3] = (half)lines[5][i+1]; input[37][3] = (half)lines[5][i+2]; input[38][3] = (half)lines[5][i+3]; input[39][3] = (half)lines[5][i+4]; input[40][3] = (half)lines[5][i+5]; input[41][3] = (half)lines[5][i+6];

83 
öput
[35][4] = (
hÆf
)
löes
[5][
i
+1]; input[36][4] = (half)lines[5][i+2]; input[37][4] = (half)lines[5][i+3]; input[38][4] = (half)lines[5][i+4]; input[39][4] = (half)lines[5][i+5]; input[40][4] = (half)lines[5][i+6]; input[41][4] = (half)lines[5][i+7];

84 
öput
[35][5] = (
hÆf
)
löes
[5][
i
+2]; input[36][5] = (half)lines[5][i+3]; input[37][5] = (half)lines[5][i+4]; input[38][5] = (half)lines[5][i+5]; input[39][5] = (half)lines[5][i+6]; input[40][5] = (half)lines[5][i+7]; input[41][5] = (half)lines[5][i+8];

85 
öput
[35][6] = (
hÆf
)
löes
[5][
i
+3]; input[36][6] = (half)lines[5][i+4]; input[37][6] = (half)lines[5][i+5]; input[38][6] = (half)lines[5][i+6]; input[39][6] = (half)lines[5][i+7]; input[40][6] = (half)lines[5][i+8]; input[41][6] = (half)lines[5][i+9];

86 
öput
[35][7] = (
hÆf
)
löes
[5][
i
+4]; input[36][7] = (half)lines[5][i+5]; input[37][7] = (half)lines[5][i+6]; input[38][7] = (half)lines[5][i+7]; input[39][7] = (half)lines[5][i+8]; input[40][7] = (half)lines[5][i+9]; input[41][7] = (half)lines[5][i+10];

88 
öput
[42][0] = (
hÆf
)
löes
[6][
i
-3]; input[43][0] = (half)lines[6][i-2]; input[44][0] = (half)lines[6][i-1]; input[45][0] = (half)lines[6][i-0]; input[46][0] = (half)lines[6][i+1]; input[47][0] = (half)lines[6][i+2]; input[48][0] = (half)lines[6][i+3];

89 
öput
[42][1] = (
hÆf
)
löes
[6][
i
-2]; input[43][1] = (half)lines[6][i-1]; input[44][1] = (half)lines[6][i-0]; input[45][1] = (half)lines[6][i+1]; input[46][1] = (half)lines[6][i+2]; input[47][1] = (half)lines[6][i+3]; input[48][1] = (half)lines[6][i+4];

90 
öput
[42][2] = (
hÆf
)
löes
[6][
i
-1]; input[43][2] = (half)lines[6][i-0]; input[44][2] = (half)lines[6][i+1]; input[45][2] = (half)lines[6][i+2]; input[46][2] = (half)lines[6][i+3]; input[47][2] = (half)lines[6][i+4]; input[48][2] = (half)lines[6][i+5];

91 
öput
[42][3] = (
hÆf
)
löes
[6][
i
-0]; input[43][3] = (half)lines[6][i+1]; input[44][3] = (half)lines[6][i+2]; input[45][3] = (half)lines[6][i+3]; input[46][3] = (half)lines[6][i+4]; input[47][3] = (half)lines[6][i+5]; input[48][3] = (half)lines[6][i+6];

92 
öput
[42][4] = (
hÆf
)
löes
[6][
i
+1]; input[43][4] = (half)lines[6][i+2]; input[44][4] = (half)lines[6][i+3]; input[45][4] = (half)lines[6][i+4]; input[46][4] = (half)lines[6][i+5]; input[47][4] = (half)lines[6][i+6]; input[48][4] = (half)lines[6][i+7];

93 
öput
[42][5] = (
hÆf
)
löes
[6][
i
+2]; input[43][5] = (half)lines[6][i+3]; input[44][5] = (half)lines[6][i+4]; input[45][5] = (half)lines[6][i+5]; input[46][5] = (half)lines[6][i+6]; input[47][5] = (half)lines[6][i+7]; input[48][5] = (half)lines[6][i+8];

94 
öput
[42][6] = (
hÆf
)
löes
[6][
i
+3]; input[43][6] = (half)lines[6][i+4]; input[44][6] = (half)lines[6][i+5]; input[45][6] = (half)lines[6][i+6]; input[46][6] = (half)lines[6][i+7]; input[47][6] = (half)lines[6][i+8]; input[48][6] = (half)lines[6][i+9];

95 
öput
[42][7] = (
hÆf
)
löes
[6][
i
+4]; input[43][7] = (half)lines[6][i+5]; input[44][7] = (half)lines[6][i+6]; input[45][7] = (half)lines[6][i+7]; input[46][7] = (half)lines[6][i+8]; input[47][7] = (half)lines[6][i+9]; input[48][7] = (half)lines[6][i+10];

98 
j
=0; j<49;j++)

100 
ªz
[
j
] = 
	`__buûtö_shave_vau_mul_f16_º
 (
öput
[j], 
c⁄vx
[j]);

103 
j
=0; j<49; j++)

105 
ouçut
 = 
	`__buûtö_shave_vau_add_f16_º
 ( 
ªz
[
j
], output );

108 
j
 = 0; j< 8; j++)

110 *
ouçut_buf
 = (
ouçut
[
j
] > (
hÆf
)255Ë? 255 : (
u8
)output[j];

111 *
ouçut_buf
 = (
ouçut
[
j
] < (
hÆf
)0Ë? 0 : (
u8
)output[j];

113 
ouçut_buf
++;

119 
	}
}

	@HowTo/SimpleCrossCompilableCVPipe/myriad/shave/kernels/convolution7x7/convolution7x7_intr.h

1 #i‚de‡
__CONVOLUTION7x7_INTR_H__


2 
	#__CONVOLUTION7x7_INTR_H__


	)

3 
	~<mv_ty≥s.h
>

4 
	~<mvcv_ma¸o.h
>

14 "C" 
C⁄vﬁuti⁄7x7_öå
–
u8
** 
ö
, u8** 
out
, 
hÆf
 
c⁄v
[49], 
öWidth
);

	@HowTo/SimpleCrossCompilableCVPipe/pc/Modules/Main/Main.cpp

10 
	#_CRT_SECURE_NO_WARNINGS


	)

11 
	#_SCL_SECURE_NO_WARNINGS


	)

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

21 
	~<°rög
>

24 
	~<Sim∂eCrossCompûabÀCVPùe.h
>

25 
	~<Buf„rs.h
>

27 
usög
 
«me•a˚
 
	g°d
;

35 
	$maö
(
¨gc
, * 
¨gv
[])

38 
FILE
* 
öputImage
 = 
	`f›í
("../../input/DunLoghaire_320x240.yuv", "rb");

39 
FILE
* 
ouçutImage
 = 
	`f›í
("output_320x240_P400.yuv", "wb");

41 c⁄° 
width
 = 
MAX_WIDTH
;

42 c⁄° 
height
 = 
MAX_HEIGHT
;

44 * 
öputBuf„r
 = (*)
	`mÆloc
((Ë* 
width
 * 
height
);

45 * 
ouçutBuf„r
 = (*)
	`mÆloc
((Ë* 
width
 * 
height
);

47 
byãsLﬂded
 = 
	`‰ód
(
öputBuf„r
, 1, 
width
 * 
height
, 
öputImage
);

48 if(
byãsLﬂded
!=
width
 * 
height
) {

49 if(
	`„of
(
öputImage
)){

50 
	`¥ötf
("End of file!\n");

52 if(
	`„º‹
(
öputImage
)){

53 
	`¥ötf
("ErrorÑeading from file.\n");

55 
	`¥ötf
("CouldÇotÑead from streamÉnough bytes.\n");

56 
	`¥ötf
("Ex≥˘ed %u,Üﬂded %u byãs\n", 
width
*
height
, 
byãsLﬂded
);

57 
	`exô
(1);

59 
	`f˛o£
(
öputImage
);

66 
	`Sim∂eCrossCompûabÀCVPùeInô
(
width
);

69 
	`Sim∂eCrossCompûabÀCVPùeRun
(
öputBuf„r
, 
ouçutBuf„r
, 
width
, 
height
);

72 
	`fwrôe
(
ouçutBuf„r
, 1, (Ë* 
width
 * 
height
, 
ouçutImage
);

73 
	`f˛o£
(
ouçutImage
);

76 
	`‰ì
(
öputBuf„r
);

77 
	`‰ì
(
ouçutBuf„r
);

80 
	}
}

	@HowTo/StackPainting/leon/app_config.c

12 
	~<ªgi°îsMyrüd.h
>

13 
	~<DrvC¥.h
>

14 
	~<DrvSvu.h
>

15 
	~<DrvRegUtûs.h
>

16 
	~<DrvShaveL2Cache.h
>

17 
	~<DrvDdr.h
>

18 
	~<DrvLe⁄L2C.h
>

20 
	~"≠p_c⁄fig.h
"

26 
	#L2CACHE_CFG
 (
SHAVE_L2CACHE_NORMAL_MODE
)

	)

41 
	$öôClocksAndMem‹y
()

43 
s32
 
i
;

45 
tyAuxClkDividîCfg
 
auxClkAŒOn
[] =

47 {
AUX_CLK_MASK_UART
, 
CLK_SRC_REFCLK0
, 96, 625},

51 
tySocClockC⁄fig
 
≠pClockC⁄fig600_266
 =

53 .
ªfClk0I≈utKhz
 = 12000,

54 .
ªfClk1I≈utKhz
 = 0,

55 .
èrgëPŒ0FªqKhz
 = 266000,

56 .
èrgëPŒ1FªqKhz
 = 0,

57 .
˛kSrcPŒ1
 = 
CLK_SRC_REFCLK0
,

58 .
ma°îClkDivNumî©‹
 = 1,

59 .
ma°îClkDivDíomö©‹
 = 1,

60 .
cssDssClockE«bÀMask
 = 
DEFAULT_CORE_CSS_DSS_CLOCKS
,

61 .
mssClockE«bÀMask
 = 
APP_MSS_CLOCKS
,

62 .
u∑ClockE«bÀMask
 = 
APP_UPA_CLOCKS
,

63 .
pAuxClkCfg
 = 
auxClkAŒOn
,

66 
	`DrvC¥Inô
();

67 
	`DrvC¥SëupClocks
(&
≠pClockC⁄fig600_266
);

69 
	`DrvDdrInôüli£
(
NULL
);

71 
	`DrvC¥SysDevi˚A˘i⁄
(
UPA_DOMAIN
, 
DEASSERT_RESET
, 
APP_UPA_CLOCKS
);

72 
	`DrvC¥SysDevi˚A˘i⁄
(
MSS_DOMAIN
, 
DEASSERT_RESET
, 
APP_MSS_CLOCKS
);

75 
	`DrvLL2CFlushOpOnAŒLöes
(
LL2C_OPERATION_INVALIDATE
, 0);

78 
	`DrvShaveL2CacheSëupP¨tôi⁄
(
SHAVEPART256KB
);

81 
	`DrvShaveL2CacheAŒoˇãSëP¨tôi⁄s
();

84 
i
 = 0; i < 12; i++)

86 
	`DrvShaveL2CacheSëLSUP¨tId
(
i
, 0);

89 
	`DrvShaveL2CacheP¨tôi⁄InvÆid©e
(0);

91 
	`swcLe⁄SëPIL
(0);

94 
	}
}

	@HowTo/StackPainting/leon/app_config.h

9 #i‚de‡
_APP_CONFIG_H_


10 
	#_APP_CONFIG_H_


	)

14 
	~<mv_ty≥s.h
>

15 
	~<DrvC¥Deföes.h
>

20 
	#APP_MSS_CLOCKS
 (
DEV_MSS_APB_SLV
 | \

21 
DEV_MSS_APB2_CTRL
 | \

22 
DEV_MSS_RTBRIDGE
 | \

23 
DEV_MSS_AXI_BRIDGE
 | \

24 
DEV_MSS_MXI_CTRL
 | \

25 
DEV_MSS_MXI_DEFSLV
 | \

26 
DEV_MSS_AXI_MON
 | \

27 
DEV_MSS_TIM
 )

	)

29 
	#APP_UPA_CLOCKS
 (
DEV_UPA_SH0
 | \

30 
DEV_UPA_SH1
 | \

31 
DEV_UPA_SH2
 | \

32 
DEV_UPA_SHAVE_L2
 | \

33 
DEV_UPA_CDMA
 | \

34 
DEV_UPA_CTRL
 )

	)

40 
öôClocksAndMem‹y
();

	@HowTo/StackPainting/leon/main.c

12 
	~<°dio.h
>

13 
	~<°dlib.h
>

14 
	~<swcShaveLﬂdî.h
>

15 
	~<DrvShaveL2Cache.h
>

16 
	~<DrvTimî.h
>

17 
	~<DrvSvu.h
>

18 
	~<DrvLe⁄.h
>

19 
	~<VcsHooksApi.h
>

20 
	~<UnôTe°Api.h
>

21 
	~<swcCrc.h
>

22 
	~<DrvLe⁄L2C.h
>

23 
	~"≠p_c⁄fig.h
"

28 
	#SHAVE_MAX_NO
 3

	)

29 
	#TEST_CANARY_VALUE
 0xBEEFC0FE

	)

30 
	#TEST_PATTERN1
 0xA1FA1FA1

	)

31 
	#TEST_PATTERN2
 0x0FA110FF

	)

32 
	#TEST_PATTERN3
 0x10ADAB13

	)

33 
	#MAX_TEST_STACK_SIZE
 512

	)

34 
	#MAX_PATTERN_SIZE
 (
MAX_TEST_STACK_SIZE
 / 2)

	)

39 
u32
 
SèckPaöãr0_E¡ry
;

40 
u32
 
SèckPaöãr1_E¡ry
;

41 
u32
 
SèckPaöãr2_E¡ry
;

44 
u32
 
	g°¨tShave
[
SHAVE_MAX_NO
] = {

45 (
u32
Ë&
SèckPaöãr0_E¡ry
,

46 (
u32
Ë&
SèckPaöãr1_E¡ry
,

47 (
u32
Ë&
SèckPaöãr2_E¡ry


53 c⁄° 
u32
 
	gã°P©ã∫
[] = {

54 [ 0 ... 
MAX_PATTERN_SIZE
 - 1] = 
TEST_PATTERN1
,

55 [ 
MAX_PATTERN_SIZE
 ... 2 * MAX_PATTERN_SIZE - 1] = 
TEST_PATTERN2
,

56 [2 * 
MAX_PATTERN_SIZE
 ... 3 * MAX_PATTERN_SIZE - 1] = 
TEST_PATTERN3


64 #ifde‡
PRINT_STACK


65 
	$dumpMem‹y
(
u32
 *
d©aBuf„r
, 
buf„rSize
)

67 
i
, 
j
;

69 
	`¥ötf
("\n ");

71 
i
 = 0; i < 16 && i < 
buf„rSize
; i += 4)

73 
	`¥ötf
("%8x ", 
i
);

76 
i
 = 0, 
j
 = 0; i < 
buf„rSize
; i++)

78 i‡(0 =
i
 % 4)

80 
	`¥ötf
("\n0x%08X: ", (Ë&
d©aBuf„r
[
j
]);

82 
j
 += 4;

85 
	`¥ötf
("%08lx ", 
d©aBuf„r
[
i
]);

88 
	`¥ötf
("\n");

89 
	}
}

92 
	$maö
()

94 
u32
 *
°ackSèπ
;

95 
u32
 *
°ackEnd
;

96 
u32
 
shaveSèckSize
;

97 
u32
 
shaveSèckLígth
;

98 
u32
 
fûlSèckSize
;

99 
u32
 
fûlSèckLígth
;

100 
s32
 
sc
, 
shv
;

102 
s32
 
ã°Pr›‹ti⁄
[] = {29, 71, 49};

104 
	`unôTe°Inô
();

105 
sc
 = 
	`öôClocksAndMem‹y
();

107 i‡(
sc
)

108  
sc
;

110 
shv
 = 0; shv < 
SHAVE_MAX_NO
; shv++)

112 
	`¥ötf
("TEST ON SHAVE %lu\n", 
shv
);

113 
shaveSèckSize
 = 
MAX_TEST_STACK_SIZE
 * 
ã°Pr›‹ti⁄
[
shv
] / 100;

115 
shaveSèckSize
 = (shaveSèckSizê& ~7Ë+ (
u32
);

116 
shaveSèckLígth
 = 
shaveSèckSize
 / (
u32
);

118 
fûlSèckLígth
 = 
shaveSèckLígth
 * 
ã°Pr›‹ti⁄
[
shv
] / 100;

120 
fûlSèckLígth
 = fillStackLength ? fillStackLength : 1;

121 
fûlSèckSize
 = 
fûlSèckLígth
 * (
u32
);

123 
	`swcRe£tShave
(
shv
);

124 
	`swcSëAbsﬁuãDeÁu…Sèck
(
shv
);

125 
	`swcSèãC⁄sidîedShaveSèckSize
(
shv
, 
shaveSèckSize
);

128 
°ackSèπ
 = (
u32
 *Ë
	`DrvSvutIrfRód
(
shv
, 19) - (u32);

129 
°ackEnd
 = 
°ackSèπ
 - 
shaveSèckLígth
 + 1;

132 
	`swcSèckPaöãr
(
shv
, 
TEST_CANARY_VALUE
);

134 
	`¥ötf
("Unu£d sèck bef‹ê¥o˚ssög:%lu W\n", 
	`swcGëUnu£dShaveFªeSèck
(
shv
, 
TEST_CANARY_VALUE
));

136 
	`swcSèπShaveCC
(
shv
, 
°¨tShave
[shv], "iii", 
°ackSèπ
, &
ã°P©ã∫
[shv * 
MAX_PATTERN_SIZE
], 
fûlSèckLígth
);

137 
	`swcWaôShave
(
shv
);

138 
	`swcLe⁄FlushDˇche
();

140 
	`unôTe°MemCom∑ª
–(
uöt32_t
*Ë((uöt32_t)
°ackSèπ
 - 
fûlSèckSize
+4), &
ã°P©ã∫
[
shv
 * 
MAX_PATTERN_SIZE
], fillStackSize);

142 #ifde‡
PRINT_STACK


143 
	`dumpMem‹y
(
°ackEnd
, 
shaveSèckLígth
);

145 
ã°DumpFûe
[] = "shvX_stack.bin";

146 
ã°DumpFûe
[3] = '0' + 
shv
;

148 
	`¥ötf
("\nSavög sèck SHAVE%lu i¡ÿfûê%s\n", 
shv
, 
ã°DumpFûe
);

149 
	`ßveMem‹yToFûe
((
u32
Ë
°ackEnd
, 
shaveSèckSize
, 
ã°DumpFûe
);

150 
	`¥ötf
("Unu£d sècká·îÖro˚ssög:%lu W\n\n\n", 
	`swcGëUnu£dShaveFªeSèck
(
shv
, 
TEST_CANARY_VALUE
));

154 
	`unôTe°FöÆRï‹t
();

156 
	}
}

	@HowTo/StackPainting/shaveApps/StackPainter/shaveMain.c

9 
	~<°dio.h
>

10 
	~<°dlib.h
>

12 
	~<mv_ty≥s.h
>

13 
	~<svuComm⁄Shave.h
>

15 
u32
 
__©åibuã__
((
£˘i⁄
(".cmx.d©a"))Ë*
	g°ackT›
, *
	g°ackEnd
;

28 
	$E¡ry
(
u32
 *
°ackSèπ
, u32 *
ã°P©ã∫
, u32 
fûlSize
)

30 
°ackT›
 = 
°ackSèπ
;

31 
°ackEnd
 = 
°ackSèπ
 - 
fûlSize
;

33 
°ackEnd
 !
°ackT›
)

35 *
°ackT›
-- = *
ã°P©ã∫
++;

38 
SHAVE_HALT
;

40 
	}
}

	@HowTo/TraceProfiler/leon/LocalLogEvents.h

5 #i‚de‡
LOCAL_LOG_EVENTS_H


6 
	#LOCAL_LOG_EVENTS_H


	)

8 
	~<dbgLogEvíts.h
>

13 
	mLOG_EVENT_MY_APP_RUN
 = 
LOG_EVENT_LAST_EVENT
 + 1

14 } 
	tLoˇlEvít_t
;

	@HowTo/TraceProfiler/leon/app_config.c

11 
	~<OsDrvC¥.h
>

12 
	~<OsDrvShaveL2Cache.h
>

13 
	~"≠p_c⁄fig.h
"

17 
	#L2CACHE_CFG
 (
SHAVE_L2CACHE_NORMAL_MODE
)

	)

30 
	$öôClocksAndMem‹y
()

32 
s32
 
sc
;

33 
tyAuxClkDividîCfg
 
auxClkAŒOn
[] =

35 {
AUX_CLK_MASK_UART
, 
CLK_SRC_REFCLK0
, 96, 625},

40 
	`OsDrvC¥Inô
();

41 
	`OsDrvC¥O≥n
();

42 
	`OsDrvC¥AuxClockAºayC⁄fig
(
auxClkAŒOn
);

46 
sc
 = 
	`OsDrvShaveL2CacheInô
(
L2CACHE_CFG
);

47 if(
sc
)

48  
sc
;

51 
∑πôi⁄_id
;

52 
	`OsDrvShaveL2CGëP¨tôi⁄
(
SHAVEPART256KB
, &
∑πôi⁄_id
);

55 
sc
 = 
	`OsDrvShaveL2CacheAŒoˇãSëP¨tôi⁄s
();

56 if(
sc
)

57  
sc
;

60 
i
 = 0; i < 12; i++)

62 
	`OsDrvShaveL2CSëN⁄WödowedP¨tôi⁄
(
i
, 
∑πôi⁄_id
, 
NON_WINDOWED_DATA_PARTITION
);

63 
	`OsDrvShaveL2CSëN⁄WödowedP¨tôi⁄
(
i
, 
∑πôi⁄_id
, 
NON_WINDOWED_INSTRUCTIONS_PARTITION
);

66 
	`OsDrvShaveL2CacheP¨tôi⁄InvÆid©e
(
∑πôi⁄_id
);

68 
	}
}

	@HowTo/TraceProfiler/leon/app_config.h

9 #i‚de‡
_APP_CONFIG_H_


10 
	#_APP_CONFIG_H_


	)

17 
	#APP_MSS_CLOCKS
 (
DEV_MSS_APB_SLV
 | \

18 
DEV_MSS_APB2_CTRL
 | \

19 
DEV_MSS_RTBRIDGE
 | \

20 
DEV_MSS_RTAHB_CTRL
 | \

21 
DEV_MSS_LRT
 | \

22 
DEV_MSS_LRT_DSU
 | \

23 
DEV_MSS_LRT_L2C
 | \

24 
DEV_MSS_LRT_ICB
 | \

25 
DEV_MSS_AXI_BRIDGE
 | \

26 
DEV_MSS_MXI_CTRL
 | \

27 
DEV_MSS_MXI_DEFSLV
 | \

28 
DEV_MSS_AXI_MON
 | \

29 
DEV_MSS_TIM
 )

	)

32 
	#APP_UPA_CLOCKS
 (
DEV_UPA_SH0
 | \

33 
DEV_UPA_SH1
 | \

34 
DEV_UPA_SH2
 | \

35 
DEV_UPA_SH3
 | \

36 
DEV_UPA_SH4
 | \

37 
DEV_UPA_SH5
 | \

38 
DEV_UPA_SH6
 | \

39 
DEV_UPA_SH7
 | \

40 
DEV_UPA_SH8
 | \

41 
DEV_UPA_SH9
 | \

42 
DEV_UPA_SH10
 | \

43 
DEV_UPA_SH11
 | \

44 
DEV_UPA_SHAVE_L2
 | \

45 
DEV_UPA_CDMA
 | \

46 
DEV_UPA_CTRL
 )

	)

57 
öôClocksAndMem‹y
();

	@HowTo/TraceProfiler/leon/main.c

11 
	~<°dio.h
>

12 
	~<°dlib.h
>

13 
	~<DrvC¥.h
>

14 
	~<DrvLe⁄.h
>

15 
	~<dbgTø˚rApi.h
>

16 
	~<LoˇlLogEvíts.h
>

17 
	~<OsDrvSvu.h
>

18 
	~"πems_c⁄fig.h
"

19 
	~"sy°em.h
"

20 
	~<VcsHooksApi.h
>

24 
	#DDR_BUF
 
	`__©åibuã__
((
	`£˘i⁄
(".ddr.d©a")))

	)

25 
	#TEST_FRAME_WIDTH
 1280

	)

26 
	#TEST_FRAME_HEIGHT
 720

	)

27 
	#FRAME_SIZE
 (
TEST_FRAME_WIDTH
 * 
TEST_FRAME_HEIGHT
*3/2)

	)

28 
	#SHAVES_USED_FROM_LOS
 6

	)

29 
	#KERNEL_SIZE
 7

	)

34 
πems_id
 
	göôId
;

36 
u8
 
Ãt_öputFøme
;

38 
u32
 
Ãt_°¨t
;

40 
u32
 
Tø˚ProfûÀr6_Aµliˇti⁄Sèπ
;

41 
u32
 
Tø˚ProfûÀr7_Aµliˇti⁄Sèπ
;

42 
u32
 
Tø˚ProfûÀr8_Aµliˇti⁄Sèπ
;

43 
u32
 
Tø˚ProfûÀr9_Aµliˇti⁄Sèπ
;

44 
u32
 
Tø˚ProfûÀr10_Aµliˇti⁄Sèπ
;

45 
u32
 
Tø˚ProfûÀr11_Aµliˇti⁄Sèπ
;

47 
u32
* 
	gTø˚ProfûÀr_Aµliˇti⁄Sèπ
[
SHAVES_USED_FROM_LOS
]= {

48 &
Tø˚ProfûÀr6_Aµliˇti⁄Sèπ
,

49 &
Tø˚ProfûÀr7_Aµliˇti⁄Sèπ
,

50 &
Tø˚ProfûÀr8_Aµliˇti⁄Sèπ
,

51 &
Tø˚ProfûÀr9_Aµliˇti⁄Sèπ
,

52 &
Tø˚ProfûÀr10_Aµliˇti⁄Sèπ
,

53 &
Tø˚ProfûÀr11_Aµliˇti⁄Sèπ
,

56 
DDR_BUF
 
	gout_image_los
[
FRAME_SIZE
];

60 
osDrvSvuH™dÀr_t
 
	gh™dÀr
[6];

61 
swcShaveUnô_t
 
	gSHAVE_NUMBER
[] = {6, 7, 8, 9, 10, 11};

68 
πems_èsk
 
Inô
(
πems_èsk_¨gumít
 
¨gumít
);

69 
πems_èsk
 
SVU_èsk
(
πems_èsk_¨gumít
 
¨gumít
);

74 
πems_èsk
 
	$Inô
(
πems_èsk_¨gumít
 
¨gumít
)

76 
	`UNUSED
(
¨gumít
);

78 
u32
 
Êﬂtög_©ribuã
 = 
RTEMS_LOCAL
 | 
RTEMS_FLOATING_POINT
;

79 
πems_«me
 
èsk_«me
;

80 
πems_°©us_code
 
°©us
;

81 
	`UNUSED
(
°©us
);

82 
πems_id
 
èsk1_id
;

83 
u32
 
evítsOut
;

85 
	`öôClocksAndMem‹y
();

86 
	`LOG_INFO
("LOS Inô(%d)", 
¨gumít
);

92 
	`LOG_INFO_EVENT
(
LOG_EVENT_MY_APP_RUN
,1);

94 
öôId
 = 
	`πems_èsk_£lf
();

96 
èsk_«me
 = 
	`πems_buûd_«me
( 'S', 'H', 'V' , 'n');

99 
°©us
 = 
	`πems_èsk_¸óã
(

100 
èsk_«me
, 1, 
RTEMS_MINIMUM_STACK_SIZE
 * 2,

101 
RTEMS_PREEMPT
 | 
RTEMS_TIMESLICE
 | 
	`RTEMS_INTERRUPT_LEVEL
(0),

102 
Êﬂtög_©ribuã
, &
èsk1_id
);

104 
	`OsDrvSvuInô
();

106 
°©us
 = 
	`πems_èsk_°¨t
(
èsk1_id
, 
SVU_èsk
, 1);

107 
	`±hªad_£äame_≈
(
±hªad_t
 
thªad
, c⁄° *
«me
);

108 
	`±hªad_£äame_≈
(
èsk1_id
, "my_task");

110 
	`πems_evít_ª˚ive
(
	`TASK
(1), 
RTEMS_WAIT
|
RTEMS_EVENT_ALL
, 
RTEMS_NO_TIMEOUT
, &
evítsOut
);

112 
	`πems_shutdown_executive
(0);

113 
	}
}

117 
	$_vcs_ßve_fûe
(* 
__ª°ri˘
 
d©a
, 
size_t
 
size
) {

118 
	`ßveMem‹yToFûe
((
uöt32_t
)
d©a
, 
size
, "buf.out");

119 
	}
}

121 
	$¥ötMsg
(
lvl
) {

122 i‡–
lvl
 != -1 ) {

123 
	`MV_LOG_LEVEL
(
MV_UNIT_NAME
Ë'0' + 
lvl
;

125 
	`LOG_TRACE
("logÅrace\n");

126 
	`LOG_DEBUG
("log debug\n");

127 
	`LOG_INFO
("log info\n");

128 
	`LOG_WARNING
("log warning\n");

129 
	`LOG_ERROR
("logÉrror\n");

130 
	`LOG_FATAL
("log fatal\n");

132 
	}
}

134 
πems_èsk
 
	$SVU_èsk
(
πems_èsk_¨gumít
 
¨gumít
)

136 
	`UNUSED
(
¨gumít
);

138 
u32
 
ru¬ög
;

141 
	`DrvLe⁄RTSèπup
((
u32
)(&
Ãt_°¨t
));

144 
	`¥ötMsg
(-1);

145 
i
=0; i<7; i++) {

146 
	`¥ötMsg
(
i
);

150 
i
;

151 
i
 = 0; i < 6; i++)

153 i‡(
	`OsDrvSvuO≥nShave
(&
h™dÀr
[
i
], 
SHAVE_NUMBER
[i], 
OS_MYR_PROTECTION_SEM
Ë=
OS_MYR_DRV_SUCCESS
)

155 
	`OsDrvSvuRe£tShave
(&
h™dÀr
[
i
]);

156 
	`OsDrvSvuSëAbsﬁuãDeÁu…Sèck
(&
h™dÀr
[
i
]);

157 
	`OsDrvSvuSèπShaveCC
(&
h™dÀr
[
i
],(
u32
)
Tø˚ProfûÀr_Aµliˇti⁄Sèπ
[i], "iiiiiii", (u32)
out_image_los
,(u32)&
Ãt_öputFøme
, 
TEST_FRAME_WIDTH
, 
TEST_FRAME_HEIGHT
, 
SHAVES_USED_FROM_LOS
, i, 
KERNEL_SIZE
);

158 
	`OsDrvSvuWaôShaves
(1, &
h™dÀr
[
i
], 
OS_DRV_SVU_WAIT_FOREVER
, &
ru¬ög
);

161 
	`LOG_WARNING
("[T2] c™nŸ o≥¿shavê%d\n", 
i
);

165 
i
 = 0; i < 6; i++)

167 
	`OsDrvSvuClo£Shave
(&
h™dÀr
[
i
]);

173 
byãAºay
[] = { 0xca, 0xfe, 0x1e, 0x1e, 0x01, 0x23, 0x45, 0x67, 0x89 };

174 
	`LOG_BULK_INFO
(
byãAºay
, (byteArray));

178 
	`DrvLe⁄RTWaôExecuti⁄
();

180 
	`LOG_INFO_EVENT
(
LOG_EVENT_MY_APP_RUN
, 0);

185 #ifde‡
FL_STR1


186 #unde‡
FL_STR1


187 #unde‡
FL_ARG1


188 
	#FL_STR1
 "¥e%s: "

	)

189 
	#FL_ARG1
 ,"fix"

	)

191 
	`LOG_INFO
("LeonOS finished\n");

193 
	`exô
(0);

194 
	}
}

	@HowTo/TraceProfiler/leon/rtems_config.h

8 #i‚de‡
LEON_RTEMS_CONFIG_H_


9 
	#LEON_RTEMS_CONFIG_H_


	)

12 #i‚de‡
_RTEMS_CONFIG_H_


13 
	#_RTEMS_CONFIG_H_


	)

17 
	~"≠p_c⁄fig.h
"

18 
	~"ÁèlExãnsi⁄.h
"

23 #i‡
deföed
(
__RTEMS__
)

25 #i‡!
deföed
 (
__CONFIG__
)

26 
	#__CONFIG__


	)

29 
	#CONFIGURE_INIT


	)

31 #i‚de‡
RTEMS_POSIX_API


32 
	#RTEMS_POSIX_API


	)

35 
	#CONFIGURE_MICROSECONDS_PER_TICK
 100

	)

37 
	#CONFIGURE_TICKS_PER_TIMESLICE
 10

	)

39 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

40 
	#CONFIGURE_APPLICATION_NEEDS_CLOCK_DRIVER


	)

42 
	#CONFIGURE_MINIMUM_TASK_STACK_SIZE
 4096

	)

43 
	#CONFIGURE_MAXIMUM_TASKS
 4

	)

44 
	#CONFIGURE_MAXIMUM_SEMAPHORES
 4

	)

46 
	#CONFIGURE_RTEMS_INIT_TASKS_TABLE


	)

47 
	#CONFIGURE_EXTRA_TASK_STACKS
 (5 * 
RTEMS_MINIMUM_STACK_SIZE
)

	)

49 
	#CONFIGURE_MAXIMUM_TIMERS
 4

	)

51 
	#CONFIGURE_MAXIMUM_USER_EXTENSIONS
 1

	)

54 
	#CONFIGURE_INITIAL_EXTENSIONS
 { .
Áèl
 = 
F©Æ_exãnsi⁄
 }

	)

62 *
POSIX_Inô
 (*
¨gs
);

64 
	~<πems/c⁄fdefs.h
>

72 
BSP_SET_CLOCK
(12000, 266000, 1, 1, 
DEFAULT_CORE_CSS_DSS_CLOCKS
, 
APP_MSS_CLOCKS
, 
APP_UPA_CLOCKS
, 0, 0);

75 
BSP_SET_L2C_CONFIG
(0, 
DEFAULT_RTEMS_L2C_REPLACEMENT_POLICY
, 
DEFAULT_RTEMS_L2C_LOCKED_WAYS
,
DEFAULT_RTEMS_L2C_MODE
, 0, 0);

	@HowTo/TraceProfiler/leon/system.h

1 #i‚de‡
_SYS_H


2 
	#_SYS_H


	)

4 
	~<πems.h
>

5 
	~<öây≥s.h
>

8 #ifde‡
__˝lu•lus


16 
πems_èsk
 
Inô
(
πems_èsk_¨gumít
 
¨gumít
);

17 
πems_èsk
 
SVU_èsk
(
πems_èsk_¨gumít
 
¨gumít
);

21 
πems_id
 
öôId
;

30 
	#TASK
(
i
Ë(1 << (31 - (i)))

	)

36 #ifde‡
__˝lu•lus


	@HowTo/TraceProfiler/leon_rt/main.c

12 
	~<°dio.h
>

13 
	~"DrvLe⁄.h
"

14 
	~"swcShaveLﬂdî.h
"

15 
	~"DrvC¥.h
"

16 
	~<OsCross.h
>

17 
	~<dbgTø˚rApi.h
>

21 
	#DDR_BUF
 
	`__©åibuã__
((
	`£˘i⁄
(".ddr.d©a")))

	)

22 
	#TEST_FRAME_WIDTH
 1280

	)

23 
	#TEST_FRAME_HEIGHT
 720

	)

24 
	#FRAME_SIZE
 (
TEST_FRAME_WIDTH
 * 
TEST_FRAME_HEIGHT
*3/2)

	)

26 
	#SHAVES_USED_FROM_LRT
 6

	)

27 
	#KERNEL_SIZE
 3

	)

31 
u8
 
öputFøme
;

34 
u32
 
Tø˚ProfûÀr0_Aµliˇti⁄Sèπ
;

35 
u32
 
Tø˚ProfûÀr1_Aµliˇti⁄Sèπ
;

36 
u32
 
Tø˚ProfûÀr2_Aµliˇti⁄Sèπ
;

37 
u32
 
Tø˚ProfûÀr3_Aµliˇti⁄Sèπ
;

38 
u32
 
Tø˚ProfûÀr4_Aµliˇti⁄Sèπ
;

39 
u32
 
Tø˚ProfûÀr5_Aµliˇti⁄Sèπ
;

41 
u32
* 
	gTø˚ProfûÀr_Aµliˇti⁄Sèπ
[
SHAVES_USED_FROM_LRT
]= {

42 &
Tø˚ProfûÀr0_Aµliˇti⁄Sèπ
,

43 &
Tø˚ProfûÀr1_Aµliˇti⁄Sèπ
,

44 &
Tø˚ProfûÀr2_Aµliˇti⁄Sèπ
,

45 &
Tø˚ProfûÀr3_Aµliˇti⁄Sèπ
,

46 &
Tø˚ProfûÀr4_Aµliˇti⁄Sèπ
,

47 &
Tø˚ProfûÀr5_Aµliˇti⁄Sèπ
,

50 
DDR_BUF
 
	gout_image
[
FRAME_SIZE
];

58 
	$maö
()

61 
	`LOG_INFO
("LeonRT starts\n");

62 
	`osCrossInô
();

64 
u32
 
shaveIndex
;

66 
shaveIndex
 = 0; shaveIndex < 6; shaveIndex++)

68 
	`LOG_INFO
("Sèπög shavê%ld ...", 
shaveIndex
);

70 
	`swcRe£tShave
(
shaveIndex
);

71 
	`swcSëAbsﬁuãDeÁu…Sèck
(
shaveIndex
);

72 
	`swcSèπShaveCC
(
shaveIndex
, (
u32
)
Tø˚ProfûÀr_Aµliˇti⁄Sèπ
[shaveIndex], "iiiiiii", (u32)
out_image
,(u32)&
öputFøme
, 
TEST_FRAME_WIDTH
, 
TEST_FRAME_HEIGHT
, 
SHAVES_USED_FROM_LRT
, shaveIndex, 
KERNEL_SIZE
);

73 
	`swcWaôShave
(
shaveIndex
);

76 
	`LOG_INFO
("LeonRT finished\n");

77 
	`DrvLe⁄RTSig«lSt›
();

80 
	}
}

	@HowTo/TraceProfiler/shave/shave_start.c

10 
	~"mv_ty≥s.h
"

11 
	~<°dio.h
>

12 
	~<swcWhoAmI.h
>

13 
	~<svuComm⁄Shave.h
>

14 
	~<swcCdma.h
>

15 
	~<shave_°¨t.h
>

16 
	~<logMsg.h
>

20 
	#MYRIAD2_MAX_NUMBER_OF_TASKS
 62

	)

23 
	#KERNEL_SIZE
 7

	)

24 
	#LINES_NUM
 (
KERNEL_SIZE
 + 1)

	)

25 
	#MAXWIDTH
 1280

	)

26 
	#PADDING
 16

27 

	)

30 
mvcvC⁄vﬁuti⁄7x7_asm
(
u8
** 
ö
, u8** 
out
, * 
c⁄v
, 
u32
 
öWidth
);

31 
mvcvC⁄vﬁuti⁄3x3_asm
(
u8
** 
ö
, u8** 
out
, * 
c⁄v
, 
u32
 
öWidth
);

36 
	göLöesBuff
[
LINES_NUM
][
MAXWIDTH
 + 
PADDING
 * 2] 
__©åibuã__
 ((
Æig√d
 (16)));

38 
	goutLöesBuff
[2][
MAXWIDTH
 + 
PADDING
 * 2] 
__©åibuã__
 ((
Æig√d
 (16)));

40 * 
	göLöesAddr
[
LINES_NUM
];

42 * 
	goutLöesAddr
[
LINES_NUM
];

44 
s32
 
	ghightSl
 = 0;

45 
s32
 
	g Sèπ
 = 0;

46 
u8
* 
	göAddr
 = 0;

47 
u8
* 
	goutAddr
 = 0;

48 
s32
 
	g¸tInLn
 = 0;

49 
s32
 
	gidx
 = 0;

50 
	gdbg
=0;

53 
	gc⁄vM©rix7x7
[49] =

65 
	gc⁄vM©rix3x3
[9] =

72 
dmaTønß˘i⁄Li°_t
 
__©åibuã__
((
£˘i⁄
(".cmx.cdmaDes¸ùt‹s"))Ë
	gèsk1
, 
	gèsk2
, 
	gèsk3
, 
	gèsk4
;

78 
öôPoöãrs
(
u32
 
kî√lSize
);

79 
rŸ©ePoöãrs
(
u32
 
kî√lSize
);

82 
	$Aµliˇti⁄Sèπ
(
u8
* 
outFrBuff
, u8* 
öFrBuff
, 
u32
 
width
, u32 
height
, u32 
ƒShaves
, u32 
¶i˚Idx
, u32 
kî√l_size
)

84 
dmaTønß˘i⁄Li°_t
 *
ªf1
, *
ªf2
, *
ªf3
, *
ªf4
;

86 
	`LOG_INFO
("ApplicationStart(%p, %p, %d, %d, %d, %d, %d) {",

87 
outFrBuff
, 
öFrBuff
, 
width
, 
height
, 
ƒShaves
, 
¶i˚Idx
, 
kî√l_size
);

89 
	`öôPoöãrs
(
kî√l_size
);

90 
hightSl
 = (
height
 / 
ƒShaves
);

91 
 Sèπ
 = 
hightSl
 * 
¶i˚Idx
;

92 
öAddr
 = 
öFrBuff
;

93 
outAddr
 = 
outFrBuff
 + 
 Sèπ
 * 
width
;

94 
¸tInLn
 = 0;

95 
idx
 = 0;

96 i‡((
¶i˚Idx
 + 1Ë=
ƒShaves
)

98 
hightSl
 = 
height
 - 
 Sèπ
;

102 
¸tInLn
 = 
 Sèπ
 - (
kî√l_size
 / 2);

104 
shaveNumbî
 = 
	`swcWhoAmI
(Ë- 
PROCESS_SHAVE0
;

105 
u32
 
id1
 = 
	`dmaInôReque°î
(
shaveNumbî
);

108 
idx
 = 0; (
u32
)idx < 
kî√l_size
; idx++)

110 
öAddr
 = 
öFrBuff
 + (
	`˛amp
(
¸tInLn
, 0, 
height
Ë* 
width
);

111 
ªf1
 = 
	`dmaCª©eTønß˘i⁄
(
id1
, &
èsk1
, 
öAddr
, 
öLöesAddr
[
idx
], 
width
);

112 
	`dmaSèπLi°Task
(
ªf1
);

113 
	`dmaWaôTask
(
ªf1
);

115 
¸tInLn
++;

118 if(
kî√l_size
 == 7)

119 
	`mvcvC⁄vﬁuti⁄7x7_asm
(
öLöesAddr
, &
outLöesAddr
[0], 
c⁄vM©rix7x7
, 
width
);

120 if(
kî√l_size
 == 3)

121 
	`mvcvC⁄vﬁuti⁄3x3_asm
(
öLöesAddr
, &
outLöesAddr
[0], 
c⁄vM©rix3x3
, 
width
);

124 
	`rŸ©ePoöãrs
(
kî√l_size
);

127 
idx
 = 1; idx < 
hightSl
; idx++)

129 
öAddr
 = 
öFrBuff
 + 
	`˛amp
(
¸tInLn
, 0, 
height
Ë* 
width
;

130 
ªf2
 = 
	`dmaCª©eTønß˘i⁄
(
id1
, &
èsk2
, 
öAddr
, 
öLöesAddr
[
kî√l_size
], 
width
);

132 
¸tInLn
++;

134 
ªf3
 = 
	`dmaCª©eTønß˘i⁄
(
id1
, &
èsk3
, 
outLöesAddr
[1], 
outAddr
, 
width
);

136 
	`dmaLökTasks
(
ªf2
, 1, 
ªf3
);

137 
	`dmaSèπLi°Task
(
ªf2
);

139 
outAddr
 +
width
;

141 if(
kî√l_size
 == 7){

142 
	`mvcvC⁄vﬁuti⁄7x7_asm
(
öLöesAddr
, &
outLöesAddr
[0], 
c⁄vM©rix7x7
, 
width
);

144 if(
kî√l_size
 == 3){

145 
	`mvcvC⁄vﬁuti⁄3x3_asm
(
öLöesAddr
, &
outLöesAddr
[0], 
c⁄vM©rix3x3
, 
width
);

147 
dbg
 = 
idx
;

148 
	`dmaWaôTask
(
ªf2
);

149 
	`rŸ©ePoöãrs
(
kî√l_size
);

152 
ªf4
 = 
	`dmaCª©eTønß˘i⁄
(
id1
, &
èsk4
, 
outLöesAddr
[1], 
outAddr
, 
width
);

153 
	`dmaSèπLi°Task
(
ªf4
);

154 
	`dmaWaôTask
(
ªf4
);

156 
outAddr
 +
width
;

158 
	`LOG_INFO
("} // Aµliˇti⁄Sèπ(%p, ...)", 
outFrBuff
);

160 
SHAVE_HALT
;

161 
	}
}

164 
	$C›yLöe
(
u32
* 
§c
,u32* 
d°
,u32 
width
)

166 
u32
 
i
;

167 
i
=0;i<(
width
>>2);i++){

169 
d°
[
i
]=
§c
[i];

172 
	}
}

176 
	$öôPoöãrs
(
u32
 
kî√lSize
)

178 
u32
 
i
;

180 
i
 = 0; i<
kî√lSize
; i++)

182 
öLöesAddr
[
i
] = 
öLöesBuff
[i] + 
PADDING
;

185 
outLöesAddr
[0] = 
outLöesBuff
[0];

186 
outLöesAddr
[1] = 
outLöesBuff
[1];

187 
	}
}

189 
	$rŸ©ePoöãrs
(
u32
 
kî√lSize
)

191 
u32
 
i
;

193 
u8
* 
öã∫ÆP
 = 
öLöesAddr
[0];

194 
i
 = 0; i< 
kî√lSize
; i++)

196 
öLöesAddr
[
i
] = inLinesAddr[i + 1];

198 
öLöesAddr
[
kî√lSize
] = 
öã∫ÆP
;

200 
öã∫ÆP
 = 
outLöesAddr
[0];

201 
outLöesAddr
[0] = outLinesAddr[1];

202 
outLöesAddr
[1] = 
öã∫ÆP
;

203 
	}
}

	@HowTo/TraceProfiler/shave/shave_start.h

9 #i‚de‡
_SINGLE_KERNEL_


10 
	#_SINGLE_KERNEL_


	)

13 
	~<mv_ty≥s.h
>

20 
Aµliˇti⁄Sèπ
(
u8
* 
outFrBuff
, u8* 
öFrBuff
, 
u32
 
width
, u32 
height
, u32 
ƒShaves
, u32 
¶i˚Idx
, u32 
kî√l_size
);

22 
	$˛amp
(
x
, 
y
, 
z
)

24 if(
x
 < 
y
)

26  
y
;

30 if(
x
 > 
z
)

32  
z
;

36  
x
;

39 
	}
}

	@HowTo/TraceProfiler/testTracePC.cpp

3 
	~<logMsg.h
>

5 
	$¥¡
(c⁄° * 
fmt
, ...){

6 
va_li°
 
va
;

7 
	`va_°¨t
(
va
, 
fmt
);

8 
	`logMesßge
(1, 
fmt
, 
va
);

9 
	`va_íd
(
va
);

11 
	}
}

13 
	$maö
(){

14 
	`logMesßge
(3, "test %d", 1);

15 
	`¥¡
("bla %d", 5);

16 
mv_Áèl
 << "CriticalÉrror " << 33;

18 
	}
}

	@HowTo/UsbHidMouse/leon/app_config.c

13 
	~"OsDrvTimî.h
"

14 
	~"OsDrvC¥.h
"

26 
tyAuxClkDividîCfg
 
	gauxClk
[] =

29 .
auxClockE«bÀMask
 = 
AUX_CLK_MASK_USB_CTRL_SUSPEND_CLK
,

30 .
	gauxClockSour˚
 = 
CLK_SRC_PLL0
,

31 .
	gauxClockDivNumî©‹
 = 1,

32 .
	gauxClockDivDíomö©‹
 = 24

42 
	$öôClocksAndMem‹y
()

44 
s32
 
sc
;

46 
sc
 = 
	`OsDrvC¥Inô
();

47 if(
sc
)

48  
sc
;

49 
sc
 = 
	`OsDrvC¥O≥n
();

50 if(
sc
)

51  
sc
;

52 
sc
 = 
	`OsDrvC¥AuxClockAºayC⁄fig
(
auxClk
);

53 if(
sc
)

54  
sc
;

56 
sc
 = 
	`OsDrvTimîInô
();

57 if(
sc
)

58  
sc
;

61 
	}
}

	@HowTo/UsbHidMouse/leon/app_config.h

9 #i‚de‡
_APP_CONFIG_H_


10 
	#_APP_CONFIG_H_


	)

13 
	#PLL_DESIRED_FREQ_KHZ
 480000

	)

15 
	#DEFAULT_OSC0_KHZ
 12000

	)

16 
	#L2CACHE_NORMAL_MODE
 (0x6)

17 
	#L2CACHE_CFG
 (
L2CACHE_NORMAL_MODE
)

	)

18 
	#BIGENDIANMODE
 (0x01000786)

	)

21 
	~"mv_ty≥s.h
"

22 
	~"ÁèlExãnsi⁄.h
"

25 #i‡
deföed
(
__RTEMS__
)

27 #i‡!
deföed
 (
__CONFIG__
)

28 
	#__CONFIG__


	)

31 
	#CONFIGURE_INIT


	)

33 #i‚de‡
RTEMS_POSIX_API


34 
	#RTEMS_POSIX_API


	)

37 
	#CONFIGURE_MICROSECONDS_PER_TICK
 1000

	)

39 
	#CONFIGURE_TICKS_PER_TIMESLICE
 50

	)

41 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

43 
	#CONFIGURE_APPLICATION_NEEDS_CLOCK_DRIVER


	)

45 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

47 
	#CONFIGURE_MINIMUM_TASK_STACK_SIZE
 (8192)

	)

49 
	#CONFIGURE_MAXIMUM_TASKS
 20

	)

51 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 5

	)

53 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 8

	)

55 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 8

	)

57 
	#CONFIGURE_MAXIMUM_POSIX_SEMAPHORES
 8

	)

59 
	#CONFIGURE_MAXIMUM_POSIX_MESSAGE_QUEUES
 8

	)

61 
	#CONFIGURE_MAXIMUM_POSIX_TIMERS
 4

	)

63 
	#CONFIGURE_MAXIMUM_TIMERS
 4

	)

65 
	#CONFIGURE_USE_IMFS_AS_BASE_FILESYSTEM


	)

67 
	#CONFIGURE_FILESYSTEM_DOSFS


	)

69 
	#CONFIGURE_MAXIMUM_DRIVERS
 10

	)

71 
	#CONFIGURE_MAXIMUM_SEMAPHORES
 (4 * 
RTEMS_DOSFS_SEMAPHORES_PER_INSTANCE
)

	)

73 
	#CONFIGURE_LIBIO_MAXIMUM_FILE_DESCRIPTORS
 30

	)

75 
	#CONFIGURE_APPLICATION_NEEDS_LIBBLOCK


	)

77 
	#CONFIGURE_POSIX_INIT_TASKS_TABLE


	)

79 *
POSIX_Inô
 (*
¨gs
);

82 
	#CONFIGURE_MAXIMUM_USER_EXTENSIONS
 1

	)

83 
	#CONFIGURE_INITIAL_EXTENSIONS
 { .
Áèl
 = 
F©Æ_exãnsi⁄
 }

	)

85 
	~<πems/c⁄fdefs.h
>

91 
öôClocksAndMem‹y
();

	@HowTo/UsbHidMouse/leon/descriptors.c

11 
	~"mou£defs.h
"

18 
ROM
 
UCHAR
 
	gBoŸKeybﬂrdRï‹tDes¸ùt‹
[] =

64 
ROM
 
USHORT
 
	gsizeof_BoŸKeybﬂrdRï‹tDes¸ùt‹
 = (
BoŸKeybﬂrdRï‹tDes¸ùt‹
);

68 
ROM
 
UCHAR
 
	gWhìlMou£WôhWakeupRï‹tDes¸ùt‹
[] =

112 
ROM
 
USHORT
 
	gsizeof_WhìlMou£WôhWakeupRï‹tDes¸ùt‹
 = (
WhìlMou£WôhWakeupRï‹tDes¸ùt‹
);

115 
ROM
 
UCHAR
 
	gWhìlMou£Rï‹tDes¸ùt‹
[] =

146 
ROM
 
USHORT
 
	gsizeof_WhìlMou£Rï‹tDes¸ùt‹
 = (
WhìlMou£Rï‹tDes¸ùt‹
);

149 
ROM
 
UCHAR
 
	gSènd¨dMou£WôhWakeupRï‹tDes¸ùt‹
[] =

192 
ROM
 
USHORT
 
	gsizeof_Sènd¨dMou£WôhWakeupRï‹tDes¸ùt‹
 = (
Sènd¨dMou£WôhWakeupRï‹tDes¸ùt‹
);

195 
ROM
 
UCHAR
 
	gBoŸMou£Rï‹tDes¸ùt‹
[] =

225 
ROM
 
USHORT
 
	gsizeof_BoŸMou£Rï‹tDes¸ùt‹
 = (
BoŸMou£Rï‹tDes¸ùt‹
);

	@HowTo/UsbHidMouse/leon/main.c

9 
	~<°dio.h
>

10 
	~<πems.h
>

11 
	~<πems/b•Io.h
>

12 
	~<b•.h
>

14 
	~"≠p_c⁄fig.h
"

15 
	~"OsDrvUsbPhy.h
"

16 
	~"usbpumpdebug.h
"

18 
	~"usbpump_≠∂iˇti⁄_πems_≠i.h
"

24 
BSP_SET_CLOCK
(
DEFAULT_OSC0_KHZ
, 
PLL_DESIRED_FREQ_KHZ
, 1, 1, 
DEFAULT_RTEMS_CSS_LOS_CLOCKS
, 
DEFAULT_RTEMS_MSS_LRT_CLOCKS
,0,0,0);

26 
BSP_SET_L2C_CONFIG
(0 ,
DEFAULT_RTEMS_L2C_REPLACEMENT_POLICY
, 
DEFAULT_RTEMS_L2C_LOCKED_WAYS
,
DEFAULT_RTEMS_L2C_MODE
, 0, 0);

32 #i‚de‡
DISABLE_LEON_DCACHE


33 
	#USBPUMP_MDK_CACHE_ENABLE
 1

	)

35 
	#USBPUMP_MDK_CACHE_ENABLE
 0

	)

38 
USBPUMP_APPLICATION_RTEMS_CONFIGURATION
 
	gsg_D©aPump_AµC⁄fig
 =

39 
USBPUMP_APPLICATION_RTEMS_CONFIGURATION_INIT_V1
(

41  
NULL
,

46  
NULL
,

47  
NULL
,

49  
UDMASK_ERRORS
 | 
UDMASK_ANY


58 *
	$POSIX_Inô
 (*
¨gs
)

60 
	`UNUSED
(
¨gs
);

62 
osDrvUsbPhyP¨am_t
 
öôP¨am
 =

64 .
íabÀOtgBlock
 = 
USB_PHY_OTG_DISABLED
,

65 .
u£Exã∫ÆClock
 = 
USB_PHY_USE_EXT_CLK
,

66 .
fSñ
 = 
USB_REFCLK_20MHZ
,

67 .
ªfClkSñ0
 = 
USB_SUPER_SPEED_CLK_CONFIG
,

68 .
f‹˚HsO∆y
 = 
USB_PHY_HS_ONLY_OFF


71 
	`öôClocksAndMem‹y
();

72 
	`OsDrvUsbPhyInô
(&
öôP¨am
);

74 i‡(
	`UsbPump_Rãms_D©aPump_Sèπup
(&
sg_D©aPump_AµC⁄fig
))

76 
	`¥ötf
("\n\nUsbPump_Rtems_DataPump_Startup()!\n\n\n");

80 
	`¥ötf
("\n\nUsbPump_Rtems_DataPump_Startup() failed!\n\n\n");

82  
NULL
;

83 
	}
}

	@HowTo/UsbHidMouse/leon/mousedefs.h

10 #i‚de‡
_MOUSEDEFS_H_


11 
	#_MOUSEDEFS_H_


	)

15 
	~"usbpump.h
"

17 #i‚de‡
_PROTOHID_H_


18 
	~"¥Ÿohid.h
"

26 
CONST
 
UPROTO_USBHID_CONFIG
 
HidFnDemo_BoŸMou£_PrŸoC⁄fig
;

28 
CONST
 
UPROTO_USBHID_CONFIG
 
HidFnDemo_Gíîic_PrŸoC⁄fig
;

30 
ROM
 
UCHAR
 
WhìlMou£WôhWakeupRï‹tDes¸ùt‹
[];

31 
ROM
 
USHORT
 
sizeof_WhìlMou£WôhWakeupRï‹tDes¸ùt‹
;

33 
ROM
 
UCHAR
 
WhìlMou£Rï‹tDes¸ùt‹
[];

34 
ROM
 
USHORT
 
sizeof_WhìlMou£Rï‹tDes¸ùt‹
;

36 
ROM
 
UCHAR
 
Sènd¨dMou£WôhWakeupRï‹tDes¸ùt‹
[];

37 
ROM
 
USHORT
 
sizeof_Sènd¨dMou£WôhWakeupRï‹tDes¸ùt‹
;

39 
ROM
 
UCHAR
 
Sènd¨dMou£Rï‹tDes¸ùt‹
[];

40 
ROM
 
USHORT
 
sizeof_Sènd¨dMou£Rï‹tDes¸ùt‹
;

42 
ROM
 
UCHAR
 
BoŸMou£Rï‹tDes¸ùt‹
[];

43 
ROM
 
USHORT
 
sizeof_BoŸMou£Rï‹tDes¸ùt‹
;

	@HowTo/UsbHidMouse/leon/mousedemo.c

10 
	~"mou£defs.h
"

15 
	#HIDMOUSE_MOUSEREPORT_TAG
 
	`USB_HID_Rï‹tTy≥IdToWVÆue
(
USB_HID_Rï‹tTy≥_I≈ut
, 0)

	)

16 
	#HIDMOUSE_MOUSEREPORT_LEN
 3

	)

20 
__TTUSB_FNTYPE_DEF
(
HIDMOUSE_MOUSEREPORT
, 
UCHAR
, [
HIDMOUSE_MOUSEREPORT_LEN
]);

23 
__TTUSB_TYPE_DEF_STRUCT
(
HIDMOUSE_CONTEXT
);

27 
	s__TTUSB_HIDMOUSE_CONTEXT


29 
UPROTO_USBHID
 * 
	mumou£_pUsbHid
;

30 
ROM
 
HIDMOUSE_MOUSEREPORT
 * 
	mumou£_pRï‹t
;

31 
ROM
 
UCHAR
 * 
	mumou£_pRï‹tDes¸ùt‹
;

32 
USHORT
 
	mumou£_nRï‹tDes¸ùt‹
;

33 
USHORT
 
	mumou£_nRï‹ts
;

34 
UPROTO_USBHID_OUT_REPORT_QE
 
	mumou£_Mou£SëRï‹tQE
;

35 
UBUFQE
 
	mumou£_Mou£I¡Rï‹tQE
;

38 
UBUFIODONEFN
 
	ghidmou£_Mou£I¡Rï‹tD⁄e
;

39 
UPROTO_USBHID_OUT_REPORT_QE_DONE_FN
 
	ghidmou£_Mou£Rï‹tD⁄e
;

42 
UPROTO_USBHID_CLIENT_METHODS_DECLARE_FNS
(
hidmou£
);

44 
ROM
 
UPROTO_USBHID_CLIENT_METHODS
 
	ghidmou£_swôch
 =

45 
UPROTO_USBHID_CLIENT_METHODS_INIT_V1
(

46 
hidmou£_Aâach
,

47 
hidmou£_Dëach
,

48 
hidmou£_C⁄figuª
,

49 
hidmou£_Unc⁄figuª
,

50  
NULL
,

51  
NULL
,

52 
hidmou£_GëNextRï‹t
,

53 
hidmou£_GëRï‹t
,

54  
NULL
,

55  
NULL
,

56  
NULL
,

57  
NULL
,

58 
hidmou£_GëRï‹tDes¸ùt‹
,

59  
NULL
,

60  
NULL
,

61  
NULL
,

62  
NULL
,

63  
NULL
,

64  
NULL


69 
ROM
 
HIDMOUSE_MOUSEREPORT
 
	ghidmou£_Rï‹ts
[] =

223 
CONST
 
UPROTO_USBHID_CONFIG


224 
	gHidFnDemo_BoŸMou£_PrŸoC⁄fig
 =

225 
UPROTO_USBHID_CONFIG_INIT_V1
(

226 
UPROTO_USBHID_DERIVED_NAME
("boot.mouse"),

227 (
HIDMOUSE_CONTEXT
),

228 &
hidmou£_swôch


236 
BOOL


237 
	$hidmou£_Aâach
(

238 
VOID
 *
pClõ¡Obje˘
,

239 
PUPROTO_USBHID
 
pHid


242 
HIDMOUSE_CONTEXT
 * 
CONST
 
pMou£
 = 
pClõ¡Obje˘
;

243 
VOID
 *
pN⁄˚
;

245 
pMou£
->
umou£_pUsbHid
 = 
pHid
;

246 
pMou£
->
umou£_pRï‹tDes¸ùt‹
 = 
BoŸMou£Rï‹tDes¸ùt‹
;

247 
pMou£
->
umou£_nRï‹tDes¸ùt‹
 = 
sizeof_BoŸMou£Rï‹tDes¸ùt‹
;

249 i‡(
pHid
->
uhid_usHo°D©aSize
 < 
pMou£
->
umou£_nRï‹tDes¸ùt‹
)

250 
pHid
->
uhid_usHo°D©aSize
 = 
pMou£
->
umou£_nRï‹tDes¸ùt‹
;

254 
pN⁄˚
 = 
	`UsbAŒoˇãDevi˚Buf„r
(

255 
pHid
->
uhid_pDevi˚
,

256 
HIDMOUSE_MOUSEREPORT_LEN


258 i‡(! 
pN⁄˚
)

259  
FALSE
;

261 
	`UHIL_fûl
(
pN⁄˚
, 
HIDMOUSE_MOUSEREPORT_LEN
, 0);

262 
	`UPROTO_USBHID_OUT_REPORT_QE_SETUP_V1
(

263 &
pMou£
->
umou£_Mou£SëRï‹tQE
,

264 
pN⁄˚
,

265 
HIDMOUSE_MOUSEREPORT_LEN
,

266 
HIDMOUSE_MOUSEREPORT_TAG
,

267 
hidmou£_Mou£Rï‹tD⁄e
,

268 
pMou£


273 
pMou£
->
umou£_Mou£I¡Rï‹tQE
.
uqe_buf
 =

274 
pN⁄˚
 = 
	`UsbAŒoˇãDevi˚Buf„r
(

275 
pHid
->
uhid_pDevi˚
,

276 
HIDMOUSE_MOUSEREPORT_LEN


279 i‡(! 
pN⁄˚
)

280  
FALSE
;

282 
	`UHIL_fûl
(
pN⁄˚
, 
HIDMOUSE_MOUSEREPORT_LEN
, 0);

283 
pMou£
->
umou£_Mou£I¡Rï‹tQE
.
uqe_bufsize
 = 
HIDMOUSE_MOUSEREPORT_LEN
;

284 
pMou£
->
umou£_Mou£I¡Rï‹tQE
.
uqe_d⁄e‚
 = 
hidmou£_Mou£I¡Rï‹tD⁄e
;

285 
pMou£
->
umou£_Mou£I¡Rï‹tQE
.
uqe_d⁄eöfo
 =ÖMouse;

287  
TRUE
;

288 
	}
}

290 
VOID


291 
	$hidmou£_Dëach
(

292 
VOID
 *
pClõ¡Obje˘
,

293 
PUPROTO_USBHID
 
pHid


296 
HIDMOUSE_CONTEXT
 * 
CONST
 
pKey
 = 
pClõ¡Obje˘
;

298 
	`UsbFªeDevi˚Buf„r
(

299 
pHid
->
uhid_pDevi˚
,

300 
pKey
->
umou£_Mou£SëRï‹tQE
.
pBuf„r
,

301 
pKey
->
umou£_Mou£SëRï‹tQE
.
nBuf„r


304 
	`UsbFªeDevi˚Buf„r
(

305 
pHid
->
uhid_pDevi˚
,

306 
pKey
->
umou£_Mou£I¡Rï‹tQE
.
uqe_buf
,

307 
pKey
->
umou£_Mou£I¡Rï‹tQE
.
uqe_bufsize


309 
	}
}

312 
VOID
 
	$hidmou£_C⁄figuª
(

313 
VOID
 *
pClõ¡Obje˘
,

314 
PUPROTO_USBHID
 
pHid
,

315 
UEVENT
 
why


318 
PHIDMOUSE_CONTEXT
 
CONST
 
pMou£
 = 
pClõ¡Obje˘
;

320 
	`USBPUMP_UNREFERENCED_PARAMETER
(
why
);

322 
pMou£
->
umou£_pRï‹t
 = &
hidmou£_Rï‹ts
[0];

323 
pMou£
->
umou£_nRï‹ts
 = 
	`LENOF
(
hidmou£_Rï‹ts
);

325 (*
pHid
->
uhid_pPublicMëhods
->
QueueF‹OutRï‹tV2
)(

326 
pHid
,

327 &
pMou£
->
umou£_Mou£SëRï‹tQE


329 
	}
}

331 
VOID
 
	$hidmou£_Unc⁄figuª
(

332 
VOID
 *
pClõ¡Obje˘
,

333 
PUPROTO_USBHID
 
pHid
,

334 
UEVENT
 
why


338 
	`USBPUMP_UNREFERENCED_PARAMETER
(
pClõ¡Obje˘
);

339 
	`USBPUMP_UNREFERENCED_PARAMETER
(
pHid
);

340 
	`USBPUMP_UNREFERENCED_PARAMETER
(
why
);

341 
	}
}

344 
VOID
 
	$hidmou£_GëNextRï‹t
(

345 
VOID
 *
pClõ¡Obje˘
,

346 
PUPROTO_USBHID
 
pHid


349 
PHIDMOUSE_CONTEXT
 
CONST
 
pMou£
 = 
pClõ¡Obje˘
;

351 i‡(
pMou£
->
umou£_nRï‹ts
)

353 
	`UHIL_˝ybuf
(

354 
pMou£
->
umou£_Mou£I¡Rï‹tQE
.
uqe_buf
,

355 
pMou£
->
umou£_pRï‹t
,

356 (
HIDMOUSE_MOUSEREPORT
)

359 i‡(--
pMou£
->
umou£_nRï‹ts
)

360 ++
pMou£
->
umou£_pRï‹t
;

362 (*
pHid
->
uhid_pPublicMëhods
->
QueueInRï‹t
)(

363 
pHid
,

364 &
pMou£
->
umou£_Mou£I¡Rï‹tQE


367 
	}
}

370 
BOOL
 
	$hidmou£_GëRï‹t
(

371 
VOID
 *
pClõ¡Obje˘
,

372 
PUPROTO_USBHID
 
pHid
,

373 
PUEVENTSETUP
 
pSëup


376 
PHIDMOUSE_CONTEXT
 
CONST
 
pMou£
 = 
pClõ¡Obje˘
;

377 
CONST
 
UCHAR
 *
pResu…
;

378 
USHORT
 
nResu…
;

380 
	`TTUSB_PRINTF
((

381 
pHid
->
uhid_pDevi˚
,

382 
UDMASK_FLOW
,

384 
pHid
,

385 
pSëup
,

386 
pSëup
->
uec_u˝
.
uc_wVÆue


389 
pSëup
->
uec_u˝
.
uc_wVÆue
)

391 
HIDMOUSE_MOUSEREPORT_TAG
:

392 
pResu…
 = (
CONST
 
UCHAR
 *Ë
pMou£
->
umou£_pRï‹t
;

393 
nResu…
 = 
HIDMOUSE_MOUSEREPORT_LEN
;

397 
pResu…
 = 
NULL
;

398 
nResu…
 = 0;

402 i‡(
pResu…
)

404 
	`UHIL_˝ybuf
(
pHid
->
uhid_pHo°D©aBuf
, 
pResu…
, 
nResu…
);

405 
	`UsbDevi˚Rïly
(

406 
pHid
->
uhid_pDevi˚
,

407 
pHid
->
uhid_pHo°D©aBuf
,

408 
pSëup
->
uec_u˝
.
uc_wLígth
,

409 
nResu…


412 
	`TTUSB_PRINTF
((

413 
pHid
->
uhid_pDevi˚
,

414 
UDMASK_FLOW
,

416 
nResu…
,

417 
pSëup
->
uec_u˝
.
uc_wLígth


420  
TRUE
;

425  
FALSE
;

427 
	}
}

429 
BOOL
 
	$hidmou£_GëRï‹tDes¸ùt‹
(

430 
VOID
 *
pClõ¡Obje˘
,

431 
PUPROTO_USBHID
 
pHid
,

432 
PUEVENTSETUP
 
pSëup


435 
PHIDMOUSE_CONTEXT
 
CONST
 
pMou£
 = 
pClõ¡Obje˘
;

437 
CONST
 
UCHAR
 *
pResu…
;

438 
USHORT
 
nResu…
;

439 
USHORT
 
wVÆue
 = 
pSëup
->
uec_u˝
.
uc_wVÆue
;

441 
	`TTUSB_PRINTF
((

442 
pHid
->
uhid_pDevi˚
,

443 
UDMASK_FLOW
 | 
UDMASK_CHAP9
,

445 
pHid
,

446 
pSëup
,

447 
wVÆue


450 
wVÆue
)

452 
USB_bDescTy≥_HID_REPORT
 << 8:

453 
pResu…
 = 
pMou£
->
umou£_pRï‹tDes¸ùt‹
;

454 
nResu…
 = 
pMou£
->
umou£_nRï‹tDes¸ùt‹
;

458 
pResu…
 = 
NULL
;

459 
nResu…
 = 0;

462 i‡(
pResu…
)

464 
nResu…
 = 
	`UsbC›yAndRïly
(

465 
pHid
->
uhid_pDevi˚
,

466 
pHid
->
uhid_pHo°D©aBuf
,

467 
pHid
->
uhid_usHo°D©aSize
,

468 
pResu…
,

469 
nResu…
,

470 
pSëup
->
uec_u˝
.
uc_wLígth


473 
	`TTUSB_PRINTF
((

474 
pHid
->
uhid_pDevi˚
,

475 
UDMASK_FLOW
 | 
UDMASK_CHAP9
,

477 
nResu…


479  
TRUE
;

483 
	`TTUSB_PRINTF
((

484 
pHid
->
uhid_pDevi˚
,

485 
UDMASK_FLOW
 | 
UDMASK_CHAP9
 | 
UDMASK_ERRORS
 | 
UDMASK_ANY
,

487 
wVÆue


490  
FALSE
;

492 
	}
}

495 
BOOL
 
	$hidmou£_Mou£Rï‹tD⁄e
(

496 
UPROTO_USBHID_OUT_REPORT_QE
 * 
pMou£SëRï‹tQE
,

497 
VOID
 * 
pD⁄eInfo
,

498 
USTAT
 
Sètus


501 
PHIDMOUSE_CONTEXT
 
CONST
 
pMou£
 = 
pD⁄eInfo
;

502 
PUPROTO_USBHID
 
CONST
 
pHid
 = 
pMou£
->
umou£_pUsbHid
;

503 
BOOL
 
fResu…
;

505 i‡(
Sètus
 =
USTAT_OK
)

507 
	`TTUSB_OBJPRINTF
((

508 &
pHid
->
uhid_Obje˘Hódî
,

509 
UDMASK_ANY
,

512 
fResu…
 = 
TRUE
;

516 
	`TTUSB_OBJPRINTF
((

517 &
pHid
->
uhid_Obje˘Hódî
,

518 
UDMASK_ANY
,

520 
	`UsbPumpSètus_Name
(
Sètus
)

522 
fResu…
 = 
FALSE
;

525 i‡(
Sètus
 !
USTAT_NOTCFG
)

527 (*
pHid
->
uhid_pPublicMëhods
->
QueueF‹OutRï‹tV2
)(

528 
pHid
,

529 
pMou£SëRï‹tQE


533  
fResu…
;

534 
	}
}

537 
VOID
 
	$hidmou£_Mou£I¡Rï‹tD⁄e
(

538 
PUDEVICE
 
pDevi˚
,

539 
PUENDPOINT
 
≥p
,

540 
PUBUFQE
 
pqe


547 
	`USBPUMP_UNREFERENCED_PARAMETER
(
pDevi˚
);

548 
	`USBPUMP_UNREFERENCED_PARAMETER
(
≥p
);

549 
	`USBPUMP_UNREFERENCED_PARAMETER
(
pqe
);

550 
	}
}

	@HowTo/UsbHidMouse/leon/mousedemo_main.c

10 
	~"mou£defs.h
"

11 
	~"usb≠pöô.h
"

12 
	~"usbpumpobje˘≠i.h
"

16 
	#EXTERN_USBRC_ROOTTABLE
(
NAME
) \

17 
CONST
 
USBRC_ROOTTABLE
 
NAME
;

	)

19 #ifde‡
DESCRIPTOR_ROOT_0


20 
	$EXTERN_USBRC_ROOTTABLE
(
DESCRIPTOR_ROOT_0
)

22 #ifde‡
DESCRIPTOR_ROOT_1


23 
	$EXTERN_USBRC_ROOTTABLE
(
DESCRIPTOR_ROOT_1
)

25 #ifde‡
DESCRIPTOR_ROOT_2


26 
	$EXTERN_USBRC_ROOTTABLE
(
DESCRIPTOR_ROOT_2
)

28 #ifde‡
DESCRIPTOR_ROOT_3


29 
	$EXTERN_USBRC_ROOTTABLE
(
DESCRIPTOR_ROOT_3
)

31 #ifde‡
DESCRIPTOR_ROOT_4


32 
	$EXTERN_USBRC_ROOTTABLE
(
DESCRIPTOR_ROOT_4
)

34 #ifde‡
DESCRIPTOR_ROOT_5


35 
	$EXTERN_USBRC_ROOTTABLE
(
DESCRIPTOR_ROOT_5
)

37 #ifde‡
DESCRIPTOR_ROOT_6


38 
	$EXTERN_USBRC_ROOTTABLE
(
DESCRIPTOR_ROOT_6
)

40 #ifde‡
DESCRIPTOR_ROOT_7


41 
	$EXTERN_USBRC_ROOTTABLE
(
DESCRIPTOR_ROOT_7
)

43 #ifde‡
DESCRIPTOR_ROOT_8


44 
	$EXTERN_USBRC_ROOTTABLE
(
DESCRIPTOR_ROOT_8
)

46 #ifde‡
DESCRIPTOR_ROOT_9


47 
	$EXTERN_USBRC_ROOTTABLE
(
DESCRIPTOR_ROOT_9
)

49 #i‚de‡ 
DESCRIPTOR_ROOT_0


50 #i‚de‡
DESCRIPTOR_ROOT_1


51 #i‚de‡
DESCRIPTOR_ROOT_2


52 #i‚de‡
DESCRIPTOR_ROOT_3


53 #i‚de‡
DESCRIPTOR_ROOT_4


54 #i‚de‡
DESCRIPTOR_ROOT_5


55 #i‚de‡
DESCRIPTOR_ROOT_6


56 #i‚de‡
DESCRIPTOR_ROOT_7


57 #i‚de‡
DESCRIPTOR_ROOT_8


58 #i‚de‡
DESCRIPTOR_ROOT_9


59 
	$EXTERN_USBRC_ROOTTABLE
(
gk_UsbDes¸ùt‹RoŸ
)

73 
CONST
 
USBRC_ROOTTABLE
 
gk_UsbDes¸ùt‹RoŸ
;

88 
CONST
 
USBPUMP_PROTOCOL_INIT_NODE
 
InôNodes
[] =

90 
	`USBPUMP_PROTOCOL_INIT_NODE_INIT_V1
(

92  
USB_bI¡îÁ˚Cœss_HID
, \

93  
USB_bI¡îÁ˚SubCœss_HID_BoŸ
, \

94  
USB_bI¡îÁ˚PrŸocﬁ_HID_Mou£
, \

97  
NULL
, \

98  
UsbHid10_PrŸocﬁCª©e
, \

99  &
HidFnDemo_BoŸMou£_PrŸoC⁄fig
 \

101 
	}
};

104 
CONST
 
USBPUMP_PROTOCOL_INIT_NODE_VECTOR
 
	gInôHódî
 =

105 
USBPUMP_PROTOCOL_INIT_NODE_VECTOR_INIT_V1
(

106  
InôNodes
,

107  
NULL
,

108  
NULL


116 
	#INIT_VECTOR_NODE
(
a__UsbDes¸ùt‹RoŸ
) \

117 
	`USB_DATAPUMP_APPLICATION_INIT_VECTOR_INIT_V2
( \

118  &
a__UsbDes¸ùt‹RoŸ
, \

120 
UDMASK_ANY
 | 
UDMASK_ERRORS
 | 
UDMASK_CHAP9
 | \

121 
UDMASK_PROTO
, \

122  
NULL
, \

124 
UsbPump_GíîicAµliˇti⁄Inô_PrŸocﬁs
, \

125  &
InôHódî
 \

126 )

	)

129 
CONST
 
USB_DATAPUMP_APPLICATION_INIT_VECTOR
 
	gUsbPumpAµliˇti⁄InôVe˘‹
[] =

131 #ifde‡
DESCRIPTOR_ROOT_0


132 
INIT_VECTOR_NODE
(
DESCRIPTOR_ROOT_0
),

134 #ifde‡
DESCRIPTOR_ROOT_1


135 
INIT_VECTOR_NODE
(
DESCRIPTOR_ROOT_1
),

137 #ifde‡
DESCRIPTOR_ROOT_2


138 
INIT_VECTOR_NODE
(
DESCRIPTOR_ROOT_2
),

140 #ifde‡
DESCRIPTOR_ROOT_3


141 
INIT_VECTOR_NODE
(
DESCRIPTOR_ROOT_3
),

143 #ifde‡
DESCRIPTOR_ROOT_4


144 
INIT_VECTOR_NODE
(
DESCRIPTOR_ROOT_4
),

146 #ifde‡
DESCRIPTOR_ROOT_5


147 
INIT_VECTOR_NODE
(
DESCRIPTOR_ROOT_5
),

149 #ifde‡
DESCRIPTOR_ROOT_6


150 
INIT_VECTOR_NODE
(
DESCRIPTOR_ROOT_6
),

152 #ifde‡
DESCRIPTOR_ROOT_7


153 
INIT_VECTOR_NODE
(
DESCRIPTOR_ROOT_7
),

155 #ifde‡
DESCRIPTOR_ROOT_8


156 
INIT_VECTOR_NODE
(
DESCRIPTOR_ROOT_8
),

158 #ifde‡
DESCRIPTOR_ROOT_9


159 
INIT_VECTOR_NODE
(
DESCRIPTOR_ROOT_9
),

161 #i‚de‡ 
DESCRIPTOR_ROOT_0


162 #i‚de‡
DESCRIPTOR_ROOT_1


163 #i‚de‡
DESCRIPTOR_ROOT_2


164 #i‚de‡
DESCRIPTOR_ROOT_3


165 #i‚de‡
DESCRIPTOR_ROOT_4


166 #i‚de‡
DESCRIPTOR_ROOT_5


167 #i‚de‡
DESCRIPTOR_ROOT_6


168 #i‚de‡
DESCRIPTOR_ROOT_7


169 #i‚de‡
DESCRIPTOR_ROOT_8


170 #i‚de‡
DESCRIPTOR_ROOT_9


171 
INIT_VECTOR_NODE
(
gk_UsbDes¸ùt‹RoŸ
)

184 
CONST
 
USB_DATAPUMP_APPLICATION_INIT_VECTOR_HDR
 
	ggk_UsbPumpAµliˇti⁄InôHdr
 =

185 
USB_DATAPUMP_APPLICATION_INIT_VECTOR_HDR_INIT_V1
(

186 
UsbPumpAµliˇti⁄InôVe˘‹
,

187  
NULL
,

188  
NULL


	@HowTo/WarpJpegDyn/leon/app_config.c

12 
	~<°dio.h
>

13 
	~"≠p_c⁄fig.h
"

14 
	~"DrvDdr.h
"

15 
	~"swcLe⁄Utûs.h
"

16 
	~"DrvShaveL2Cache.h
"

17 
	~"DrvTimî.h
"

18 
	~"DrvLe⁄L2C.h
"

19 
	~<DrvSùp.h
>

20 
	~<OsDrvC¥.h
>

24 
	#L2CACHE_CFG
 (
SHAVE_L2CACHE_NORMAL_MODE
)

	)

25 
	#SHAVES_USED
 (12)

	)

34 
tyAuxClkDividîCfg
 
	gauxClk
[] =

37 .
auxClockE«bÀMask
 = 
AUX_CLOCKS_VIDEO
,

38 .
	gauxClockSour˚
 = 
CLK_SRC_SYS_CLK_DIV2
 ,

39 .
	gauxClockDivNumî©‹
 = 1,

40 .
	gauxClockDivDíomö©‹
 = 1,

43 .
	gauxClockE«bÀMask
 = 
AUX_CLOCKS_MIPICFG
,

44 .
	gauxClockSour˚
 = 
CLK_SRC_SYS_CLK
 ,

45 .
	gauxClockDivNumî©‹
 = 1,

46 .
	gauxClockDivDíomö©‹
 = 18,

49 .
	gauxClockE«bÀMask
 = 
AUX_CLK_MASK_SDIO
,

50 .
	gauxClockSour˚
 = 
CLK_SRC_PLL0
,

51 .
	gauxClockDivNumî©‹
 = 1,

52 .
	gauxClockDivDíomö©‹
 = 8,

61 
	$blocksRe£tSûic⁄S≥cific
()

63 
	`DrvC¥SysDevi˚A˘i⁄
(
SIPP_DOMAIN
, 
ASSERT_RESET
, 
DEV_SIPP_MIPI
);

64 
	`DrvC¥SysDevi˚A˘i⁄
(
MSS_DOMAIN
, 
ASSERT_RESET
, 
DEV_MSS_SIPP
 | 
DEV_MSS_AMC
 | 
DEV_MSS_LCD
 );

65 
	`DrvC¥SysDevi˚A˘i⁄
(
MSS_DOMAIN
, 
DEASSERT_RESET
, -1);

66 
	`DrvC¥SysDevi˚A˘i⁄
(
CSS_DOMAIN
, 
DEASSERT_RESET
, -1);

67 
	`DrvC¥SysDevi˚A˘i⁄
(
SIPP_DOMAIN
, 
DEASSERT_RESET
, -1);

68 
	`DrvC¥SysDevi˚A˘i⁄
(
UPA_DOMAIN
, 
DEASSERT_RESET
, -1);

69 
	}
}

71 
	$öôClocksAndMem‹y
()

73 
i
;

74 
s32
 
sc
;

75 
∑πôi⁄Numbî
[
SHAVES_USED
];

78 
sc
 = 
	`OsDrvC¥Inô
();

79 if(
sc
)

80  
sc
;

81 
sc
 = 
	`OsDrvC¥O≥n
();

82 if(
sc
)

83  
sc
;

84 
sc
 = 
	`OsDrvC¥AuxClockAºayC⁄fig
(
auxClk
);

85 if(
sc
)

86  
sc
;

87 
	`blocksRe£tSûic⁄S≥cific
();

89 
	`DrvSùpE«bÀClk
();

91 
	`DrvDdrInôüli£
(
NULL
);

94 
sc
 = 
	`DrvShaveL2CacheSëMode
(
L2CACHE_CFG
);

95 if(
sc
)

96  
sc
;

99 
	`DrvLL2CFlushOpOnAŒLöes
(
LL2C_OPERATION_INVALIDATE
, 0);

103 
∑πôi⁄Numbî
[0] = 
	`DrvShaveL2CacheSëupP¨tôi⁄
(
SHAVEPART128KB
);

104 
∑πôi⁄Numbî
[1] = 
	`DrvShaveL2CacheSëupP¨tôi⁄
(
SHAVEPART64KB
);

105 
∑πôi⁄Numbî
[2] = 
	`DrvShaveL2CacheSëupP¨tôi⁄
(
SHAVEPART32KB
);

106 
∑πôi⁄Numbî
[3] = 
	`DrvShaveL2CacheSëupP¨tôi⁄
(
SHAVEPART32KB
);

109 
sc
 = 
	`DrvShaveL2CacheAŒoˇãSëP¨tôi⁄s
();

110 if(
sc
)

111  
sc
;

114 
i
 = 0; i < 
SHAVES_USED
; i++)

116 
	`DrvShaveL2CacheSëLSUP¨tId
(
i
, 
∑πôi⁄Numbî
[0]);

117 
	`DrvShaveL2CacheSëIn°rP¨tId
(
i
, 
∑πôi⁄Numbî
[3]);

118 
	`DrvShaveL2CacheSëWöP¨tId
(
i
,
SHAVEL2CACHEWIN_B
,
∑πôi⁄Numbî
[1]);

119 
	`DrvShaveL2CacheSëWöP¨tId
(
i
,
SHAVEL2CACHEWIN_C
,
∑πôi⁄Numbî
[2]);

122 
	`DrvShaveL2CacheP¨tôi⁄FlushAndInvÆid©e
(
∑πôi⁄Numbî
[0]);

123 
	`DrvShaveL2CacheP¨tôi⁄FlushAndInvÆid©e
(
∑πôi⁄Numbî
[2]);

126 
	}
}

	@HowTo/WarpJpegDyn/leon/app_config.h

13 #i‚de‡
APP_CONFIG_H


14 
	#APP_CONFIG_H


	)

18 
	~"mv_ty≥s.h
"

31 
	#SYS_CLK_KHZ
 12000

32 
	#PLL_DESIRED_FREQ_KHZ
 360000

33 
	#AUX_CLOCKS_MIPICFG
 (
AUX_CLK_MASK_MIPI_ECFG
 | 
AUX_CLK_MASK_MIPI_CFG
)

	)

34 
	#AUX_CLOCKS_VIDEO
 (
AUX_CLK_MASK_MEDIA
 | 
AUX_CLK_MASK_LCD
)

	)

36 
	#APP_MSS_CLOCKS
 ( 
DEV_MSS_APB_SLV
 | \

37 
DEV_MSS_APB2_CTRL
 | \

38 
DEV_MSS_RTBRIDGE
 | \

39 
DEV_MSS_RTAHB_CTRL
 | \

40 
DEV_MSS_LRT
 | \

41 
DEV_MSS_LRT_DSU
 | \

42 
DEV_MSS_LRT_L2C
 | \

43 
DEV_MSS_LRT_ICB
 | \

44 
DEV_MSS_AXI_BRIDGE
 | \

45 
DEV_MSS_MXI_CTRL
 | \

46 
DEV_MSS_MXI_DEFSLV
 | \

47 
DEV_MSS_AXI_MON
 | \

48 
DEV_MSS_LCD
 | \

49 
DEV_MSS_AMC
 | \

50 
DEV_MSS_SIPP
 | \

51 
DEV_MSS_TIM
 )

	)

53 
	#APP_SIPP_CLOCKS
 ( 
DEV_SIPP_SIPP_ABPSLV
 | \

54 
DEV_SIPP_MIPI
 | \

55 
DEV_SIPP_MIPI_RX1
 )

	)

57 
	#APP_UPA_CLOCKS
 (
DEV_UPA_SH0
 | \

58 
DEV_UPA_SH1
 | \

59 
DEV_UPA_SH2
 | \

60 
DEV_UPA_SH3
 | \

61 
DEV_UPA_SH4
 | \

62 
DEV_UPA_SH5
 | \

63 
DEV_UPA_SH6
 | \

64 
DEV_UPA_SH7
 | \

65 
DEV_UPA_SH8
 | \

66 
DEV_UPA_SH9
 | \

67 
DEV_UPA_SH10
 | \

68 
DEV_UPA_SH11
 | \

69 
DEV_UPA_SHAVE_L2
 | \

70 
DEV_UPA_CDMA
 | \

71 
DEV_UPA_CTRL
 )

	)

74 
öôClocksAndMem‹y
();

	@HowTo/WarpJpegDyn/leon/main.c

12 
	~<DrvLe⁄.h
>

13 
	~<DrvTimî.h
>

14 
	~"≠p_c⁄fig.h
"

15 
	~<πems.h
>

16 
	~<πems/b•Io.h
>

17 
	~"πems_c⁄fig.h
"

18 
	~<πems/fsmou¡.h
>

19 
	~<πems/bd∑π.h
>

20 
	~<OsDrvSdio.h
>

21 
	~<DrvGpio.h
>

22 
	~<OsBrdMv0182.h
>

23 
	~<f˙é.h
>

24 
	~<as£π.h
>

25 
	~<î∫o.h
>

26 
	~"comm⁄Deföe.h
"

27 
	~"swcShaveLﬂdî.h
"

28 
	~"swcLe⁄Utûs.h
"

29 
	~<°dlib.h
>

33 
	#DEFAULT_SDIO_INT_PRIORITY
 10

	)

34 
	#SDIO_SLOT_USED
 1

	)

35 
	#SDIO_DEVNAME_USED
 "/dev/sdc0"

	)

39 
u32
 
Ãt_°¨t
;

40 
j≥gFømeBuf„r
 * vﬁ©ûê
Ãt_pToSdˇrdBuf
;

46 c⁄° 
πems_f°ab_íåy
 
	gfs_èbÀ
 [] = {

48 .
sour˚
 = "/dev/sdc0",

49 .
	gèrgë
 = "/mnt/sdcard",

50 .
	gty≥
 = "dosfs",

51 .
	g›ti⁄s
 = 
RTEMS_FILESYSTEM_READ_WRITE
,

52 .
	gªp‹t_ªas⁄s
 = 
RTEMS_FSTAB_NONE
,

53 .
	gab‹t_ªas⁄s
 = 
RTEMS_FSTAB_OK


56 .
	gsour˚
 = "/dev/sdc01",

57 .
	gèrgë
 = "/mnt/sdcard",

58 .
	gty≥
 = "dosfs",

59 .
	g›ti⁄s
 = 
RTEMS_FILESYSTEM_READ_WRITE
,

60 .
	gªp‹t_ªas⁄s
 = 
RTEMS_FSTAB_NONE
,

61 .
	gab‹t_ªas⁄s
 = 
RTEMS_FSTAB_NONE


66 
wrôeSdC¨d
(
u8
 *
buff
, 
u32
 
size
);

67 *
makeJ≥gPi˘uª
();

71 *
	$POSIX_Inô
 (*
¨gs
)

73 
	`UNUSED
(
¨gs
);

74 
°©us
,
rc
;

75 
πems_°©us_code
 
sc
;

76 
±hªad_©å_t
 
©å
;

77 
±hªad_t
 
thªad1
;

79 
	`¥ötf
("\nRTEMS POSIX Started\n");

80 
°©us
 = 
	`öôClocksAndMem‹y
();

81 if(
°©us
)

82 
	`exô
(
°©us
);

83 
	`DrvLe⁄RTSèπup
((
u32
)&
Ãt_°¨t
);

86 
	`DrvLe⁄RTWaôF‹BoŸ
();

87 
	`¥ötf
("LeonRT has succesfully booted\n");

90 
osDrvSdioE¡rõs_t
 
öfo
 = { 1,

91 
DEFAULT_SDIO_INT_PRIORITY
,

92 {{
SDIO_SLOT_USED
,

93 
SDIO_DEVNAME_USED
,

94 
SDIO_SDR50
,

95 
NULL
}}};

98 
	`¥ötf
("\nSdio driver initialising \n");

99 
°©us
 = 
	`OsDrvSdioInô
(&
öfo
);

100 if(
°©us
==
RTEMS_IO_ERROR
)

102 
	`¥ötf
("\n ERROR: Check if sdcard was inserted\n");

106 
	`¥ötf
("\nOsDrvSdioInô s¯%†\n", 
	`πems_°©us_ãxt
(
°©us
));

108 
sc
 = 
	`πems_bd∑π_ªgi°î_‰om_disk
(
SDIO_DEVNAME_USED
);

109 
	`¥ötf
("\ƒãms_bd∑π_ªgi°î_‰om_disk s¯%†\n", 
	`πems_°©us_ãxt
(
sc
));

112 
sc
 = 
	`πems_fsmou¡
–
fs_èbÀ
, (fs_èbÀ)/(fs_èbÀ[0]), 
NULL
);

113 
	`¥ötf
("\nMou¡ög FûêSy°em %†\n", 
	`πems_°©us_ãxt
(
sc
));

114 
sc
 = 
	`±hªad_©å_öô
(&
©å
);

115 i‡(
sc
)

117 
	`¥ötf
("pthread_attr_initÉrror");

118 
	`exô
(
sc
);

120 
sc
 = 
	`±hªad_©å_£töhîôsched
(&
©å
, 
PTHREAD_EXPLICIT_SCHED
);

121 i‡(
sc
)

123 
	`¥ötf
("pthread_attr_setinheritschedÉrror");

124 
	`exô
(
sc
);

126 
sc
 = 
	`±hªad_©å_£tschedpﬁicy
(&
©å
, 
SCHED_RR
);

127 i‡(
sc
)

129 
	`¥ötf
("pthread_attr_setschedpolicyÉrror");

130 
	`exô
(
sc
);

132 
rc
 = 
	`±hªad_¸óã
(&
thªad1
, &
©å
, &
makeJ≥gPi˘uª
, 
NULL
);

133 i‡(
rc
)

135 
	`¥ötf
("Thªad cª©i⁄ faûed: %d\n", 
rc
);

136 
	`exô
(
rc
);

140 
	`¥ötf
("Thread created\n");

143  
NULL
;

144 
	}
}

146 
	$wrôeSdC¨d
(
u8
 *
buff
, 
u32
 
size
)

148 
fd
 = 0;

150 
πems_°©us_code
 
sc
;

151 
fûe
[100];

152 
u32
 
fûeNum
 = 0;

153 
·mp
[] = "/mnt/sdcard/warpCnt.tmp";

154 
fx
;

155 
txt
[10];

157 
fx
 = 
	`›í
(
·mp
, 
O_RDWR
 | 
O_CREAT
, 
S_IRWXU
 | 
S_IRWXG
 | 
S_IRWXO
);

158 i‡(
	`ªad
(
fx
, 
txt
, 4) == 4)

160 
	`ssˇnf
(
txt
, "%04lu", &
fûeNum
);

161 
	`¥ötf
("Sˇ¬ed %lu \n", 
fûeNum
);

163 
	`l£ek
(
fx
, 0, 
SEEK_SET
);

164 
	`•rötf
(
txt
, "%04lu", 
fûeNum
 + 1);

165 
	`¥ötf
("Wrôã¿tÿfûê%lu \n", 
fûeNum
 + 1);

167 
sc
 = 
	`wrôe
(
fx
, 
txt
, 4);

168 
	`as£π
(
sc
);

169 
	`fsync
(
fx
);

170 
	`˛o£
(
fx
);

172 
fx
 = 
	`›í
(
·mp
, 
O_RDWR
 | 
O_CREAT
, 
S_IRWXU
 | 
S_IRWXG
 | 
S_IRWXO
);

173 i‡(
	`ªad
(
fx
, 
txt
, 4) == 4)

175 
	`ssˇnf
(
txt
, "%04lu", &
fûeNum
);

176 
	`¥ötf
("Sˇ¬ed %lu \n", 
fûeNum
);

178 
	`˛o£
(
fx
);

180 
	`•rötf
(
fûe
, "/m¡/sdˇrd/w¨p_1920x1080_P400_%03lu.jpg", 
fûeNum
++);

182 
	`¥ötf
("\nCª©ög fûê%s\n", 
fûe
);

183 
fd
 = 
	`¸ót
(
fûe
, 
S_IRWXU
 | 
S_IRWXG
 | 
S_IRWXO
);

184 
	`as£π
(
fd
);

186 
	`¥ötf
("\nWrôög %lu byã†tÿfûe\n", 
size
);

187 
sc
 = 
	`wrôe
(
fd
, 
buff
, 
size
);

188 
	`as£π
(
sc
);

190 
	`¥ötf
("\nPerform fsync\n");

191 
sc
 = 
	`fsync
(
fd
);

192 i‡(
sc
 != 0)

193 
	`¥ötf
("fsyn¯Áûed,Ñë %d,Éº %s\n", 
sc
, 
	`°ªº‹
(
î∫o
));

195 
	`¥ötf
("\nClosing file\n");

196 
sc
 = 
	`˛o£
(
fd
);

197 i‡(
sc
 != 0)

198 
	`¥ötf
("˛o£ faûed,Ñë %d,Éº %s\n", 
sc
, 
	`°ªº‹
(
î∫o
));

199 
	}
}

200 *
	$makeJ≥gPi˘uª
()

204 i‡(
Ãt_pToSdˇrdBuf
 != 0)

206 
	`wrôeSdC¨d
(
Ãt_pToSdˇrdBuf
->
buf
,Üπ_pToSdˇrdBuf->
size
);

207 
Ãt_pToSdˇrdBuf
 = 0;

210  
NULL
;

211 
	}
}

	@HowTo/WarpJpegDyn/leon/rtems_config.h

8 #i‚de‡
_RTEMS_CONFIG_H_


9 
	#_RTEMS_CONFIG_H_


	)

13 
	~"≠p_c⁄fig.h
"

14 
	~"ÁèlExãnsi⁄.h
"

16 #i‡
deföed
(
__RTEMS__
)

18 #i‡!
deföed
 (
__CONFIG__
)

19 
	#__CONFIG__


	)

25 
	#CONFIGURE_INIT


	)

27 #i‚de‡
RTEMS_POSIX_API


28 
	#RTEMS_POSIX_API


	)

31 
	#CONFIGURE_MICROSECONDS_PER_TICK
 1000

	)

33 
	#CONFIGURE_TICKS_PER_TIMESLICE
 50

	)

35 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

37 
	#CONFIGURE_APPLICATION_NEEDS_CLOCK_DRIVER


	)

39 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

41 
	#CONFIGURE_MINIMUM_TASK_STACK_SIZE
 (8192)

	)

43 
	#CONFIGURE_MAXIMUM_TASKS
 20

	)

45 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 5

	)

47 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 8

	)

49 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 8

	)

51 
	#CONFIGURE_MAXIMUM_POSIX_SEMAPHORES
 8

	)

53 
	#CONFIGURE_MAXIMUM_POSIX_MESSAGE_QUEUES
 8

	)

55 
	#CONFIGURE_MAXIMUM_POSIX_TIMERS
 4

	)

57 
	#CONFIGURE_MAXIMUM_TIMERS
 4

	)

59 
	#CONFIGURE_USE_IMFS_AS_BASE_FILESYSTEM


	)

61 
	#CONFIGURE_FILESYSTEM_DOSFS


	)

63 
	#CONFIGURE_MAXIMUM_DRIVERS
 10

	)

66 
	#CONFIGURE_MAXIMUM_SEMAPHORES
 
	`πems_ªsour˚_u∆imôed
(5)

	)

68 
	#CONFIGURE_LIBIO_MAXIMUM_FILE_DESCRIPTORS
 30

	)

70 
	#CONFIGURE_APPLICATION_NEEDS_LIBBLOCK


	)

72 
	#CONFIGURE_POSIX_INIT_TASKS_TABLE


	)

74 
	#CONFIGURE_BDBUF_MAX_READ_AHEAD_BLOCKS
 (16)

	)

76 
	#CONFIGURE_BDBUF_MAX_WRITE_BLOCKS
 (64)

	)

78 
	#CONFIGURE_BDBUF_BUFFER_MIN_SIZE
 (512)

	)

80 
	#CONFIGURE_BDBUF_BUFFER_MAX_SIZE
 (32 * 1024)

	)

82 
	#CONFIGURE_BDBUF_CACHE_MEMORY_SIZE
 (4 * 1024 * 1024)

	)

85 
	#CONFIGURE_MAXIMUM_USER_EXTENSIONS
 1

	)

86 
	#CONFIGURE_INITIAL_EXTENSIONS
 { .
Áèl
 = 
F©Æ_exãnsi⁄
 }

	)

93 *
POSIX_Inô
 (*
¨gs
);

95 
	~<πems/c⁄fdefs.h
>

103 
BSP_SET_CLOCK
(
SYS_CLK_KHZ
, 
PLL_DESIRED_FREQ_KHZ
, 1, 1, 
DEFAULT_CORE_CSS_DSS_CLOCKS
 | 
DEV_CSS_SDIO
, 
APP_MSS_CLOCKS
, 
APP_UPA_CLOCKS
, 
APP_SIPP_CLOCKS
, 0);

106 
BSP_SET_L2C_CONFIG
(0, 
L2C_REPL_LRU
, 0, 
L2C_MODE_COPY_BACK
, 0, 
NULL
);

	@HowTo/WarpJpegDyn/leon_rt/fisheye_mesh.h

1 #i‚de‡
FISHEYE_MESH_H_


2 
	#FISHEYE_MESH_H_


	)

4 
Â32
 
	gfisheyeMesh_x
[
MESH_HEIGHT
][
MESH_WIDTH
] = {{173.887512, 178.151413, 182.84613, 187.934616, 193.384537, 199.166977, 205.257553, 211.636032, 218.285477, 225.193298, 232.350311, 239.750671, 247.391678, 255.273407, 263.39859, 271.771942, 280.40036, 289.292236, 298.45694, 307.904877, 317.647308, 327.695557, 338.06073, 348.75412, 359.786194, 371.166779, 382.904785, 395.007904, 407.482635, 420.334045, 433.565582, 447.179169, 461.175049, 475.551575, 490.305634, 505.432037, 520.924194, 536.773071, 552.968811, 569.499207, 586.35083, 603.508301, 620.955322, 638.673706, 656.644287, 674.846619, 693.259094, 711.859192, 730.623657, 749.528442, 768.548645, 787.659302, 806.834778, 826.049377, 845.277222, 864.492676, 883.6698, 902.783752, 921.809387, 940.722656, 959.499939, 978.118774, 996.557251, 1014.795044, 1032.812744, 1050.592407, 1068.117432, 1085.373169, 1102.346313, 1119.025391, 1135.400757, 1151.464722, 1167.21167, 1182.637695, 1197.741089, 1212.522461, 1226.984009, 1241.130127, 1254.967041, 1268.50293, 1281.747803, 1294.712646, 1307.410645, 1319.855591, 1332.0625, 1344.046753, 1355.824585, 1367.412354, 1378.825562, 1390.079468, 1401.188354, 1412.165283, 1423.021118, 1433.764893, 1444.403076, 1454.939575, 1465.374268, 1475.70459, 1485.92334, 1496.019775, 1505.978882, 1515.781616, 1525.404053, 1534.818237, 1543.991699, 1552.887451, 1561.464844, 1569.678833, 1577.480103, 1428.958984, 1438.862427, 1448.682739, 1458.409302, 1468.031372, 1477.537354, 1486.915771, 1496.154419, 1505.241211, 1514.16272, 1522.90564, 1531.456665},

73 
Â32
 
	gfisheyeMesh_y
[
MESH_HEIGHT
][
MESH_WIDTH
] = {{353111.40625, 351994.15625, 350854.6875, 349655.75, 348370.09375, 346981.15625, 345482.9375, 343879.28125, 342183.71875, 340418.0625, 338611.125, 336797.53125, 335016.1875, 333309.1875, 331720.0625, 330293.125, 329072.34375, 328100.40625, 327418.3125, 327064.4375, 327074.625, 327481.40625, 328314.34375, 329599.25, 331358.65625, 333611.4375, 336373.09375, 339655.5625, 343467.5, 347814.03125, 352697.21875, 358116.09375, 364066.5, 370541.40625, 377531.34375, 385023.75, 393003.875, 401454.65625, 410356.5, 419688.09375, 429425.96875, 439544.875, 450017.84375, 460816.5, 471911.0, 483270.25, 494862.0625, 506653.25, 518609.6875, 530696.9375, 542879.5, 555122.0, 567388.25, 579642.25, 591848.0625, 603969.8125, 615971.9375, 627819.125, 639476.9375, 650911.5625, 662090.0, 672980.25, 683551.3125, 693773.9375, 703619.75, 713062.0625, 722076.0, 730638.4375, 738728.3125, 746326.375, 753415.9375, 759982.125, 766013.25, 771499.375, 776433.9375, 780812.6875, 784634.5625, 787901.1875, 790617.75, 792792.0, 794435.0, 795561.1875, 796188.125, 796336.25, 796029.5625, 795294.875, 794161.625, 792662.0, 790830.625, 788703.875, 786319.8125, 783717.25, 780935.375, 778012.8125, 774987.0625, 771893.0625, 768762.625, 765623.0625, 762496.125, 759397.4375, 756334.8125, 753307.8125, 750307.4375, 747315.25, 744303.5, 741235.375, 738065.5625, 734740.8125, 731201.5, 69.434242, 72.611801, 75.863327, 79.189232, 82.590385, 86.067421, 89.621124, 93.252228, 96.961441, 100.749565, 104.617439, 108.565926},

	@HowTo/WarpJpegDyn/leon_rt/identity_mesh.h

1 #i‚de‡
IDENTITY_MESH_H_


2 
	#IDENTITY_MESH_H_


	)

4 
Â32
 
	gidítôyMesh_x
[
MESH_HEIGHT
][
MESH_WIDTH
] = {{0.0, 16.0, 32.0, 48.0, 64.0, 80.0, 96.0, 112.0, 128.0, 144.0, 160.0, 176.0, 192.0, 208.0, 224.0, 240.0, 256.0, 272.0, 288.0, 304.0, 320.0, 336.0, 352.0, 368.0, 384.0, 400.0, 416.0, 432.0, 448.0, 464.0, 480.0, 496.0, 512.0, 528.0, 544.0, 560.0, 576.0, 592.0, 608.0, 624.0, 640.0, 656.0, 672.0, 688.0, 704.0, 720.0, 736.0, 752.0, 768.0, 784.0, 800.0, 816.0, 832.0, 848.0, 864.0, 880.0, 896.0, 912.0, 928.0, 944.0, 960.0, 976.0, 992.0, 1008.0, 1024.0, 1040.0, 1056.0, 1072.0, 1088.0, 1104.0, 1120.0, 1136.0, 1152.0, 1168.0, 1184.0, 1200.0, 1216.0, 1232.0, 1248.0, 1264.0, 1280.0, 1296.0, 1312.0, 1328.0, 1344.0, 1360.0, 1376.0, 1392.0, 1408.0, 1424.0, 1440.0, 1456.0, 1472.0, 1488.0, 1504.0, 1520.0, 1536.0, 1552.0, 1568.0, 1584.0, 1600.0, 1616.0, 1632.0, 1648.0, 1664.0, 1680.0, 1696.0, 1712.0, 1728.0, 1744.0, 1760.0, 1776.0, 1792.0, 1808.0, 1824.0, 1840.0, 1856.0, 1872.0, 1888.0, 1904.0, 1920.0},

73 
Â32
 
	gidítôyMesh_y
[
MESH_HEIGHT
][
MESH_WIDTH
] = {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},

	@HowTo/WarpJpegDyn/leon_rt/lrt_app_config.c

13 
	~"DrvC¥.h
"

14 
	~"DrvTimî.h
"

15 
	~<Ãt_≠p_c⁄fig.h
>

21 
	#SYS_CLK_KHZ
 (12000)

	)

35 
	$öôClocksAndMem‹y
()

37 
s32
 
sc
;

38 
sc
 = 
	`DrvC¥InôClocks
(
SYS_CLK_KHZ
, 0, 0, 0, 0);

39 if(
sc
)

40  
sc
;

41 
sc
 = 
	`DrvTimîInô
();

42 if(
sc
)

43  
sc
;

45 
	}
}

	@HowTo/WarpJpegDyn/leon_rt/lrt_app_config.h

13 #i‚de‡
APP_CONFIG_H


14 
	#APP_CONFIG_H


	)

24 
	#PARTITION_0
 (0)

	)

31 
öôClocksAndMem‹y
();

	@HowTo/WarpJpegDyn/leon_rt/main_code.c

12 
	~<°dio.h
>

13 
	~<°rög.h
>

14 
	~<°dlib.h
>

16 
	~"Ãt_≠p_c⁄fig.h
"

17 #ifde‡
MV0212


18 
	~"MV0212.h
"

19 
	~"brdGpioCfgs/brdMv0182R5GpioDeÁu…s.h
"

20 #ñi‡
deföed
(
MV0182
)

21 
	~<Bﬂrd182Api.h
>

23 
	~"DrvCDCEL.h
"

24 
	~"DrvC¥.h
"

25 
	~"DrvADV7513.h
"

26 
	~"CamGíîicApi.h
"

27 
	~"LcdApi.h
"

28 
	~"DrvMss.h
"

29 
	~<DrvLe⁄.h
>

30 
	~<DrvTimî.h
>

31 
	~"DrvShaveL2Cache.h
"

32 
	~"swcShaveLﬂdî.h
"

33 
	~"LcdCEA1080p60.h
"

34 
	~"imx208_2L_1936x1096_Raw10C⁄vîãd8_60Hz.h
"

35 
	~"DrvCmxDma.h
"

36 
	~"comm⁄Deföe.h
"

37 
	~"ªgi°îsMyrüd.h
"

38 
	~"imageW¨p.h
"

39 
	~"J≥gEncodîApi.h
"

41 
	~"mesh.h
"

46 
	#FRAMES_PER_WARP
 45

47 
	#WARP_EFFECTS
 4

48 

	)

49 
	#MAX_USED_BUF
 10

50 
	#FIRST_INCOMING_BUF_ID
 1

	)

51 
	#FIRST_OUTGOING_BUF_ID
 0

	)

53 
	#CAM_WINDOW_START_COLUMN
 0

	)

54 
	#CAM_WINDOW_START_ROW
 8

55 

	)

56 
	#WINDOW_WIDTH
 1920

	)

57 
	#WINDOW_HEIGHT
 1080

	)

58 
	#WINDOW_MARGIN
 160

	)

60 
	#CAM_BPP
 1

63 
	#LCD_BPP
 1

66 

	)

67 
	#CAM_FRAME_SIZE_BYTES
 (
WINDOW_WIDTH
 * 
WINDOW_HEIGHT
 * 
CAM_BPP
)

	)

68 
	#LCD_CHROMA_SIZE_BYTES
 (
WINDOW_WIDTH
 * 
WINDOW_HEIGHT
 * 
LCD_BPP
 )

	)

70 
	#DDR_AREA
 
	`__©åibuã__
((
	`£˘i⁄
(".ddr.bss")))

	)

71 
	#DDR_UNCACHED
 
	`__©åibuã__
((
	`£˘i⁄
(".ddr_dúe˘.bss")))

	)

73 
	#SHAVE_NUMBER
 0

	)

74 
	#WM8325_SLAVE_ADDRESS
 0x36

	)

77 
	#TWO_BYTES_SIZE
 2

	)

78 
	#BUTTON_READ_DEBOUNCE_TRIGGER
 5

	)

80 
	#INPUT_BUFF_SIZE_SHAVE
 32*1024

	)

82 
	ew¨pEf„˘
 {

83 
	mIDENTITY_WARP
,

84 
	mFISHEYE_WARP
,

85 
	mWAVE_WARP
,

86 
	mPERSPECTIVE_WARP
,

88 #ifde‡
MV0212


89 
	#NUM_I2C_DEVS
 3

	)

93 
I2CM_Devi˚
 * 
	gi2c0H™dÀ
;

94 
I2CM_Devi˚
 * 
	gi2c2H™dÀ
;

95 
I2CM_Devi˚
 
	gI2cDevi˚
;

96 
u8
 
	g¥ŸocﬁRódSam∂e2
[] = 
I2C_PROTO_READ_16BA
;

97 vﬁ©ûê
u8
 
	g¥evBuâ⁄
[2];

98 
u32
 
	gBuâ⁄RódDeboun˚Cou¡î
;

99 c⁄° 
u8
 
	gc⁄åﬁVÆue
[2] = {0x80, 0xc0};

104 
GíîicCamS≥c
 *
	gˇmC⁄fig
 = &
imx208_2L_1936x1096_RAW10CONV8_60Hz_ˇmCfg
;

105 
ADV7513C⁄tfigMode_t
 
	gADV7513C⁄fig
 = 
ADV7513_1080P60
;

107 vﬁ©ûê
u32
 
	g√wCamFømeCå
 = 
FIRST_INCOMING_BUF_ID
;

108 vﬁ©ûê
u32
 
	glcdFømeCå
 = 
FIRST_OUTGOING_BUF_ID
;

110 
u8
 
DDR_AREA
 
__©åibuã__
((
	$Æig√d
(16))Ë
ˇmBuf
[
MAX_USED_BUF
][
CAM_FRAME_SIZE_BYTES
];

111 
u8
 
DDR_AREA
 
	`__©åibuã__
((
	$Æig√d
(16))Ë
lcdBuf
[
MAX_USED_BUF
][
CAM_FRAME_SIZE_BYTES
];

112 
u8
 
DDR_AREA
 
toSdˇrdBuf
[
CAM_FRAME_SIZE_BYTES
];

113 
u8
 
DDR_AREA
 
jpgbuff
[
CAM_FRAME_SIZE_BYTES
];

115 vﬁ©ûê
j≥gFømeBuf„r
 
DDR_UNCACHED
 *
pToSdˇrdBuf
;

116 
u8
 
DDR_AREA
 
lcdDummyChroma
[
LCD_CHROMA_SIZE_BYTES
];

118 
GíîicCamîaH™dÀ
 
ˇmHndl
;

119 
CamU£rS≥c
 
u£rC⁄fig
;

120 
‰ameS≥c
 
ˇmFømeS≥c
;

121 
‰ameBuf„r
 
ˇmFøme
[
MAX_USED_BUF
];

122 
‰ameBuf„r
 
sdC¨dFøme
;

123 vﬁ©ûê
j≥gFømeBuf„r
 
DDR_UNCACHED
 
j≥g
;

124 
‰ameS≥c
 
lcdFømeS≥c
;

125 
‰ameBuf„r
 
lcdFøme
[
MAX_USED_BUF
];

126 
LCDH™dÀ
 
lcdHndl
;

128 
ˇŒbacksLi°Såu˘
 
ˇŒbacks
 = {0
	}
};

129 
öãºu±sCÆlbacksLi°Ty≥
 
	gi§CÆlbacks
 = {0};

131 vﬁ©ûê
u32
 
	g¥o˚ssögFømeCå
;

132 
tûeLi°
 
	gtûeNodes
[
MESH_HEIGHT
 * 
MESH_WIDTH
];

134 
tyI2cC⁄fig
 
	gi2c2Ma°îCfg
 =

136 .
devi˚
 = 
IIC3_BASE_ADR
,

137 .
	gs˛Pö
 = 79,

138 .
	gsdaPö
 = 80,

139 .
	g•ìdKhz
 = 100,

140 .
	gaddªssSize
 = 
ADDR_7BIT
,

141 .
	gîr‹H™dÀr
 = 
NULL


143 
u8
 
	g¥ŸocﬁWrôeSam∂e2
[] = 
I2C_PROTO_WRITE_16BA
;

148 
runW¨p
(
swcShaveUnô_t
 
svu
, 
meshSåu˘
* 
mesh
,

149 
‰ameBuf„r
 *
öputFb
,

150 
‰ameBuf„r
 *
ouçutFb
,

151 
∑ddögvÆue
);

152 
¥ï¨eDrivîD©a
();

153 
‰ameBuf„r
* 
AŒoˇãNextCamFømeBuf
();

154 
‰ameBuf„r
* 
ÆloˇãLcdFøme
(
œyî
);

159 
	$runW¨p
(
swcShaveUnô_t
 
svu
, 
meshSåu˘
* 
mesh
,

160 
‰ameBuf„r
 *
öputFb
,

161 
‰ameBuf„r
 *
ouçutFb
,

162 
∑ddögvÆue
)

164 
	`IMGWARP_°¨t
(
svu
, 
mesh
, 
tûeNodes
, 
öputFb
, 
ouçutFb
, 
∑ddögvÆue
);

165 
	`DrvShaveL2CacheP¨tôi⁄FlushAndInvÆid©e
(
PARTITION_0
);

166 
	}
}

168 
	$¥ï¨eDrivîD©a
()

170 
s32
 
ibuf
;

174 
u£rC⁄fig
.
mùiC⁄åﬁÀrNb
 = 
CAM_B1_MIPICTRL
;

175 
u£rC⁄fig
.
ª˚ivîId
 = 
SIPP_DEVICE1
;

176 #ifde‡
MV0212


177 
u£rC⁄fig
.
£ns‹Re£tPö
 = 
MV0212_MV0200_SENSOR_RIGHT_RST_GPIO
;

178 #ñi‡
	`deföed
(
MV0182
)

179 
u£rC⁄fig
.
£ns‹Re£tPö
 = 
MV0182_MV0200_SENSOR_RIGHT_RST_GPIO
;

181 
u£rC⁄fig
.
°îeoPaúIndex
 = 
CAM_B1_RIGHT_ADDR
;

182 
u£rC⁄fig
.
wödowCﬁumnSèπ
 = 
CAM_WINDOW_START_COLUMN
;

183 
u£rC⁄fig
.
wödowRowSèπ
 = 
CAM_WINDOW_START_ROW
;

184 
u£rC⁄fig
.
wödowWidth
 = 
WINDOW_WIDTH
;

185 
u£rC⁄fig
.
wödowHeight
 = 
WINDOW_HEIGHT
;

186 
u£rC⁄fig
.
gíî©eSync
 = 
NULL
;

189 
ˇmFømeS≥c
.
width
 = 
WINDOW_WIDTH
;

190 
ˇmFømeS≥c
.
height
 = 
WINDOW_HEIGHT
;

191 
ˇmFømeS≥c
.
byãsPP
 = 
CAM_BPP
;

192 
ˇmFømeS≥c
.
°ride
 = 
WINDOW_WIDTH
 * 
CAM_BPP
;

193 
ˇmFømeS≥c
.
ty≥
 = 
RAW16
;

196 
ibuf
 = 0; ibu‡< 
MAX_USED_BUF
;ibuf++)

198 
ˇmFøme
[
ibuf
].
p1
 = (*)
ˇmBuf
[ibuf];

199 
ˇmFøme
[
ibuf
].
p2
 = 
NULL
;

200 
ˇmFøme
[
ibuf
].
p3
 = 
NULL
;

201 
ˇmFøme
[
ibuf
].
•ec
 = 
ˇmFømeS≥c
;

204 
i§CÆlbacks
.
gëBlock
 = 
NULL
;

205 
i§CÆlbacks
.
gëFøme
 = 
AŒoˇãNextCamFømeBuf
;

206 
i§CÆlbacks
.
nŸifiˇti⁄
 = 
NULL
;

207 
ˇŒbacks
.
i§CbfLi°
 = &
i§CÆlbacks
;

208 
ˇŒbacks
.
£ns‹CbfLi°
 = 
NULL
;

211 
lcdFømeS≥c
.
width
 = 
WINDOW_WIDTH
;

212 
lcdFømeS≥c
.
height
 = 
WINDOW_HEIGHT
;

213 
lcdFømeS≥c
.
°ride
 = 
WINDOW_WIDTH
 * 
LCD_BPP
;

214 
lcdFømeS≥c
.
byãsPP
 = 
LCD_BPP
;

215 
lcdFømeS≥c
.
ty≥
 = 
YUV422p
;

217 
ibuf
 = 0; ibu‡< 
MAX_USED_BUF
;ibuf++)

219 
lcdFøme
[
ibuf
].
•ec
 = 
lcdFømeS≥c
;

220 
lcdFøme
[
ibuf
].
p1
 = &
lcdBuf
[ibuf][0];

221 
lcdFøme
[
ibuf
].
p2
 = 
lcdDummyChroma
;

222 
lcdFøme
[
ibuf
].
p3
 = 
lcdDummyChroma
;

226 
	}
}

228 
‰ameBuf„r
* 
	$AŒoˇãNextCamFømeBuf
()

230 
√wCamFømeCå
++;

231  ( &
ˇmFøme
[
√wCamFømeCå
 % 
MAX_USED_BUF
] );

232 
	}
}

234 
‰ameBuf„r
* 
	$ÆloˇãLcdFøme
(
œyî
)

236 
	`UNUSED
(
œyî
);

238  ( &
lcdFøme
[
lcdFømeCå
 % 
MAX_USED_BUF
] );

239 
	}
}

241 
ölöe
 
	$ªadBuâ⁄
(
u8
 *
cuºBuâ⁄
)

243 
I2CM_SètusTy≥
 
sc
;

244 
u8
 
lBuâ⁄Sètus
[
TWO_BYTES_SIZE
];

245 
ªtVÆ
 = 0;

247 
sc
 = 
	`DrvI2cMTønß˘i⁄
(&
I2cDevi˚
, 
WM8325_SLAVE_ADDRESS
,

249 
¥ŸocﬁRódSam∂e2
,

250 (
u8
 *Ë&
lBuâ⁄Sètus
[0],

251 
TWO_BYTES_SIZE
);

252 if(
sc
 =
I2CM_STAT_OK
)

254 i‡–(*
cuºBuâ⁄
 !
lBuâ⁄Sètus
[1])

255 && (
Buâ⁄RódDeboun˚Cou¡î
 == 0) )

257 
Buâ⁄RódDeboun˚Cou¡î
 = 
BUTTON_READ_DEBOUNCE_TRIGGER
;

258 *
cuºBuâ⁄
 = 
lBuâ⁄Sètus
[1];

259 
ªtVÆ
 = 1;

262 i‡(
Buâ⁄RódDeboun˚Cou¡î
 > 0)

264 
Buâ⁄RódDeboun˚Cou¡î
--;

269 
ªtVÆ
 = -1;

272  
ªtVÆ
;

273 
	}
}

276 
	$maö
()

278 
s32
 
°©us
;

279 
u32
 
löe
;

280 
u32
 
w¨pEf„˘StyÀ
 = 
IDENTITY_WARP
;

281 
ˇmEº‹Ty≥
 
ˇmSètus
;

282 
LCDLayîOff£t
 
lcdLayîSèπOff£t
 = {0, 0};

283 
s32
 
bﬂrdSètus
;

284 
meshSåu˘
 
mesh
;

285 
‰ameBuf„r
* 
cuºFøme
;

286 
s32
 
buffcou¡
;

287 
ªadBuâ⁄Sètus
;

288 
Buâ⁄RódDeboun˚Cou¡î
 = 0;

289 
u8
 
buâ⁄
 = 0;

290 
u8
 
¥eviousBuâ⁄
 = 0;

291 
pToSdˇrdBuf
=0;

293 
j≥g
.
size
=0;

294 
j≥g
.
buf
=
jpgbuff
;

296 
	`DrvCmxDmaInôDeÁu…
();

297 
°©us
 = 
	`öôClocksAndMem‹y
();

298 if(
°©us
)

299  
°©us
;

301 #ifde‡
MV0212


302 
öt32_t
 
rc
;

303 
uöt32_t
 
ªv
;

304 
BﬂrdI2CInfo
 
öfo
[
NUM_I2C_DEVS
];

305 
BﬂrdC⁄figDesc
 
c⁄fig
[] =

308 
BRDCONFIG_GPIO
,

310 (*)
brdMV0182R5GpioCfgDeÁu…


313 
BRDCONFIG_END
,

314 
NULL


318 
rc
 = 
	`BﬂrdInô
(
c⁄fig
);

319 i‡(
rc
!=
BRDCONFIG_SUCCESS
)

321 
	`¥ötf
("Eº‹: bﬂrd inôüliz©i⁄ faûed wôh %ld sètus\n", 
rc
);

322  
rc
;

325 
rc
 = 
	`BﬂrdGëPCBRevisi⁄
(&
ªv
);

326 i‡(
rc
!=
BRDCONFIG_SUCCESS
)

328 
	`¥ötf
("Eº‹: bﬂrd c⁄figuøti⁄Ñód faûed wôh %ld sètus\n", 
rc
);

329  
rc
;

331 
	`¥ötf
("Bﬂrd Mv0212 inôülized,Ñevisi⁄ = %lu \n", 
ªv
);

333 
bﬂrdSètus
 = 
	`BﬂrdInôExtPŒ
(
EXT_PLL_CFG_148_24_24MHZ
);

334 i‡(
bﬂrdSètus
 !
BRDCONFIG_SUCCESS
)

336 
	`¥ötf
("Eº‹: bﬂrd inôüliz©i⁄ faûed wôh %ld sètus\n", 
bﬂrdSètus
);

340 
rc
 = 
	`BﬂrdGëI2CInfo
(
öfo
, 
NUM_I2C_DEVS
);

341 i‡(
rc
!=
BRDCONFIG_SUCCESS
)

343 
	`¥ötf
("Eº‹: bﬂrd c⁄figuøti⁄Ñód faûed wôh %ld sètus\n", 
rc
);

344  
rc
;

346 
i2c0H™dÀ
=
öfo
[0].
h™dÀr
;

347 
i2c2H™dÀ
=
öfo
[2].
h™dÀr
;

348 #ñi‡
	`deföed
(
MV0182
)

349 
bﬂrdSètus
 = 
	`BﬂrdInôüli£
(
EXT_PLL_CFG_148_24_24MHZ
);

350 
i2c0H™dÀ
=
gAµDevHndls
.i2c0Handle;

351 
i2c2H™dÀ
=
gAµDevHndls
.i2c2Handle;

352 i‡(
bﬂrdSètus
 !
B_SUCCESS
)

354 
	`¥ötf
("Eº‹: bﬂrd inôüliz©i⁄ faûed wôh %ld sètus\n", 
bﬂrdSètus
);

359 
	`swcLe⁄SëPIL
(0);

360 
	`¥ötf
("Configuring cameraánd datapath\n");

361 
	`¥ï¨eDrivîD©a
();

367 
	`mem£t
(
lcdDummyChroma
, 0x80, (lcdDummyChroma));

370 
	`DrvMssC⁄√˘LcdToGpio
();

372 
ˇmSètus
 = 
	`CamInô
–&
ˇmHndl
, 
ˇmC⁄fig
, &
u£rC⁄fig
, &
ˇŒbacks
, 
i2c0H™dÀ
 );

373 i‡(
ˇmSètus
 !
CAM_SUCCESS
)

375 
	`¥ötf
("\¿Camî®c⁄figuøti⁄ faûed (%d).\n", 
ˇmSètus
);

379 
ˇmSètus
 = 
	`CamSèπ
(&
ˇmHndl
);

380 i‡(
ˇmSètus
 !
CAM_SUCCESS
)

382 
	`¥ötf
("\¿Camî®ÁûedÅÿ°¨à(%d).\n", 
ˇmSètus
);

386 
	`¥ötf
("ConfiguringÅhe HDMI chip ADV7513\n");

387 
°©us
 = 
	`öôADV7513ªg
(
i2c2H™dÀ
, 
ADV7513C⁄fig
);

389 i‡(
°©us
 != 0)

391 
	`¥ötf
("\¿ADV7513 chù c⁄figuøti⁄ faûed wôh codê%ld.\n", 
°©us
);

395 
	`¥ötf
("ConfiguringÅhe LCD\n");

396 
	`LCDInô
(&
lcdHndl
, &
lcdS≥c1080p60
, 
NULL
, 
LCD1
);

397 
	`LCDInôLayî
(&
lcdHndl
, 
VL1
, &
lcdFømeS≥c
, 
lcdLayîSèπOff£t
);

398 
	`LCDSëupCÆlbacks
(&
lcdHndl
, &
ÆloˇãLcdFøme
, 
NULL
, NULL, NULL);

401 
buffcou¡
=0; buffcou¡<
MAX_USED_BUF
;buffcount++)

403 
	`mem£t
(
lcdFøme
[
buffcou¡
].
p1
, 0x0, 
WINDOW_WIDTH
 * 
WINDOW_HEIGHT
);

406 
	`LCDSèπ
(&
lcdHndl
);

409 
mesh
.
meshWidth
 = 
MESH_WIDTH
;

410 
mesh
.
meshHeight
 = 
MESH_HEIGHT
;

413 
	`¥ötf
("ConfiguringÅhe I2C Driver\n");

414 
°©us
 = 
	`DrvI2cMInôFromC⁄fig
(&
I2cDevi˚
, &
i2c2Ma°îCfg
);

415 if(
°©us
)

416 
	`exô
(
°©us
);

417 
°©us
 = 
	`DrvI2cMTønß˘i⁄
(&
I2cDevi˚
, 
WM8325_SLAVE_ADDRESS
,

419 
¥ŸocﬁWrôeSam∂e2
,

420 (
u8
 *Ë&
c⁄åﬁVÆue
[0],

421 
TWO_BYTES_SIZE
);

422 if(
°©us
)

423 
	`exô
(
°©us
);

424 
°©us
 = 
	`DrvI2cMTønß˘i⁄
(&
I2cDevi˚
, 
WM8325_SLAVE_ADDRESS
,

426 
¥ŸocﬁWrôeSam∂e2
,

427 (
u8
 *Ë&
c⁄åﬁVÆue
[0],

428 
TWO_BYTES_SIZE
);

429 if(
°©us
)

430 
	`exô
(
°©us
);

432 
	`DrvLe⁄RTSig«lBoŸCom∂ëed
();

434 
	`¥ötf
("\n Streaming ... \n");

439 
¥o˚ssögFømeCå
 = 
√wCamFømeCå
 - 1;

441 
	`DrvShaveL2CacheP¨tôi⁄FlushAndInvÆid©e
(
PARTITION_0
);

443 
cuºFøme
 = &
ˇmFøme
[
¥o˚ssögFømeCå
 % 
MAX_USED_BUF
];

446 
	`mem£t
(
cuºFøme
->
p1
, 0x0, 
WINDOW_WIDTH
 * 
WINDOW_MARGIN
);

447 
	`mem£t
(
cuºFøme
->
p1
 + (
WINDOW_HEIGHT
 - 
WINDOW_MARGIN
Ë* 
WINDOW_WIDTH
,

448 0x0, 
WINDOW_WIDTH
 * 
WINDOW_MARGIN
);

449 
löe
 = 0;Üöê< 
WINDOW_HEIGHT
;Üine++)

451 
	`mem£t
(
cuºFøme
->
p1
 + 
löe
 * 
WINDOW_WIDTH
, 0x0, 
WINDOW_MARGIN
);

452 
	`mem£t
(
cuºFøme
->
p1
 + 
löe
 * 
WINDOW_WIDTH
 + (WINDOW_WIDTH - 
WINDOW_MARGIN
),

453 0x0, 
WINDOW_MARGIN
);

456 if–
lcdFømeCå
 % 
FRAMES_PER_WARP
 == 0)

457 
w¨pEf„˘StyÀ
++;

460 
w¨pEf„˘StyÀ
 % 
WARP_EFFECTS
)

462 
IDENTITY_WARP
:

463 
mesh
.
meshX
 = (*)
idítôyMesh_x
;

464 
mesh
.
meshY
 = (*)
idítôyMesh_y
;

466 
FISHEYE_WARP
:

467 
mesh
.
meshX
 = (*)
fisheyeMesh_x
;

468 
mesh
.
meshY
 = (*)
fisheyeMesh_y
;

470 
WAVE_WARP
:

471 
mesh
.
meshX
 = (*)
waveMesh_x
;

472 
mesh
.
meshY
 = (*)
waveMesh_y
;

474 
PERSPECTIVE_WARP
:

475 
mesh
.
meshX
 = (*)
≥r•e˘iveMesh_x
;

476 
mesh
.
meshY
 = (*)
≥r•e˘iveMesh_y
;

483 
	`runW¨p
(
SHAVE_NUMBER
, &
mesh
, 
cuºFøme
, &
lcdFøme
[(
lcdFømeCå
 + 1Ë% 
MAX_USED_BUF
], 0);

485 
lcdFømeCå
++;

486 
¥eviousBuâ⁄
 = 
buâ⁄
;

487 
ªadBuâ⁄Sètus
 = 
	`ªadBuâ⁄
(&
buâ⁄
);

488 i‡(
ªadBuâ⁄Sètus
 == 1)

490 i‡((
¥eviousBuâ⁄
 =0Ë&& (
buâ⁄
 == 1))

492 if(
pToSdˇrdBuf
==0)

494 
	`mem˝y
(
toSdˇrdBuf
,
lcdFøme
[(
lcdFømeCå
 + 1Ë% 
MAX_USED_BUF
].
p1
,
CAM_FRAME_SIZE_BYTES
);

495 
sdC¨dFøme
.
p1
=
toSdˇrdBuf
;

496 
sdC¨dFøme
.
p2
=
lcdDummyChroma
;

497 
sdC¨dFøme
.
p3
=
lcdDummyChroma
;

498 
sdC¨dFøme
.
•ec
=
lcdFømeS≥c
;

499 
	`IMGWARP_˛ónup
();

500 
	`¥ötf
("StartÉncoding JPEG\n");

501 
j≥g
.
size
 = 
	`JPEG_ícode
(
sdC¨dFøme
, j≥g.
buf
, 12, 
INPUT_BUFF_SIZE_SHAVE
, 
JPEG_422_PLANAR
);

502 
	`¥ötf
("EndedÉncoding JPEG\n");

503 
pToSdˇrdBuf
=&
j≥g
;

504 
pToSdˇrdBuf
!=0)

506 
	`DrvTimîSÀïMs
(500);

507 if(
pToSdˇrdBuf
==0)

509 
	`¥ötf
("Waiting for LRT\n");

514 i‡((
¥eviousBuâ⁄
 =0Ë&& (
buâ⁄
 == 2))

516 
	`¥ötf
("Button B2Öressed,Åhis button hasÇo functionality defined\n");

521 i‡(
ªadBuâ⁄Sètus
 < 0)

523 
	`¥ötf
("Error,Åhe button canÇot beÑead,Öls checkÑet value of function: DrvI2cMTransaction\n");

529 
	}
}

	@HowTo/WarpJpegDyn/leon_rt/mesh.h

1 #i‚de‡
MESH_H_


2 
	#MESH_H_


	)

4 
	~"mv_ty≥s.h
"

5 
	~"imageW¨pDeföes.h
"

7 
	#WINDOW_WIDTH
 1920

	)

8 
	#WINDOW_HEIGHT
 1080

	)

10 
	#MESH_WIDTH
 (
WINDOW_WIDTH
 / 
MESH_CELL_SIZE
 + 1)

	)

11 
	#MESH_HEIGHT
 (
WINDOW_HEIGHT
 / 
MESH_CELL_SIZE
 + 2)

	)

13 
	~"idítôy_mesh.h
"

14 
	~"fisheye_mesh.h
"

15 
	~"≥r•e˘ive_mesh.h
"

16 
	~"wave_mesh.h
"

	@HowTo/WarpJpegDyn/leon_rt/perspective_mesh.h

1 #i‚de‡
PERSPECTIVE_MESH_H_


2 
	#PERSPECTIVE_MESH_H_


	)

5 
Â32
 
	g≥r•e˘iveMesh_x
[
MESH_HEIGHT
][
MESH_WIDTH
] = {{-336.015839, -311.844116, -287.812622, -263.920166, -240.165512, -216.547516, -193.064957, -169.716705, -146.501587, -123.41848, -100.466263, -77.643837, -54.950077, -32.383907, -9.944279, 12.369907, 34.559685, 56.626087, 78.570137, 100.39286, 122.095253, 143.678268, 165.142975, 186.490295, 207.721191, 228.836594, 249.837494, 270.724762, 291.499329, 312.16217, 332.714081, 353.156067, 373.488892, 393.71344, 413.830719, 433.841431, 453.74649, 473.546661, 493.242859, 512.835815, 532.326416, 551.715454, 571.003662, 590.191833, 609.280823, 628.271301, 647.164062, 665.9599, 684.659546, 703.263672, 721.773071, 740.188416, 758.510498, 776.739929, 794.877502, 812.923889, 830.8797, 848.745605, 866.522522, 884.210815, 901.811279, 919.324463, 936.751343, 954.092163, 971.347656, 988.518494, 1005.605347, 1022.608948, 1039.529541, 1056.368042, 1073.125, 1089.800781, 1106.396362, 1122.911865, 1139.348267, 1155.705811, 1171.985352, 1188.187378, 1204.312256, 1220.360718, 1236.333374, 1252.230347, 1268.052734, 1283.800537, 1299.474731, 1315.075684, 1330.603516, 1346.059448, 1361.443359, 1376.756226, 1391.998169, 1407.1698, 1422.271851, 1437.304199, 1452.268066, 1467.163574, 1481.990723, 1496.750854, 1511.443604, 1526.070312, 1540.630859, 1555.125488, 1569.555298, 1583.920166, 1598.220581, 1612.457275, 1626.630371, 1640.740601, 1654.788208, 1668.77356, 1682.697266, 1696.559204, 1710.360474, 1724.10144, 1737.781738, 1751.402466, 1764.964111, 1778.466187, 1791.909912, 1805.295532, 1818.623169},

74 
Â32
 
	g≥r•e˘iveMesh_y
[
MESH_HEIGHT
][
MESH_WIDTH
] = {{-209.302124, -207.277695, -205.264984, -203.263962, -201.274445, -199.296387, -197.329666, -195.374191, -193.429871, -191.496613, -189.574326, -187.662888, -185.762238, -183.872269, -181.992889, -180.124039, -178.265594, -176.417496, -174.57962, -172.751923, -170.934296, -169.126663, -167.328949, -165.541077, -163.762939, -161.994461, -160.235596, -158.486237, -156.746338, -155.015778, -153.294495, -151.582443, -149.879517, -148.185654, -146.500793, -144.82486, -143.157761, -141.499451, -139.849854, -138.208908, -136.576508, -134.952652, -133.337219, -131.730164, -130.131424, -128.540924, -126.958611, -125.384422, -123.818283, -122.260147, -120.709938, -119.16761, -117.633095, -116.106346, -114.58728, -113.075859, -111.572021, -110.075699, -108.586853, -107.105415, -105.631348, -104.164566, -102.705032, -101.252708, -99.807518, -98.369408, -96.938347, -95.514275, -94.097122, -92.686867, -91.28344, -89.886795, -88.496895, -87.11367, -85.737091, -84.367104, -83.003654, -81.646706, -80.296211, -78.95211, -77.61438, -76.282967, -74.957809, -73.638885, -72.326141, -71.019539, -69.719025, -68.424576, -67.136124, -65.853645, -64.577103, -63.306435, -62.041618, -60.782608, -59.529362, -58.281841, -57.040012, -55.803825, -54.57325, -53.348248, -52.128784, -50.914806, -49.706299, -48.503212, -47.305504, -46.113148, -44.926121, -43.744358, -42.567837, -41.396542, -40.230408, -39.069412, -37.913528, -36.762718, -35.616943, -34.476181, -33.340389, -32.209534, -31.08359, -29.962538, -28.846317},

	@HowTo/WarpJpegDyn/leon_rt/wave_mesh.h

1 #i‚de‡
WAVE_MESH_H_


2 
	#WAVE_MESH_H_


	)

4 
Â32
 
	gwaveMesh_x
[
MESH_HEIGHT
][
MESH_WIDTH
] = {{0.0, 16.0, 32.0, 48.0, 64.0, 80.0, 96.0, 112.0, 128.0, 144.0, 160.0, 176.0, 192.0, 208.0, 224.0, 240.0, 256.0, 272.0, 288.0, 304.0, 320.0, 336.0, 352.0, 368.0, 384.0, 400.0, 416.0, 432.0, 448.0, 464.0, 480.0, 496.0, 512.0, 528.0, 544.0, 560.0, 576.0, 592.0, 608.0, 624.0, 640.0, 656.0, 672.0, 688.0, 704.0, 720.0, 736.0, 752.0, 768.0, 784.0, 800.0, 816.0, 832.0, 848.0, 864.0, 880.0, 896.0, 912.0, 928.0, 944.0, 960.0, 976.0, 992.0, 1008.0, 1024.0, 1040.0, 1056.0, 1072.0, 1088.0, 1104.0, 1120.0, 1136.0, 1152.0, 1168.0, 1184.0, 1200.0, 1216.0, 1232.0, 1248.0, 1264.0, 1280.0, 1296.0, 1312.0, 1328.0, 1344.0, 1360.0, 1376.0, 1392.0, 1408.0, 1424.0, 1440.0, 1456.0, 1472.0, 1488.0, 1504.0, 1520.0, 1536.0, 1552.0, 1568.0, 1584.0, 1600.0, 1616.0, 1632.0, 1648.0, 1664.0, 1680.0, 1696.0, 1712.0, 1728.0, 1744.0, 1760.0, 1776.0, 1792.0, 1808.0, 1824.0, 1840.0, 1856.0, 1872.0, 1888.0, 1904.0, 1920.0},

73 
Â32
 
	gwaveMesh_y
[
MESH_HEIGHT
][
MESH_WIDTH
] = {{0.0, 7.316992, 14.553819, 21.631189, 28.471565, 35.0, 41.144966, 46.839142, 52.020138, 56.631191, 60.621777, 63.948181, 66.573959, 68.470329, 69.616531, 70.0, 69.616531, 68.470329, 66.573959, 63.948181, 60.621777, 56.631191, 52.020138, 46.839142, 41.144966, 35.0, 28.471565, 21.631189, 14.553819, 7.316992, 0.0, -7.316992, -14.553819, -21.631189, -28.471565, -35.0, -41.144966, -46.839142, -52.020138, -56.631191, -60.621777, -63.948181, -66.573959, -68.470329, -69.616531, -70.0, -69.616531, -68.470329, -66.573959, -63.948181, -60.621777, -56.631191, -52.020138, -46.839142, -41.144966, -35.0, -28.471565, -21.631189, -14.553819, -7.316992, -0.0, 7.316992, 14.553819, 21.631189, 28.471565, 35.0, 41.144966, 46.839142, 52.020138, 56.631191, 60.621777, 63.948181, 66.573959, 68.470329, 69.616531, 70.0, 69.616531, 68.470329, 66.573959, 63.948181, 60.621777, 56.631191, 52.020138, 46.839142, 41.144966, 35.0, 28.471565, 21.631189, 14.553819, 7.316992, 0.0, -7.316992, -14.553819, -21.631189, -28.471565, -35.0, -41.144966, -46.839142, -52.020138, -56.631191, -60.621777, -63.948181, -66.573959, -68.470329, -69.616531, -70.0, -69.616531, -68.470329, -66.573959, -63.948181, -60.621777, -56.631191, -52.020138, -46.839142, -41.144966, -35.0, -28.471565, -21.631189, -14.553819, -7.316992, -0.0},

	@HowTo/WarpJpegDyn/shared/commonDefine.h

11 
	~<mv_ty≥s.h
>

15 
u32
 
	msize
;

16 
u8
 *
	mbuf
;

17 }
	tj≥gFømeBuf„r
;

	@HowTo/XLink/BufferedMessages/myriad/leon/app_config.c

11 
	~"°dio.h
"

12 
	~"≠p_c⁄fig.h
"

13 
	~<DrvLe⁄L2C.h
>

14 
	~<OsDrvC¥.h
>

15 
	~<°dlib.h
>

16 #ifde‡
MA2X8X


17 
	~"OsDrvInô.h
"

27 #ifde‡
MA2X8X


29 
OsDrvC¥AuxClockC⁄fig
 
	gauxClkC⁄fig
[] =

31 {
OS_DRV_CPR_DEV_CSS_AUX_USB_PHY_REF_ALT
, 
OS_DRV_CPR_CLK_PLL0
, 1, 25},

32 {
OS_DRV_CPR_DEV_CSS_AUX_USB_CTRL_SUSPEND
, 
OS_DRV_CPR_CLK_PLL0
, 1, 10},

33 {
OS_DRV_CPR_DEV_CSS_AUX_USB20_REF
, 
OS_DRV_CPR_CLK_PLL0
, 1, 50},

34 {
OS_DRV_CPR_DEV_CSS_AUX_USB_CTRL_REF
, 
OS_DRV_CPR_CLK_PLL0
, 1, 600},

35 {
OS_DRV_CPR_DEV_CSS_AUX_USB_CTRL
, 
OS_DRV_CPR_CLK_PLL0
, 1, 2},

36 
OS_DRV_CPR_AUX_ARRAY_TERMINATOR


39 
OsDrvC¥C⁄fig
 
	gc⁄fig
 = {

40 .
ªf0InClk
 = 
DEFAULT_OSC_CLOCK_KHZ
,

41 .
	gauxCfg
 = 
auxClkC⁄fig


44 
OS_DRV_INIT_CPR_CFG_DEFINE
(&
c⁄fig
);

54 
	$öôClocksAndMem‹y
()

56 
s32
 
sc
 = 0;

58 #i‚de‡
MA2X8X


59 
tyAuxClkDividîCfg
 
auxClk
[] =

61 {
AUX_CLK_MASK_USB_CTRL_SUSPEND_CLK
, 
CLK_SRC_PLL0
, 1, 30},

65 
sc
 = 
	`OsDrvC¥Inô
();

66 i‡(
sc
 !
RTEMS_SUCCESSFUL
)

67  
sc
;

68 
sc
 = 
	`OsDrvC¥O≥n
();

69 i‡(
sc
 !
RTEMS_SUCCESSFUL
)

70  
sc
;

71 
sc
 = 
	`OsDrvC¥AuxClockAºayC⁄fig
(
auxClk
);

73 
πems_°©us_code
 
°©us
 = 
	`OsDrvC¥Tu∫OnI¶™d
(
OS_DRV_CPR_PWR_ISLAND_USB
);

74 i‡(
°©us
){

75 
	`¥ötf
("exiting\n");

76 
	`exô
(
°©us
);

80  
sc
;

81 
	}
}

	@HowTo/XLink/BufferedMessages/myriad/leon/app_config.h

9 #i‚de‡
_APP_CONFIG_H_


10 
	#_APP_CONFIG_H_


	)

12 
	~"ÁèlExãnsi⁄.h
"

13 
	~"mv_ty≥s.h
"

16 
	#PLL_DESIRED_FREQ_KHZ
 600000

	)

19 #ifde‡
MA2X8X


20 
	#DEFAULT_OSC_CLOCK_KHZ
 24000

	)

22 
	#DEFAULT_OSC_CLOCK_KHZ
 12000

	)

25 
	#L2CACHE_NORMAL_MODE
 (0x6)

26 
	#L2CACHE_CFG
 (
L2CACHE_NORMAL_MODE
)

	)

28 
öôClocksAndMem‹y
();

	@HowTo/XLink/BufferedMessages/myriad/leon/main.c

1 
	~<°dlib.h
>

2 
	~<°dio.h
>

3 
	~<as£π.h
>

5 
	~<πems.h
>

6 
	~<πems/b•Io.h
>

8 
	~<uni°d.h
>

9 
	~<sys/ty≥s.h
>

10 
	~<sys/°©.h
>

11 
	~<sys/io˘l.h
>

12 
	~<f˙é.h
>

14 
	~"≠p_c⁄fig.h
"

15 
	~"πems_c⁄fig.h
"

17 
	~"mv_ty≥s.h
"

18 
	~"../../sh¨ed/comm⁄Funcs.h
"

19 
	~"XLök.h
"

22 * 
	$Func
(* 
a
) {

23 
i
 = 0; i<
NUM_MESSAGES
; i++) {

24 
	`ª˚iveAndRëu∫Mesßges
(*((*)
a
));

26  
NULL
;

27 
	}
}

29 *
	$POSIX_Inô
 (*
¨gs
)

31 
	`UNUSED
(
¨gs
);

33 i‡(
	`öôClocksAndMem‹y
()) {

34 
	`¥ötf
("FailedÅo initialize clocks.\n");

37 
±hªad_©å_t
 
©å
;

38 
sc
;

39 
±hªad_t
 
tid
;

42 
XLökGlobÆH™dÀr_t
 
gh™dÀr
 = {

43 .
¥Ÿocﬁ
 = 
USB_VSC


45 
XLökEº‹_t
 
°©us
 = 
X_LINK_COMMUNICATION_NOT_OPEN
;

46 
°©us
 !
X_LINK_SUCCESS
) {

47 
°©us
 = 
	`XLökInôülize
(&
gh™dÀr
);

50 
°ªamId
 = 
	`XLökO≥nSåóm
(0, "fú°Såóm",
DATA_LENGTH
);

52 if(
	`±hªad_©å_öô
(&
©å
) !=0) {

53 
	`¥ötf
("pthread_attr_initÉrror\n");

55 if(
	`±hªad_©å_£töhîôsched
(&
©å
, 
PTHREAD_EXPLICIT_SCHED
) != 0) {

56 
	`¥ötf
("pthread_attr_setinheritschedÉrror\n");

58 if(
	`±hªad_©å_£tschedpﬁicy
(&
©å
, 
SCHED_RR
) != 0) {

59 
	`¥ötf
("pthread_attr_setschedpolicyÉrror\n");

62 
sc
=
	`±hªad_¸óã
(&
tid
, &
©å
, &
Func
, &
°ªamId
);

63 i‡(
sc
) {

64 
	`¥ötf
("Control Thread creation failed\n");

66 
sched_∑øm
 
sched∑øm
;

67 
sched∑øm
.
sched_¥i‹ôy
 = 200;

68 if(
	`±hªad_£tsched∑øm
(
tid
, 
SCHED_RR
, &
sched∑øm
) != 0) {

69 
	`¥ötf
("pthread_attr_setschedpolicyÉrror\n");

72 
	`¶ìp
(1);

74 
	`¶ìp
(100);

75 
	`exô
(0);

76 
	}
}

	@HowTo/XLink/BufferedMessages/myriad/leon/rtems_config.h

1 #i‚de‡
_LEON_RTEMS_CONFIG_H_


2 
	#_LEON_RTEMS_CONFIG_H_


	)

4 
	~"ÁèlExãnsi⁄.h
"

5 #ifde‡
MA2X8X


6 
	~"OsDrvInô.h
"

8 
	~"OsDrvC¥.h
"

11 #i‡
deföed
(
__RTEMS__
)

13 #i‡!
deföed
 (
__CONFIG__
)

14 
	#__CONFIG__


	)

17 
	#CONFIGURE_INIT


	)

19 #i‚de‡
RTEMS_POSIX_API


20 
	#RTEMS_POSIX_API


	)

23 
	#CONFIGURE_MICROSECONDS_PER_TICK
 1000

	)

25 
	#CONFIGURE_TICKS_PER_TIMESLICE
 1

	)

27 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

28 
	#CONFIGURE_APPLICATION_NEEDS_CLOCK_DRIVER


	)

29 #i‚de‡
USE_USB_VSC


30 #i‚de‡
USE_LINK_JTAG


31 
	~"usb_u¨t.h
"

35 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

36 
	#CONFIGURE_MINIMUM_TASK_STACK_SIZE
 (8192)

	)

37 
	#CONFIGURE_MAXIMUM_TASKS
 40

	)

38 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 10

	)

39 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 8

	)

40 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 8

	)

41 
	#CONFIGURE_MAXIMUM_POSIX_SEMAPHORES
 8

	)

42 
	#CONFIGURE_MAXIMUM_POSIX_MESSAGE_QUEUES
 8

	)

43 
	#CONFIGURE_MAXIMUM_POSIX_TIMERS
 6

	)

44 
	#CONFIGURE_MAXIMUM_TIMERS
 4

	)

45 
	#CONFIGURE_MAXIMUM_MESSAGE_QUEUES
 1

	)

46 
	#CONFIGURE_MAXIMUM_SEMAPHORES
 32

	)

47 
	#CONFIGURE_MAXIMUM_DRIVERS
 16

	)

48 
	#CONFIGURE_MAXIMUM_DEVICES
 16

	)

49 
	#CONFIGURE_LIBIO_MAXIMUM_FILE_DESCRIPTORS
 30

	)

51 
	#CONFIGURE_POSIX_INIT_TASKS_TABLE


	)

53 
	#CONFIGURE_MAXIMUM_USER_EXTENSIONS
 1

	)

54 
	#CONFIGURE_INITIAL_EXTENSIONS
 { .
Áèl
 = 
F©Æ_exãnsi⁄
 }

	)

56 #ifde‡
MA2X8X


57 
	#CONFIGURE_APPLICATION_EXTRA_DRIVERS
 
OS_DRV_INIT_TABLE_ENTRY


	)

60 *
POSIX_Inô
 (*
¨gs
);

61 
	~<πems/c⁄fdefs.h
>

74 
BSP_SET_CLOCK
(
DEFAULT_OSC_CLOCK_KHZ
,

75 
PLL_DESIRED_FREQ_KHZ
,

78 
DEFAULT_RTEMS_CSS_LOS_CLOCKS
 | 
DEV_CSS_USB
,

79 
DEFAULT_RTEMS_MSS_LRT_CLOCKS
,

80 
DEFAULT_UPA_CLOCKS
,

84 
BSP_SET_L2C_CONFIG
(1, 
DEFAULT_RTEMS_L2C_REPLACEMENT_POLICY
, 
DEFAULT_RTEMS_L2C_LOCKED_WAYS
,
DEFAULT_RTEMS_L2C_MODE
, 0, 0);

86 
BSP_SET_L1C_CONFIG
(1, 1);

	@HowTo/XLink/BufferedMessages/pc/main.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°dboﬁ.h
>

4 
	~<uni°d.h
>

5 
	~<as£π.h
>

7 
	~"XLök.h
"

8 
	~"usb_boŸ.h
"

9 
	~"comm⁄Funcs.h
"

10 
	#MAXNAMESIZE
 28

	)

12 
	$maö
()

14 
«me
[
MAXNAMESIZE
];

15 
rc
 = 
	`XLökGëDevi˚Name
(0, 
«me
, (name));

16 i‡(!
rc
)

18 
	`¥ötf
("Devi˚ FoundÇamê%†\n", 
«me
);

22 
	`¥ötf
("ERROR couldn'àföd devi˚†r¯%d\n", 
rc
);

25 
XLökGlobÆH™dÀr_t
 
gh™dÀr
 = {

26 .
¥Ÿocﬁ
 = 
USB_VSC


28 
XLökH™dÀr_t
 
h™dÀr
 = {

29 #ifde‡
USE_USB_VSC


30 .
devi˚P©h
 = 
«me
,

32 .
devi˚P©h
 = "/dev/ttyACM0",

33 .
devi˚P©h2
 = "/dev/ttyACM1",

37 
°ªamId
;

40 #i‚de‡
BOOT_DISABLE


41 if–
	`XLökBoŸRemŸe
(
«me
, 
MVCMD_NAME
Ë!
X_LINK_SUCCESS
){

43 
	`exô
(1);

46 
	`¥ötf
("Myriad was booted\n");

49  
	`XLökInôülize
(&
gh™dÀr
Ë!
X_LINK_SUCCESS
);

50 
	`¥ötf
("Initialize done\n");

52 
	`XLökC⁄√˘
(&
h™dÀr
Ë!
X_LINK_SUCCESS
);

53 
	`¥ötf
("XLökC⁄√˘ d⁄ê-Üök Id %d\n", 
h™dÀr
.
lökId
);

55 (
°ªamId
 = 
	`XLökO≥nSåóm
(
h™dÀr
.
lökId
, "fú°Såóm",
DATA_LENGTH
)) == 0xDEADDEAD);

57 
boﬁ
 
∑ss
 = 
	`£ndAndRe˚iveMesßges
(
°ªamId
);

59 
XLökEº‹_t
 
°©us
 = 
	`XLökClo£Såóm
(
°ªamId
);

60 i‡(
°©us
 !
X_LINK_SUCCESS
)

62 
	`¥ötf
("˛o£ såóm faûed: %x\n", 
°©us
);

64 
°©us
 = 
	`XLökRe£tRemŸe
(
h™dÀr
.
lökId
);

65 i‡(
°©us
 =
X_LINK_SUCCESS
)

67 
	`¥ötf
("ª£àÁûed: %x\n", 
°©us
);

70 if(
∑ss
) {

71 
	`¥ötf
("TEST PASSED! :)\n");

73 
	`¥ötf
("TEST FAILED! :(\n");

75 
	}
}

	@HowTo/XLink/BufferedMessages/shared/commonFuncs.c

1 
	~<°dlib.h
>

2 
	~<°dio.h
>

3 
	~<as£π.h
>

4 
	~<uni°d.h
>

5 
	~<time.h
>

6 
	~<°dboﬁ.h
>

8 
	~<±hªad.h
>

9 
	~"XLök.h
"

10 
	~"comm⁄Funcs.h
"

12 
	#BUFF_LEN
 (3*1024*1024)

	)

13 
	#is_Æig√d
(
POINTER
, 
BYTE_COUNT
) \

14 (((
uöçå_t
)(c⁄° *)(
POINTER
)Ë% (
BYTE_COUNT
Ë=0)

	)

15 
	#NUM_THREADS
 6

	)

16 
uöt8_t
 
	gbuf„r1
[
BUFF_LEN
];

17 
	gmsgIdx
[
NUM_MESSAGES
+1];

18 
__©åibuã
((
£˘i⁄
(".ddr.bss"))Ë
uöt8_t
 
	gmesßgeRe˚ivedBack
[
NUM_MESSAGES
];

20 
	s£ndögMsg
 {

21 
	m°ªamId
;

22 
	mmesßge_no
;

23 }
	t£ndögMsg
;

25 * 
	$£ndMesßges
(* 
s
) {

26 
°ªamId
 = ((
£ndögMsg
*)
s
)->streamId;

27 
mesßge_no
 = ((
£ndögMsg
*)
s
)->message_no;

28 
j
 = 
mesßge_no
; j<
NUM_MESSAGES
; j+=
NUM_THREADS
) {

29 
	`u¶ìp
((Ë((()
	`ønd
()/
RAND_MAX
) * 50000));

31 
buf„r1
[
msgIdx
[
j
]] = j;

32 
XLökEº‹_t
 
°©us
 = 
	`XLökWrôeD©a
(
°ªamId
, &
buf„r1
[
msgIdx
[
j
]], msgIdx[j+1]-msgIdx[j]);

33 i‡(
°©us
 !
X_LINK_SUCCESS
)

35 
	`¥ötf
("£àd©®Áûed: %x\n", 
°©us
);

37 
	`¥ötf
("sendMessages: sleeping for 2 secondsÅoállow streamÅo cleará bit....\n");

38 
	`¶ìp
(2);

39 
	`¥ötf
("sendMessages: sleep done\n");

41  
NULL
;

42 
	}
}

44 * 
	$ª˚iveMesßges
(* 
sId
) {

45 
°ªamId
 = *((*)
sId
);

46 
°ªamPackëDesc_t
* 
∑ckë
;

47 
boﬁ
 
ÆlMesßgesRecd
 = 
Ál£
, 
ã°Pas£d
 = 
åue
;

48 
ã°Pas£d
 && !
ÆlMesßgesRecd
) {

49 
	`¥ötf
("Receive Messages sleeping for 1s......\n");

50 
	`¶ìp
(1);

51 
	`¥ötf
("Recieve Messages sleep done\n");

53 
XLökEº‹_t
 
°©us
 = 
	`XLökRódD©a
(
°ªamId
, &
∑ckë
);

54 i‡(
°©us
 !
X_LINK_SUCCESS
)

56 
	`¥ötf
("gë d©®Áûed: %x\n", 
°©us
);

57 
ã°Pas£d
 = 
Ál£
;

59 
i
;

61 if(
∑ckë
->
Àngth
>0) {

62 
i
 = 
∑ckë
->
d©a
[0];

63 i‡(
∑ckë
->
Àngth
 !
msgIdx
[
i
+1]-msgIdx[i]){

64 
	`¥ötf
("PacketÜength wrong\n");

65 
ã°Pas£d
 = 
Ál£
;

67 i‡(!
	`is_Æig√d
(
∑ckë
->
d©a
, 64)) {

68 
	`¥ötf
("DataÇot 64 byteáligned");

69 
ã°Pas£d
 = 
Ál£
;

71 
k
 = 0; k < 
∑ckë
->
Àngth
 ; k++)

73 i‡(
∑ckë
->
d©a
[
k
] !
buf„r1
[
msgIdx
[
i
]+k])

75 
	`¥ötf
("VÆuê© index %u i†wr⁄g: %x\n", 
k
, 
∑ckë
->
d©a
[k]);

76 
ã°Pas£d
 = 
Ál£
;

80 
mesßgeRe˚ivedBack
[
i
] = 1;

83 
	`¥ötf
("ThisÅest can'tÖass ifÅhereáre messages of size 0\n");

84 
ã°Pas£d
 = 
Ál£
;

85 
i
 = -1;

89 
°©us
 = 
	`XLökRñó£D©a
(
°ªamId
);

90 i‡(
°©us
 != 0)

92 
	`¥ötf
("ªÀa£ d©®Áûed: %x\n", 
°©us
);

93 
ã°Pas£d
 = 
Ál£
;

96 
a
 =0;

97 
j
 =0; j<
NUM_MESSAGES
; j++){

98 
a
+=
mesßgeRe˚ivedBack
[
j
];

100 if(
a
==
NUM_MESSAGES
){

101 
ÆlMesßgesRecd
 = 
åue
;

104  (
ã°Pas£d
 && 
ÆlMesßgesRecd
Ë? (*Èe°Pas£d : 
NULL
;

105 
	}
}

107 
boﬁ
 
	$£ndAndRe˚iveMesßges
(
°ªamId
) {

109 
	`§™d
(
	`time
(
NULL
));

110 
i
 = 0 ; i< 
BUFF_LEN
; i++){

111 
buf„r1
[
i
]=
	`ønd
();

113 
uöt32_t
 
°¨tIdx
[10] = {1 , 43, 80, 224, 271, 512, 768, 944, 1025, 2048};

115 
	`as£π
(
NUM_MESSAGES
 < 256);

116 
	`as£π
(
NUM_MESSAGES
 % 10 == 0);

118 
	`as£π
((
°¨tIdx
[9] * (1+ (
NUM_MESSAGES
 / 10)Ë+ 2048Ë< 
BUFF_LEN
);

119 
i
 = 0; i < 
NUM_MESSAGES
; i++) {

120 
msgIdx
[
i
] = 
°¨tIdx
[i%10] + (startIdx[9] * (i/10));

122 
msgIdx
[
NUM_MESSAGES
] = msgIdx[NUM_MESSAGES-1] + 2048;

124 
±hªad_©å_t
 
©å
;

125 
sc
;

128 
±hªad_t
 
ª˚ivî
;

130 if(
	`±hªad_©å_öô
(&
©å
) !=0) {

131 
	`¥ötf
("pthread_attr_initÉrror\n");

133 
sc
=
	`±hªad_¸óã
(&
ª˚ivî
, &
©å
, &
ª˚iveMesßges
, (*)&
°ªamId
);

134 i‡(
sc
) {

135 
	`¥ötf
("Control Thread creation failed\n");

139 
±hªad_t
 
£ndîs
[
NUM_THREADS
];

140 
ªtu∫VÆ
;

141 
£ndögMsg
 
a
[
NUM_THREADS
];

142 
i
 = 0; i<
NUM_THREADS
; i++) {

144 
a
[
i
].
°ªamId
 = streamId;

145 
a
[
i
].
mesßge_no
 = i;

147 if(
	`±hªad_©å_öô
(&
©å
) !=0) {

148 
	`¥ötf
("pthread_attr_initÉrror\n");

150 
sc
=
	`±hªad_¸óã
(&
£ndîs
[
i
], &
©å
, &
£ndMesßges
, &
a
[i]);

151 i‡(
sc
) {

152 
	`¥ötf
("Control Thread creation failed\n");

155 
	`¶ìp
(1);

156 
i
 = 0; i< 
NUM_THREADS
; i++) {

157 
	`±hªad_joö
(
£ndîs
[
i
], 
NULL
);

159 
	`±hªad_joö
(
ª˚ivî
, (**)&
ªtu∫VÆ
);

161  (
boﬁ
)
ªtu∫VÆ
;

162 
	}
}

164 
	$ª˚iveAndRëu∫Mesßges
(
°ªamId
){

165 
°ªamPackëDesc_t
* 
∑ckë
;

166 
XLökEº‹_t
 
°©us
 = 
	`XLökRódD©a
(
°ªamId
, &
∑ckë
);

167 i‡(
°©us
 !
X_LINK_SUCCESS
)

169 
	`¥ötf
("Gë d©®Áûed: %x\n", 
°©us
);

171 
°©us
 = 
	`XLökWrôeD©a
(
°ªamId
, &
∑ckë
->
d©a
[0],Öackë->
Àngth
);

172 i‡(
°©us
 !
X_LINK_SUCCESS
)

174 
	`¥ötf
("£àd©®Áûed: %x\n", 
°©us
);

176 
°©us
 = 
	`XLökRñó£D©a
(
°ªamId
);

177 i‡(
°©us
 !
X_LINK_SUCCESS
)

179 
	`¥ötf
("ªÀa£ d©®Áûed: %x\n", 
°©us
);

181 
	}
}

	@HowTo/XLink/BufferedMessages/shared/commonFuncs.h

1 #i‚de‡
COMMON_FUNCS_H


2 
	#COMMON_FUNCS_H


	)

4 
	#NUM_MESSAGES
 100

	)

5 
	#DATA_LENGTH
 (3*1024*1024)

	)

6 
boﬁ
 
£ndAndRe˚iveMesßges
(
°ªamId
);

8 
ª˚iveAndRëu∫Mesßges
(
°ªamId
);

	@HowTo/XLink/BufferedSingleStream/myriad/leon/app_config.c

11 
	~"°dio.h
"

12 
	~"≠p_c⁄fig.h
"

13 
	~<DrvLe⁄L2C.h
>

14 
	~<OsDrvC¥.h
>

15 
	~<°dlib.h
>

16 #ifde‡
MA2X8X


17 
	~"OsDrvInô.h
"

27 #ifde‡
MA2X8X


29 
OsDrvC¥AuxClockC⁄fig
 
	gauxClkC⁄fig
[] =

31 {
OS_DRV_CPR_DEV_CSS_AUX_USB_PHY_REF_ALT
, 
OS_DRV_CPR_CLK_PLL0
, 1, 25},

32 {
OS_DRV_CPR_DEV_CSS_AUX_USB_CTRL_SUSPEND
, 
OS_DRV_CPR_CLK_PLL0
, 1, 10},

33 {
OS_DRV_CPR_DEV_CSS_AUX_USB20_REF
, 
OS_DRV_CPR_CLK_PLL0
, 1, 50},

34 {
OS_DRV_CPR_DEV_CSS_AUX_USB_CTRL_REF
, 
OS_DRV_CPR_CLK_PLL0
, 1, 600},

35 {
OS_DRV_CPR_DEV_CSS_AUX_USB_CTRL
, 
OS_DRV_CPR_CLK_PLL0
, 1, 2},

36 
OS_DRV_CPR_AUX_ARRAY_TERMINATOR


39 
OsDrvC¥C⁄fig
 
	gc⁄fig
 = {

40 .
ªf0InClk
 = 
DEFAULT_OSC_CLOCK_KHZ
,

41 .
	gauxCfg
 = 
auxClkC⁄fig


44 
OS_DRV_INIT_CPR_CFG_DEFINE
(&
c⁄fig
);

54 
	$öôClocksAndMem‹y
()

56 
s32
 
sc
 = 0;

58 #i‚de‡
MA2X8X


59 
tyAuxClkDividîCfg
 
auxClk
[] =

61 {
AUX_CLK_MASK_USB_CTRL_SUSPEND_CLK
, 
CLK_SRC_PLL0
, 1, 30},

65 
sc
 = 
	`OsDrvC¥Inô
();

66 i‡(
sc
 !
RTEMS_SUCCESSFUL
)

67  
sc
;

68 
sc
 = 
	`OsDrvC¥O≥n
();

69 i‡(
sc
 !
RTEMS_SUCCESSFUL
)

70  
sc
;

71 
sc
 = 
	`OsDrvC¥AuxClockAºayC⁄fig
(
auxClk
);

73 
πems_°©us_code
 
°©us
 = 
	`OsDrvC¥Tu∫OnI¶™d
(
OS_DRV_CPR_PWR_ISLAND_USB
);

74 i‡(
°©us
){

75 
	`¥ötf
("exiting\n");

76 
	`exô
(
°©us
);

80  
sc
;

81 
	}
}

	@HowTo/XLink/BufferedSingleStream/myriad/leon/app_config.h

9 #i‚de‡
_APP_CONFIG_H_


10 
	#_APP_CONFIG_H_


	)

12 
	~"ÁèlExãnsi⁄.h
"

13 
	~"mv_ty≥s.h
"

16 
	#PLL_DESIRED_FREQ_KHZ
 600000

	)

19 #ifde‡
MA2X8X


20 
	#DEFAULT_OSC_CLOCK_KHZ
 24000

	)

22 
	#DEFAULT_OSC_CLOCK_KHZ
 12000

	)

25 
	#L2CACHE_NORMAL_MODE
 (0x6)

26 
	#L2CACHE_CFG
 (
L2CACHE_NORMAL_MODE
)

	)

28 
öôClocksAndMem‹y
();

	@HowTo/XLink/BufferedSingleStream/myriad/leon/main.c

1 
	~<°dlib.h
>

2 
	~<°dio.h
>

3 
	~<as£π.h
>

5 
	~<πems.h
>

6 
	~<πems/b•Io.h
>

8 
	~<uni°d.h
>

9 
	~<sys/ty≥s.h
>

10 
	~<sys/°©.h
>

11 
	~<sys/io˘l.h
>

12 
	~<f˙é.h
>

14 
	~"≠p_c⁄fig.h
"

15 
	~"πems_c⁄fig.h
"

17 
	~"mv_ty≥s.h
"

18 
	~"../../sh¨ed/comm⁄Funcs.h
"

19 
	~"XLök.h
"

23 * 
	$Func
(* 
a
) {

24 
	`UNUSED
(
a
);

25 
XLökGlobÆH™dÀr_t
 
gh™dÀr
 = {

26 .
¥Ÿocﬁ
 = 
USB_VSC


28 
XLökEº‹_t
 
°©us
 = 
X_LINK_COMMUNICATION_NOT_OPEN
;

29  
°©us
 !
X_LINK_SUCCESS
) {

30 
°©us
 = 
	`XLökInôülize
(&
gh™dÀr
);

33 
°ªamId
 = 
	`XLökO≥nSåóm
(0, "firstStream",5*1024*1024);

35 
i
 = 0; i<
NUM_MESSAGES
; i++) {

36 
	`ª˚iveAndRëu∫Mesßges
(
°ªamId
);

38  
NULL
;

39 
	}
}

41 *
	$POSIX_Inô
 (*
¨gs
)

43 
	`UNUSED
(
¨gs
);

45 i‡(
	`öôClocksAndMem‹y
()) {

46 
	`¥ötf
("FailedÅo initialize clocks.\n");

49 
±hªad_©å_t
 
©å
;

50 
sc
;

51 
±hªad_t
 
tid
;

54 if(
	`±hªad_©å_öô
(&
©å
) !=0) {

55 
	`¥ötf
("pthread_attr_initÉrror\n");

57 if(
	`±hªad_©å_£töhîôsched
(&
©å
, 
PTHREAD_EXPLICIT_SCHED
) != 0) {

58 
	`¥ötf
("pthread_attr_setinheritschedÉrror\n");

60 if(
	`±hªad_©å_£tschedpﬁicy
(&
©å
, 
SCHED_RR
) != 0) {

61 
	`¥ötf
("pthread_attr_setschedpolicyÉrror\n");

64 
sc
=
	`±hªad_¸óã
(&
tid
, &
©å
, &
Func
, 
NULL
);

65 i‡(
sc
) {

66 
	`¥ötf
("Control Thread creation failed\n");

68 
sched_∑øm
 
sched∑øm
;

69 
sched∑øm
.
sched_¥i‹ôy
 = 200;

70 if(
	`±hªad_£tsched∑øm
(
tid
, 
SCHED_RR
, &
sched∑øm
) != 0) {

71 
	`¥ötf
("pthread_attr_setschedpolicyÉrror\n");

74 
	`¶ìp
(1);

76 
	`¶ìp
(100);

77 
	`exô
(0);

78 
	}
}

	@HowTo/XLink/BufferedSingleStream/myriad/leon/rtems_config.h

1 #i‚de‡
_LEON_RTEMS_CONFIG_H_


2 
	#_LEON_RTEMS_CONFIG_H_


	)

4 
	~"ÁèlExãnsi⁄.h
"

5 #ifde‡
MA2X8X


6 
	~"OsDrvInô.h
"

8 
	~"OsDrvC¥.h
"

11 #i‡
deföed
(
__RTEMS__
)

13 #i‡!
deföed
 (
__CONFIG__
)

14 
	#__CONFIG__


	)

17 
	#CONFIGURE_INIT


	)

19 #i‚de‡
RTEMS_POSIX_API


20 
	#RTEMS_POSIX_API


	)

23 
	#CONFIGURE_MICROSECONDS_PER_TICK
 1000

	)

25 
	#CONFIGURE_TICKS_PER_TIMESLICE
 1

	)

27 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

28 
	#CONFIGURE_APPLICATION_NEEDS_CLOCK_DRIVER


	)

29 #i‚de‡
USE_USB_VSC


30 #i‚de‡
USE_LINK_JTAG


31 
	~"usb_u¨t.h
"

35 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

36 
	#CONFIGURE_MINIMUM_TASK_STACK_SIZE
 (8192)

	)

37 
	#CONFIGURE_MAXIMUM_TASKS
 40

	)

38 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 10

	)

39 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 8

	)

40 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 8

	)

41 
	#CONFIGURE_MAXIMUM_POSIX_SEMAPHORES
 8

	)

42 
	#CONFIGURE_MAXIMUM_POSIX_MESSAGE_QUEUES
 8

	)

43 
	#CONFIGURE_MAXIMUM_POSIX_TIMERS
 6

	)

44 
	#CONFIGURE_MAXIMUM_TIMERS
 4

	)

45 
	#CONFIGURE_MAXIMUM_MESSAGE_QUEUES
 1

	)

46 
	#CONFIGURE_MAXIMUM_SEMAPHORES
 32

	)

47 
	#CONFIGURE_MAXIMUM_DRIVERS
 16

	)

48 
	#CONFIGURE_MAXIMUM_DEVICES
 16

	)

49 
	#CONFIGURE_LIBIO_MAXIMUM_FILE_DESCRIPTORS
 30

	)

51 
	#CONFIGURE_POSIX_INIT_TASKS_TABLE


	)

53 
	#CONFIGURE_MAXIMUM_USER_EXTENSIONS
 1

	)

54 
	#CONFIGURE_INITIAL_EXTENSIONS
 { .
Áèl
 = 
F©Æ_exãnsi⁄
 }

	)

56 #ifde‡
MA2X8X


57 
	#CONFIGURE_APPLICATION_EXTRA_DRIVERS
 
OS_DRV_INIT_TABLE_ENTRY


	)

60 *
POSIX_Inô
 (*
¨gs
);

61 
	~<πems/c⁄fdefs.h
>

74 
BSP_SET_CLOCK
(
DEFAULT_OSC_CLOCK_KHZ
,

75 
PLL_DESIRED_FREQ_KHZ
,

78 
DEFAULT_RTEMS_CSS_LOS_CLOCKS
 | 
DEV_CSS_USB
,

79 
DEFAULT_RTEMS_MSS_LRT_CLOCKS
,

80 
DEFAULT_UPA_CLOCKS
,

84 
BSP_SET_L2C_CONFIG
(1, 
DEFAULT_RTEMS_L2C_REPLACEMENT_POLICY
, 
DEFAULT_RTEMS_L2C_LOCKED_WAYS
,
DEFAULT_RTEMS_L2C_MODE
, 0, 0);

86 
BSP_SET_L1C_CONFIG
(1, 1);

	@HowTo/XLink/BufferedSingleStream/pc/main.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°dboﬁ.h
>

4 
	~<uni°d.h
>

5 
	~<as£π.h
>

7 
	~"XLök.h
"

8 
	~"usb_boŸ.h
"

9 
	~"comm⁄Funcs.h
"

10 
	#DATA_LENGTH
 (3*1024*1024)

	)

11 
	#MAXNAMESIZE
 28

	)

12 
	$maö
()

14 
«me
[
MAXNAMESIZE
];

15 
rc
 = 
	`XLökGëDevi˚Name
(0, 
«me
, (name));

17 i‡(!
rc
)

19 
	`¥ötf
("Devi˚ FoundÇamê%†\n", 
«me
);

23 
	`¥ötf
("ERROR couldn'àföd devi˚†r¯%d\n", 
rc
);

24 
	`exô
(1);

26 
XLökGlobÆH™dÀr_t
 
gh™dÀr
 = {

27 .
¥Ÿocﬁ
 = 
USB_VSC


29 
XLökH™dÀr_t
 
h™dÀr
;

31 #ifde‡
USE_USB_VSC


32 
h™dÀr
.
devi˚P©h
 = 
«me
;

34 
h™dÀr
.
devi˚P©h
 = "/dev/ttyACM0";

35 
h™dÀr
.
devi˚P©h2
 = "/dev/ttyACM1";

40 if–
	`XLökBoŸRemŸe
(
«me
, 
MVCMD_NAME
Ë!
X_LINK_SUCCESS
){

42 
	`exô
(1);

44 
	`¥ötf
("Myrüd %†wa†boŸed\n", 
«me
);

46 
	`XLökInôülize
(&
gh™dÀr
Ë!
X_LINK_SUCCESS
);

47 
	`¥ötf
("Initialize done\n");

49 
°ªamId
;

51 
	`XLökC⁄√˘
(&
h™dÀr
Ë!
X_LINK_SUCCESS
);

52 
	`¥ötf
("XLökC⁄√˘ d⁄ê-Üök Id %d\n", 
h™dÀr
.
lökId
);

54 (
°ªamId
 = 
	`XLökO≥nSåóm
(
h™dÀr
.
lökId
, "fú°Såóm",
DATA_LENGTH
)) == 0xDEADDEAD);

56 
boﬁ
 
∑ss
 = 
	`£ndAndRe˚iveMesßges
(
°ªamId
);

58 
XLökEº‹_t
 
°©us
 = 
	`XLökClo£Såóm
(
°ªamId
);

59 i‡(
°©us
 !
X_LINK_SUCCESS
)

61 
	`¥ötf
("˛o£ såóm faûed: %x\n", 
°©us
);

63 
°©us
 = 
	`XLökRe£tRemŸe
(
h™dÀr
.
lökId
);

64 i‡(
°©us
 !
X_LINK_SUCCESS
)

66 
	`¥ötf
("ª£àÁûed: %x\n", 
°©us
);

68 if(
∑ss
) {

69 
	`¥ötf
("TEST PASSED! o¿%d :)\n", 
h™dÀr
.
lökId
);

71 
	`¥ötf
("TEST FAILED! o¿%d :(\n", 
h™dÀr
.
lökId
);

75 
	}
}

	@HowTo/XLink/BufferedSingleStream/shared/commonFuncs.c

1 
	~<°dlib.h
>

2 
	~<°dio.h
>

3 
	~<as£π.h
>

4 
	~<time.h
>

5 
	~<°dboﬁ.h
>

6 
	~"XLök.h
"

7 
	~"comm⁄Funcs.h
"

9 
	#BUFF_LEN
 (3*1024*1024)

	)

10 
	#is_Æig√d
(
POINTER
, 
BYTE_COUNT
) \

11 (((
uöçå_t
)(c⁄° *)(
POINTER
)Ë% (
BYTE_COUNT
Ë=0)

	)

13 
uöt8_t
 
	gbuf„r1
[
BUFF_LEN
];

14 
	gmsgIdx
[
NUM_MESSAGES
+1];

17 
boﬁ
 
	$£ndAndRe˚iveMesßges
(
°ªamId
) {

19 
	`§™d
(
	`time
(
NULL
));

20 
i
 = 0 ; i< 
BUFF_LEN
; i++){

21 
buf„r1
[
i
]=
	`ønd
();

23 
uöt32_t
 
°¨tIdx
[10] = {0 , 43, 80, 224, 271, 512, 768, 944, 1025, 2048};

24 
	`as£π
(
NUM_MESSAGES
 % 10 == 0);

25 
	`as£π
((
°¨tIdx
[9] * (1+ (
NUM_MESSAGES
 / 10)Ë+ 2048Ë< 
BUFF_LEN
);

26 
i
 = 0; i < 
NUM_MESSAGES
; i++) {

27 
msgIdx
[
i
] = 
°¨tIdx
[i%10] + (startIdx[9] * (i/10));

29 
msgIdx
[
NUM_MESSAGES
] = msgIdx[NUM_MESSAGES-1] + 2048;

31 
boﬁ
 
ã°Pas£d
 = 
åue
;

32 
°ªamPackëDesc_t
* 
∑ckë
;

34 
i
 = 0; i<
NUM_MESSAGES
; i++) {

36 
	`¥ötf
("Sending some data... ");

37 
	`fÊush
(
°dout
);

38 
XLökEº‹_t
 
°©us
 = 
	`XLökWrôeD©a
(
°ªamId
, &
buf„r1
[
msgIdx
[
i
]], msgIdx[i+1]-msgIdx[i]);

39 i‡(
°©us
 =
X_LINK_SUCCESS
)

41 
	`¥ötf
("Data sent\n");

45 
	`¥ötf
("£àd©®Áûed: %x\n", 
°©us
);

46 
ã°Pas£d
 = 
Ál£
;

50 
	`¥ötf
("Reading back data... ");

51 
	`fÊush
(
°dout
);

52 
°©us
 = 
	`XLökRódD©a
(
°ªamId
, &
∑ckë
);

53 i‡(
°©us
 =
X_LINK_SUCCESS
)

55 
	`¥ötf
("DataÑead\n");

59 
	`¥ötf
("gë d©®Áûed: %x\n", 
°©us
);

60 
ã°Pas£d
 = 
Ál£
;

63 i‡(
∑ckë
->
Àngth
 !
msgIdx
[
i
+1]-msgIdx[i]){

64 
	`¥ötf
("PacketÜength wrong\n");

65 
ã°Pas£d
 = 
Ál£
;

67 i‡(!
	`is_Æig√d
(
∑ckë
->
d©a
, 64)) {

68 
	`¥ötf
("DataÇot 64 byteáligned");

69 
ã°Pas£d
 = 
Ál£
;

71 
k
 = 0; k < 
∑ckë
->
Àngth
 ; k++)

73 i‡(
∑ckë
->
d©a
[
k
] !
buf„r1
[
msgIdx
[
i
]+k])

75 
	`¥ötf
("VÆuê© index %u i†wr⁄g: %x\n", 
k
, 
∑ckë
->
d©a
[k]);

76 
ã°Pas£d
 = 
Ál£
;

82 
°©us
 = 
	`XLökRñó£D©a
(
°ªamId
);

83 i‡(
°©us
 != 0)

85 
	`¥ötf
("ªÀa£ d©®Áûed: %x\n", 
°©us
);

86 
ã°Pas£d
 = 
Ál£
;

90  
ã°Pas£d
;

91 
	}
}

93 
	$ª˚iveAndRëu∫Mesßges
(
°ªamId
){

94 
	`¥ötf
("Reading Data... ");

95 
	`fÊush
(
°dout
);

96 
°ªamPackëDesc_t
* 
∑ckë
;

97 
XLökEº‹_t
 
°©us
 = 
	`XLökRódD©a
(
°ªamId
, &
∑ckë
);

98 i‡(
°©us
 !
X_LINK_SUCCESS
)

100 
	`¥ötf
("Gë d©®Áûed: %x\n", 
°©us
);

102 
	`¥ötf
("DataÑead\n");

104 
	`¥ötf
("Writing back data... ");

105 
	`fÊush
(
°dout
);

106 
°©us
 = 
	`XLökWrôeD©a
(
°ªamId
, &
∑ckë
->
d©a
[0],Öackë->
Àngth
);

107 i‡(
°©us
 !
X_LINK_SUCCESS
)

109 
	`¥ötf
("£àd©®Áûed: %x\n", 
°©us
);

111 
	`¥ötf
("Data sent\n");

114 
°©us
 = 
	`XLökRñó£D©a
(
°ªamId
);

115 i‡(
°©us
 !
X_LINK_SUCCESS
)

117 
	`¥ötf
("ªÀa£ d©®Áûed: %x\n", 
°©us
);

119 
	}
}

	@HowTo/XLink/BufferedSingleStream/shared/commonFuncs.h

1 #i‚de‡
COMMON_FUNCS_H


2 
	#COMMON_FUNCS_H


	)

4 
	#NUM_MESSAGES
 100

	)

6 
boﬁ
 
£ndAndRe˚iveMesßges
(
°ªamId
);

8 
ª˚iveAndRëu∫Mesßges
(
°ªamId
);

	@HowTo/XLink/MultiDevice/myriad/leon/app_config.c

11 
	~"°dio.h
"

12 
	~"≠p_c⁄fig.h
"

13 
	~<DrvLe⁄L2C.h
>

14 
	~<OsDrvC¥.h
>

15 
	~<°dlib.h
>

16 #ifde‡
MA2X8X


17 
	~"OsDrvInô.h
"

27 #ifde‡
MA2X8X


29 
OsDrvC¥AuxClockC⁄fig
 
	gauxClkC⁄fig
[] =

31 {
OS_DRV_CPR_DEV_CSS_AUX_USB_PHY_REF_ALT
, 
OS_DRV_CPR_CLK_PLL0
, 1, 25},

32 {
OS_DRV_CPR_DEV_CSS_AUX_USB_CTRL_SUSPEND
, 
OS_DRV_CPR_CLK_PLL0
, 1, 10},

33 {
OS_DRV_CPR_DEV_CSS_AUX_USB20_REF
, 
OS_DRV_CPR_CLK_PLL0
, 1, 50},

34 {
OS_DRV_CPR_DEV_CSS_AUX_USB_CTRL_REF
, 
OS_DRV_CPR_CLK_PLL0
, 1, 600},

35 {
OS_DRV_CPR_DEV_CSS_AUX_USB_CTRL
, 
OS_DRV_CPR_CLK_PLL0
, 1, 2},

36 
OS_DRV_CPR_AUX_ARRAY_TERMINATOR


39 
OsDrvC¥C⁄fig
 
	gc⁄fig
 = {

40 .
ªf0InClk
 = 
DEFAULT_OSC_CLOCK_KHZ
,

41 .
	gauxCfg
 = 
auxClkC⁄fig


44 
OS_DRV_INIT_CPR_CFG_DEFINE
(&
c⁄fig
);

54 
	$öôClocksAndMem‹y
()

56 
s32
 
sc
 = 0;

58 #i‚de‡
MA2X8X


59 
tyAuxClkDividîCfg
 
auxClk
[] =

61 {
AUX_CLK_MASK_USB_CTRL_SUSPEND_CLK
, 
CLK_SRC_PLL0
, 1, 30},

65 
sc
 = 
	`OsDrvC¥Inô
();

66 i‡(
sc
 !
RTEMS_SUCCESSFUL
)

67  
sc
;

68 
sc
 = 
	`OsDrvC¥O≥n
();

69 i‡(
sc
 !
RTEMS_SUCCESSFUL
)

70  
sc
;

71 
sc
 = 
	`OsDrvC¥AuxClockAºayC⁄fig
(
auxClk
);

73 
πems_°©us_code
 
°©us
 = 
	`OsDrvC¥Tu∫OnI¶™d
(
OS_DRV_CPR_PWR_ISLAND_USB
);

74 i‡(
°©us
){

75 
	`¥ötf
("exiting\n");

76 
	`exô
(
°©us
);

80  
sc
;

81 
	}
}

	@HowTo/XLink/MultiDevice/myriad/leon/app_config.h

9 #i‚de‡
_APP_CONFIG_H_


10 
	#_APP_CONFIG_H_


	)

12 
	~"ÁèlExãnsi⁄.h
"

13 
	~"mv_ty≥s.h
"

16 
	#PLL_DESIRED_FREQ_KHZ
 600000

	)

19 #ifde‡
MA2X8X


20 
	#DEFAULT_OSC_CLOCK_KHZ
 24000

	)

22 
	#DEFAULT_OSC_CLOCK_KHZ
 12000

	)

25 
	#L2CACHE_NORMAL_MODE
 (0x6)

26 
	#L2CACHE_CFG
 (
L2CACHE_NORMAL_MODE
)

	)

28 
öôClocksAndMem‹y
();

	@HowTo/XLink/MultiDevice/myriad/leon/main.c

1 
	~<°dlib.h
>

2 
	~<°dio.h
>

3 
	~<as£π.h
>

5 
	~<πems.h
>

6 
	~<πems/b•Io.h
>

8 
	~<uni°d.h
>

9 
	~<sys/ty≥s.h
>

10 
	~<sys/°©.h
>

11 
	~<sys/io˘l.h
>

12 
	~<f˙é.h
>

14 
	~"≠p_c⁄fig.h
"

15 
	~"πems_c⁄fig.h
"

17 
	~"mv_ty≥s.h
"

18 
	~"../../sh¨ed/comm⁄Funcs.h
"

19 
	~"XLök.h
"

23 * 
	$Func
(* 
a
) {

24 
	`UNUSED
(
a
);

25 
XLökGlobÆH™dÀr_t
 
gh™dÀr
 = {

26 .
¥Ÿocﬁ
 = 
USB_VSC


28 
XLökEº‹_t
 
°©us
 = 
X_LINK_COMMUNICATION_NOT_OPEN
;

29  
°©us
 !
X_LINK_SUCCESS
) {

30 
°©us
 = 
	`XLökInôülize
(&
gh™dÀr
);

33 
°ªamId
 = 
	`XLökO≥nSåóm
(0, "firstStream",5*1024*1024);

35 
i
 = 0; i<
NUM_MESSAGES
; i++) {

36 
	`ª˚iveAndRëu∫Mesßges
(
°ªamId
);

38  
NULL
;

39 
	}
}

41 *
	$POSIX_Inô
 (*
¨gs
)

43 
	`UNUSED
(
¨gs
);

45 i‡(
	`öôClocksAndMem‹y
()) {

46 
	`¥ötf
("FailedÅo initialize clocks.\n");

49 
±hªad_©å_t
 
©å
;

50 
sc
;

51 
±hªad_t
 
tid
;

54 if(
	`±hªad_©å_öô
(&
©å
) !=0) {

55 
	`¥ötf
("pthread_attr_initÉrror\n");

57 if(
	`±hªad_©å_£töhîôsched
(&
©å
, 
PTHREAD_EXPLICIT_SCHED
) != 0) {

58 
	`¥ötf
("pthread_attr_setinheritschedÉrror\n");

60 if(
	`±hªad_©å_£tschedpﬁicy
(&
©å
, 
SCHED_RR
) != 0) {

61 
	`¥ötf
("pthread_attr_setschedpolicyÉrror\n");

64 
sc
=
	`±hªad_¸óã
(&
tid
, &
©å
, &
Func
, 
NULL
);

65 i‡(
sc
) {

66 
	`¥ötf
("Control Thread creation failed\n");

68 
sched_∑øm
 
sched∑øm
;

69 
sched∑øm
.
sched_¥i‹ôy
 = 200;

70 if(
	`±hªad_£tsched∑øm
(
tid
, 
SCHED_RR
, &
sched∑øm
) != 0) {

71 
	`¥ötf
("pthread_attr_setschedpolicyÉrror\n");

74 
	`¶ìp
(1);

76 
	`¶ìp
(100);

77 
	`exô
(0);

78 
	}
}

	@HowTo/XLink/MultiDevice/myriad/leon/rtems_config.h

1 #i‚de‡
_LEON_RTEMS_CONFIG_H_


2 
	#_LEON_RTEMS_CONFIG_H_


	)

4 
	~"ÁèlExãnsi⁄.h
"

5 #ifde‡
MA2X8X


6 
	~"OsDrvInô.h
"

8 
	~"OsDrvC¥.h
"

11 #i‡
deföed
(
__RTEMS__
)

13 #i‡!
deföed
 (
__CONFIG__
)

14 
	#__CONFIG__


	)

17 
	#CONFIGURE_INIT


	)

19 #i‚de‡
RTEMS_POSIX_API


20 
	#RTEMS_POSIX_API


	)

23 
	#CONFIGURE_MICROSECONDS_PER_TICK
 1000

	)

25 
	#CONFIGURE_TICKS_PER_TIMESLICE
 1

	)

27 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

28 
	#CONFIGURE_APPLICATION_NEEDS_CLOCK_DRIVER


	)

29 #i‚de‡
USE_USB_VSC


30 #i‚de‡
USE_LINK_JTAG


31 
	~"usb_u¨t.h
"

32 
	#CONFIGURE_APPLICATION_EXTRA_DRIVERS
 
USB_UART_DRIVER_TABLE_ENTRY


	)

36 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

37 
	#CONFIGURE_MINIMUM_TASK_STACK_SIZE
 (8192)

	)

38 
	#CONFIGURE_MAXIMUM_TASKS
 40

	)

39 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 10

	)

40 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 8

	)

41 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 8

	)

42 
	#CONFIGURE_MAXIMUM_POSIX_SEMAPHORES
 8

	)

43 
	#CONFIGURE_MAXIMUM_POSIX_MESSAGE_QUEUES
 8

	)

44 
	#CONFIGURE_MAXIMUM_POSIX_TIMERS
 6

	)

45 
	#CONFIGURE_MAXIMUM_TIMERS
 4

	)

46 
	#CONFIGURE_MAXIMUM_MESSAGE_QUEUES
 1

	)

47 
	#CONFIGURE_MAXIMUM_SEMAPHORES
 32

	)

48 
	#CONFIGURE_MAXIMUM_DRIVERS
 16

	)

49 
	#CONFIGURE_MAXIMUM_DEVICES
 16

	)

50 
	#CONFIGURE_LIBIO_MAXIMUM_FILE_DESCRIPTORS
 30

	)

52 
	#CONFIGURE_POSIX_INIT_TASKS_TABLE


	)

54 
	#CONFIGURE_MAXIMUM_USER_EXTENSIONS
 1

	)

55 
	#CONFIGURE_INITIAL_EXTENSIONS
 { .
Áèl
 = 
F©Æ_exãnsi⁄
 }

	)

57 #ifde‡
MA2X8X


58 
	#CONFIGURE_APPLICATION_EXTRA_DRIVERS
 
OS_DRV_INIT_TABLE_ENTRY


	)

61 *
POSIX_Inô
 (*
¨gs
);

62 
	~<πems/c⁄fdefs.h
>

75 
BSP_SET_CLOCK
(
DEFAULT_OSC_CLOCK_KHZ
,

76 
PLL_DESIRED_FREQ_KHZ
,

79 
DEFAULT_RTEMS_CSS_LOS_CLOCKS
 | 
DEV_CSS_USB
,

80 
DEFAULT_RTEMS_MSS_LRT_CLOCKS
,

81 
DEFAULT_UPA_CLOCKS
,

85 
BSP_SET_L2C_CONFIG
(1, 
DEFAULT_RTEMS_L2C_REPLACEMENT_POLICY
, 
DEFAULT_RTEMS_L2C_LOCKED_WAYS
,
DEFAULT_RTEMS_L2C_MODE
, 0, 0);

87 
BSP_SET_L1C_CONFIG
(1, 1);

	@HowTo/XLink/MultiDevice/pc/main.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°dboﬁ.h
>

4 
	~<uni°d.h
>

5 
	~<as£π.h
>

6 
	~"±hªad.h
"

8 
	~"XLök.h
"

9 
	~"usb_boŸ.h
"

10 
	~"comm⁄Funcs.h
"

11 
	#DATA_LENGTH
 (3*1024*1024)

	)

12 
	#MAXNAMESIZE
 28

	)

13 
	$maö
()

15 
«me
[
MAXNAMESIZE
];

16 
«me2
[
MAXNAMESIZE
];

17 
rc
 = 
	`XLökGëDevi˚Name
(0, 
«me
, (name));

18 i‡(!
rc
)

20 
	`¥ötf
("Devi˚ FoundÇamê%†\n", 
«me
);

24 
	`¥ötf
("ERROR couldn'àföd devi˚†r¯%d\n", 
rc
);

25 
	`exô
(1);

27 
rc
 = 
	`XLökGëDevi˚Name
(1, 
«me2
, (name2));

28 i‡(!
rc
)

30 
	`¥ötf
("Devi˚ FoundÇamê%†\n", 
«me2
);

34 
	`¥ötf
("ERROR couldn'àföd devi˚†r¯%d\n", 
rc
);

35 
	`exô
(1);

37 
XLökGlobÆH™dÀr_t
 
gh™dÀr
 = {

38 .
¥Ÿocﬁ
 = 
USB_VSC


40 
XLökH™dÀr_t
 
h™dÀr
[2];

42 #ifde‡
USE_USB_VSC


43 
h™dÀr
[0].
devi˚P©h
 = 
«me
;

44 
h™dÀr
[1].
devi˚P©h
 = 
«me2
;

46 
h™dÀr
[0].
devi˚P©h
 = "/dev/ttyACM0";

47 
h™dÀr
[0].
devi˚P©h2
 = "/dev/ttyACM1";

48 
h™dÀr
[1].
devi˚P©h
 = "/dev/ttyACM0";

49 
h™dÀr
[1].
devi˚P©h2
 = "/dev/ttyACM1";

54 if(
	`XLökBoŸRemŸe
(
«me
, 
MVCMD_NAME
Ë!
X_LINK_SUCCESS
){

55 
	`XLökRe£tAŒ
();

56 
	`exô
(1);

58 
	`¥ötf
("Myrüd %†wa†boŸed\n", 
«me
);

59 if(
	`XLökBoŸRemŸe
(
«me2
, 
MVCMD_NAME
Ë!
X_LINK_SUCCESS
){

60 
	`XLökRe£tAŒ
();

61 
	`exô
(1);

63 
	`¥ötf
("Myrüd %†wa†boŸed\n", 
«me2
);

65 
	`XLökInôülize
(&
gh™dÀr
Ë!
X_LINK_SUCCESS
);

66 
	`¥ötf
("Initialize done\n");

68 
sc
;

69 
°ªamId
[2];

70 
±hªad_©å_t
 
©å
;

71 
±hªad_t
 
tid
[2];

72 
boﬁ
 
∑ss
[2];

73 if(
	`±hªad_©å_öô
(&
©å
) != 0) {

74 
	`¥ötf
("pthread_attr_initÉrror\n");

76 
XLökEº‹_t
 
ªt
;

77 
i
;

78 
i
 = 0; i < 2; i++)

80 
ªt
 = 
	`XLökC⁄√˘
(&
h™dÀr
[
i
]);

81 
ªt
 !
X_LINK_SUCCESS
 &&Ñë !
X_LINK_ERROR
)

82 
ªt
 = 
	`XLökC⁄√˘
(&
h™dÀr
[
i
]);

83 i‡(
ªt
 =
X_LINK_ERROR
)

86 
	`¥ötf
("XLökC⁄√˘ d⁄ê-Üök Id %d\n", 
h™dÀr
[
i
].
lökId
);

88 i‡(
ªt
 =
X_LINK_ERROR
)

90 
	`XLökRe£tAŒ
();

94 
i
 = 0; i < 2; i++)

96 (
°ªamId
[
i
] = 
	`XLökO≥nSåóm
(
h™dÀr
[i].
lökId
, "fú°Såóm",
DATA_LENGTH
)) == 0xDEADDEAD);

99 
sc
 = 
	`±hªad_¸óã
(&
tid
[
i
], &
©å
, &
£ndAndRe˚iveMesßges
, (*)&
°ªamId
[i] );

100 i‡(
sc
) {

101 
	`¥ötf
("Control Thread creation failed\n");

105 
i
 = 0; i < 2; i++) {

106 
	`±hªad_joö
(
tid
[
i
], (**)&
∑ss
[i]);

109 
i
 = 0; i < 2; i++)

111 
XLökEº‹_t
 
°©us
 = 
	`XLökClo£Såóm
(
°ªamId
[
i
]);

112 i‡(
°©us
 !
X_LINK_SUCCESS
)

114 
	`¥ötf
("˛o£ såóm faûed: %x %x\n", 
°ªamId
[
i
], 
°©us
);

116 
	`¥ötf
("˛o£ såóm suc˚ss: %x\n", 
°ªamId
[
i
]);

119 
i
 = 0; i < 2; i++) {

120 
XLökEº‹_t
 
°©us
 = 
	`XLökRe£tRemŸe
(
h™dÀr
[
i
].
lökId
);

121 i‡(
°©us
 !
X_LINK_SUCCESS
)

123 
	`¥ötf
("ª£àÁûed: %x\n", 
°©us
);

125 if(
∑ss
[
i
]) {

126 
	`¥ötf
("TEST PASSED! o¿%d :)\n", 
h™dÀr
[
i
].
lökId
);

128 
	`¥ötf
("TEST FAILED! o¿%d :(\n", 
h™dÀr
[
i
].
lökId
);

131 
	}
}

	@HowTo/XLink/MultiDevice/shared/commonFuncs.c

1 
	~<°dlib.h
>

2 
	~<°dio.h
>

3 
	~<as£π.h
>

4 
	~<time.h
>

5 
	~<°dboﬁ.h
>

6 
	~"XLök.h
"

7 
	~"comm⁄Funcs.h
"

9 
	#BUFF_LEN
 (3*1024*1024)

	)

10 
	#is_Æig√d
(
POINTER
, 
BYTE_COUNT
) \

11 (((
uöçå_t
)(c⁄° *)(
POINTER
)Ë% (
BYTE_COUNT
Ë=0)

	)

13 
uöt8_t
 
	gbuf„r1
[
BUFF_LEN
];

14 
	gmsgIdx
[
NUM_MESSAGES
+1];

17 * 
	$£ndAndRe˚iveMesßges
(* 
ãmp
) {

19 
°ªamId
 = *(*Ë
ãmp
;

20 
lökId
 = (
°ªamId
 >> 28) & 0xFFFF;

21 
	`§™d
(
	`time
(
NULL
));

22 
i
 = 0 ; i< 
BUFF_LEN
; i++){

23 
buf„r1
[
i
]=
	`ønd
();

25 
uöt32_t
 
°¨tIdx
[10] = {0 , 43, 80, 224, 271, 512, 768, 944, 1025, 2048};

26 
	`as£π
(
NUM_MESSAGES
 % 10 == 0);

27 
	`as£π
((
°¨tIdx
[9] * (1+ (
NUM_MESSAGES
 / 10)Ë+ 2048Ë< 
BUFF_LEN
);

28 
i
 = 0; i < 
NUM_MESSAGES
; i++) {

29 
msgIdx
[
i
] = 
°¨tIdx
[i%10] + (startIdx[9] * (i/10));

31 
msgIdx
[
NUM_MESSAGES
] = msgIdx[NUM_MESSAGES-1] + 2048;

33 
boﬁ
 
ã°Pas£d
 = 
åue
;

34 
°ªamPackëDesc_t
* 
∑ckë
;

36 
i
 = 0; i<
NUM_MESSAGES
; i++) {

38 
	`¥ötf
("Sídög somêd©®tÿlök %d ... ", 
lökId
);

39 
	`fÊush
(
°dout
);

40 
XLökEº‹_t
 
°©us
 = 
	`XLökWrôeD©a
(
°ªamId
, &
buf„r1
[
msgIdx
[
i
]], msgIdx[i+1]-msgIdx[i]);

41 i‡(
°©us
 =
X_LINK_SUCCESS
)

43 
	`¥ötf
("D©®£¡Åÿlök %d\n", 
lökId
);

47 
	`¥ötf
("£àd©®Áûed: %x\n", 
°©us
);

48 
ã°Pas£d
 = 
Ál£
;

52 
	`¥ötf
("Ródög back d©®‰omÜök %d... ", 
lökId
);

53 
	`fÊush
(
°dout
);

54 
°©us
 = 
	`XLökRódD©a
(
°ªamId
, &
∑ckë
);

55 i‡(
°©us
 =
X_LINK_SUCCESS
)

57 
	`¥ötf
("D©®ªad fromÜök %d\n", 
lökId
);

61 
	`¥ötf
("gë d©®Áûed: %x\n", 
°©us
);

62 
ã°Pas£d
 = 
Ál£
;

65 i‡(
∑ckë
->
Àngth
 !
msgIdx
[
i
+1]-msgIdx[i]){

66 
	`¥ötf
("PackëÜígth wr⁄g (lökid %d)\n", 
lökId
);

67 
ã°Pas£d
 = 
Ál£
;

69 i‡(!
	`is_Æig√d
(
∑ckë
->
d©a
, 64)) {

70 
	`¥ötf
("DataÇot 64 byteáligned");

71 
ã°Pas£d
 = 
Ál£
;

73 
k
 = 0; k < 
∑ckë
->
Àngth
 ; k++)

75 i‡(
∑ckë
->
d©a
[
k
] !
buf„r1
[
msgIdx
[
i
]+k])

77 
	`¥ötf
("VÆuê© index %u i†wr⁄g: %x\n", 
k
, 
∑ckë
->
d©a
[k]);

78 
ã°Pas£d
 = 
Ál£
;

84 
°©us
 = 
	`XLökRñó£D©a
(
°ªamId
);

85 i‡(
°©us
 != 0)

87 
	`¥ötf
("ªÀa£ d©® f‹Üök %d faûed: %x\n", 
lökId
, 
°©us
);

88 
ã°Pas£d
 = 
Ál£
;

92  (*Ë
ã°Pas£d
;

93 
	}
}

95 
	$ª˚iveAndRëu∫Mesßges
(
°ªamId
){

96 
	`¥ötf
("Reading Data... ");

97 
	`fÊush
(
°dout
);

98 
°ªamPackëDesc_t
* 
∑ckë
;

99 
XLökEº‹_t
 
°©us
 = 
	`XLökRódD©a
(
°ªamId
, &
∑ckë
);

100 i‡(
°©us
 !
X_LINK_SUCCESS
)

102 
	`¥ötf
("Gë d©®Áûed: %x\n", 
°©us
);

104 
	`¥ötf
("DataÑead\n");

106 
	`¥ötf
("Writing back data... ");

107 
	`fÊush
(
°dout
);

108 
°©us
 = 
	`XLökWrôeD©a
(
°ªamId
, &
∑ckë
->
d©a
[0],Öackë->
Àngth
);

109 i‡(
°©us
 !
X_LINK_SUCCESS
)

111 
	`¥ötf
("£àd©®Áûed: %x\n", 
°©us
);

113 
	`¥ötf
("Data sent\n");

116 
°©us
 = 
	`XLökRñó£D©a
(
°ªamId
);

117 i‡(
°©us
 !
X_LINK_SUCCESS
)

119 
	`¥ötf
("ªÀa£ d©®Áûed: %x\n", 
°©us
);

121 
	}
}

	@HowTo/XLink/MultiDevice/shared/commonFuncs.h

1 #i‚de‡
COMMON_FUNCS_H


2 
	#COMMON_FUNCS_H


	)

4 
	#NUM_MESSAGES
 100

	)

6 * 
£ndAndRe˚iveMesßges
(* 
°ªamId
);

8 
ª˚iveAndRëu∫Mesßges
(
°ªamId
);

	@HowTo/XLink/SingleStream/myriad/leon/app_config.c

11 
	~"°dio.h
"

12 
	~"≠p_c⁄fig.h
"

13 
	~<DrvLe⁄L2C.h
>

14 
	~<OsDrvC¥.h
>

15 
	~<°dlib.h
>

16 #ifde‡
MA2X8X


17 
	~"OsDrvInô.h
"

27 #ifde‡
MA2X8X


29 
OsDrvC¥AuxClockC⁄fig
 
	gauxClkC⁄fig
[] =

31 {
OS_DRV_CPR_DEV_CSS_AUX_USB_PHY_REF_ALT
, 
OS_DRV_CPR_CLK_PLL0
, 1, 25},

32 {
OS_DRV_CPR_DEV_CSS_AUX_USB_CTRL_SUSPEND
, 
OS_DRV_CPR_CLK_PLL0
, 1, 10},

33 {
OS_DRV_CPR_DEV_CSS_AUX_USB20_REF
, 
OS_DRV_CPR_CLK_PLL0
, 1, 50},

34 {
OS_DRV_CPR_DEV_CSS_AUX_USB_CTRL_REF
, 
OS_DRV_CPR_CLK_PLL0
, 1, 600},

35 {
OS_DRV_CPR_DEV_CSS_AUX_USB_CTRL
, 
OS_DRV_CPR_CLK_PLL0
, 1, 2},

36 
OS_DRV_CPR_AUX_ARRAY_TERMINATOR


39 
OsDrvC¥C⁄fig
 
	gc⁄fig
 = {

40 .
ªf0InClk
 = 
DEFAULT_OSC_CLOCK_KHZ
,

41 .
	gauxCfg
 = 
auxClkC⁄fig


44 
OS_DRV_INIT_CPR_CFG_DEFINE
(&
c⁄fig
);

54 
	$öôClocksAndMem‹y
()

56 
s32
 
sc
 = 0;

58 #i‚de‡
MA2X8X


59 
tyAuxClkDividîCfg
 
auxClk
[] =

61 {
AUX_CLK_MASK_USB_CTRL_SUSPEND_CLK
, 
CLK_SRC_PLL0
, 1, 30},

65 
sc
 = 
	`OsDrvC¥Inô
();

66 i‡(
sc
 !
RTEMS_SUCCESSFUL
)

67  
sc
;

68 
sc
 = 
	`OsDrvC¥O≥n
();

69 i‡(
sc
 !
RTEMS_SUCCESSFUL
)

70  
sc
;

71 
sc
 = 
	`OsDrvC¥AuxClockAºayC⁄fig
(
auxClk
);

73 
πems_°©us_code
 
°©us
 = 
	`OsDrvC¥Tu∫OnI¶™d
(
OS_DRV_CPR_PWR_ISLAND_USB
);

74 i‡(
°©us
){

75 
	`¥ötf
("exiting\n");

76 
	`exô
(
°©us
);

80  
sc
;

81 
	}
}

	@HowTo/XLink/SingleStream/myriad/leon/app_config.h

9 #i‚de‡
_APP_CONFIG_H_


10 
	#_APP_CONFIG_H_


	)

12 
	~"ÁèlExãnsi⁄.h
"

13 
	~"mv_ty≥s.h
"

16 
	#PLL_DESIRED_FREQ_KHZ
 600000

	)

19 #ifde‡
MA2X8X


20 
	#DEFAULT_OSC_CLOCK_KHZ
 24000

	)

22 
	#DEFAULT_OSC_CLOCK_KHZ
 12000

	)

25 
	#L2CACHE_NORMAL_MODE
 (0x6)

26 
	#L2CACHE_CFG
 (
L2CACHE_NORMAL_MODE
)

	)

28 
öôClocksAndMem‹y
();

	@HowTo/XLink/SingleStream/myriad/leon/main.c

1 
	~<°dlib.h
>

2 
	~<°dio.h
>

3 
	~<as£π.h
>

5 
	~<πems.h
>

6 
	~<πems/b•Io.h
>

8 
	~<uni°d.h
>

9 
	~<sys/ty≥s.h
>

10 
	~<sys/°©.h
>

11 
	~<sys/io˘l.h
>

12 
	~<f˙é.h
>

14 
	~"≠p_c⁄fig.h
"

15 
	~"πems_c⁄fig.h
"

17 
	~"mv_ty≥s.h
"

18 
	~"XLök.h
"

20 
__©åibuã
((
£˘i⁄
(".ddr.bss"))Ë
uöt8_t
 
	gbuf„r1
[3*1024*1024];

22 *
	$POSIX_Inô
 (*
¨gs
)

24 
	`UNUSED
(
¨gs
);

25 i‡(
	`öôClocksAndMem‹y
()) {

26 
	`¥ötf
("FailedÅo initialize clocks.\n");

29 
XLökGlobÆH™dÀr_t
 
gh™dÀr
 = {

30 .
¥Ÿocﬁ
 = 
USB_VSC
,

32 
XLökEº‹_t
 
°©us
 = 
X_LINK_COMMUNICATION_NOT_OPEN
;

34 
°©us
 = 
	`XLökInôülize
(&
gh™dÀr
);

35 i‡(
°©us
 !
X_LINK_SUCCESS
)

36 
	`exô
(1);

37 
	`¥ötf
("Initialized\n");

39 
i
 = 0; i < 1024*1024; i++)

41 
buf„r1
[
i
] = i/4096;

43 
°ªamId
 = 
	`XLökO≥nSåóm
(0, "firstStream", 5*1024*1024);

44 
°ªamPackëDesc_t
 * 
∑ckë
;

46 
boŸTimes
 = 100;

47 
k
;

48 
	`XLökProfSèπ
();

49 
boŸTimes
-- && (
°©us
 !
X_LINK_COMMUNICATION_NOT_OPEN
))

51 
	`¥ötf
("BOOT TIMES: %d\n", 
boŸTimes
);

53 
°©us
 = 
	`XLökRódD©a
(
°ªamId
, &
∑ckë
);

55 i‡(
°©us
 !
X_LINK_SUCCESS
)

57 
	`¥ötf
("myrüd gë d©®Áûed: %x\n", 
°©us
);

59 
	`¥ötf
("DataÑead\n");

60 if(
∑ckë
->
Àngth
 !3*1024*1024Ë{
	`ab‹t
();}

61 
k
 = 0; k < 
∑ckë
->
Àngth
 ; k++)

63 i‡(
∑ckë
->
d©a
[
k
] !(
uöt8_t
)(k/512))

65 
	`¥ötf
("wêwîênŸábÀÅÿªad back d©®© index %u d©a: %x %x\n", 
k
, 
∑ckë
->
d©a
[k],(
uöt8_t
)(k+
boŸTimes
));

69 
	`¥ötf
("Data checked\n");

71 
	`¥ötf
("Writing back data from myriad... ");

72 
	`fÊush
(
°dout
);

73 
°©us
 = 
	`XLökWrôeD©a
(
°ªamId
, &
∑ckë
->
d©a
[0],Öackë->
Àngth
);

74 i‡(
°©us
 !
X_LINK_SUCCESS
)

76 
	`¥ötf
("myrüd së d©®Áûed: %x\n", 
°©us
);

78 
°©us
 = 
	`XLökRñó£D©a
(
°ªamId
);

79 i‡(
°©us
 !
X_LINK_SUCCESS
)

81 
	`¥ötf
("ªÀa£ d©®Áûed: %x\n", 
°©us
);

83 
	`¥ötf
("Data sent\n");

85 
	`XLökProfSt›
();

86 
	`XLökProfPröt
();

89 
	`¶ìp
(1);

91 
	`¶ìp
(100);

92 
	`exô
(0);

93 
	}
}

	@HowTo/XLink/SingleStream/myriad/leon/rtems_config.h

1 #i‚de‡
_LEON_RTEMS_CONFIG_H_


2 
	#_LEON_RTEMS_CONFIG_H_


	)

4 
	~"ÁèlExãnsi⁄.h
"

5 #ifde‡
MA2X8X


6 
	~"OsDrvInô.h
"

8 
	~"OsDrvC¥.h
"

11 #i‡
deföed
(
__RTEMS__
)

13 #i‡!
deföed
 (
__CONFIG__
)

14 
	#__CONFIG__


	)

17 
	#CONFIGURE_INIT


	)

19 #i‚de‡
RTEMS_POSIX_API


20 
	#RTEMS_POSIX_API


	)

23 
	#CONFIGURE_MICROSECONDS_PER_TICK
 1000

	)

25 
	#CONFIGURE_TICKS_PER_TIMESLICE
 1

	)

27 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

28 
	#CONFIGURE_APPLICATION_NEEDS_CLOCK_DRIVER


	)

29 #i‚de‡
USE_USB_VSC


30 #i‚de‡
USE_LINK_JTAG


31 
	~"usb_u¨t.h
"

35 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

36 
	#CONFIGURE_MINIMUM_TASK_STACK_SIZE
 (8192)

	)

37 
	#CONFIGURE_MAXIMUM_TASKS
 20

	)

38 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 8

	)

39 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 8

	)

40 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 8

	)

41 
	#CONFIGURE_MAXIMUM_POSIX_SEMAPHORES
 8

	)

42 
	#CONFIGURE_MAXIMUM_POSIX_MESSAGE_QUEUES
 8

	)

43 
	#CONFIGURE_MAXIMUM_POSIX_TIMERS
 6

	)

44 
	#CONFIGURE_MAXIMUM_TIMERS
 4

	)

45 
	#CONFIGURE_MAXIMUM_MESSAGE_QUEUES
 1

	)

46 
	#CONFIGURE_MAXIMUM_SEMAPHORES
 32

	)

47 
	#CONFIGURE_MAXIMUM_DRIVERS
 16

	)

48 
	#CONFIGURE_MAXIMUM_DEVICES
 16

	)

49 
	#CONFIGURE_LIBIO_MAXIMUM_FILE_DESCRIPTORS
 30

	)

51 
	#CONFIGURE_POSIX_INIT_TASKS_TABLE


	)

53 
	#CONFIGURE_MAXIMUM_USER_EXTENSIONS
 1

	)

54 
	#CONFIGURE_INITIAL_EXTENSIONS
 { .
Áèl
 = 
F©Æ_exãnsi⁄
 }

	)

56 #ifde‡
MA2X8X


57 
	#CONFIGURE_APPLICATION_EXTRA_DRIVERS
 
OS_DRV_INIT_TABLE_ENTRY


	)

60 *
POSIX_Inô
 (*
¨gs
);

61 
	~<πems/c⁄fdefs.h
>

74 
BSP_SET_CLOCK
(
DEFAULT_OSC_CLOCK_KHZ
,

75 
PLL_DESIRED_FREQ_KHZ
,

78 
DEFAULT_RTEMS_CSS_LOS_CLOCKS
 | 
DEV_CSS_USB
,

79 
DEFAULT_RTEMS_MSS_LRT_CLOCKS
,

80 
DEFAULT_UPA_CLOCKS
,

84 
BSP_SET_L2C_CONFIG
(1, 
DEFAULT_RTEMS_L2C_REPLACEMENT_POLICY
, 
DEFAULT_RTEMS_L2C_LOCKED_WAYS
,
DEFAULT_RTEMS_L2C_MODE
, 0, 0);

86 
BSP_SET_L1C_CONFIG
(1, 1);

	@HowTo/XLink/SingleStream/pc/main.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<uni°d.h
>

4 
	~<as£π.h
>

5 
	~<°rög.h
>

7 
	~"usb_boŸ.h
"

8 
	~"XLök.h
"

9 
	#MAXNAMESIZE
 28

	)

10 
	#DATA_LENGTH
 (3*1024*1024)

	)

11 
uöt8_t
 
	gmsg
[
DATA_LENGTH
];

12 
uöt8_t
 
	gmsg2
[
DATA_LENGTH
];

13 
uöt8_t
 
	gmsg3
[
DATA_LENGTH
];

17 
	$¥ötHñp
()

19 
	`¥ötf
(" ThisÅestÇoÜongerÑequiresányárgs.\n");

20 
	`¥ötf
(" --help or -h - PrintÅhis information\n");

21 
	}
}

24 
	$maö
(
¨gc
, **
¨gv
)

26 
k
;

27 
	`¥ötf
(" XLinkÖcÉxampleápplication usedÅo communicateÅoÅhe Myriad USB device.\n");

28 
ƒArg
=0;ÇrArg<
¨gc
;ÇrArg++)

30 i‡(!
	`°rcmp
(
¨gv
[
ƒArg
],"help")||!strcmp(argv[nrArg],"/?")||!strcmp(argv[nrArg],"--help")||!strcmp(argv[nrArg],"-h")||!strcmp(argv[nrArg],"/h"))

32 
	`¥ötf
(" CommandÜineÖarameters:\n");

33 
	`¥ötHñp
();

34 
	`exô
(0);

37 
«me
[
MAXNAMESIZE
];

38 
rc
 = 
	`XLökGëDevi˚Name
(0, 
«me
, (name));

39 i‡(!
rc
)

41 
	`¥ötf
("Devi˚ FoundÇamê%†\n", 
«me
);

45 
	`¥ötf
("ERROR couldn'àföd devi˚†r¯%d\n", 
rc
);

48 
XLökGlobÆH™dÀr_t
 
gh™dÀr
 = {

49 .
¥Ÿocﬁ
 = 
USB_VSC
,

51 
XLökH™dÀr_t
 
h™dÀr
 = {

52 #i‡
	`deföed
(
USE_USB_VSC
)

53 .
devi˚P©h
 = 
«me
,

54 #ñi‡
	`deföed
(
USE_USB_CDC
)

55 .
devi˚P©h
 = "/dev/ttyACM0",

56 .
devi˚P©h2
 = "/dev/ttyACM1",

57 #ñi‡
	`deföed
(
USE_PCIE
)

58 .
devi˚P©h
 = "/dev/ma2485_0",

61 
°ªamId
;

62 #i‚de‡
BOOT_DISABLE


63 if–
	`XLökBoŸRemŸe
(
«me
, 
MVCMD_NAME
Ë!
X_LINK_SUCCESS
){

65 
	`exô
(1);

68 
	`¥ötf
("Myriad was booted\n");

69 
	`XLökInôülize
(&
gh™dÀr
Ë!
X_LINK_SUCCESS
);

70 
	`¥ötf
("Initialize done\n");

72 
	`XLökC⁄√˘
(&
h™dÀr
Ë!
X_LINK_SUCCESS
);

73 
	`¥ötf
("XLökC⁄√˘ d⁄ê-Üök Id %d\n", 
h™dÀr
.
lökId
);

75 (
°ªamId
 = 
	`XLökO≥nSåóm
(
h™dÀr
.
lökId
, "fú°Såóm", 
DATA_LENGTH
)) == 0xDEADDEAD);

76 
	`¥ötf
("XLökO≥nSåóm d⁄ê- såóm Id %d\n", 
°ªamId
);

78 
	`XLökProfSèπ
();

80 
boŸTimes
 = 100;

82 
°ªamPackëDesc_t
 * 
∑ckë
;

85 
XLökEº‹_t
 
°©us
;

86 
boŸTimes
-- && 
°©us
 !
X_LINK_COMMUNICATION_NOT_OPEN
)

89 
	`¥ötf
("*********************************\n");

90 
	`¥ötf
 ("Remaöög iãøti⁄s: %d \n", 
boŸTimes
);

91 
	`¥ötf
("*********************************\n");

93 
	`¥ötf
("Booting myriad... ");

94 
	`fÊush
(
°dout
);

95 
k
 = 0; k < 
DATA_LENGTH
; k++)

97 
msg
[
k
] = k / 512;

99 
	`¥ötf
("Sending some dataÅo myriad... ");

100 
	`fÊush
(
°dout
);

102 
°©us
 = 
	`XLökWrôeD©a
(
°ªamId
, 
msg
, 
DATA_LENGTH
);

103 i‡(
°©us
 =
X_LINK_SUCCESS
)

108 
	`¥ötf
("myrüd së d©®Áûed: %x\n", 
°©us
);

110 
	`¥ötf
("Data sent\n");

111 
	`¥ötf
("Reading back data from myriad... ");

112 
	`fÊush
(
°dout
);

114 
°©us
 = 
	`XLökRódD©a
(
°ªamId
, &
∑ckë
);

116 i‡(
°©us
 !
X_LINK_SUCCESS
)

118 
	`¥ötf
("myrüd gë d©®Áûed: %x\n", 
°©us
);

120 
	`¥ötf
("DataÑead\n");

121 
	`as£π
(
∑ckë
->
Àngth
 =
DATA_LENGTH
);

122 
k
 = 0; k < 
DATA_LENGTH
; k++)

124 i‡(
∑ckë
->
d©a
[
k
] !(
uöt8_t
)(k /512))

126 
	`¥ötf
("wêwîênŸábÀÅÿªad back d©®© index %d d©a: %x %x\n", 
k
, 
∑ckë
->
d©a
[k],(
uöt8_t
)(k + 
boŸTimes
));

130 
°©us
 = 
	`XLökRñó£D©a
(
°ªamId
);

131 i‡(
°©us
 == 0)

136 
	`¥ötf
("ªÀa£ d©®Áûed: %x\n", 
°©us
);

139 
°©us
 = 
	`XLökRe£tRemŸe
(
h™dÀr
.
lökId
);

140 i‡(
°©us
 == 0)

145 
	`¥ötf
("ª£àÁûed: %x\n", 
°©us
);

147 
	`XLökProfSt›
();

148 
	`XLökProfPröt
();

150 
	`exô
(0);

152 
	}
}

	@HowTo/XLink/ThreaddedMultiStream/myriad/leon/app_config.c

11 
	~"°dio.h
"

12 
	~"≠p_c⁄fig.h
"

13 
	~<DrvLe⁄L2C.h
>

14 
	~<OsDrvC¥.h
>

15 
	~<°dlib.h
>

16 #ifde‡
MA2X8X


17 
	~"OsDrvInô.h
"

27 #ifde‡
MA2X8X


29 
OsDrvC¥AuxClockC⁄fig
 
	gauxClkC⁄fig
[] =

31 {
OS_DRV_CPR_DEV_CSS_AUX_USB_PHY_REF_ALT
, 
OS_DRV_CPR_CLK_PLL0
, 1, 25},

32 {
OS_DRV_CPR_DEV_CSS_AUX_USB_CTRL_SUSPEND
, 
OS_DRV_CPR_CLK_PLL0
, 1, 10},

33 {
OS_DRV_CPR_DEV_CSS_AUX_USB20_REF
, 
OS_DRV_CPR_CLK_PLL0
, 1, 50},

34 {
OS_DRV_CPR_DEV_CSS_AUX_USB_CTRL_REF
, 
OS_DRV_CPR_CLK_PLL0
, 1, 600},

35 {
OS_DRV_CPR_DEV_CSS_AUX_USB_CTRL
, 
OS_DRV_CPR_CLK_PLL0
, 1, 2},

36 
OS_DRV_CPR_AUX_ARRAY_TERMINATOR


39 
OsDrvC¥C⁄fig
 
	gc⁄fig
 = {

40 .
ªf0InClk
 = 
DEFAULT_OSC_CLOCK_KHZ
,

41 .
	gauxCfg
 = 
auxClkC⁄fig


44 
OS_DRV_INIT_CPR_CFG_DEFINE
(&
c⁄fig
);

54 
	$öôClocksAndMem‹y
()

56 
s32
 
sc
 = 0;

58 #i‚de‡
MA2X8X


59 
tyAuxClkDividîCfg
 
auxClk
[] =

61 {
AUX_CLK_MASK_USB_CTRL_SUSPEND_CLK
, 
CLK_SRC_PLL0
, 1, 30},

65 
sc
 = 
	`OsDrvC¥Inô
();

66 i‡(
sc
 !
RTEMS_SUCCESSFUL
)

67  
sc
;

68 
sc
 = 
	`OsDrvC¥O≥n
();

69 i‡(
sc
 !
RTEMS_SUCCESSFUL
)

70  
sc
;

71 
sc
 = 
	`OsDrvC¥AuxClockAºayC⁄fig
(
auxClk
);

73 
πems_°©us_code
 
°©us
 = 
	`OsDrvC¥Tu∫OnI¶™d
(
OS_DRV_CPR_PWR_ISLAND_USB
);

74 i‡(
°©us
){

75 
	`¥ötf
("exiting\n");

76 
	`exô
(
°©us
);

80  
sc
;

81 
	}
}

	@HowTo/XLink/ThreaddedMultiStream/myriad/leon/app_config.h

9 #i‚de‡
_APP_CONFIG_H_


10 
	#_APP_CONFIG_H_


	)

12 
	~"ÁèlExãnsi⁄.h
"

13 
	~"mv_ty≥s.h
"

16 
	#PLL_DESIRED_FREQ_KHZ
 600000

	)

19 #ifde‡
MA2X8X


20 
	#DEFAULT_OSC_CLOCK_KHZ
 24000

	)

22 
	#DEFAULT_OSC_CLOCK_KHZ
 12000

	)

25 
	#L2CACHE_NORMAL_MODE
 (0x6)

26 
	#L2CACHE_CFG
 (
L2CACHE_NORMAL_MODE
)

	)

28 
öôClocksAndMem‹y
();

	@HowTo/XLink/ThreaddedMultiStream/myriad/leon/main.c

1 
	~<°dlib.h
>

2 
	~<°dio.h
>

3 
	~<as£π.h
>

5 
	~<πems.h
>

6 
	~<πems/b•Io.h
>

7 
	~"≠p_c⁄fig.h
"

8 
	~"πems_c⁄fig.h
"

10 
	~"mv_ty≥s.h
"

11 
	~"../../sh¨ed/comm⁄Funcs.h
"

12 
	~"XLök.h
"

15 * 
	$Func
(* 
a
) {

16 
°ªamId
 = *((*)
a
);

17 
i
 = 0; i<
NUM_MESSAGES
; i++) {

18 
	`ª˚iveAndRëu∫Mesßges
(*((*)
a
));

20 
XLökEº‹_t
 
°©us
 = 
	`XLökClo£Såóm
(
°ªamId
);

21 i‡(
°©us
 !
X_LINK_SUCCESS
)

23 
	`¥ötf
("˛o£ såóm faûed: %x\n", 
°©us
);

25  
NULL
;

26 
	}
}

28 *
	$POSIX_Inô
 (*
¨gs
)

30 
	`UNUSED
(
¨gs
);

32 i‡(
	`öôClocksAndMem‹y
()) {

33 
	`¥ötf
("FailedÅo initialize clocks.\n");

38 
XLökGlobÆH™dÀr_t
 
gh™dÀr
 = {

39 .
¥Ÿocﬁ
 = 
USB_VSC


41 
XLökEº‹_t
 
°©us
 = 
X_LINK_COMMUNICATION_NOT_OPEN
;

44 
°©us
 !
X_LINK_SUCCESS
) {

45 
°©us
 = 
	`XLökInôülize
(&
gh™dÀr
);

49 
°ªamId_t
 
°ªamId
[
NUM_STREAMS
];

50 (
°ªamId
[0] = 
	`XLökO≥nSåóm
(0, "fú°Såóm", 
DATA_LENGTH
)) == 0xDEADDEAD);

51 (
°ªamId
[1] = 
	`XLökO≥nSåóm
(0, "£c⁄dSåóm", 
DATA_LENGTH
)) == 0xDEADDEAD);

54 
±hªad_t
 
tid
[
NUM_STREAMS
];

55 
±hªad_©å_t
 
©å
;

56 
sc
;

58 
i
 =0; i<
NUM_STREAMS
; i++) {

59 if(
	`±hªad_©å_öô
(&
©å
) !=0) {

60 
	`¥ötf
("pthread_attr_initÉrror\n");

62 if(
	`±hªad_©å_£töhîôsched
(&
©å
, 
PTHREAD_EXPLICIT_SCHED
) != 0) {

63 
	`¥ötf
("pthread_attr_setinheritschedÉrror\n");

65 if(
	`±hªad_©å_£tschedpﬁicy
(&
©å
, 
SCHED_RR
) != 0) {

66 
	`¥ötf
("pthread_attr_setschedpolicyÉrror\n");

68 
sc
=
	`±hªad_¸óã
(&
tid
[
i
], &
©å
, &
Func
, &
°ªamId
[i]);

69 i‡(
sc
) {

70 
	`¥ötf
("Control Thread creation failed\n");

72 
sched_∑øm
 
sched∑øm
;

73 
sched∑øm
.
sched_¥i‹ôy
 = 200;

74 if(
	`±hªad_£tsched∑øm
(
tid
[
i
], 
SCHED_RR
, &
sched∑øm
) != 0) {

75 
	`¥ötf
("pthread_attr_setschedpolicyÉrror\n");

79 
	`¶ìp
(1);

81 
	`¶ìp
(100);

82 
	`exô
(0);

83 
	}
}

	@HowTo/XLink/ThreaddedMultiStream/myriad/leon/rtems_config.h

1 #i‚de‡
_LEON_RTEMS_CONFIG_H_


2 
	#_LEON_RTEMS_CONFIG_H_


	)

4 
	~"ÁèlExãnsi⁄.h
"

5 #ifde‡
MA2X8X


6 
	~"OsDrvInô.h
"

8 
	~"OsDrvC¥.h
"

11 #i‡
deföed
(
__RTEMS__
)

13 #i‡!
deföed
 (
__CONFIG__
)

14 
	#__CONFIG__


	)

17 
	#CONFIGURE_INIT


	)

19 #i‚de‡
RTEMS_POSIX_API


20 
	#RTEMS_POSIX_API


	)

23 
	#CONFIGURE_MICROSECONDS_PER_TICK
 1000

	)

25 
	#CONFIGURE_TICKS_PER_TIMESLICE
 1

	)

27 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

28 
	#CONFIGURE_APPLICATION_NEEDS_CLOCK_DRIVER


	)

29 #i‚de‡
USE_USB_VSC


30 #i‚de‡
USE_LINK_JTAG


31 
	~"usb_u¨t.h
"

35 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

36 
	#CONFIGURE_MINIMUM_TASK_STACK_SIZE
 (8192)

	)

37 
	#CONFIGURE_MAXIMUM_TASKS
 40

	)

38 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 10

	)

39 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 8

	)

40 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 8

	)

41 
	#CONFIGURE_MAXIMUM_POSIX_SEMAPHORES
 16

	)

42 
	#CONFIGURE_MAXIMUM_POSIX_MESSAGE_QUEUES
 8

	)

43 
	#CONFIGURE_MAXIMUM_POSIX_TIMERS
 6

	)

44 
	#CONFIGURE_MAXIMUM_TIMERS
 4

	)

45 
	#CONFIGURE_MAXIMUM_MESSAGE_QUEUES
 1

	)

46 
	#CONFIGURE_MAXIMUM_SEMAPHORES
 32

	)

47 
	#CONFIGURE_MAXIMUM_DRIVERS
 16

	)

48 
	#CONFIGURE_MAXIMUM_DEVICES
 16

	)

49 
	#CONFIGURE_LIBIO_MAXIMUM_FILE_DESCRIPTORS
 30

	)

51 
	#CONFIGURE_POSIX_INIT_TASKS_TABLE


	)

53 
	#CONFIGURE_MAXIMUM_USER_EXTENSIONS
 1

	)

54 
	#CONFIGURE_INITIAL_EXTENSIONS
 { .
Áèl
 = 
F©Æ_exãnsi⁄
 }

	)

56 #ifde‡
MA2X8X


57 
	#CONFIGURE_APPLICATION_EXTRA_DRIVERS
 
OS_DRV_INIT_TABLE_ENTRY


	)

60 *
POSIX_Inô
 (*
¨gs
);

61 
	~<πems/c⁄fdefs.h
>

74 
BSP_SET_CLOCK
(
DEFAULT_OSC_CLOCK_KHZ
,

75 
PLL_DESIRED_FREQ_KHZ
,

78 
DEFAULT_RTEMS_CSS_LOS_CLOCKS
 | 
DEV_CSS_USB
,

79 
DEFAULT_RTEMS_MSS_LRT_CLOCKS
,

80 
DEFAULT_UPA_CLOCKS
,

84 
BSP_SET_L2C_CONFIG
(1, 
DEFAULT_RTEMS_L2C_REPLACEMENT_POLICY
, 
DEFAULT_RTEMS_L2C_LOCKED_WAYS
,
DEFAULT_RTEMS_L2C_MODE
, 0, 0);

86 
BSP_SET_L1C_CONFIG
(1, 1);

	@HowTo/XLink/ThreaddedMultiStream/pc/main.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°dboﬁ.h
>

4 
	~<uni°d.h
>

5 
	~<as£π.h
>

6 
	~"±hªad.h
"

8 
	~"XLök.h
"

9 
	~"usb_boŸ.h
"

10 
	~"comm⁄Funcs.h
"

11 
	#MAXNAMESIZE
 28

	)

13 
	$maö
()

15 
«me
[
MAXNAMESIZE
];

16 
rc
 = 
	`XLökGëDevi˚Name
(0, 
«me
, (name));

17 i‡(!
rc
)

19 
	`¥ötf
("Devi˚ FoundÇamê%†\n", 
«me
);

23 
	`¥ötf
("ERROR couldn'àföd devi˚†r¯%d\n", 
rc
);

24 
	`exô
(1);

26 
XLökGlobÆH™dÀr_t
 
gh™dÀr
 = {

27 .
¥Ÿocﬁ
 = 
USB_VSC


29 
XLökH™dÀr_t
 
h™dÀr
 = {

30 #ifde‡
USE_USB_VSC


31 .
devi˚P©h
 = 
«me
,

33 .
devi˚P©h
 = "/dev/ttyACM0",

34 .
devi˚P©h2
 = "/dev/ttyACM1",

39 if(
	`XLökBoŸRemŸe
(
«me
, 
MVCMD_NAME
Ë!
X_LINK_SUCCESS
){

41 
	`exô
(1);

43 
	`¥ötf
("Myriad was booted\n");

46  
	`XLökInôülize
(&
gh™dÀr
Ë!
X_LINK_SUCCESS
);

47 
	`¥ötf
("Initialize done\n");

49 
	`XLökC⁄√˘
(&
h™dÀr
Ë!
X_LINK_SUCCESS
);

50 
	`¥ötf
("XLökC⁄√˘ d⁄ê-Üök Id %d\n", 
h™dÀr
.
lökId
);

54 
°ªamId_t
 
°ªamId
[
NUM_STREAMS
];

55 (
°ªamId
[0] = 
	`XLökO≥nSåóm
(
h™dÀr
.
lökId
, "fú°Såóm",
DATA_LENGTH
)) == 0xDEADDEAD);

56 (
°ªamId
[1] = 
	`XLökO≥nSåóm
(
h™dÀr
.
lökId
, "£c⁄dSåóm",
DATA_LENGTH
)) == 0xDEADDEAD);

57 
	`as£π
(
NUM_STREAMS
 == 2);

60 
±hªad_©å_t
 
©å
;

61 
sc
;

62 
±hªad_t
 
tid
[
NUM_STREAMS
];

63 
boﬁ
 
∑ss
[
NUM_STREAMS
];

66 
i
 = 0; i < 
NUM_STREAMS
; i++){

67 if(
	`±hªad_©å_öô
(&
©å
) !=0) {

68 
	`¥ötf
("pthread_attr_initÉrror\n");

70 
sc
=
	`±hªad_¸óã
(&
tid
[
i
], &
©å
, &
£ndAndRe˚iveMesßges
, (*)&
°ªamId
[i]);

71 i‡(
sc
) {

72 
	`¥ötf
("Control Thread creation failed\n");

76 
i
 = 0; i< 
NUM_STREAMS
; i++) {

77 
	`±hªad_joö
(
tid
[
i
], (**)&
∑ss
[i]);

80 
XLökEº‹_t
 
°©us
;

81 
i
 = 0; i< 
NUM_STREAMS
; i++) {

82 
°©us
 = 
	`XLökClo£Såóm
(
°ªamId
[
i
]);

83 i‡(
°©us
 !
X_LINK_SUCCESS
)

85 
	`¥ötf
("˛o£ såóm faûed: %x\n", 
°©us
);

89 
°©us
 = 
	`XLökRe£tRemŸe
(
h™dÀr
.
lökId
);

90 i‡(
°©us
 !
X_LINK_SUCCESS
)

92 
	`¥ötf
("ª£àÁûed: %x\n", 
°©us
);

96 
boﬁ
 
ÆlPas£d
 = 
∑ss
[0];

97 
i
 =0; i<
NUM_STREAMS
; i++){

98 
ÆlPas£d
 =áŒPas£d && 
∑ss
[
i
];

100 if(
ÆlPas£d
) {

101 
	`¥ötf
("TEST PASSED! :)\n");

103 
	`¥ötf
("TEST FAILED! :(\n");

105 
	}
}

	@HowTo/XLink/ThreaddedMultiStream/shared/commonFuncs.c

1 
	~<°dlib.h
>

2 
	~<°dio.h
>

3 
	~<as£π.h
>

4 
	~<uni°d.h
>

5 
	~<time.h
>

6 
	~<°dboﬁ.h
>

7 
	~<±hªad.h
>

9 
	~"XLök.h
"

10 
	~"comm⁄Funcs.h
"

12 
	#is_Æig√d
(
POINTER
, 
BYTE_COUNT
) \

13 (((
uöçå_t
)(c⁄° *)(
POINTER
)Ë% (
BYTE_COUNT
Ë=0)

	)

15 
uöt8_t
 
	gbuf„r1
[
DATA_LENGTH
];

16 
	gmsgIdx
[
NUM_MESSAGES
+1];

17 
__©åibuã
((
£˘i⁄
(".ddr.bss"))Ë
uöt8_t
 
	gmesßgeRe˚ivedBack
[
NUM_STREAMS
][
NUM_MESSAGES
];

19 
	s£ndögMsg
 {

20 
	m°ªamId
;

21 
	mmesßge_no
;

22 }
	t£ndögMsg
;

24 * 
	$£ndMesßges
(* 
s
) {

26 
°ªamId
 = ((
£ndögMsg
*)
s
)->streamId;

27 
mesßge_no
 = ((
£ndögMsg
*)
s
)->message_no;

28 
j
 = 
mesßge_no
; j<
NUM_MESSAGES
; j+=
NUM_THREADS_PER_STREAM
) {

30 
	`u¶ìp
((Ë((()
	`ønd
()/
RAND_MAX
) * 50000));

32 
	`¥ötf
("Sending some data...\n");

33 
	`fÊush
(
°dout
);

34 
buf„r1
[
msgIdx
[
j
]] = j;

35 
XLökEº‹_t
 
°©us
 = 
	`XLökWrôeD©a
(
°ªamId
, &
buf„r1
[
msgIdx
[
j
]], msgIdx[j+1]-msgIdx[j]);

36 
	`¥ötf
("Såóm %d: SENDING %d\n", 
°ªamId
, 
j
);

37 i‡(
°©us
 =
X_LINK_SUCCESS
)

39 
	`¥ötf
("Data sent\n");

43 
	`¥ötf
("£àd©®Áûed: %x\n", 
°©us
);

46  
NULL
;

47 
	}
}

49 * 
	$ª˚iveMesßges
(* 
sId
) {

50 
°ªamId
 = *((*)
sId
);

51 
°ªamPackëDesc_t
* 
∑ckë
;

52 
boﬁ
 
ÆlMesßgesRecd
 = 
Ál£
, 
ã°Pas£d
 = 
åue
;

53 
ã°Pas£d
 && !
ÆlMesßgesRecd
) {

55 
	`¥ötf
("Reading back data... ");

56 
	`fÊush
(
°dout
);

57 
XLökEº‹_t
 
°©us
 = 
	`XLökRódD©a
(
°ªamId
, &
∑ckë
);

58 i‡(
°©us
 =
X_LINK_SUCCESS
)

60 
	`¥ötf
("DataÑead\n");

64 
	`¥ötf
("gë d©®Áûed: %x\n", 
°©us
);

65 
ã°Pas£d
 = 
Ál£
;

67 
i
;

69 if(
∑ckë
->
Àngth
>0) {

70 
i
 = 
∑ckë
->
d©a
[0];

71 
	`¥ötf
("Såóm %d: READING msg %d\n", 
°ªamId
, 
i
);

72 i‡(
∑ckë
->
Àngth
 !
msgIdx
[
i
+1]-msgIdx[i]){

73 
	`¥ötf
("Eº‹: Såóm[%d] PackëÜígth wr⁄g\n", 
°ªamId
);

74 
ã°Pas£d
 = 
Ál£
;

76 i‡(!
	`is_Æig√d
(
∑ckë
->
d©a
, 64)) {

77 
	`¥ötf
("Eº‹: Såóm[%d] D©®nŸ 64 byãálig√d\n", 
°ªamId
);

78 
ã°Pas£d
 = 
Ál£
;

80 
k
 = 0; k < 
∑ckë
->
Àngth
 ; k++)

82 i‡(
∑ckë
->
d©a
[
k
] !
buf„r1
[
msgIdx
[
i
]+k])

84 
	`¥ötf
("Eº‹: Såóm[%d] VÆuê© index %u i†wr⁄g: %x\n", 
°ªamId
, 
k
, 
∑ckë
->
d©a
[k]);

85 
ã°Pas£d
 = 
Ál£
;

89 
mesßgeRe˚ivedBack
[
°ªamId
][
i
] = 1;

92 
	`¥ötf
("ThisÅest can'tÖass ifÅhereáre messages of size 0\n");

93 
ã°Pas£d
 = 
Ál£
;

94 
i
 = -1;

98 
°©us
 = 
	`XLökRñó£D©a
(
°ªamId
);

99 i‡(
°©us
 != 0)

101 
	`¥ötf
("Eº‹: Såóm[%d]Ññó£ d©®Áûed: %x\n", 
°ªamId
, 
°©us
);

102 
ã°Pas£d
 = 
Ál£
;

105 
a
 =0;

106 
j
 =0; j<
NUM_MESSAGES
; j++){

107 
a
+=
mesßgeRe˚ivedBack
[
°ªamId
][
j
];

109 if(
a
==
NUM_MESSAGES
){

110 
ÆlMesßgesRecd
 = 
åue
;

113  (
ã°Pas£d
 && 
ÆlMesßgesRecd
Ë? (*Èe°Pas£d : 
NULL
;

114 
	}
}

116 * 
	$£ndAndRe˚iveMesßges
(* 
sId
) {

117 * 
°ªamId
 = (*)
sId
;

119 
	`§™d
(
	`time
(
NULL
));

120 
i
 = 0 ; i< 
DATA_LENGTH
; i++){

121 
buf„r1
[
i
]=
	`ønd
();

123 
uöt32_t
 
°¨tIdx
[10] = {1 , 43, 80, 224, 271, 512, 768, 944, 1025, 2048};

125 
	`as£π
(
NUM_MESSAGES
 < 256);

126 
	`as£π
(
NUM_MESSAGES
 % 10 == 0);

128 
	`as£π
((
°¨tIdx
[9] * (1+ (
NUM_MESSAGES
 / 10)Ë+ 2048Ë< 
DATA_LENGTH
);

133 
i
 = 0; i < 
NUM_MESSAGES
; i++) {

134 
msgIdx
[
i
] = 
°¨tIdx
[i%10] + (startIdx[9] * (i/10));

136 
msgIdx
[
NUM_MESSAGES
] = msgIdx[NUM_MESSAGES-1] + 2048;

138 
±hªad_©å_t
 
©å
;

139 
sc
;

142 
±hªad_t
 
ª˚ivî
;

144 if(
	`±hªad_©å_öô
(&
©å
) !=0) {

145 
	`¥ötf
("pthread_attr_initÉrror\n");

147 
sc
=
	`±hªad_¸óã
(&
ª˚ivî
, &
©å
, &
ª˚iveMesßges
, (*)
°ªamId
);

148 i‡(
sc
) {

149 
	`¥ötf
("Control Thread creation failed\n");

153 
±hªad_t
 
£ndîs
[
NUM_THREADS_PER_STREAM
];

154 
ªtu∫VÆ
;

155 
£ndögMsg
 
a
[
NUM_THREADS_PER_STREAM
];

156 
i
 = 0; i<
NUM_THREADS_PER_STREAM
; i++) {

158 
a
[
i
].
°ªamId
 = *streamId;

159 
a
[
i
].
mesßge_no
 = i;

161 if(
	`±hªad_©å_öô
(&
©å
) !=0) {

162 
	`¥ötf
("pthread_attr_initÉrror\n");

164 
sc
=
	`±hªad_¸óã
(&
£ndîs
[
i
], &
©å
, &
£ndMesßges
, &
a
[i]);

165 i‡(
sc
) {

166 
	`¥ötf
("Control Thread creation failed\n");

169 
	`¶ìp
(1);

170 
i
 = 0; i< 
NUM_THREADS_PER_STREAM
; i++) {

171 
	`±hªad_joö
(
£ndîs
[
i
], 
NULL
);

173 
	`±hªad_joö
(
ª˚ivî
, (**)&
ªtu∫VÆ
);

175  (*)
ªtu∫VÆ
;

176 
	}
}

178 
	$ª˚iveAndRëu∫Mesßges
(
°ªamId
){

179 
	`¥ötf
("Ródög D©®‰om ... %d\n", 
°ªamId
);

180 
	`fÊush
(
°dout
);

181 
°ªamPackëDesc_t
* 
∑ckë
;

182 
XLökEº‹_t
 
°©us
 = 
	`XLökRódD©a
(
°ªamId
, &
∑ckë
);

183 i‡(
°©us
 !
X_LINK_SUCCESS
)

185 
	`¥ötf
("Gë d©®Áûed: %x\n", 
°©us
);

187 
	`¥ötf
("DataÑead\n");

189 
	`¥ötf
("Writing back data... ");

190 
	`fÊush
(
°dout
);

191 
°©us
 = 
	`XLökWrôeD©a
(
°ªamId
, &
∑ckë
->
d©a
[0],Öackë->
Àngth
);

192 i‡(
°©us
 !
X_LINK_SUCCESS
)

194 
	`¥ötf
("£àd©®Áûed: %x\n", 
°©us
);

196 
	`¥ötf
("Data sent\n");

199 
°©us
 = 
	`XLökRñó£D©a
(
°ªamId
);

200 i‡(
°©us
 !
X_LINK_SUCCESS
)

202 
	`¥ötf
("ªÀa£ d©®Áûed: %x\n", 
°©us
);

204 
	}
}

	@HowTo/XLink/ThreaddedMultiStream/shared/commonFuncs.h

1 #i‚de‡
COMMON_FUNCS_H


2 
	#COMMON_FUNCS_H


	)

4 
	#DATA_LENGTH
 (3*1024*1024)

	)

5 
	#NUM_MESSAGES
 100

	)

6 
	#NUM_STREAMS
 2

	)

7 
	#NUM_THREADS_PER_STREAM
 2

	)

8 * 
£ndAndRe˚iveMesßges
(* 
°ªamId
);

10 
ª˚iveAndRëu∫Mesßges
(
°ªamId
);

	@HowTo/XLink/ThreaddedSingleStream/myriad/leon/app_config.c

11 
	~"°dio.h
"

12 
	~"≠p_c⁄fig.h
"

13 
	~<DrvLe⁄L2C.h
>

14 
	~<OsDrvC¥.h
>

15 
	~<°dlib.h
>

16 #ifde‡
MA2X8X


17 
	~"OsDrvInô.h
"

27 #ifde‡
MA2X8X


29 
OsDrvC¥AuxClockC⁄fig
 
	gauxClkC⁄fig
[] =

31 {
OS_DRV_CPR_DEV_CSS_AUX_USB_PHY_REF_ALT
, 
OS_DRV_CPR_CLK_PLL0
, 1, 25},

32 {
OS_DRV_CPR_DEV_CSS_AUX_USB_CTRL_SUSPEND
, 
OS_DRV_CPR_CLK_PLL0
, 1, 10},

33 {
OS_DRV_CPR_DEV_CSS_AUX_USB20_REF
, 
OS_DRV_CPR_CLK_PLL0
, 1, 50},

34 {
OS_DRV_CPR_DEV_CSS_AUX_USB_CTRL_REF
, 
OS_DRV_CPR_CLK_PLL0
, 1, 600},

35 {
OS_DRV_CPR_DEV_CSS_AUX_USB_CTRL
, 
OS_DRV_CPR_CLK_PLL0
, 1, 2},

36 
OS_DRV_CPR_AUX_ARRAY_TERMINATOR


39 
OsDrvC¥C⁄fig
 
	gc⁄fig
 = {

40 .
ªf0InClk
 = 
DEFAULT_OSC_CLOCK_KHZ
,

41 .
	gauxCfg
 = 
auxClkC⁄fig


44 
OS_DRV_INIT_CPR_CFG_DEFINE
(&
c⁄fig
);

54 
	$öôClocksAndMem‹y
()

56 
s32
 
sc
 = 0;

58 #i‚de‡
MA2X8X


59 
tyAuxClkDividîCfg
 
auxClk
[] =

61 {
AUX_CLK_MASK_USB_CTRL_SUSPEND_CLK
, 
CLK_SRC_PLL0
, 1, 30},

65 
sc
 = 
	`OsDrvC¥Inô
();

66 i‡(
sc
 !
RTEMS_SUCCESSFUL
)

67  
sc
;

68 
sc
 = 
	`OsDrvC¥O≥n
();

69 i‡(
sc
 !
RTEMS_SUCCESSFUL
)

70  
sc
;

71 
sc
 = 
	`OsDrvC¥AuxClockAºayC⁄fig
(
auxClk
);

73 
πems_°©us_code
 
°©us
 = 
	`OsDrvC¥Tu∫OnI¶™d
(
OS_DRV_CPR_PWR_ISLAND_USB
);

74 i‡(
°©us
){

75 
	`¥ötf
("exiting\n");

76 
	`exô
(
°©us
);

80  
sc
;

81 
	}
}

	@HowTo/XLink/ThreaddedSingleStream/myriad/leon/app_config.h

9 #i‚de‡
_APP_CONFIG_H_


10 
	#_APP_CONFIG_H_


	)

12 
	~"ÁèlExãnsi⁄.h
"

13 
	~"mv_ty≥s.h
"

16 
	#PLL_DESIRED_FREQ_KHZ
 600000

	)

19 #ifde‡
MA2X8X


20 
	#DEFAULT_OSC_CLOCK_KHZ
 24000

	)

22 
	#DEFAULT_OSC_CLOCK_KHZ
 12000

	)

25 
	#L2CACHE_NORMAL_MODE
 (0x6)

26 
	#L2CACHE_CFG
 (
L2CACHE_NORMAL_MODE
)

	)

28 
öôClocksAndMem‹y
();

	@HowTo/XLink/ThreaddedSingleStream/myriad/leon/main.c

1 
	~<°dlib.h
>

2 
	~<°dio.h
>

3 
	~<as£π.h
>

5 
	~<πems.h
>

6 
	~<πems/b•Io.h
>

8 
	~<uni°d.h
>

9 
	~<sys/ty≥s.h
>

10 
	~<sys/°©.h
>

11 
	~<sys/io˘l.h
>

12 
	~<f˙é.h
>

14 
	~"≠p_c⁄fig.h
"

15 
	~"πems_c⁄fig.h
"

17 
	~"mv_ty≥s.h
"

18 
	~"../../sh¨ed/comm⁄Funcs.h
"

19 
	~"XLök.h
"

22 * 
	$Func
(* 
a
) {

23 
i
 = 0; i<
NUM_MESSAGES
; i++) {

24 
	`ª˚iveAndRëu∫Mesßges
(*((*)
a
));

26  
NULL
;

27 
	}
}

29 *
	$POSIX_Inô
 (*
¨gs
)

31 
	`UNUSED
(
¨gs
);

33 i‡(
	`öôClocksAndMem‹y
()) {

34 
	`¥ötf
("FailedÅo initialize clocks.\n");

37 
±hªad_©å_t
 
©å
;

38 
sc
;

39 
±hªad_t
 
tid
;

42 
XLökGlobÆH™dÀr_t
 
gh™dÀr
 = {

43 .
¥Ÿocﬁ
 = 
USB_VSC


45 
XLökEº‹_t
 
°©us
 = 
X_LINK_COMMUNICATION_NOT_OPEN
;

46  
°©us
 !
X_LINK_SUCCESS
) {

47 
°©us
 = 
	`XLökInôülize
(&
gh™dÀr
);

50 
°ªamId
 = 
	`XLökO≥nSåóm
(0, "fú°Såóm",
DATA_LENGTH
);

53 if(
	`±hªad_©å_öô
(&
©å
) != 0) {

54 
	`¥ötf
("pthread_attr_initÉrror\n");

56 if(
	`±hªad_©å_£töhîôsched
(&
©å
, 
PTHREAD_EXPLICIT_SCHED
) != 0) {

57 
	`¥ötf
("pthread_attr_setinheritschedÉrror\n");

59 if(
	`±hªad_©å_£tschedpﬁicy
(&
©å
, 
SCHED_RR
) != 0) {

60 
	`¥ötf
("pthread_attr_setschedpolicyÉrror\n");

63 
sc
=
	`±hªad_¸óã
(&
tid
, &
©å
, &
Func
, &
°ªamId
);

64 i‡(
sc
) {

65 
	`¥ötf
("Control Thread creation failed\n");

67 
sched_∑øm
 
sched∑øm
;

68 
sched∑øm
.
sched_¥i‹ôy
 = 200;

69 if(
	`±hªad_£tsched∑øm
(
tid
, 
SCHED_RR
, &
sched∑øm
) != 0) {

70 
	`¥ötf
("pthread_attr_setschedpolicyÉrror\n");

73 
	`¶ìp
(1);

75 
	`¶ìp
(100);

76 
	`exô
(0);

77 
	}
}

80 
	$F©Æ_exãnsi⁄
(

81 
I¡î«l_îr‹s_Sour˚
 
the_sour˚
,

82 
boﬁ
 
is_öã∫Æ
,

83 
I¡î«l_îr‹s_t
 
the_îr‹


86 if(
the_îr‹
)

87 
	`¥ötk
("%†: %†\n", 
__func__
, 
	`πems_Áèl_sour˚_ãxt
(
the_sour˚
));

89 
the_sour˚
)

91 
INTERNAL_ERROR_CORE
:

92 
	`¥ötk
(" : %†\n", 
	`πems_öã∫Æ_îr‹_ãxt
(
the_îr‹
));

94 
RTEMS_FATAL_SOURCE_EXIT
:

95 if(
the_îr‹
)

96 
	`¥ötk
("\nExôed wôhÉº‹ codê%d\n", 
the_îr‹
);

98 
RTEMS_FATAL_SOURCE_ASSERT
:

99 
	`¥ötk
("\n%s : %d in %s \n",

100 ((
πems_as£π_c⁄ãxt
 *)
the_îr‹
)->
fûe
,

101 ((
πems_as£π_c⁄ãxt
 *)
the_îr‹
)->
löe
,

102 ((
πems_as£π_c⁄ãxt
 *)
the_îr‹
)->
fun˘i⁄
);

104 
RTEMS_FATAL_SOURCE_EXCEPTION
:

105 
	`πems_ex˚±i⁄_‰ame_¥öt
((c⁄° 
πems_ex˚±i⁄_‰ame
 *Ë
the_îr‹
);

108 
	`¥ötk
 ("\nSource %d Internal %d Error %d 0x%X:\n",

109 
the_sour˚
, 
is_öã∫Æ
, 
the_îr‹
,Åhe_error);

112 
	}
}

	@HowTo/XLink/ThreaddedSingleStream/myriad/leon/rtems_config.h

1 #i‚de‡
_LEON_RTEMS_CONFIG_H_


2 
	#_LEON_RTEMS_CONFIG_H_


	)

4 
	~"ÁèlExãnsi⁄.h
"

5 #ifde‡
MA2X8X


6 
	~"OsDrvInô.h
"

8 
	~"OsDrvC¥.h
"

11 #i‡
deföed
(
__RTEMS__
)

13 #i‡!
deföed
 (
__CONFIG__
)

14 
	#__CONFIG__


	)

17 
	#CONFIGURE_INIT


	)

19 #i‚de‡
RTEMS_POSIX_API


20 
	#RTEMS_POSIX_API


	)

23 
	#CONFIGURE_MICROSECONDS_PER_TICK
 1000

	)

25 
	#CONFIGURE_TICKS_PER_TIMESLICE
 1

	)

27 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

28 
	#CONFIGURE_APPLICATION_NEEDS_CLOCK_DRIVER


	)

29 #i‚de‡
USE_USB_VSC


30 #i‚de‡
USE_LINK_JTAG


31 
	~"usb_u¨t.h
"

35 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

36 
	#CONFIGURE_MINIMUM_TASK_STACK_SIZE
 (8192)

	)

37 
	#CONFIGURE_MAXIMUM_TASKS
 40

	)

38 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 10

	)

39 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 8

	)

40 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 8

	)

41 
	#CONFIGURE_MAXIMUM_POSIX_SEMAPHORES
 8

	)

42 
	#CONFIGURE_MAXIMUM_POSIX_MESSAGE_QUEUES
 8

	)

43 
	#CONFIGURE_MAXIMUM_POSIX_TIMERS
 6

	)

44 
	#CONFIGURE_MAXIMUM_TIMERS
 4

	)

45 
	#CONFIGURE_MAXIMUM_MESSAGE_QUEUES
 1

	)

46 
	#CONFIGURE_MAXIMUM_SEMAPHORES
 32

	)

47 
	#CONFIGURE_MAXIMUM_DRIVERS
 16

	)

48 
	#CONFIGURE_MAXIMUM_DEVICES
 16

	)

49 
	#CONFIGURE_LIBIO_MAXIMUM_FILE_DESCRIPTORS
 30

	)

51 
	#CONFIGURE_POSIX_INIT_TASKS_TABLE


	)

53 
	#CONFIGURE_MAXIMUM_USER_EXTENSIONS
 1

	)

54 
	#CONFIGURE_INITIAL_EXTENSIONS
 { .
Áèl
 = 
F©Æ_exãnsi⁄
 }

	)

56 #ifde‡
MA2X8X


57 
	#CONFIGURE_APPLICATION_EXTRA_DRIVERS
 
OS_DRV_INIT_TABLE_ENTRY


	)

60 *
POSIX_Inô
 (*
¨gs
);

61 
	~<πems/c⁄fdefs.h
>

74 
BSP_SET_CLOCK
(
DEFAULT_OSC_CLOCK_KHZ
,

75 
PLL_DESIRED_FREQ_KHZ
,

78 
DEFAULT_RTEMS_CSS_LOS_CLOCKS
 | 
DEV_CSS_USB
,

79 
DEFAULT_RTEMS_MSS_LRT_CLOCKS
,

80 
DEFAULT_UPA_CLOCKS
,

84 
BSP_SET_L2C_CONFIG
(1, 
DEFAULT_RTEMS_L2C_REPLACEMENT_POLICY
, 
DEFAULT_RTEMS_L2C_LOCKED_WAYS
,
DEFAULT_RTEMS_L2C_MODE
, 0, 0);

86 
BSP_SET_L1C_CONFIG
(1, 1);

	@HowTo/XLink/ThreaddedSingleStream/pc/main.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°dboﬁ.h
>

4 
	~<uni°d.h
>

5 
	~<as£π.h
>

7 
	~"XLök.h
"

8 
	~"usb_boŸ.h
"

9 
	~"comm⁄Funcs.h
"

10 
	#MAXNAMESIZE
 28

	)

11 
	$maö
()

13 
«me
[
MAXNAMESIZE
];

14 
rc
 = 
	`XLökGëDevi˚Name
(0, 
«me
, (name));

15 i‡(!
rc
)

17 
	`¥ötf
("Devi˚ FoundÇamê%†\n", 
«me
);

21 
	`¥ötf
("ERROR couldn'àföd devi˚†r¯%d\n", 
rc
);

24 
XLökGlobÆH™dÀr_t
 
gh™dÀr
 = {

25 .
¥Ÿocﬁ
 = 
USB_VSC


27 
XLökH™dÀr_t
 
h™dÀr
 = {

28 #ifde‡
USE_USB_VSC


29 .
devi˚P©h
 = 
«me
,

31 .
devi˚P©h
 = "/dev/ttyACM0",

32 .
devi˚P©h2
 = "/dev/ttyACM1",

36 
°ªamId
;

39 #i‚de‡
BOOT_DISABLE


40 if–
	`XLökBoŸRemŸe
(
«me
, 
MVCMD_NAME
Ë!
X_LINK_SUCCESS
){

42 
	`exô
(1);

45 
	`¥ötf
("Myriad was booted\n");

48  
	`XLökInôülize
(&
gh™dÀr
Ë!
X_LINK_SUCCESS
);

49 
	`¥ötf
("Initialize done\n");

51 
	`XLökC⁄√˘
(&
h™dÀr
Ë!
X_LINK_SUCCESS
);

52 
	`¥ötf
("XLökC⁄√˘ d⁄ê-Üök Id %d\n", 
h™dÀr
.
lökId
);

54 (
°ªamId
 = 
	`XLökO≥nSåóm
(
h™dÀr
.
lökId
, "fú°Såóm",
DATA_LENGTH
)) == 0xDEADDEAD);

56 
boﬁ
 
∑ss
 = 
	`£ndAndRe˚iveMesßges
(
°ªamId
);

58 
XLökEº‹_t
 
°©us
 = 
	`XLökClo£Såóm
(
°ªamId
);

59 i‡(
°©us
 !
X_LINK_SUCCESS
)

61 
	`¥ötf
("˛o£ såóm faûed: %x\n", 
°©us
);

64 
°©us
 = 
	`XLökRe£tRemŸe
(
h™dÀr
.
lökId
);

65 i‡(
°©us
 !
X_LINK_SUCCESS
)

67 
	`¥ötf
("ª£àÁûed: %x\n", 
°©us
);

70 if(
∑ss
) {

71 
	`¥ötf
("TEST PASSED! :)\n");

73 
	`¥ötf
("TEST FAILED! :(\n");

75 
	}
}

	@HowTo/XLink/ThreaddedSingleStream/shared/commonFuncs.c

1 
	~<°dlib.h
>

2 
	~<°dio.h
>

3 
	~<as£π.h
>

4 
	~<uni°d.h
>

5 
	~<time.h
>

6 
	~<°dboﬁ.h
>

7 
	~<±hªad.h
>

9 
	~"XLök.h
"

10 
	~"comm⁄Funcs.h
"

12 
	#is_Æig√d
(
POINTER
, 
BYTE_COUNT
) \

13 (((
uöçå_t
)(c⁄° *)(
POINTER
)Ë% (
BYTE_COUNT
Ë=0)

	)

14 
	#NUM_THREADS
 6

	)

16 
uöt8_t
 
	gbuf„r1
[
DATA_LENGTH
];

17 
	gmsgIdx
[
NUM_MESSAGES
+1];

18 
__©åibuã
((
£˘i⁄
(".ddr.bss"))Ë
uöt8_t
 
	gmesßgeRe˚ivedBack
[
NUM_MESSAGES
];

20 
	s£ndögMsg
 {

21 
	m°ªamId
;

22 
	mmesßge_no
;

23 }
	t£ndögMsg
;

25 * 
	$£ndMesßges
(* 
s
) {

27 
°ªamId
 = ((
£ndögMsg
*)
s
)->streamId;

28 
mesßge_no
 = ((
£ndögMsg
*)
s
)->message_no;

29 
j
 = 
mesßge_no
; j<
NUM_MESSAGES
; j+=
NUM_THREADS
) {

30 
	`u¶ìp
((Ë((()
	`ønd
()/
RAND_MAX
) * 50000));

32 
	`¥ötf
("Sending some data...\n");

33 
	`fÊush
(
°dout
);

34 
buf„r1
[
msgIdx
[
j
]] = j;

35 
XLökEº‹_t
 
°©us
 = 
	`XLökWrôeD©a
(
°ªamId
, &
buf„r1
[
msgIdx
[
j
]], msgIdx[j+1]-msgIdx[j]);

36 
	`¥ötf
("SENDING %d\n", 
j
);

37 i‡(
°©us
 =
X_LINK_SUCCESS
)

39 
	`¥ötf
("Data sent\n");

43 
	`¥ötf
("£àd©®Áûed: %x\n", 
°©us
);

46  
NULL
;

47 
	}
}

49 * 
	$ª˚iveMesßges
(* 
sId
) {

50 
°ªamId
 = *((*)
sId
);

51 
°ªamPackëDesc_t
* 
∑ckë
;

52 
boﬁ
 
ÆlMesßgesRecd
 = 
Ál£
, 
ã°Pas£d
 = 
åue
;

53 
ã°Pas£d
 && !
ÆlMesßgesRecd
) {

55 
	`¥ötf
("Reading back data... ");

56 
	`fÊush
(
°dout
);

57 
XLökEº‹_t
 
°©us
 = 
	`XLökRódD©a
(
°ªamId
, &
∑ckë
);

58 i‡(
°©us
 =
X_LINK_SUCCESS
)

60 
	`¥ötf
("DataÑead\n");

64 
	`¥ötf
("gë d©®Áûed: %x\n", 
°©us
);

65 
ã°Pas£d
 = 
Ál£
;

67 
i
;

69 if(
∑ckë
->
Àngth
>0) {

70 
i
 = 
∑ckë
->
d©a
[0];

71 
	`¥ötf
("READING msg %d\n", 
i
);

72 i‡(
∑ckë
->
Àngth
 !
msgIdx
[
i
+1]-msgIdx[i]){

73 
	`¥ötf
("Eº‹: Såóm[%d] PackëÜígth wr⁄g\n", 
°ªamId
);

74 
ã°Pas£d
 = 
Ál£
;

76 i‡(!
	`is_Æig√d
(
∑ckë
->
d©a
, 64)) {

77 
	`¥ötf
("Eº‹: Såóm[%d] D©®nŸ 64 byãálig√d", 
°ªamId
);

78 
ã°Pas£d
 = 
Ál£
;

80 
k
 = 0; k < 
∑ckë
->
Àngth
 ; k++)

82 i‡(
∑ckë
->
d©a
[
k
] !
buf„r1
[
msgIdx
[
i
]+k])

84 
	`¥ötf
("Eº‹: Såóm[%d] VÆuê© index %u i†wr⁄g: %x\n", 
°ªamId
, 
k
, 
∑ckë
->
d©a
[k]);

85 
ã°Pas£d
 = 
Ál£
;

89 
mesßgeRe˚ivedBack
[
i
] = 1;

92 
	`¥ötf
("Error: ThisÅest can'tÖass ifÅhereáre messages of size 0\n");

93 
ã°Pas£d
 = 
Ál£
;

94 
i
 = -1;

98 
°©us
 = 
	`XLökRñó£D©a
(
°ªamId
);

99 i‡(
°©us
 != 0)

101 
	`¥ötf
("Eº‹: Såóm[%d]Ññó£ d©®Áûed: %x\n", 
°ªamId
, 
°©us
);

102 
ã°Pas£d
 = 
Ál£
;

105 
a
 =0;

106 
j
 =0; j<
NUM_MESSAGES
; j++){

107 
a
+=
mesßgeRe˚ivedBack
[
j
];

109 if(
a
==
NUM_MESSAGES
){

110 
ÆlMesßgesRecd
 = 
åue
;

113  (
ã°Pas£d
 && 
ÆlMesßgesRecd
Ë? (*Èe°Pas£d : 
NULL
;

114 
	}
}

116 
boﬁ
 
	$£ndAndRe˚iveMesßges
(
°ªamId
) {

118 
	`§™d
(
	`time
(
NULL
));

119 
i
 = 0 ; i< 
DATA_LENGTH
; i++){

120 
buf„r1
[
i
]=
	`ønd
();

122 
uöt32_t
 
°¨tIdx
[10] = {1 , 43, 80, 224, 271, 512, 768, 944, 1025, 2048};

124 
	`as£π
(
NUM_MESSAGES
 < 256);

125 
	`as£π
(
NUM_MESSAGES
 % 10 == 0);

127 
	`as£π
((
°¨tIdx
[9] * (1+ (
NUM_MESSAGES
 / 10)Ë+ 2048Ë< 
DATA_LENGTH
);

128 
i
 = 0; i < 
NUM_MESSAGES
; i++) {

129 
msgIdx
[
i
] = 
°¨tIdx
[i%10] + (startIdx[9] * (i/10));

131 
msgIdx
[
NUM_MESSAGES
] = msgIdx[NUM_MESSAGES-1] + 2048;

133 
±hªad_©å_t
 
©å
;

134 
sc
;

137 
±hªad_t
 
ª˚ivî
;

139 if(
	`±hªad_©å_öô
(&
©å
) !=0) {

140 
	`¥ötf
("pthread_attr_initÉrror\n");

142 
sc
=
	`±hªad_¸óã
(&
ª˚ivî
, &
©å
, &
ª˚iveMesßges
, (*)&
°ªamId
);

143 i‡(
sc
) {

144 
	`¥ötf
("Control Thread creation failed\n");

148 
±hªad_t
 
£ndîs
[
NUM_THREADS
];

149 
ªtu∫VÆ
;

150 
£ndögMsg
 
a
[
NUM_THREADS
];

151 
i
 = 0; i<
NUM_THREADS
; i++) {

153 
a
[
i
].
°ªamId
 = streamId;

154 
a
[
i
].
mesßge_no
 = i;

156 if(
	`±hªad_©å_öô
(&
©å
) !=0) {

157 
	`¥ötf
("pthread_attr_initÉrror\n");

159 
sc
=
	`±hªad_¸óã
(&
£ndîs
[
i
], &
©å
, &
£ndMesßges
, &
a
[i]);

160 i‡(
sc
) {

161 
	`¥ötf
("Control Thread creation failed\n");

164 
i
 = 0; i< 
NUM_THREADS
; i++) {

165 
	`±hªad_joö
(
£ndîs
[
i
], 
NULL
);

167 
	`±hªad_joö
(
ª˚ivî
, (**)&
ªtu∫VÆ
);

169  (
boﬁ
)
ªtu∫VÆ
;

170 
	}
}

172 
	$ª˚iveAndRëu∫Mesßges
(
°ªamId
){

173 
	`¥ötf
("Reading Data... ");

174 
	`fÊush
(
°dout
);

175 
°ªamPackëDesc_t
* 
∑ckë
;

176 
XLökEº‹_t
 
°©us
 = 
	`XLökRódD©a
(
°ªamId
, &
∑ckë
);

177 i‡(
°©us
 !
X_LINK_SUCCESS
)

179 
	`¥ötf
("Gë d©®Áûed: %x\n", 
°©us
);

181 
	`¥ötf
("DataÑead\n");

183 
	`¥ötf
("Writing back data... ");

184 
	`fÊush
(
°dout
);

185 
°©us
 = 
	`XLökWrôeD©a
(
°ªamId
, &
∑ckë
->
d©a
[0],Öackë->
Àngth
);

186 i‡(
°©us
 !
X_LINK_SUCCESS
)

188 
	`¥ötf
("£àd©®Áûed: %x\n", 
°©us
);

190 
	`¥ötf
("Data sent\n");

193 
°©us
 = 
	`XLökRñó£D©a
(
°ªamId
);

194 i‡(
°©us
 !
X_LINK_SUCCESS
)

196 
	`¥ötf
("ªÀa£ d©®Áûed: %x\n", 
°©us
);

198 
	}
}

	@HowTo/XLink/ThreaddedSingleStream/shared/commonFuncs.h

1 #i‚de‡
COMMON_FUNCS_H


2 
	#COMMON_FUNCS_H


	)

4 
	#NUM_MESSAGES
 100

	)

5 
	#DATA_LENGTH
 (3*1024*1024)

	)

6 
boﬁ
 
£ndAndRe˚iveMesßges
(
°ªamId
);

8 
ª˚iveAndRëu∫Mesßges
(
°ªamId
);

	@HowTo/mtrr_rtems/leon/app_config.c

11 
	~<OsDrvC¥.h
>

12 
	~<DrvDdr.h
>

13 
	~<OsDrvShaveL2Cache.h
>

14 
	~"≠p_c⁄fig.h
"

18 
	#L2CACHE_CFG
 (
SHAVE_L2CACHE_NORMAL_MODE
)

	)

32 
	$öôClocksAndMem‹y
()

34 
s32
 
sc
;

36 
tyAuxClkDividîCfg
 
auxClkAŒOn
[] =

38 {
AUX_CLK_MASK_UART
, 
CLK_SRC_REFCLK0
, 96, 625},

43 
sc
 = 
	`OsDrvC¥Inô
();

44 if(
sc
)

45  
sc
;

46 
sc
 = 
	`OsDrvC¥O≥n
();

47 if(
sc
)

48  
sc
;

49 
sc
 = 
	`OsDrvC¥AuxClockAºayC⁄fig
(
auxClkAŒOn
);

50 if(
sc
)

51  
sc
;

53 
	`DrvDdrInôüli£
(
NULL
);

56 
sc
 = 
	`OsDrvShaveL2CacheInô
(
L2CACHE_CFG
);

57 if(
sc
)

58  
sc
;

61 
∑πôi⁄_id
;

62 
	`OsDrvShaveL2CGëP¨tôi⁄
(
SHAVEPART256KB
, &
∑πôi⁄_id
);

65 
sc
 = 
	`OsDrvShaveL2CacheAŒoˇãSëP¨tôi⁄s
();

66 if(
sc
)

67  
sc
;

70 
	}
}

	@HowTo/mtrr_rtems/leon/app_config.h

9 #i‚de‡
_APP_CONFIG_H_


10 
	#_APP_CONFIG_H_


	)

17 
	#APP_UPA_CLOCKS
 (
DEV_UPA_SHAVE_L2
 | \

18 
DEV_UPA_CDMA
 | \

19 
DEV_UPA_CTRL
 )

	)

29 
öôClocksAndMem‹y
();

	@HowTo/mtrr_rtems/leon/main.c

10 
	~<°dio.h
>

11 
	~<°dlib.h
>

12 
	~<DrvLe⁄L2C.h
>

13 
	~<πems.h
>

14 
	~<πems/b•Io.h
>

15 
	~<DrvC¥.h
>

16 
	~<DrvLe⁄.h
>

17 
	~<UnôTe°Api.h
>

18 
	~"πems_c⁄fig.h
"

23 
	#MTRR_SUPPORT_MYFUNC_1
(
x
Ë
	`__©åibuã__
((
	`£˘i⁄
(".cmx.ãxt.myfunc1"))Ë
	)
x

24 
	#MTRR_SUPPORT_MYFUNC_2
(
x
Ë
	`__©åibuã__
((
	`£˘i⁄
(".cmx.ãxt.myfunc2"))Ë
	)
x

28 
u32
 
MYFUNC1_START
, 
MYFUNC1_STOP
;

29 
u32
 
MYFUNC2_START
, 
MYFUNC2_STOP
;

33 
	grc1
, 
	grc2
;

34 
	gcou¡îs
[2]={0,0};

35 
±hªad_t
 
	gthªad1
, 
	gthªad2
;

36 
£m_t
 
	g£m
;

40 
MTRR_SUPPORT_MYFUNC_1
(
myfunc1
)();

41 
MTRR_SUPPORT_MYFUNC_2
(
myfunc2
)();

43 *
fun˘i⁄C
(*
Àd
);

44 *
fun˘i⁄D
(*
Àd
);

48 *
	$POSIX_Inô
 (*
¨gs
)

50 
	`UNUSED
(
¨gs
);

52 
±hªad_©å_t
 
©å
;

53 
s32
 
sc
;

55 
	`unôTe°Inô
 ();

56 
sc
 = 
	`öôClocksAndMem‹y
();

57 if(
sc
)

58 
	`exô
(
sc
);

59 
	`¥ötf
 ("\n");

60 
	`¥ötf
 ("RTEMS POSIX Started\n");

62 
u32
 
funcsize1
 = (&
MYFUNC1_STOP
 - &
MYFUNC1_START
) * 4;

63 
u32
 
funcsize2
 = (&
MYFUNC2_STOP
 - &
MYFUNC2_START
) * 4;

64 
	`¥ötf
("CÆcuœãd size†ö byãs: %ld %ld\n", 
funcsize1
, 
funcsize2
);

66 
sc
 = 
	`±hªad_©å_öô
(&
©å
);

67 if(
sc
) {

68 
	`¥ötf
("pthread_attr_initÉrror");

69 
	`exô
(
sc
);

71 
sc
 = 
	`±hªad_©å_£töhîôsched
(&
©å
, 
PTHREAD_EXPLICIT_SCHED
);

72 if(
sc
) {

73 
	`¥ötf
("pthread_attr_setinheritschedÉrror");

74 
	`exô
(
sc
);

76 
sc
 = 
	`±hªad_©å_£tschedpﬁicy
(&
©å
, 
SCHED_RR
);

77 if(
sc
) {

78 
	`¥ötf
("pthread_attr_setschedpolicyÉrror");

79 
	`exô
(
sc
);

82 
sc
 = 
	`£m_öô
(&
£m
, 0, 0);

83 if(
sc
 == -1) {

84 
	`¥ötf
("sem_initÉrror\n");

85 
	`exô
(
sc
);

88 
sc
 = 
	`DrvLL2CSëMTRRfunc
(
myfunc1
, 
funcsize1
*2, 
LL2C_UNCACHED
, 0);

89 if(
sc
)

90 
	`exô
(
sc
);

91 
sc
 = 
	`DrvLL2CSëMTRRfunc
(
myfunc2
, 
funcsize2
*2, 
LL2C_UNCACHED
, 0);

92 if(
sc
)

93 
	`exô
(
sc
);

95 i‡((
rc1
=
	`±hªad_¸óã
–&
thªad1
, &
©å
, 
fun˘i⁄C
,&
cou¡îs
[0]))) {

96 
	`¥ötf
("Thªad 1 cª©i⁄ faûed: %d\n", 
rc1
);

97 
	`exô
(
rc1
);

100 
	`¥ötf
("Thread 1 created\n");

103 if((
rc2
=
	`±hªad_¸óã
–&
thªad2
, &
©å
, 
fun˘i⁄D
,&
cou¡îs
[1]))) {

104 
	`¥ötf
("Thªad 2 cª©i⁄ faûed: %d\n", 
rc2
);

105 
	`exô
(
rc2
);

108 
	`¥ötf
("Thread 2 created\n");

111 
sc
 = 
	`±hªad_joö
–
thªad1
, 
NULL
);

112 if(
sc
) {

113 
	`¥ötf
("pthread_joinÉrror!");

114 
	`exô
(
sc
);

116 
sc
 = 
	`±hªad_joö
–
thªad2
, 
NULL
);

117 if(
sc
) {

118 
	`¥ötf
("pthread_joinÉrror!");

119 
	`exô
(
sc
);

122 
	`unôTe°FöÆRï‹t
();

123 
	`exô
(0);

124 
	}
}

126 #¥agm®
GCC
 
dügno°ic
 
push


127 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wstrict-aliasing"

128 
	$MTRR_SUPPORT_MYFUNC_1
(
myfunc1
)(){

130 
vÆ
;

132 
vÆ
 = 3.142423f * 24.0f/34.0f *123.0f - 56.7f;

134 
	`¥ötf
("vÆ: 0x%lx\n", *(
u32
 *)&
vÆ
);

136 
	}
}

137 #¥agm®
GCC
 
dügno°ic
 
p›


139 #¥agm®
GCC
 
dügno°ic
 
push


140 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wstrict-aliasing"

141 
	$MTRR_SUPPORT_MYFUNC_2
(
myfunc2
)(){

142 
vÆ
;

144 
vÆ
 = 3.142423f * 24.0f/4.1f *123.0f - 56.7f;

146 
	`¥ötf
("vÆ: 0x%lx\n", *(
u32
 *)&
vÆ
);

147 
	}
}

148 #¥agm®
GCC
 
dügno°ic
 
p›


150 *
	$fun˘i⁄C
(*
˙t
)

152 
	`UNUSED
(
˙t
);

154 
u32
 
i
;

155 
i
=0;i<50;i++)

157 
	`myfunc1
();

159  
NULL
;

160 
	}
}

162 *
	$fun˘i⁄D
(*
˙t
)

164 
	`UNUSED
(
˙t
);

166 
u32
 
i
;

167 
i
=0;i<50;i++)

169 
	`myfunc2
();

171  
NULL
;

172 
	}
}

	@HowTo/mtrr_rtems/leon/rtems_config.h

8 #i‚de‡
_RTEMS_CONFIG_H_


9 
	#_RTEMS_CONFIG_H_


	)

13 
	~"≠p_c⁄fig.h
"

14 
	~"ÁèlExãnsi⁄.h
"

19 #i‡
deföed
(
__RTEMS__
)

21 #i‡!
deföed
 (
__CONFIG__
)

22 
	#__CONFIG__


	)

26 
	#CONFIGURE_INIT


	)

28 #i‚de‡
RTEMS_POSIX_API


29 
	#RTEMS_POSIX_API


	)

32 
	#CONFIGURE_MICROSECONDS_PER_TICK
 1000

	)

34 
	#CONFIGURE_TICKS_PER_TIMESLICE
 10

	)

36 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

38 
	#CONFIGURE_APPLICATION_NEEDS_CLOCK_DRIVER


	)

40 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

42 
	#CONFIGURE_MINIMUM_TASK_STACK_SIZE
 2048

	)

44 
	#CONFIGURE_MAXIMUM_TASKS
 4

	)

46 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 4

	)

48 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 8

	)

50 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 8

	)

52 
	#CONFIGURE_MAXIMUM_POSIX_SEMAPHORES
 8

	)

54 
	#CONFIGURE_MAXIMUM_POSIX_MESSAGE_QUEUES
 8

	)

56 
	#CONFIGURE_MAXIMUM_POSIX_TIMERS
 4

	)

58 
	#CONFIGURE_MAXIMUM_TIMERS
 4

	)

60 
	#CONFIGURE_MAXIMUM_USER_EXTENSIONS
 1

	)

61 
	#CONFIGURE_INITIAL_EXTENSIONS
 { .
Áèl
 = 
F©Æ_exãnsi⁄
 }

	)

68 *
POSIX_Inô
 (*
¨gs
);

70 
	~<πems/c⁄fdefs.h
>

78 
BSP_SET_CLOCK
(12000, 266000, 1, 1, 
DEFAULT_RTEMS_CSS_LOS_CLOCKS
, 
DEFAULT_RTEMS_MSS_LRT_CLOCKS
, 
APP_UPA_CLOCKS
, 0, 0);

81 
BSP_SET_L2C_CONFIG
(0, 
L2C_REPL_LRU
, 0, 
L2C_MODE_COPY_BACK
, 0, 
NULL
);

	@HowTo/rtems_apps/simpleRTEMS_HTTPClient/leon/AppConfig.c

11 
	~<OsDrvC¥.h
>

12 
	~"DrvDdr.h
"

13 
	~<OsDrvShaveL2Cache.h
>

14 
	~"AµC⁄fig.h
"

18 
	#L2CACHE_CFG
 (
SHAVE_L2CACHE_NORMAL_MODE
)

	)

31 
	$öôClocksAndMem‹y
()

33 
u32
 
sc
;

34 
	`OsDrvC¥Inô
();

35 
	`OsDrvC¥O≥n
();

36 
	`DrvDdrInôüli£
(
NULL
);

39 
sc
 = 
	`OsDrvShaveL2CacheInô
(
L2CACHE_CFG
);

40 if(
sc
)

41  
sc
;

44 
∑πôi⁄_id
;

45 
	`OsDrvShaveL2CGëP¨tôi⁄
(
SHAVEPART256KB
, &
∑πôi⁄_id
);

48 
sc
 = 
	`OsDrvShaveL2CacheAŒoˇãSëP¨tôi⁄s
();

49 if(
sc
)

50  
sc
;

52 
	`OsDrvShaveL2CacheP¨tôi⁄InvÆid©e
(0);

54 
	}
}

	@HowTo/rtems_apps/simpleRTEMS_HTTPClient/leon/AppConfig.h

9 #i‚de‡
_APP_CONFIG_H_


10 
	#_APP_CONFIG_H_


	)

18 
	#DEFAULT_APP_CLOCK_KHZ
 500000

	)

19 
	#DEFAULT_OSC_CLOCK_KHZ
 12000

	)

20 
	#BIGENDIANMODE
 (0x01000786)

	)

27 
öôClocksAndMem‹y
();

	@HowTo/rtems_apps/simpleRTEMS_HTTPClient/leon/main.c

1 
	~<°dlib.h
>

2 
	~<°dio.h
>

3 
	~<°rög.h
>

4 
	~<î∫o.h
>

5 
	~<πems.h
>

6 
	~<πems/b•Io.h
>

7 
	~<f˙é.h
>

8 
	~"πems/πems_bsd√t.h
"

9 
	~<as£π.h
>

10 
	~"sys/ty≥s.h
"

11 
	~<sys/sockëv¨.h
>

12 
	~"sys/sockë.h
"

13 
	~<√töë/ö.h
>

14 
	~"√tdb.h
"

15 
	~<sys/io˘l.h
>

16 
	~"√t/if.h
"

17 
	~"√t/if_v¨.h
"

18 
	~"¨∑/öë.h
"

19 
	~"sys/¥oc.h
"

20 
	~"AµC⁄fig.h
"

21 
	~<b•/gªth_gbô.h
>

22 
	~<b•.h
>

23 
	~"DrvGpio.h
"

24 
	~"DrvI2cMa°î.h
"

25 
	~"DrvI2c.h
"

26 
	~"OsDrvC¥.h
"

27 
	~"OsDrvTimî.h
"

28 
	~"πems/dh˝.h
"

29 
	~"time.h
"

30 
	~"πems_c⁄fig.h
"

35 
	#RTEMS_BSP_NETWORK_DRIVER_NAME
 "gr_ëh1"

	)

36 
	#RTEMS_BSP_NETWORK_DRIVER_ATTACH
 
πems_À⁄_gªth_gbô_drivî_©èch


	)

38 
	#RDA_COUNT
 16

39 
	#TDA_COUNT
 16

40 

	)

42 
	#ETH_ISR_PRIORITY
 5

	)

45 
	#IO_RXD_0
 (69)

	)

46 
	#IO_RXD_1
 (70)

	)

47 
	#IO_RXD_2
 (71)

	)

48 
	#IO_RXD_3
 (72)

	)

49 
	#IO_RXD_4
 (73)

	)

50 
	#IO_RXD_5
 (46)

	)

51 
	#IO_RXD_6
 (47)

	)

52 
	#IO_RXD_7
 (48)

	)

54 
	#IO_TXCLK
 ( 1)

	)

55 
	#IO_TX_EN
 ( 2)

	)

56 
	#IO_TXER
 ( 3)

	)

57 
	#IO_RXCLK
 ( 4)

	)

58 
	#IO_RXDV
 ( 5)

	)

59 
	#IO_RXER
 ( 6)

	)

60 
	#IO_RXCOL
 ( 7)

	)

61 
	#IO_RXCRS
 ( 8)

	)

62 
	#IO_GTXCK
 (35)

	)

63 
	#IO_125CLK
 ( 0)

	)

65 
	#IO_TXD_0
 (11)

	)

66 
	#IO_TXD_1
 (62)

	)

67 
	#IO_TXD_2
 (63)

	)

68 
	#IO_TXD_3
 (64)

	)

69 
	#IO_TXD_4
 (65)

	)

70 
	#IO_TXD_5
 (66)

	)

71 
	#IO_TXD_6
 (67)

	)

72 
	#IO_TXD_7
 (68)

	)

74 
	#IO_MDC
 ( 9)

	)

75 
	#IO_MDIO
 (10)

	)

78 
	#I2C3_SDA
 (80)

	)

79 
	#I2C3_SCL
 (79)

	)

80 
	#I2C3_SPEED_KHZ_DEFAULT
 (400)

	)

81 
	#I2C3_ADDR_SIZE_DEFAULT
 (
ADDR_7BIT
)

	)

82 
	#WM8325_I2C
 ((0x6C)>>1)

	)

85 
	#INVERT_GTX_CLK_CFG
 1

	)

88 
	#APP_MBUF_ALLOCATION
 (2*64*1024)

	)

90 
	#APP_MBUFCLUSTERALLOCATION
 (2*128*1024)

	)

92 
	#APP_MACADDRESS
 "\x94\xDE\x80\x6B\x12\x07"

	)

94 
	#SET_BIT
(
ªg
, 
bô
, 
vÆ
Ë(vÆ?‘eg |1<<bô):‘eg &~(1<<bô)))

	)

96 
	#HTTP_GET_REQUEST
 "GET / HTTP/1.0\r\n\r\n"

	)

98 
	#CLIENTHOSTNAME
 "Myrüd2"

	)

105 
πems_bsd√t_ifc⁄fig
 
	gifc⁄fig
 =

107 
RTEMS_BSP_NETWORK_DRIVER_NAME
,

108 
RTEMS_BSP_NETWORK_DRIVER_ATTACH
,

110 
NULL
,

111 
NULL
,

112 
APP_MACADDRESS
,

120 
NULL


123 
πems_bsd√t_c⁄fig
 
	gπems_bsd√t_c⁄fig
 =

125 &
ifc⁄fig
,

126 
πems_bsd√t_do_dh˝
,

128 
APP_MBUF_ALLOCATION
,

129 
APP_MBUFCLUSTERALLOCATION
,

130 
CLIENTHOSTNAME
,

131 
NULL
,

133 
NULL
,

134 {
NULL
},

135 {
NULL
},

143 
u32
 
comm⁄I2CEº‹H™dÀr
(
I2CM_SètusTy≥
 
i2cCommsEº‹
, u32 
¶aveAddr
, u32 
ªgAddr
);

146 
tyI2cC⁄fig
 
	gi2c2C⁄fig
 =

148 .
devi˚
 = 
IIC3_DEVICE
,

149 .
	gs˛Pö
 = 
I2C3_SCL
,

150 .
	gsdaPö
 = 
I2C3_SDA
,

151 .
	g•ìdKhz
 = 
I2C3_SPEED_KHZ_DEFAULT
,

152 .
	gaddªssSize
 = 
I2C3_ADDR_SIZE_DEFAULT
,

153 .
	gîr‹H™dÀr
 = &
comm⁄I2CEº‹H™dÀr
,

156 
u8
 
	gWM8325¥ŸocﬁWrôe
[] =

158 
S_ADDR_WR
,

159 
R_ADDR_H
,

160 
R_ADDR_L
,

161 
DATAW
,

162 
LOOP_MINUS_1


165 
u8
 
	gWM8325¥ŸocﬁRód
[] =

167 
S_ADDR_WR
,

168 
R_ADDR_H
,

169 
R_ADDR_L
,

170 
S_ADDR_RD
,

171 
DATAR
,

172 
LOOP_MINUS_1


186 
	$InôGpioEth
(
u8
 
övîtGtxClk
)

188 
	`DrvGpioSëMode
(
IO_TX_EN
 , 
D_GPIO_MODE_4
);

189 
	`DrvGpioSëMode
(
IO_TXER
 , 
D_GPIO_MODE_4
);

190 
	`DrvGpioSëMode
(
IO_TXD_0
 , 
D_GPIO_MODE_4
);

191 
	`DrvGpioSëMode
(
IO_TXD_1
 , 
D_GPIO_MODE_1
);

192 
	`DrvGpioSëMode
(
IO_TXD_2
 , 
D_GPIO_MODE_1
);

193 
	`DrvGpioSëMode
(
IO_TXD_3
 , 
D_GPIO_MODE_1
);

194 
	`DrvGpioSëMode
(
IO_TXD_4
 , 
D_GPIO_MODE_1
);

195 
	`DrvGpioSëMode
(
IO_TXD_5
 , 
D_GPIO_MODE_1
);

196 
	`DrvGpioSëMode
(
IO_TXD_6
 , 
D_GPIO_MODE_1
);

197 
	`DrvGpioSëMode
(
IO_TXD_7
 , 
D_GPIO_MODE_1
);

198 
	`DrvGpioSëMode
(
IO_125CLK
, 
D_GPIO_MODE_4
);

200 if(
övîtGtxClk
){

201 
	`DrvGpioSëMode
(
IO_GTXCK
 , 
D_GPIO_MODE_1
 | 
D_GPIO_DATA_INV_ON
);

202 
	`DrvGpioPadSë
(
IO_GTXCK
, 
D_GPIO_PAD_DRIVE_2mA
);

205 
	`DrvGpioSëMode
(
IO_GTXCK
 , 
D_GPIO_MODE_1
);

206 
	`DrvGpioPadSë
(
IO_GTXCK
, 
D_GPIO_PAD_DRIVE_2mA
);

209 
	`DrvGpioSëMode
(
IO_TXCLK
 , 
D_GPIO_DIR_IN
 | 
D_GPIO_MODE_4
 );

210 
	`DrvGpioSëMode
(
IO_RXCLK
 , 
D_GPIO_DIR_IN
 | 
D_GPIO_MODE_4
 );

211 
	`DrvGpioSëMode
(
IO_RXDV
 , 
D_GPIO_DIR_IN
 | 
D_GPIO_MODE_4
);

212 
	`DrvGpioSëMode
(
IO_RXER
 , 
D_GPIO_DIR_IN
 | 
D_GPIO_MODE_4
);

213 
	`DrvGpioSëMode
(
IO_RXCOL
 , 
D_GPIO_DIR_IN
 | 
D_GPIO_MODE_4
);

214 
	`DrvGpioSëMode
(
IO_RXCRS
 , 
D_GPIO_DIR_IN
 | 
D_GPIO_MODE_4
);

215 
	`DrvGpioSëMode
(
IO_RXD_0
 , 
D_GPIO_DIR_IN
 | 
D_GPIO_MODE_1
);

216 
	`DrvGpioSëMode
(
IO_RXD_1
 , 
D_GPIO_DIR_IN
 | 
D_GPIO_MODE_1
);

217 
	`DrvGpioSëMode
(
IO_RXD_2
 , 
D_GPIO_DIR_IN
 | 
D_GPIO_MODE_1
);

218 
	`DrvGpioSëMode
(
IO_RXD_3
 , 
D_GPIO_DIR_IN
 | 
D_GPIO_MODE_1
);

219 
	`DrvGpioSëMode
(
IO_RXD_4
 , 
D_GPIO_DIR_IN
 | 
D_GPIO_MODE_1
);

220 
	`DrvGpioSëMode
(
IO_RXD_5
 , 
D_GPIO_DIR_IN
 | 
D_GPIO_MODE_3
);

221 
	`DrvGpioSëMode
(
IO_RXD_6
 , 
D_GPIO_DIR_IN
 | 
D_GPIO_MODE_3
);

222 
	`DrvGpioSëMode
(
IO_RXD_7
 , 
D_GPIO_DIR_IN
 | 
D_GPIO_MODE_3
);

224 
	`DrvGpioSëMode
(
IO_MDC
, 
D_GPIO_MODE_4
);

225 
	`DrvGpioSëMode
(
IO_MDIO
, 
D_GPIO_MODE_4
);

226 
	}
}

228 
u32
 
	$comm⁄I2CEº‹H™dÀr
(
I2CM_SètusTy≥
 
i2cCommsEº‹
, 
u32
 
¶aveAddr
, u32 
ªgAddr
)

230 
	`¥ötf
("ERROR HANDLER\n");

232 
¶aveAddr
 = slaveAddr;

233 
ªgAddr
 =ÑegAddr;

235  
i2cCommsEº‹
;

236 
	}
}

238 
	$EthPHYHWRe£t
()

240 
myVÆ
;

241 
u8
 
byãs
[2];

242 
I2CM_Devi˚
 
i2c3H™dÀ
;

244 
	`DrvI2cMInôFromC⁄fig
(&
i2c3H™dÀ
, &
i2c2C⁄fig
);

248 
	`DrvI2cMTønß˘i⁄
(&
i2c3H™dÀ
, 
WM8325_I2C
, 0x403F, 
WM8325¥ŸocﬁRód
, 
byãs
, 2);

249 
myVÆ
=(
byãs
[0]<<8) | bytes[1];

250 
myVÆ
=0x0480;

251 
byãs
[0]=(
myVÆ
 & 0xFF00) >> 8;

252 
byãs
[1]=(
myVÆ
 & 0xFF);

253 
	`DrvI2cMTønß˘i⁄
(&
i2c3H™dÀ
, 
WM8325_I2C
, 0x403F, 
WM8325¥ŸocﬁWrôe
, 
byãs
, 2);

254 
	`DrvI2cMTønß˘i⁄
(&
i2c3H™dÀ
, 
WM8325_I2C
, 0x403B, 
WM8325¥ŸocﬁWrôe
, 
byãs
, 2);

257 
	`DrvI2cMTønß˘i⁄
(&
i2c3H™dÀ
, 
WM8325_I2C
, 0x400C,
WM8325¥ŸocﬁRód
, 
byãs
, 2);

258 
myVÆ
=(
byãs
[0]<<8) | bytes[1];

259 
	`SET_BIT
(
myVÆ
, 3, 0);

260 
	`SET_BIT
(
myVÆ
, 7, 0);

261 
byãs
[0]=(
myVÆ
 & 0xFF00) >> 8;

262 
byãs
[1]=(
myVÆ
 & 0xFF);

263 
	`DrvI2cMTønß˘i⁄
(&
i2c3H™dÀ
, 
WM8325_I2C
, 0x400C, 
WM8325¥ŸocﬁWrôe
, 
byãs
, 2);

266 
	`u¶ìp
(500 * 1000);

269 
	`DrvI2cMTønß˘i⁄
(&
i2c3H™dÀ
, 
WM8325_I2C
, 0x400C, 
WM8325¥ŸocﬁRód
, 
byãs
, 2);

270 
myVÆ
=(
byãs
[0]<<8) | bytes[1];

271 
	`SET_BIT
(
myVÆ
, 7, 1);

272 
byãs
[0]=(
myVÆ
 & 0xFF00) >> 8;

273 
byãs
[1]=(
myVÆ
 & 0xFF);

274 
	`DrvI2cMTønß˘i⁄
(&
i2c3H™dÀ
, 
WM8325_I2C
, 0x400C, 
WM8325¥ŸocﬁWrôe
, 
byãs
, 2);

278 
	`u¶ìp
(100 * 1000);

279 
	}
}

282 *
	$√tw‹kTask1
(*
¨g
)

284 
	`UNUSED
(
¨g
);

286 
i
, 
s
, 
byãs_ªad
;

287 
sockaddr_ö
 
£rvî_addr
;

288 
ö_addr
 **
addr_li°
;

289 
ho°ít
* 
ho°
;

290 
buf„r
[512];

292 
	`mem£t
(&
£rvî_addr
, 0, (server_addr));

294 
s
 = 
	`sockë
(
PF_INET
, 
SOCK_STREAM
, 0);

296 if(
s
 < 0) {

297 
	`¥ötf
("ERROR opening socket\n");

298 
	`±hªad_exô
(0);

301 
ho°
 = 
	`gëho°by«me
(
HTTP_HOST_NAME
);

302 if(
ho°
 !
NULL
)

304 
addr_li°
 = (
ö_addr
**)
ho°
->
h_addr_li°
;

305 
	`¥ötf
("\nResolvingÇameÅo IPáddresses: \n");

306 
i
 = 0; 
addr_li°
[i] !
NULL
; i++){

307 
	`¥ötf
("\n *Ho° Addªs†%d: %s\n", 
i
, 
	`öë_¡ﬂ
(*
addr_li°
[i]));

309 
	`¥ötf
("\n");

311 
£rvî_addr
.
sö_Ámûy
 = 
AF_INET
;

312 
£rvî_addr
.
sö_addr
 = *
addr_li°
[0];

313 
£rvî_addr
.
sö_p‹t
 = 
	`ht⁄s
(80);

317 
	`¥ötf
("\nERROR: CannotÑesolve hostname!\n");

318 
	`±hªad_exô
(0);

321 if–
	`c⁄√˘
(
s
, (
sockaddr
*)&
£rvî_addr
, (server_addr)) < 0 )

323 
	`¥ötf
("ERROR: C™nŸ c⁄√˘Åÿ£rvî %s!\n", 
	`öë_¡ﬂ
(
£rvî_addr
.
sö_addr
));

324 
	`±hªad_exô
(0);

327 
	`¥ötf
("C⁄√˘i⁄ i†suc˚ssfu»tÿ%s.\n", 
	`öë_¡ﬂ
(
£rvî_addr
.
sö_addr
));

330 
	`•rötf
(
buf„r
, 
HTTP_GET_REQUEST
);

331 
i
 = 
	`£nd
(
s
, 
buf„r
, 
	`°æí
(buffer), 0);

332 if(
i
 < 0) {

333 
	`¥ötf
("HTTPÑeque°Åÿ%†Áûed\n", 
HTTP_HOST_NAME
);

334 
	`±hªad_exô
(0);

337 
	`¥ötf
("HTTPÑeque°Åÿ%s: %d byã†£¡\n", 
HTTP_HOST_NAME
, 
i
);

340 
	`¥ötf
("HTTPÑesponse:\n");

341 
	`¥ötf
("\n************************************************************************\n");

342 
	`¶ìp
(5);

346 
	`bzîo
(
buf„r
, (buffer));

347 
byãs_ªad
 = 
	`ªcv
(
s
, 
buf„r
, (buf„r)-1, 
MSG_DONTWAIT
);

348 i‡(
byãs_ªad
 > 0)

349 
	`¥ötf
("%s", 
buf„r
);

350 } 
byãs_ªad
 > 0);

351 
	`¥ötf
("\n************************************************************************\n");

352 
	`˛o£
(
s
);

353 
	`±hªad_exô
(0);

354  
NULL
;

355 
	}
}

357 *
	$POSIX_Inô
(*
¨gs
)

359 
	`UNUSED
(
¨gs
);

361 
ªs
;

362 
±hªad_t
 
thªad1
;

363 
±hªad_©å_t
 
©å
;

364 
πems_gªth_gbô_hw_∑øms
 
∑øms
;

366 
	`öôClocksAndMem‹y
();

367 
	`OsDrvTimîInô
();

368 
	`EthPHYHWRe£t
();

369 
	`InôGpioEth
(
INVERT_GTX_CLK_CFG
);

372 
∑øms
.
¥i‹ôy
 = 
ETH_ISR_PRIORITY
;

373 
∑øms
.
txcou¡
 = 
TDA_COUNT
;

374 
∑øms
.
rxcou¡
 = 
RDA_COUNT
;

375 
∑øms
.
gbô_check
 = 
FALSE
;

376 
∑øms
.
ªad_fun˘i⁄
 = 
NULL
;

377 
∑øms
.
wrôe_fun˘i⁄
 = 
NULL
;

380 
ªs
 = 
	`πems_À⁄_gªth_gbô_drivî_£tup
(&
∑øms
);

381 
	`¥ötf
("\ƒãms_À⁄_gªth_gbô_drivî_£tu∞%†\n", 
	`πems_°©us_ãxt
(
ªs
));

382 
	`as£π
(
ªs
 =
RTEMS_SUCCESSFUL
);

384 
ªs
 = 
	`πems_bsd√t_öôülize_√tw‹k
();

385 
	`as£π
(
ªs
 =
RTEMS_SUCCESSFUL
);

387 if(
	`±hªad_©å_öô
(&
©å
) !=0) {

388 
	`¥ötf
("pthread_attr_initÉrror\n");

390 if(
	`±hªad_©å_£töhîôsched
(&
©å
, 
PTHREAD_EXPLICIT_SCHED
) != 0) {

391 
	`¥ötf
("pthread_attr_setinheritschedÉrror\n");

393 if(
	`±hªad_©å_£tschedpﬁicy
(&
©å
, 
SCHED_RR
) != 0) {

394 
	`¥ötf
("pthread_attr_setschedpolicyÉrror\n");

396 
ªs
 = 
	`±hªad_¸óã
(&
thªad1
, &
©å
, &
√tw‹kTask1
, 
NULL
);

397 i‡(
ªs
) {

398 
	`¥ötf
("Thªad 1 cª©i⁄ faûed: %d\n", 
ªs
);

401 if–
	`±hªad_joö
(
thªad1
, 
NULL
) ){

402 
	`¥ötf
("pthread_joinÉrror!\n");

405 
	`exô
(0);

406 
	}
}

	@HowTo/rtems_apps/simpleRTEMS_HTTPClient/leon/rtems_config.h

9 #i‚de‡
_RTEMS_CONFIG_H_


10 
	#_RTEMS_CONFIG_H_


	)

14 
	~"AµC⁄fig.h
"

15 
	~"ÁèlExãnsi⁄.h
"

19 #i‡!
deföed
 (
__CONFIG__
)

20 
	#__CONFIG__


	)

26 
	#CONFIGURE_INIT


	)

28 #i‚de‡
RTEMS_POSIX_API


29 
	#RTEMS_POSIX_API


	)

32 
	#CONFIGURE_MICROSECONDS_PER_TICK
 1000

	)

34 
	#CONFIGURE_TICKS_PER_TIMESLICE
 10

	)

36 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

38 
	#CONFIGURE_APPLICATION_NEEDS_CLOCK_DRIVER


	)

40 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

42 
	#CONFIGURE_MINIMUM_TASK_STACK_SIZE
 4096

	)

44 
	#CONFIGURE_MAXIMUM_TASKS
 4

	)

46 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 4

	)

48 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 8

	)

50 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 8

	)

52 
	#CONFIGURE_MAXIMUM_POSIX_SEMAPHORES
 8

	)

54 
	#CONFIGURE_MAXIMUM_SEMAPHORES
 8

	)

56 
	#CONFIGURE_MAXIMUM_POSIX_MESSAGE_QUEUES
 8

	)

58 
	#CONFIGURE_MAXIMUM_POSIX_TIMERS
 4

	)

60 
	#CONFIGURE_MAXIMUM_TIMERS
 4

	)

62 
	#CONFIGURE_LIBIO_MAXIMUM_FILE_DESCRIPTORS
 30

	)

65 
	#CONFIGURE_MAXIMUM_USER_EXTENSIONS
 1

	)

66 
	#CONFIGURE_INITIAL_EXTENSIONS
 { .
Áèl
 = 
F©Æ_exãnsi⁄
 }

	)

73 *
POSIX_Inô
 (*
¨gs
);

75 
	~<πems/c⁄fdefs.h
>

83 
BSP_SET_CLOCK
(
DEFAULT_OSC_CLOCK_KHZ
, 
DEFAULT_APP_CLOCK_KHZ
, 1, 1, 
DEFAULT_RTEMS_CSS_LOS_CLOCKS
 | 
DEV_CSS_GETH
 | 
DEV_CSS_I2C0
, 
DEV_UPA_SHAVE_L2
,0,0,0);

85 
BSP_SET_L2C_CONFIG
(1, 
DEFAULT_RTEMS_L2C_REPLACEMENT_POLICY
, 
DEFAULT_RTEMS_L2C_LOCKED_WAYS
,
DEFAULT_RTEMS_L2C_MODE
, 0, 0);

	@HowTo/rtems_apps/simpleRTEMS_NTPClient/leon/AppConfig.c

11 
	~<OsDrvC¥.h
>

12 
	~"OsDrvTimî.h
"

13 
	~"DrvDdr.h
"

14 
	~<OsDrvShaveL2Cache.h
>

15 
	~"AµC⁄fig.h
"

19 
	#L2CACHE_CFG
 (
SHAVE_L2CACHE_NORMAL_MODE
)

	)

31 
	$öôClocksAndMem‹y
()

33 
u32
 
sc
;

34 
	`OsDrvC¥Inô
();

35 
	`OsDrvC¥O≥n
();

36 
	`DrvDdrInôüli£
(
NULL
);

39 
sc
 = 
	`OsDrvShaveL2CacheInô
(
L2CACHE_CFG
);

40 if(
sc
)

41  
sc
;

44 
∑πôi⁄_id
;

45 
	`OsDrvShaveL2CGëP¨tôi⁄
(
SHAVEPART256KB
, &
∑πôi⁄_id
);

48 
sc
 = 
	`OsDrvShaveL2CacheAŒoˇãSëP¨tôi⁄s
();

49 if(
sc
)

50  
sc
;

52 
	`OsDrvShaveL2CacheP¨tôi⁄InvÆid©e
(0);

54 
	}
}

	@HowTo/rtems_apps/simpleRTEMS_NTPClient/leon/AppConfig.h

9 #i‚de‡
_APP_CONFIG_H_


10 
	#_APP_CONFIG_H_


	)

17 
	#DEFAULT_APP_CLOCK_KHZ
 500000

	)

18 
	#DEFAULT_OSC_CLOCK_KHZ
 12000

	)

19 
	#BIGENDIANMODE
 (0x01000786)

	)

26 
öôClocksAndMem‹y
();

	@HowTo/rtems_apps/simpleRTEMS_NTPClient/leon/main.c

1 
	~<°dlib.h
>

2 
	~<°dio.h
>

3 
	~<°rög.h
>

4 
	~<î∫o.h
>

5 
	~<πems.h
>

6 
	~<πems/b•Io.h
>

7 
	~<f˙é.h
>

8 
	~"πems/πems_bsd√t.h
"

9 
	~<as£π.h
>

10 
	~"sys/ty≥s.h
"

11 
	~<sys/sockëv¨.h
>

12 
	~"sys/sockë.h
"

13 
	~<√töë/ö.h
>

14 
	~"√tdb.h
"

15 
	~<sys/io˘l.h
>

16 
	~"√t/if.h
"

17 
	~"√t/if_v¨.h
"

18 
	~"¨∑/öë.h
"

19 
	~"sys/¥oc.h
"

20 
	~"AµC⁄fig.h
"

21 
	~<b•/gªth_gbô.h
>

22 
	~<b•.h
>

23 
	~"DrvGpio.h
"

24 
	~"DrvI2cMa°î.h
"

25 
	~"DrvI2c.h
"

26 
	~"OsDrvC¥.h
"

27 
	~"OsDrvTimî.h
"

28 
	~"πems/dh˝.h
"

29 
	~"time.h
"

30 
	~"πems_c⁄fig.h
"

35 
	#RTEMS_BSP_NETWORK_DRIVER_NAME
 "gr_ëh1"

	)

36 
	#RTEMS_BSP_NETWORK_DRIVER_ATTACH
 
πems_À⁄_gªth_gbô_drivî_©èch


	)

38 
	#RDA_COUNT
 16

39 
	#TDA_COUNT
 16

40 

	)

42 
	#ETH_ISR_PRIORITY
 5

	)

45 
	#IO_RXD_0
 (69)

	)

46 
	#IO_RXD_1
 (70)

	)

47 
	#IO_RXD_2
 (71)

	)

48 
	#IO_RXD_3
 (72)

	)

49 
	#IO_RXD_4
 (73)

	)

50 
	#IO_RXD_5
 (46)

	)

51 
	#IO_RXD_6
 (47)

	)

52 
	#IO_RXD_7
 (48)

	)

54 
	#IO_TXCLK
 ( 1)

	)

55 
	#IO_TX_EN
 ( 2)

	)

56 
	#IO_TXER
 ( 3)

	)

57 
	#IO_RXCLK
 ( 4)

	)

58 
	#IO_RXDV
 ( 5)

	)

59 
	#IO_RXER
 ( 6)

	)

60 
	#IO_RXCOL
 ( 7)

	)

61 
	#IO_RXCRS
 ( 8)

	)

62 
	#IO_GTXCK
 (35)

	)

63 
	#IO_125CLK
 ( 0)

	)

65 
	#IO_TXD_0
 (11)

	)

66 
	#IO_TXD_1
 (62)

	)

67 
	#IO_TXD_2
 (63)

	)

68 
	#IO_TXD_3
 (64)

	)

69 
	#IO_TXD_4
 (65)

	)

70 
	#IO_TXD_5
 (66)

	)

71 
	#IO_TXD_6
 (67)

	)

72 
	#IO_TXD_7
 (68)

	)

74 
	#IO_MDC
 ( 9)

	)

75 
	#IO_MDIO
 (10)

	)

78 
	#I2C3_SDA
 (80)

	)

79 
	#I2C3_SCL
 (79)

	)

80 
	#I2C3_SPEED_KHZ_DEFAULT
 (400)

	)

81 
	#I2C3_ADDR_SIZE_DEFAULT
 (
ADDR_7BIT
)

	)

82 
	#WM8325_I2C
 ((0x6C)>>1)

	)

85 
	#INVERT_GTX_CLK_CFG
 1

	)

88 
	#APP_MBUF_ALLOCATION
 (2*64*1024)

	)

90 
	#APP_MBUFCLUSTERALLOCATION
 (2*128*1024)

	)

92 
	#APP_MACADDRESS
 "\x94\xDE\x80\x6B\x12\x07"

	)

94 
	#SET_BIT
(
ªg
, 
bô
, 
vÆ
Ë(vÆ?‘eg |1<<bô):‘eg &~(1<<bô)))

	)

96 
	#EPOCHOFFSET
 2208988800U

	)

98 
	#NTPRETRIES
 10

	)

100 
	#CLIENTHOSTNAME
 "Myrüd2"

	)

107 
πems_bsd√t_ifc⁄fig
 
	gifc⁄fig
 =

109 
RTEMS_BSP_NETWORK_DRIVER_NAME
,

110 
RTEMS_BSP_NETWORK_DRIVER_ATTACH
,

112 
NULL
,

113 
NULL
,

114 
APP_MACADDRESS
,

122 
NULL


125 
πems_bsd√t_c⁄fig
 
	gπems_bsd√t_c⁄fig
 =

127 &
ifc⁄fig
,

128 
πems_bsd√t_do_dh˝
,

130 
APP_MBUF_ALLOCATION
,

131 
APP_MBUFCLUSTERALLOCATION
,

132 
CLIENTHOSTNAME
,

133 
NULL
,

135 
NULL
,

136 {
NULL
},

137 {
NULL
},

145 
u32
 
comm⁄I2CEº‹H™dÀr
(
I2CM_SètusTy≥
 
i2cCommsEº‹
, u32 
¶aveAddr
, u32 
ªgAddr
);

148 
tyI2cC⁄fig
 
	gi2c2C⁄fig
 =

150 .
devi˚
 = 
IIC3_DEVICE
,

151 .
	gs˛Pö
 = 
I2C3_SCL
,

152 .
	gsdaPö
 = 
I2C3_SDA
,

153 .
	g•ìdKhz
 = 
I2C3_SPEED_KHZ_DEFAULT
,

154 .
	gaddªssSize
 = 
I2C3_ADDR_SIZE_DEFAULT
,

155 .
	gîr‹H™dÀr
 = &
comm⁄I2CEº‹H™dÀr
,

158 
u8
 
	gWM8325¥ŸocﬁWrôe
[] =

160 
S_ADDR_WR
,

161 
R_ADDR_H
,

162 
R_ADDR_L
,

163 
DATAW
,

164 
LOOP_MINUS_1


167 
u8
 
	gWM8325¥ŸocﬁRód
[] =

169 
S_ADDR_WR
,

170 
R_ADDR_H
,

171 
R_ADDR_L
,

172 
S_ADDR_RD
,

173 
DATAR
,

174 
LOOP_MINUS_1


188 
	$InôGpioEth
(
u8
 
övîtGtxClk
)

190 
	`DrvGpioSëMode
(
IO_TX_EN
 , 
D_GPIO_MODE_4
);

191 
	`DrvGpioSëMode
(
IO_TXER
 , 
D_GPIO_MODE_4
);

192 
	`DrvGpioSëMode
(
IO_TXD_0
 , 
D_GPIO_MODE_4
);

193 
	`DrvGpioSëMode
(
IO_TXD_1
 , 
D_GPIO_MODE_1
);

194 
	`DrvGpioSëMode
(
IO_TXD_2
 , 
D_GPIO_MODE_1
);

195 
	`DrvGpioSëMode
(
IO_TXD_3
 , 
D_GPIO_MODE_1
);

196 
	`DrvGpioSëMode
(
IO_TXD_4
 , 
D_GPIO_MODE_1
);

197 
	`DrvGpioSëMode
(
IO_TXD_5
 , 
D_GPIO_MODE_1
);

198 
	`DrvGpioSëMode
(
IO_TXD_6
 , 
D_GPIO_MODE_1
);

199 
	`DrvGpioSëMode
(
IO_TXD_7
 , 
D_GPIO_MODE_1
);

200 
	`DrvGpioSëMode
(
IO_125CLK
, 
D_GPIO_MODE_4
);

202 if(
övîtGtxClk
){

203 
	`DrvGpioSëMode
(
IO_GTXCK
 , 
D_GPIO_MODE_1
 | 
D_GPIO_DATA_INV_ON
);

204 
	`DrvGpioPadSë
(
IO_GTXCK
 , 
D_GPIO_PAD_DRIVE_2mA
 );

207 
	`DrvGpioSëMode
(
IO_GTXCK
 , 
D_GPIO_MODE_1
 );

208 
	`DrvGpioPadSë
(
IO_GTXCK
 , 
D_GPIO_PAD_DRIVE_2mA
 );

211 
	`DrvGpioSëMode
(
IO_TXCLK
 , 
D_GPIO_DIR_IN
 | 
D_GPIO_MODE_4
 );

212 
	`DrvGpioSëMode
(
IO_RXCLK
 , 
D_GPIO_DIR_IN
 | 
D_GPIO_MODE_4
 );

213 
	`DrvGpioSëMode
(
IO_RXDV
 , 
D_GPIO_DIR_IN
 | 
D_GPIO_MODE_4
);

214 
	`DrvGpioSëMode
(
IO_RXER
 , 
D_GPIO_DIR_IN
 | 
D_GPIO_MODE_4
);

215 
	`DrvGpioSëMode
(
IO_RXCOL
 , 
D_GPIO_DIR_IN
 | 
D_GPIO_MODE_4
);

216 
	`DrvGpioSëMode
(
IO_RXCRS
 , 
D_GPIO_DIR_IN
 | 
D_GPIO_MODE_4
);

217 
	`DrvGpioSëMode
(
IO_RXD_0
 , 
D_GPIO_DIR_IN
 | 
D_GPIO_MODE_1
);

218 
	`DrvGpioSëMode
(
IO_RXD_1
 , 
D_GPIO_DIR_IN
 | 
D_GPIO_MODE_1
);

219 
	`DrvGpioSëMode
(
IO_RXD_2
 , 
D_GPIO_DIR_IN
 | 
D_GPIO_MODE_1
);

220 
	`DrvGpioSëMode
(
IO_RXD_3
 , 
D_GPIO_DIR_IN
 | 
D_GPIO_MODE_1
);

221 
	`DrvGpioSëMode
(
IO_RXD_4
 , 
D_GPIO_DIR_IN
 | 
D_GPIO_MODE_1
);

222 
	`DrvGpioSëMode
(
IO_RXD_5
 , 
D_GPIO_DIR_IN
 | 
D_GPIO_MODE_3
);

223 
	`DrvGpioSëMode
(
IO_RXD_6
 , 
D_GPIO_DIR_IN
 | 
D_GPIO_MODE_3
);

224 
	`DrvGpioSëMode
(
IO_RXD_7
 , 
D_GPIO_DIR_IN
 | 
D_GPIO_MODE_3
);

226 
	`DrvGpioSëMode
(
IO_MDC
, 
D_GPIO_MODE_4
);

227 
	`DrvGpioSëMode
(
IO_MDIO
, 
D_GPIO_MODE_4
);

228 
	}
}

230 
u32
 
	$comm⁄I2CEº‹H™dÀr
(
I2CM_SètusTy≥
 
i2cCommsEº‹
, 
u32
 
¶aveAddr
, u32 
ªgAddr
)

232 
	`¥ötf
("ERROR HANDLER\n");

234 
¶aveAddr
 = slaveAddr;

235 
ªgAddr
 =ÑegAddr;

237  
i2cCommsEº‹
;

238 
	}
}

240 
	$EthPHYHWRe£t
()

242 
myVÆ
;

243 
u8
 
byãs
[2];

244 
I2CM_Devi˚
 
i2c3H™dÀ
;

246 
	`DrvI2cMInôFromC⁄fig
(&
i2c3H™dÀ
, &
i2c2C⁄fig
);

250 
	`DrvI2cMTønß˘i⁄
(&
i2c3H™dÀ
, 
WM8325_I2C
, 0x403F, 
WM8325¥ŸocﬁRód
, 
byãs
, 2);

251 
myVÆ
=(
byãs
[0]<<8) | bytes[1];

252 
myVÆ
=0x0480;

253 
byãs
[0]=(
myVÆ
 & 0xFF00) >> 8;

254 
byãs
[1]=(
myVÆ
 & 0xFF);

255 
	`DrvI2cMTønß˘i⁄
(&
i2c3H™dÀ
, 
WM8325_I2C
, 0x403F, 
WM8325¥ŸocﬁWrôe
, 
byãs
, 2);

256 
	`DrvI2cMTønß˘i⁄
(&
i2c3H™dÀ
, 
WM8325_I2C
, 0x403B, 
WM8325¥ŸocﬁWrôe
, 
byãs
, 2);

259 
	`DrvI2cMTønß˘i⁄
(&
i2c3H™dÀ
, 
WM8325_I2C
, 0x400C,
WM8325¥ŸocﬁRód
, 
byãs
, 2);

260 
myVÆ
=(
byãs
[0]<<8) | bytes[1];

261 
	`SET_BIT
(
myVÆ
, 3, 0);

262 
	`SET_BIT
(
myVÆ
, 7, 0);

263 
byãs
[0]=(
myVÆ
 & 0xFF00) >> 8;

264 
byãs
[1]=(
myVÆ
 & 0xFF);

265 
	`DrvI2cMTønß˘i⁄
(&
i2c3H™dÀ
, 
WM8325_I2C
, 0x400C, 
WM8325¥ŸocﬁWrôe
, 
byãs
, 2);

268 
	`u¶ìp
(500 * 1000);

271 
	`DrvI2cMTønß˘i⁄
(&
i2c3H™dÀ
, 
WM8325_I2C
, 0x400C, 
WM8325¥ŸocﬁRód
, 
byãs
, 2);

272 
myVÆ
=(
byãs
[0]<<8) | bytes[1];

273 
	`SET_BIT
(
myVÆ
, 7, 1);

274 
byãs
[0]=(
myVÆ
 & 0xFF00) >> 8;

275 
byãs
[1]=(
myVÆ
 & 0xFF);

276 
	`DrvI2cMTønß˘i⁄
(&
i2c3H™dÀ
, 
WM8325_I2C
, 0x400C, 
WM8325¥ŸocﬁWrôe
, 
byãs
, 2);

280 
	`u¶ìp
(100 * 1000);

281 
	}
}

283 
	$‰omTime2RTEMSTOD
(
tm
 *
time
, 
πems_time_of_day
* 
daytime
)

286 
daytime
->
yór
 = 
time
->
tm_yór
 + 1900;

287 
daytime
->
m⁄th
 = 
time
->
tm_m⁄
 + 1;

288 
daytime
->
day
 = 
time
->
tm_mday
;

289 
daytime
->
hour
 = 
time
->
tm_hour
;

290 
daytime
->
möuã
 = 
time
->
tm_mö
;

291 
daytime
->
£c⁄d
 = 
time
->
tm_£c
;

292 
daytime
->
ticks
 = 0;

293 
	}
}

296 
	$¥ötNëw‹kSèti°ics
()

298 
	`πems_bsd√t_show_if_°©s
();

299 
	`¥ötf
("***************Inet Routes****************\n");

300 
	`πems_bsd√t_show_öë_rouãs
();

301 
	}
}

304 *
	$√tw‹kTask1
(*
¨g
)

306 
	`UNUSED
(
¨g
);

308 
i
, 
s
, 
j
;

309 
sockaddr_ö
 
£rvî_addr
;

310 
ö_addr
 **
addr_li°
;

311 
ho°ít
* 
ho°
;

312 
sockÀn_t
 
ßddr_l
;

313 
msg
[48] = {0xe3, 0};

314 
πems_time_of_day
 
daytime
;

315 
tm
 
ªsu…
;

316 
time_t
 
tmô
;

319 
	`mem£t
(&
£rvî_addr
, 0, (server_addr));

321 
s
 = 
	`sockë
(
PF_INET
, 
SOCK_DGRAM
, 
IPPROTO_UDP
);

322 i‡(
s
 < 0)

324 
	`¥ötf
("\nERROR opening socket\n");

325 
	`±hªad_exô
(0);

328 
ho°
 = 
	`gëho°by«me
(
NTPSERVERADDRESS
);

329 if(
ho°
 !
NULL
)

331 
addr_li°
 = (
ö_addr
**)
ho°
->
h_addr_li°
;

332 
	`¥ötf
("\nResolvingÇameÅo IPáddresses: \n");

333 
i
 = 0; 
addr_li°
[i] !
NULL
; i++){

334 
	`¥ötf
("\n *Ho° Addªs†%d: %s\n", 
i
, 
	`öë_¡ﬂ
(*
addr_li°
[i]));

336 
	`¥ötf
("\n");

338 
£rvî_addr
.
sö_Ámûy
 = 
AF_INET
;

339 
£rvî_addr
.
sö_addr
 = *
addr_li°
[0];

340 
£rvî_addr
.
sö_p‹t
 = 
	`ht⁄s
(123);

344 
	`¥ötf
("\nERROR: CannotÑesolve hostname!\n");

345 
	`±hªad_exô
(0);

348 
j
 = 0;

351 
i
 = 
	`£ndto
(
s
, 
msg
, (msg), 0, (
sockaddr
*)&
£rvî_addr
, (server_addr));

352 if(
i
 < 0){

353 
	`¥ötf
("\nSNTPÑeque°Åÿ%†Áûed\n", 
	`öë_¡ﬂ
(
£rvî_addr
.
sö_addr
));

357 
	`¥ötf
("\nSNTPÑeque°Åÿ%s: %d byã†£¡\n", 
	`öë_¡ﬂ
(
£rvî_addr
.
sö_addr
), 
i
);

358 
	`¶ìp
(5);

360 
ßddr_l
 = (
£rvî_addr
);

361 
i
 = 
	`ªcv‰om
(
s
, 
msg
, (msg), 
MSG_DONTWAIT
, (
sockaddr
 * 
__ª°ri˘
)&
£rvî_addr
, &
ßddr_l
);

362 i‡(
i
 !(
msg
)){

363 
	`¥ötf
("\nSNTPÑe•⁄£ from %†Áûed\n", 
	`öë_¡ﬂ
(
£rvî_addr
.
sö_addr
));

365 
	`¥ötf
("\nSNTPÑe•⁄£ from %†: %d byã†ª˚ived\n", 
	`öë_¡ﬂ
(
£rvî_addr
.
sö_addr
), 
i
);

368 
j
 ++;

369 } (
j
 < 
NTPRETRIES
Ë&& (
i
 !(
msg
)));

371 i‡(
j
 < 
NTPRETRIES
) {

373 
tmô
 = 
	`¡ohl
(((*)
msg
)[8]);

375 
tmô
 -
EPOCHOFFSET
;

377 i‡(
	`loˇ…ime_r
((c⁄° 
time_t
*)&
tmô
, &
ªsu…
)) {

378 
	`‰omTime2RTEMSTOD
(&
ªsu…
, &
daytime
);

379 
i
 = 
	`πems_˛ock_£t
(&
daytime
);

380 
	`¥ötf
("\ƒãms_˛ock_£à%†\n", 
	`πems_°©us_ãxt
(
i
));

381 
	`¥ötf
("\nCuºíàTimêo‡Day: %s\n", 
	`˘ime
(&
tmô
));

386 
	`¥ötf
("\nNTP SîvîÑërõ†%dÉx˚eded\n", 
NTPRETRIES
);

388 
	`±hªad_exô
(0);

389  
NULL
;

390 
	}
}

392 *
	$POSIX_Inô
(*
¨gs
)

394 
	`UNUSED
(
¨gs
);

396 
ªs
;

397 
±hªad_t
 
thªad1
;

398 
±hªad_©å_t
 
©å
;

399 
πems_gªth_gbô_hw_∑øms
 
∑øms
;

401 
	`öôClocksAndMem‹y
();

402 
	`OsDrvTimîInô
();

403 
	`EthPHYHWRe£t
();

404 
	`InôGpioEth
(
INVERT_GTX_CLK_CFG
);

407 
∑øms
.
¥i‹ôy
 = 
ETH_ISR_PRIORITY
;

408 
∑øms
.
txcou¡
 = 
TDA_COUNT
;

409 
∑øms
.
rxcou¡
 = 
RDA_COUNT
;

410 
∑øms
.
gbô_check
 = 
FALSE
;

411 
∑øms
.
ªad_fun˘i⁄
 = 
NULL
;

412 
∑øms
.
wrôe_fun˘i⁄
 = 
NULL
;

415 
ªs
 = 
	`πems_À⁄_gªth_gbô_drivî_£tup
(&
∑øms
);

416 
	`¥ötf
("\ƒãms_À⁄_gªth_gbô_drivî_£tu∞%†\n", 
	`πems_°©us_ãxt
(
ªs
));

417 
	`as£π
(
ªs
 =
RTEMS_SUCCESSFUL
);

419 
ªs
 = 
	`πems_bsd√t_öôülize_√tw‹k
();

420 
	`as£π
(
ªs
 =
RTEMS_SUCCESSFUL
);

422 
	`¥ötNëw‹kSèti°ics
();

424 if(
	`±hªad_©å_öô
(&
©å
) !=0) {

425 
	`¥ötf
("pthread_attr_initÉrror\n");

427 if(
	`±hªad_©å_£töhîôsched
(&
©å
, 
PTHREAD_EXPLICIT_SCHED
) != 0) {

428 
	`¥ötf
("pthread_attr_setinheritschedÉrror\n");

430 if(
	`±hªad_©å_£tschedpﬁicy
(&
©å
, 
SCHED_RR
) != 0) {

431 
	`¥ötf
("pthread_attr_setschedpolicyÉrror\n");

433 
ªs
 = 
	`±hªad_¸óã
(&
thªad1
, &
©å
, &
√tw‹kTask1
, 
NULL
);

434 i‡(
ªs
) {

435 
	`¥ötf
("Thªad 1 cª©i⁄ faûed: %d\n", 
ªs
);

438 if–
	`±hªad_joö
(
thªad1
, 
NULL
) )

439 
	`¥ötf
("pthread_joinÉrror!\n");

441 
	`exô
(0);

442 
	}
}

	@HowTo/rtems_apps/simpleRTEMS_NTPClient/leon/rtems_config.h

8 #i‚de‡
_RTEMS_CONFIG_H_


9 
	#_RTEMS_CONFIG_H_


	)

13 
	~"AµC⁄fig.h
"

14 
	~"ÁèlExãnsi⁄.h
"

18 #i‡!
deföed
 (
__CONFIG__
)

19 
	#__CONFIG__


	)

25 
	#CONFIGURE_INIT


	)

27 #i‚de‡
RTEMS_POSIX_API


28 
	#RTEMS_POSIX_API


	)

31 
	#CONFIGURE_MICROSECONDS_PER_TICK
 1000

	)

33 
	#CONFIGURE_TICKS_PER_TIMESLICE
 10

	)

35 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

37 
	#CONFIGURE_APPLICATION_NEEDS_CLOCK_DRIVER


	)

39 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

41 
	#CONFIGURE_MINIMUM_TASK_STACK_SIZE
 4096

	)

43 
	#CONFIGURE_MAXIMUM_TASKS
 4

	)

45 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 4

	)

47 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 8

	)

49 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 8

	)

51 
	#CONFIGURE_MAXIMUM_POSIX_SEMAPHORES
 8

	)

53 
	#CONFIGURE_MAXIMUM_SEMAPHORES
 8

	)

55 
	#CONFIGURE_MAXIMUM_POSIX_MESSAGE_QUEUES
 8

	)

57 
	#CONFIGURE_MAXIMUM_POSIX_TIMERS
 4

	)

59 
	#CONFIGURE_MAXIMUM_TIMERS
 4

	)

61 
	#CONFIGURE_LIBIO_MAXIMUM_FILE_DESCRIPTORS
 30

	)

64 
	#CONFIGURE_MAXIMUM_USER_EXTENSIONS
 1

	)

65 
	#CONFIGURE_INITIAL_EXTENSIONS
 { .
Áèl
 = 
F©Æ_exãnsi⁄
 }

	)

72 *
POSIX_Inô
 (*
¨gs
);

74 
	~<πems/c⁄fdefs.h
>

82 
BSP_SET_CLOCK
(
DEFAULT_OSC_CLOCK_KHZ
, 
DEFAULT_APP_CLOCK_KHZ
, 1, 1, 
DEFAULT_RTEMS_CSS_LOS_CLOCKS
 | 
DEV_CSS_GETH
 | 
DEV_CSS_I2C0
, 
DEV_UPA_SHAVE_L2
,0,0,0);

84 
BSP_SET_L2C_CONFIG
(1, 
DEFAULT_RTEMS_L2C_REPLACEMENT_POLICY
, 
DEFAULT_RTEMS_L2C_LOCKED_WAYS
,
DEFAULT_RTEMS_L2C_MODE
, 0, 0);

	@HowTo/rtems_apps/simpleRTEMS_posix/leon/app_config.c

11 
	~<OsDrvC¥.h
>

12 
	~<OsDrvShaveL2Cache.h
>

13 
	~"≠p_c⁄fig.h
"

17 
	#L2CACHE_CFG
 (
SHAVE_L2CACHE_NORMAL_MODE
)

	)

29 
	$öôClocksAndMem‹y
()

31 
u32
 
sc
;

32 
tyAuxClkDividîCfg
 
auxClkAŒOn
[] =

34 {
AUX_CLK_MASK_UART
, 
CLK_SRC_REFCLK0
, 96, 625},

39 
	`OsDrvC¥Inô
();

40 
	`OsDrvC¥O≥n
();

41 
	`OsDrvC¥AuxClockAºayC⁄fig
(
auxClkAŒOn
);

44 
sc
 = 
	`OsDrvShaveL2CacheInô
(
L2CACHE_CFG
);

45 if(
sc
)

46  
sc
;

49 
∑πôi⁄_id
;

50 
	`OsDrvShaveL2CGëP¨tôi⁄
(
SHAVEPART256KB
, &
∑πôi⁄_id
);

53 
sc
 = 
	`OsDrvShaveL2CacheAŒoˇãSëP¨tôi⁄s
();

54 if(
sc
)

55  
sc
;

58 
i
 = 0; i < 12; i++)

60 
	`OsDrvShaveL2CSëN⁄WödowedP¨tôi⁄
(
i
, 0, 
NON_WINDOWED_DATA_PARTITION
);

61 
	`OsDrvShaveL2CSëN⁄WödowedP¨tôi⁄
(
i
, 0, 
NON_WINDOWED_INSTRUCTIONS_PARTITION
);

64 
	`OsDrvShaveL2CacheP¨tôi⁄InvÆid©e
(0);

67 
	}
}

	@HowTo/rtems_apps/simpleRTEMS_posix/leon/app_config.h

9 #i‚de‡
_APP_CONFIG_H_


10 
	#_APP_CONFIG_H_


	)

17 
	#DEFAULT_APP_CLOCK_KHZ
 266000

	)

18 
	#DEFAULT_OSC_CLOCK_KHZ
 12000

	)

19 
	#BIGENDIANMODE
 (0x01000786)

	)

26 
öôClocksAndMem‹y
();

	@HowTo/rtems_apps/simpleRTEMS_posix/leon/main.c

11 
	~<°dlib.h
>

12 
	~<°dio.h
>

13 
	~<°rög.h
>

14 
	~<πems.h
>

15 
	~<πems/b•Io.h
>

16 
	~"πems_c⁄fig.h
"

26 
	grc1
, 
	grc2
;

27 
	gcou¡îs
[2]={0,0};

28 
±hªad_t
 
	gthªad1
, 
	gthªad2
;

29 
£m_t
 
	g£m
;

33 *
fun˘i⁄C
(*
Àd
);

34 *
fun˘i⁄D
(*
Àd
);

38 *
	$POSIX_Inô
 (*
¨gs
)

40 
	`UNUSED
(
¨gs
);

42 
±hªad_©å_t
 
©å
;

44 
	`öôClocksAndMem‹y
();

45 
	`¥ötf
 ("\n");

46 
	`¥ötf
 ("RTEMS POSIX Started\n");

48 if(
	`±hªad_©å_öô
(&
©å
) !=0) {

49 
	`¥ötf
("pthread_attr_initÉrror\n");

51 if(
	`±hªad_©å_£töhîôsched
(&
©å
, 
PTHREAD_EXPLICIT_SCHED
) != 0) {

52 
	`¥ötf
("pthread_attr_setinheritschedÉrror\n");

54 if(
	`±hªad_©å_£tschedpﬁicy
(&
©å
, 
SCHED_RR
) != 0) {

55 
	`¥ötf
("pthread_attr_setschedpolicyÉrror\n");

58 if(
	`£m_öô
(&
£m
, 0, 0) == -1) {

59 
	`¥ötf
("sem_initÉrror\n");

62 i‡((
rc1
=
	`±hªad_¸óã
–&
thªad1
, &
©å
, &
fun˘i⁄C
,&
cou¡îs
[0]))) {

63 
	`¥ötf
("Thªad 1 cª©i⁄ faûed: %d\n", 
rc1
);

66 
	`¥ötf
("Thread 1 created\n");

69 if((
rc2
=
	`±hªad_¸óã
–&
thªad2
, &
©å
, &
fun˘i⁄D
,&
cou¡îs
[1]))) {

70 
	`¥ötf
("Thªad 2 cª©i⁄ faûed: %d\n", 
rc2
);

73 
	`¥ötf
("Thread 2 created\n");

76 if(
	`±hªad_joö
–
thªad1
, 
NULL
)) {

77 
	`¥ötf
("pthread_joinÉrror!\n");

79 if(
	`±hªad_joö
–
thªad2
, 
NULL
)) {

80 
	`¥ötf
("pthread_joinÉrror!\n");

83 
	`exô
(0);

84  
NULL
;

85 
	}
}

87 *
	$fun˘i⁄C
(*
˙t
)

89 vﬁ©ûê*
˙tI¡
 =(*)
˙t
;

92 *
˙tI¡
=*cntInt + 1;

93 
	`¥ötf
("C: %d\n", *
˙tI¡
);

95 
	}
}

97 *
	$fun˘i⁄D
(*
˙t
)

99 vﬁ©ûê*
˙tI¡
 =(*)
˙t
;

102 *
˙tI¡
=*cntInt + 1;

103 
	`¥ötf
("D: %d\n", *
˙tI¡
);

105 
	}
}

	@HowTo/rtems_apps/simpleRTEMS_posix/leon/rtems_config.h

8 #i‚de‡
_RTEMS_CONFIG_H_


9 
	#_RTEMS_CONFIG_H_


	)

13 
	~"≠p_c⁄fig.h
"

14 
	~"DrvC¥.h
"

15 
	~"ÁèlExãnsi⁄.h
"

17 #i‡
deföed
(
__RTEMS__
)

19 #i‡!
deföed
 (
__CONFIG__
)

20 
	#__CONFIG__


	)

25 
	#CONFIGURE_INIT


	)

27 #i‚de‡
RTEMS_POSIX_API


28 
	#RTEMS_POSIX_API


	)

31 
	#CONFIGURE_MICROSECONDS_PER_TICK
 1000

	)

33 
	#CONFIGURE_TICKS_PER_TIMESLICE
 10

	)

35 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

37 
	#CONFIGURE_APPLICATION_NEEDS_CLOCK_DRIVER


	)

39 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

41 
	#CONFIGURE_MINIMUM_TASK_STACK_SIZE
 4096

	)

43 
	#CONFIGURE_MAXIMUM_TASKS
 4

	)

45 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 4

	)

47 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 8

	)

49 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 8

	)

51 
	#CONFIGURE_MAXIMUM_POSIX_SEMAPHORES
 8

	)

53 
	#CONFIGURE_MAXIMUM_POSIX_MESSAGE_QUEUES
 8

	)

55 
	#CONFIGURE_MAXIMUM_POSIX_TIMERS
 4

	)

57 
	#CONFIGURE_MAXIMUM_TIMERS
 4

	)

60 
	#CONFIGURE_MAXIMUM_USER_EXTENSIONS
 1

	)

61 
	#CONFIGURE_INITIAL_EXTENSIONS
 { .
Áèl
 = 
F©Æ_exãnsi⁄
 }

	)

68 *
POSIX_Inô
 (*
¨gs
);

70 
	~<πems/c⁄fdefs.h
>

78 
BSP_SET_CLOCK
(
DEFAULT_OSC_CLOCK_KHZ
, 
DEFAULT_APP_CLOCK_KHZ
, 1, 1, 
DEFAULT_RTEMS_CSS_LOS_CLOCKS
, 
DEFAULT_RTEMS_MSS_LRT_CLOCKS
,
DEV_UPA_SHAVE_L2
,0,0);

80 
BSP_SET_L2C_CONFIG
(0, 
DEFAULT_RTEMS_L2C_REPLACEMENT_POLICY
, 
DEFAULT_RTEMS_L2C_LOCKED_WAYS
,
DEFAULT_RTEMS_L2C_MODE
, 0, 0);

	@HowTo/rtems_apps/simpleRTEMS_sdCard/leon/app_config.c

11 
	~<OsDrvC¥.h
>

12 
	~<OsDrvShaveL2Cache.h
>

13 
	~"≠p_c⁄fig.h
"

17 
	#L2CACHE_CFG
 (
SHAVE_L2CACHE_NORMAL_MODE
)

	)

30 
	$öôClocksAndMem‹y
()

32 
u32
 
sc
;

33 
tyAuxClkDividîCfg
 
auxClkAŒOn
[] =

35 {
AUX_CLK_MASK_UART
, 
CLK_SRC_REFCLK0
, 96, 625},

36 {
AUX_CLK_MASK_SDIO
, 
CLK_SRC_PLL0
, 1, 2},

41 
	`OsDrvC¥Inô
();

42 
	`OsDrvC¥O≥n
();

43 
	`OsDrvC¥AuxClockAºayC⁄fig
(
auxClkAŒOn
);

46 
sc
 = 
	`OsDrvShaveL2CacheInô
(
L2CACHE_CFG
);

47 if(
sc
)

48  
sc
;

51 
∑πôi⁄_id
;

52 
	`OsDrvShaveL2CGëP¨tôi⁄
(
SHAVEPART256KB
, &
∑πôi⁄_id
);

55 
sc
 = 
	`OsDrvShaveL2CacheAŒoˇãSëP¨tôi⁄s
();

56 if(
sc
)

57  
sc
;

59 
	`OsDrvShaveL2CacheP¨tôi⁄InvÆid©e
(0);

61 
	}
}

	@HowTo/rtems_apps/simpleRTEMS_sdCard/leon/app_config.h

9 #i‚de‡
_APP_CONFIG_H_


10 
	#_APP_CONFIG_H_


	)

18 
	#PLL_DESIRED_FREQ_KHZ
 500000

	)

20 
	#DEFAULT_OSC0_KHZ
 12000

	)

21 
	#BIGENDIANMODE
 (0x01000786)

	)

30 
öôClocksAndMem‹y
();

	@HowTo/rtems_apps/simpleRTEMS_sdCard/leon/main.c

11 
	~<°dlib.h
>

12 
	~<°dio.h
>

13 
	~<°rög.h
>

14 
	~<πems.h
>

15 
	~<πems/b•Io.h
>

16 
	~<f˙é.h
>

17 
	~<mv_ty≥s.h
>

18 
	~<πems/fsmou¡.h
>

19 
	~<πems/bd∑π.h
>

20 
	~<OsDrvC¥.h
>

21 
	~<OsDrvSdio.h
>

22 
	~"πems_c⁄fig.h
"

23 
	~<OsBrdMv0182.h
>

24 
	~<DrvGpio.h
>

25 
	~<as£π.h
>

29 
	#BUFFER_SIZE
 (1024*1024*5)

	)

30 
	#DEFAULT_SDIO_INT_PRIORITY
 10

	)

31 
	#SDIO_SLOT_USED
 1

	)

32 
	#SDIO_DEVNAME_USED
 "/dev/sdc0"

	)

41 c⁄° 
πems_f°ab_íåy
 
	gfs_èbÀ
 [] = {

43 .
sour˚
 = "/dev/sdc0",

44 .
	gèrgë
 = "/mnt/sdcard",

45 .
	gty≥
 = "dosfs",

46 .
	g›ti⁄s
 = 
RTEMS_FILESYSTEM_READ_WRITE
,

47 .
	gªp‹t_ªas⁄s
 = 
RTEMS_FSTAB_NONE
,

48 .
	gab‹t_ªas⁄s
 = 
RTEMS_FSTAB_OK


51 .
	gsour˚
 = "/dev/sdc01",

52 .
	gèrgë
 = "/mnt/sdcard",

53 .
	gty≥
 = "dosfs",

54 .
	g›ti⁄s
 = 
RTEMS_FILESYSTEM_READ_WRITE
,

55 .
	gªp‹t_ªas⁄s
 = 
RTEMS_FSTAB_NONE
,

56 .
	gab‹t_ªas⁄s
 = 
RTEMS_FSTAB_NONE


60 
u8
 
	gwrôe_buf„r
[
BUFFER_SIZE
];

61 
u8
 
	gªad_buf„r
[
BUFFER_SIZE
];

65 *
sdC¨dExam∂e
(*
¨g
);

70 *
	$POSIX_Inô
 (*
¨gs
)

72 
	`UNUSED
(
¨gs
);

74 
±hªad_©å_t
 
©å
;

75 
°©us
, 
rc1
;

76 
±hªad_t
 
thªad1
;

77 
πems_°©us_code
 
sc
;

79 
osDrvSdioE¡rõs_t
 
öfo
 = { 1,

83 
SDIO_SDR50
,

84 
NULL
}}};

86 c⁄° 
tyOsBﬂrd0182C⁄figuøti⁄
 
brdC⁄fig
[] =

89 .
ty≥
 = 
MV182_END
,

90 .
vÆue
 = 0

94 
	`¥ötf
 ("\nRTEMS POSIX Started\n");

96 
	`öôClocksAndMem‹y
();

99 
°©us
 = 
	`osBﬂrd0182Inôüli£
((
tyOsBﬂrd0182C⁄figuøti⁄
*Ë
brdC⁄fig
);

100 
	`¥ötf
("\nosBﬂrd0182Inôüli£ %d\n", 
°©us
);

102 if(
	`±hªad_©å_öô
(&
©å
) !=0)

103 
	`¥ötf
("pthread_attr_initÉrror\n");

105 i‡(
	`±hªad_©å_£töhîôsched
(&
©å
, 
PTHREAD_EXPLICIT_SCHED
) != 0)

106 
	`¥ötf
("pthread_attr_setinheritschedÉrror\n");

108 if(
	`±hªad_©å_£tschedpﬁicy
(&
©å
, 
SCHED_RR
) != 0)

109 
	`¥ötf
("pthread_attr_setschedpolicyÉrror\n");

112 
	`¥ötf
("\nSdio driver initialising \n");

113 
°©us
 = 
	`OsDrvSdioInô
(&
öfo
);

114 
	`¥ötf
("\nOsDrvSdioInô s¯%†\n", 
	`πems_°©us_ãxt
(
°©us
));

116 
sc
 = 
	`πems_bd∑π_ªgi°î_‰om_disk
(
SDIO_DEVNAME_USED
);

117 
	`¥ötf
("\ƒãms_bd∑π_ªgi°î_‰om_disk s¯%†\n", 
	`πems_°©us_ãxt
(
sc
));

120 
sc
 = 
	`πems_fsmou¡
–
fs_èbÀ
, (fs_èbÀ)/(fs_èbÀ[0]), 
NULL
);

121 
	`¥ötf
("\nMou¡ög FûêSy°em %†\n", 
	`πems_°©us_ãxt
(
sc
));

123 i‡((
rc1
 = 
	`±hªad_¸óã
–&
thªad1
, &
©å
, &
sdC¨dExam∂e
,
NULL
)))

124 
	`¥ötf
("Thªad 1 cª©i⁄ faûed: %d\n", 
rc1
);

126 
	`¥ötf
("\nThread 1 created\n");

128 i‡(
	`±hªad_joö
(
thªad1
, 
NULL
))

129 
	`¥ötf
("pthread_joinÉrror!\n");

130 
	`exô
(0);

131 
	}
}

133 
	$fûlInBuf„rs
()

135 
i
 = 0;

137 
i
 = 0; i < 
BUFFER_SIZE
; i++)

140 
wrôe_buf„r
[
i
] = i+1;

142 
ªad_buf„r
[
i
] = 0;

144 
	}
}

146 *
	$sdC¨dExam∂e
(*
¨g
)

148 
	`UNUSED
(
¨g
);

150 
fd
 = 0;

151 
πems_°©us_code
 
sc
;

152 c⁄° 
fûe
[] = "/mnt/sdcard/myfile";

155 
	`fûlInBuf„rs
();

158 
	`¥ötf
("\nCª©ög fûê%s\n", 
fûe
);

159 
fd
 = 
	`¸ót
(
fûe
, 
S_IRWXU
 | 
S_IRWXG
 | 
S_IRWXO
 ) ;

160 
	`as£π
(
fd
);

162 
	`¥ötf
("\nWrôög %d byã†tÿfûe\n", 
BUFFER_SIZE
);

163 
sc
 = 
	`wrôe
(
fd
, 
wrôe_buf„r
, 
BUFFER_SIZE
);

164 
	`as£π
(
sc
);

166 
	`¥ötf
("\nPerform fsync\n");

167 
sc
 = 
	`fsync
(
fd
);

168 
	`as£π
((
sc
 == 0));

170 
	`¥ötf
("\nClosing file\n");

171 
sc
 = 
	`˛o£
(
fd
);

172 
	`as£π
((
sc
 == 0));

175 
	`¥ötf
("\nO≥nög fûê%†\n", 
fûe
);

176 
fd
 = 
	`›í
("/m¡/sdˇrd/myfûe", 
O_RDWR
);

177 
	`as£π
(
fd
);

179 
	`¥ötf
("\nRód %d ch¨a˘îs\n", 
BUFFER_SIZE
);

180 
sc
 = 
	`ªad
(
fd
, 
ªad_buf„r
, 
BUFFER_SIZE
);

181 
	`as£π
(
sc
);

183 
sc
 = 
	`˛o£
(
fd
);

185 
	`¥ötf
("\nVerifying data...\n");

187 
	`as£π
(
	`memcmp
(
ªad_buf„r
, 
wrôe_buf„r
, 
BUFFER_SIZE
) == 0);

190 
sc
 = 
	`unmou¡
("/mnt/sdcard");

191 i‡(
sc
 == 0)

192 
	`¥ötf
("\nCard successfully unmounted\n\n");

194 
	`¥ötf
("\nEº‹ unmou¡ög c¨d %s\n", 
	`πems_°©us_ãxt
(
sc
));

195 
	`as£π
(
sc
 == 0);

197 
	`±hªad_exô
(0);

198  
NULL
;

199 
	}
}

	@HowTo/rtems_apps/simpleRTEMS_sdCard/leon/rtems_config.h

8 #i‚de‡
_RTEMS_CONFIG_H_


9 
	#_RTEMS_CONFIG_H_


	)

13 
	~"≠p_c⁄fig.h
"

14 
	~"ÁèlExãnsi⁄.h
"

19 #i‡
deföed
(
__RTEMS__
)

21 #i‡!
deföed
 (
__CONFIG__
)

22 
	#__CONFIG__


	)

25 
	#CONFIGURE_INIT


	)

27 #i‚de‡
RTEMS_POSIX_API


28 
	#RTEMS_POSIX_API


	)

31 
	#CONFIGURE_MICROSECONDS_PER_TICK
 1000

	)

33 
	#CONFIGURE_TICKS_PER_TIMESLICE
 50

	)

35 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

37 
	#CONFIGURE_APPLICATION_NEEDS_CLOCK_DRIVER


	)

39 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

41 
	#CONFIGURE_MINIMUM_TASK_STACK_SIZE
 (8192)

	)

43 
	#CONFIGURE_MAXIMUM_TASKS
 20

	)

45 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 5

	)

47 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 8

	)

49 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 8

	)

51 
	#CONFIGURE_MAXIMUM_POSIX_SEMAPHORES
 8

	)

53 
	#CONFIGURE_MAXIMUM_POSIX_MESSAGE_QUEUES
 8

	)

55 
	#CONFIGURE_MAXIMUM_MESSAGE_QUEUES
 8

	)

57 
	#CONFIGURE_MAXIMUM_POSIX_TIMERS
 4

	)

59 
	#CONFIGURE_MAXIMUM_TIMERS
 4

	)

61 
	#CONFIGURE_USE_IMFS_AS_BASE_FILESYSTEM


	)

63 
	#CONFIGURE_FILESYSTEM_DOSFS


	)

65 
	#CONFIGURE_MAXIMUM_DRIVERS
 10

	)

68 
	#CONFIGURE_MAXIMUM_SEMAPHORES
 
	`πems_ªsour˚_u∆imôed
(5)

	)

70 
	#CONFIGURE_LIBIO_MAXIMUM_FILE_DESCRIPTORS
 30

	)

72 
	#CONFIGURE_APPLICATION_NEEDS_LIBBLOCK


	)

74 
	#CONFIGURE_POSIX_INIT_TASKS_TABLE


	)

76 
	#CONFIGURE_BDBUF_MAX_READ_AHEAD_BLOCKS
 (16)

	)

78 
	#CONFIGURE_BDBUF_MAX_WRITE_BLOCKS
 (64)

	)

80 
	#CONFIGURE_BDBUF_BUFFER_MIN_SIZE
 (512)

	)

82 
	#CONFIGURE_BDBUF_BUFFER_MAX_SIZE
 (32 * 1024)

	)

84 
	#CONFIGURE_BDBUF_CACHE_MEMORY_SIZE
 (4 * 1024 * 1024)

	)

86 *
POSIX_Inô
 (*
¨gs
);

89 
	#CONFIGURE_MAXIMUM_USER_EXTENSIONS
 1

	)

91 
	#CONFIGURE_INITIAL_EXTENSIONS
 { .
Áèl
 = 
F©Æ_exãnsi⁄
 }

	)

93 
	~<πems/c⁄fdefs.h
>

102 
BSP_SET_CLOCK
(
DEFAULT_OSC0_KHZ
, 
PLL_DESIRED_FREQ_KHZ
, 1, 1, 
DEFAULT_RTEMS_CSS_LOS_CLOCKS
 | 
DEV_CSS_SDIO
, 0,0,0, 0);

104 
BSP_SET_L2C_CONFIG
(1,
DEFAULT_RTEMS_L2C_REPLACEMENT_POLICY
, 
DEFAULT_RTEMS_L2C_LOCKED_WAYS
,
DEFAULT_RTEMS_L2C_MODE
, 0, 0);

	@HowTo/rtems_apps/simpleRTEMS_shave/leon/app_config.c

11 
	~<OsDrvC¥.h
>

12 
	~<OsDrvShaveL2Cache.h
>

13 
	~"≠p_c⁄fig.h
"

17 
	#L2CACHE_CFG
 (
SHAVE_L2CACHE_NORMAL_MODE
)

	)

30 
	$öôClocksAndMem‹y
()

32 
u32
 
sc
;

33 
tyAuxClkDividîCfg
 
auxClkAŒOn
[] =

35 {
AUX_CLK_MASK_UART
, 
CLK_SRC_REFCLK0
, 96, 625},

40 
	`OsDrvC¥Inô
();

41 
	`OsDrvC¥O≥n
();

42 
	`OsDrvC¥AuxClockAºayC⁄fig
(
auxClkAŒOn
);

45 
sc
 = 
	`OsDrvShaveL2CacheInô
(
L2CACHE_CFG
);

46 if(
sc
)

47  
sc
;

50 
∑πôi⁄_id
;

51 
	`OsDrvShaveL2CGëP¨tôi⁄
(
SHAVEPART256KB
, &
∑πôi⁄_id
);

54 
sc
 = 
	`OsDrvShaveL2CacheAŒoˇãSëP¨tôi⁄s
();

55 if(
sc
)

56  
sc
;

59 
i
 = 0; i < 12; i++)

61 
	`OsDrvShaveL2CSëN⁄WödowedP¨tôi⁄
(
i
, 0, 
NON_WINDOWED_DATA_PARTITION
);

62 
	`OsDrvShaveL2CSëN⁄WödowedP¨tôi⁄
(
i
, 0, 
NON_WINDOWED_INSTRUCTIONS_PARTITION
);

65 
	`OsDrvShaveL2CacheP¨tôi⁄InvÆid©e
(0);

67 
	}
}

	@HowTo/rtems_apps/simpleRTEMS_shave/leon/app_config.h

9 #i‚de‡
_APP_CONFIG_H_


10 
	#_APP_CONFIG_H_


	)

18 
	#APP_UPA_CLOCKS
 ((1 << 
UPA_SH6
) | \

19 (1 << 
UPA_SH7
) | \

20 (1 << 
UPA_SHAVE_L2
) | \

21 (1 << 
UPA_CDMA
) | \

22 (1 << 
UPA_CTRL
Ë)

	)

24 
	#APP_MSS_CLOCKS
 (1 << 
MSS_MXI_CTRL
)

	)

27 
	#DEFAULT_APP_CLOCK_KHZ
 266000

	)

28 
	#DEFAULT_OSC_CLOCK_KHZ
 12000

	)

38 
öôClocksAndMem‹y
();

	@HowTo/rtems_apps/simpleRTEMS_shave/leon/main.c

11 
	~<°dlib.h
>

12 
	~<°dio.h
>

13 
	~<°rög.h
>

14 
	~<î∫o.h
>

15 
	~<πems.h
>

16 
	~<πems/b•Io.h
>

17 
	~"OsDrvSvu.h
"

18 
	~"swcFømeTy≥s.h
"

19 
	~"as£π.h
"

20 
	~"πems_c⁄fig.h
"

25 
	#CMX_FRAMES
 
	`__©åibuã__
((
	`£˘i⁄
(".cmx.d©a")))

	)

26 
	#FRAME_WIDTH
 80

	)

27 
	#FRAME_HEIGHT
 60

	)

31 
u8
 
öputFøme
;

32 
u32
 
bπhYASM6_°¨t
;

33 
u32
 
bπhYASM7_°¨t
;

37 
u8
 
	gSHAVE_NUMBER
[2] = {6, 7};

38 
	grc1
, 
	grc2
;

39 
±hªad_t
 
	gthªad1
, 
	gthªad2
;

40 
£m_t
 
	g£m1
, 
	g£m2
;

41 
u8
 
CMX_FRAMES
 
	gouçutFøme
[
FRAME_WIDTH
 * 
FRAME_HEIGHT
 * 3 / 2];

42 
‰ameS≥c
 
	gã°FømeS≥c
;

43 
‰ameBuf„r
 
	göBuf„r
;

44 
‰ameBuf„r
 
	goutBuf„r
;

45 
osDrvSvuH™dÀr_t
 
	gh™dÀr
[2];

49 * 
fun˘i⁄1
(*
unu£d
);

50 * 
fun˘i⁄2
(*
unu£d
);

51 * 
h™dÀr1
(
u32
 
¨g
);

52 * 
h™dÀr2
(
u32
 
¨g
);

59 *
	$POSIX_Inô
 (*
¨gs
)

61 
	`UNUSED
(
¨gs
);

63 
±hªad_©å_t
 
©å
;

65 
	`öôClocksAndMem‹y
();

66 
	`OsDrvSvuInô
();

68 
	`¥ötf
 ("\n");

69 
	`¥ötf
 ("RTEMS POSIX Started\n");

71 if(
	`±hªad_©å_öô
(&
©å
) !=0) {

72 
	`¥ötf
("pthread_attr_initÉrror");

74 if(
	`±hªad_©å_£töhîôsched
(&
©å
, 
PTHREAD_EXPLICIT_SCHED
) != 0) {

75 
	`¥ötf
("pthread_attr_setinheritschedÉrror");

77 if(
	`±hªad_©å_£tschedpﬁicy
(&
©å
, 
SCHED_RR
) != 0) {

78 
	`¥ötf
("pthread_attr_setschedpolicyÉrror");

81 if(
	`£m_öô
(&
£m1
, 0, 0) == -1) {

82 
	`¥ötf
("sem_initÉrror\n");

84 if(
	`£m_öô
(&
£m2
, 0, 0) == -1) {

85 
	`¥ötf
("sem_initÉrror\n");

88 if–(
rc1
=
	`±hªad_¸óã
–&
thªad1
, &
©å
, &
fun˘i⁄1
, 
NULL
)) ){

89 
	`¥ötf
("Thªad 1 cª©i⁄ faûed: %d\n", 
rc1
);

92 
	`¥ötf
("Thread 1 created\n");

94 
	`±hªad_joö
(
thªad1
, 
NULL
);

95 if–(
rc2
=
	`±hªad_¸óã
–&
thªad2
, &
©å
, &
fun˘i⁄2
, 
NULL
))) {

96 
	`¥ötf
("Thªad 2 cª©i⁄ faûed: %d\n", 
rc2
);

99 
	`¥ötf
("Thread 2 created\n");

102 
	`±hªad_joö
(
thªad2
, 
NULL
);

103 
	`OsDrvSvuClo£Shave
(&
h™dÀr
[0]);

104 
	`OsDrvSvuClo£Shave
(&
h™dÀr
[1]);

106 
	`exô
(0);

107 
	}
}

109 
	$InôTe°Buf„rs
(
width
, 
height
)

111 
ã°FømeS≥c
.
width
 = width;

112 
ã°FømeS≥c
.
height
 = height;

113 
ã°FømeS≥c
.
°ride
 = 
width
;

114 
ã°FømeS≥c
.
ty≥
 = 
YUV420p
;

115 
ã°FømeS≥c
.
byãsPP
 = 1;

117 
öBuf„r
.
•ec
 = 
ã°FømeS≥c
;

118 
öBuf„r
.
p1
 = (
u8
*)(&
öputFøme
);

119 
öBuf„r
.
p2
 = (
u8
*)((
u32
)(&
öputFøme
Ë+ 
width
 * 
height
);

120 
öBuf„r
.
p3
 = (
u8
*)((
u32
)(&
öputFøme
Ë+ 
width
 * 
height
 + width * height / 4);

122 
outBuf„r
.
•ec
 = 
ã°FømeS≥c
;

123 
outBuf„r
.
p1
 = 
ouçutFøme
;

124 
outBuf„r
.
p2
 = 
ouçutFøme
 + 
width
 * 
height
;

125 
outBuf„r
.
p3
 = 
ouçutFøme
 + 
width
 * 
height
 + width * height / 4;

128 
	}
}

130 *
	$fun˘i⁄1
(*
unu£d
)

132 
	`UNUSED
(
unu£d
);

134 
u32
 
ru¬ög
;

136 
	`InôTe°Buf„rs
(
FRAME_WIDTH
, 
FRAME_HEIGHT
);

138 i‡(
	`OsDrvSvuO≥nShave
(&
h™dÀr
[0], 
SHAVE_NUMBER
[0], 
OS_MYR_PROTECTION_SEM
Ë=
OS_MYR_DRV_SUCCESS
)

141 
	`OsDrvSvuRe£tShave
(&
h™dÀr
[0]);

142 
	`OsDrvSvuSëAbsﬁuãDeÁu…Sèck
(&
h™dÀr
[0]);

144 
	`OsDrvSvuSèπShaveCC
(&
h™dÀr
[0],(
u32
)&
bπhYASM6_°¨t
, "iii", ((u32)&
öBuf„r
), ((u32)&
outBuf„r
), 0);

145 
	`OsDrvSvuWaôShaves
(1, &
h™dÀr
[0], 
OS_DRV_SVU_WAIT_FOREVER
, &
ru¬ög
);

146 
	`¥ötf
("Function 1\n");

149 
	`¥ötf
("[T2] c™nŸ o≥¿shavê%d\n", 
SHAVE_NUMBER
[0]);

152 
	`±hªad_exô
((*)0);

153  
NULL
;

154 
	}
}

156 *
	$fun˘i⁄2
(*
unu£d
)

158 
	`UNUSED
(
unu£d
);

160 
u32
 
ru¬ög
;

162 
	`InôTe°Buf„rs
(
FRAME_WIDTH
, 
FRAME_HEIGHT
);

164 i‡(
	`OsDrvSvuO≥nShave
(&
h™dÀr
[1], 
SHAVE_NUMBER
[1], 
OS_MYR_PROTECTION_SEM
Ë=
OS_MYR_DRV_SUCCESS
)

167 
	`OsDrvSvuRe£tShave
(&
h™dÀr
[1]);

168 
	`OsDrvSvuSëAbsﬁuãDeÁu…Sèck
(&
h™dÀr
[1]);

170 
	`OsDrvSvuSèπShaveCC
(&
h™dÀr
[1],(
u32
)&
bπhYASM7_°¨t
, "iii", ((u32)&
öBuf„r
), ((u32)&
outBuf„r
), 1);

171 
	`OsDrvSvuWaôShaves
(1, &
h™dÀr
[1], 
OS_DRV_SVU_WAIT_FOREVER
, &
ru¬ög
);

172 
	`¥ötf
("Function 2\n");

175 
	`¥ötf
("[T2] c™nŸ o≥¿shavê%d\n", 
SHAVE_NUMBER
[1]);

178 
	`±hªad_exô
((*)0);

179  
NULL
;

180 
	}
}

	@HowTo/rtems_apps/simpleRTEMS_shave/leon/rtems_config.h

8 #i‚de‡
_RTEMS_CONFIG_H_


9 
	#_RTEMS_CONFIG_H_


	)

13 
	~"≠p_c⁄fig.h
"

14 
	~"ÁèlExãnsi⁄.h
"

19 #i‡
deföed
(
__RTEMS__
)

21 #i‡!
deföed
 (
__CONFIG__
)

22 
	#__CONFIG__


	)

25 
	#CONFIGURE_INIT


	)

27 #i‚de‡
RTEMS_POSIX_API


28 
	#RTEMS_POSIX_API


	)

31 
	#CONFIGURE_MICROSECONDS_PER_TICK
 1000

	)

33 
	#CONFIGURE_TICKS_PER_TIMESLICE
 10

	)

35 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

37 
	#CONFIGURE_APPLICATION_NEEDS_CLOCK_DRIVER


	)

39 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

41 
	#CONFIGURE_MINIMUM_TASK_STACK_SIZE
 4096

	)

43 
	#CONFIGURE_MAXIMUM_TASKS
 4

	)

45 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 4

	)

47 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 8

	)

49 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 8

	)

51 
	#CONFIGURE_MAXIMUM_POSIX_SEMAPHORES
 8

	)

53 
	#CONFIGURE_MAXIMUM_POSIX_MESSAGE_QUEUES
 8

	)

55 
	#CONFIGURE_MAXIMUM_POSIX_TIMERS
 4

	)

57 
	#CONFIGURE_MAXIMUM_TIMERS
 4

	)

59 
	#CONFIGURE_MAXIMUM_SEMAPHORES
 2

	)

61 
	#CONFIGURE_MAXIMUM_USER_EXTENSIONS
 1

	)

62 
	#CONFIGURE_INITIAL_EXTENSIONS
 { .
Áèl
 = 
F©Æ_exãnsi⁄
 }

	)

69 *
POSIX_Inô
 (*
¨gs
);

71 
	~<πems/c⁄fdefs.h
>

79 
BSP_SET_CLOCK
(
DEFAULT_OSC_CLOCK_KHZ
, 
DEFAULT_APP_CLOCK_KHZ
, 1, 1, 
DEFAULT_RTEMS_CSS_LOS_CLOCKS
, 
APP_MSS_CLOCKS
,
APP_UPA_CLOCKS
,0,0);

81 
BSP_SET_L2C_CONFIG
(0, 
DEFAULT_RTEMS_L2C_REPLACEMENT_POLICY
, 
DEFAULT_RTEMS_L2C_LOCKED_WAYS
,
DEFAULT_RTEMS_L2C_MODE
, 0, 0);

	@HowTo/rtems_apps/simpleRTEMS_shave/shave/effect.c

11 
	~<mv_ty≥s.h
>

12 
	~<svuComm⁄Shave.h
>

13 
	~<swcCdma.h
>

14 
	~"ef„˘.h
"

18 
	#MAX_LINE_WIDTH
 80

	)

20 
	#CLAMP
(
X
Ë(
u8
)
	`__buûtö_shave_cmu_˛amp0_i32_º_öt
(X, 255)

	)

26 
u8
 
	gbuf„ªdInLöe
[
MAX_LINE_WIDTH
];

27 
u8
 
	gbuf„ªdOutLöe
[
MAX_LINE_WIDTH
];

28 *
	gh™dÀ
;

29 
u8
 
	gSHAVE_NUMBER
[2] = {6, 7};

30 
dmaTønß˘i⁄Li°
 
__©åibuã__
((
£˘i⁄
(".cmx.cdmaDes¸ùt‹s"))Ë
	gå™ß˘i⁄Såu˘
;

36 
	$D¨kíLöe
(
u8
* 
öLöe
, u8* 
outLöe
, 
width
)

38 
i
;

40 
i
 = 0; i < 
width
; i++)

42 
outLöe
[
i
] = 
	`CLAMP
(
öLöe
[i] - 20);

45 
	}
}

47 
	$D¨k√ss
(
u8
* 
öY∂™e
, u8* 
outY∂™e
, 
width
, 
height
)

49 
u8
* 
öAddªss
;

50 
u8
* 
outAddªss
;

51 
löe
;

53 
dmaReque°îId
 
ªqId
 = 
	`dmaInôReque°î
(1);

56 
löe
 = 0;Üöê< 
height
 / 2;Üine++)

58 
öAddªss
 = (
u8
*)((
u32
)
öY∂™e
 + 
löe
 * 
width
);

59 
outAddªss
 = (
u8
*)((
u32
)
outY∂™e
 + 
löe
 * 
width
);

62 
	`dmaCª©eTønß˘i⁄
(
ªqId
, &
å™ß˘i⁄Såu˘
, (
u8
*)
öAddªss
, (u8*)&
buf„ªdInLöe
[0], 
width
);

63 
	`dmaSèπLi°Task
(&
å™ß˘i⁄Såu˘
);

64 
	`dmaWaôTask
(&
å™ß˘i⁄Såu˘
);

66 
	`D¨kíLöe
(
buf„ªdInLöe
, 
buf„ªdOutLöe
, 
width
);

69 
	`dmaCª©eTønß˘i⁄
(
ªqId
, &
å™ß˘i⁄Såu˘
, (
u8
*)&
buf„ªdOutLöe
[0], (u8*)
outAddªss
, 
width
);

70 
	`dmaSèπLi°Task
(&
å™ß˘i⁄Såu˘
);

71 
	`dmaWaôTask
(&
å™ß˘i⁄Såu˘
);

74 
	}
}

76 
	$Brighäess
(
u8
* 
öY∂™e
, u8* 
outY∂™e
, 
width
, 
height
)

78 
u8
* 
öAddªss
;

79 
u8
* 
outAddªss
;

80 
löe
;

82 
dmaReque°îId
 
ªqId
 = 
	`dmaInôReque°î
(1);

84 
löe
 = 
height
 / 2;Üine < height;Üine++)

86 
öAddªss
 = (
u8
*)((
u32
)
öY∂™e
 + 
löe
 * 
width
);

87 
outAddªss
 = (
u8
*)((
u32
)
outY∂™e
 + 
löe
 * 
width
);

90 
	`dmaCª©eTønß˘i⁄
(
ªqId
, &
å™ß˘i⁄Såu˘
, (
u8
*)
öAddªss
, (u8*)&
buf„ªdInLöe
[0], 
width
);

91 
	`dmaSèπLi°Task
(&
å™ß˘i⁄Såu˘
);

92 
	`dmaWaôTask
(&
å™ß˘i⁄Såu˘
);

94 
	`BrighãnLöeAsm
(
buf„ªdInLöe
, 
buf„ªdOutLöe
, 
width
);

97 
	`dmaCª©eTønß˘i⁄
(
ªqId
, &
å™ß˘i⁄Såu˘
, (
u8
*)&
buf„ªdOutLöe
[0], (u8*)
outAddªss
, 
width
);

98 
	`dmaSèπLi°Task
(&
å™ß˘i⁄Såu˘
);

99 
	`dmaWaôTask
(&
å™ß˘i⁄Såu˘
);

102 
	}
}

104 
	$C›yPœ√
(
u8
* 
öPœ√
, u8* 
outPœ√
, 
width
, 
height
)

106 
u8
* 
öAddªss
;

107 
u8
* 
outAddªss
;

108 
löe
;

110 
dmaReque°îId
 
ªqId
 = 
	`dmaInôReque°î
(1);

112 
löe
 = 0;Üöê< 
height
;Üine++)

114 
öAddªss
 = (
u8
*)((
u32
)
öPœ√
 + 
löe
 * 
width
);

115 
outAddªss
 = (
u8
*)((
u32
)
outPœ√
 + 
löe
 * 
width
);

117 
	`dmaCª©eTønß˘i⁄
(
ªqId
, &
å™ß˘i⁄Såu˘
, (
u8
*)
öAddªss
, (u8*)&
buf„ªdInLöe
[0], 
width
);

118 
	`dmaSèπLi°Task
(&
å™ß˘i⁄Såu˘
);

119 
	`dmaWaôTask
(&
å™ß˘i⁄Såu˘
);

122 
	`dmaCª©eTønß˘i⁄
(
ªqId
, &
å™ß˘i⁄Såu˘
, (
u8
*)&
buf„ªdInLöe
[0], (u8*)
outAddªss
, 
width
);

123 
	`dmaSèπLi°Task
(&
å™ß˘i⁄Såu˘
);

124 
	`dmaWaôTask
(&
å™ß˘i⁄Såu˘
);

127 
	}
}

	@HowTo/rtems_apps/simpleRTEMS_shave/shave/effect.h

9 #i‚de‡
__EFFECT_H__


10 
	#__EFFECT_H__


	)

14 
	~"mv_ty≥s.h
"

21 
Brighäess
(
u8
* 
Y∂™e
, u8* 
outY∂™e
, 
width
, 
height
);

22 
BrighãnLöeAsm
(
u8
* 
öLöe
, u8* 
outLöe
, 
width
);

23 
D¨k√ss
(
u8
* 
Y∂™e
, u8* 
outY∂™e
, 
width
, 
height
);

24 
C›yPœ√
(
u8
* 
ö_∂™e
, u8* 
out_∂™e
, 
width
, 
height
);

	@HowTo/rtems_apps/simpleRTEMS_shave/shave/shaveStart.c

11 
	~<swcFømeTy≥s.h
>

12 
	~<svuComm⁄Shave.h
>

13 
	~"ef„˘.h
"

27 
__©åibuã__
((
£˘i⁄
(".ãxt.íåypoöt"))Ë__©åibuã__((
	$Æig√d
(16)))

28 
	$°¨t
(
‰ameBuf„r
* 
öFøme
, fømeBuf„r* 
outFøme
, 
u32
 
ty≥
)

30 if(
ty≥
 == 0) {

31 
	`D¨k√ss
(
öFøme
->
p1
, 
outFøme
->p1, inFøme->
•ec
.
width
, inFøme->•ec.
height
);

34 
	`Brighäess
(
öFøme
->
p1
, 
outFøme
->p1, inFøme->
•ec
.
width
, inFøme->•ec.
height
);

36 
	`C›yPœ√
(
öFøme
->
p2
, 
outFøme
->p2, inFøme->
•ec
.
width
 / 2, inFøme->•ec.
height
 / 2);

37 
	`C›yPœ√
(
öFøme
->
p3
, 
outFøme
->p3, inFøme->
•ec
.
width
 / 2, inFøme->•ec.
height
 / 2);

39 
SHAVE_HALT
;

41 
	}
}

	@HowTo/rtems_apps/simpleRTEMS_shaveDynamic/leon/app_config.c

11 
	~<OsDrvC¥.h
>

12 
	~<OsDrvShaveL2Cache.h
>

13 
	~"≠p_c⁄fig.h
"

17 
	#L2CACHE_CFG
 (
SHAVE_L2CACHE_NORMAL_MODE
)

	)

30 
	$öôClocksAndMem‹y
()

32 
s32
 
sc
;

34 
tyAuxClkDividîCfg
 
auxClkAŒOn
[] =

36 {
AUX_CLK_MASK_UART
, 
CLK_SRC_REFCLK0
, 96, 625},

41 
sc
 = 
	`OsDrvC¥Inô
();

42 if(
sc
)

43  
sc
;

44 
sc
 = 
	`OsDrvC¥O≥n
();

45 if(
sc
)

46  
sc
;

47 
sc
 = 
	`OsDrvC¥AuxClockAºayC⁄fig
(
auxClkAŒOn
);

48 if(
sc
)

49  
sc
;

51 
sc
 = 
	`OsDrvC¥SysDevi˚A˘i⁄
(
UPA_DOMAIN
,
PULSE_RESET
,
APP_UPA_CLOCKS
);

52 if(
sc
)

53  
sc
;

55 
sc
 = 
	`OsDrvShaveL2CacheInô
(
L2CACHE_CFG
);

56 if(
sc
)

57  
sc
;

60 
∑πôi⁄_id
;

61 
	`OsDrvShaveL2CGëP¨tôi⁄
(
SHAVEPART256KB
, &
∑πôi⁄_id
);

64 
sc
 = 
	`OsDrvShaveL2CacheAŒoˇãSëP¨tôi⁄s
();

65 if(
sc
)

66  
sc
;

69 
i
 = 0; i < 12; i++)

71 
	`OsDrvShaveL2CSëN⁄WödowedP¨tôi⁄
(
i
, 0, 
NON_WINDOWED_DATA_PARTITION
);

72 
	`OsDrvShaveL2CSëN⁄WödowedP¨tôi⁄
(
i
, 0, 
NON_WINDOWED_INSTRUCTIONS_PARTITION
);

75 
	`OsDrvShaveL2CacheP¨tôi⁄InvÆid©e
(0);

77 
	}
}

	@HowTo/rtems_apps/simpleRTEMS_shaveDynamic/leon/app_config.h

9 #i‚de‡
_APP_CONFIG_H_


10 
	#_APP_CONFIG_H_


	)

18 
	#DEFAULT_APP_CLOCK_KHZ
 266000

	)

19 
	#DEFAULT_OSC_CLOCK_KHZ
 12000

	)

22 
	#APP_UPA_CLOCKS
 ((1 << 
UPA_SH0
) | \

23 (1 << 
UPA_SH1
) | \

24 (1 << 
UPA_SHAVE_L2
) | \

25 (1 << 
UPA_CDMA
) | \

26 (1 << 
UPA_CTRL
Ë)

	)

37 
öôClocksAndMem‹y
();

	@HowTo/rtems_apps/simpleRTEMS_shaveDynamic/leon/main.c

11 
	~<°dlib.h
>

12 
	~<°dio.h
>

13 
	~<î∫o.h
>

14 
	~<πems.h
>

15 
	~<πems/b•Io.h
>

16 
	~<UnôTe°Api.h
>

17 
	~"DrvShaveL2Cache.h
"

18 
	~"OsDrvSvu.h
"

19 
	~"as£π.h
"

20 
	~"πems_c⁄fig.h
"

27 
u32
 
addshave_shavì¡ry
;

28 
u32
 
subshave_shavì¡ry
;

30 
u8
 
adddyn
;

31 
u8
 
subdyn
;

33 
u32
 
addshave_myöt1
;

34 
u32
 
addshave_myöt2
;

35 
u32
 
addshave_myöåez
;

37 
u32
 
subshave_myöt1
;

38 
u32
 
subshave_myöt2
;

39 
u32
 
subshave_myöåez
;

43 
	grc1
, 
	grc2
;

44 
±hªad_t
 
	gthªad1
, 
	gthªad2
;

48 * 
fun˘i⁄1
(*
¨g
);

54 *
	$POSIX_Inô
 (*
¨gs
)

56 
	`UNUSED
(
¨gs
);

58 
±hªad_©å_t
 
©å
;

59 
πems_°©us_code
 
°©us
;

61 
u32
 
¨gs1
[6];

62 
u32
 
¨gs2
[6];

66 
	`¥ötf
 ("\n");

67 
	`¥ötf
 ("RTEMS POSIX Started\n");

69 
	`unôTe°Inô
();

70 
°©us
 = 
	`öôClocksAndMem‹y
();

71 if(
°©us
)

72 
	`exô
(
°©us
);

74 
	`OsDrvSvuInô
();

76 
°©us
 = 
	`±hªad_©å_öô
(&
©å
);

77 if(
°©us
) {

78 
	`¥ötf
("pthread_attr_initÉrror");

79 
	`exô
(
°©us
);

81 
°©us
 = 
	`±hªad_©å_£töhîôsched
(&
©å
, 
PTHREAD_EXPLICIT_SCHED
);

82 if(
°©us
) {

83 
	`¥ötf
("pthread_attr_setinheritschedÉrror");

84 
	`exô
(
°©us
);

86 
°©us
 = 
	`±hªad_©å_£tschedpﬁicy
(&
©å
, 
SCHED_RR
);

87 if(
°©us
) {

88 
	`¥ötf
("pthread_attr_setschedpolicyÉrror");

89 
	`exô
(
°©us
);

92 
¨gs1
[0] = (
u32
)&
adddyn
;

93 
¨gs1
[1] = 0;

94 
¨gs1
[2] = (
u32
)&
addshave_shavì¡ry
;

95 
¨gs1
[3] = (
u32
)&
addshave_myöt1
;

96 
¨gs1
[4] = (
u32
)&
addshave_myöt2
;

97 
¨gs1
[5] = (
u32
)&
addshave_myöåez
;

100 if–(
rc1
=
	`±hªad_¸óã
–&
thªad1
, &
©å
, 
fun˘i⁄1
, (*)
¨gs1
)) ){

101 
	`¥ötf
("Thªad 1 cª©i⁄ faûed: %d\n", 
rc1
);

102 
	`exô
(
rc1
);

105 
	`¥ötf
("Thread 1 created\n");

108 
°©us
 = 
	`±hªad_joö
(
thªad1
, 
NULL
);

109 if(
°©us
) {

110 
	`¥ötf
("pthread_joinÉrror!");

111 
	`exô
(
°©us
);

114 
¨gs2
[0] = (
u32
)&
subdyn
;

115 
¨gs2
[1] = 1;

116 
¨gs2
[2] = (
u32
)&
subshave_shavì¡ry
;

117 
¨gs2
[3] = (
u32
)&
subshave_myöt1
;

118 
¨gs2
[4] = (
u32
)&
subshave_myöt2
;

119 
¨gs2
[5] = (
u32
)&
subshave_myöåez
;

121 if–(
rc2
=
	`±hªad_¸óã
–&
thªad2
, &
©å
, 
fun˘i⁄1
, (*)
¨gs2
))) {

122 
	`¥ötf
("Thªad 2 cª©i⁄ faûed: %d\n", 
rc2
);

123 
	`exô
(
rc2
);

126 
	`¥ötf
("Thread 2 created\n");

129 
°©us
 = 
	`±hªad_joö
(
thªad2
, 
NULL
);

130 if(
°©us
) {

131 
	`¥ötf
("pthread_joinÉrror!");

132 
	`exô
(
°©us
);

135 
	`unôTe°FöÆRï‹t
();

136 
	`exô
(0);

138 
	}
}

140 *
	$fun˘i⁄1
(*
¨g
)

142 
	`UNUSED
(
¨g
);

143 
u32
 
aux_addªss
 = 0;

144 
u32
 *
aux
 = 
NULL
;

145 
osRëCod
 = 
OS_MYR_DRV_SUCCESS
;

146 
osDrvSvuH™dÀr_t
 
ch™dÀr
;

148 
u32
 
shaveDynLibAddªss
*(((u32 *)
¨g
)+0);

149 
u32
 
shaveNumbî
 = *(((u32 *)
¨g
)+1);

150 
u32
 
shaveE¡ryAddªss
 = *(((u32 *)
¨g
)+2);

151 
u32
 
myöt1_addªss
 = *(((u32 *)
¨g
)+3);

152 
u32
 
myöt2_addªss
 = *(((u32 *)
¨g
)+4);

153 
u32
 
ªsu…_addªss
 = *(((u32 *)
¨g
)+5);

155 
osRëCod
 +
	`OsDrvSvuO≥nShave
(&
ch™dÀr
, 
shaveNumbî
, 
OS_MYR_PROTECTION_SELF
);

156 i‡(
osRëCod
 !
OS_MYR_DRV_SUCCESS
)

158 
	`¥ötf
 ("O≥¿shavêÁûed wôhÉº‹ code: %d\n",
osRëCod
);

162 
osRëCod
 +
	`OsDrvSvuSëShaveWödowsToDeÁu…
(&
ch™dÀr
);

163 
osRëCod
 +
	`OsDrvSvuSëAbsﬁuãDeÁu…Sèck
(&
ch™dÀr
);

164 
osRëCod
 +
	`OsDrvSvuLﬂdShvdlib
((
u8
 *)
shaveDynLibAddªss
, &
ch™dÀr
);

165 
osRëCod
 +
	`OsDrvSvuRe£tShave
(&
ch™dÀr
);

168 
osRëCod
 +
	`OsDrvSvuSﬁveShaveRñAddr
(
myöt1_addªss
, 
shaveNumbî
, &
aux_addªss
);

169 
aux
 = (
u32
 *)
aux_addªss
;

170 *(
aux
) = 4;

171 *(
aux
+1) = 25;

172 *(
aux
+2) = 313;

173 *(
aux
+3) = 13;

174 
	`¥ötf
("D©®£à1 : %ld %ld %ld %ld\n", 
aux
[0],áux[1],áux[2],áux[3]);

176 
osRëCod
 +
	`OsDrvSvuSﬁveShaveRñAddr
(
myöt2_addªss
, 
shaveNumbî
, &
aux_addªss
);

177 
aux
 = (
u32
 *)
aux_addªss
;

178 *(
aux
) = 4;

179 *(
aux
+1) = 30;

180 *(
aux
+2) = 400;

181 *(
aux
+3) = 500;

182 
	`¥ötf
("D©®£à2 : %ld %ld %ld %ld\n", 
aux
[0],áux[1],áux[2],áux[3]);

184 
osRëCod
 +
	`OsDrvSvuRunShave
(&
ch™dÀr
, 
shaveE¡ryAddªss
);

187 
osRëCod
 +
	`OsDrvSvuSﬁveShaveRñAddr
(
ªsu…_addªss
, 
shaveNumbî
, &
aux_addªss
);

188 
aux
 = (
u32
 *)
aux_addªss
;

189 
	`¥ötf
("ª† : %ld %ld %ld %ld\n", 
aux
[0],áux[1],áux[2],áux[3]);

190 i‡(
osRëCod
 !
OS_MYR_DRV_SUCCESS
)

192 
	`¥ötf
 ("OsDrvSvu... fun˘i⁄ wa†nŸ suc˚ssful,Éº‹ codê %d", 
osRëCod
);

195  
NULL
;

196 
	}
}

	@HowTo/rtems_apps/simpleRTEMS_shaveDynamic/leon/rtems_config.h

8 #i‚de‡
_RTEMS_CONFIG_H_


9 
	#_RTEMS_CONFIG_H_


	)

13 
	~"≠p_c⁄fig.h
"

14 
	~"ÁèlExãnsi⁄.h
"

16 #i‡
deföed
(
__RTEMS__
)

18 #i‡!
deföed
 (
__CONFIG__
)

19 
	#__CONFIG__


	)

25 
	#CONFIGURE_INIT


	)

28 #i‚de‡
RTEMS_POSIX_API


29 
	#RTEMS_POSIX_API


	)

32 
	#CONFIGURE_MICROSECONDS_PER_TICK
 1000

	)

34 
	#CONFIGURE_TICKS_PER_TIMESLICE
 10

	)

36 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

38 
	#CONFIGURE_APPLICATION_NEEDS_CLOCK_DRIVER


	)

40 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

42 
	#CONFIGURE_MINIMUM_TASK_STACK_SIZE
 4096

	)

44 
	#CONFIGURE_MAXIMUM_TASKS
 4

	)

46 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 4

	)

48 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 8

	)

50 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 8

	)

52 
	#CONFIGURE_MAXIMUM_POSIX_SEMAPHORES
 8

	)

54 
	#CONFIGURE_MAXIMUM_POSIX_MESSAGE_QUEUES
 8

	)

56 
	#CONFIGURE_MAXIMUM_POSIX_TIMERS
 4

	)

58 
	#CONFIGURE_MAXIMUM_TIMERS
 4

	)

60 
	#CONFIGURE_MAXIMUM_SEMAPHORES
 2

	)

63 
	#CONFIGURE_MAXIMUM_USER_EXTENSIONS
 1

	)

64 
	#CONFIGURE_INITIAL_EXTENSIONS
 { .
Áèl
 = 
F©Æ_exãnsi⁄
 }

	)

71 *
POSIX_Inô
 (*
¨gs
);

73 
	~<πems/c⁄fdefs.h
>

81 
BSP_SET_CLOCK
(
DEFAULT_OSC_CLOCK_KHZ
, 
DEFAULT_APP_CLOCK_KHZ
, 1, 1, 
DEFAULT_RTEMS_CSS_LOS_CLOCKS
, 
DEFAULT_RTEMS_MSS_LRT_CLOCKS
,
APP_UPA_CLOCKS
,0,0);

83 
BSP_SET_L2C_CONFIG
(0, 
DEFAULT_RTEMS_L2C_REPLACEMENT_POLICY
, 
DEFAULT_RTEMS_L2C_LOCKED_WAYS
,
DEFAULT_RTEMS_L2C_MODE
, 0, 0);

	@HowTo/rtems_apps/simpleRTEMS_shaveDynamic/shave_add/init.c

9 
	~<°dio.h
>

10 
	~<m©h.h
>

11 
	~<svuComm⁄Shave.h
>

12 
	~<moviVe˘‹Utûs.h
>

14 
öt4
 
add_simd
(öt4 
öput1
, i¡4 
öput2
);

15 vﬁ©ûê
	gmyöt1
[4], 
	gmyöt2
[4], 
	gmyöåez
[4];

16 
öt4
 
	gmyvÆ1
, 
	gmyvÆ2
, 
	gmyªz
;

18 
	$shavì¡ry
( )

21 
myvÆ1
[0] = 
myöt1
[0];

22 
myvÆ1
[1] = 
myöt1
[1];

23 
myvÆ1
[2] = 
myöt1
[2];

24 
myvÆ1
[3] = 
myöt1
[3];

26 
myvÆ2
[0] = 
myöt2
[0];

27 
myvÆ2
[1] = 
myöt2
[1];

28 
myvÆ2
[2] = 
myöt2
[2];

29 
myvÆ2
[3] = 
myöt2
[3];

31 
myªz
 = 
	`add_simd
(
myvÆ1
, 
myvÆ2
);

33 
myöåez
[0] = 
myªz
[0];

34 
myöåez
[1] = 
myªz
[1];

35 
myöåez
[2] = 
myªz
[2];

36 
myöåez
[3] = 
myªz
[3];

38 
SHAVE_HALT
;

40 
	}
}

	@HowTo/rtems_apps/simpleRTEMS_shaveDynamic/shave_sub/init.c

9 
	~<°dio.h
>

10 
	~<m©h.h
>

11 
	~<svuComm⁄Shave.h
>

12 
	~<moviVe˘‹Utûs.h
>

14 
öt4
 
sub_simd
(öt4 
öput1
, i¡4 
öput2
);

15 vﬁ©ûê
	gmyöt1
[4], 
	gmyöt2
[4], 
	gmyöåez
[4];

16 
öt4
 
	gmyvÆ1
, 
	gmyvÆ2
, 
	gmyªz
;

18 
	$shavì¡ry
( )

20 
myvÆ1
[0] = 
myöt1
[0];

21 
myvÆ1
[1] = 
myöt1
[1];

22 
myvÆ1
[2] = 
myöt1
[2];

23 
myvÆ1
[3] = 
myöt1
[3];

25 
myvÆ2
[0] = 
myöt2
[0];

26 
myvÆ2
[1] = 
myöt2
[1];

27 
myvÆ2
[2] = 
myöt2
[2];

28 
myvÆ2
[3] = 
myöt2
[3];

30 
myªz
 = 
	`sub_simd
(
myvÆ1
, 
myvÆ2
);

32 
myöåez
[0] = 
myªz
[0];

33 
myöåez
[1] = 
myªz
[1];

34 
myöåez
[2] = 
myªz
[2];

35 
myöåez
[3] = 
myªz
[3];

37 
SHAVE_HALT
;

39 
	}
}

	@HowTo/rtems_apps/simpleRTEMS_shaveDynamicDDR/leon/app_config.c

11 
	~<OsDrvC¥.h
>

12 
	~<OsDrvShaveL2Cache.h
>

13 
	~"≠p_c⁄fig.h
"

14 
	~<DrvDdr.h
>

17 
	#L2CACHE_CFG
 (
SHAVEL2C_MODE_NORMAL
)

	)

30 
	$InôShaveL2C
()

32 
s32
 
sc
;

34 
sc
=
	`OsDrvShaveL2CacheInô
(
L2CACHE_CFG
);

35 if(
sc
)

36  
sc
;

38 
sc
=
	`OsDrvShaveL2CRe£tP¨tôi⁄s
();

39  
sc
;

41  
sc
;

42 
	}
}

46 
	$öôClocksAndMem‹y
()

48 
s32
 
sc
;

50 
tyAuxClkDividîCfg
 
auxClkAŒOn
[] =

52 {
AUX_CLK_MASK_UART
, 
CLK_SRC_REFCLK0
, 96, 625},

57 
sc
 = 
	`OsDrvC¥Inô
();

58 if(
sc
)

59  
sc
;

60 
sc
 = 
	`OsDrvC¥O≥n
();

61 if(
sc
)

62  
sc
;

63 
sc
 = 
	`OsDrvC¥AuxClockAºayC⁄fig
(
auxClkAŒOn
);

64 if(
sc
)

65  
sc
;

67 
	`DrvDdrInôüli£
(
NULL
);

69  
sc
;

70 
	}
}

	@HowTo/rtems_apps/simpleRTEMS_shaveDynamicDDR/leon/app_config.h

9 #i‚de‡
_APP_CONFIG_H_


10 
	#_APP_CONFIG_H_


	)

14 
	~<mv_ty≥s.h
>

19 
	#DEFAULT_APP_CLOCK_KHZ
 266000

	)

20 
	#DEFAULT_OSC_CLOCK_KHZ
 12000

	)

23 
	#APP_UPA_CLOCKS
 ((1 << 
UPA_SH0
) | \

24 (1 << 
UPA_SH1
) | \

25 (1 << 
UPA_SH2
) | \

26 (1 << 
UPA_SH3
) | \

27 (1 << 
UPA_SHAVE_L2
) | \

28 (1 << 
UPA_CDMA
) | \

29 (1 << 
UPA_CTRL
Ë)

	)

39 
InôShaveL2C
();

40 
C⁄figShaveL2C
(
u32
 
shaveNr
, 
u16
 *
∑πID
);

41 
öôClocksAndMem‹y
();

	@HowTo/rtems_apps/simpleRTEMS_shaveDynamicDDR/leon/main.c

11 
	~<°dlib.h
>

12 
	~<°dio.h
>

13 
	~<î∫o.h
>

14 
	~<πems.h
>

15 
	~<πems/b•Io.h
>

16 
	~"OsDrvSvu.h
"

17 
	~<DrvDdr.h
>

18 
	~<DrvTimî.h
>

19 
	~<OsDrvShaveL2Cache.h
>

20 
	~<UnôTe°Api.h
>

21 
	~"as£π.h
"

22 
	~"πems_c⁄fig.h
"

26 
	#SHAVE_MAX_NO
 2

	)

30 
u32
 
addshave_shavì¡ry
;

31 
u32
 
subshave_shavì¡ry
;

33 
u8
 
adddyn
;

34 
u8
 
subdyn
;

36 
u32
 
addshave_myöt1
;

37 
u32
 
addshave_myöt2
;

38 
u32
 
addshave_myöåez
;

40 
u32
 
subshave_myöt1
;

41 
u32
 
subshave_myöt2
;

42 
u32
 
subshave_myöåez
;

46 
	grc1
;

47 
±hªad_t
 
	gthªad1
, 
	gthªad2
;

51 * 
fun˘i⁄1
(*
¨g
);

58 
u16
 
	mshaves
[
SHAVE_MAX_NO
];

59 
u16
 
	mshaveL2cP¨tId
[
MAX_SHAVE_L2C_PARTITIONS
];

60 
u32
 
	mnoShaves
;

61 
u32
 
	m≠pImageAddr
;

62 
u32
 
	míåyPoöt
;

63 
u32
 
	möputD©aAddr
[2];

64 
u32
 
	mouçutD©aAddr
;

65 } 
	tShaveTask
;

67 
ShaveTask
 
	gaddTask
 =

71 
SHAVE_MAX_NO
,

72 (
u32
)&
adddyn
,

73 (
u32
)&
addshave_shavì¡ry
,

75 (
u32
)&
addshave_myöt1
, (u32)&
addshave_myöt2


77 (
u32
)&
addshave_myöåez


80 
ShaveTask
 
	gsubTask
 =

84 
SHAVE_MAX_NO
,

85 (
u32
)&
subdyn
,

86 (
u32
)&
subshave_shavì¡ry
,

88 (
u32
)&
subshave_myöt1
, (u32)&
subshave_myöt2


90 (
u32
)&
subshave_myöåez


93 
	$¸óãThªad
(
ShaveTask
* 
èsk
, 
±hªad_t
* 
thªad
, * 
thªadName
)

95 
±hªad_©å_t
 
©å
;

96 
s32
 
sc
;

98 
sc
 = 
	`±hªad_©å_öô
(&
©å
);

99 if(
sc
) {

100 
	`¥ötf
("pthread_attr_initÉrror");

101 
	`exô
(
sc
);

103 
sc
 = 
	`±hªad_©å_£töhîôsched
(&
©å
, 
PTHREAD_EXPLICIT_SCHED
);

104 if(
sc
) {

105 
	`¥ötf
("pthread_attr_setinheritschedÉrror");

106 
	`exô
(
sc
);

108 
sc
 = 
	`±hªad_©å_£tschedpﬁicy
(&
©å
, 
SCHED_RR
);

109 if(
sc
) {

110 
	`¥ötf
("pthread_attr_setschedpolicyÉrror");

111 
	`exô
(
sc
);

114 if–(
rc1
=
	`±hªad_¸óã
(
thªad
, &
©å
, 
fun˘i⁄1
, (*)
èsk
) ) ){

115 
	`¥ötf
("%†¸óti⁄ faûed: %d\n", 
thªadName
, 
rc1
);

116 
	`exô
(
rc1
);

119 
	`¥ötf
("%†¸óãd\n", 
thªadName
);

121 
	}
}

123 *
	$POSIX_Inô
 (*
¨gs
)

125 
	`UNUSED
(
¨gs
);

127 
ªtVÆ
;

128 
u32
 
i
;

129 
OS_MYRIAD_DRIVER_STATUS_CODE
 
sc
;

131 
	`unôTe°Inô
();

133 
ªtVÆ
 = 
	`öôClocksAndMem‹y
();

135 
ªtVÆ
 = 
	`InôShaveL2C
();

138 
i
=0; i < 
MAX_SHAVE_L2C_PARTITIONS
; i++)

140 
sc
 = 
	`OsDrvShaveL2CGëP¨tôi⁄
(
SHAVEPART16KB
, 
NULL
);

141 i‡–
sc
 !
OS_MYR_DRV_SUCCESS
 )

143 
	`¥ötf
("FailedÅo declareáÖartition;ápplicationÉxited\n");

144 
	`exô
(-
sc
);

149 
i
=0; i < 
addTask
.
noShaves
; i++)

151 
sc
 = 
	`OsDrvShaveL2CSëWödowP¨tôi⁄
(
addTask
.
shaves
[
i
], 
SHAVEL2CACHEWIN_A
,áddTask.
shaveL2cP¨tId
[i]);

152 i‡–
sc
 !
OS_MYR_DRV_SUCCESS
 )

154 
	`¥ötf
("FaûedÅÿ£àthêWINádd L2CÖ¨tôi⁄ %ld;áµliˇti⁄Éxôed\n", 
i
);

155 
	`exô
(-
sc
);

160 
i
=0; i < 
subTask
.
noShaves
; i++)

162 
sc
 = 
	`OsDrvShaveL2CSëWödowP¨tôi⁄
(
subTask
.
shaves
[
i
], 
SHAVEL2CACHEWIN_A
, subTask.
shaveL2cP¨tId
[i]);

163 i‡–
sc
 !
OS_MYR_DRV_SUCCESS
 )

165 
	`¥ötf
("FaûedÅÿ£àthêWINádd L2CÖ¨tôi⁄ %ld;áµliˇti⁄Éxôed\n", 
i
);

166 
	`exô
(-
sc
);

171 
sc
 = 
	`OsDrvShaveL2CacheAŒoˇãSëP¨tôi⁄s
();

172 i‡–
sc
 !
OS_MYR_DRV_SUCCESS
 )

174 
	`¥ötf
("FaûedÅÿ£àthêWINádd L2CÖ¨tôi⁄ %ld;áµliˇti⁄Éxôed\n", 
i
);

175 
	`exô
(-
sc
);

181 
	`¥ötf
 ("\n");

182 
	`¥ötf
 ("RTEMS POSIX Started\n");

184 
ªtVÆ
 = 
	`OsDrvSvuInô
();

186 
	`¸óãThªad
(&
addTask
, &
thªad1
, "AddÅhread");

187 
	`¸óãThªad
(&
subTask
, &
thªad2
, "SubÅhread");

189 
	`±hªad_joö
(
thªad1
, 
NULL
);

190 
	`±hªad_joö
(
thªad2
, 
NULL
);

192 
	`unôTe°FöÆRï‹t
();

193 
	`exô
(
ªtVÆ
);

194 
	}
}

196 *
	$fun˘i⁄1
(*
¨g
)

198 
osDrvSèt
 = 
OS_MYR_DRV_SUCCESS
;

200 
u32
 
i
;

201 
u32
 
aux_addªss
;

202 c⁄° 
u32
* 
aux_ö
;

203 
u32
* 
aux_out
;

204 
ShaveTask
* 
èsk
 = (ShaveTask*)
¨g
;

205 
osDrvSvuH™dÀr_t
 
shvh™d
;

206 
u32
 
ru¬ögShaves
;

208 
i
 = 0; (ò< 
èsk
->
noShaves
Ë&& (
osDrvSèt
 =
OS_MYR_DRV_SUCCESS
); i++)

210 i‡((
osDrvSèt
 +
	`OsDrvSvuO≥nShave
(&
shvh™d
,
èsk
->
shaves
[
i
], 
OS_MYR_PROTECTION_SEM
)Ë!
OS_MYR_DRV_SUCCESS
)

212 
	`¥ötf
("O≥¿Áû shavênumbî: %u !!\¿WôhÉº‹ code:%d\n",
èsk
->
shaves
[
i
],
osDrvSèt
);

216 
osDrvSèt
 +
	`OsDrvSvuSëAbsﬁuãDeÁu…Sèck
(&
shvh™d
);

217 
osDrvSèt
 +
	`OsDrvSvuSëShaveWödowsToDeÁu…
(&
shvh™d
);

218 
osDrvSèt
 +
	`OsDrvSvuLﬂdShvdlib
((
u8
 *)
èsk
->
≠pImageAddr
, &
shvh™d
);

219 
osDrvSèt
 +
	`OsDrvSvuRe£tShave
(&
shvh™d
);

224 
osDrvSèt
 +
	`OsDrvSvuSﬁveShaveRñAddr
(
èsk
->
öputD©aAddr
[0],Åask->
shaves
[
i
], &
aux_addªss
);

225 
aux_out
 = (
u32
 *)
aux_addªss
;

226 
aux_out
[0] = 4;

227 
aux_out
[1] = 25;

228 
aux_out
[2] = 313;

229 
aux_out
[3] = 13;

230 
	`¥ötf
("S%u D©®£à1áàaddªs†0x%lX : %ld %ld %ld %ld\n", 
èsk
->
shaves
[
i
], 
aux_addªss
, 
aux_out
[0],áux_out[1],áux_out[2],áux_out[3]);

232 
osDrvSèt
 +
	`OsDrvSvuSﬁveShaveRñAddr
(
èsk
->
öputD©aAddr
[1],Åask->
shaves
[
i
], &
aux_addªss
);

233 
aux_out
 = (
u32
 *)
aux_addªss
;

234 
aux_out
[0] = 4;

235 
aux_out
[1] = 30;

236 
aux_out
[2] = 400;

237 
aux_out
[3] = 500;

239 
	`¥ötf
("S%u D©®£à2áàaddªs†0x%lX : %ld %ld %ld %ld\n", 
èsk
->
shaves
[
i
], 
aux_addªss
, 
aux_out
[0],áux_out[1],áux_out[2],áux_out[3]);

241 
	`¥ötf
("S%u Sèπáàaddr:0x%lX \n", 
èsk
->
shaves
[
i
],Åask->
íåyPoöt
);

244 ()
	`OsDrvShaveL2CacheP¨tôi⁄InvÆid©e
(
èsk
->
shaveL2cP¨tId
[
i
]);

246 
osDrvSèt
 +
	`OsDrvSvuSèπShaveCC
(&
shvh™d
, (
u32
)
èsk
->
íåyPoöt
,"i",
i
);

250 i‡(
osDrvSèt
 =
OS_MYR_DRV_SUCCESS
)

252 
i
 = 0; i < 
èsk
->
noShaves
; i++)

254 
osDrvSèt
 +
	`OsDrvSvuWaôShaves
(
i
, &
shvh™d
, 
OS_DRV_SVU_WAIT_FOREVER
, &
ru¬ögShaves
);

257 ()
	`OsDrvShaveL2CacheP¨tôi⁄Flush
(
èsk
->
shaveL2cP¨tId
[
i
],
PERFORM_INVALIDATION
);

260 
osDrvSèt
 +
	`OsDrvSvuSﬁveShaveRñAddr
((
u32
)
èsk
->
ouçutD©aAddr
,Åask->
shaves
[
i
], &
aux_addªss
);

261 
aux_ö
 = (
u32
 *)
aux_addªss
;

262 
	`¥ötf
("S %uÑe†‰omáddªs†0x%lX: %ld %ld %ld %ld\n", 
èsk
->
shaves
[
i
], 
aux_addªss
, 
aux_ö
[0],áux_in[1],áux_in[2],áux_in[3]);

265  
NULL
;

266 
	}
}

	@HowTo/rtems_apps/simpleRTEMS_shaveDynamicDDR/leon/rtems_config.h

8 #i‚de‡
_RTEMS_CONFIG_H_


9 
	#_RTEMS_CONFIG_H_


	)

13 
	~"≠p_c⁄fig.h
"

14 
	~"ÁèlExãnsi⁄.h
"

19 #i‡
deföed
(
__RTEMS__
)

21 #i‡!
deföed
 (
__CONFIG__
)

22 
	#__CONFIG__


	)

25 
	#CONFIGURE_INIT


	)

27 
	#CONFIGURE_MICROSECONDS_PER_TICK
 1000

	)

29 
	#CONFIGURE_TICKS_PER_TIMESLICE
 10

	)

31 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

33 
	#CONFIGURE_APPLICATION_NEEDS_CLOCK_DRIVER


	)

35 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

37 
	#CONFIGURE_MINIMUM_TASK_STACK_SIZE
 2048

	)

39 
	#CONFIGURE_MAXIMUM_USER_EXTENSIONS
 4

	)

41 
	#CONFIGURE_INITIAL_EXTENSIONS
 { .
Áèl
 = 
F©Æ_exãnsi⁄
 }

	)

43 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 4

	)

45 
	#CONFIGURE_MAXIMUM_SEMAPHORES
 4

	)

52 *
POSIX_Inô
 (*
¨gs
);

54 
	~<πems/c⁄fdefs.h
>

62 
BSP_SET_CLOCK
(
DEFAULT_OSC_CLOCK_KHZ
, 
DEFAULT_APP_CLOCK_KHZ
, 1, 1, 
DEFAULT_RTEMS_CSS_LOS_CLOCKS
, 
DEFAULT_RTEMS_MSS_LRT_CLOCKS
,
APP_UPA_CLOCKS
,0,0);

64 
BSP_SET_L2C_CONFIG
(0, 
DEFAULT_RTEMS_L2C_REPLACEMENT_POLICY
, 
DEFAULT_RTEMS_L2C_LOCKED_WAYS
,
DEFAULT_RTEMS_L2C_MODE
, 0, 0);

	@HowTo/rtems_apps/simpleRTEMS_shaveDynamicDDR/shave_add/add.c

9 
	~<°dio.h
>

10 
	~<m©h.h
>

11 
	~<svuComm⁄Shave.h
>

12 
	~<moviVe˘‹Utûs.h
>

14 
öt4
 
add_simd
(öt4 
öput1
, i¡4 
öput2
);

15 vﬁ©ûê
	gmyöt1
[4], 
	gmyöt2
[4], 
	gmyöåez
[4];

16 
öt4
 
	gmyvÆ1
, 
	gmyvÆ2
, 
	gmyªz
;

18 
	$shavì¡ry
( )

20 
myvÆ1
[0] = 
myöt1
[0];

21 
myvÆ1
[1] = 
myöt1
[1];

22 
myvÆ1
[2] = 
myöt1
[2];

23 
myvÆ1
[3] = 
myöt1
[3];

25 
myvÆ2
[0] = 
myöt2
[0];

26 
myvÆ2
[1] = 
myöt2
[1];

27 
myvÆ2
[2] = 
myöt2
[2];

28 
myvÆ2
[3] = 
myöt2
[3];

30 
myªz
 = 
	`add_simd
(
myvÆ1
, 
myvÆ2
);

32 
myöåez
[0] = 
myªz
[0];

33 
myöåez
[1] = 
myªz
[1];

34 
myöåez
[2] = 
myªz
[2];

35 
myöåez
[3] = 
myªz
[3];

37 
SHAVE_HALT
;

39 
	}
}

	@HowTo/rtems_apps/simpleRTEMS_shaveDynamicDDR/shave_sub/sub.c

9 
	~<°dio.h
>

10 
	~<m©h.h
>

11 
	~<svuComm⁄Shave.h
>

12 
	~<moviVe˘‹Utûs.h
>

14 
öt4
 
sub_simd
(öt4 
öput1
, i¡4 
öput2
);

15 vﬁ©ûê
	gmyöt1
[4], 
	gmyöt2
[4], 
	gmyöåez
[4];

16 
öt4
 
	gmyvÆ1
, 
	gmyvÆ2
, 
	gmyªz
;

18 
	$shavì¡ry
( )

20 
myvÆ1
[0] = 
myöt1
[0];

21 
myvÆ1
[1] = 
myöt1
[1];

22 
myvÆ1
[2] = 
myöt1
[2];

23 
myvÆ1
[3] = 
myöt1
[3];

25 
myvÆ2
[0] = 
myöt2
[0];

26 
myvÆ2
[1] = 
myöt2
[1];

27 
myvÆ2
[2] = 
myöt2
[2];

28 
myvÆ2
[3] = 
myöt2
[3];

30 
myªz
 = 
	`sub_simd
(
myvÆ1
, 
myvÆ2
);

32 
myöåez
[0] = 
myªz
[0];

33 
myöåez
[1] = 
myªz
[1];

34 
myöåez
[2] = 
myªz
[2];

35 
myöåez
[3] = 
myªz
[3];

37 
SHAVE_HALT
;

39 
	}
}

	@HowTo/rtems_apps/simpleRTEMS_tempSensor/leon/app_config.c

11 
	~<OsDrvC¥.h
>

12 
	~"≠p_c⁄fig.h
"

16 
	#SYS_CLK_KHZ
 12000

	)

23 c⁄° 
tyAuxClkDividîCfg
 
	gauxClk
[] =

26 .
auxClockE«bÀMask
 = (
u32
)(1 << 
CSS_AUX_TSENS
),

27 .
	gauxClockSour˚
 = 
CLK_SRC_REFCLK0
,

28 .
	gauxClockDivNumî©‹
 = 1,

29 .
	gauxClockDivDíomö©‹
 = 10,

34 c⁄° 
tySocClockC⁄fig
 
	gpSocClockC⁄fig
 =

36 .
ªfClk0I≈utKhz
 = 
SYS_CLK_KHZ
 ,

37 .
	gªfClk1I≈utKhz
 = 0 ,

38 .
	gèrgëPŒ0FªqKhz
 = 600000,

39 .
	gèrgëPŒ1FªqKhz
 = 0,

40 .
	g˛kSrcPŒ1
 = 
CLK_SRC_REFCLK0
,

41 .
	gma°îClkDivNumî©‹
 = 1,

42 .
	gma°îClkDivDíomö©‹
 = 1,

43 .
	gcssDssClockE«bÀMask
 = 
DEFAULT_CORE_CSS_DSS_CLOCKS
,

44 .
	gu∑ClockE«bÀMask
 = 
DEFAULT_UPA_CLOCKS
,

45 .
	gmssClockE«bÀMask
 = 
MSS_CLOCKS_BASIC
,

46 .
	gpAuxClkCfg
 = 
auxClk


57 
	$öôClocksAndMem‹y
()

59 
ªtVÆ
;

62 
ªtVÆ
 = 
	`OsDrvC¥Inô
();

63 if(
ªtVÆ
)

64  
ªtVÆ
;

66 
ªtVÆ
 = 
	`OsDrvC¥O≥n
();

67 if(
ªtVÆ
)

68  
ªtVÆ
;

70 
ªtVÆ
 = 
	`OsDrvC¥SëupClocks
(&
pSocClockC⁄fig
);

71 if(
ªtVÆ
)

72  
ªtVÆ
;

75 
	}
}

	@HowTo/rtems_apps/simpleRTEMS_tempSensor/leon/app_config.h

9 #i‚de‡
_APP_CONFIG_H_


10 
	#_APP_CONFIG_H_


	)

17 
	#MSS_CLOCKS_BASIC
 (
DEV_MSS_APB_SLV
 | \

18 
DEV_MSS_APB2_CTRL
 | \

19 
DEV_MSS_RTBRIDGE
 | \

20 
DEV_MSS_RTAHB_CTRL
 | \

21 
DEV_MSS_LRT
 | \

22 
DEV_MSS_LRT_DSU
 | \

23 
DEV_MSS_LRT_L2C
 | \

24 
DEV_MSS_LRT_ICB
 | \

25 
DEV_MSS_AXI_BRIDGE
 | \

26 
DEV_MSS_MXI_CTRL
 | \

27 
DEV_MSS_MXI_DEFSLV
 | \

28 
DEV_MSS_AXI_MON
 | \

29 
DEV_MSS_AMC
 | \

30 
DEV_MSS_SIPP
 | \

31 
DEV_MSS_TIM
 )

	)

42 
öôClocksAndMem‹y
();

	@HowTo/rtems_apps/simpleRTEMS_tempSensor/leon/main.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

4 
	~<uni°d.h
>

5 
	~<sys/ty≥s.h
>

6 
	~<sys/°©.h
>

7 
	~<sys/io˘l.h
>

8 
	~<f˙é.h
>

9 
	~<±hªad.h
>

10 
	~<UnôTe°Api.h
>

11 
	~"£m≠h‹e.h
"

12 
	~"mv_ty≥s.h
"

13 
	~"OsDrvTempSís‹.h
"

14 
	~"≠p_c⁄fig.h
"

16 
	#THREAD_NR
 5

	)

18 
	#TEMP_THRESHOLD
 (30)

19 

	)

20 
	#TSENS_CSS_NAME
 "/dev/ãmp£ns‹0"

	)

21 
	#TSENS_MSS_NAME
 "/dev/ãmp£ns‹1"

	)

22 
	#TSENS_UPA0_NAME
 "/dev/ãmp£ns‹2"

	)

23 
	#TSENS_UPA1_NAME
 "/dev/ãmp£ns‹3"

	)

25 
	gdev«mes
[][17] = {{
TSENS_CSS_NAME
}, {
TSENS_MSS_NAME
}, {
TSENS_UPA0_NAME
}, {
TSENS_UPA1_NAME
}};

26 
±hªad_t
 
	gthªad_id
[
THREAD_NR
];

27 
£m_t
 
	g£m
;

29 
	sTaskArgs


31 *
	mdev«me
;

32 *
	mèsk
;

33 
OsDrvTempSís‹IrqSëtögs
* 
	múq_cfg
;

34 }
	gtsk_¨gs
[
THREAD_NR
];

36 * 
	$ãmpCb
(
OsDrvTempSís‹
 
£ns‹
, 
d©a
, * 
c⁄ãxt
)

38 
	`¥ötf
("IRQ Triggîed Sís‹: %x, c⁄ãxt: %x, sam∂e: %‡degªe†Cñsius\n", 
£ns‹
, ()*(
uöt32_t
*)
c⁄ãxt
, 
d©a
);

40 
	`£m_po°
(&
£m
);

42  
NULL
;

43 
	}
}

45 *
	$èsk0
(*
¨gs
)

47 
°©us
 = 0, 
fd
;

48 
TaskArgs
 *
›t
 = (TaskArgs*)
¨gs
;

50 
	`¥ötf
("SèπÅhªad %x\n", ()
	`πems_èsk_£lf
());

52 
fd
 = 
	`›í
(
›t
->
dev«me
, 
O_RDONLY
, 
S_IRUSR
 | 
S_IWUSR
 | 
S_IRGRP
 | 
S_IROTH
);

53 i‡(
fd
 < 0)

55 
	`≥º‹
("open failed");

56 
EXIT_THREAD
;

60 
°©us
 = 
	`io˘l
(
fd
, 
IOCTL_TEMP_THR_CB
, 
›t
->
úq_cfg
);

61 i‡(
°©us
)

63 
	`¥ötf
("io˘»úq sètus: %d %x\n", 
°©us
, ()
	`πems_èsk_£lf
());

64 
	`≥º‹
("");

65 
EXIT_THREAD
;

69 
	`£m_waô
(&
£m
);

71 
°©us
 = 
	`˛o£
(
fd
);

72 i‡(
°©us
)

74 
	`¥ötf
("˛o£ faûed wôh s¯%d\n", 
°©us
);

75 
EXIT_THREAD
;

78 
	`¥ötf
("FöishedÅhªad id %x\n", ()
	`πems_èsk_£lf
());

80 
EXIT_THREAD
:

81 
	`±hªad_exô
(
NULL
);

82  
NULL
;

83 
	}
}

85 *
	$èsk1
(*
¨gs
)

87 
°©us
, 
fd
;

88 
TaskArgs
 *
›t
 = (TaskArgs*)
¨gs
;

89 
vÆue
;

91 
	`¥ötf
("SèπÅhªad %x\n", ()
	`πems_èsk_£lf
());

93 
fd
 = 
	`›í
(
›t
->
dev«me
, 
O_RDONLY
, 
S_IRUSR
 | 
S_IWUSR
 | 
S_IRGRP
 | 
S_IROTH
);

94 i‡(
fd
 < 0)

96 
	`≥º‹
("open failed");

97 
EXIT_THREAD1
;

101 
i
 = 0; i < 10; ++i)

103 
°©us
 = 
	`io˘l
(
fd
, 
IOCTL_READ_TEMP
, &
vÆue
);

104 i‡(
°©us
)

106 
	`≥º‹
("read ioctl failed");

107 
EXIT_THREAD1
;

110 
	`¥ötf
("%s: %‡degªe†Cñsius\n",
›t
->
dev«me
, 
vÆue
 );

112 i‡(!
	`°rcmp
(
›t
->
dev«me
, 
TSENS_CSS_NAME
Ë|| !°rcmp(›t->dev«me, 
TSENS_MSS_NAME
))

114 
	`¶ìp
(5);

118 
	`¶ìp
(10);

122 
°©us
 = 
	`˛o£
(
fd
);

123 i‡(
°©us
)

125 
	`¥ötf
("˛o£ faûed wôh s¯%d\n", 
°©us
);

126 
EXIT_THREAD1
;

129 
	`¥ötf
("FöishedÅhªad id %x\n", ()
	`πems_èsk_£lf
());

131 
EXIT_THREAD1
:

132 
	`±hªad_exô
(
NULL
);

133  
NULL
;

134 
	}
}

136 *
	$èsk2
(*
¨gs
)

138 
°©us
, 
fd
;

139 
TaskArgs
 *
›t
 = (TaskArgs*)
¨gs
;

140 
vÆue
;

142 
	`¥ötf
("SèπÅhªad %x\n", ()
	`πems_èsk_£lf
());

144 
fd
 = 
	`›í
(
›t
->
dev«me
, 
O_RDONLY
, 
S_IRUSR
 | 
S_IWUSR
 | 
S_IRGRP
 | 
S_IROTH
);

145 i‡(
fd
 < 0)

147 
	`≥º‹
("open failed");

148 
EXIT_THREAD1
;

152 
i
 = 0; i < 10; ++i)

154 
°©us
 = 
	`io˘l
(
fd
, 
IOCTL_READ_VOLT
, &
vÆue
);

155 i‡(
°©us
)

157 
	`≥º‹
("read ioctl failed");

158 
EXIT_THREAD1
;

161 
	`¥ötf
("%s: %‡Vﬁts\n",
›t
->
dev«me
, 
vÆue
 );

163 i‡(!
	`°rcmp
(
›t
->
dev«me
, 
TSENS_CSS_NAME
Ë|| !°rcmp(›t->dev«me, 
TSENS_MSS_NAME
))

165 
	`¶ìp
(5);

169 
	`¶ìp
(10);

173 
°©us
 = 
	`˛o£
(
fd
);

174 i‡(
°©us
)

176 
	`¥ötf
("˛o£ faûed wôh s¯%d\n", 
°©us
);

177 
EXIT_THREAD1
;

180 
	`¥ötf
("FöishedÅhªad id %x\n", ()
	`πems_èsk_£lf
());

182 
EXIT_THREAD1
:

183 
	`±hªad_exô
(
NULL
);

184  
NULL
;

185 
	}
}

187 
	$runThªads
(
±hªad_©å_t
 *
©å
, 
TaskArgs
 *
t_cfg
)

189 
sc
;

190 
j
;

193 
j
 = 0; j < 
THREAD_NR
; ++j)

195 
sc
 = 
	`±hªad_¸óã
(&
thªad_id
[
j
], 
©å
, 
t_cfg
[j].
èsk
, (*)&t_cfg[j]);

196 i‡(
sc
)

198 
	`¥ötf
("Thªad %d cª©i⁄ faûed", 
j
);

199 
	`≥º‹
("");

203 
j
 = 0; j < 
THREAD_NR
; ++j)

205 
sc
 = 
	`±hªad_joö
(
thªad_id
[
j
], 
NULL
);

206 i‡(
sc
)

208 
	`¥ötf
("Thªad %d joö faûed\n", 
j
);

209 
	`≥º‹
("");

212 
	}
}

214 *
	$POSIX_Inô
–*
¨gumít
 )

216 
	`UNUSED
(
¨gumít
);

217 
±hªad_©å_t
 
©å
;

219 
πems_devi˚_maj‹_numbî
 
ãmp_£ns_maj‹
;

221 
	`¥ötf
("\n---- Temperature Sensor App Init ----\n");

223 
	`unôTe°Inô
();

226 
OsDrvTempSís‹C⁄fig
 
öôcfg
 =

228 .
úq_¥i‹ôy
 = 1,

230 {
OSDRV_TSENS_MANUAL
},

231 {
OSDRV_TSENS_MANUAL
},

232 {
OSDRV_TSENS_CONT_TEMPERATURE
},

233 {
OSDRV_TSENS_CONT_VOLTAGE
}

238 
	`öôClocksAndMem‹y
();

240 
	`πems_io_ªgi°î_drivî
(0, &
ãmp_£ns‹_drv_tbl
, &
ãmp_£ns_maj‹
);

242 
	`πems_io_öôülize
(
ãmp_£ns_maj‹
, 0, (*)&
öôcfg
);

244 if(
	`±hªad_©å_öô
(&
©å
) != 0)

246 
	`¥ötf
("pthread_attr_initÉrror");

248 if(
	`±hªad_©å_£töhîôsched
(&
©å
, 
PTHREAD_EXPLICIT_SCHED
) != 0)

250 
	`¥ötf
("pthread_attr_setinheritschedÉrror");

252 if(
	`±hªad_©å_£tschedpﬁicy
(&
©å
, 
SCHED_RR
) != 0)

254 
	`¥ötf
("pthread_attr_setschedpolicyÉrror");

257 
	`£m_öô
(&
£m
, 0, 0);

260 
OsDrvTempSís‹IrqSëtögs
 
cfg
 =

262 .
thªshﬁd
 = 
TEMP_THRESHOLD
,

263 .
c⁄ãxt
 = (*)&
thªad_id
[2],

264 .
ˇŒback
 = 
ãmpCb


268 
i
 = 0; i < (
THREAD_NR
 - 1); ++i)

270 
tsk_¨gs
[
i
].
dev«me
 = (*)&
dev«mes
[i];

273 
tsk_¨gs
[0].
èsk
 = (*)&
èsk2
;

274 
tsk_¨gs
[1].
èsk
 = (*)&
èsk1
;

275 
tsk_¨gs
[2].
èsk
 = (*)&
èsk1
;

276 
tsk_¨gs
[3].
èsk
 = (*)&
èsk2
;

279 
tsk_¨gs
[4].
dev«me
 = (*)&
dev«mes
[2];

280 
tsk_¨gs
[4].
úq_cfg
 = &
cfg
;

281 
tsk_¨gs
[4].
èsk
 = (*)&
èsk0
;

283 
	`runThªads
(&
©å
, 
tsk_¨gs
);

285 
	`unôTe°FöÆRï‹t
();

286 
	`exô
(0);

287 
	}
}

	@HowTo/rtems_apps/simpleRTEMS_tempSensor/leon/rtems_config.c

10 
	~<πems.h
>

11 
	~<πems/b•Io.h
>

12 
	~<b•.h
>

13 
	~"ÁèlExãnsi⁄.h
"

19 
	#CONFIGURE_INIT


	)

21 #i‚de‡
RTEMS_POSIX_API


22 
	#RTEMS_POSIX_API


	)

25 
	#CONFIGURE_MICROSECONDS_PER_TICK
 1000

	)

27 
	#CONFIGURE_TICKS_PER_TIMESLICE
 10

	)

29 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

30 
	#CONFIGURE_APPLICATION_NEEDS_CLOCK_DRIVER


	)

32 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

34 
	#CONFIGURE_MINIMUM_TASK_STACK_SIZE
 2048

	)

36 
	#CONFIGURE_UNIFIED_WORK_AREAS


	)

37 
	#CONFIGURE_UNLIMITED_OBJECTS


	)

39 
	#CONFIGURE_MAXIMUM_TASKS
 4

	)

41 
	#CONFIGURE_MAXIMUM_THREADS
 8

	)

42 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 8

	)

44 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 8

	)

46 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 8

	)

48 
	#CONFIGURE_MAXIMUM_SEMAPHORES
 8

	)

49 
	#CONFIGURE_MAXIMUM_POSIX_SEMAPHORES
 8

	)

51 
	#CONFIGURE_MAXIMUM_POSIX_MESSAGE_QUEUES
 8

	)

53 
	#CONFIGURE_MAXIMUM_POSIX_TIMERS
 4

	)

55 
	#CONFIGURE_MAXIMUM_TIMERS
 4

	)

57 
	#CONFIGURE_MAXIMUM_DRIVERS
 10

	)

58 
	#CONFIGURE_MAXIMUM_DEVICES
 10

	)

60 
	#CONFIGURE_LIBIO_MAXIMUM_FILE_DESCRIPTORS
 10

	)

62 
	#CONFIGURE_MAXIMUM_USER_EXTENSIONS
 1

	)

63 
	#CONFIGURE_INITIAL_EXTENSIONS
 { .
Áèl
 = 
F©Æ_exãnsi⁄
 }

	)

71 *
POSIX_Inô
–*
¨gumít
 );

73 
	~<πems/c⁄fdefs.h
>

77 
BSP_SET_CLOCK
(12000, 504000, 1, 1,

78 
DEFAULT_RTEMS_CSS_LOS_CLOCKS
,

79 
DEFAULT_RTEMS_MSS_LRT_CLOCKS
,

80 
UPA_SHAVE_L2
,

84 
BSP_SET_L2C_CONFIG
(1, 
L2C_REPL_LRU
, 0, 
L2C_MODE_WRITE_THROUGH
, 0, 
NULL
);

	@HowTo/shaveFifoComm/001_MasterSlave/leon/app_config.c

11 
	~<OsDrvC¥.h
>

12 
	~<DrvShaveL2Cache.h
>

13 
	~"≠p_c⁄fig.h
"

17 
	#L2CACHE_CFG
 (
SHAVE_L2CACHE_NORMAL_MODE
)

	)

31 
	$öôClocksAndMem‹y
()

33 
s32
 
sc
;

35 
tyAuxClkDividîCfg
 
auxClkAŒOn
[] =

37 {
AUX_CLK_MASK_UART
, 
CLK_SRC_REFCLK0
, 96, 625},

42 
sc
 = 
	`OsDrvC¥Inô
();

43 if(
sc
)

44  
sc
;

45 
sc
 = 
	`OsDrvC¥O≥n
();

46 if(
sc
)

47  
sc
;

48 
sc
 = 
	`OsDrvC¥AuxClockAºayC⁄fig
(
auxClkAŒOn
);

49 if(
sc
)

50  
sc
;

53 
sc
 = 
	`DrvShaveL2CacheSëMode
(
L2CACHE_CFG
);

54 if(
sc
)

55  
sc
;

56 
	`DrvShaveL2CacheCÀ¨P¨tôi⁄s
();

57 
	`DrvShaveL2CacheSëupP¨tôi⁄
(
SHAVEPART256KB
);

58 
	`DrvShaveL2CacheAŒoˇãSëP¨tôi⁄s
();

59 
sc
 = 0; sc < 12; sc++)

61 
	`DrvShaveL2CacheSëLSUP¨tId
(
sc
, 0);

63 
	`DrvShaveL2CacheP¨tôi⁄InvÆid©e
(0);

65 
	}
}

	@HowTo/shaveFifoComm/001_MasterSlave/leon/app_config.h

9 #i‚de‡
_APP_CONFIG_H_


10 
	#_APP_CONFIG_H_


	)

17 
	#APP_UPA_CLOCKS
 (
DEV_UPA_SH0
 | \

18 
DEV_UPA_SH1
 | \

19 
DEV_UPA_SH2
 | \

20 
DEV_UPA_SH3
 | \

21 
DEV_UPA_SH4
 | \

22 
DEV_UPA_SH5
 | \

23 
DEV_UPA_SH6
 | \

24 
DEV_UPA_SH7
 | \

25 
DEV_UPA_SH8
 | \

26 
DEV_UPA_SH9
 | \

27 
DEV_UPA_SH10
 | \

28 
DEV_UPA_SH11
 | \

29 
DEV_UPA_SHAVE_L2
 | \

30 
DEV_UPA_CDMA
 | \

31 
DEV_UPA_CTRL
 )

	)

33 
	#EXTRACLOCKS
 (
DEV_MSS_APB_SLV
 | \

34 
DEV_MSS_APB2_CTRL
 | \

35 
DEV_MSS_RTBRIDGE
 | \

36 
DEV_MSS_RTAHB_CTRL
 | \

37 
DEV_MSS_LRT
 | \

38 
DEV_MSS_LRT_DSU
 | \

39 
DEV_MSS_LRT_L2C
 | \

40 
DEV_MSS_LRT_ICB
 | \

41 
DEV_MSS_AXI_BRIDGE
 | \

42 
DEV_MSS_MXI_CTRL
 )

	)

52 
öôClocksAndMem‹y
();

	@HowTo/shaveFifoComm/001_MasterSlave/leon/main.c

12 
	~<°dlib.h
>

13 
	~<°dio.h
>

14 
	~<πems.h
>

15 
	~<πems/b•Io.h
>

16 
	~<DrvShaveL2Cache.h
>

17 
	~<b•.h
>

18 
	~<DrvC¥.h
>

19 
	~<DrvLe⁄.h
>

20 
	~"OsDrvSvu.h
"

21 
	~"πems_c⁄fig.h
"

22 
	~<uni°d.h
>

23 
	~"fifoCommInôApi.h
"

24 
	~"OsDrvTimî.h
"

25 
	~"comm⁄.h
"

29 
	#SHAVE_USED
 0

	)

30 
	#TASK_FIFO
 3

	)

31 
	#TASK_RESPONSE_FIFO
 4

	)

35 
u32
 
hñloShave0_ma°îE¡ry
[];

36 
u32
 
hñloShave0_fifoCommMa°îRun
[];

37 
u32
 
hñloShave1_fifoCommSœveRun
[];

38 
u32
 
hñloShave1_¶aveInôE¡ry
[];

39 
u32
 
hñloShave1_¶aveE¡ry
[];

40 
u32
 
hñloShave2_fifoCommSœveRun
[];

41 
u32
 
hñloShave2_¶aveInôE¡ry
[];

42 
u32
 
hñloShave2_¶aveE¡ry
[];

43 
u32
 
hñloShave3_fifoCommSœveRun
[];

44 
u32
 
hñloShave3_¶aveInôE¡ry
[];

45 
u32
 
hñloShave3_¶aveE¡ry
[];

46 
u32
 
hñloShave4_fifoCommSœveRun
[];

47 
u32
 
hñloShave4_¶aveInôE¡ry
[];

48 
u32
 
hñloShave4_¶aveE¡ry
[];

49 
u32
 
hñloShave5_fifoCommSœveRun
[];

50 
u32
 
hñloShave5_¶aveInôE¡ry
[];

51 
u32
 
hñloShave5_¶aveE¡ry
[];

52 
u32
 
hñloShave6_fifoCommSœveRun
[];

53 
u32
 
hñloShave6_¶aveInôE¡ry
[];

54 
u32
 
hñloShave6_¶aveE¡ry
[];

55 
u32
 
hñloShave7_fifoCommSœveRun
[];

56 
u32
 
hñloShave7_¶aveInôE¡ry
[];

57 
u32
 
hñloShave7_¶aveE¡ry
[];

58 
u32
 
hñloShave8_fifoCommSœveRun
[];

59 
u32
 
hñloShave8_¶aveInôE¡ry
[];

60 
u32
 
hñloShave8_¶aveE¡ry
[];

61 
u32
 
hñloShave9_fifoCommSœveRun
[];

62 
u32
 
hñloShave9_¶aveInôE¡ry
[];

63 
u32
 
hñloShave9_¶aveE¡ry
[];

64 
u32
 
hñloShave10_fifoCommSœveRun
[];

65 
u32
 
hñloShave10_¶aveInôE¡ry
[];

66 
u32
 
hñloShave10_¶aveE¡ry
[];

67 
u32
 
hñloShave11_fifoCommSœveRun
[];

68 
u32
 
hñloShave11_¶aveInôE¡ry
[];

69 
u32
 
hñloShave11_¶aveE¡ry
[];

71 
u32
* 
	g¶aveRun
[] = {

72 
hñloShave1_fifoCommSœveRun
,

73 
hñloShave2_fifoCommSœveRun
,

74 
hñloShave3_fifoCommSœveRun
,

75 
hñloShave4_fifoCommSœveRun
,

76 
hñloShave5_fifoCommSœveRun
,

77 
hñloShave6_fifoCommSœveRun
,

78 
hñloShave7_fifoCommSœveRun
,

79 
hñloShave8_fifoCommSœveRun
,

80 
hñloShave9_fifoCommSœveRun
,

81 
hñloShave10_fifoCommSœveRun
,

82 
hñloShave11_fifoCommSœveRun


85 
u32
* 
	g¶aveInôE¡ry
[] = {

86 
hñloShave1_¶aveInôE¡ry
,

87 
hñloShave2_¶aveInôE¡ry
,

88 
hñloShave3_¶aveInôE¡ry
,

89 
hñloShave4_¶aveInôE¡ry
,

90 
hñloShave5_¶aveInôE¡ry
,

91 
hñloShave6_¶aveInôE¡ry
,

92 
hñloShave7_¶aveInôE¡ry
,

93 
hñloShave8_¶aveInôE¡ry
,

94 
hñloShave9_¶aveInôE¡ry
,

95 
hñloShave10_¶aveInôE¡ry
,

96 
hñloShave11_¶aveInôE¡ry


99 
u32
* 
	g¶aveE¡ry
[] = {

100 
hñloShave1_¶aveE¡ry
,

101 
hñloShave2_¶aveE¡ry
,

102 
hñloShave3_¶aveE¡ry
,

103 
hñloShave4_¶aveE¡ry
,

104 
hñloShave5_¶aveE¡ry
,

105 
hñloShave6_¶aveE¡ry
,

106 
hñloShave7_¶aveE¡ry
,

107 
hñloShave8_¶aveE¡ry
,

108 
hñloShave9_¶aveE¡ry
,

109 
hñloShave10_¶aveE¡ry
,

110 
hñloShave11_¶aveE¡ry


113 
MyD©aTy≥
 
__©åibuã__
((
£˘i⁄
(".cmx_dúe˘.d©a"))Ë
	gd©aS
;

116 
osDrvSvuH™dÀr_t
 
	gh™dÀr
[
NUMBER_OF_SLAVES_USED
 + 1];

123 *
	$POSIX_Inô
(*
¨gs
)

125 
	`UNUSED
(
¨gs
);

126 
s32
 
sc
;

127 
tyTimeSèmp
 
timeSèmp
;

128 
u64
 
ñ≠£dTicks
;

129 
fifoCommTask_t
 
èskTy≥s
[
NUMBER_OF_SLAVES_USED
 + 1];

130 
fifoCommSœveH™dÀr_t
 
¶aveH™dÀr
[
NUMBER_OF_SLAVES_USED
];

132 
d©aS
.
n
 = 10000;

134 
sc
 = 
	`öôClocksAndMem‹y
();

135 i‡(
sc
)

136 
	`exô
(
sc
);

137 
sc
 = 
	`OsDrvSvuInô
();

138 i‡(
sc
)

139 
	`exô
(
sc
);

142 
fifoCommMa°îH™dÀr_t
 
ma°îH™dÀr
;

143 
	`fifoCommMa°îInô
(&
ma°îH™dÀr
,

144 (
fifoCommMa°îCÆlback_t
Ë
hñloShave0_ma°îE¡ry
);

145 
	`fifoCommMa°îRegi°îTaskTy≥
(&
ma°îH™dÀr
, &
èskTy≥s
[0], 
TASK_FIFO
, 
TASK_RESPONSE_FIFO
);

148 
i
 = 1; i <
NUMBER_OF_SLAVES_USED
; i++)

150 
	`fifoCommSœveInô
(&
¶aveH™dÀr
[
i
 - 1]);

151 
	`fifoCommSœveRegi°îTaskTy≥
(&
¶aveH™dÀr
[
i
 - 1], &
èskTy≥s
[i],

152 &
èskTy≥s
[0], (
fifoCommTaskCÆlback_t
Ë
¶aveInôE¡ry
[
i
 - 1],

153 (
fifoCommTaskCÆlback_t
Ë
¶aveE¡ry
[
i
 - 1]);

157 
i
 = 1; i <
NUMBER_OF_SLAVES_USED
; i++)

159 
	`fifoCommSèπSœve
(&
¶aveH™dÀr
[
i
-1], &
h™dÀr
[i], 
¶aveRun
[i-1], i);

163 
sc
 = 
	`OsDrvTimîInô
();

164 i‡(
sc
)

165 
	`exô
(
sc
);

167 
sc
 = 
	`OsDrvTimîSèπTicksCou¡
(&
timeSèmp
);

168 i‡(
sc
)

169 
	`exô
(
sc
);

170 
sc
 = 
	`fifoCommSèπMa°î
(&
ma°îH™dÀr
, &
h™dÀr
[0], 
hñloShave0_fifoCommMa°îRun
, &
d©aS
, 
SHAVE_USED
);

171 i‡(
sc
)

172 
	`exô
(
sc
);

173 
	`fifoCommWaôMa°î
(&
h™dÀr
[0]);

175 
sc
 = 
	`OsDrvTimîGëEœp£dTicks
(&
timeSèmp
, &
ñ≠£dTicks
);

176 i‡(
sc
)

177 
	`exô
(
sc
);

178 
	`¥ötf
("Eœp£dÅime:%ŒuÅicks\n", 
ñ≠£dTicks
);

181 
boﬁ
 
ã°
 = 
åue
;

182 
i
 = 0; i < 
TASKS
; i++)

183 
j
 = 0; j < 
BUFFSIZE
; j++)

184 i‡(
d©aS
.
n
 !d©aS.
d©a
[
i
][i])

185 
ã°
 = 
Ál£
;

187 i‡(
ã°
)

188 
	`¥ötf
("TestÖassed\n");

190 
	`¥ötf
("Test failed\n");

193 
i
 = 1; i <
NUMBER_OF_SLAVES_USED
; i++)

195 
	`fifoCommWaôSœve
(&
h™dÀr
[
i
]);

198 
	`exô
(0);

199 
	}
}

	@HowTo/shaveFifoComm/001_MasterSlave/leon/rtems_config.h

8 #i‚de‡
LEON_RTEMS_CONFIG_H_


9 
	#LEON_RTEMS_CONFIG_H_


	)

12 #i‚de‡
_RTEMS_CONFIG_H_


13 
	#_RTEMS_CONFIG_H_


	)

17 
	~"≠p_c⁄fig.h
"

18 
	~"ÁèlExãnsi⁄.h
"

23 #i‡
deföed
(
__RTEMS__
)

25 #i‡!
deföed
 (
__CONFIG__
)

26 
	#__CONFIG__


	)

29 
	#CONFIGURE_INIT


	)

31 #i‚de‡
RTEMS_POSIX_API


32 
	#RTEMS_POSIX_API


	)

35 
	#CONFIGURE_MICROSECONDS_PER_TICK
 1000

	)

37 
	#CONFIGURE_TICKS_PER_TIMESLICE
 10

	)

39 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

41 
	#CONFIGURE_APPLICATION_NEEDS_CLOCK_DRIVER


	)

43 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

45 
	#CONFIGURE_MINIMUM_TASK_STACK_SIZE
 4096

	)

47 
	#CONFIGURE_MAXIMUM_TASKS
 4

	)

49 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 4

	)

51 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 8

	)

53 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 8

	)

55 
	#CONFIGURE_MAXIMUM_POSIX_SEMAPHORES
 8

	)

57 
	#CONFIGURE_MAXIMUM_POSIX_MESSAGE_QUEUES
 8

	)

59 
	#CONFIGURE_MAXIMUM_POSIX_TIMERS
 4

	)

61 
	#CONFIGURE_MAXIMUM_TIMERS
 4

	)

63 
	#CONFIGURE_MAXIMUM_SEMAPHORES
 2

	)

66 
	#CONFIGURE_MAXIMUM_USER_EXTENSIONS
 1

	)

67 
	#CONFIGURE_INITIAL_EXTENSIONS
 { .
Áèl
 = 
F©Æ_exãnsi⁄
 }

	)

74 *
POSIX_Inô
 (*
¨gs
);

76 
	~<πems/c⁄fdefs.h
>

84 
BSP_SET_CLOCK
(12000, 600000, 1, 1, 
DEFAULT_RTEMS_CSS_LOS_CLOCKS
, 
DEFAULT_RTEMS_MSS_LRT_CLOCKS
 | 
EXTRACLOCKS
, 
APP_UPA_CLOCKS
, 0, 0);

87 
BSP_SET_L2C_CONFIG
(0, 
L2C_REPL_LRU
, 0, 
L2C_MODE_COPY_BACK
, 0, 
NULL
);

	@HowTo/shaveFifoComm/001_MasterSlave/shared/common.h

8 #i‚de‡
__COMMON__H_


9 
	#__COMMON__H_


	)

16 
	#TASKS
 5

	)

17 
	#BUFFSIZE
 1024

	)

18 
	#NUMBER_OF_SLAVES_USED
 11

	)

20 
	sMyD©a
{

21 
	mn
;

22 
	md©a
[
NUMBER_OF_SLAVES_USED
][
BUFFSIZE
];

23 }
	tMyD©aTy≥
;

	@HowTo/shaveFifoComm/001_MasterSlave/shave/shaveMain.c

11 
	~<°dio.h
>

12 
	~<°rög.h
>

13 
	~<svuComm⁄Shave.h
>

14 
	~"fifoCommApi.h
"

15 
	~"comm⁄.h
"

28 
	$ma°îE¡ry
(
fifoCommMa°îH™dÀr_t
* 
ma°îH™dÀr
, 
MyD©aTy≥
* 
d©aS
)

30 
tmp
;

31 
n
 = 
d©aS
->n;

33 
n
)

35 
i
 = 0; i < 
TASKS
; i++)

37 
tmp
 = 
d©aS
->
d©a
[
i
][0];

39 
	`fifoCommMa°îAddTask
(
ma°îH™dÀr
->
èskTy≥Li°
,

40 (*Ë
d©aS
->
d©a
[
i
]);

41 
	`fifoCommMa°îWaôTask
(
ma°îH™dÀr
->
èskTy≥Li°
);

43 
n
--;

47 
	}
}

50 
	$¶aveInôE¡ry
(* 
u¬e˚sßry
, * 
u¬e˚sßry2
)

52 (Ë
u¬e˚sßry
;

53 (Ë
u¬e˚sßry2
;

55 
	}
}

58 
¶aveE¡ry
((*
d©a
)[
BUFFSIZE
], * 
u¬e˚sßry
)

60 (Ë
	gu¬e˚sßry
;

62 
	gj
 = 0; j < 
	gBUFFSIZE
; j++)

63 (*
	gd©a
)[
j
] = (*
d©a
)[j] + 1;

	@HowTo/shaveFifoComm/002_MultipleTaskTypes/leon/app_config.c

11 
	~<OsDrvC¥.h
>

12 
	~<DrvShaveL2Cache.h
>

13 
	~"≠p_c⁄fig.h
"

17 
	#L2CACHE_CFG
 (
SHAVE_L2CACHE_NORMAL_MODE
)

	)

31 
	$öôClocksAndMem‹y
()

33 
s32
 
sc
;

35 
tyAuxClkDividîCfg
 
auxClkAŒOn
[] =

37 {
AUX_CLK_MASK_UART
, 
CLK_SRC_REFCLK0
, 96, 625},

42 
sc
 = 
	`OsDrvC¥Inô
();

43 if(
sc
)

44  
sc
;

45 
sc
 = 
	`OsDrvC¥O≥n
();

46 if(
sc
)

47  
sc
;

48 
sc
 = 
	`OsDrvC¥AuxClockAºayC⁄fig
(
auxClkAŒOn
);

49 if(
sc
)

50  
sc
;

53 
sc
 = 
	`DrvShaveL2CacheSëMode
(
L2CACHE_CFG
);

54 if(
sc
)

55  
sc
;

56 
	`DrvShaveL2CacheCÀ¨P¨tôi⁄s
();

57 
	`DrvShaveL2CacheSëupP¨tôi⁄
(
SHAVEPART256KB
);

58 
	`DrvShaveL2CacheAŒoˇãSëP¨tôi⁄s
();

59 
sc
 = 0; sc < 12; sc++)

61 
	`DrvShaveL2CacheSëLSUP¨tId
(
sc
, 0);

63 
	`DrvShaveL2CacheP¨tôi⁄InvÆid©e
(0);

65 
	}
}

	@HowTo/shaveFifoComm/002_MultipleTaskTypes/leon/app_config.h

9 #i‚de‡
_APP_CONFIG_H_


10 
	#_APP_CONFIG_H_


	)

17 
	#APP_UPA_CLOCKS
 (
DEV_UPA_SH0
 | \

18 
DEV_UPA_SH1
 | \

19 
DEV_UPA_SH2
 | \

20 
DEV_UPA_SH3
 | \

21 
DEV_UPA_SH4
 | \

22 
DEV_UPA_SH5
 | \

23 
DEV_UPA_SH6
 | \

24 
DEV_UPA_SH7
 | \

25 
DEV_UPA_SH8
 | \

26 
DEV_UPA_SH9
 | \

27 
DEV_UPA_SH10
 | \

28 
DEV_UPA_SH11
 | \

29 
DEV_UPA_SHAVE_L2
 | \

30 
DEV_UPA_CDMA
 | \

31 
DEV_UPA_CTRL
 )

	)

33 
	#EXTRACLOCKS
 (
DEV_MSS_APB_SLV
 | \

34 
DEV_MSS_APB2_CTRL
 | \

35 
DEV_MSS_RTBRIDGE
 | \

36 
DEV_MSS_RTAHB_CTRL
 | \

37 
DEV_MSS_LRT
 | \

38 
DEV_MSS_LRT_DSU
 | \

39 
DEV_MSS_LRT_L2C
 | \

40 
DEV_MSS_LRT_ICB
 | \

41 
DEV_MSS_AXI_BRIDGE
 | \

42 
DEV_MSS_MXI_CTRL
 )

	)

52 
öôClocksAndMem‹y
();

	@HowTo/shaveFifoComm/002_MultipleTaskTypes/leon/main.c

12 
	~<°dlib.h
>

13 
	~<°dio.h
>

14 
	~<πems.h
>

15 
	~<πems/b•Io.h
>

16 
	~<DrvShaveL2Cache.h
>

17 
	~<b•.h
>

18 
	~<DrvC¥.h
>

19 
	~<DrvLe⁄.h
>

20 
	~"OsDrvSvu.h
"

21 
	~"πems_c⁄fig.h
"

22 
	~<uni°d.h
>

23 
	~"fifoCommInôApi.h
"

24 
	~"OsDrvTimî.h
"

25 
	~"comm⁄.h
"

29 
	#SHAVE_USED
 0

	)

33 
u32
 
hñloShave0_ma°îE¡ry
[];

34 
u32
 
hñloShave0_fifoCommMa°îRun
[];

36 
u32
 
hñloShave1_¶aveInôE¡ry
[];

37 
u32
 
hñloShave1_¶aveE¡ry
[];

38 
u32
 
hñloShave2_¶aveInôE¡ry
[];

39 
u32
 
hñloShave2_¶aveE¡ry
[];

40 
u32
 
hñloShave3_¶aveInôE¡ry
[];

41 
u32
 
hñloShave3_¶aveE¡ry
[];

42 
u32
 
hñloShave4_¶aveInôE¡ry
[];

43 
u32
 
hñloShave4_¶aveE¡ry
[];

44 
u32
 
hñloShave5_¶aveInôE¡ry
[];

45 
u32
 
hñloShave5_¶aveE¡ry
[];

46 
u32
 
hñloShave6_¶aveInôE¡ry
[];

47 
u32
 
hñloShave6_¶aveE¡ry2
[];

48 
u32
 
hñloShave6_¶aveE¡ry
[];

49 
u32
 
hñloShave7_¶aveInôE¡ry
[];

50 
u32
 
hñloShave7_¶aveE¡ry2
[];

51 
u32
 
hñloShave8_¶aveInôE¡ry
[];

52 
u32
 
hñloShave8_¶aveE¡ry2
[];

53 
u32
 
hñloShave9_¶aveInôE¡ry
[];

54 
u32
 
hñloShave9_¶aveE¡ry2
[];

55 
u32
 
hñloShave10_¶aveInôE¡ry
[];

56 
u32
 
hñloShave10_¶aveE¡ry2
[];

57 
u32
 
hñloShave11_¶aveInôE¡ry
[];

58 
u32
 
hñloShave11_¶aveE¡ry2
[];

59 
u32
 
hñloShave1_fifoCommSœveRun
[];

60 
u32
 
hñloShave2_fifoCommSœveRun
[];

61 
u32
 
hñloShave3_fifoCommSœveRun
[];

62 
u32
 
hñloShave4_fifoCommSœveRun
[];

63 
u32
 
hñloShave5_fifoCommSœveRun
[];

64 
u32
 
hñloShave6_fifoCommSœveRun
[];

65 
u32
 
hñloShave7_fifoCommSœveRun
[];

66 
u32
 
hñloShave8_fifoCommSœveRun
[];

67 
u32
 
hñloShave9_fifoCommSœveRun
[];

68 
u32
 
hñloShave10_fifoCommSœveRun
[];

69 
u32
 
hñloShave11_fifoCommSœveRun
[];

73 
u32
* 
	g¶aveInôE¡ry
[] = {

74 
hñloShave1_¶aveInôE¡ry
,

75 
hñloShave2_¶aveInôE¡ry
,

76 
hñloShave3_¶aveInôE¡ry
,

77 
hñloShave4_¶aveInôE¡ry
,

78 
hñloShave5_¶aveInôE¡ry
,

79 
hñloShave6_¶aveInôE¡ry
,

80 
hñloShave7_¶aveInôE¡ry
,

81 
hñloShave8_¶aveInôE¡ry
,

82 
hñloShave9_¶aveInôE¡ry
,

83 
hñloShave10_¶aveInôE¡ry
,

84 
hñloShave11_¶aveInôE¡ry


87 
u32
* 
	g¶aveE¡ry
[] = {

88 
hñloShave1_¶aveE¡ry
,

89 
hñloShave2_¶aveE¡ry
,

90 
hñloShave3_¶aveE¡ry
,

91 
hñloShave4_¶aveE¡ry
,

92 
hñloShave5_¶aveE¡ry
,

93 
hñloShave6_¶aveE¡ry
,

94 
hñloShave6_¶aveE¡ry2
,

95 
hñloShave7_¶aveE¡ry2
,

96 
hñloShave8_¶aveE¡ry2
,

97 
hñloShave9_¶aveE¡ry2
,

98 
hñloShave10_¶aveE¡ry2
,

99 
hñloShave11_¶aveE¡ry2


102 
u32
* 
	g¶aveRun
[] = {

103 
hñloShave1_fifoCommSœveRun
,

104 
hñloShave2_fifoCommSœveRun
,

105 
hñloShave3_fifoCommSœveRun
,

106 
hñloShave4_fifoCommSœveRun
,

107 
hñloShave5_fifoCommSœveRun
,

108 
hñloShave6_fifoCommSœveRun
,

109 
hñloShave7_fifoCommSœveRun
,

110 
hñloShave8_fifoCommSœveRun
,

111 
hñloShave9_fifoCommSœveRun
,

112 
hñloShave10_fifoCommSœveRun
,

113 
hñloShave11_fifoCommSœveRun


115 
	gTaskFifo
[] = {0, 2, 4, 6, 8, 10};

116 
	gTaskRe•⁄£Fifo
[] = {1, 3, 5, 7, 9, 11};

118 
MyD©aTy≥
 
__©åibuã__
((
£˘i⁄
(".cmx_dúe˘.d©a"))Ë
	gd©aS
;

121 
osDrvSvuH™dÀr_t
 
	gh™dÀr
[
NUMBER_OF_SLAVES_USED
 + 1];

128 *
	$POSIX_Inô
(*
¨gs
)

130 
	`UNUSED
(
¨gs
);

131 
s32
 
sc
;

132 
tyTimeSèmp
 
timeSèmp
;

133 
u64
 
ñ≠£dTicks
;

134 
fifoCommTask_t
 
èskTy≥s
[
NUMBER_OF_SLAVES_USED
 + 3];

135 
fifoCommSœveH™dÀr_t
 
¶aveH™dÀr
[
NUMBER_OF_SLAVES_USED
];

137 
d©aS
.
n
 = 10000;

139 
sc
 = 
	`öôClocksAndMem‹y
();

140 i‡(
sc
)

141 
	`exô
(
sc
);

142 
sc
 = 
	`OsDrvSvuInô
();

143 i‡(
sc
)

144 
	`exô
(
sc
);

147 
fifoCommMa°îH™dÀr_t
 
ma°îH™dÀr
;

148 
	`fifoCommMa°îInô
(&
ma°îH™dÀr
,

149 (
fifoCommMa°îCÆlback_t
Ë
hñloShave0_ma°îE¡ry
);

151 
sc
 = 
	`OsDrvTimîInô
();

152 i‡(
sc
)

153 
	`exô
(
sc
);

156 
k
 = 0, 
t
=1;

157 
k
 < 6)

159 
boﬁ
 
ã°
 = 
åue
;

161 
i
 = 1; i <
NUMBER_OF_SLAVES_USED
; i++)

162 
	`fifoCommSœveInô
(&
¶aveH™dÀr
[
i
 - 1]);

164 
	`fifoCommMa°îRegi°îTaskTy≥
(&
ma°îH™dÀr
, &
èskTy≥s
[0],

165 
TaskFifo
[
k
], 
TaskRe•⁄£Fifo
[k]);

166 
k
++;

167 
	`fifoCommMa°îRegi°îTaskTy≥
(&
ma°îH™dÀr
, &
èskTy≥s
[1],

168 
TaskFifo
[
k
], 
TaskRe•⁄£Fifo
[k]);

171 
i
 = 1; i <
NUMBER_OF_SLAVES_USED
 / 2 + 1; i++)

172 
	`fifoCommSœveRegi°îTaskTy≥
(&
¶aveH™dÀr
[
i
 - 1],

173 &
èskTy≥s
[
i
 + 1], &taskTypes[0],

174 (
fifoCommTaskCÆlback_t
Ë
¶aveInôE¡ry
[
i
 - 1],

175 (
fifoCommTaskCÆlback_t
Ë
¶aveE¡ry
[
i
 - 1]);

179 
i
 = 
NUMBER_OF_SLAVES_USED
 / 2 + 1; i <= NUMBER_OF_SLAVES_USED;

180 
i
++)

181 
	`fifoCommSœveRegi°îTaskTy≥
(&
¶aveH™dÀr
[
i
 - 1],

182 &
èskTy≥s
[
i
 + 2], &taskTypes[1],

183 (
fifoCommTaskCÆlback_t
Ë
¶aveInôE¡ry
[
i
 - 1],

184 (
fifoCommTaskCÆlback_t
Ë
¶aveE¡ry
[
i
]);

187 
i
 = 1; i <
NUMBER_OF_SLAVES_USED
; i++)

189 
	`fifoCommSèπSœve
(&
¶aveH™dÀr
[
i
-1], &
h™dÀr
[i], 
¶aveRun
[i-1], i);

193 
sc
 = 
	`OsDrvTimîSèπTicksCou¡
(&
timeSèmp
);

194 i‡(
sc
)

195 
	`exô
(
sc
);

196 
sc
 = 
	`fifoCommSèπMa°î
(&
ma°îH™dÀr
, &
h™dÀr
[0], 
hñloShave0_fifoCommMa°îRun
, &
d©aS
, 
SHAVE_USED
);

197 i‡(
sc
)

198 
	`exô
(
sc
);

199 
	`fifoCommWaôMa°î
(&
h™dÀr
[0]);

200 
sc
 = 
	`OsDrvTimîGëEœp£dTicks
(&
timeSèmp
, &
ñ≠£dTicks
);

201 i‡(
sc
)

202 
	`exô
(
sc
);

203 
	`¥ötf
("Eœp£dÅime:%ŒuÅicks\n", 
ñ≠£dTicks
);

204 
k
++;

207 
i
 = 0; i < 
TASKS
; i++)

208 
j
 = 0; j < 
BUFFSIZE
; j++)

209 i‡(
d©aS
.
n
*
t
 + d©aS.n*t*100!d©aS.
d©a
[
i
][i])

210 
ã°
 = 
Ál£
;

211 i‡(
ã°
)

212 
	`¥ötf
("TestÖassed\n");

214 
	`¥ötf
("Test failed\n");

217 
i
 = 1; i <
NUMBER_OF_SLAVES_USED
; i++)

219 
	`fifoCommWaôSœve
(&
h™dÀr
[
i
]);

222 
t
++;

225 
	`exô
(0);

226 
	}
}

	@HowTo/shaveFifoComm/002_MultipleTaskTypes/leon/rtems_config.h

8 #i‚de‡
LEON_RTEMS_CONFIG_H_


9 
	#LEON_RTEMS_CONFIG_H_


	)

12 #i‚de‡
_RTEMS_CONFIG_H_


13 
	#_RTEMS_CONFIG_H_


	)

17 
	~"≠p_c⁄fig.h
"

18 
	~"ÁèlExãnsi⁄.h
"

23 #i‡
deföed
(
__RTEMS__
)

25 #i‡!
deföed
 (
__CONFIG__
)

26 
	#__CONFIG__


	)

29 
	#CONFIGURE_INIT


	)

31 #i‚de‡
RTEMS_POSIX_API


32 
	#RTEMS_POSIX_API


	)

35 
	#CONFIGURE_MICROSECONDS_PER_TICK
 1000

	)

37 
	#CONFIGURE_TICKS_PER_TIMESLICE
 10

	)

39 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

41 
	#CONFIGURE_APPLICATION_NEEDS_CLOCK_DRIVER


	)

43 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

45 
	#CONFIGURE_MINIMUM_TASK_STACK_SIZE
 4096

	)

47 
	#CONFIGURE_MAXIMUM_TASKS
 4

	)

49 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 4

	)

51 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 8

	)

53 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 8

	)

55 
	#CONFIGURE_MAXIMUM_POSIX_SEMAPHORES
 8

	)

57 
	#CONFIGURE_MAXIMUM_POSIX_MESSAGE_QUEUES
 8

	)

59 
	#CONFIGURE_MAXIMUM_POSIX_TIMERS
 4

	)

61 
	#CONFIGURE_MAXIMUM_TIMERS
 4

	)

63 
	#CONFIGURE_MAXIMUM_SEMAPHORES
 2

	)

66 
	#CONFIGURE_MAXIMUM_USER_EXTENSIONS
 1

	)

67 
	#CONFIGURE_INITIAL_EXTENSIONS
 { .
Áèl
 = 
F©Æ_exãnsi⁄
 }

	)

74 *
POSIX_Inô
 (*
¨gs
);

76 
	~<πems/c⁄fdefs.h
>

84 
BSP_SET_CLOCK
(12000, 600000, 1, 1, 
DEFAULT_RTEMS_CSS_LOS_CLOCKS
, 
DEFAULT_RTEMS_MSS_LRT_CLOCKS
 | 
EXTRACLOCKS
, 
APP_UPA_CLOCKS
, 0, 0);

87 
BSP_SET_L2C_CONFIG
(0, 
L2C_REPL_LRU
, 0, 
L2C_MODE_COPY_BACK
, 0, 
NULL
);

	@HowTo/shaveFifoComm/002_MultipleTaskTypes/shared/common.h

8 #i‚de‡
__COMMON__H_


9 
	#__COMMON__H_


	)

16 
	#TASKS
 5

	)

17 
	#BUFFSIZE
 1024

	)

18 
	#NUMBER_OF_SLAVES_USED
 11

	)

20 
	sMyD©a
{

21 
	mn
;

22 
	md©a
[
NUMBER_OF_SLAVES_USED
][
BUFFSIZE
];

23 }
	tMyD©aTy≥
;

	@HowTo/shaveFifoComm/002_MultipleTaskTypes/shave/shaveMain.c

11 
	~<°dio.h
>

12 
	~<°rög.h
>

13 
	~<svuComm⁄Shave.h
>

14 
	~"fifoCommApi.h
"

15 
	~"comm⁄.h
"

28 
	$ma°îE¡ry
(
fifoCommMa°îH™dÀr_t
* 
ma°îH™dÀr
, 
MyD©aTy≥
* 
d©aS
)

30 
n
 = 
d©aS
->n;

32 
n
)

34 
i
 = 0; i < 
TASKS
; i++)

36 
	`fifoCommMa°îAddTask
(
ma°îH™dÀr
->
èskTy≥Li°
,

37 (*Ë
d©aS
->
d©a
[
i
]);

38 
	`fifoCommMa°îWaôTask
(
ma°îH™dÀr
->
èskTy≥Li°
);

39 
	`fifoCommMa°îAddTask
(
ma°îH™dÀr
->
èskTy≥Li°
->
√xt
,

40 (*Ë
d©aS
->
d©a
[
i
]);

41 
	`fifoCommMa°îWaôTask
(
ma°îH™dÀr
->
èskTy≥Li°
->
√xt
);

43 
n
--;

47 
	}
}

50 
	$¶aveInôE¡ry
(* 
u¬e˚sßry
, * 
u¬e˚sßry2
)

52 (Ë
u¬e˚sßry
;

53 (Ë
u¬e˚sßry2
;

55 
	}
}

58 
¶aveE¡ry
((*
d©a
)[
BUFFSIZE
], * 
u¬e˚sßry
)

60 (Ë
	gu¬e˚sßry
;

62 
	gj
 = 0; j < 
	gBUFFSIZE
; j++)

63 (*
	gd©a
)[
j
] = (*
d©a
)[j] + 1;

69 
¶aveE¡ry2
((*
d©a
)[
BUFFSIZE
], * 
u¬e˚sßry
)

71 (Ë
	gu¬e˚sßry
;

73 
	gj
 = 0; j < 
	gBUFFSIZE
; j++)

74 (*
	gd©a
)[
j
] = (*
d©a
)[j] + 100;

	@Progressive/ma2x5x/000_HelloWorld_BareMetal/leon/app_config.c

11 
	~<DrvC¥.h
>

12 
	~<DrvShaveL2Cache.h
>

13 
	~"≠p_c⁄fig.h
"

18 
	#L2CACHE_CFG
 (
SHAVE_L2CACHE_NORMAL_MODE
)

	)

33 
	$öôClocksAndMem‹y
()

35 
s32
 
sc
;

37 
tyAuxClkDividîCfg
 
auxClkAŒOn
[] =

39 {
AUX_CLK_MASK_UART
, 
CLK_SRC_REFCLK0
, 96, 625},

43 
tySocClockC⁄fig
 
≠pClockC⁄fig600_266
 =

45 .
ªfClk0I≈utKhz
 = 12000,

46 .
ªfClk1I≈utKhz
 = 0,

47 .
èrgëPŒ0FªqKhz
 = 266000,

48 .
èrgëPŒ1FªqKhz
 = 0,

49 .
˛kSrcPŒ1
 = 
CLK_SRC_REFCLK0
,

50 .
ma°îClkDivNumî©‹
 = 1,

51 .
ma°îClkDivDíomö©‹
 = 1,

52 .
cssDssClockE«bÀMask
 = 
DEFAULT_CORE_CSS_DSS_CLOCKS
,

53 .
mssClockE«bÀMask
 = 0,

54 .
u∑ClockE«bÀMask
 = 
UPA_SHAVE_L2
,

55 .
pAuxClkCfg
 = 
auxClkAŒOn
,

58 
sc
 = 
	`DrvC¥Inô
();

59 if(
sc
)

60  
sc
;

61 
sc
 = 
	`DrvC¥SëupClocks
(&
≠pClockC⁄fig600_266
);

62 if(
sc
)

63  
sc
;

65 
sc
 = 
	`DrvShaveL2CacheSëMode
(
L2CACHE_CFG
);

66 if(
sc
)

67  
sc
;

70 
	`DrvShaveL2CacheSëupP¨tôi⁄
(
SHAVEPART256KB
);

73 
sc
 = 
	`DrvShaveL2CacheAŒoˇãSëP¨tôi⁄s
();

74 if(
sc
)

75  
sc
;

77 
	`DrvShaveL2CacheP¨tôi⁄InvÆid©e
(
PARTITION_0
);

80 
	}
}

	@Progressive/ma2x5x/000_HelloWorld_BareMetal/leon/app_config.h

9 #i‚de‡
_APP_CONFIG_H_


10 
	#_APP_CONFIG_H_


	)

12 
	~<mv_ty≥s.h
>

15 
	#PARTITION_0
 (0)

	)

20 
öôClocksAndMem‹y
();

	@Progressive/ma2x5x/000_HelloWorld_BareMetal/leon/main.c

12 
	~<°dio.h
>

13 
	~"≠p_c⁄fig.h
"

14 
	~<UnôTe°Api.h
>

32 
	$maö
()

34 
s32
 
sc
;

35 
	`unôTe°Inô
 ();

36 
sc
 = 
	`öôClocksAndMem‹y
();

37 if(
sc
)

38  
sc
;

39 
	`¥ötf
("\n\nHello from LEON!\n\n\n");

40 
	`unôTe°FöÆRï‹t
 ();

42 
	}
}

	@Progressive/ma2x5x/001_HelloWorldShave/leon/app_config.c

11 
	~<OsDrvC¥.h
>

12 
	~"OsDrvShaveL2Cache.h
"

13 
	~"≠p_c⁄fig.h
"

17 
	#L2CACHE_CFG
 (
SHAVE_L2CACHE_NORMAL_MODE
)

	)

31 
	$öôClocksAndMem‹y
()

33 
s32
 
sc
;

35 
tyAuxClkDividîCfg
 
auxClkAŒOn
[] =

37 {
AUX_CLK_MASK_UART
, 
CLK_SRC_REFCLK0
, 96, 625},

42 
sc
 = 
	`OsDrvC¥Inô
();

43 if(
sc
)

44  
sc
;

45 
sc
 = 
	`OsDrvC¥O≥n
();

46 if(
sc
)

47  
sc
;

48 
sc
 = 
	`OsDrvC¥AuxClockAºayC⁄fig
(
auxClkAŒOn
);

49 if(
sc
)

50  
sc
;

53 
sc
 = 
	`OsDrvShaveL2CacheInô
(
L2CACHE_CFG
);

54 if(
sc
)

55  
sc
;

58 
∑πôi⁄_id
;

59 
	`OsDrvShaveL2CGëP¨tôi⁄
(
SHAVEPART256KB
, &
∑πôi⁄_id
);

62 
sc
 = 
	`OsDrvShaveL2CacheAŒoˇãSëP¨tôi⁄s
();

63 if(
sc
)

64  
sc
;

67 
i
 = 0; i < 
SHAVES_USED
; i++)

69 
	`OsDrvShaveL2CSëN⁄WödowedP¨tôi⁄
(
i
, 0, 
NON_WINDOWED_DATA_PARTITION
);

70 
	`OsDrvShaveL2CSëN⁄WödowedP¨tôi⁄
(
i
, 0, 
NON_WINDOWED_INSTRUCTIONS_PARTITION
);

73 
	`OsDrvShaveL2CacheP¨tôi⁄InvÆid©e
(0);

76 
	}
}

	@Progressive/ma2x5x/001_HelloWorldShave/leon/app_config.h

9 #i‚de‡
_APP_CONFIG_H_


10 
	#_APP_CONFIG_H_


	)

17 
	#APP_UPA_CLOCKS
 (
DEV_UPA_SH0
 | \

18 
DEV_UPA_SHAVE_L2
 | \

19 
DEV_UPA_CDMA
 | \

20 
DEV_UPA_CTRL
 )

	)

22 
	#EXTRACLOCKS
 (
DEV_MSS_APB_SLV
 | \

23 
DEV_MSS_APB2_CTRL
 | \

24 
DEV_MSS_RTBRIDGE
 | \

25 
DEV_MSS_RTAHB_CTRL
 | \

26 
DEV_MSS_LRT
 | \

27 
DEV_MSS_LRT_DSU
 | \

28 
DEV_MSS_LRT_L2C
 | \

29 
DEV_MSS_LRT_ICB
 | \

30 
DEV_MSS_AXI_BRIDGE
 | \

31 
DEV_MSS_MXI_CTRL
 )

	)

33 
	#SHAVES_USED
 (1)

	)

43 
öôClocksAndMem‹y
();

	@Progressive/ma2x5x/001_HelloWorldShave/leon/main.c

12 
	~<°dlib.h
>

13 
	~<°dio.h
>

14 
	~<πems.h
>

15 
	~<πems/b•Io.h
>

16 
	~<UnôTe°Api.h
>

18 
	~<DrvShaveL2Cache.h
>

19 
	~<b•.h
>

20 
	~<DrvC¥.h
>

21 
	~<DrvLe⁄.h
>

22 
	~"OsDrvSvu.h
"

23 
	~"πems_c⁄fig.h
"

24 
	~<uni°d.h
>

27 
	#SHAVE_USED
 0

	)

31 
u32
 
hñloShave0_maö
;

35 
osDrvSvuH™dÀr_t
 
	gh™dÀr
;

41 *
	$POSIX_Inô
(*
¨gs
)

43 
	`UNUSED
(
¨gs
);

45 
u32
 
ru¬ög
;

46 
s32
 
sc
;

47 
	`unôTe°Inô
 ();

48 
sc
 = 
	`öôClocksAndMem‹y
();

49 i‡(
sc
)

50 
	`exô
(
sc
);

51 
sc
 = 
	`OsDrvSvuInô
();

52 i‡(
sc
)

53 
	`exô
(
sc
);

54 
sc
 = 
	`OsDrvSvuO≥nShave
(&
h™dÀr
, 
SHAVE_USED
, 
OS_MYR_PROTECTION_SEM
);

55 i‡(
sc
 =
OS_MYR_DRV_SUCCESS
)

57 
sc
 = 
	`OsDrvSvuRe£tShave
(&
h™dÀr
);

58 i‡(
sc
)

59 
	`exô
(
sc
);

60 
sc
 = 
	`OsDrvSvuSëAbsﬁuãDeÁu…Sèck
(&
h™dÀr
);

61 i‡(
sc
)

62 
	`exô
(
sc
);

63 
sc
 = 
	`OsDrvSvuSèπShave
(&
h™dÀr
, (
u32
Ë&
hñloShave0_maö
);

64 i‡(
sc
)

65 
	`exô
(
sc
);

66 
sc
 = 
	`OsDrvSvuWaôShaves
(1, &
h™dÀr
, 
OS_DRV_SVU_WAIT_FOREVER
, &
ru¬ög
);

67 i‡(
sc
)

68 
	`exô
(
sc
);

69 
sc
 = 
	`OsDrvSvuClo£Shave
(&
h™dÀr
);

70 i‡(
sc
)

71 
	`exô
(
sc
);

75 
	`¥ötf
("[T2] c™nŸ o≥¿shavê%d\n", 
SHAVE_USED
);

77 
	`unôTe°FöÆRï‹t
 ();

78 
	`exô
(0);

79 
	}
}

	@Progressive/ma2x5x/001_HelloWorldShave/leon/rtems_config.h

8 #i‚de‡
LEON_RTEMS_CONFIG_H_


9 
	#LEON_RTEMS_CONFIG_H_


	)

12 #i‚de‡
_RTEMS_CONFIG_H_


13 
	#_RTEMS_CONFIG_H_


	)

17 
	~"≠p_c⁄fig.h
"

18 
	~"ÁèlExãnsi⁄.h
"

24 #i‡
deföed
(
__RTEMS__
)

26 #i‡!
deföed
 (
__CONFIG__
)

27 
	#__CONFIG__


	)

30 
	#CONFIGURE_INIT


	)

32 #i‚de‡
RTEMS_POSIX_API


33 
	#RTEMS_POSIX_API


	)

36 
	#CONFIGURE_MICROSECONDS_PER_TICK
 1000

	)

38 
	#CONFIGURE_TICKS_PER_TIMESLICE
 10

	)

40 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

42 
	#CONFIGURE_APPLICATION_NEEDS_CLOCK_DRIVER


	)

44 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

46 
	#CONFIGURE_MINIMUM_TASK_STACK_SIZE
 4096

	)

48 
	#CONFIGURE_MAXIMUM_TASKS
 4

	)

50 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 4

	)

52 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 8

	)

54 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 8

	)

56 
	#CONFIGURE_MAXIMUM_POSIX_SEMAPHORES
 8

	)

58 
	#CONFIGURE_MAXIMUM_POSIX_MESSAGE_QUEUES
 8

	)

60 
	#CONFIGURE_MAXIMUM_POSIX_TIMERS
 4

	)

62 
	#CONFIGURE_MAXIMUM_TIMERS
 4

	)

64 
	#CONFIGURE_MAXIMUM_SEMAPHORES
 2

	)

67 
	#CONFIGURE_MAXIMUM_USER_EXTENSIONS
 1

	)

68 
	#CONFIGURE_INITIAL_EXTENSIONS
 { .
Áèl
 = 
F©Æ_exãnsi⁄
 }

	)

75 *
POSIX_Inô
 (*
¨gs
);

77 
	~<πems/c⁄fdefs.h
>

85 
BSP_SET_CLOCK
(12000, 266000, 1, 1, 
DEFAULT_RTEMS_CSS_LOS_CLOCKS
, 
DEFAULT_RTEMS_MSS_LRT_CLOCKS
 | 
EXTRACLOCKS
, 
APP_UPA_CLOCKS
, 0, 0);

88 
BSP_SET_L2C_CONFIG
(0, 
L2C_REPL_LRU
, 0, 
L2C_MODE_COPY_BACK
, 0, 
NULL
);

	@Progressive/ma2x5x/001_HelloWorldShave/shave/shaveMain.c

11 
	~<°dio.h
>

12 
	~<°rög.h
>

13 
	~<svuComm⁄Shave.h
>

26 
__©åibuã__
((
dŒexp‹t
)Ë
	$maö
( )

28 
	`¥ötf
("\n\nHello from SHAVE!\n\n\n");

30 
SHAVE_HALT
;

32 
	}
}

	@Progressive/ma2x5x/001_HelloWorld_RTEMS/leon/app_config.c

11 
	~<OsDrvC¥.h
>

12 
	~<OsDrvShaveL2Cache.h
>

13 
	~"≠p_c⁄fig.h
"

17 
	#L2CACHE_CFG
 (
SHAVE_L2CACHE_NORMAL_MODE
)

	)

33 
	$öôClocksAndMem‹y
()

35 
u32
 
sc
;

37 
tyAuxClkDividîCfg
 
auxClkAŒOn
[] =

39 {
AUX_CLK_MASK_UART
, 
CLK_SRC_REFCLK0
, 96, 625},

44 
sc
 = 
	`OsDrvC¥Inô
();

45 if(
sc
)

46  
sc
;

47 
sc
 = 
	`OsDrvC¥O≥n
();

48 if(
sc
)

49  
sc
;

50 
sc
 = 
	`OsDrvC¥AuxClockAºayC⁄fig
(
auxClkAŒOn
);

51 if(
sc
)

52  
sc
;

54 
sc
 = 
	`OsDrvShaveL2CacheInô
(
L2CACHE_CFG
);

55 if(
sc
)

56  
sc
;

59 
∑πôi⁄_id
;

60 
	`OsDrvShaveL2CGëP¨tôi⁄
(
SHAVEPART256KB
, &
∑πôi⁄_id
);

63 
sc
 = 
	`OsDrvShaveL2CacheAŒoˇãSëP¨tôi⁄s
();

64 if(
sc
)

65  
sc
;

67 
	`OsDrvShaveL2CacheP¨tôi⁄InvÆid©e
(0);

71 
	}
}

	@Progressive/ma2x5x/001_HelloWorld_RTEMS/leon/app_config.h

9 #i‚de‡
_APP_CONFIG_H_


10 
	#_APP_CONFIG_H_


	)

28 
öôClocksAndMem‹y
();

	@Progressive/ma2x5x/001_HelloWorld_RTEMS/leon/main.c

11 
	~<°dlib.h
>

12 
	~<°dio.h
>

13 
	~<πems.h
>

14 
	~<πems/b•Io.h
>

15 
	~"πems_c⁄fig.h
"

16 
	~"mv_ty≥s.h
"

20 
	grc1
, 
	grc2
;

21 
	gcou¡îs
[2] ={0, 0};

22 
±hªad_t
 
	gthªad1
, 
	gthªad2
;

23 
£m_t
 
	g£m
;

27 *
fun˘i⁄C
(*
Àd
);

28 *
fun˘i⁄D
(*
Àd
);

32 *
	$POSIX_Inô
(*
¨gs
)

34 
	`UNUSED
(
¨gs
);

36 
±hªad_©å_t
 
©å
;

37 
sc
;

39 
sc
 = 
	`öôClocksAndMem‹y
();

40 i‡(
sc
)

41 
	`exô
(
sc
);

43 
	`¥ötf
("\n");

44 
	`¥ötf
("RTEMS POSIX Started\n");

46 
sc
 = 
	`±hªad_©å_öô
(&
©å
);

47 i‡(
sc
)

49 
	`¥ötf
("pthread_attr_initÉrror");

50 
	`exô
(
sc
);

52 
sc
 = 
	`±hªad_©å_£töhîôsched
(&
©å
, 
PTHREAD_EXPLICIT_SCHED
);

53 i‡(
sc
)

55 
	`¥ötf
("pthread_attr_setinheritschedÉrror");

56 
	`exô
(
sc
);

58 
sc
 = 
	`±hªad_©å_£tschedpﬁicy
(&
©å
, 
SCHED_RR
);

59 i‡(
sc
)

61 
	`¥ötf
("pthread_attr_setschedpolicyÉrror");

62 
	`exô
(
sc
);

64 
sc
 = 
	`£m_öô
(&
£m
, 0, 0);

65 i‡(
sc
 == -1)

67 
	`¥ötf
("sem_initÉrror\n");

68 
	`exô
(
sc
);

71 
rc1
 = 
	`±hªad_¸óã
(&
thªad1
, &
©å
, &
fun˘i⁄C
, &
cou¡îs
[0]);

72 i‡(
rc1
)

74 
	`¥ötf
("Thªad 1 cª©i⁄ faûed: %d\n", 
rc1
);

75 
	`exô
(
rc1
);

79 
	`¥ötf
("Thread 1 created\n");

82 
rc2
 = 
	`±hªad_¸óã
(&
thªad2
, &
©å
, &
fun˘i⁄D
, &
cou¡îs
[1]);

83 i‡(
rc2
)

85 
	`¥ötf
("Thªad 2 cª©i⁄ faûed: %d\n", 
rc2
);

86 
	`exô
(
rc2
);

90 
	`¥ötf
("Thread 2 created\n");

93 
sc
 = 
	`±hªad_joö
(
thªad1
, 
NULL
);

94 i‡(
sc
)

96 
	`¥ötf
("pthread_joinÉrror!");

97 
	`exô
(
sc
);

100 
sc
 = 
	`±hªad_joö
(
thªad2
, 
NULL
);

101 i‡(
sc
)

103 
	`¥ötf
("pthread_joinÉrror!");

104 
	`exô
(
sc
);

107 
	`exô
(0);

108 
	}
}

110 *
	$fun˘i⁄C
(*
˙t
)

112 vﬁ©ûê*
˙tI¡
 = (*Ë
˙t
;

116 *
˙tI¡
 = *cntInt + 1;

117 
	`¥ötf
("C: %d\n", *
˙tI¡
);

119 
	}
}

121 *
	$fun˘i⁄D
(*
˙t
)

123 vﬁ©ûê*
˙tI¡
 = (*Ë
˙t
;

127 *
˙tI¡
 = *cntInt + 1;

128 
	`¥ötf
("D: %d\n", *
˙tI¡
);

130 
	}
}

	@Progressive/ma2x5x/001_HelloWorld_RTEMS/leon/rtems_config.h

8 #i‚de‡
RTEMS_CONFIG_H_


9 
	#RTEMS_CONFIG_H_


	)

13 
	~"≠p_c⁄fig.h
"

14 
	~"ÁèlExãnsi⁄.h
"

16 #i‡
deföed
(
__RTEMS__
)

18 #i‡!
deföed
 (
__CONFIG__
)

19 
	#__CONFIG__


	)

25 
	#CONFIGURE_INIT


	)

27 #i‚de‡
RTEMS_POSIX_API


28 
	#RTEMS_POSIX_API


	)

31 
	#CONFIGURE_MICROSECONDS_PER_TICK
 1000

	)

33 
	#CONFIGURE_TICKS_PER_TIMESLICE
 10

	)

35 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

37 
	#CONFIGURE_APPLICATION_NEEDS_CLOCK_DRIVER


	)

39 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

41 
	#CONFIGURE_MINIMUM_TASK_STACK_SIZE
 4096

	)

43 
	#CONFIGURE_MAXIMUM_TASKS
 4

	)

45 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 4

	)

47 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 8

	)

49 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 8

	)

51 
	#CONFIGURE_MAXIMUM_POSIX_SEMAPHORES
 8

	)

53 
	#CONFIGURE_MAXIMUM_POSIX_MESSAGE_QUEUES
 8

	)

55 
	#CONFIGURE_MAXIMUM_POSIX_TIMERS
 4

	)

57 
	#CONFIGURE_MAXIMUM_TIMERS
 4

	)

60 
	#CONFIGURE_MAXIMUM_USER_EXTENSIONS
 1

	)

61 
	#CONFIGURE_INITIAL_EXTENSIONS
 { .
Áèl
 = 
F©Æ_exãnsi⁄
 }

	)

68 *
POSIX_Inô
 (*
¨gs
);

70 
	~<πems/c⁄fdefs.h
>

78 
BSP_SET_CLOCK
(12000, 266000, 1, 1, 
DEFAULT_RTEMS_CSS_LOS_CLOCKS
, 
DEFAULT_RTEMS_MSS_LRT_CLOCKS
, 
UPA_SHAVE_L2
, 0, 0);

81 
BSP_SET_L2C_CONFIG
(0, 
L2C_REPL_LRU
, 0, 
L2C_MODE_COPY_BACK
, 0, 
NULL
);

	@Progressive/ma2x5x/002_HelloWorld_LOS-RTEMS_LRT/leon/app_config.c

11 
	~<OsDrvC¥.h
>

12 
	~<OsDrvShaveL2Cache.h
>

13 
	~"≠p_c⁄fig.h
"

17 
	#L2CACHE_CFG
 (
SHAVEL2C_MODE_NORMAL
)

	)

18 
	#L2CACHE_PARTITION_SIZE
 (
SHAVEPART256KB
)

	)

30 
	$öôClocksAndMem‹y
()

32 
s32
 
sc
;

34 
tyAuxClkDividîCfg
 
auxClkAŒOn
[] =

36 {
AUX_CLK_MASK_UART
, 
CLK_SRC_REFCLK0
, 96, 625},

41 
sc
 = 
	`OsDrvC¥Inô
();

42 if(
sc
)

43  
sc
;

44 
sc
 = 
	`OsDrvC¥O≥n
();

45 if(
sc
)

46  
sc
;

47 
sc
 = 
	`OsDrvC¥AuxClockAºayC⁄fig
(
auxClkAŒOn
);

48 if(
sc
)

49  
sc
;

51 
sc
 = 
	`OsDrvShaveL2CacheInô
(
L2CACHE_CFG
);

52 if(
sc
)

53  
sc
;

55 
∑πôi⁄Numbî
;

57 
sc
 = 
	`OsDrvShaveL2CGëP¨tôi⁄
(
L2CACHE_PARTITION_SIZE
, &
∑πôi⁄Numbî
);

58 if(
sc
)

59  
sc
;

61 
sc
 = 
	`OsDrvShaveL2CacheAŒoˇãSëP¨tôi⁄s
();

62 if(
sc
)

63  
sc
;

65 
sc
 = 
	`OsDrvShaveL2CacheP¨tôi⁄InvÆid©e
(
∑πôi⁄Numbî
);

66 if(
sc
)

67  
sc
;

70 
	}
}

	@Progressive/ma2x5x/002_HelloWorld_LOS-RTEMS_LRT/leon/app_config.h

9 #i‚de‡
_APP_CONFIG_H_


10 
	#_APP_CONFIG_H_


	)

26 
öôClocksAndMem‹y
();

	@Progressive/ma2x5x/002_HelloWorld_LOS-RTEMS_LRT/leon/main.c

11 
	~<°dlib.h
>

12 
	~<°dio.h
>

13 
	~<πems.h
>

14 
	~<πems/b•Io.h
>

15 
	~<DrvLe⁄.h
>

16 
	~"πems_c⁄fig.h
"

17 
	~<UnôTe°Api.h
>

26 
u32
 
Ãt_°¨t
;

36 *
	$POSIX_Inô
 (*
¨gs
)

38 
	`UNUSED
(
¨gs
);

40 
s32
 
sc
;

42 
sc
 = 
	`öôClocksAndMem‹y
();

43 if(
sc
)

44 
	`exô
(
sc
);

46 
	`¥ötf
("LeonOS Started.\n");

47 
	`¥ötf
("Le⁄RT Sèπ Addr: 0x%lX\n",(
u32
)&
Ãt_°¨t
);

50 
	`DrvLe⁄RTSèπup
((
u32
)&
Ãt_°¨t
);

51 
	`DrvLe⁄RTWaôExecuti⁄
();

53 
	`¥ötf
("LeonRT Stop.\n");

54 
	`unôTe°FöÆRï‹t
 ();

55 
	`exô
(0);

56 
	}
}

	@Progressive/ma2x5x/002_HelloWorld_LOS-RTEMS_LRT/leon/rtems_config.h

8 #i‚de‡
_RTEMS_CONFIG_H_


9 
	#_RTEMS_CONFIG_H_


	)

13 
	~"≠p_c⁄fig.h
"

14 
	~"ÁèlExãnsi⁄.h
"

16 #i‡
deföed
(
__RTEMS__
)

18 #i‡!
deföed
 (
__CONFIG__
)

19 
	#__CONFIG__


	)

25 
	#CONFIGURE_INIT


	)

27 #i‚de‡
RTEMS_POSIX_API


28 
	#RTEMS_POSIX_API


	)

31 
	#CONFIGURE_MICROSECONDS_PER_TICK
 1000

	)

33 
	#CONFIGURE_TICKS_PER_TIMESLICE
 10

	)

35 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

37 
	#CONFIGURE_APPLICATION_NEEDS_CLOCK_DRIVER


	)

39 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

41 
	#CONFIGURE_MINIMUM_TASK_STACK_SIZE
 4096

	)

43 
	#CONFIGURE_MAXIMUM_TASKS
 4

	)

45 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 4

	)

47 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 8

	)

49 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 8

	)

51 
	#CONFIGURE_MAXIMUM_POSIX_SEMAPHORES
 8

	)

53 
	#CONFIGURE_MAXIMUM_POSIX_MESSAGE_QUEUES
 8

	)

55 
	#CONFIGURE_MAXIMUM_POSIX_TIMERS
 4

	)

57 
	#CONFIGURE_MAXIMUM_TIMERS
 4

	)

60 
	#CONFIGURE_MAXIMUM_USER_EXTENSIONS
 1

	)

61 
	#CONFIGURE_INITIAL_EXTENSIONS
 { .
Áèl
 = 
F©Æ_exãnsi⁄
 }

	)

68 *
POSIX_Inô
 (*
¨gs
);

70 
	~<πems/c⁄fdefs.h
>

78 
BSP_SET_CLOCK
(12000, 266000, 1, 1, 
DEFAULT_RTEMS_CSS_LOS_CLOCKS
, 
DEFAULT_RTEMS_MSS_LRT_CLOCKS
, 
UPA_SHAVE_L2
, 0, 0);

81 
BSP_SET_L2C_CONFIG
(0, 
L2C_REPL_LRU
, 0, 
L2C_MODE_COPY_BACK
, 0, 
NULL
);

	@Progressive/ma2x5x/002_HelloWorld_LOS-RTEMS_LRT/leon_rt/main.c

12 
	~<°dio.h
>

13 
	~<DrvLe⁄.h
>

30 
	$maö
()

32 
	`¥ötf
("LeonRT Started.\n");

34 
	`DrvLe⁄RTSig«lSt›
();

37 
	}
}

	@Progressive/ma2x5x/003_SimpleAddInput/leon/app_config.c

11 
	~<OsDrvC¥.h
>

12 
	~<OsDrvShaveL2Cache.h
>

13 
	~"≠p_c⁄fig.h
"

17 
	#L2CACHE_CFG
 (
SHAVEL2C_MODE_NORMAL
)

	)

33 
	$öôClocksAndMem‹y
()

35 
s32
 
sc
;

37 
tyAuxClkDividîCfg
 
auxClkAŒOn
[] =

39 {
AUX_CLK_MASK_UART
, 
CLK_SRC_REFCLK0
, 96, 625},

44 
sc
 = 
	`OsDrvC¥Inô
();

45 if(
sc
)

46  
sc
;

47 
sc
 = 
	`OsDrvC¥O≥n
();

48 if(
sc
)

49  
sc
;

50 
sc
 = 
	`OsDrvC¥AuxClockAºayC⁄fig
(
auxClkAŒOn
);

51 if(
sc
)

52  
sc
;

54 
sc
 = 
	`OsDrvShaveL2CacheInô
(
L2CACHE_CFG
);

55 if(
sc
)

56  
sc
;

59 
∑πôi⁄_id
;

60 
	`OsDrvShaveL2CGëP¨tôi⁄
(
SHAVEPART256KB
, &
∑πôi⁄_id
);

63 
sc
 = 
	`OsDrvShaveL2CacheAŒoˇãSëP¨tôi⁄s
();

64 if(
sc
)

65  
sc
;

67 
	`OsDrvShaveL2CacheP¨tôi⁄InvÆid©e
(
∑πôi⁄_id
);

70 
	}
}

	@Progressive/ma2x5x/003_SimpleAddInput/leon/app_config.h

9 #i‚de‡
_APP_CONFIG_H_


10 
	#_APP_CONFIG_H_


	)

27 
öôClocksAndMem‹y
();

	@Progressive/ma2x5x/003_SimpleAddInput/leon/main.c

11 
	~<°dlib.h
>

12 
	~<°dio.h
>

13 
	~<πems.h
>

14 
	~<πems/b•Io.h
>

15 
	~<swcFømeTy≥s.h
>

16 
	~"πems_c⁄fig.h
"

17 
	~"mv_ty≥s.h
"

21 
	#FRAME_WIDTH
 80

	)

22 
	#FRAME_HEIGHT
 60

	)

26 
u8
 
öputFøme
;

30 
‰ameS≥c
 
	gã°FømeS≥c
;

31 
‰ameBuf„r
 
	göBuf„r
;

39 
	$InôTe°Buf„rs
(
width
, 
height
)

41 
ã°FømeS≥c
.
width
 = width;

42 
ã°FømeS≥c
.
height
 = height;

43 
ã°FømeS≥c
.
°ride
 = 
width
;

44 
ã°FømeS≥c
.
ty≥
 = 
YUV420p
;

45 
ã°FømeS≥c
.
byãsPP
 = 1;

47 
öBuf„r
.
•ec
 = 
ã°FømeS≥c
;

48 
öBuf„r
.
p1
 = (
u8
*)(&
öputFøme
);

49 
öBuf„r
.
p2
 = (
u8
*)((
u32
)(&
öputFøme
Ë+ 
width
 * 
height
);

50 
öBuf„r
.
p3
 = (
u8
*)((
u32
)(&
öputFøme
Ë+ 
width
 * 
height
 + width * height / 4);

53 
	}
}

56 *
	$POSIX_Inô
 (*
¨gs
)

58 
	`UNUSED
(
¨gs
);

60 
i
;

61 
s32
 
sc
;

63 
sc
 = 
	`öôClocksAndMem‹y
();

64 if(
sc
)

65 
	`exô
(
sc
);

66 
	`¥ötf
 ("RTEMS POSIX Started\n");

68 
	`InôTe°Buf„rs
(
FRAME_WIDTH
, 
FRAME_HEIGHT
);

70 
	`¥ötf
("\nInput image:\n");

71 
i
 = 0; i < 8; i++) {

72 
	`¥ötf
(" %X", 
öBuf„r
.
p1
[
i
]);

74 
	`¥ötf
(" ...\n");

76 
	`exô
(0);

77 
	}
}

	@Progressive/ma2x5x/003_SimpleAddInput/leon/rtems_config.h

8 #i‚de‡
_RTEMS_CONFIG_H_


9 
	#_RTEMS_CONFIG_H_


	)

13 
	~"≠p_c⁄fig.h
"

14 
	~"ÁèlExãnsi⁄.h
"

19 #i‡
deföed
(
__RTEMS__
)

21 #i‡!
deföed
 (
__CONFIG__
)

22 
	#__CONFIG__


	)

25 
	#CONFIGURE_INIT


	)

27 #i‚de‡
RTEMS_POSIX_API


28 
	#RTEMS_POSIX_API


	)

31 
	#CONFIGURE_MICROSECONDS_PER_TICK
 1000

	)

33 
	#CONFIGURE_TICKS_PER_TIMESLICE
 10

	)

35 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

37 
	#CONFIGURE_APPLICATION_NEEDS_CLOCK_DRIVER


	)

39 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

41 
	#CONFIGURE_MINIMUM_TASK_STACK_SIZE
 4096

	)

43 
	#CONFIGURE_MAXIMUM_TASKS
 4

	)

45 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 4

	)

47 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 8

	)

49 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 8

	)

51 
	#CONFIGURE_MAXIMUM_POSIX_SEMAPHORES
 8

	)

53 
	#CONFIGURE_MAXIMUM_POSIX_MESSAGE_QUEUES
 8

	)

55 
	#CONFIGURE_MAXIMUM_POSIX_TIMERS
 4

	)

57 
	#CONFIGURE_MAXIMUM_TIMERS
 4

	)

60 
	#CONFIGURE_MAXIMUM_USER_EXTENSIONS
 1

	)

61 
	#CONFIGURE_INITIAL_EXTENSIONS
 { .
Áèl
 = 
F©Æ_exãnsi⁄
 }

	)

68 *
POSIX_Inô
 (*
¨gs
);

70 
	~<πems/c⁄fdefs.h
>

78 
BSP_SET_CLOCK
(12000, 266000, 1, 1, 
DEFAULT_RTEMS_CSS_LOS_CLOCKS
, 
DEFAULT_RTEMS_MSS_LRT_CLOCKS
, 
UPA_SHAVE_L2
, 0, 0);

81 
BSP_SET_L2C_CONFIG
(0, 
L2C_REPL_LRU
, 0, 
L2C_MODE_COPY_BACK
, 0, 
NULL
);

	@Progressive/ma2x5x/004_SimpleCopyPlanes/leon/app_config.c

11 
	~<OsDrvC¥.h
>

12 
	~<OsDrvShaveL2Cache.h
>

13 
	~"≠p_c⁄fig.h
"

17 
	#L2CACHE_CFG
 (
SHAVEL2C_MODE_NORMAL
)

	)

18 
	#L2CACHE_PARTITION_SIZE
 (
SHAVEPART256KB
)

	)

19 
	#L2CACHE_PARTITION_TYPE
 (
NON_WINDOWED_DATA_PARTITION
)

	)

33 
	$öôClocksAndMem‹y
()

35 
s32
 
sc
;

37 
tyAuxClkDividîCfg
 
auxClkAŒOn
[] =

39 {
AUX_CLK_MASK_UART
, 
CLK_SRC_REFCLK0
, 96, 625},

44 
	`OsDrvC¥Inô
();

45 
	`OsDrvC¥O≥n
();

46 
	`OsDrvC¥AuxClockAºayC⁄fig
(
auxClkAŒOn
);

49 
sc
 = 
	`OsDrvShaveL2CacheInô
(
L2CACHE_CFG
);

51 if(
sc
)

52  
sc
;

54 
∑πôi⁄Numbî
;

56 
sc
 = 
	`OsDrvShaveL2CGëP¨tôi⁄
(
L2CACHE_PARTITION_SIZE
, &
∑πôi⁄Numbî
);

58 if(
sc
)

59  
sc
;

61 
sc
 = 
	`OsDrvShaveL2CacheAŒoˇãSëP¨tôi⁄s
();

63 if(
sc
)

64  
sc
;

66 
shaveNumbî
 = 0; shaveNumbî < 
SHAVE_NUMBER
; shaveNumber++)

68 
sc
 = 
	`OsDrvShaveL2CSëN⁄WödowedP¨tôi⁄
((
shaveId_t
)
shaveNumbî
, 
∑πôi⁄Numbî
, 
L2CACHE_PARTITION_TYPE
);

70 if(
sc
)

71  
sc
;

74 
sc
 = 
	`OsDrvShaveL2CacheP¨tôi⁄InvÆid©e
(
∑πôi⁄Numbî
);

76 if(
sc
)

77  
sc
;

80 
	}
}

	@Progressive/ma2x5x/004_SimpleCopyPlanes/leon/app_config.h

9 #i‚de‡
_APP_CONFIG_H_


10 
	#_APP_CONFIG_H_


	)

17 
	#APP_MSS_CLOCKS
 (
DEV_MSS_APB_SLV
 | \

18 
DEV_MSS_APB2_CTRL
 | \

19 
DEV_MSS_AXI_BRIDGE
 | \

20 
DEV_MSS_MXI_CTRL
 | \

21 
DEV_MSS_MXI_DEFSLV
 )

	)

23 
	#APP_UPA_CLOCKS
 (
DEV_UPA_SH0
 | \

24 
DEV_UPA_SHAVE_L2
 | \

25 
DEV_UPA_CDMA
 | \

26 
DEV_UPA_CTRL
 )

	)

28 
	#SHAVE_NUMBER
 0

	)

38 
öôClocksAndMem‹y
();

	@Progressive/ma2x5x/004_SimpleCopyPlanes/leon/main.c

10 
	~<°dlib.h
>

11 
	~<swcFømeTy≥s.h
>

12 
	~<°dio.h
>

13 
	~<DrvC¥.h
>

14 
	~"OsDrvSvu.h
"

15 
	~"πems_c⁄fig.h
"

18 
	#FRAME_WIDTH
 80

	)

19 
	#FRAME_HEIGHT
 60

	)

21 
	#CMX_FRAMES
 
	`__©åibuã__
((
	`£˘i⁄
(".cmx.d©a")))

	)

25 
u8
 
öputFøme
;

26 
u32
 
˝yP s0_°¨t
;

30 
u8
 
CMX_FRAMES
 
	gouçutFøme
[
FRAME_WIDTH
 * 
FRAME_HEIGHT
 * 3 / 2];

31 
‰ameS≥c
 
	gã°FømeS≥c
;

32 
‰ameBuf„r
 
	göBuf„r
;

33 
‰ameBuf„r
 
	goutBuf„r
;

34 
osDrvSvuH™dÀr_t
 
	gh™dÀr
;

40 
	$InôTe°Buf„rs
(
width
, 
height
)

42 
ã°FømeS≥c
.
width
 = width;

43 
ã°FømeS≥c
.
height
 = height;

44 
ã°FømeS≥c
.
°ride
 = 
width
;

45 
ã°FømeS≥c
.
ty≥
 = 
YUV420p
;

46 
ã°FømeS≥c
.
byãsPP
 = 1;

48 
öBuf„r
.
•ec
 = 
ã°FømeS≥c
;

49 
öBuf„r
.
p1
 = (
u8
*)(&
öputFøme
);

50 
öBuf„r
.
p2
 = (
u8
*)((
u32
)(&
öputFøme
Ë+ 
width
 * 
height
);

51 
öBuf„r
.
p3
 = (
u8
*)((
u32
)(&
öputFøme
Ë+ 
width
 * 
height
 + width * height / 4);

53 
outBuf„r
.
•ec
 = 
ã°FømeS≥c
;

54 
outBuf„r
.
p1
 = 
ouçutFøme
;

55 
outBuf„r
.
p2
 = 
ouçutFøme
 + 
width
 * 
height
;

56 
outBuf„r
.
p3
 = 
ouçutFøme
 + 
width
 * 
height
 + width * height / 4;

59 
	}
}

62 *
	$POSIX_Inô
 (*
¨gs
)

64 
	`UNUSED
(
¨gs
);

66 
u32
 
ru¬ög
;

67 
s32
 
sc
;

69 
sc
 = 
	`öôClocksAndMem‹y
();

70 if(
sc
)

71 
	`exô
(
sc
);

72 
sc
 = 
	`OsDrvSvuInô
();

73 if(
sc
)

74 
	`exô
(
sc
);

75 
	`¥ötf
 ("RTEMS POSIX Started\n");

77 
	`InôTe°Buf„rs
(
FRAME_WIDTH
, 
FRAME_HEIGHT
);

79 i‡(
	`OsDrvSvuO≥nShave
(&
h™dÀr
, 
SHAVE_NUMBER
, 
OS_MYR_PROTECTION_SEM
Ë=
OS_MYR_DRV_SUCCESS
)

81 
sc
 = 
	`OsDrvSvuRe£tShave
(&
h™dÀr
);

82 if(
sc
)

83 
	`exô
(
sc
);

84 
sc
 = 
	`OsDrvSvuSëAbsﬁuãDeÁu…Sèck
(&
h™dÀr
);

85 if(
sc
)

86 
	`exô
(
sc
);

87 
sc
 = 
	`OsDrvSvuSèπShaveCC
(&
h™dÀr
,(
u32
)&
˝yP s0_°¨t
, "ii", ((u32)&
öBuf„r
), ((u32)&
outBuf„r
));

88 if(
sc
)

89 
	`exô
(
sc
);

90 
sc
 = 
	`OsDrvSvuWaôShaves
(1, &
h™dÀr
, 
OS_DRV_SVU_WAIT_FOREVER
, &
ru¬ög
);

91 if(
sc
)

92 
	`exô
(
sc
);

93 
sc
 = 
	`OsDrvSvuClo£Shave
(&
h™dÀr
);

94 if(
sc
)

95 
	`exô
(
sc
);

98 
	`¥ötf
("[T2] c™nŸ o≥¿shavê%d\n", 
SHAVE_NUMBER
);

99 
	`exô
(
sc
);

103 
	`¥ötf
("\nCopyÖlanes done!\n\n");

105 
	`¥ötf
("To checkÅheÑesult use:\n");

106 
	`¥ötf
("mdbg::savefile image_80x60_P420.yuv outputFrame 7200\n");

108 
	`exô
(0);

109 
	}
}

	@Progressive/ma2x5x/004_SimpleCopyPlanes/leon/rtems_config.h

8 #i‚de‡
_RTEMS_CONFIG_H_


9 
	#_RTEMS_CONFIG_H_


	)

13 
	~"≠p_c⁄fig.h
"

14 
	~"ÁèlExãnsi⁄.h
"

19 #i‡
deföed
(
__RTEMS__
)

21 #i‡!
deföed
 (
__CONFIG__
)

22 
	#__CONFIG__


	)

25 
	#CONFIGURE_INIT


	)

27 #i‚de‡
RTEMS_POSIX_API


28 
	#RTEMS_POSIX_API


	)

31 
	#CONFIGURE_MICROSECONDS_PER_TICK
 1000

	)

33 
	#CONFIGURE_TICKS_PER_TIMESLICE
 10

	)

35 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

37 
	#CONFIGURE_APPLICATION_NEEDS_CLOCK_DRIVER


	)

39 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

41 
	#CONFIGURE_MINIMUM_TASK_STACK_SIZE
 4096

	)

43 
	#CONFIGURE_MAXIMUM_TASKS
 4

	)

45 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 4

	)

47 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 8

	)

49 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 8

	)

51 
	#CONFIGURE_MAXIMUM_POSIX_SEMAPHORES
 8

	)

53 
	#CONFIGURE_MAXIMUM_POSIX_MESSAGE_QUEUES
 8

	)

55 
	#CONFIGURE_MAXIMUM_POSIX_TIMERS
 4

	)

57 
	#CONFIGURE_MAXIMUM_TIMERS
 4

	)

59 
	#CONFIGURE_MAXIMUM_SEMAPHORES
 2

	)

61 
	#CONFIGURE_MAXIMUM_USER_EXTENSIONS
 1

	)

62 
	#CONFIGURE_INITIAL_EXTENSIONS
 { .
Áèl
 = 
F©Æ_exãnsi⁄
 }

	)

69 *
POSIX_Inô
 (*
¨gs
);

71 
	~<πems/c⁄fdefs.h
>

79 
BSP_SET_CLOCK
(12000, 266000, 1, 1, 
DEFAULT_RTEMS_CSS_LOS_CLOCKS
, 
APP_MSS_CLOCKS
, 
APP_UPA_CLOCKS
, 0, 0);

82 
BSP_SET_L2C_CONFIG
(0, 
L2C_REPL_LRU
, 0, 
L2C_MODE_COPY_BACK
, 0, 
NULL
);

	@Progressive/ma2x5x/004_SimpleCopyPlanes/shave/effect.c

11 
	~<mv_ty≥s.h
>

12 
	~<svuComm⁄Shave.h
>

13 
	~"ef„˘.h
"

14 
	~"swcCdma.h
"

18 
	#MAX_LINE_WIDTH
 1280

	)

24 
u8
 
	gbuf„ªdInLöe
[
MAX_LINE_WIDTH
];

25 
dmaTønß˘i⁄Li°_t
 
__©åibuã__
((
£˘i⁄
(".cmx.cdmaDes¸ùt‹s"))Ë
	gèsk1
, 
	gèsk2
;

31 
	$C›yPœ√
(
u8
* 
öPœ√
, u8* 
outPœ√
, 
width
, 
height
)

33 
u8
* 
öAddªss
;

34 
u8
* 
outAddªss
;

36 
dmaTønß˘i⁄Li°_t
 *
ªf1
, *
ªf2
;

38 
löe
;

40 
u32
 
id1
 = 
	`dmaInôReque°î
(1);

42 
löe
 = 0;Üöê< 
height
;Üine++)

44 
öAddªss
 = (
u8
*Ë((
u32
Ë
öPœ√
 + 
löe
 * 
width
);

45 
outAddªss
 = (
u8
*Ë((
u32
Ë
outPœ√
 + 
löe
 * 
width
);

47 
ªf1
 = 
	`dmaCª©eTønß˘i⁄
(
id1
, &
èsk1
, 
öAddªss
, &
buf„ªdInLöe
[0], 
width
);

48 
ªf2
 = 
	`dmaCª©eTønß˘i⁄
(
id1
, &
èsk2
, &
buf„ªdInLöe
[0], 
outAddªss
, 
width
);

49 
	`dmaLökTasks
(
ªf1
, 1, 
ªf2
);

51 
	`dmaSèπLi°Task
(
ªf1
);

52 
	`dmaWaôTask
(
ªf1
);

57 
	}
}

	@Progressive/ma2x5x/004_SimpleCopyPlanes/shave/effect.h

9 #i‚de‡
__EFFECT_H__


10 
	#__EFFECT_H__


	)

14 
	~"mv_ty≥s.h
"

20 
C›yPœ√
(
u8
* 
ö_∂™e
, u8* 
out_∂™e
, 
width
, 
height
);

	@Progressive/ma2x5x/004_SimpleCopyPlanes/shave/shaveStart.c

11 
	~<swcFømeTy≥s.h
>

12 
	~<svuComm⁄Shave.h
>

13 
	~"ef„˘.h
"

26 
__©åibuã__
((
£˘i⁄
(".ãxt.íåypoöt"))Ë__©åibuã__((
	$Æig√d
(16)))

27 
	$°¨t
(
‰ameBuf„r
* 
öFøme
, fømeBuf„r* 
outFøme
)

29 
	`C›yPœ√
(
öFøme
->
p1
, 
outFøme
->p1, inFøme->
•ec
.
width
, inFøme->•ec.
height
);

30 
	`C›yPœ√
(
öFøme
->
p2
, 
outFøme
->p2, inFøme->
•ec
.
width
 / 2, inFøme->•ec.
height
 / 2);

31 
	`C›yPœ√
(
öFøme
->
p3
, 
outFøme
->p3, inFøme->
•ec
.
width
 / 2, inFøme->•ec.
height
 / 2);

33 
SHAVE_HALT
;

36 
	}
}

	@Progressive/ma2x5x/005_SimpleBrightnessOnYPlane/leon/app_config.c

12 
	~<OsDrvC¥.h
>

13 
	~<OsDrvShaveL2Cache.h
>

14 
	~"≠p_c⁄fig.h
"

18 
	#L2CACHE_CFG
 (
SHAVEL2C_MODE_NORMAL
)

	)

19 
	#L2CACHE_PARTITION_SIZE
 (
SHAVEPART256KB
)

	)

20 
	#L2CACHE_PARTITION_TYPE
 (
NON_WINDOWED_DATA_PARTITION
)

	)

33 
	$öôClocksAndMem‹y
()

35 
s32
 
sc
;

37 
tyAuxClkDividîCfg
 
auxClkAŒOn
[] =

39 {
AUX_CLK_MASK_UART
, 
CLK_SRC_REFCLK0
, 96, 625},

44 
sc
 = 
	`OsDrvC¥Inô
();

45 if(
sc
)

46  
sc
;

47 
sc
 = 
	`OsDrvC¥O≥n
();

48 if(
sc
)

49  
sc
;

50 
sc
 = 
	`OsDrvC¥AuxClockAºayC⁄fig
(
auxClkAŒOn
);

51 if(
sc
)

52  
sc
;

55 
sc
 = 
	`OsDrvShaveL2CacheInô
(
L2CACHE_CFG
);

57 if(
sc
)

58  
sc
;

60 
∑πôi⁄Numbî
;

62 
sc
 = 
	`OsDrvShaveL2CGëP¨tôi⁄
(
L2CACHE_PARTITION_SIZE
, &
∑πôi⁄Numbî
);

64 if(
sc
)

65  
sc
;

67 
sc
 = 
	`OsDrvShaveL2CacheAŒoˇãSëP¨tôi⁄s
();

69 if(
sc
)

70  
sc
;

72 
shaveNumbî
 = 0; shaveNumbî < 
SHAVE_NUMBER
; shaveNumber++)

74 
sc
 = 
	`OsDrvShaveL2CSëN⁄WödowedP¨tôi⁄
((
shaveId_t
)
shaveNumbî
, 
∑πôi⁄Numbî
, 
L2CACHE_PARTITION_TYPE
);

76 if(
sc
)

77  
sc
;

80 
sc
 = 
	`OsDrvShaveL2CacheP¨tôi⁄InvÆid©e
(
∑πôi⁄Numbî
);

82 if(
sc
)

83  
sc
;

86 
	}
}

	@Progressive/ma2x5x/005_SimpleBrightnessOnYPlane/leon/app_config.h

9 #i‚de‡
_APP_CONFIG_H_


10 
	#_APP_CONFIG_H_


	)

17 
	#APP_MSS_CLOCKS
 (
DEV_MSS_APB_SLV
 | \

18 
DEV_MSS_APB2_CTRL
 | \

19 
DEV_MSS_AXI_BRIDGE
 | \

20 
DEV_MSS_MXI_CTRL
 | \

21 
DEV_MSS_MXI_DEFSLV
 )

	)

23 
	#APP_UPA_CLOCKS
 (
DEV_UPA_SH0
 | \

24 
DEV_UPA_SHAVE_L2
 | \

25 
DEV_UPA_CDMA
 | \

26 
DEV_UPA_CTRL
 )

	)

28 
	#SHAVE_NUMBER
 0

	)

38 
öôClocksAndMem‹y
();

	@Progressive/ma2x5x/005_SimpleBrightnessOnYPlane/leon/main.c

11 
	~<°dlib.h
>

12 
	~<swcFømeTy≥s.h
>

13 
	~<OsDrvSvu.h
>

14 
	~<°dio.h
>

15 
	~<DrvC¥.h
>

16 
	~"πems_c⁄fig.h
"

21 
	#FRAME_WIDTH
 80

	)

22 
	#FRAME_HEIGHT
 60

	)

24 
	#CMX_FRAMES
 
	`__©åibuã__
((
	`£˘i⁄
(".cmx.d©a")))

	)

28 
u8
 
öputFøme
;

29 
u32
 
bπhY0_°¨t
;

33 
u8
 
CMX_FRAMES
 
	gouçutFøme
[
FRAME_WIDTH
 * 
FRAME_HEIGHT
 * 3 / 2];

35 
‰ameS≥c
 
	gã°FømeS≥c
;

36 
‰ameBuf„r
 
	göBuf„r
;

37 
‰ameBuf„r
 
	goutBuf„r
;

38 
osDrvSvuH™dÀr_t
 
	gh™dÀr
;

44 
	$InôTe°Buf„rs
(
width
, 
height
)

46 
ã°FømeS≥c
.
width
 = width;

47 
ã°FømeS≥c
.
height
 = height;

48 
ã°FømeS≥c
.
°ride
 = 
width
;

49 
ã°FømeS≥c
.
ty≥
 = 
YUV420p
;

50 
ã°FømeS≥c
.
byãsPP
 = 1;

52 
öBuf„r
.
•ec
 = 
ã°FømeS≥c
;

53 
öBuf„r
.
p1
 = (
u8
*)(&
öputFøme
);

54 
öBuf„r
.
p2
 = (
u8
*)((
u32
)(&
öputFøme
Ë+ 
width
 * 
height
);

55 
öBuf„r
.
p3
 = (
u8
*)((
u32
)(&
öputFøme
Ë+ 
width
 * 
height
 + width * height / 4);

57 
outBuf„r
.
•ec
 = 
ã°FømeS≥c
;

58 
outBuf„r
.
p1
 = 
ouçutFøme
;

59 
outBuf„r
.
p2
 = 
ouçutFøme
 + 
width
 * 
height
;

60 
outBuf„r
.
p3
 = 
ouçutFøme
 + 
width
 * 
height
 + width * height / 4;

63 
	}
}

65 *
	$POSIX_Inô
 (*
¨gs
)

67 
	`UNUSED
(
¨gs
);

69 
u32
 
ru¬ög
;

70 
s32
 
sc
;

72 
sc
 = 
	`öôClocksAndMem‹y
();

73 if(
sc
)

74 
	`exô
(
sc
);

75 
	`¥ötf
 ("RTEMS POSIX Started\n");

77 
	`InôTe°Buf„rs
(
FRAME_WIDTH
, 
FRAME_HEIGHT
);

79 
sc
 = 
	`OsDrvSvuInô
();

80 if(
sc
)

81 
	`exô
(
sc
);

83 
sc
 = 
	`OsDrvSvuO≥nShave
(&
h™dÀr
, 
SHAVE_NUMBER
, 
OS_MYR_PROTECTION_SEM
);

84 i‡(
sc
 =
OS_MYR_DRV_SUCCESS
)

86 
sc
 = 
	`OsDrvSvuRe£tShave
(&
h™dÀr
);

87 if(
sc
)

88 
	`exô
(
sc
);

89 
sc
 = 
	`OsDrvSvuSëAbsﬁuãDeÁu…Sèck
(&
h™dÀr
);

90 if(
sc
)

91 
	`exô
(
sc
);

93 
sc
 = 
	`OsDrvSvuSèπShaveCC
(&
h™dÀr
,(
u32
)&
bπhY0_°¨t
, "ii", ((u32)&
öBuf„r
), ((u32)&
outBuf„r
));

94 if(
sc
)

95 
	`exô
(
sc
);

96 
sc
 = 
	`OsDrvSvuWaôShaves
(1, &
h™dÀr
, 
OS_DRV_SVU_WAIT_FOREVER
, &
ru¬ög
);

97 if(
sc
)

98 
	`exô
(
sc
);

99 
sc
 = 
	`OsDrvSvuClo£Shave
(&
h™dÀr
);

100 if(
sc
)

101 
	`exô
(
sc
);

104 
	`¥ötf
("[T2] c™nŸ o≥¿shavê%d\n", 
SHAVE_NUMBER
);

105 
	`exô
(
sc
);

108 
	`¥ötf
("\nBrightnessápplied on YÖlane,Ñest ofÖlanes copied.\n\n");

109 
	`¥ötf
("To checkÅheÑesult use:\n");

110 
	`¥ötf
("mdbg::savefile image_80x60_P420.yuv outputFrame 7200\n");

112 
	`exô
(0);

113 
	}
}

	@Progressive/ma2x5x/005_SimpleBrightnessOnYPlane/leon/rtems_config.h

8 #i‚de‡
_RTEMS_CONFIG_H_


9 
	#_RTEMS_CONFIG_H_


	)

13 
	~"≠p_c⁄fig.h
"

14 
	~"ÁèlExãnsi⁄.h
"

19 #i‡
deföed
(
__RTEMS__
)

21 #i‡!
deföed
 (
__CONFIG__
)

22 
	#__CONFIG__


	)

25 
	#CONFIGURE_INIT


	)

27 #i‚de‡
RTEMS_POSIX_API


28 
	#RTEMS_POSIX_API


	)

31 
	#CONFIGURE_MICROSECONDS_PER_TICK
 1000

	)

33 
	#CONFIGURE_TICKS_PER_TIMESLICE
 10

	)

35 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

37 
	#CONFIGURE_APPLICATION_NEEDS_CLOCK_DRIVER


	)

39 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

41 
	#CONFIGURE_MINIMUM_TASK_STACK_SIZE
 4096

	)

43 
	#CONFIGURE_MAXIMUM_TASKS
 4

	)

45 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 4

	)

47 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 8

	)

49 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 8

	)

51 
	#CONFIGURE_MAXIMUM_POSIX_SEMAPHORES
 8

	)

53 
	#CONFIGURE_MAXIMUM_POSIX_MESSAGE_QUEUES
 8

	)

55 
	#CONFIGURE_MAXIMUM_POSIX_TIMERS
 4

	)

57 
	#CONFIGURE_MAXIMUM_TIMERS
 4

	)

59 
	#CONFIGURE_MAXIMUM_SEMAPHORES
 2

	)

61 
	#CONFIGURE_MAXIMUM_USER_EXTENSIONS
 1

	)

62 
	#CONFIGURE_INITIAL_EXTENSIONS
 { .
Áèl
 = 
F©Æ_exãnsi⁄
 }

	)

69 *
POSIX_Inô
 (*
¨gs
);

71 
	~<πems/c⁄fdefs.h
>

79 
BSP_SET_CLOCK
(12000, 266000, 1, 1, 
DEFAULT_RTEMS_CSS_LOS_CLOCKS
, 
APP_MSS_CLOCKS
, 
APP_UPA_CLOCKS
, 0, 0);

82 
BSP_SET_L2C_CONFIG
(0, 
L2C_REPL_LRU
, 0, 
L2C_MODE_COPY_BACK
, 0, 
NULL
);

	@Progressive/ma2x5x/005_SimpleBrightnessOnYPlane/shave/effect.c

11 
	~<mv_ty≥s.h
>

12 
	~<svuComm⁄Shave.h
>

13 
	~"ef„˘.h
"

14 
	~"swcCdma.h
"

18 
	#MAX_LINE_WIDTH
 80

	)

19 
	#CLAMP
(
X
Ë(
u8
)
	`__buûtö_shave_cmu_˛amp0_i32_º_öt
(X, 255)

	)

25 
u8
 
	gbuf„ªdInLöe
[
MAX_LINE_WIDTH
];

26 
u8
 
	gbuf„ªdOutLöe
[
MAX_LINE_WIDTH
];

27 
dmaTønß˘i⁄Li°_t
 
__©åibuã__
((
£˘i⁄
(".cmx.cdmaDes¸ùt‹s"))Ë
	gèsk1
, 
	gèsk2
;

34 
	$BrighãnLöe
(
u8
* 
öLöe
, u8* 
outLöe
, 
width
)

36 
i
;

38 
i
 = 0; i < 
width
; i++)

40 
outLöe
[
i
] = 
	`CLAMP
(
öLöe
[i] + 50);

44 
	}
}

46 
	$Brighäess
(
u8
* 
öY∂™e
, u8* 
outY∂™e
, 
width
, 
height
)

48 
u8
* 
öAddªss
;

49 
u8
* 
outAddªss
;

50 
löe
;

52 
dmaTønß˘i⁄Li°_t
 *
ªf1
, *
ªf2
;

54 
u32
 
id1
 = 
	`dmaInôReque°î
(1);

56 
löe
 = 0;Üöê< 
height
;Üine++)

58 
öAddªss
 = (
u8
*)((
u32
)
öY∂™e
 + 
löe
 * 
width
);

59 
outAddªss
 = (
u8
*)((
u32
)
outY∂™e
 + 
löe
 * 
width
);

61 
ªf1
 = 
	`dmaCª©eTønß˘i⁄
(
id1
, &
èsk1
, 
öAddªss
, &
buf„ªdInLöe
[0], 
width
);

62 
	`dmaSèπLi°Task
(
ªf1
);

63 
	`dmaWaôTask
(
ªf1
);

65 
	`BrighãnLöe
(
buf„ªdInLöe
, 
buf„ªdOutLöe
, 
width
);

67 
ªf2
 = 
	`dmaCª©eTønß˘i⁄
(
id1
, &
èsk2
, &
buf„ªdOutLöe
[0], 
outAddªss
, 
width
);

68 
	`dmaSèπLi°Task
(
ªf2
);

69 
	`dmaWaôTask
(
ªf2
);

74 
	}
}

76 
	$C›yPœ√
(
u8
* 
öPœ√
, u8* 
outPœ√
, 
width
, 
height
)

78 
u8
* 
öAddªss
;

79 
u8
* 
outAddªss
;

81 
dmaTønß˘i⁄Li°_t
 *
ªf1
, *
ªf2
;

83 
löe
;

85 
u32
 
id1
 = 
	`dmaInôReque°î
(1);

87 
löe
 = 0;Üöê< 
height
;Üine++)

89 
öAddªss
 = (
u8
*Ë((
u32
Ë
öPœ√
 + 
löe
 * 
width
);

90 
outAddªss
 = (
u8
*Ë((
u32
Ë
outPœ√
 + 
löe
 * 
width
);

92 
ªf1
 = 
	`dmaCª©eTønß˘i⁄
(
id1
, &
èsk1
, 
öAddªss
, &
buf„ªdInLöe
[0], 
width
);

93 
ªf2
 = 
	`dmaCª©eTønß˘i⁄
(
id1
, &
èsk2
, &
buf„ªdInLöe
[0], 
outAddªss
, 
width
);

94 
	`dmaLökTasks
(
ªf1
, 1, 
ªf2
);

96 
	`dmaSèπLi°Task
(
ªf1
);

97 
	`dmaWaôTask
(
ªf1
);

102 
	}
}

	@Progressive/ma2x5x/005_SimpleBrightnessOnYPlane/shave/effect.h

9 #i‚de‡
__EFFECT_H__


10 
	#__EFFECT_H__


	)

14 
	~"mv_ty≥s.h
"

21 
Brighäess
(
u8
* 
Y∂™e
, u8* 
outY∂™e
, 
width
, 
height
);

22 
C›yPœ√
(
u8
* 
ö_∂™e
, u8* 
out_∂™e
, 
width
, 
height
);

	@Progressive/ma2x5x/005_SimpleBrightnessOnYPlane/shave/shaveStart.c

11 
	~<swcFømeTy≥s.h
>

12 
	~<svuComm⁄Shave.h
>

13 
	~"ef„˘.h
"

26 
__©åibuã__
((
£˘i⁄
(".ãxt.íåypoöt"))Ë__©åibuã__((
	$Æig√d
(16)))

27 
	$°¨t
(
‰ameBuf„r
* 
öFøme
, fømeBuf„r* 
outFøme
)

29 
	`Brighäess
(
öFøme
->
p1
, 
outFøme
->p1, inFøme->
•ec
.
width
, inFøme->•ec.
height
);

30 
	`C›yPœ√
(
öFøme
->
p2
, 
outFøme
->p2, inFøme->
•ec
.
width
 / 2, inFøme->•ec.
height
 / 2);

31 
	`C›yPœ√
(
öFøme
->
p3
, 
outFøme
->p3, inFøme->
•ec
.
width
 / 2, inFøme->•ec.
height
 / 2);

33 
SHAVE_HALT
;

36 
	}
}

	@Progressive/ma2x5x/006_SimpleBrightnessOnYPlane_builtins/leon/app_config.c

11 
	~<OsDrvC¥.h
>

12 
	~<OsDrvShaveL2Cache.h
>

13 
	~"≠p_c⁄fig.h
"

17 
	#L2CACHE_CFG
 (
SHAVEL2C_MODE_NORMAL
)

	)

18 
	#L2CACHE_PARTITION_SIZE
 (
SHAVEPART256KB
)

	)

19 
	#L2CACHE_PARTITION_TYPE
 (
NON_WINDOWED_DATA_PARTITION
)

	)

33 
	$öôClocksAndMem‹y
()

35 
s32
 
sc
;

37 
tyAuxClkDividîCfg
 
auxClkAŒOn
[] =

39 {
AUX_CLK_MASK_UART
, 
CLK_SRC_REFCLK0
, 96, 625},

44 
sc
 = 
	`OsDrvC¥Inô
();

46 if(
sc
)

47  
sc
;

49 
sc
 = 
	`OsDrvC¥O≥n
();

51 if(
sc
)

52  
sc
;

54 
sc
 = 
	`OsDrvC¥AuxClockAºayC⁄fig
(
auxClkAŒOn
);

56 if(
sc
)

57  
sc
;

60 
sc
 = 
	`OsDrvShaveL2CacheInô
(
L2CACHE_CFG
);

62 if(
sc
)

63  
sc
;

65 
∑πôi⁄Numbî
;

67 
sc
 = 
	`OsDrvShaveL2CGëP¨tôi⁄
(
L2CACHE_PARTITION_SIZE
, &
∑πôi⁄Numbî
);

69 if(
sc
)

70  
sc
;

72 
sc
 = 
	`OsDrvShaveL2CacheAŒoˇãSëP¨tôi⁄s
();

74 if(
sc
)

75  
sc
;

77 
shaveNumbî
 = 0; shaveNumbî < 
SHAVE_NUMBER
; shaveNumber++)

79 
sc
 = 
	`OsDrvShaveL2CSëN⁄WödowedP¨tôi⁄
((
shaveId_t
)
shaveNumbî
, 
∑πôi⁄Numbî
, 
L2CACHE_PARTITION_TYPE
);

81 if(
sc
)

82  
sc
;

85 
sc
 = 
	`OsDrvShaveL2CacheP¨tôi⁄InvÆid©e
(
∑πôi⁄Numbî
);

87 if(
sc
)

88  
sc
;

91 
	}
}

	@Progressive/ma2x5x/006_SimpleBrightnessOnYPlane_builtins/leon/app_config.h

9 #i‚de‡
_APP_CONFIG_H_


10 
	#_APP_CONFIG_H_


	)

17 
	#APP_MSS_CLOCKS
 (
DEV_MSS_APB_SLV
 | \

18 
DEV_MSS_APB2_CTRL
 | \

19 
DEV_MSS_AXI_BRIDGE
 | \

20 
DEV_MSS_MXI_CTRL
 | \

21 
DEV_MSS_MXI_DEFSLV
 )

	)

23 
	#APP_UPA_CLOCKS
 (
DEV_UPA_SH0
 | \

24 
DEV_UPA_SHAVE_L2
 | \

25 
DEV_UPA_CDMA
 | \

26 
DEV_UPA_CTRL
 )

	)

28 
	#SHAVE_NUMBER
 0

	)

38 
öôClocksAndMem‹y
();

	@Progressive/ma2x5x/006_SimpleBrightnessOnYPlane_builtins/leon/main.c

11 
	~<°dio.h
>

12 
	~<°dlib.h
>

13 
	~<swcFømeTy≥s.h
>

14 
	~<OsDrvSvu.h
>

15 
	~<OsDrvTimî.h
>

16 
	~"πems_c⁄fig.h
"

20 
	#FRAME_WIDTH
 80

	)

21 
	#FRAME_HEIGHT
 60

	)

23 
	#CMX_FRAMES
 
	`__©åibuã__
((
	`£˘i⁄
(".cmx.d©a")))

	)

27 
u8
 
öputFøme
;

28 
u32
 
bπhY0_°¨t
;

32 
u8
 
CMX_FRAMES
 
	gouçutFøme
[
FRAME_WIDTH
 * 
FRAME_HEIGHT
 * 3 / 2];

34 
‰ameS≥c
 
	gã°FømeS≥c
;

35 
‰ameBuf„r
 
	göBuf„r
;

36 
‰ameBuf„r
 
	goutBuf„r
;

37 
osDrvSvuH™dÀr_t
 
	gh™dÀr
;

43 
	$InôTe°Buf„rs
(
width
, 
height
)

45 
ã°FømeS≥c
.
width
 = width;

46 
ã°FømeS≥c
.
height
 = height;

47 
ã°FømeS≥c
.
°ride
 = 
width
;

48 
ã°FømeS≥c
.
ty≥
 = 
YUV420p
;

49 
ã°FømeS≥c
.
byãsPP
 = 1;

51 
öBuf„r
.
•ec
 = 
ã°FømeS≥c
;

52 
öBuf„r
.
p1
 = (
u8
*)(&
öputFøme
);

53 
öBuf„r
.
p2
 = (
u8
*)((
u32
)(&
öputFøme
Ë+ 
width
 * 
height
);

54 
öBuf„r
.
p3
 = (
u8
*)((
u32
)(&
öputFøme
Ë+ 
width
 * 
height
 + width * height / 4);

56 
outBuf„r
.
•ec
 = 
ã°FømeS≥c
;

57 
outBuf„r
.
p1
 = 
ouçutFøme
;

58 
outBuf„r
.
p2
 = 
ouçutFøme
 + 
width
 * 
height
;

59 
outBuf„r
.
p3
 = 
ouçutFøme
 + 
width
 * 
height
 + width * height / 4;

62 
	}
}

64 *
	$POSIX_Inô
 (*
¨gs
)

66 
	`UNUSED
(
¨gs
);

68 
tyTimeSèmp
 
g_ticks
;

69 
u64
 
∑s£d_cy˛es
;

70 
u64
 
∑s£d_cy˛es_bi
;

71 
u32
 
u£_buûtös
;

72 
u32
 
ru¬ög
;

73 
s32
 
sc
;

75 
sc
 = 
	`öôClocksAndMem‹y
();

76 if(
sc
)

77 
	`exô
(
sc
);

78 
sc
 = 
	`OsDrvTimîInô
();

79 if(
sc
)

80 
	`exô
(
sc
);

81 
sc
 = 
	`OsDrvSvuInô
();

82 if(
sc
)

83 
	`exô
(
sc
);

85 
	`¥ötf
 ("RTEMS POSIX Started\n");

86 
	`InôTe°Buf„rs
(
FRAME_WIDTH
, 
FRAME_HEIGHT
);

88 
sc
 = 
	`OsDrvSvuO≥nShave
(&
h™dÀr
, 
SHAVE_NUMBER
, 
OS_MYR_PROTECTION_SEM
);

89 i‡(
sc
 =
OS_MYR_DRV_SUCCESS
)

92 
sc
 = 
	`OsDrvTimîSèπTicksCou¡
(&
g_ticks
);

93 if(
sc
)

94 
	`exô
(
sc
);

95 
sc
 = 
	`OsDrvSvuRe£tShave
(&
h™dÀr
);

96 if(
sc
)

97 
	`exô
(
sc
);

98 
sc
 = 
	`OsDrvSvuSëAbsﬁuãDeÁu…Sèck
(&
h™dÀr
);

99 if(
sc
)

100 
	`exô
(
sc
);

102 
u£_buûtös
 = 0;

103 
sc
 = 
	`OsDrvSvuSèπShaveCC
(&
h™dÀr
, (
u32
)&
bπhY0_°¨t
, "iii", ((u32)&
öBuf„r
), ((u32)&
outBuf„r
), 
u£_buûtös
);

104 if(
sc
)

105 
	`exô
(
sc
);

106 
sc
 = 
	`OsDrvSvuWaôShaves
(1, &
h™dÀr
, 
OS_DRV_SVU_WAIT_FOREVER
, &
ru¬ög
);

107 if(
sc
)

108 
	`exô
(
sc
);

109 
sc
 = 
	`OsDrvTimîGëEœp£dTicks
(&
g_ticks
, &
∑s£d_cy˛es
);

110 if(
sc
)

111 
	`exô
(
sc
);

112 
sc
 = 
	`OsDrvSvuClo£Shave
(&
h™dÀr
);

113 if(
sc
)

114 
	`exô
(
sc
);

117 
	`¥ötf
("[T2] c™nŸ o≥¿shavê%d\n", 
SHAVE_NUMBER
);

118 
	`exô
(
sc
);

121 
sc
 = 
	`OsDrvSvuO≥nShave
(&
h™dÀr
, 
SHAVE_NUMBER
, 
OS_MYR_PROTECTION_SEM
);

122 i‡(
sc
 =
OS_MYR_DRV_SUCCESS
)

126 
sc
 = 
	`OsDrvTimîSèπTicksCou¡
(&
g_ticks
);

127 if(
sc
)

128 
	`exô
(
sc
);

130 
sc
 = 
	`OsDrvSvuRe£tShave
(&
h™dÀr
);

131 if(
sc
)

132 
	`exô
(
sc
);

133 
sc
 = 
	`OsDrvSvuSëAbsﬁuãDeÁu…Sèck
(&
h™dÀr
);

134 if(
sc
)

135 
	`exô
(
sc
);

137 
u£_buûtös
 = 1;

138 
sc
 = 
	`OsDrvSvuSèπShaveCC
(&
h™dÀr
, (
u32
)&
bπhY0_°¨t
, "iii", ((u32)&
öBuf„r
), ((u32)&
outBuf„r
), 
u£_buûtös
);

139 if(
sc
)

140 
	`exô
(
sc
);

141 
sc
 = 
	`OsDrvSvuWaôShaves
(1, &
h™dÀr
, 
OS_DRV_SVU_WAIT_FOREVER
, &
ru¬ög
);

142 if(
sc
)

143 
	`exô
(
sc
);

144 
sc
 = 
	`OsDrvTimîGëEœp£dTicks
(&
g_ticks
, &
∑s£d_cy˛es_bi
);

145 if(
sc
)

146 
	`exô
(
sc
);

147 
sc
 = 
	`OsDrvSvuClo£Shave
(&
h™dÀr
);

148 if(
sc
)

149 
	`exô
(
sc
);

152 
	`¥ötf
("[T2] c™nŸ o≥¿shavê%d\n", 
SHAVE_NUMBER
);

156 
	`¥ötf
("\nBrightnessápplied on YÖlane,Ñest ofÖlanes copied.\n\n");

157 
	`¥ötf
("Wôhouàbuût-ös: %Œu cy˛e†\n", 
∑s£d_cy˛es
);

158 
	`¥ötf
(" Wôh buût-ös: %Œu cy˛e†\n", 
∑s£d_cy˛es_bi
);

160 
	`¥ötf
("\nTo checkÅhe image use:\n");

161 
	`¥ötf
("mdbg::savefile image_80x60_P420.yuv outputFrame 7200\n");

163 
	`exô
(0);

164 
	}
}

	@Progressive/ma2x5x/006_SimpleBrightnessOnYPlane_builtins/leon/rtems_config.h

8 #i‚de‡
_RTEMS_CONFIG_H_


9 
	#_RTEMS_CONFIG_H_


	)

13 
	~"≠p_c⁄fig.h
"

14 
	~"ÁèlExãnsi⁄.h
"

19 #i‡
deföed
(
__RTEMS__
)

21 #i‡!
deföed
 (
__CONFIG__
)

22 
	#__CONFIG__


	)

25 
	#CONFIGURE_INIT


	)

27 #i‚de‡
RTEMS_POSIX_API


28 
	#RTEMS_POSIX_API


	)

31 
	#CONFIGURE_MICROSECONDS_PER_TICK
 1000

	)

33 
	#CONFIGURE_TICKS_PER_TIMESLICE
 10

	)

35 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

37 
	#CONFIGURE_APPLICATION_NEEDS_CLOCK_DRIVER


	)

39 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

41 
	#CONFIGURE_MINIMUM_TASK_STACK_SIZE
 4096

	)

43 
	#CONFIGURE_MAXIMUM_TASKS
 4

	)

45 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 4

	)

47 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 8

	)

49 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 8

	)

51 
	#CONFIGURE_MAXIMUM_POSIX_SEMAPHORES
 8

	)

53 
	#CONFIGURE_MAXIMUM_POSIX_MESSAGE_QUEUES
 8

	)

55 
	#CONFIGURE_MAXIMUM_POSIX_TIMERS
 4

	)

57 
	#CONFIGURE_MAXIMUM_TIMERS
 4

	)

59 
	#CONFIGURE_MAXIMUM_SEMAPHORES
 2

	)

61 
	#CONFIGURE_MAXIMUM_USER_EXTENSIONS
 1

	)

62 
	#CONFIGURE_INITIAL_EXTENSIONS
 { .
Áèl
 = 
F©Æ_exãnsi⁄
 }

	)

69 *
POSIX_Inô
 (*
¨gs
);

71 
	~<πems/c⁄fdefs.h
>

79 
BSP_SET_CLOCK
(12000, 266000, 1, 1, 
DEFAULT_RTEMS_CSS_LOS_CLOCKS
, 
APP_MSS_CLOCKS
, 
APP_UPA_CLOCKS
, 0, 0);

82 
BSP_SET_L2C_CONFIG
(0, 
L2C_REPL_LRU
, 0, 
L2C_MODE_COPY_BACK
, 0, 
NULL
);

	@Progressive/ma2x5x/006_SimpleBrightnessOnYPlane_builtins/shave/effect.c

9 
	~<mv_ty≥s.h
>

10 
	~<svuComm⁄Shave.h
>

11 
	~<moviVe˘‹Utûs.h
>

12 
	~"ef„˘.h
"

13 
	~"swcCdma.h
"

15 
	#MAX_LINE_WIDTH
 80

	)

17 
	#BRIGHT_ADD
 (50)

	)

18 
	#CLAMP_VAL
 (255)

	)

20 
u8
 
	gbuf„ªdInLöe
[
MAX_LINE_WIDTH
];

21 
u8
 
	gbuf„ªdOutLöe
[
MAX_LINE_WIDTH
];

23 
uch¨8
 
	g˛ampVÆ
 = {
CLAMP_VAL
, CLAMP_VAL, CLAMP_VAL, CLAMP_VAL, CLAMP_VAL, CLAMP_VAL, CLAMP_VAL, CLAMP_VAL};

24 
uch¨8
 
	gaddVÆ
 = {
BRIGHT_ADD
, BRIGHT_ADD, BRIGHT_ADD, BRIGHT_ADD, BRIGHT_ADD, BRIGHT_ADD, BRIGHT_ADD, BRIGHT_ADD};

26 
dmaTønß˘i⁄Li°_t
 
__©åibuã__
((
£˘i⁄
(".cmx.cdmaDes¸ùt‹s"))Ë
	gèsk1
, 
	gèsk2
;

28 
	$BrighãnLöe_buûtös
(
u8
* 
öLöe
, u8* 
outLöe
, 
width
)

30 
uch¨8
* 
outv
;

31 
uch¨8
* 
öpv
;

32 
sh‹t8
 
sum
;

33 
sh‹t8
 
˛mp
;

34 
i
;

36 
outv
 = (
uch¨8
*)
outLöe
;

37 
öpv
 = (
uch¨8
*)
öLöe
;

39 
i
 = 0; i < 
width
; i += 8)

41 
sum
 = 
	`__buûtö_shave_vau_add_i16_º
(
	`mvuC⁄vît_sh‹t8
(
öpv
[
i
 >> 3]), mvuC⁄vît_sh‹t8(
addVÆ
));

42 
˛mp
 = 
	`__buûtö_shave_cmu_˛amp_i16_º_sh‹t8
(
sum
, 
	`mvuC⁄vît_sh‹t8
(
˛ampVÆ
));

43 
outv
[
i
 >> 3] = 
	`mvuC⁄vît_uch¨8
(
˛mp
);

47 
	}
}

49 
	$Ef„˘_buûtös
(
u8
* 
öY∂™e
, u8* 
outY∂™e
, 
width
, 
height
)

51 
u8
* 
öAddªss
;

52 
u8
* 
outAddªss
;

53 
löe
;

55 
dmaTønß˘i⁄Li°_t
 *
ªf1
, *
ªf2
;

57 
u32
 
id1
 = 
	`dmaInôReque°î
(1);

59 
löe
 = 0;Üöê< 
height
;Üine++)

61 
öAddªss
 = (
u8
*)((
u32
)
öY∂™e
 + 
löe
 * 
width
);

62 
outAddªss
 = (
u8
*)((
u32
)
outY∂™e
 + 
löe
 * 
width
);

64 
ªf1
 = 
	`dmaCª©eTønß˘i⁄
(
id1
, &
èsk1
, 
öAddªss
, &
buf„ªdInLöe
[0], 
width
);

65 
	`dmaSèπLi°Task
(
ªf1
);

66 
	`dmaWaôTask
(
ªf1
);

68 
	`BrighãnLöe_buûtös
(
buf„ªdInLöe
, 
buf„ªdOutLöe
, 
width
);

70 
ªf2
 = 
	`dmaCª©eTønß˘i⁄
(
id1
, &
èsk2
, &
buf„ªdOutLöe
[0], 
outAddªss
, 
width
);

71 
	`dmaSèπLi°Task
(
ªf2
);

72 
	`dmaWaôTask
(
ªf2
);

77 
	}
}

79 
	$BrighãnLöe
(
u8
* 
öLöe
, u8* 
outLöe
, 
width
)

81 
i
;

82 
t
;

84 
i
 = 0; i < 
width
; i++)

86 
t
 = 
öLöe
[
i
] + (
BRIGHT_ADD
);

88 i‡(
t
 > (
CLAMP_VAL
)) {

89 
t
 = (
CLAMP_VAL
);

92 
outLöe
[
i
] = 
t
;

96 
	}
}

98 
	$Ef„˘
(
u8
* 
öY∂™e
, u8* 
outY∂™e
, 
width
, 
height
)

100 
u8
* 
öAddªss
;

101 
u8
* 
outAddªss
;

102 
löe
;

104 
dmaTønß˘i⁄Li°_t
 *
ªf1
, *
ªf2
;

106 
u32
 
id1
 = 
	`dmaInôReque°î
(1);

108 
löe
 = 0;Üöê< 
height
;Üine++)

110 
öAddªss
 = (
u8
*)((
u32
)
öY∂™e
 + 
löe
 * 
width
);

111 
outAddªss
 = (
u8
*)((
u32
)
outY∂™e
 + 
löe
 * 
width
);

113 
ªf1
 = 
	`dmaCª©eTønß˘i⁄
(
id1
, &
èsk1
, 
öAddªss
, &
buf„ªdInLöe
[0], 
width
);

114 
	`dmaSèπLi°Task
(
ªf1
);

115 
	`dmaWaôTask
(
ªf1
);

117 
	`BrighãnLöe
(
buf„ªdInLöe
, 
buf„ªdOutLöe
, 
width
);

119 
ªf2
 = 
	`dmaCª©eTønß˘i⁄
(
id1
, &
èsk2
, &
buf„ªdOutLöe
[0], 
outAddªss
, 
width
);

120 
	`dmaSèπLi°Task
(
ªf2
);

121 
	`dmaWaôTask
(
ªf2
);

126 
	}
}

128 
	$C›yPœ√
(
u8
* 
öPœ√
, u8* 
outPœ√
, 
width
, 
height
)

130 
u8
* 
öAddªss
;

131 
u8
* 
outAddªss
;

133 
dmaTønß˘i⁄Li°_t
 *
ªf1
, *
ªf2
;

135 
löe
;

137 
u32
 
id1
 = 
	`dmaInôReque°î
(1);

139 
löe
 = 0;Üöê< 
height
;Üine++)

141 
öAddªss
 = (
u8
*Ë((
u32
Ë
öPœ√
 + 
löe
 * 
width
);

142 
outAddªss
 = (
u8
*Ë((
u32
Ë
outPœ√
 + 
löe
 * 
width
);

144 
ªf1
 = 
	`dmaCª©eTønß˘i⁄
(
id1
, &
èsk1
, 
öAddªss
, &
buf„ªdInLöe
[0], 
width
);

145 
ªf2
 = 
	`dmaCª©eTønß˘i⁄
(
id1
, &
èsk2
, &
buf„ªdInLöe
[0], 
outAddªss
, 
width
);

146 
	`dmaLökTasks
(
ªf1
, 1, 
ªf2
);

148 
	`dmaSèπLi°Task
(
ªf1
);

149 
	`dmaWaôTask
(
ªf1
);

154 
	}
}

	@Progressive/ma2x5x/006_SimpleBrightnessOnYPlane_builtins/shave/effect.h

9 #i‚de‡
__EFFECT_H__


10 
	#__EFFECT_H__


	)

14 
	~"mv_ty≥s.h
"

21 
Ef„˘_buûtös
(
u8
* 
Y∂™e
, u8* 
outY∂™e
, 
width
, 
height
);

22 
Ef„˘
(
u8
* 
Y∂™e
, u8* 
outY∂™e
, 
width
, 
height
);

23 
C›yPœ√
(
u8
* 
ö_∂™e
, u8* 
out_∂™e
, 
width
, 
height
);

	@Progressive/ma2x5x/006_SimpleBrightnessOnYPlane_builtins/shave/shaveStart.c

11 
	~<swcFømeTy≥s.h
>

12 
	~<svuComm⁄Shave.h
>

13 
	~"ef„˘.h
"

26 
__©åibuã__
((
£˘i⁄
(".ãxt.íåypoöt"))Ë__©åibuã__((
	$Æig√d
(16)))

27 
	$°¨t
(
‰ameBuf„r
* 
öFøme
, fømeBuf„r* 
outFøme
, 
u32
 
u£_buûtös
)

29 i‡(
u£_buûtös
) {

30 
	`Ef„˘_buûtös
(
öFøme
->
p1
, 
outFøme
->p1, inFøme->
•ec
.
width
, inFøme->•ec.
height
);

32 
	`Ef„˘
(
öFøme
->
p1
, 
outFøme
->p1, inFøme->
•ec
.
width
, inFøme->•ec.
height
);

35 
	`C›yPœ√
(
öFøme
->
p2
, 
outFøme
->p2, inFøme->
•ec
.
width
 / 2, inFøme->•ec.
height
 / 2);

36 
	`C›yPœ√
(
öFøme
->
p3
, 
outFøme
->p3, inFøme->
•ec
.
width
 / 2, inFøme->•ec.
height
 / 2);

38 
SHAVE_HALT
;

41 
	}
}

	@Progressive/ma2x5x/007_ParallelizingOneAlgo/leon/app_config.c

11 
	~<OsDrvC¥.h
>

12 
	~<OsDrvShaveL2Cache.h
>

13 
	~"≠p_c⁄fig.h
"

17 
	#L2CACHE_CFG
 (
SHAVEL2C_MODE_NORMAL
)

	)

18 
	#L2CACHE_PARTITION_SIZE
 (
SHAVEPART256KB
)

	)

19 
	#L2CACHE_PARTITION_TYPE
 (
NON_WINDOWED_DATA_PARTITION
)

	)

32 
	$öôClocksAndMem‹y
()

34 
s32
 
sc
;

36 
tyAuxClkDividîCfg
 
auxClkAŒOn
[] =

38 {
AUX_CLK_MASK_UART
, 
CLK_SRC_REFCLK0
, 96, 625},

43 
sc
 = 
	`OsDrvC¥Inô
();

44 if(
sc
)

45  
sc
;

46 
sc
 = 
	`OsDrvC¥O≥n
();

47 if(
sc
)

48  
sc
;

49 
sc
 = 
	`OsDrvC¥AuxClockAºayC⁄fig
(
auxClkAŒOn
);

50 if(
sc
)

51  
sc
;

54 
sc
 = 
	`OsDrvShaveL2CacheInô
(
L2CACHE_CFG
);

55 if(
sc
)

56  
sc
;

58 
∑πôi⁄Numbî
;

60 
sc
 = 
	`OsDrvShaveL2CGëP¨tôi⁄
(
L2CACHE_PARTITION_SIZE
, &
∑πôi⁄Numbî
);

61 if(
sc
)

62  
sc
;

64 
sc
 = 
	`OsDrvShaveL2CacheAŒoˇãSëP¨tôi⁄s
();

65 if(
sc
)

66  
sc
;

68 
shaveNumbî
 = 0; shaveNumbî < 
SHAVES_USED
; shaveNumber++)

70 
sc
 = 
	`OsDrvShaveL2CSëN⁄WödowedP¨tôi⁄
((
shaveId_t
)
shaveNumbî
, 
∑πôi⁄Numbî
, 
L2CACHE_PARTITION_TYPE
);

71 if(
sc
)

72  
sc
;

75 
sc
 = 
	`OsDrvShaveL2CacheP¨tôi⁄InvÆid©e
(
∑πôi⁄Numbî
);

76 if(
sc
)

77  
sc
;

80 
	}
}

	@Progressive/ma2x5x/007_ParallelizingOneAlgo/leon/app_config.h

9 #i‚de‡
_APP_CONFIG_H_


10 
	#_APP_CONFIG_H_


	)

15 
	~<mv_ty≥s.h
>

21 
	#APP_MSS_CLOCKS
 (
DEV_MSS_APB_SLV
 | \

22 
DEV_MSS_APB2_CTRL
 | \

23 
DEV_MSS_RTBRIDGE
 | \

24 
DEV_MSS_AXI_BRIDGE
 | \

25 
DEV_MSS_MXI_CTRL
 | \

26 
DEV_MSS_MXI_DEFSLV
 | \

27 
DEV_MSS_AXI_MON
 | \

28 
DEV_MSS_TIM
 )

	)

30 
	#APP_UPA_CLOCKS
 (
DEV_UPA_SH0
 | \

31 
DEV_UPA_SH1
 | \

32 
DEV_UPA_SH2
 | \

33 
DEV_UPA_SHAVE_L2
 | \

34 
DEV_UPA_CDMA
 | \

35 
DEV_UPA_CTRL
 )

	)

37 
	#SHAVES_USED
 3

	)

47 
öôClocksAndMem‹y
();

	@Progressive/ma2x5x/007_ParallelizingOneAlgo/leon/main.c

11 
	~<°dio.h
>

12 
	~<°dlib.h
>

13 
	~<swcFømeTy≥s.h
>

14 
	~<OsDrvTimî.h
>

15 
	~<OsDrvSvu.h
>

16 
	~"πems_c⁄fig.h
"

20 
	#FRAME_WIDTH
 80

	)

21 
	#FRAME_HEIGHT
 60

	)

23 
	#CMX_FRAMES
 
	`__©åibuã__
((
	`£˘i⁄
(".cmx.d©a")))

	)

27 
u8
 
öputFøme
;

28 
u32
 
bπhYASM0_°¨t
;

29 
u32
 
bπhYASM1_°¨t
;

30 
u32
 
bπhYASM2_°¨t
;

32 
u32
 
	gíåyPoöts
[
SHAVES_USED
] = {

33 (
u32
)&
bπhYASM0_°¨t
,

34 (
u32
)&
bπhYASM1_°¨t
,

35 (
u32
)&
bπhYASM2_°¨t


41 
swcShaveUnô_t
 
	gEf„˘Shaves
[
SHAVES_USED
] = {0, 1, 2};

42 
osDrvSvuH™dÀr_t
 
	gh™dÀr
[3];

43 
tyTimeSèmp
 
	gg_ticks
;

44 
u64
 
	g∑s£d_cy˛es
;

45 
u8
 
CMX_FRAMES
 
	gouçutFøme
[
FRAME_WIDTH
 * 
FRAME_HEIGHT
 * 3 / 2];

46 
‰ameBuf„r
 
	göBuf„r
[
SHAVES_USED
], 
	goutBuf„r
[SHAVES_USED];

52 
	$InôTe°Buf„rs
()

54 
i
;

55 
i
 = 0; i < 
SHAVES_USED
; i++)

57 
u32
 
sh_width
;

58 
u32
 
sh_height
;

60 
sh_width
 = 
FRAME_WIDTH
;

61 
sh_height
 = 
FRAME_HEIGHT
 / 
SHAVES_USED
;

63 
öBuf„r
[
i
].
•ec
.
width
 = 
sh_width
;

64 
öBuf„r
[
i
].
•ec
.
height
 = 
sh_height
;

65 
öBuf„r
[
i
].
•ec
.
°ride
 = 
sh_width
;

66 
öBuf„r
[
i
].
•ec
.
ty≥
 = 
YUV420p
;

67 
öBuf„r
[
i
].
•ec
.
byãsPP
 = 1;

69 
öBuf„r
[
i
].
p1
 = (
u8
*)((
u32
)&
öputFøme
 + 
sh_width
 * 
sh_height
 * i);

70 
öBuf„r
[
i
].
p2
 = (
u8
*)((
u32
)&
öputFøme
 + 
FRAME_WIDTH
 * 
FRAME_HEIGHT
 + (
sh_width
 * 
sh_height
 / 4) * i);

71 
öBuf„r
[
i
].
p3
 = (
u8
*)((
u32
)&
öputFøme
 + 
FRAME_WIDTH
 * 
FRAME_HEIGHT
 + FRAME_WIDTH * FRAME_HEIGHT / 4 + (
sh_width
 * 
sh_height
 / 4) * i);

73 
outBuf„r
[
i
].
•ec
.
width
 = 
sh_width
;

74 
outBuf„r
[
i
].
•ec
.
height
 = 
sh_height
;

75 
outBuf„r
[
i
].
•ec
.
°ride
 = 
sh_width
;

76 
outBuf„r
[
i
].
•ec
.
ty≥
 = 
YUV420p
;

77 
outBuf„r
[
i
].
•ec
.
byãsPP
 = 1;

79 
outBuf„r
[
i
].
p1
 = (
u8
*)((
u32
)&
ouçutFøme
[0] + 
sh_width
 * 
sh_height
 * i);

80 
outBuf„r
[
i
].
p2
 = (
u8
*)((
u32
)&
ouçutFøme
[0] + 
FRAME_WIDTH
 * 
FRAME_HEIGHT
 + (
sh_width
 * 
sh_height
 / 4) * i);

81 
outBuf„r
[
i
].
p3
 = (
u8
*)((
u32
)&
ouçutFøme
[0] + 
FRAME_WIDTH
 * 
FRAME_HEIGHT
 + FRAME_WIDTH * FRAME_HEIGHT / 4 + (
sh_width
 * 
sh_height
 / 4) * i);

85 
	}
}

88 *
	$POSIX_Inô
 (*
¨gs
)

90 
	`UNUSED
(
¨gs
);

92 
i
;

93 
u32
 
ru¬ög
;

94 
s32
 
sc
;

96 
sc
 = 
	`öôClocksAndMem‹y
();

97 if(
sc
)

98 
	`exô
(
sc
);

100 
	`¥ötf
 ("RTEMS POSIX Started\n");

102 
	`InôTe°Buf„rs
();

104 
sc
 = 
	`OsDrvSvuInô
();

105 if(
sc
)

106 
	`exô
(
sc
);

107 
sc
 = 
	`OsDrvTimîInô
();

108 if(
sc
)

109 
	`exô
(
sc
);

110 
sc
 = 
	`OsDrvTimîSèπTicksCou¡
(&
g_ticks
);

111 if(
sc
)

112 
	`exô
(
sc
);

114 
i
 = 0; i < 
SHAVES_USED
; i++)

116 
sc
 = 
	`OsDrvSvuO≥nShave
(&
h™dÀr
[
i
], 
Ef„˘Shaves
[i], 
OS_MYR_PROTECTION_SEM
);

117 i‡(
sc
 =
OS_MYR_DRV_SUCCESS
)

119 
sc
 = 
	`OsDrvSvuRe£tShave
(&
h™dÀr
[
i
]);

120 if(
sc
)

121 
	`exô
(
sc
);

122 
sc
 = 
	`OsDrvSvuSëAbsﬁuãDeÁu…Sèck
(&
h™dÀr
[
i
]);

123 if(
sc
)

124 
	`exô
(
sc
);

125 
sc
 = 
	`OsDrvSvuSèπShaveCC
(&
h™dÀr
[
i
], 
íåyPoöts
[i], "ii", (
u32
)&
öBuf„r
[i], (u32)&
outBuf„r
[i]);

126 if(
sc
)

127 
	`exô
(
sc
);

131 
	`¥ötf
("ˇ¬Ÿ o≥¿shavê%d\n", 
i
);

132 
	`exô
(
sc
);

136 
sc
 = 
	`OsDrvSvuWaôShaves
(
SHAVES_USED
, 
h™dÀr
, 
OS_DRV_SVU_WAIT_FOREVER
, &
ru¬ög
);

137 if(
sc
)

138 
	`exô
(
sc
);

139 
sc
 = 
	`OsDrvTimîGëEœp£dTicks
(&
g_ticks
, &
∑s£d_cy˛es
);

140 if(
sc
)

141 
	`exô
(
sc
);

143 
i
 = 0; i < 
SHAVES_USED
; i++){

144 
sc
 = 
	`OsDrvSvuClo£Shave
(&
h™dÀr
[
i
]);

145 if(
sc
)

146 
	`exô
(
sc
);

148 
	`¥ötf
("\n\nASM Brightnessápplied on YÖlane,Ñest ofÖlanes copied.\n");

149 
	`¥ötf
("\nLe⁄Éxecuãd %lu cy˛es\n\n",(
u32
)(
∑s£d_cy˛es
));

151 
	`¥ötf
("To checkÅheÑesult use:\n");

152 
	`¥ötf
("mdbg::savefile image_80x60_P420.yuv outputFrame 7200\n");

154 
	`exô
(0);

155 
	}
}

	@Progressive/ma2x5x/007_ParallelizingOneAlgo/leon/rtems_config.h

8 #i‚de‡
_RTEMS_CONFIG_H_


9 
	#_RTEMS_CONFIG_H_


	)

11 
	~"≠p_c⁄fig.h
"

12 
	~"ÁèlExãnsi⁄.h
"

14 #i‡
deföed
(
__RTEMS__
)

16 #i‡!
deföed
 (
__CONFIG__
)

17 
	#__CONFIG__


	)

20 
	#CONFIGURE_INIT


	)

22 #i‚de‡
RTEMS_POSIX_API


23 
	#RTEMS_POSIX_API


	)

26 
	#CONFIGURE_MICROSECONDS_PER_TICK
 1000

	)

28 
	#CONFIGURE_TICKS_PER_TIMESLICE
 10

	)

30 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

32 
	#CONFIGURE_APPLICATION_NEEDS_CLOCK_DRIVER


	)

34 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

36 
	#CONFIGURE_MINIMUM_TASK_STACK_SIZE
 4096

	)

38 
	#CONFIGURE_MAXIMUM_TASKS
 4

	)

40 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 4

	)

42 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 8

	)

44 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 8

	)

46 
	#CONFIGURE_MAXIMUM_POSIX_SEMAPHORES
 8

	)

48 
	#CONFIGURE_MAXIMUM_POSIX_MESSAGE_QUEUES
 8

	)

50 
	#CONFIGURE_MAXIMUM_POSIX_TIMERS
 4

	)

52 
	#CONFIGURE_MAXIMUM_TIMERS
 4

	)

54 
	#CONFIGURE_MAXIMUM_SEMAPHORES
 2

	)

57 
	#CONFIGURE_MAXIMUM_USER_EXTENSIONS
 1

	)

58 
	#CONFIGURE_INITIAL_EXTENSIONS
 { .
Áèl
 = 
F©Æ_exãnsi⁄
 }

	)

60 *
POSIX_Inô
 (*
¨gs
);

62 
	~<πems/c⁄fdefs.h
>

71 
BSP_SET_CLOCK
(12000, 266000, 1, 1, 
DEFAULT_RTEMS_CSS_LOS_CLOCKS
, 
APP_MSS_CLOCKS
, 
APP_UPA_CLOCKS
, 0, 0);

74 
BSP_SET_L2C_CONFIG
(0, 
L2C_REPL_LRU
, 0, 
L2C_MODE_COPY_BACK
, 0, 
NULL
);

	@Progressive/ma2x5x/007_ParallelizingOneAlgo/shave/effect.c

11 
	~<mv_ty≥s.h
>

12 
	~<svuComm⁄Shave.h
>

13 
	~"ef„˘.h
"

14 
	~"swcCdma.h
"

18 
	#MAX_LINE_WIDTH
 1280

	)

24 
u8
 
	gbuf„ªdInLöe
[
MAX_LINE_WIDTH
];

25 
u8
 
	gbuf„ªdOutLöe
[
MAX_LINE_WIDTH
];

26 
dmaTønß˘i⁄Li°_t
 
__©åibuã__
((
£˘i⁄
(".cmx.cdmaDes¸ùt‹s"))Ë
	gèsk1
, 
	gèsk2
;

33 
	$Brighäess
(
u8
* 
öPœ√
, u8* 
outPœ√
, 
width
, 
height
)

35 
u8
* 
öAddªss
;

36 
u8
* 
outAddªss
;

37 
dmaTønß˘i⁄Li°_t
 *
ªf1
, *
ªf2
;

38 
u32
 
id1
 = 
	`dmaInôReque°î
(1);

40 
löe
;

42 
löe
 = 0;Üöê< 
height
;Üine++)

44 
öAddªss
 = (
u8
*Ë((
u32
Ë
öPœ√
 + 
löe
 * 
width
);

45 
outAddªss
 = (
u8
*Ë((
u32
Ë
outPœ√
 + 
löe
 * 
width
);

47 
ªf1
 = 
	`dmaCª©eTønß˘i⁄
(
id1
, &
èsk1
, 
öAddªss
, &
buf„ªdInLöe
[0], 
width
);

48 
	`dmaSèπLi°Task
(
ªf1
);

49 
	`dmaWaôTask
(
ªf1
);

52 
	`BrighãnLöeAsm
(
buf„ªdInLöe
, 
buf„ªdOutLöe
, 
width
);

54 
ªf2
 = 
	`dmaCª©eTønß˘i⁄
(
id1
, &
èsk2
, &
buf„ªdOutLöe
[0], 
outAddªss
, 
width
);

55 
	`dmaSèπLi°Task
(
ªf2
);

56 
	`dmaWaôTask
(
ªf2
);

60 
	}
}

62 
	$C›yPœ√
(
u8
* 
öPœ√
, u8* 
outPœ√
, 
width
, 
height
)

64 
u8
* 
öAddªss
;

65 
u8
* 
outAddªss
;

66 
dmaTønß˘i⁄Li°_t
 *
ªf1
, *
ªf2
;

68 
löe
;

69 
u32
 
id1
 = 
	`dmaInôReque°î
(1);

71 
löe
 = 0;Üöê< 
height
;Üine++)

73 
öAddªss
 = (
u8
*Ë((
u32
Ë
öPœ√
 + 
löe
 * 
width
);

74 
outAddªss
 = (
u8
*Ë((
u32
Ë
outPœ√
 + 
löe
 * 
width
);

76 
ªf1
 = 
	`dmaCª©eTønß˘i⁄
(
id1
, &
èsk1
, 
öAddªss
, &
buf„ªdInLöe
[0], 
width
);

77 
ªf2
 = 
	`dmaCª©eTønß˘i⁄
(
id1
, &
èsk2
, &
buf„ªdInLöe
[0], 
outAddªss
, 
width
);

78 
	`dmaLökTasks
(
ªf1
, 1, 
ªf2
);

80 
	`dmaSèπLi°Task
(
ªf1
);

81 
	`dmaWaôTask
(
ªf1
);

86 
	}
}

	@Progressive/ma2x5x/007_ParallelizingOneAlgo/shave/effect.h

9 #i‚de‡
_EFFECT_H_


10 
	#_EFFECT_H_


	)

14 
	~<mv_ty≥s.h
>

20 
Brighäess
(
u8
* 
öPœ√
, u8* 
outPœ√
, 
width
, 
height
);

21 
BrighãnLöeAsm
(
u8
* 
öLöe
, u8* 
outLöe
, 
width
);

22 
C›yPœ√
(
u8
* 
öPœ√
, u8* 
outPœ√
, 
width
, 
height
);

	@Progressive/ma2x5x/007_ParallelizingOneAlgo/shave/shaveStart.c

11 
	~<swcFømeTy≥s.h
>

12 
	~<svuComm⁄Shave.h
>

13 
	~"ef„˘.h
"

26 
	$°¨t
(
‰ameBuf„r
* 
öFøme
, fømeBuf„r* 
outFøme
)

28 
	`Brighäess
(
öFøme
->
p1
, 
outFøme
->p1, inFøme->
•ec
.
width
, inFøme->•ec.
height
);

29 
	`C›yPœ√
(
öFøme
->
p2
, 
outFøme
->p2, inFøme->
•ec
.
width
 / 2, inFøme->•ec.
height
 / 2);

30 
	`C›yPœ√
(
öFøme
->
p3
, 
outFøme
->p3, inFøme->
•ec
.
width
 / 2, inFøme->•ec.
height
 / 2);

32 
SHAVE_HALT
;

35 
	}
}

	@Progressive/ma2x5x/008_ParallelizingManyAlgos/leon/app_config.c

8 
	~<OsDrvC¥.h
>

9 
	~<OsDrvShaveL2Cache.h
>

10 
	~"≠p_c⁄fig.h
"

12 
	#L2CACHE_CFG
 (
SHAVE_L2CACHE_NORMAL_MODE
)

	)

25 
	$öôClocksAndMem‹y
()

27 
s32
 
sc
;

29 
tyAuxClkDividîCfg
 
auxClkAŒOn
[] =

31 {
AUX_CLK_MASK_UART
, 
CLK_SRC_REFCLK0
, 96, 625},

36 
sc
 = 
	`OsDrvC¥Inô
();

37 if(
sc
)

38  
sc
;

39 
sc
 = 
	`OsDrvC¥O≥n
();

40 if(
sc
)

41  
sc
;

42 
sc
 = 
	`OsDrvC¥AuxClockAºayC⁄fig
(
auxClkAŒOn
);

43 if(
sc
)

44  
sc
;

46 
sc
 = 
	`OsDrvShaveL2CacheInô
(
L2CACHE_CFG
);

47 if(
sc
)

48  
sc
;

51 
∑πôi⁄_id
;

52 
	`OsDrvShaveL2CGëP¨tôi⁄
(
SHAVEPART256KB
, &
∑πôi⁄_id
);

55 
sc
 = 
	`OsDrvShaveL2CacheAŒoˇãSëP¨tôi⁄s
();

56 if(
sc
)

57  
sc
;

60 
i
 = 0; i < 
SHAVES_USED
; i++)

62 
	`OsDrvShaveL2CSëN⁄WödowedP¨tôi⁄
(
i
, 0, 
NON_WINDOWED_DATA_PARTITION
);

63 
	`OsDrvShaveL2CSëN⁄WödowedP¨tôi⁄
(
i
, 0, 
NON_WINDOWED_INSTRUCTIONS_PARTITION
);

66 
	`OsDrvShaveL2CacheP¨tôi⁄InvÆid©e
(0);

69 
	}
}

	@Progressive/ma2x5x/008_ParallelizingManyAlgos/leon/app_config.h

9 #i‚de‡
_APP_CONFIG_H_


10 
	#_APP_CONFIG_H_


	)

18 
	#APP_MSS_CLOCKS
 (
DEV_MSS_APB_SLV
 | \

19 
DEV_MSS_APB2_CTRL
 | \

20 
DEV_MSS_RTBRIDGE
 | \

21 
DEV_MSS_AXI_BRIDGE
 | \

22 
DEV_MSS_MXI_CTRL
 | \

23 
DEV_MSS_MXI_DEFSLV
 | \

24 
DEV_MSS_AXI_MON
 | \

25 
DEV_MSS_TIM
 )

	)

27 
	#APP_UPA_CLOCKS
 (
DEV_UPA_SH0
 | \

28 
DEV_UPA_SH1
 | \

29 
DEV_UPA_SH2
 | \

30 
DEV_UPA_SHAVE_L2
 | \

31 
DEV_UPA_CDMA
 | \

32 
DEV_UPA_CTRL
 )

	)

34 
	#SHAVES_USED
 3

	)

44 
öôClocksAndMem‹y
();

	@Progressive/ma2x5x/008_ParallelizingManyAlgos/leon/main.c

11 
	~<°dlib.h
>

12 
	~<swcFømeTy≥s.h
>

13 
	~<OsDrvSvu.h
>

14 
	~<°dio.h
>

15 
	~<OsDrvTimî.h
>

16 
	~<DrvShaveL2Cache.h
>

17 
	~<DrvC¥.h
>

18 
	~"πems_c⁄fig.h
"

23 
	#FRAME_WIDTH
 80

	)

24 
	#FRAME_HEIGHT
 60

	)

25 
	#LIST_LEN
 1280

	)

27 
	#DDR_FRAMES
 
	`__©åibuã__
((
	`£˘i⁄
(".ddr.d©a")))

	)

31 
u8
 
öputFøme
;

32 
u32
 
bπhYASM0_°¨tBrighäess
;

33 
u32
 
bπhYASM1_°¨tBrighäess
;

34 
u32
 
sobñ2_°¨tSobñ
;

36 
u32
 
	gíåyPoöts
[
SHAVES_USED
] = {

37 (
u32
)&
bπhYASM0_°¨tBrighäess
,

38 (
u32
)&
bπhYASM1_°¨tBrighäess
,

39 (
u32
)&
sobñ2_°¨tSobñ


45 
u8
 
DDR_FRAMES
 
	gouçutFøme
[
FRAME_WIDTH
 * 
FRAME_HEIGHT
 * 3 / 2];

46 
‰ameBuf„r
 
__©åibuã__
((
£˘i⁄
(".cmx.d©a"))Ë
	göBuf„r
[
SHAVES_USED
], 
	goutBuf„r
[SHAVES_USED];

47 
osDrvSvuH™dÀr_t
 
	gh™dÀr
[
SHAVES_USED
];

49 
swcShaveUnô_t
 
	gEf„˘Shaves
[
SHAVES_USED
] = {0, 1, 2 };

50 
tyTimeSèmp
 
	gg_ticks
;

51 
u64
 
	g∑s£d_cy˛es
;

57 
	$InôTe°Buf„rs
()

59 
i
;

60 
u32
 
sh_width
;

61 
u32
 
sh_height
;

62 
sh_width
 = 
FRAME_WIDTH
;

63 
sh_height
 = 
FRAME_HEIGHT
 / 
SHAVES_USED
;

65 
i
 = 0; i < 
SHAVES_USED
; i++)

68 
öBuf„r
[
i
].
•ec
.
width
 = 
sh_width
;

69 
öBuf„r
[
i
].
•ec
.
height
 = 
sh_height
;

70 
öBuf„r
[
i
].
•ec
.
°ride
 = 
sh_width
;

71 
öBuf„r
[
i
].
•ec
.
ty≥
 = 
YUV420p
;

72 
öBuf„r
[
i
].
•ec
.
byãsPP
 = 1;

74 
öBuf„r
[
i
].
p1
 = (
u8
*)((
u32
)&
öputFøme
 + 
sh_width
 * 
sh_height
 * i);

75 
öBuf„r
[
i
].
p2
 = (
u8
*)((
u32
)&
öputFøme
 + 
FRAME_WIDTH
 * 
FRAME_HEIGHT
 + (
sh_width
 * 
sh_height
 / 4) * i);

76 
öBuf„r
[
i
].
p3
 = (
u8
*)((
u32
)&
öputFøme
 + 
FRAME_WIDTH
 * 
FRAME_HEIGHT
 + FRAME_WIDTH * FRAME_HEIGHT / 4 + (
sh_width
 * 
sh_height
 / 4) * i);

78 
outBuf„r
[
i
].
•ec
.
width
 = 
sh_width
;

79 
outBuf„r
[
i
].
•ec
.
height
 = 
sh_height
;

80 
outBuf„r
[
i
].
•ec
.
°ride
 = 
sh_width
;

81 
outBuf„r
[
i
].
•ec
.
ty≥
 = 
YUV420p
;

82 
outBuf„r
[
i
].
•ec
.
byãsPP
 = 1;

84 
outBuf„r
[
i
].
p1
 = (
u8
*)((
u32
)&
ouçutFøme
[0] + 
sh_width
 * 
sh_height
 * i);

85 
outBuf„r
[
i
].
p2
 = (
u8
*)((
u32
)&
ouçutFøme
[0] + 
FRAME_WIDTH
 * 
FRAME_HEIGHT
 + (
sh_width
 * 
sh_height
 / 4) * i);

86 
outBuf„r
[
i
].
p3
 = (
u8
*)((
u32
)&
ouçutFøme
[0] + 
FRAME_WIDTH
 * 
FRAME_HEIGHT
 + FRAME_WIDTH * FRAME_HEIGHT / 4 + (
sh_width
 * 
sh_height
 / 4) * i);

90 
	}
}

92 *
	$POSIX_Inô
 (*
¨gs
)

94 
	`UNUSED
(
¨gs
);

96 
i
;

97 
u32
 
ru¬ög
;

98 
s32
 
sc
;

100 
sc
 = 
	`öôClocksAndMem‹y
();

101 if(
sc
)

102 
	`exô
(
sc
);

103 
	`¥ötf
 ("RTEMS POSIX Started...\n");

105 
	`InôTe°Buf„rs
();

107 
sc
 = 
	`OsDrvSvuInô
();

108 if(
sc
)

109 
	`exô
(
sc
);

110 
sc
 = 
	`OsDrvTimîInô
();

111 if(
sc
)

112 
	`exô
(
sc
);

113 
sc
 = 
	`OsDrvTimîSèπTicksCou¡
(&
g_ticks
);

114 if(
sc
)

115 
	`exô
(
sc
);

117 
i
 = 0; i < 
SHAVES_USED
; i++)

119 
sc
 = 
	`OsDrvSvuO≥nShave
(&
h™dÀr
[
i
], 
Ef„˘Shaves
[i], 
OS_MYR_PROTECTION_SEM
);

120 i‡(
sc
 =
OS_MYR_DRV_SUCCESS
)

122 
sc
 = 
	`OsDrvSvuRe£tShave
(&
h™dÀr
[
i
]);

123 if(
sc
)

124 
	`exô
(
sc
);

125 
sc
 = 
	`OsDrvSvuSëAbsﬁuãDeÁu…Sèck
(&
h™dÀr
[
i
]);

126 if(
sc
)

127 
	`exô
(
sc
);

128 
sc
 = 
	`OsDrvSvuSèπShaveCC
(&
h™dÀr
[
i
], 
íåyPoöts
[i], "ii", (
u32
)&
öBuf„r
[i], (u32)&
outBuf„r
[i]);

129 if(
sc
)

130 
	`exô
(
sc
);

133 
	`¥ötf
("ˇ¬Ÿ o≥¿shavê%d\n", 
i
);

134 
	`exô
(
sc
);

137 
sc
 = 
	`OsDrvSvuWaôShaves
(
SHAVES_USED
, 
h™dÀr
, 
OS_DRV_SVU_WAIT_FOREVER
, &
ru¬ög
);

138 if(
sc
)

139 
	`exô
(
sc
);

141 
sc
 = 
	`OsDrvTimîGëEœp£dTicks
(&
g_ticks
, &
∑s£d_cy˛es
);

142 if(
sc
)

143 
	`exô
(
sc
);

145 
i
 = 0; i < 
SHAVES_USED
; i++)

147 
sc
 = 
	`OsDrvSvuClo£Shave
(&
h™dÀr
[
i
]);

148 if(
sc
)

149 
	`exô
(
sc
);

151 
	`¥ötf
("\nBrightnessánd SobelÉffectápplied.\n");

152 
	`¥ötf
("\nLe⁄Éxecuãd %lu cy˛e†\n",(
u32
)(
∑s£d_cy˛es
));

154 
	`¥ötf
("\nTo checkÅheÑesult use:\n");

155 
	`¥ötf
("mdbg::savefile image_80x60_P420.yuv outputFrame 7200\n");

157 
	`exô
(0);

158 
	}
}

	@Progressive/ma2x5x/008_ParallelizingManyAlgos/leon/rtems_config.h

8 #i‚de‡
_RTEMS_CONFIG_H_


9 
	#_RTEMS_CONFIG_H_


	)

13 
	~"≠p_c⁄fig.h
"

14 
	~"ÁèlExãnsi⁄.h
"

19 #i‡
deföed
(
__RTEMS__
)

21 #i‡!
deföed
 (
__CONFIG__
)

22 
	#__CONFIG__


	)

25 
	#CONFIGURE_INIT


	)

27 #i‚de‡
RTEMS_POSIX_API


28 
	#RTEMS_POSIX_API


	)

31 
	#CONFIGURE_MICROSECONDS_PER_TICK
 1000

	)

33 
	#CONFIGURE_TICKS_PER_TIMESLICE
 10

	)

35 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

37 
	#CONFIGURE_APPLICATION_NEEDS_CLOCK_DRIVER


	)

39 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

41 
	#CONFIGURE_MINIMUM_TASK_STACK_SIZE
 4096

	)

43 
	#CONFIGURE_MAXIMUM_TASKS
 4

	)

45 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 4

	)

47 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 8

	)

49 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 8

	)

51 
	#CONFIGURE_MAXIMUM_POSIX_SEMAPHORES
 8

	)

53 
	#CONFIGURE_MAXIMUM_POSIX_MESSAGE_QUEUES
 8

	)

55 
	#CONFIGURE_MAXIMUM_POSIX_TIMERS
 4

	)

57 
	#CONFIGURE_MAXIMUM_TIMERS
 4

	)

59 
	#CONFIGURE_MAXIMUM_SEMAPHORES
 2

	)

62 
	#CONFIGURE_MAXIMUM_USER_EXTENSIONS
 1

	)

63 
	#CONFIGURE_INITIAL_EXTENSIONS
 { .
Áèl
 = 
F©Æ_exãnsi⁄
 }

	)

70 *
POSIX_Inô
 (*
¨gs
);

72 
	~<πems/c⁄fdefs.h
>

80 
BSP_SET_CLOCK
(12000, 266000, 1, 1, 
DEFAULT_RTEMS_CSS_LOS_CLOCKS
, 
APP_MSS_CLOCKS
, 
APP_UPA_CLOCKS
, 0, 0);

83 
BSP_SET_L2C_CONFIG
(0, 
L2C_REPL_LRU
, 0, 
L2C_MODE_COPY_BACK
, 0, 
NULL
);

	@Progressive/ma2x5x/008_ParallelizingManyAlgos/shave/shaveStartBrightness.c

11 
	~<mv_ty≥s.h
>

12 
	~<svuComm⁄Shave.h
>

13 
	~<swcFømeTy≥s.h
>

14 
	~"swcCdma.h
"

21 
	#MAX_LINE_WIDTH
 1280

	)

27 
u8
 
	gbuf„ªdInLöe
[
MAX_LINE_WIDTH
];

28 
u8
 
	gbuf„ªdOutLöe
[
MAX_LINE_WIDTH
];

29 
dmaTønß˘i⁄Li°_t
 
__©åibuã__
((
£˘i⁄
(".cmx.cdmaDes¸ùt‹s"))Ë
	gèsk1
, 
	gèsk2
;

36 
BrighãnLöeAsm
(
u8
* 
öLöe
, u8* 
outLöe
, 
width
);

38 
	$Brighäess
(
u8
* 
öY∂™e
, u8* 
outY∂™e
, 
width
, 
height
)

40 
u8
* 
öAddªss
;

41 
u8
* 
outAddªss
;

43 
dmaTønß˘i⁄Li°_t
 *
ªf1
, *
ªf2
;

44 
u32
 
id1
 = 
	`dmaInôReque°î
(1);

46 
löe
;

48 
löe
 = 0;Üöê< 
height
;Üine++)

50 
öAddªss
 = (
u8
*)((
u32
)
öY∂™e
 + 
löe
 * 
width
);

51 
outAddªss
 = (
u8
*)((
u32
)
outY∂™e
 + 
löe
 * 
width
);

52 
ªf1
 = 
	`dmaCª©eTønß˘i⁄
(
id1
, &
èsk1
, 
öAddªss
, &
buf„ªdInLöe
[0], 
width
);

53 
	`dmaSèπLi°Task
(
ªf1
);

54 
	`dmaWaôTask
(
ªf1
);

56 
	`BrighãnLöeAsm
(
buf„ªdInLöe
, 
buf„ªdOutLöe
, 
width
);

63 
buf„ªdOutLöe
[0] = 0x00;

64 
buf„ªdOutLöe
[
width
 - 1] = 0x00;

66 
ªf2
 = 
	`dmaCª©eTønß˘i⁄
(
id1
, &
èsk2
, &
buf„ªdOutLöe
[0], 
outAddªss
, 
width
);

67 
	`dmaSèπLi°Task
(
ªf2
);

68 
	`dmaWaôTask
(
ªf2
);

72 
	}
}

74 
	$C›yPœ√
(
u8
* 
öPœ√
, u8* 
outPœ√
, 
width
, 
height
)

76 
u8
* 
öAddªss
;

77 
u8
* 
outAddªss
;

78 
dmaTønß˘i⁄Li°_t
 *
ªf1
, *
ªf2
;

80 
löe
;

82 
u32
 
id1
 = 
	`dmaInôReque°î
(1);

84 
löe
 = 0;Üöê< 
height
;Üine++)

86 
öAddªss
 = (
u8
*)((
u32
)
öPœ√
 + 
löe
 * 
width
);

87 
outAddªss
 = (
u8
*)((
u32
)
outPœ√
 + 
löe
 * 
width
);

89 
ªf1
 = 
	`dmaCª©eTønß˘i⁄
(
id1
, &
èsk1
, 
öAddªss
, &
buf„ªdInLöe
[0], 
width
);

90 
ªf2
 = 
	`dmaCª©eTønß˘i⁄
(
id1
, &
èsk2
, &
buf„ªdInLöe
[0], 
outAddªss
, 
width
);

91 
	`dmaLökTasks
(
ªf1
, 1, 
ªf2
);

93 
	`dmaSèπLi°Task
(
ªf1
);

94 
	`dmaWaôTask
(
ªf1
);

98 
	}
}

100 
	$°¨tBrighäess
(
‰ameBuf„r
* 
öFøme
, fømeBuf„r* 
outFøme
)

102 
	`Brighäess
(
öFøme
->
p1
, 
outFøme
->p1, inFøme->
•ec
.
width
, inFøme->•ec.
height
);

103 
	`C›yPœ√
(
öFøme
->
p2
, 
outFøme
->p2, inFøme->
•ec
.
width
 / 2, inFøme->•ec.
height
 / 2);

104 
	`C›yPœ√
(
öFøme
->
p3
, 
outFøme
->p3, inFøme->
•ec
.
width
 / 2, inFøme->•ec.
height
 / 2);

106 
SHAVE_HALT
;

109 
	}
}

	@Progressive/ma2x5x/008_ParallelizingManyAlgos/shave/shaveStartSobel.c

11 
	~<mv_ty≥s.h
>

12 
	~<svuComm⁄Shave.h
>

13 
	~<swcFømeTy≥s.h
>

14 
	~"swcCdma.h
"

18 
	#MAX_LINE_WIDTH
 1280

	)

24 
u8
 
	gbuf„ªdInLöe
[
MAX_LINE_WIDTH
 * 3];

25 
u8
 
	gbuf„ªdOutLöe
[
MAX_LINE_WIDTH
];

26 
u8
* 
	göput
[3];

27 
u8
* 
	gouçut
[1];

34 
sobñ_asm
(
u8
** 
ö
, u8** 
out
, 
u32
 
width
);

35 
dmaTønß˘i⁄Li°_t
 
__©åibuã__
((
£˘i⁄
(".cmx.cdmaDes¸ùt‹s"))Ë
	gèsk1
, 
	gèsk2
, 
	gèsk3
, 
	gèsk4
;

37 
	$Sobñ
(
u8
* 
öY∂™e
, u8* 
outY∂™e
, 
width
, 
height
)

39 
u8
* 
öAddªss
;

40 
u8
* 
outAddªss
;

42 
dmaTønß˘i⁄Li°_t
 *
ªf1
, *
ªf2
, *
ªf3
, *
ªf4
;

44 
löe
;

46 
öput
[0] = &
buf„ªdInLöe
[0];

47 
öput
[1] = &
buf„ªdInLöe
[1];

48 
öput
[2] = &
buf„ªdInLöe
[2];

49 
ouçut
[0] = &
buf„ªdOutLöe
[0];

51 
u32
 
id1
 = 
	`dmaInôReque°î
(1);

53 
löe
 = 0;Üöê< 
height
;Üine++)

55 
öAddªss
 = (
u8
*Ë((
u32
Ë
öY∂™e
 + 
löe
 * 
width
);

56 
outAddªss
 = (
u8
*Ë((
u32
Ë
outY∂™e
 + 
löe
 * 
width
);

58 
ªf1
 = 
	`dmaCª©eTønß˘i⁄
(
id1
, &
èsk1
, 
öAddªss
, &
buf„ªdInLöe
[0], 
width
);

59 
ªf2
 = 
	`dmaCª©eTønß˘i⁄
(
id1
, &
èsk2
, 
öAddªss
, &
buf„ªdInLöe
[1], 
width
);

60 
ªf3
 = 
	`dmaCª©eTønß˘i⁄
(
id1
, &
èsk3
, 
öAddªss
, &
buf„ªdInLöe
[2], 
width
);

61 
	`dmaLökTasks
(
ªf1
, 2, 
ªf2
, 
ªf3
);

63 
	`dmaSèπLi°Task
(
ªf1
);

64 
	`dmaWaôTask
(
ªf1
);

66 
	`sobñ_asm
(
öput
, 
ouçut
, 
width
);

73 
buf„ªdOutLöe
[0] = 0x00;

74 
buf„ªdOutLöe
[
width
 - 1] = 0x00;

76 
ªf4
 = 
	`dmaCª©eTønß˘i⁄
(
id1
, &
èsk4
, &
buf„ªdOutLöe
[0], 
outAddªss
, 
width
);

77 
	`dmaSèπLi°Task
(
ªf4
);

78 
	`dmaWaôTask
(
ªf4
);

82 
	}
}

84 
	$C›yPœ√
(
u8
* 
öPœ√
, u8* 
outPœ√
, 
width
, 
height
)

86 
u8
* 
öAddªss
;

87 
u8
* 
outAddªss
;

89 
dmaTønß˘i⁄Li°_t
 *
ªf1
, *
ªf2
;

91 
u32
 
id1
 = 
	`dmaInôReque°î
(1);

93 
löe
;

95 
löe
 = 0;Üöê< 
height
;Üine++)

97 
öAddªss
 = (
u8
*Ë((
u32
Ë
öPœ√
 + 
löe
 * 
width
);

98 
outAddªss
 = (
u8
*Ë((
u32
Ë
outPœ√
 + 
löe
 * 
width
);

100 
ªf1
 = 
	`dmaCª©eTønß˘i⁄
(
id1
, &
èsk1
, 
öAddªss
, &
buf„ªdInLöe
[0], 
width
);

101 
ªf2
 = 
	`dmaCª©eTønß˘i⁄
(
id1
, &
èsk2
, &
buf„ªdInLöe
[0], 
outAddªss
, 
width
);

102 
	`dmaLökTasks
(
ªf1
, 1, 
ªf2
);

104 
	`dmaSèπLi°Task
(
ªf1
);

105 
	`dmaWaôTask
(
ªf1
);

109 
	}
}

111 
	$°¨tSobñ
(
‰ameBuf„r
* 
öFøme
, fømeBuf„r* 
outFøme
)

113 
	`Sobñ
(
öFøme
->
p1
, 
outFøme
->p1, inFøme->
•ec
.
width
, inFøme->•ec.
height
);

114 
	`C›yPœ√
(
öFøme
->
p2
, 
outFøme
->p2, inFøme->
•ec
.
width
 / 2, inFøme->•ec.
height
 / 2);

115 
	`C›yPœ√
(
öFøme
->
p3
, 
outFøme
->p3, inFøme->
•ec
.
width
 / 2, inFøme->•ec.
height
 / 2);

117 
SHAVE_HALT
;

120 
	}
}

	@Progressive/ma2x5x/009_DmaProcessingOptimized/leon/app_config.c

9 
	~<OsDrvShaveL2Cache.h
>

10 
	~<OsDrvC¥.h
>

11 
	~"≠p_c⁄fig.h
"

13 
	#L2CACHE_CFG
 (
SHAVE_L2CACHE_NORMAL_MODE
)

	)

27 
	$öôClocksAndMem‹y
()

29 
s32
 
sc
;

31 
tyAuxClkDividîCfg
 
auxClkAŒOn
[] =

33 {
AUX_CLK_MASK_UART
, 
CLK_SRC_REFCLK0
, 96, 625},

38 
sc
 = 
	`OsDrvC¥Inô
();

39 if(
sc
)

40  
sc
;

41 
sc
 = 
	`OsDrvC¥O≥n
();

42 if(
sc
)

43  
sc
;

44 
sc
 = 
	`OsDrvC¥AuxClockAºayC⁄fig
(
auxClkAŒOn
);

45 if(
sc
)

46  
sc
;

49 
sc
 = 
	`OsDrvShaveL2CacheInô
(
L2CACHE_CFG
);

50 if(
sc
)

51  
sc
;

54 
∑πôi⁄_id
;

55 
	`OsDrvShaveL2CGëP¨tôi⁄
(
SHAVEPART256KB
, &
∑πôi⁄_id
);

58 
sc
 = 
	`OsDrvShaveL2CacheAŒoˇãSëP¨tôi⁄s
();

59 if(
sc
)

60  
sc
;

63 
i
 = 0; i < 
SHAVES_USED
; i++)

65 
	`OsDrvShaveL2CSëN⁄WödowedP¨tôi⁄
(
i
, 0, 
NON_WINDOWED_DATA_PARTITION
);

66 
	`OsDrvShaveL2CSëN⁄WödowedP¨tôi⁄
(
i
, 0, 
NON_WINDOWED_INSTRUCTIONS_PARTITION
);

69 
	`OsDrvShaveL2CacheP¨tôi⁄InvÆid©e
(0);

71 
	}
}

	@Progressive/ma2x5x/009_DmaProcessingOptimized/leon/app_config.h

9 #i‚de‡
_APP_CONFIG_H_


10 
	#_APP_CONFIG_H_


	)

18 
	#APP_MSS_CLOCKS
 (
DEV_MSS_APB_SLV
 | \

19 
DEV_MSS_APB2_CTRL
 | \

20 
DEV_MSS_RTBRIDGE
 | \

21 
DEV_MSS_AXI_BRIDGE
 | \

22 
DEV_MSS_MXI_CTRL
 | \

23 
DEV_MSS_MXI_DEFSLV
 | \

24 
DEV_MSS_AXI_MON
 | \

25 
DEV_MSS_TIM
 )

	)

27 
	#APP_UPA_CLOCKS
 (
DEV_UPA_SH0
 | \

28 
DEV_UPA_SHAVE_L2
 | \

29 
DEV_UPA_CDMA
 | \

30 
DEV_UPA_CTRL
 )

	)

32 
	#SHAVES_USED
 (1)

	)

41 
öôClocksAndMem‹y
();

	@Progressive/ma2x5x/009_DmaProcessingOptimized/leon/main.c

11 
	~<°dio.h
>

12 
	~<°dlib.h
>

13 
	~<swcFømeTy≥s.h
>

14 
	~<OsDrvTimî.h
>

15 
	~<OsDrvSvu.h
>

16 
	~<DrvC¥.h
>

17 
	~"πems_c⁄fig.h
"

21 
	#FRAME_WIDTH
 80

	)

22 
	#FRAME_HEIGHT
 60

	)

23 
	#SHAVE_NUMBER
 0

	)

24 
	#CMX_FRAMES
 
	`__©åibuã__
((
	`£˘i⁄
(".cmx.d©a")))

	)

28 
u8
 
öputFøme
;

29 
u32
 
dmaSm∂0_°¨t
;

33 
u8
 
CMX_FRAMES
 
	gouçutFøme
[
FRAME_WIDTH
 * 
FRAME_HEIGHT
 * 3 / 2];

35 
‰ameS≥c
 
	gã°FømeS≥c
;

36 
‰ameBuf„r
 
	göBuf„r
;

37 
‰ameBuf„r
 
	goutBuf„r
;

38 
tyTimeSèmp
 
	gg_ticks
;

39 
u64
 
	g∑s£d_cy˛es
;

40 
osDrvSvuH™dÀr_t
 
	gh™dÀr
;

46 
	$InôTe°Buf„rs
(
width
, 
height
)

48 
ã°FømeS≥c
.
width
 = width;

49 
ã°FømeS≥c
.
height
 = height;

50 
ã°FømeS≥c
.
°ride
 = 
width
;

51 
ã°FømeS≥c
.
ty≥
 = 
YUV420p
;

52 
ã°FømeS≥c
.
byãsPP
 = 1;

54 
öBuf„r
.
•ec
 = 
ã°FømeS≥c
;

55 
öBuf„r
.
p1
 = (
u8
*)(&
öputFøme
);

56 
öBuf„r
.
p2
 = (
u8
*)((
u32
)(&
öputFøme
Ë+ 
width
 * 
height
);

57 
öBuf„r
.
p3
 = (
u8
*)((
u32
)(&
öputFøme
Ë+ 
width
 * 
height
 + width * height / 4);

59 
outBuf„r
.
•ec
 = 
ã°FømeS≥c
;

60 
outBuf„r
.
p1
 = 
ouçutFøme
;

61 
outBuf„r
.
p2
 = 
ouçutFøme
 + 
width
 * 
height
;

62 
outBuf„r
.
p3
 = 
ouçutFøme
 + 
width
 * 
height
 + width * height / 4;

65 
	}
}

70 *
	$POSIX_Inô
 (*
¨gs
)

72 
	`UNUSED
(
¨gs
);

74 
u32
 
ru¬ög
;

75 
s32
 
sc
;

77 
sc
 = 
	`öôClocksAndMem‹y
();

78 if(
sc
)

79 
	`exô
(
sc
);

81 
	`¥ötf
 ("RTEMS POSIX Started\n");

82 
	`InôTe°Buf„rs
(
FRAME_WIDTH
, 
FRAME_HEIGHT
);

84 
sc
 = 
	`OsDrvTimîInô
();

85 if(
sc
)

86 
	`exô
(
sc
);

87 
sc
 = 
	`OsDrvSvuInô
();

88 if(
sc
)

89 
	`exô
(
sc
);

91 
sc
 = 
	`OsDrvTimîSèπTicksCou¡
(&
g_ticks
);

92 if(
sc
)

93 
	`exô
(
sc
);

95 
sc
 = 
	`OsDrvSvuO≥nShave
(&
h™dÀr
, 
SHAVE_NUMBER
, 
OS_MYR_PROTECTION_SEM
);

96 i‡(
sc
 =
OS_MYR_DRV_SUCCESS
)

98 
sc
 = 
	`OsDrvSvuRe£tShave
(&
h™dÀr
);

99 if(
sc
)

100 
	`exô
(
sc
);

101 
sc
 = 
	`OsDrvSvuSëAbsﬁuãDeÁu…Sèck
(&
h™dÀr
);

102 if(
sc
)

103 
	`exô
(
sc
);

105 
sc
 = 
	`OsDrvSvuSèπShaveCC
(&
h™dÀr
, (
u32
)&
dmaSm∂0_°¨t
, "ii", ((u32)&
öBuf„r
), ((u32)&
outBuf„r
));

106 if(
sc
)

107 
	`exô
(
sc
);

108 
sc
 = 
	`OsDrvSvuWaôShaves
(1, &
h™dÀr
, 
OS_DRV_SVU_WAIT_FOREVER
, &
ru¬ög
);

109 if(
sc
)

110 
	`exô
(
sc
);

111 
sc
 = 
	`OsDrvSvuClo£Shave
(&
h™dÀr
);

112 if(
sc
)

113 
	`exô
(
sc
);

116 
	`¥ötf
("[T2] c™nŸ o≥¿shavê%d\n", 
SHAVE_NUMBER
);

117 
	`exô
(
sc
);

121 
sc
 = 
	`OsDrvTimîGëEœp£dTicks
(&
g_ticks
, &
∑s£d_cy˛es
);

122 if(
sc
)

123 
	`exô
(
sc
);

125 
	`¥ötf
("\nLe⁄Éxecuãd %lu cy˛es\n",(
u32
)(
∑s£d_cy˛es
));

126 
	`¥ötf
("\n\nDarknessÉffectápplied on YÖlane,Ñest ofÖlanes copied.\n\n");

127 
	`¥ötf
("To checkÅheÑesult use:\n");

128 
	`¥ötf
("mdbg::savefile image_80x60_P420.yuv outputFrame 7200\n");

130 
	`exô
(0);

131 
	}
}

	@Progressive/ma2x5x/009_DmaProcessingOptimized/leon/rtems_config.h

8 #i‚de‡
_RTEMS_CONFIG_H_


9 
	#_RTEMS_CONFIG_H_


	)

13 
	~"≠p_c⁄fig.h
"

14 
	~"ÁèlExãnsi⁄.h
"

19 #i‡
deföed
(
__RTEMS__
)

21 #i‡!
deföed
 (
__CONFIG__
)

22 
	#__CONFIG__


	)

25 
	#CONFIGURE_INIT


	)

27 #i‚de‡
RTEMS_POSIX_API


28 
	#RTEMS_POSIX_API


	)

31 
	#CONFIGURE_MICROSECONDS_PER_TICK
 1000

	)

33 
	#CONFIGURE_TICKS_PER_TIMESLICE
 10

	)

35 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

37 
	#CONFIGURE_APPLICATION_NEEDS_CLOCK_DRIVER


	)

39 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

41 
	#CONFIGURE_MINIMUM_TASK_STACK_SIZE
 4096

	)

43 
	#CONFIGURE_MAXIMUM_TASKS
 4

	)

45 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 4

	)

47 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 8

	)

49 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 8

	)

51 
	#CONFIGURE_MAXIMUM_POSIX_SEMAPHORES
 8

	)

53 
	#CONFIGURE_MAXIMUM_POSIX_MESSAGE_QUEUES
 8

	)

55 
	#CONFIGURE_MAXIMUM_POSIX_TIMERS
 4

	)

57 
	#CONFIGURE_MAXIMUM_TIMERS
 4

	)

59 
	#CONFIGURE_MAXIMUM_SEMAPHORES
 2

	)

62 
	#CONFIGURE_MAXIMUM_USER_EXTENSIONS
 1

	)

63 
	#CONFIGURE_INITIAL_EXTENSIONS
 { .
Áèl
 = 
F©Æ_exãnsi⁄
 }

	)

70 *
POSIX_Inô
 (*
¨gs
);

72 
	~<πems/c⁄fdefs.h
>

80 
BSP_SET_CLOCK
(12000, 266000, 1, 1, 
DEFAULT_RTEMS_CSS_LOS_CLOCKS
, 
APP_MSS_CLOCKS
, 
APP_UPA_CLOCKS
, 0, 0);

83 
BSP_SET_L2C_CONFIG
(0, 
L2C_REPL_LRU
, 0, 
L2C_MODE_COPY_BACK
, 0, 
NULL
);

	@Progressive/ma2x5x/009_DmaProcessingOptimized/shave/effect.c

11 
	~<mv_ty≥s.h
>

12 
	~<svuComm⁄Shave.h
>

13 
	~<swcCdma.h
>

14 
	~<swcWhoAmI.h
>

15 
	~"ef„˘.h
"

19 
	#MAX_LINE_WIDTH
 80

	)

20 
	#CLAMP
(
X
Ë(
u8
)
	`__buûtö_shave_cmu_˛amp0_i32_º_öt
(X, 255)

	)

26 
u8
 
	gbuf„ªdInLöe
[
MAX_LINE_WIDTH
 * 2];

27 
u8
 
	gbuf„ªdOutLöe
[
MAX_LINE_WIDTH
];

28 
dmaTønß˘i⁄Li°_t
 
__©åibuã__
((
£˘i⁄
(".cmx.cdmaDes¸ùt‹s"))Ë
	gèsk1
, 
	gèsk2
, 
	gèsk3
;

35 
	$D¨kíLöe
(
u8
* 
öLöe
, u8* 
outLöe
, 
width
)

37 
i
;

38 
i
 = 0; i < 
width
; i++)

40 
outLöe
[
i
] = 
	`CLAMP
(
öLöe
[i] - 20);

43 
	}
}

47 
	$D¨k√ss
(
u8
* 
öY∂™e
, u8* 
outY∂™e
, 
width
, 
height
)

49 
u8
* 
öAddªss
;

50 
u8
* 
outAddªss
;

51 
buffu£d
 = 0;

52 
löe
;

54 
dmaTønß˘i⁄Li°_t
 *
ªf1
, *
ªf2
, *
ªf3
;

57 
u32
 
id1
 = 
	`dmaInôReque°î
(1);

59 
öAddªss
 = (
u8
*)((
u32
)
öY∂™e
);

62 
ªf1
 = 
	`dmaCª©eTønß˘i⁄
(
id1
, &
èsk1
, 
öAddªss
, &
buf„ªdInLöe
[0], 
width
);

63 
	`dmaSèπLi°Task
(
ªf1
);

64 
	`dmaWaôTask
(
ªf1
);

67 
buffu£d
 = 1 - buffused;

70 
löe
 = 0;Üöê< 
height
;Üine++)

73 
öAddªss
 = (
u8
*)((
u32
)
öY∂™e
 + (
löe
 + 1Ë* 
width
);

74 
outAddªss
 = (
u8
*)((
u32
)
outY∂™e
 + 
löe
 * 
width
);

77 
ªf2
 = 
	`dmaCª©eTønß˘i⁄
(
id1
, &
èsk2
, 
öAddªss
, &
buf„ªdInLöe
[
buffu£d
 * 
width
], width);

78 
	`dmaSèπLi°Task
(
ªf2
);

81 
buffu£d
 = 1 - buffused;

84 
	`D¨kíLöe
(
buf„ªdInLöe
 + 
buffu£d
 * 
width
, 
buf„ªdOutLöe
, width);

87 
	`dmaWaôTask
(
ªf2
);

89 
ªf3
 = 
	`dmaCª©eTønß˘i⁄
(
id1
, &
èsk3
, &
buf„ªdOutLöe
[0], 
outAddªss
, 
width
);

90 
	`dmaSèπLi°Task
(
ªf3
);

91 
	`dmaWaôTask
(
ªf3
);

95 
	}
}

98 
	$C›yPœ√
(
u8
* 
öPœ√
, u8* 
outPœ√
, 
width
, 
height
)

100 
u8
* 
öAddªss
;

101 
u8
* 
outAddªss
;

102 
löe
;

103 
dmaTønß˘i⁄Li°_t
 *
ªf1
, *
ªf2
;

105 
u32
 
id1
 = 
	`dmaInôReque°î
(1);

107 
löe
 = 0;Üöê< 
height
;Üine++)

109 
öAddªss
 = (
u8
*)((
u32
)
öPœ√
 + 
löe
 * 
width
);

110 
outAddªss
 = (
u8
*)((
u32
)
outPœ√
 + 
löe
 * 
width
);

112 
ªf1
 = 
	`dmaCª©eTønß˘i⁄
(
id1
, &
èsk1
, 
öAddªss
, &
buf„ªdInLöe
[0], 
width
);

113 
ªf2
 = 
	`dmaCª©eTønß˘i⁄
(
id1
, &
èsk2
, &
buf„ªdInLöe
[0], 
outAddªss
, 
width
);

114 
	`dmaLökTasks
(
ªf1
, 1, 
ªf2
);

116 
	`dmaSèπLi°Task
(
ªf1
);

117 
	`dmaWaôTask
(
ªf1
);

121 
	}
}

	@Progressive/ma2x5x/009_DmaProcessingOptimized/shave/effect.h

9 #i‚de‡
__EFFECT_H__


10 
	#__EFFECT_H__


	)

14 
	~"mv_ty≥s.h
"

21 
D¨k√ss
(
u8
* 
Y∂™e
, u8* 
outY∂™e
, 
width
, 
height
);

22 
C›yPœ√
(
u8
* 
ö_∂™e
, u8* 
out_∂™e
, 
width
, 
height
);

	@Progressive/ma2x5x/009_DmaProcessingOptimized/shave/shaveStart.c

11 
	~<swcFømeTy≥s.h
>

12 
	~<svuComm⁄Shave.h
>

13 
	~"ef„˘.h
"

26 
__©åibuã__
((
£˘i⁄
(".ãxt.íåypoöt"))Ë__©åibuã__((
	$Æig√d
(16)))

27 
	$°¨t
(
‰ameBuf„r
* 
öFøme
, fømeBuf„r* 
outFøme
)

29 
	`D¨k√ss
(
öFøme
->
p1
, 
outFøme
->p1, inFøme->
•ec
.
width
, inFøme->•ec.
height
);

30 
	`C›yPœ√
(
öFøme
->
p2
, 
outFøme
->p2, inFøme->
•ec
.
width
 / 2, inFøme->•ec.
height
 / 2);

31 
	`C›yPœ√
(
öFøme
->
p3
, 
outFøme
->p3, inFøme->
•ec
.
width
 / 2, inFøme->•ec.
height
 / 2);

33 
SHAVE_HALT
;

35 
	}
}

	@Progressive/ma2x5x/010_Simple_SIPP_RTEMS/arch/ma2x5x/leon/app_config_def.h

2 
	#MV_MSS_EXTRA_CLOCKS
 ( 
DEV_MSS_SIPP
 | \

3 
DEV_MSS_AMC
 )

	)

5 
	#MV_SIPP_EXTRA_CLOCKS
 ( 
DEV_SIPP_CONV
 | \

6 
DEV_SIPP_SIPP_ABPSLV
 )

	)

	@Progressive/ma2x5x/010_Simple_SIPP_RTEMS/leon/app_config.c

11 
	~<OsDrvC¥.h
>

12 
	~<OsDrvShaveL2Cache.h
>

13 
	~"≠p_c⁄fig_def.h
"

14 
	~"≠p_c⁄fig.h
"

18 
	#L2CACHE_CFG
 (
SHAVE_L2CACHE_NORMAL_MODE
)

	)

32 
	$öôClocksAndMem‹y
()

34 
s32
 
sc
;

36 
tyAuxClkDividîCfg
 
auxClkAŒOn
[] =

38 {
AUX_CLK_MASK_UART
, 
CLK_SRC_REFCLK0
, 96, 625},

43 
sc
 = 
	`OsDrvC¥Inô
();

44 if(
sc
)

45  
sc
;

46 
sc
 = 
	`OsDrvC¥O≥n
();

47 if(
sc
)

48  
sc
;

49 
sc
 = 
	`OsDrvC¥AuxClockAºayC⁄fig
(
auxClkAŒOn
);

50 if(
sc
)

51  
sc
;

53 
	`DrvC¥SysDevi˚A˘i⁄
(
MSS_DOMAIN
,
DEASSERT_RESET
,
DEFAULT_RTEMS_MSS_LRT_CLOCKS
 | 
MV_MSS_EXTRA_CLOCKS
);

56 
sc
 = 
	`OsDrvShaveL2CacheInô
(
L2CACHE_CFG
);

57 if(
sc
)

58  
sc
;

61 
∑πôi⁄_id
;

62 
	`OsDrvShaveL2CGëP¨tôi⁄
(
SHAVEPART256KB
, &
∑πôi⁄_id
);

65 
sc
 = 
	`OsDrvShaveL2CacheAŒoˇãSëP¨tôi⁄s
();

66 if(
sc
)

67  
sc
;

69 
	`OsDrvShaveL2CacheP¨tôi⁄InvÆid©e
(0);

72 
	}
}

	@Progressive/ma2x5x/010_Simple_SIPP_RTEMS/leon/app_config.h

9 #i‚de‡
_APP_CONFIG_H_


10 
	#_APP_CONFIG_H_


	)

17 
	#APP_MSS_CLOCKS
 (
DEV_MSS_APB_SLV
 | \

18 
DEV_MSS_APB2_CTRL
 | \

19 
DEV_MSS_AXI_BRIDGE
 | \

20 
DEV_MSS_MXI_CTRL
 | \

21 
DEV_MSS_MXI_DEFSLV
 )

	)

23 
	#APP_UPA_CLOCKS
 (
DEV_UPA_SH0
 | \

24 
DEV_UPA_SHAVE_L2
 | \

25 
DEV_UPA_CDMA
 | \

26 
DEV_UPA_CTRL
 )

	)

36 
öôClocksAndMem‹y
();

	@Progressive/ma2x5x/010_Simple_SIPP_RTEMS/leon/main.c

10 
	~<°dio.h
>

11 
	~<°dlib.h
>

12 
	~<πems.h
>

13 
	~<πems/b•Io.h
>

14 
	~<DrvC¥.h
>

15 
	~<DrvLe⁄.h
>

16 
	~<UnôTe°Api.h
>

17 
	~"πems_c⁄fig.h
"

24 
u32
 
Ãt_°¨t
;

33 *
	$POSIX_Inô
 (*
¨gs
)

35 
	`UNUSED
(
¨gs
);

37 
s32
 
sc
;

39 
	`unôTe°Inô
();

40 
sc
 = 
	`öôClocksAndMem‹y
();

41 if(
sc
)

42 
	`exô
(
sc
);

44 
	`¥ötf
("LeonOS Started.\n");

45 
	`¥ötf
("Le⁄RT Sèπ Addr: 0x%lX\n",(
u32
)&
Ãt_°¨t
);

48 
	`DrvLe⁄RTSèπup
((
u32
)&
Ãt_°¨t
);

50 
	`DrvLe⁄RTWaôExecuti⁄
();

51 
	`¥ötf
("LeonRT Stop.\n");

53 
	`unôTe°FöÆRï‹t
();

54 
	`exô
(0);

55 
	}
}

	@Progressive/ma2x5x/010_Simple_SIPP_RTEMS/leon/rtems_config.h

8 #i‚de‡
_RTEMS_CONFIG_H_


9 
	#_RTEMS_CONFIG_H_


	)

14 
	~"≠p_c⁄fig_def.h
"

15 
	~"≠p_c⁄fig.h
"

16 
	~"ÁèlExãnsi⁄.h
"

21 #i‡
deföed
(
__RTEMS__
)

23 #i‡!
deföed
 (
__CONFIG__
)

24 
	#__CONFIG__


	)

27 
	#CONFIGURE_INIT


	)

29 #i‚de‡
RTEMS_POSIX_API


30 
	#RTEMS_POSIX_API


	)

33 
	#CONFIGURE_MICROSECONDS_PER_TICK
 1000

	)

35 
	#CONFIGURE_TICKS_PER_TIMESLICE
 10

	)

37 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

39 
	#CONFIGURE_APPLICATION_NEEDS_CLOCK_DRIVER


	)

41 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

43 
	#CONFIGURE_MINIMUM_TASK_STACK_SIZE
 4096

	)

45 
	#CONFIGURE_MAXIMUM_TASKS
 4

	)

47 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 4

	)

49 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 8

	)

51 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 8

	)

53 
	#CONFIGURE_MAXIMUM_POSIX_SEMAPHORES
 8

	)

55 
	#CONFIGURE_MAXIMUM_POSIX_MESSAGE_QUEUES
 8

	)

57 
	#CONFIGURE_MAXIMUM_POSIX_TIMERS
 4

	)

59 
	#CONFIGURE_MAXIMUM_TIMERS
 4

	)

62 
	#CONFIGURE_MAXIMUM_USER_EXTENSIONS
 1

	)

63 
	#CONFIGURE_INITIAL_EXTENSIONS
 { .
Áèl
 = 
F©Æ_exãnsi⁄
 }

	)

70 *
POSIX_Inô
 (*
¨gs
);

72 
	~<πems/c⁄fdefs.h
>

81 
BSP_SET_CLOCK
(12000, 266000, 1, 1, 
DEFAULT_RTEMS_CSS_LOS_CLOCKS
, \

82 
DEFAULT_RTEMS_MSS_LRT_CLOCKS
 | 
MV_MSS_EXTRA_CLOCKS
, 
APP_UPA_CLOCKS
, 
MV_SIPP_EXTRA_CLOCKS
, 0);

85 
BSP_SET_L2C_CONFIG
(0, 
L2C_REPL_LRU
, 0, 
L2C_MODE_COPY_BACK
, 0, 
NULL
);

	@Progressive/ma2x5x/010_Simple_SIPP_RTEMS/leon_rt/rt_main.c

12 
	~<°dio.h
>

13 
	~<°dlib.h
>

14 
	~<°rög.h
>

15 
	~<swcLe⁄Utûs.h
>

16 
	~<DrvLe⁄L2C.h
>

17 
	~<DrvLe⁄.h
>

18 
	~"DrvDdr.h
"

19 
	~"DrvC¥.h
"

21 
	~<sùp.h
>

22 
	~<sùpTe°Comm⁄.h
>

25 
	#IMG_W
 (1280)

	)

26 
	#IMG_H
 (4)

	)

28 
	#KER_SZ
 (3)

	)

31 
UI¡8
 
__©åibuã__
((
£˘i⁄
(".cmx.d©a"))Ë
	giBuf
[
IMG_W
 * 
IMG_H
] 
ALIGNED
(8) =

59 
UI¡8
 
__©åibuã__
((
£˘i⁄
(".cmx.d©a"))Ë
	goBuf
[
IMG_W
 * 
IMG_H
] 
ALIGNED
(8);

62 
UI¡16
 
	gkî
[5*5] =

72 
SùpPùñöe
 *
	g∂
;

74 
SùpFûãr
 *
	gdmaIn
;

75 
SùpFûãr
 *
	gc⁄v
;

76 
SùpFûãr
 *
	gdmaOut
;

79 
	$≠pBuûdPùñöe
( )

81 
∂
 = 
	`sùpCª©ePùñöe
(3, 3, 0);

87 
dmaIn
 = 
	`sùpCª©eFûãr
(
∂
, 0x00, 
IMG_W
, 
IMG_H
, 
	`N_PL
(1), 
	`SZ
(
UI¡8
), SZ(
DmaP¨am
), (
FnSvuRun
)
SIPP_DMA_ID
, 0);

88 
c⁄v
 = 
	`sùpCª©eFûãr
(
∂
, 0x00, 
IMG_W
, 
IMG_H
, 
	`N_PL
(1), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_CONV_ID
, 0);

89 
dmaOut
 = 
	`sùpCª©eFûãr
(
∂
, 0x00, 
IMG_W
, 
IMG_H
, 
	`N_PL
(1), 
	`SZ
(
UI¡8
), SZ(
DmaP¨am
), (
FnSvuRun
)
SIPP_DMA_ID
, 0);

91 
	`sùpLökFûãr
(
c⁄v
, 
dmaIn
, 
KER_SZ
, KER_SZ);

92 
	`sùpLökFûãr
(
dmaOut
, 
c⁄v
, 1, 1);

93 
	}
}

95 
	$≠pProcFøme
(
SùpPùñöe
 *
∂
)

97 
DmaP¨am
 *
dmaInCfg
 = (DmaP¨am*)
dmaIn
->
∑øms
;

98 
DmaP¨am
 *
dmaOutCfg
 = (DmaP¨am*)
dmaOut
->
∑øms
;

99 
C⁄vP¨am
 *
c⁄vCfg
 = (C⁄vP¨am*)
c⁄v
->
∑øms
;

101 
dmaInCfg
->
ddrAddr
 = (
UI¡32
)&
iBuf
;

102 
dmaOutCfg
->
ddrAddr
 = (
UI¡32
)&
oBuf
;

104 
c⁄vCfg
->
cfg
 = 
KER_SZ
 |

113 
	`∑ckC⁄v5x5CCM
(
c⁄vCfg
, 
kî
);

115 
	`sùpPro˚ssFøme
(
∂
);

116 
	}
}

118 
	$sùp_ã°
( )

120 
	`sùpInôülize
();

121 
	`≠pBuûdPùñöe
();

122 
	`≠pProcFøme
(
∂
);

123  
	`memcmp
(
iBuf
, 
oBuf
, (
IMG_W
 * 
IMG_H
));

124 
	}
}

126 
	$maö
()

128 
	`¥ötf
("SIPP Convolution...\n");

129 if(!
	`sùp_ã°
()) {

130 
	`¥ötf
("Success!\n");

132 
	`¥ötf
("Error!\n");

135 
	`DrvLe⁄RTSig«lSt›
();

138 
	}
}

	@Progressive/ma2x5x/011_AsmOptimisation_BareMetal/leon/app_config.c

12 
	~"≠p_c⁄fig.h
"

13 
	~<ªgi°îsMyrüd.h
>

14 
	~<DrvC¥.h
>

16 
	~<DrvRegUtûs.h
>

17 
	~<DrvShaveL2Cache.h
>

18 
	~<DrvTimî.h
>

19 
	~"DrvDdr.h
"

24 
	#L2CACHE_CFG
 (
SHAVE_L2CACHE_NORMAL_MODE
)

	)

26 
	#APP_UPA_CLOCKS
 (
DEV_UPA_SH0
 | \

27 
DEV_UPA_SHAVE_L2
 | \

28 
DEV_UPA_CDMA
 | \

29 
DEV_UPA_CTRL
 )

	)

31 #i‚de‡
BUP_PLL0_FREQ


33 
	#BUP_PLL0_FREQ
 300000

	)

36 #i‚de‡
BUP_PLL1_FREQ


38 
	#BUP_PLL1_FREQ
 300000

	)

45 
u32
 
__l2_c⁄fig
 
__©åibuã__
((
£˘i⁄
(".l2.mode"))Ë
L2CACHE_CFG
;

57 
tyAuxClkDividîCfg
 
	g≠pAuxClkCfg600_266
[] =

59 {
AUX_CLK_MASK_UART
 ,
CLK_SRC_REFCLK0
,1,1},

62 
tySocClockC⁄fig
 
	g≠pClockC⁄fig
 =

64 .
ªfClk0I≈utKhz
 = 12000,

65 .
	gªfClk1I≈utKhz
 = 0,

66 .
	gèrgëPŒ0FªqKhz
 = 
BUP_PLL0_FREQ
,

67 .
	gèrgëPŒ1FªqKhz
 = 0,

68 .
	g˛kSrcPŒ1
 = 
CLK_SRC_REFCLK0
,

69 .
	gma°îClkDivNumî©‹
 = 1,

70 .
	gma°îClkDivDíomö©‹
 = 1,

71 .
	gcssDssClockE«bÀMask
 = 
DEFAULT_CORE_CSS_DSS_CLOCKS
,

72 .
	gmssClockE«bÀMask
 = 0xFFFFFFFF,

73 .
	gsùpClockE«bÀMask
 = 0xFFFFFFFF,

74 .
	gu∑ClockE«bÀMask
 = 
DEFAULT_UPA_CLOCKS
,

75 .
	gpAuxClkCfg
 = 
≠pAuxClkCfg600_266
,

78 
	$öôClocksAndMem‹y
()

80 
i
;

81 
	`DrvTimîInô
();

82 
	`DrvC¥Inô
();

83 
	`DrvC¥SëupClocks
(&
≠pClockC⁄fig
);

85 
	`DrvC¥SysDevi˚A˘i⁄
(
MSS_DOMAIN
, 
DEASSERT_RESET
, 0xFFFFFFFF);

86 
	`DrvC¥SysDevi˚A˘i⁄
(
UPA_DOMAIN
, 
DEASSERT_RESET
, 
APP_UPA_CLOCKS
);

88 
	`DrvDdrInôüli£
(
NULL
);

91 
	`DrvShaveL2CacheSëupP¨tôi⁄
(
SHAVEPART256KB
);

94 
	`DrvShaveL2CacheAŒoˇãSëP¨tôi⁄s
();

97 
i
 = 0; i < 12; i++)

99 
	`DrvShaveL2CacheSëLSUP¨tId
(
i
, 
PARTITION_0
);

103 
	`DrvShaveL2CacheP¨tôi⁄InvÆid©e
(
PARTITION_0
);

107 
	}
}

	@Progressive/ma2x5x/011_AsmOptimisation_BareMetal/leon/app_config.h

9 #i‚de‡
_APP_CONFIG_H_


10 
	#_APP_CONFIG_H_


	)

12 
	~<mv_ty≥s.h
>

15 
	#PARTITION_0
 (0)

	)

18 
u32
 
__l2_c⁄fig
 ;

23 
öôClocksAndMem‹y
();

	@Progressive/ma2x5x/011_AsmOptimisation_BareMetal/leon/main.c

2 
	~"≠p_c⁄fig.h
"

5 
	~<°dio.h
>

6 
	~<°rög.h
>

9 
	~<DrvShaveL2Cache.h
>

12 
	~<swcShaveLﬂdî.h
>

13 
	~<swcTe°Utûs.h
>

14 
	~<swcCrc.h
>

17 
	~<UnôTe°Api.h
>

18 
	~<VcsHooksApi.h
>

21 
	~<Buf„rs.h
>

24 
	#SHAVE_NUMBER
 0

	)

25 
	#CRC_USED_STEP0
 0xc3ec8483

	)

26 
	#CRC_USED_STEP1
 0x6Ø3bcd7

	)

27 
	#CRC_USED_STEP2
 0x6Ø3bcd7

	)

28 
	#CRC_USED_STEP3
 0x16cˇa6a

	)

29 
	#CRC_USED_STEP4
 0x16cˇa6a

	)

32 
u32
 
AsmO±imißti⁄0_AsmO±imißti⁄Inô
;

33 
u32
 
AsmO±imißti⁄0_AsmO±imißti⁄Run
;

35 
u32
 
	gFnAsmO±imißti⁄Inô
 = (u32)&
AsmO±imißti⁄0_AsmO±imißti⁄Inô
;

36 
u32
 
	gFnAsmO±imißti⁄Run
 = (u32)&
AsmO±imißti⁄0_AsmO±imißti⁄Run
;

40 
	$öôAlgo
(
swcShaveUnô_t
 
svu
, 
u32
 
width
)

42 
	`swcRe£tShave
(
svu
);

43 
	`swcSëAbsﬁuãDeÁu…Sèck
(
svu
);

44 
	`swcSèπShaveCC
(
svu
, 
FnAsmO±imißti⁄Inô
, "i", 
width
);

45 
	`swcWaôShave
(
svu
);

46 
	`DrvShaveL2CacheP¨tôi⁄FlushAndInvÆid©e
(
svu
);

47 
	}
}

50 
	$runAlgo
(
swcShaveUnô_t
 
svu
, 
u8
* 
öput‰ame
, u8* 
ouçut‰ame
, 
u32
 
width
, u32 
height
, u32 
°ï_u£d
)

53 
≥rf‹m™˚Såu˘
 
≥rfSå
;

56 
	`swcShaveProfInô
(&
≥rfSå
);

58 
	`swcRe£tShave
(
svu
);

59 
	`swcSëAbsﬁuãDeÁu…Sèck
(
svu
);

62 
	`swcShaveProfSèπG©hîögFõlds
(
svu
, 
PERF_INSTRUCT_COUNT
);

63 
	`swcSèπShaveCC
(
svu
, 
FnAsmO±imißti⁄Run
, "iiiii", 
öput‰ame
, 
ouçut‰ame
, 
width
, 
height
, 
°ï_u£d
);

64 
	`swcWaôShave
(
svu
);

66 
	`swcShaveProfSt›FõldsG©hîög
(
svu
, 
PERF_INSTRUCT_COUNT
);

69 
	`swcShaveProfPröt
(
svu
, &
≥rfSå
);

71 
	`DrvShaveL2CacheP¨tôi⁄FlushAndInvÆid©e
(
svu
);

72 
	}
}

75 
	$maö
()

78 
	`öôClocksAndMem‹y
();

79 
	`DrvShaveL2CacheP¨tôi⁄FlushAndInvÆid©e
(
SHAVE_NUMBER
);

81 
	`¥ötf
("AsmOptimisationálgorithm.\n");

84 c⁄° 
u32
 
width
 = 
MAX_WIDTH
;

85 c⁄° 
u32
 
height
 = 
MAX_HEIGHT
;

87 
	`lﬂdMemFromFûeSim∂e
("öput/DunLoghaúe_320x240.bö", 
width
 * 
height
, (*)
öput‰ame
);

89 
	`unôTe°Inô
();

92 
	`öôAlgo
(
SHAVE_NUMBER
, 
width
);

94 
	`¥ötf
("\nStep 0: No optimisation - CÜevel\n");

95 
	`runAlgo
(
SHAVE_NUMBER
, (
u8
*)
öput‰ame
, (u8*)
ouçut‰ame
, 
width
, 
height
, 0);

96 
u32
 
¸cUniTe°0
 = 
	`swcCÆcCrc32
(
ouçut‰ame
, (Ë* 
width
 * 
height
, 
À_poöãr
);

98 
	`¥ötf
("\nStep 1: First version of code written in Asm\n");

99 
	`runAlgo
(
SHAVE_NUMBER
, (
u8
*)
öput‰ame
, (u8*)
ouçut‰ame
, 
width
, 
height
, 1);

100 
u32
 
¸cUniTe°1
 = 
	`swcCÆcCrc32
(
ouçut‰ame
, (Ë* 
width
 * 
height
, 
À_poöãr
);

102 
	`¥ötf
("\nStep 2: Remove unnecesary \"nop's\"ánd startÖutting instructions inÖarallel - Asm\n");

103 
	`runAlgo
(
SHAVE_NUMBER
, (
u8
*)
öput‰ame
, (u8*)
ouçut‰ame
, 
width
, 
height
, 2);

104 
u32
 
¸cUniTe°2
 = 
	`swcCÆcCrc32
(
ouçut‰ame
, (Ë* 
width
 * 
height
, 
À_poöãr
);

106 
	`¥ötf
("\nStep 3:ÜoopÖarallelization - change instructions in orderÅo haveÜess instructions inÜoop - Asm\n");

107 
	`runAlgo
(
SHAVE_NUMBER
, (
u8
*)
öput‰ame
, (u8*)
ouçut‰ame
, 
width
, 
height
, 3);

108 
u32
 
¸cUniTe°3
 = 
	`swcCÆcCrc32
(
ouçut‰ame
, (Ë* 
width
 * 
height
, 
À_poöãr
);

110 
	`¥ötf
("\nStep 4:ÜoopÖarallelization - makeÅheÜoopÅo be made only onÅheÖrincipal unit used\n");

111 
	`runAlgo
(
SHAVE_NUMBER
, (
u8
*)
öput‰ame
, (u8*)
ouçut‰ame
, 
width
, 
height
, 4);

112 
u32
 
¸cUniTe°4
 = 
	`swcCÆcCrc32
(
ouçut‰ame
, (Ë* 
width
 * 
height
, 
À_poöãr
);

114 
	`unôTe°As£π
((
¸cUniTe°0
 =
CRC_USED_STEP0
Ë&& (
¸cUniTe°1
 =
CRC_USED_STEP1
Ë&& (
¸cUniTe°2
 =
CRC_USED_STEP2
Ë&& (
¸cUniTe°3
 =
CRC_USED_STEP3
)

115 && (
¸cUniTe°4
 =
CRC_USED_STEP4
));

116 
	`unôTe°FöÆRï‹t
();

119 
	}
}

	@Progressive/ma2x5x/011_AsmOptimisation_BareMetal/shared/Buffers.h

11 
	~<mv_ty≥s.h
>

12 
	~<Deföes.h
>

14 
DDR_BSS
 
u8
 
	göput‰ame
[
MAX_WIDTH
 * 
MAX_HEIGHT
] 
__©åibuã__
 ((
Æig√d
 (16)));

15 
DDR_BSS
 
u8
 
	gouçut‰ame
[
MAX_WIDTH
 * 
MAX_HEIGHT
] 
__©åibuã__
 ((
Æig√d
 (16)));

	@Progressive/ma2x5x/011_AsmOptimisation_BareMetal/shared/Defines.h

1 #i‚de‡
__DEFINES_SPARSE_H__


2 
	#__DEFINES_SPARSE_H__


	)

5 
	#MAX_WIDTH
 320

	)

6 
	#MAX_HEIGHT
 240

	)

9 
	#LINES_NUMBER
 2

	)

10 
	#MAX_PADDING_8
 8

	)

13 
	#DDR_DATA
 
	`__©åibuã__
((
	`£˘i⁄
(".ddr.d©a")))

	)

14 
	#DDR_BSS
 
	`__©åibuã__
((
	`£˘i⁄
(".ddr.bss")))

	)

15 
	#ALIGNED
(
x
Ë
	`__©åibuã__
((
	`Æig√d
(x)))

	)

16 
	#ENTRYPOINT
 "C"

	)

	@Progressive/ma2x5x/011_AsmOptimisation_BareMetal/shave/AsmOptimisation.cpp

14 
	~<°dio.h
>

15 
	~<°dlib.h
>

16 
	~<°rög.h
>

19 
	~"AsmO±imißti⁄.h
"

20 
	~<Deföes.h
>

22 
	~<c⁄vﬁuti⁄1x7_°ï.h
>

25 
	~<swcCdma.h
>

26 
	~<swcWhoAmI.h
>

27 
	~<svuComm⁄Shave.h
>

29 (*
	tÂ
)–
	tu8
**, u8**, 
	thÆf
*, 
	tu32
);

32 
Â
 
c⁄vﬁuti⁄
[5] =

34 
C⁄vﬁuti⁄1x7_°ï0
,

35 
C⁄vﬁuti⁄1x7_°ï1
,

36 
C⁄vﬁuti⁄1x7_°ï2
,

37 
C⁄vﬁuti⁄1x7_°ï3
,

38 
C⁄vﬁuti⁄1x7_°ï4
,

39 
	}
};

48 
u8
 
	$ALIGNED
(8Ë
c⁄v1x7buf
[
LINES_NUMBER
][
MAX_WIDTH
 + 2 * 
MAX_PADDING_8
];

49 
u8
 
	$ALIGNED
(8Ë
ªsu…_buf
[
MAX_WIDTH
 * 2];

50 
u8
* 
löesPoöãrC⁄v1x7
[
LINES_NUMBER
];

51 
u8
* 
ªsu…_poöãr
[2];

55 c⁄° 
u16
 
	$ALIGNED
(8Ë
C⁄v1x7
[7] =

58 
	}
};

66 
addPaddög
(
u8
* 
poöãr
, 
u32
 
width
, u32 
∑ddögSize
);

69 
rŸ©ePoöãrs
();

72 
˛amp
(
x
, 
y
, 
z
);

76 
ENTRYPOINT
 
	$AsmO±imißti⁄Inô
(
u32
 
width
)

78 
löesPoöãrC⁄v1x7
[0] = (
u8
*)
c⁄v1x7buf
 + 
MAX_PADDING_8
 ;

79 
löesPoöãrC⁄v1x7
[1] = (
u8
*)
c⁄v1x7buf
 + 
MAX_PADDING_8
 + (
width
 + 2 * MAX_PADDING_8);

81 
ªsu…_poöãr
[0] = (
u8
*)
ªsu…_buf
;

82 
ªsu…_poöãr
[1] = (
u8
*)
ªsu…_buf
 + 
width
;

84 
SHAVE_HALT
;

85 
	}
}

89 
ENTRYPOINT
 
	$AsmO±imißti⁄Run
(
u8
* 
öputImage
,

90 
u8
 *
ouçutImage
,

91 
u32
 
width
,

92 
u32
 
height
,

93 
u32
 
°ï_u£d
)

96 
dmaTønß˘i⁄Li°_t
 
èsk1
, 
èsk2
, 
èsk3
, 
èsk4
;

97 
dmaTønß˘i⁄Li°_t
 *
ªf1
, *
ªf2
, *
ªf3
, *
ªf4
;

98 
dmaReque°îId
 
id1
 = 
	`dmaInôReque°î
(0);

99 
u32
 
i
;

100 
u32
 
¸tInLn
 = 0;

102 
ªf1
 = 
	`dmaCª©eTønß˘i⁄
(
id1
, &
èsk1
, 
öputImage
 + 
¸tInLn
 * 
width
, 
löesPoöãrC⁄v1x7
[0], width);

103 
¸tInLn
++;

104 
ªf2
 = 
	`dmaCª©eTønß˘i⁄
(
id1
, &
èsk2
, 
öputImage
 + 
¸tInLn
 * 
width
, 
löesPoöãrC⁄v1x7
[1], width);

105 
¸tInLn
++;

106 
	`dmaLökTasks
(
ªf1
, 1, 
ªf2
);

107 
	`dmaSèπLi°Task
(
ªf1
);

108 
	`dmaWaôTask
(
ªf1
);

110 
	`addPaddög
(
löesPoöãrC⁄v1x7
[0],
width
, 8);

111 
	`addPaddög
(
löesPoöãrC⁄v1x7
[1],
width
, 8);

113 
c⁄vﬁuti⁄
[
°ï_u£d
](
löesPoöãrC⁄v1x7
, &
ªsu…_poöãr
[0], (
hÆf
*)
C⁄v1x7
, 
width
);

115 
	`rŸ©ePoöãrs
();

117 
i
 = 1; i < 
height
; i++)

119 
ªf2
 = 
	`dmaCª©eTønß˘i⁄
(
id1
, &
èsk2
, 
öputImage
 + 
¸tInLn
 * 
width
, 
löesPoöãrC⁄v1x7
[1], width);

120 
ªf3
 = 
	`dmaCª©eTønß˘i⁄
(
id1
, &
èsk3
, 
ªsu…_poöãr
[1], 
ouçutImage
, 
width
);

121 
	`dmaLökTasks
(
ªf2
, 1, 
ªf3
);

122 
	`dmaSèπLi°Task
(
ªf2
);

124 
¸tInLn
++;

125 
ouçutImage
 +
width
;

127 
c⁄vﬁuti⁄
[
°ï_u£d
](
löesPoöãrC⁄v1x7
, &
ªsu…_poöãr
[0], (
hÆf
*)
C⁄v1x7
, 
width
);

129 
	`dmaWaôTask
(
ªf2
);

131 
	`addPaddög
(
löesPoöãrC⁄v1x7
[1],
width
, 8);

132 
	`rŸ©ePoöãrs
();

135 
ªf4
 = 
	`dmaCª©eTønß˘i⁄
(
id1
, &
èsk4
, 
ªsu…_poöãr
[1], 
ouçutImage
, 
width
);

136 
	`dmaSèπLi°Task
(
ªf4
);

137 
	`dmaWaôTask
(
ªf4
);

139 
SHAVE_HALT
;

140 
	}
}

142 
	$addPaddög
(
u8
* 
poöãr
, 
u32
 
width
, u32 
∑ddögSize
)

144 
u32
 
widthAux
 = 
width
 - 1;

146 
u32
 
i
 = 1; i <
∑ddögSize
; i++)

149 *(
poöãr
 - 
i
) = *pointer;

150 *(
poöãr
 + 
widthAux
 + 
i
) = *(pointer + widthAux);

152 
	}
}

154 
	$rŸ©ePoöãrs
()

157 
u8
* 
öã∫ÆP
 = 
löesPoöãrC⁄v1x7
[0];

158 
löesPoöãrC⁄v1x7
[0] =ÜinesPointerConv1x7[1];

159 
löesPoöãrC⁄v1x7
[1] = 
öã∫ÆP
;

163 
öã∫ÆP
 = 
ªsu…_poöãr
[0];

164 
ªsu…_poöãr
[0] =Ñesult_pointer[1];

165 
ªsu…_poöãr
[1] = 
öã∫ÆP
;

166 
	}
}

	@Progressive/ma2x5x/011_AsmOptimisation_BareMetal/shave/AsmOptimisation.h

10 #i‚de‡
ASMOPTIMISATION_H


11 
	#ASMOPTIMISATION_H


	)

15 
	~<mvcv.h
>

17 
	~<Deföes.h
>

31 
ENTRYPOINT
 
AsmO±imißti⁄Inô
(
u32
 
width
);

48 
ENTRYPOINT
 
AsmO±imißti⁄Run
(
u8
 *
öputBuf„r
,

49 
u8
 *
ouçutBuf„r
,

50 
u32
 
width
,

51 
u32
 
height
,

52 
u32
 
°ï_u£d
);

	@Progressive/ma2x5x/011_AsmOptimisation_BareMetal/shave/kernel/convolution1x7_step.h

1 #i‚de‡
__CONVOLUTION1x7_STEP_H__


2 
	#__CONVOLUTION1x7_STEP_H__


	)

3 
	~<mv_ty≥s.h
>

4 
	~<mvcv_ma¸o.h
>

13 
C⁄vﬁuti⁄1x7_°ï0
(
u8
** 
ö
, u8** 
out
, 
hÆf
 
c⁄v
[7], 
u32
 
öWidth
);

15 
C⁄vﬁuti⁄1x7_°ï1
(
u8
** 
ö
, u8** 
out
, 
hÆf
 
c⁄v
[7], 
u32
 
öWidth
);

16 
C⁄vﬁuti⁄1x7_°ï2
(
u8
** 
ö
, u8** 
out
, 
hÆf
 
c⁄v
[7], 
u32
 
öWidth
);

17 
C⁄vﬁuti⁄1x7_°ï3
(
u8
** 
ö
, u8** 
out
, 
hÆf
 
c⁄v
[7], 
u32
 
öWidth
);

18 
C⁄vﬁuti⁄1x7_°ï4
(
u8
** 
ö
, u8** 
out
, 
hÆf
 
c⁄v
[7], 
u32
 
öWidth
);

	@Progressive/ma2x5x/011_AsmOptimisation_BareMetal/shave/kernel/convolution1x7_step0.cpp

1 
	~<c⁄vﬁuti⁄1x7_°ï.h
>

2 
	~<moviVe˘‹Utûs.h
>

5 
	$C⁄vﬁuti⁄1x7_°ï0
(
u8
 **
ö
, u8 **
out
, 
hÆf
 
c⁄v
[8], 
u32
 
öWidth
)

7 
u32
 
i
, 
y
;

8 
sum
 = 0.0;

9 
u8
 *
öput
 = *
ö
;

10 
u8
 *
ouçut
 = *
out
;

12 
i
 = 0; i < 
öWidth
; i++)

14 
sum
 = 0.0;

15 
y
 = 0; y < 7; y++)

17 
sum
 +(()
öput
[
y
 - 3]Ë* 
c⁄v
[y];

19 
öput
++;

20 i‡(
sum
 >= 255.0f)

21 
sum
 = 255.0f;

22 i‡(
sum
 <= 0.0f)

23 
sum
 = 0.0f;

24 
ouçut
[
i
] = (
u8
)(
sum
);

27 
	}
}

	@Progressive/ma2x5x/012_SharingData/leon/SharingDataWithShave.c

9 
	~<mv_ty≥s.h
>

10 
	~<°dio.h
>

11 
	~<πems.h
>

12 
	~<πems/b•Io.h
>

13 
	~"swcLe⁄Utûs.h
"

14 
	~"swcShaveLﬂdî.h
"

15 
	~"OsDrvSvu.h
"

16 
	~<OsDrvShaveL2Cache.h
>

17 
	~"UnôTe°Api.h
"

18 
	~"VcsHooksApi.h
"

19 
	~"swcMuãxUßge.h
"

21 
	~"Sh¨ögD©aWôhShave.h
"

22 
	~"≠p_c⁄fig.h
"

27 #i‚de‡
RESOURCE_FOLDER


28 #îr‹ 
No
 
ªsour˚
 
fﬁdî
 
deföed
. \

29 
Pls
 
check
 
v¨übÀ
 
RESOURCE_FOLDER
 
deföôi⁄
 
ö
 
≠p
 
	gMakefûe


32 
	#DEF_FRAME_WIDTH
 (1280)

	)

33 
	#DEF_FRAME_HEIGHT
 (50)

	)

35 c⁄° 
u32
 
	gFRAME_WIDTH
 = 
DEF_FRAME_WIDTH
;

36 c⁄° 
u32
 
	gFRAME_HEIGHT
 = 
DEF_FRAME_HEIGHT
;

41 
Dy«micC⁄ãxt_t
 
MODULE_DATA
(
SmÆlD©a
);

42 
Dy«micC⁄ãxt_t
 
MODULE_DATA
(
BigD©a
);

44 
u32
 
CMX_DIRECT_DATA
 
	gbuf„rSh¨edBëwìnLe⁄AndShave
[
SMALL_DATA_LENGTH
];

45 
u32
 
CMX_DIRECT_DATA
 
	gbuf„rdSh¨edBëwìnShaves
[
SMALL_DATA_LENGTH
];

46 
__©åibuã__
((
	$Æig√d
(8))Ë
l2cD©aP¨tôi⁄Id
;

50 c⁄° * 
Resour˚Fﬁdî
 = 
RESOURCE_FOLDER
;

52 
swcShaveUnô_t
 
shaveLi°
[
SHAVES_USED
] = {0, 1
	}
};

53 
swcShaveUnô_t
 
	gshaveLi°BigD©a
[
SHAVES_USED
] = {2, 3};

55 
DDR_DATA
 
	$ALIGNED
(64Ë
u8
 
öputBuf„r
[
DEF_FRAME_HEIGHT
 * 
DEF_FRAME_WIDTH
];

56 
DDR_DATA
 
	$ALIGNED
(64Ë
u8
 
ouçutBuf„r
[
DEF_FRAME_HEIGHT
 * 
DEF_FRAME_WIDTH
];

66 
	$runShaves
(
Dy«micC⁄ãxt_t
 * 
pDynModC⁄ãxt
, 
swcShaveUnô_t
 * 
pDynModShaveLi°
, 
u8
* 
öput
, u8* 
ouçut
)

68 
°©us
, 
i
;

69 
uöt32_t
 
ru¬ög
;

72 
°©us
 = 
	`OsDrvSvuSëupDynShaveAµs
(
pDynModC⁄ãxt
,

73 
pDynModShaveLi°
,

74 
SHAVES_USED
);

75 i‡(
°©us
 !
OS_MYR_DYN_INFR_SUCCESS
)

76 
	`OSDRV_DYN_INFR_CHECK_CODE
(
°©us
);

79 
°©us
 = 
	`OsDrvSvuO≥nShaves
(
pDynModShaveLi°
,

80 
SHAVES_USED
,

81 
OS_MYR_PROTECTION_SELF
);

83 i‡(
°©us
 !
OS_MYR_DYN_INFR_SUCCESS
)

84 
	`OSDRV_DYN_INFR_CHECK_CODE
(
°©us
);

87 
	`OsDrvShaveL2CacheP¨tôi⁄InvÆid©e
(
l2cD©aP¨tôi⁄Id
);

89 if(
öput
)

92 
i
=0;i<
SHAVES_USED
;i++){

93 
u8
* 
§c
 = (u8*)(
öput
 + 
i
*
FRAME_WIDTH
*
FRAME_HEIGHT
/2);

94 
u8
* 
de°
 = (u8*)(
ouçut
 + 
i
*
FRAME_WIDTH
*
FRAME_HEIGHT
/2);

95 
°©us
 = 
	`OsDrvSvuRunShaveAlgoOnAssig√dShaveCC
(

96 
pDynModC⁄ãxt
,

97 
pDynModShaveLi°
[
i
],

99 
§c
,

100 
de°
,

101 
FRAME_WIDTH
, 
FRAME_HEIGHT
/2);

103 i‡(
°©us
 !
OS_MYR_DYN_INFR_SUCCESS
)

104 
	`OSDRV_DYN_INFR_CHECK_CODE
(
°©us
);

110 
i
=0;i<
SHAVES_USED
;i++){

111 
°©us
 = 
	`OsDrvSvuRunShaveAlgoOnAssig√dShaveCC
(

112 &
	`MODULE_DATA
(
SmÆlD©a
),

113 
shaveLi°
[
i
],

115 
buf„rdSh¨edBëwìnShaves
);

117 i‡(
°©us
 !
OS_MYR_DYN_INFR_SUCCESS
)

118 
	`OSDRV_DYN_INFR_CHECK_CODE
(
°©us
);

122 
°©us
 = 
	`OsDrvSvuDynWaôShaves
(
pDynModShaveLi°
,

123 
SHAVES_USED
,

124 
OS_DRV_SVU_WAIT_FOREVER
,

125 &
ru¬ög
);

127 i‡(
°©us
 !
OS_MYR_DYN_INFR_SUCCESS
)

128 
	`OSDRV_DYN_INFR_CHECK_CODE
(
°©us
);

132 
°©us
 = 
	`OsDrvSvuClo£Shaves
(
pDynModShaveLi°
, 
SHAVES_USED
);

133 i‡(
°©us
 !
OS_MYR_DYN_INFR_SUCCESS
)

134 
	`OSDRV_DYN_INFR_CHECK_CODE
(
°©us
);

137 
°©us
 = 
	`OsDrvSvuCÀ™upDynShaveAµs
(
pDynModC⁄ãxt
);

138 i‡(
°©us
 !
OS_MYR_DYN_INFR_SUCCESS
)

139 
	`OSDRV_DYN_INFR_CHECK_CODE
(
°©us
);

140 
	}
}

142 
	$Le⁄Sh¨eSmÆlD©aWôhShave
(
u32
* 
ex≥˘edBuf„rShaveLe⁄
, u32* 
ex≥˘edBuf„rShaveToShave
)

144 
i
;

145 
Dy«micC⁄ãxt_t
 * 
pDynModC⁄ãxt
;

146 
swcShaveUnô_t
 * 
pDynModShaveLi°
;

149 
i
 = 0; i < 
SMALL_DATA_LENGTH
 ;i++)

151 
buf„rSh¨edBëwìnLe⁄AndShave
[
i
] = i;

154 
pDynModC⁄ãxt
 = &
	`MODULE_DATA
(
SmÆlD©a
);

155 
pDynModShaveLi°
 = 
shaveLi°
;

156 
	`runShaves
(
pDynModC⁄ãxt
, 
pDynModShaveLi°
, 
NULL
, NULL);

158 
	`¥ötf
("Share small data betweenÜeonánd shave \n");

159 
	`unôTe°MemCom∑ª
((*)
buf„rSh¨edBëwìnLe⁄AndShave
,

160 
ex≥˘edBuf„rShaveLe⁄
,

161 (
u32
Ë* 
SMALL_DATA_LENGTH
);

162 
	`¥ötf
("Write small data fromÅwo shaves \n");

163 
	`unôTe°MemCom∑ª
((*)
buf„rdSh¨edBëwìnShaves
,

164 
ex≥˘edBuf„rShaveToShave
,

165 (
u32
Ë* 
SMALL_DATA_LENGTH
);

166 
	}
}

168 
	$Le⁄Sh¨eBigD©aWôhShave
()

170 
fûíame
[256];

171 
Dy«micC⁄ãxt_t
 * 
pDynModC⁄ãxt
;

172 
swcShaveUnô_t
 * 
pDynModShaveLi°
;

174 
	`¥ötf
("Share big data betweenÜeonánd shaves \n");

175 
	`¥ötf
("\n---- Loading ImageFile ----\n");

176 
	`•rötf
(
fûíame
,"%sCobKôchí_1280x720.yuv",
Resour˚Fﬁdî
);

177 
	`lﬂdMemFromFûeSim∂e
(
fûíame
, 
FRAME_WIDTH
 * 
FRAME_HEIGHT
, (*)
öputBuf„r
);

180 
	`OsDrvShaveL2CacheP¨tôi⁄Flush
(
l2cD©aP¨tôi⁄Id
, 
PERFORM_INVALIDATION
);

182 
pDynModC⁄ãxt
 = &
	`MODULE_DATA
(
BigD©a
);

183 
pDynModShaveLi°
 = 
shaveLi°BigD©a
;

184 
	`runShaves
(
pDynModC⁄ãxt
, 
pDynModShaveLi°
, 
öputBuf„r
, 
ouçutBuf„r
);

187 
	`OsDrvShaveL2CacheP¨tôi⁄Flush
(
l2cD©aP¨tôi⁄Id
, 
PERFORM_INVALIDATION
);

189 
	`πems_ˇche_övÆid©e_d©a_ønge
((*)
ouçutBuf„r
,

190 (Ë* 
FRAME_WIDTH
 * 
FRAME_HEIGHT
);

192 
	`¥ötf
("Write big data fromÅwo shaves\n");

193 
	`unôTe°MemCom∑ª
((*)
ouçutBuf„r
,

194 
öputBuf„r
,

195 (Ë* 
FRAME_WIDTH
 * 
FRAME_HEIGHT
);

198 
	}
}

	@Progressive/ma2x5x/012_SharingData/leon/SharingDataWithShave.h

9 #i‚de‡
_TEST_L2_CACHE_


10 
	#_TEST_L2_CACHE_


	)

16 
	#SMALL_DATA_LENGTH
 30

	)

20 #ifde‡
__˝lu•lus


27 
Le⁄Sh¨eBigD©aWôhShave
();

28 
Le⁄Sh¨eSmÆlD©aWôhShave
(
u32
* 
ex≥˘edBuf„rShaveLe⁄
,

29 
u32
* 
ex≥˘edBuf„rShaveToShave
);

30 #ifde‡
__˝lu•lus


	@Progressive/ma2x5x/012_SharingData/leon/app_config.c

11 
	~<OsDrvSvu.h
>

12 
	~<OsDrvShaveL2Cache.h
>

13 
	~"≠p_c⁄fig.h
"

31 
	$öôClocksAndMem‹y
(* 
d©aP¨tôi⁄ID
)

33 
s32
 
sc
;

36 
sc
=
	`OsDrvShaveL2CacheInô
(
SHAVEL2C_MODE_NORMAL
);

37 if(
sc
)

38  
sc
;

41 
sc
=
	`OsDrvShaveL2CRe£tP¨tôi⁄s
();

42 i‡(
sc
)

43  
sc
;

46 
sc
 = 
OS_MYR_DRV_SUCCESS
;

47 
uöt32_t
 
i
;

50 
∑πID
[4];

53 
sc
 +
	`OsDrvShaveL2CGëP¨tôi⁄
(
SHAVEPART64KB
, &
∑πID
[0]);

54 
sc
 +
	`OsDrvShaveL2CGëP¨tôi⁄
(
SHAVEPART64KB
, &
∑πID
[1]);

56 
sc
 +
	`OsDrvShaveL2CGëP¨tôi⁄
(
SHAVEPART64KB
, &
∑πID
[2]);

57 
sc
 +
	`OsDrvShaveL2CGëP¨tôi⁄
(
SHAVEPART64KB
, &
∑πID
[3]);

59 
i
=0; i < 2; i++){

61 
sc
 +
	`OsDrvShaveL2CSëN⁄WödowedP¨tôi⁄
(
i
,
∑πID
[0],

62 
NON_WINDOWED_INSTRUCTIONS_PARTITION
);

64 
sc
 +
	`OsDrvShaveL2CSëN⁄WödowedP¨tôi⁄
(
i
,
∑πID
[1],

65 
NON_WINDOWED_DATA_PARTITION
);

68 
i
=2; i < 4; i++){

70 
sc
 +
	`OsDrvShaveL2CSëN⁄WödowedP¨tôi⁄
(
i
,
∑πID
[2],

71 
NON_WINDOWED_INSTRUCTIONS_PARTITION
);

73 
sc
 +
	`OsDrvShaveL2CSëN⁄WödowedP¨tôi⁄
(
i
,
∑πID
[3],

74 
NON_WINDOWED_DATA_PARTITION
);

75 
sc
 +
	`OsDrvShaveL2CSëWödowP¨tôi⁄
(
i
,
SHAVEL2CACHEWIN_A
,
∑πID
[3]);

79 
sc
 +
	`OsDrvShaveL2CacheAŒoˇãSëP¨tôi⁄s
();

81 
	`OsDrvShaveL2CacheP¨tôi⁄InvÆid©e
(
∑πID
[0]);

82 
	`OsDrvShaveL2CacheP¨tôi⁄InvÆid©e
(
∑πID
[1]);

83 
	`OsDrvShaveL2CacheP¨tôi⁄InvÆid©e
(
∑πID
[2]);

84 
	`OsDrvShaveL2CacheP¨tôi⁄InvÆid©e
(
∑πID
[3]);

88 *
d©aP¨tôi⁄ID
 = 
∑πID
[3];

91 
sc
=
	`OsDrvSvuInô
();

92 if(
sc
)  sc;

94  
sc
;

95 
	}
}

	@Progressive/ma2x5x/012_SharingData/leon/app_config.h

10 #i‚de‡
_APP_CONFIG_H_


11 
	#_APP_CONFIG_H_


	)

19 #ifde‡
__˝lu•lus


26 
	#DEFAULT_APP_CLOCK_KHZ
 240000

	)

27 
	#DEFAULT_OSC_CLOCK_KHZ
 12000

	)

29 
	#SHAVES_USED
 2

30 

	)

31 
	#APP_UPA_CLOCKS
 ( 
DEV_UPA_SH0
 | \

32 
DEV_UPA_SH1
 | \

33 
DEV_UPA_SH2
 | \

34 
DEV_UPA_SH3
 | \

35 
DEV_UPA_SH4
 | \

36 
DEV_UPA_SH5
 | \

37 
DEV_UPA_SH6
 | \

38 
DEV_UPA_SH7
 | \

39 
DEV_UPA_SH8
 | \

40 
DEV_UPA_SH9
 | \

41 
DEV_UPA_SH10
 | \

42 
DEV_UPA_SH11
 | \

43 
DEV_UPA_SHAVE_L2
 | \

44 
DEV_UPA_CDMA
 | \

45 
DEV_UPA_CTRL
 | \

46 
DEV_UPA_MTX
 )

	)

48 
	#ALIGNED
(
x
Ë
	`__©åibuã__
((
	`Æig√d
(x)))

	)

50 
	#DDR_TEXT
 
	`__©åibuã__
((
	`£˘i⁄
(".ddr.ãxt")))

	)

51 
	#DDR_DATA
 
	`__©åibuã__
((
	`£˘i⁄
(".ddr.d©a")))

	)

52 
	#CMX_DATA
 
	`__©åibuã__
((
	`£˘i⁄
(".cmx.d©a")))

	)

54 
	#DDR_DIRECT_DATA
 
	`__©åibuã__
((
	`£˘i⁄
(".ddr_dúe˘.d©a")))

	)

55 
	#CMX_DIRECT_DATA
 
	`__©åibuã__
((
	`£˘i⁄
(".cmx_dúe˘.d©a")))

	)

57 
	#VALUE_SET_IN_LOS
 0x11223344

	)

58 
	#VALUE_SET_IN_LRT
 0xAABBCCDD

	)

63 
öôClocksAndMem‹y
(* 
d©aP¨tôi⁄ID
);

65 #ifde‡
__˝lu•lus


	@Progressive/ma2x5x/012_SharingData/leon/main.c

11 
	~<°dlib.h
>

12 
	~<πems.h
>

13 
	~<πems/b•Io.h
>

14 
	~<OsDrvSvu.h
>

15 
	~<UnôTe°Api.h
>

16 
	~"DrvLe⁄.h
"

17 
	~"OsDrvShaveL2Cache.h
"

18 
	~"Sh¨ögD©aWôhShave.h
"

20 
	~"πems_c⁄fig.h
"

21 
	~"≠p_c⁄fig.h
"

28 
u32
 
CMX_DIRECT_DATA
 
	gex≥˘edBuf„rShaveLe⁄
[
SMALL_DATA_LENGTH
];

29 
u32
 
CMX_DIRECT_DATA
 
	gex≥˘edBuf„rBëwìnShaves
[
SMALL_DATA_LENGTH
];

30 
u32
 
CMX_DIRECT_DATA
 
Ãt_losToLπ
;

35 
__©åibuã__
((
	$Æig√d
(8))Ë
l2cD©aP¨tôi⁄Id
;

43 
	$sh¨eSmÆlD©aWôhLπ
()

45 
	`DrvLe⁄RTSèπupSèπ
();

46 
Ãt_losToLπ
 = 
VALUE_SET_IN_LOS
;

48 
	`DrvLe⁄RTWaôExecuti⁄
();

50 
	`¥ötf
("Share data betweenÜeons\n");

51 
	`unôTe°Com∑ª
(
Ãt_losToLπ
, 
VALUE_SET_IN_LRT
);

52 
	}
}

54 
	$sh¨eSmÆlD©a
()

56 
	`Le⁄Sh¨eSmÆlD©aWôhShave
(
ex≥˘edBuf„rShaveLe⁄
,

57 
ex≥˘edBuf„rBëwìnShaves
);

58 
	`sh¨eSmÆlD©aWôhLπ
();

59 
	}
}

61 
	$sh¨eBigD©a
()

63 
	`Le⁄Sh¨eBigD©aWôhShave
();

64 
	}
}

66 
	$myrüdCaches
()

68 
	`sh¨eSmÆlD©a
();

69 
	`sh¨eBigD©a
();

70 
	}
}

72 *
	$POSIX_Inô
(*
¨gs
)

74 
idx
;

75 
	`UNUSED
(
¨gs
);

77 
	`unôTe°Inô
();

80 
°©us
 = 
	`öôClocksAndMem‹y
(&
l2cD©aP¨tôi⁄Id
);

81 i‡(
°©us
 !
OS_MYR_DRV_SUCCESS
)

83 
	`¥ötf
("Error initializing clocksánd memory.\n");

84 
	`exô
(1);

87 
idx
 = 0; idx< 
SMALL_DATA_LENGTH
; idx++)

88 
ex≥˘edBuf„rShaveLe⁄
[
idx
] = 2*idx;

90 
idx
 = 0; idx< 
SMALL_DATA_LENGTH
; idx++)

91 
ex≥˘edBuf„rBëwìnShaves
[
idx
] = idx;

93 
	`myrüdCaches
();

94 
	`unôTe°FöÆRï‹t
();

95 
	`exô
(0);

96 
	}
}

	@Progressive/ma2x5x/012_SharingData/leon/rtems_config.h

8 #i‚de‡
LEON_RTEMS_CONFIG_H_


9 
	#LEON_RTEMS_CONFIG_H_


	)

13 
	~"≠p_c⁄fig.h
"

14 
	~"ÁèlExãnsi⁄.h
"

15 
	~<OsDrvC¥.h
>

16 
	~<OsDrvShaveL2Cache.h
>

20 #i‡
deföed
(
__RTEMS__
)

22 #i‡!
deföed
 (
__CONFIG__
)

23 
	#__CONFIG__


	)

26 
	#CONFIGURE_INIT


	)

28 #i‚de‡
RTEMS_POSIX_API


29 
	#RTEMS_POSIX_API


	)

32 
	#CONFIGURE_MICROSECONDS_PER_TICK
 1000

	)

34 
	#CONFIGURE_TICKS_PER_TIMESLICE
 10

	)

36 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

38 
	#CONFIGURE_APPLICATION_NEEDS_CLOCK_DRIVER


	)

40 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

42 
	#CONFIGURE_MINIMUM_TASK_STACK_SIZE
 4096

	)

44 
	#CONFIGURE_MAXIMUM_TASKS
 4

	)

46 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 4

	)

48 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 8

	)

50 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 8

	)

52 
	#CONFIGURE_MAXIMUM_POSIX_SEMAPHORES
 8

	)

54 
	#CONFIGURE_MAXIMUM_POSIX_MESSAGE_QUEUES
 8

	)

56 
	#CONFIGURE_MAXIMUM_MESSAGE_QUEUES
 1

	)

58 
	#CONFIGURE_MAXIMUM_POSIX_TIMERS
 4

	)

60 
	#CONFIGURE_MAXIMUM_TIMERS
 4

	)

62 
	#CONFIGURE_MAXIMUM_SEMAPHORES
 16

	)

64 
	#CONFIGURE_MAXIMUM_DRIVERS
 6

	)

66 
	#CONFIGURE_MAXIMUM_DEVICES
 6

	)

69 
	#CONFIGURE_MAXIMUM_USER_EXTENSIONS
 1

	)

70 
	#CONFIGURE_INITIAL_EXTENSIONS
 { .
Áèl
 = 
F©Æ_exãnsi⁄
 }

	)

79 *
POSIX_Inô
 (*
¨gs
);

81 
	~<πems/c⁄fdefs.h
>

88 
BSP_SET_CLOCK
(
DEFAULT_OSC_CLOCK_KHZ
,

89 
DEFAULT_APP_CLOCK_KHZ
,

92 
DEFAULT_RTEMS_CSS_LOS_CLOCKS
,

94 
APP_UPA_CLOCKS
,

99 
BSP_SET_L2C_CONFIG
(1,

100 
DEFAULT_RTEMS_L2C_REPLACEMENT_POLICY
,

101 
DEFAULT_RTEMS_L2C_LOCKED_WAYS
,

102 
L2C_MODE_WRITE_THROUGH
,

	@Progressive/ma2x5x/012_SharingData/leon_rt/main.c

11 
	~<°dio.h
>

12 
	~"≠p_c⁄fig.h
"

13 
	~<mv_ty≥s.h
>

14 
	~"swcLe⁄Utûs.h
"

15 
	~"DrvLe⁄.h
"

22 
u32
 
DDR_DIRECT_DATA
 
	glosToLπ
;

32 
	$maö
()

35 
losToLπ
 !
VALUE_SET_IN_LOS
)

37 
losToLπ
 = 
VALUE_SET_IN_LRT
;

38 
	`DrvLe⁄RTSig«lSt›
();

40 
	}
}

	@Progressive/ma2x5x/012_SharingData/shaveDynApps/BigData/ManageBigData.c

11 
	~<°dio.h
>

12 
	~<swcWhoAmI.h
>

13 
	~<svuComm⁄Shave.h
>

14 
	~<swcCdma.h
>

16 
	#BIG_DATA_LENGTH
 10240

	)

25 
dmaTønß˘i⁄Li°_t
 
__©åibuã__
((
£˘i⁄
(".cmx.cdmaDes¸ùt‹s"))Ë
	gèsk1
[
CFG_NUM_SHAVES
], 
	gèsk2
[CFG_NUM_SHAVES];

26 
u8
 
	gbuf„ªdInLöe
[
BIG_DATA_LENGTH
];

34 
	$C›yBuf„r
(
u8
* 
öPœ√
, u8* 
outPœ√
, 
width
, 
height
)

36 
u8
* 
öAddªss
;

37 
u8
* 
outAddªss
;

38 
löe
;

39 
¥io
 = 1;

40 
dmaTønß˘i⁄Li°_t
 *
ªf1
, *
ªf2
;

42 
id
 = (
	`swcWhoAmI
()-
PROCESS_SHAVE0
);

44 
u32
 
å™sId
 = 
	`dmaInôReque°î
(
¥io
);

46 
löe
 = 0;Üöê< 
height
;Üine++)

48 
öAddªss
 = (
u8
*Ë((
u32
Ë
öPœ√
 + 
löe
 * 
width
);

49 
outAddªss
 = (
u8
*Ë((
u32
Ë
outPœ√
 + 
löe
 * 
width
);

51 
ªf1
 = 
	`dmaCª©eTønß˘i⁄
(
å™sId
,

52 &
èsk1
[
id
],

53 
öAddªss
,

54 &
buf„ªdInLöe
[0],

55 
width
);

57 
ªf2
 = 
	`dmaCª©eTønß˘i⁄
(
å™sId
,

58 &
èsk2
[
id
],

59 &
buf„ªdInLöe
[0],

60 
outAddªss
,

61 
width
);

62 
	`dmaLökTasks
(
ªf1
, 1, 
ªf2
);

63 
	`dmaSèπLi°Task
(
ªf1
);

64 
	`dmaWaôTask
(
ªf1
);

68 
	}
}

70 
	$E¡ry
–
uöt8_t
 * 
öput
, uöt8_à* 
ouçut
, 
uöt32_t
 
width
, uöt32_à
height
)

72 
	`C›yBuf„r
(
öput
, 
ouçut
, 
width
, 
height
);

76 
	}
}

	@Progressive/ma2x5x/012_SharingData/shaveDynApps/SmallData/ManageSmallData.c

11 
	~<°dio.h
>

12 
	~<swcWhoAmI.h
>

13 
	~<svuComm⁄Shave.h
>

19 
	ghñl›rötfSåög
[]="Hello fromÜocal CMX from shave ";

20 
	ghñloPrötfDñimôî
[50]="-------------------------------\n";

22 
	#SMALL_DATA_LENGTH
 30

	)

23 
	#TEST_VALUE
 0xCAFE;

	)

25 
	gbuf„ªdSh¨edWôhLe⁄
[
SMALL_DATA_LENGTH
];

26 vﬁ©ûê
u32
 
buf„rSh¨edBëwìnLe⁄AndShave
[
SMALL_DATA_LENGTH
];

36 
	$ã°SmÆlD©aSh¨edWôhLe⁄
()

38 
idx
 = 0; idx < 
SMALL_DATA_LENGTH
; idx++)

39 
buf„rSh¨edBëwìnLe⁄AndShave
[
idx
] *= 2;

40 
	}
}

42 
	$Te°SmÆlD©Sh¨edBëwìnShaves
(
u32
* 
buffSh¨edBëwìnShaves
, u32 
shaveNumbî
)

44 
idx
;

45 if(
shaveNumbî
 == 0)

47 
idx
 = 0; idx< 
SMALL_DATA_LENGTH
/2; idx++)

48 
buffSh¨edBëwìnShaves
[
idx
] = idx;

52 
idx
 = 
SMALL_DATA_LENGTH
/2; idx < SMALL_DATA_LENGTH; idx++){

53 
buffSh¨edBëwìnShaves
[
idx
] = idx;

56 
	}
}

57 
	$E¡ry
(
u32
* 
buffSh¨edBëwìnShaves
)

59 
shaveNumbî
;

61 
shaveNumbî
=(
	`swcWhoAmI
()-
PROCESS_SHAVE0
);

64 if(
shaveNumbî
 == 0)

65 
	`ã°SmÆlD©aSh¨edWôhLe⁄
();

67 
	`Te°SmÆlD©Sh¨edBëwìnShaves
(
buffSh¨edBëwìnShaves
, 
shaveNumbî
);

68 
	}
}

	@Sipp/Opipe/ConcurrentPipesPasstrough/leon/app_config.c

13 
	~"≠p_c⁄fig.h
"

14 
	~"DrvC¥.h
"

15 
	~"DrvDdr.h
"

16 
	~"swcLe⁄Utûs.h
"

17 
	~"DrvShaveL2Cache.h
"

18 
	~"DrvTimî.h
"

30 
tyAuxClkDividîCfg
 
	gauxClk
[] =

35 
tySocClockC⁄fig
 
	g˛ocksC⁄fig
 =

37 .
ªfClk0I≈utKhz
 = 
SYS_CLK_KHZ
 ,

38 .
	gªfClk1I≈utKhz
 = 0,

39 .
	gèrgëPŒ0FªqKhz
 = 480000,

40 .
	gèrgëPŒ1FªqKhz
 = 0,

41 .
	g˛kSrcPŒ1
 = 
CLK_SRC_REFCLK0
,

42 .
	gma°îClkDivNumî©‹
 = 1,

43 .
	gma°îClkDivDíomö©‹
 = 1,

44 .
	gcssDssClockE«bÀMask
 = 
APP_CSS_DSS_CLOCKS
,

45 .
	gmssClockE«bÀMask
 = 
APP_MSS_CLOCKS
,

46 .
	gsùpClockE«bÀMask
 = 0,

47 .
	gu∑ClockE«bÀMask
 = 
APP_UPA_CLOCKS
,

48 .
	gpAuxClkCfg
 = 
auxClk
,

57 
	$öôClocksAndMem‹y
()

59 
i
;

62 
	`DrvC¥Inô
();

65 
i
=0;i<12;i++)

66 
	`DrvC¥PowîTu∫OffI¶™d
(
POWER_ISLAND_SHAVE_0
 + 
i
);

67 
	`DrvC¥PowîTu∫OffI¶™d
(
POWER_ISLAND_USB
);

68 
	`DrvC¥PowîTu∫OffI¶™d
(
POWER_ISLAND_DSS
);

70 
	`DrvC¥SysDevi˚A˘i⁄
(
UPA_DOMAIN
, 
DEASSERT_RESET
, 
APP_UPA_CLOCKS
 );

71 
	`DrvC¥SysDevi˚A˘i⁄
(
MSS_DOMAIN
, 
DEASSERT_RESET
, 
APP_MSS_CLOCKS
 );

72 
	`DrvC¥SysDevi˚A˘i⁄
(
CSS_DOMAIN
, 
DEASSERT_RESET
, 
APP_CSS_DSS_CLOCKS
);

74 
	`DrvC¥SëupClocks
(&
˛ocksC⁄fig
);

77 
	}
}

	@Sipp/Opipe/ConcurrentPipesPasstrough/leon/app_config.h

9 #i‚de‡
_APP_CONFIG_H_


10 
	#_APP_CONFIG_H_


	)

15 
	~<mv_ty≥s.h
>

20 
	#SYS_CLK_KHZ
 12000

21 

	)

22 
	#L2CACHE_CFG
 (
SHAVE_L2CACHE_NORMAL_MODE
)

	)

25 
	#APP_CSS_DSS_CLOCKS
 ( 
DEV_CSS_LOS
 | \

	)

26 
	gDEV_CSS_LAHB_CTRL
 | \

27 
	gDEV_CSS_APB4_CTRL
 | \

28 
	gDEV_CSS_CPR
 | \

29 
	gDEV_CSS_LOS_L2C
 | \

30 
	gDEV_CSS_LOS_ICB
 | \

31 
	gDEV_CSS_LOS_DSU
 | \

32 
	gDEV_CSS_GPIO
 | \

33 
	gDEV_CSS_JTAG
 | \

34 
	gDEV_CSS_UART
 | \

35 
	gDEV_CSS_MSS_MAS
 | \

36 
	gDEV_CSS_UPA_MAS
 | \

37 
	gDEV_CSS_AON
 )

39 
	#APP_MSS_CLOCKS
 ( 
DEV_MSS_SIPP
 | \

	)

40 
	gDEV_MSS_AMC
 | \

41 
	gDEV_MSS_LRT
 | \

42 
	gDEV_MSS_LRT_DSU
 | \

43 
	gDEV_MSS_LRT_L2C
 | \

44 
	gDEV_MSS_LRT_ICB
 )

46 
	#APP_UPA_CLOCKS
 
DEV_UPA_SHAVE_L2
 | 
DEV_UPA_CDMA
 | 
DEV_UPA_CTRL


	)

57 
öôClocksAndMem‹y
();

	@Sipp/Opipe/ConcurrentPipesPasstrough/leon/main.c

10 
	~"DrvLe⁄.h
"

11 
	~"≠p_c⁄fig.h
"

12 
	~<°dio.h
>

14 
	~<DrvC¥.h
>

15 
	~"DrvDdr.h
"

21 
u32
 
Ãt_°¨t
;

31 
	$maö
()

33 
	`öôClocksAndMem‹y
();

34 
	`DrvLe⁄RTSèπup
((
u32
)&
Ãt_°¨t
);

35 
	`DrvLe⁄RTWaôExecuti⁄
();

37 
	}
}

	@Sipp/Opipe/ConcurrentPipesPasstrough/leon_rt/app_config.h

9 #i‚de‡
_APP_CONFIG_H_


10 
	#_APP_CONFIG_H


	)

14 
	~"Opùe.h
"

17 
	#IMG_W
 512

	)

18 
	#IMG_H
 128

	)

20 
	#ISPC_BAYER_BITS
 10

	)

21 
	#BAYER_PATTERN
 
RGGB


	)

27 
buûdAndCfgP1
(
Opùe
 *
p
, 
uöt16_t
 *
iBuf
, uöt16_à*
oBuf
);

28 
buûdAndCfgP2
(
Opùe
 *
p
, 
uöt16_t
 *
iBuf
, uöt16_à*
oBuf
);

29 
buûdAndCfgP3
(
Opùe
 *
p
, 
uöt8_t
 *
iBuf
, uöt8_à*
oBuf
);

30 
buûdAndCfgP4
(
Opùe
 *
p
, 
uöt8_t
 *
iBuf
, uöt8_à*
oBuf
);

31 
buûdAndCfgP5
(
Opùe
 *
p
, 
uöt8_t
 *
iBuf
, uöt8_à*
oBuf
);

	@Sipp/Opipe/ConcurrentPipesPasstrough/leon_rt/main.c

11 
	~<UnôTe°Api.h
>

12 
	~<VcsHooksApi.h
>

13 
	~"≠p_c⁄fig.h
"

14 
	~"Opùe.h
"

15 
	~"DrvLe⁄.h
"

16 
	~"DrvLe⁄L2C.h
"

26 
uöt16_t
 
	giBuf1
[
IMG_W
*
IMG_H
] 
SECTION
(".cmx.d©a"Ë
ALIGNED
(16);

27 
uöt16_t
 
	giBuf2
[
IMG_W
*
IMG_H
] 
SECTION
(".cmx.d©a"Ë
ALIGNED
(16);

29 
uöt16_t
 
	goBuf1
[
IMG_W
*
IMG_H
] 
SECTION
(".cmx.d©a"Ë
ALIGNED
(16);

30 
uöt16_t
 
	goBuf2
[
IMG_W
*
IMG_H
] 
SECTION
(".cmx.d©a"Ë
ALIGNED
(16);

32 
uöt8_t
 
	giBuf3
[
IMG_W
*
IMG_H
] 
SECTION
(".cmx.d©a"Ë
ALIGNED
(16);

33 
uöt8_t
 
	goBuf3
[
IMG_W
*
IMG_H
] 
SECTION
(".cmx.d©a"Ë
ALIGNED
(16);

35 
uöt8_t
 
	giBuf4
[
IMG_W
*
IMG_H
] 
SECTION
(".cmx.d©a"Ë
ALIGNED
(16);

36 
uöt8_t
 
	goBuf4
[
IMG_W
*
IMG_H
] 
SECTION
(".cmx.d©a"Ë
ALIGNED
(16);

38 
uöt8_t
 
	giBuf5
[
IMG_W
*
IMG_H
] 
SECTION
(".cmx.d©a"Ë
ALIGNED
(16);

39 
uöt8_t
 
	goBuf5
[
IMG_W
*
IMG_H
] 
SECTION
(".cmx.d©a"Ë
ALIGNED
(16);

41 
Opùe
 
	gp1
,
	gp2
,
	gp3
,
	gp4
,
	gp5
;

46 
buûdAndCfgP1
(
Opùe
 *
p
, 
uöt16_t
 *
iBuf
, uöt16_à*
oBuf
);

47 
buûdAndCfgP2
(
Opùe
 *
p
, 
uöt16_t
 *
iBuf
, uöt16_à*
oBuf
);

48 
buûdAndCfgP3
(
Opùe
 *
p
, 
uöt8_t
 *
iBuf
, uöt8_à*
oBuf
);

49 
buûdAndCfgP4
(
Opùe
 *
p
, 
uöt8_t
 *
iBuf
, uöt8_à*
oBuf
);

50 
buûdAndCfgP5
(
Opùe
 *
p
, 
uöt8_t
 *
iBuf
, uöt8_à*
oBuf
);

54 
	$maö
()

56 
	`DrvLL2CInôWrôeThrough
();

57 
	`swcLe⁄SëPIL
(2);

58 
	`unôTe°Inô
();

61 
	`lﬂdMemFromFûeSim∂e
("../../../../ªsour˚s/lowLight_512x128.øw", 
IMG_W
*
IMG_H
*2, 
iBuf1
);

62 
	`lﬂdMemFromFûeSim∂e
("../../../../ªsour˚s/lowLight2_512x128.øw", 
IMG_W
*
IMG_H
*2, 
iBuf2
);

63 
	`lﬂdMemFromFûeSim∂e
("../../../../ªsour˚s/lowLightU8a_512x128.øw", 
IMG_W
*
IMG_H
, 
iBuf3
);

64 
	`lﬂdMemFromFûeSim∂e
("../../../../ªsour˚s/lowLightU8b_512x128.øw", 
IMG_W
*
IMG_H
, 
iBuf4
);

65 
	`lﬂdMemFromFûeSim∂e
("../../../../ªsour˚s/lowLightU8c_512x128.øw", 
IMG_W
*
IMG_H
, 
iBuf5
);

67 
	`OpùeRe£t
();

69 
	`buûdAndCfgP1
(&
p1
, 
iBuf1
, 
oBuf1
);

70 
	`buûdAndCfgP2
(&
p2
, 
iBuf2
, 
oBuf2
);

71 
	`buûdAndCfgP3
(&
p3
, 
iBuf3
, 
oBuf3
);

72 
	`buûdAndCfgP4
(&
p4
, 
iBuf4
, 
oBuf4
);

73 
	`buûdAndCfgP5
(&
p5
, 
iBuf5
, 
oBuf5
);

75 
	`OpùeSèπ
(&
p1
);

76 
	`OpùeSèπ
(&
p2
);

77 
	`OpùeSèπ
(&
p3
);

78 
	`OpùeSèπ
(&
p4
);

79 
	`OpùeSèπ
(&
p5
);

81 
	`OpùeWaô
(&
p1
);

82 
	`OpùeWaô
(&
p2
);

83 
	`OpùeWaô
(&
p3
);

84 
	`OpùeWaô
(&
p4
);

85 
	`OpùeWaô
(&
p5
);

87 
	`unôTe°MemCom∑ª
((*)
iBuf1
, (*)
oBuf1
, (oBuf1));

88 
	`unôTe°MemCom∑ª
((*)
iBuf2
, (*)
oBuf2
, (oBuf2));

89 
	`unôTe°MemCom∑ª
((*)
iBuf3
, (*)
oBuf3
, (oBuf3));

90 
	`unôTe°MemCom∑ª
((*)
iBuf4
, (*)
oBuf4
, (oBuf4));

91 
	`unôTe°MemCom∑ª
((*)
iBuf5
, (*)
oBuf5
, (oBuf5));

93 
	`unôTe°FöÆRï‹t
();

95 
	`DrvLe⁄RTSig«lSt›
();

97 
	}
}

	@Sipp/Opipe/ConcurrentPipesPasstrough/leon_rt/opipe_app_cfg_1.c

11 
	~<UnôTe°Api.h
>

12 
	~<VcsHooksApi.h
>

13 
	~"≠p_c⁄fig.h
"

14 
	~"Opùe.h
"

19 
	#ISPC_LSC_GAIN_MAP_W
 60

	)

20 
	#ISPC_LSC_GAIN_MAP_H
 44

	)

23 
	#I_CBUFF_H
 (3*
IRQ_RATE
)

	)

24 
	#O_CBUFF_H
 (2*
IRQ_RATE
)

	)

31 
uöt16_t
 
	giCúcBuffCmx
[
I_CBUFF_H
 *
IMG_W
 * 1] 
SECTION
(".cmx.d©a"Ë
ALIGNED
(16);

32 
uöt16_t
 
	goCúcBuffCmx
[
O_CBUFF_H
 *
IMG_W
 * 1] 
SECTION
(".cmx.d©a"Ë
ALIGNED
(16);

35 
uöt16_t
 
	gi•cLscMesh
[
ISPC_LSC_GAIN_MAP_W
 * 
ISPC_LSC_GAIN_MAP_H
] 
ALIGNED
(8) =

83 
LscCfg
 
	glscCfg
;

89 
	$≠pSëP¨ams
(
Opùe
 *
p
)

92 
p
->
f‹m©
 = 
BAYER
;

93 
p
->
øwBôs
 = 
ISPC_BAYER_BITS
;

94 
p
->
bayîP©ã∫
 = 
BAYER_PATTERN
;

97 
p
->
pLscCfg
 = &
lscCfg
;

98 
lscCfg
.
lscWidth
 = 
ISPC_LSC_GAIN_MAP_W
;

99 
lscCfg
.
lscSåide
 =ÜscCfg.
lscWidth
;

100 
lscCfg
.
lscHeight
 = 
ISPC_LSC_GAIN_MAP_H
;

101 
lscCfg
.
pLscTabÀ
 = (
uöt16_t
*)
i•cLscMesh
;

102 
	}
}

105 
	$buûdAndCfgP1
(
Opùe
 *
p
, 
uöt16_t
 *
iBuf
, uöt16_à*
oBuf
)

107 
DBuf„r
 *
pIn
;

108 
DBuf„r
 *
pOut
;

111 
	`OpùeInô
(
p
);

112 
	`≠pSëP¨ams
(
p
);

115 
p
->
íMask
 = 1<<
SIPP_LSC_ID
;

116 
p
->
width
 = 
IMG_W
;

117 
p
->
height
 = 
IMG_H
;

120 
pIn
 = 
	`OpùeCfgBuff
 (
p
, 
SIPP_LSC_ID
, 
D_DMA
|
D_IN
, (
uöt32_t
)
iCúcBuffCmx
, 
I_CBUFF_H
, 
	`BPP
(2));

121 
pOut
 = 
	`OpùeCfgBuff
 (
p
, 
SIPP_LSC_ID
, 
D_DMA
|
D_OUT
,(
uöt32_t
)
oCúcBuffCmx
, 
O_CBUFF_H
, 
	`BPP
(2));

124 
pIn
->
ddr
.
ba£
 = (
uöt32_t
)
iBuf
;

125 
pOut
->
ddr
.
ba£
 = (
uöt32_t
)
oBuf
;

126 
	}
}

	@Sipp/Opipe/ConcurrentPipesPasstrough/leon_rt/opipe_app_cfg_2.c

11 
	~"≠p_c⁄fig.h
"

12 
	~"Opùe.h
"

18 
	#I_CBUFF_H
 (3*
IRQ_RATE
)

	)

19 
	#O_CBUFF_H
 (2*
IRQ_RATE
)

	)

26 
SigmaDnsCfg
 
	gsigCfg
;

27 
BlcCfg
 
	gblcCfg
;

29 
uöt16_t
 
	giCúcBuffCmx2
[
I_CBUFF_H
 *
IMG_W
 * 1] 
SECTION
(".cmx.d©a"Ë
ALIGNED
(16);

30 
uöt16_t
 
	goCúcBuffCmx2
[
O_CBUFF_H
 *
IMG_W
 * 1] 
SECTION
(".cmx.d©a"Ë
ALIGNED
(16);

36 
	$≠pSëP¨ams02
(
Opùe
 *
p
)

39 
p
->
f‹m©
 = 
BAYER
;

40 
p
->
øwBôs
 = 
ISPC_BAYER_BITS
;

41 
p
->
bayîP©ã∫
 = 
BAYER_PATTERN
;

44 
p
->
pBlcCfg
 = &
blcCfg
;

45 
blcCfg
.
r
 = 0;

46 
blcCfg
.
b
 = 0;

47 
blcCfg
.
gr
 = 0;

48 
blcCfg
.
gb
 = 0;

51 
p
->
pSigmaCfg
 = &
sigCfg
;

52 
sigCfg
.
noi£Flo‹
 = 0;

53 
sigCfg
.
thªsh1P0
 = 0;

54 
sigCfg
.
thªsh2P0
 = 0;

55 
sigCfg
.
thªsh1P1
 = 0;

56 
sigCfg
.
thªsh2P1
 = 0;

57 
sigCfg
.
thªsh1P2
 = 0;

58 
sigCfg
.
thªsh2P2
 = 0;

59 
sigCfg
.
thªsh1P3
 = 0;

60 
sigCfg
.
thªsh2P3
 = 0;

61 
	}
}

63 
	$buûdAndCfgP2
(
Opùe
 *
p
, 
uöt16_t
 *
iBuf
, uöt16_à*
oBuf
)

65 
DBuf„r
 *
pIn
;

66 
DBuf„r
 *
pOut
;

69 
	`OpùeInô
(
p
);

70 
	`≠pSëP¨ams02
(
p
);

73 
p
->
íMask
 = 1<<
SIPP_SIGMA_ID
;

74 
p
->
width
 = 
IMG_W
;

75 
p
->
height
 = 
IMG_H
;

78 
p
->
cfg
[
SIPP_SIGMA_ID
] = ( 
BAYER
 << 0) |

80 ((
ISPC_BAYER_BITS
-1) << 4);

83 
pIn
 = 
	`OpùeCfgBuff
 (
p
, 
SIPP_SIGMA_ID
, 
D_DMA
|
D_IN
, (
uöt32_t
)
iCúcBuffCmx2
, 
I_CBUFF_H
, 
	`BPP
(2));

84 
pOut
 = 
	`OpùeCfgBuff
 (
p
, 
SIPP_SIGMA_ID
, 
D_DMA
|
D_OUT
,(
uöt32_t
)
oCúcBuffCmx2
, 
O_CBUFF_H
, 
	`BPP
(2));

87 
pIn
->
ddr
.
ba£
 = (
uöt32_t
)
iBuf
;

88 
pOut
->
ddr
.
ba£
 = (
uöt32_t
)
oBuf
;

89 
	}
}

	@Sipp/Opipe/ConcurrentPipesPasstrough/leon_rt/opipe_app_cfg_3.c

11 
	~"≠p_c⁄fig.h
"

12 
	~"Opùe.h
"

17 
	#I_CBUFF_H
 (3*
IRQ_RATE
)

	)

18 
	#O_CBUFF_H
 (2*
IRQ_RATE
)

	)

24 
Sh¨≥nCfg
 
	gsh¨pCfg
;

26 
uöt8_t
 
	giCúcBuffCmx3
[
I_CBUFF_H
 *
IMG_W
] 
SECTION
(".cmx.d©a"Ë
ALIGNED
(16);

27 
uöt8_t
 
	goCúcBuffCmx3
[
O_CBUFF_H
 *
IMG_W
] 
SECTION
(".cmx.d©a"Ë
ALIGNED
(16);

33 
	$≠pSëP¨ams03
(
Opùe
 *
p
)

36 
p
->
pSh¨pCfg
 = &
sh¨pCfg
;

37 
sh¨pCfg
.
°ªngthLighãn
 = 0x0000;

38 
sh¨pCfg
.
°ªngthD¨kí
 = 0x0000;

39 
sh¨pCfg
.
möThr
 = 0x0000;

40 
sh¨pCfg
.
Æpha
 = 0x0000;

41 
sh¨pCfg
.
undîshoŸ
 = 0x0000;

42 
sh¨pCfg
.
ovîshoŸ
 = 0x4000;

44 
sh¨pCfg
.
øngeSt›0
 = sh¨pCfg.
øngeSt›1
 =

45 
sh¨pCfg
.
øngeSt›2
 = sh¨pCfg.
øngeSt›3
 = 0x0000;

47 
sh¨pCfg
.
sh¨≥nC€ffs
[0] = sharpCfg.sharpenCoeffs[1] =

48 
sh¨pCfg
.
sh¨≥nC€ffs
[2] = sharpCfg.sharpenCoeffs[3] = 0x0000;

49 
	}
}

51 
	$buûdAndCfgP3
(
Opùe
 *
p
, 
uöt8_t
 *
iBuf
, uöt8_à*
oBuf
)

53 
DBuf„r
 *
pIn
;

54 
DBuf„r
 *
pOut
;

57 
	`OpùeInô
(
p
);

58 
	`≠pSëP¨ams03
(
p
);

61 
p
->
íMask
 = 1<<
SIPP_SHARPEN_ID
;

62 
p
->
width
 = 
IMG_W
;

63 
p
->
height
 = 
IMG_H
;

64 
p
->
cfg
[
SIPP_SHARPEN_ID
] = 5

69 
pIn
 = 
	`OpùeCfgBuff
 (
p
, 
SIPP_SHARPEN_ID
, 
D_DMA
|
D_IN
, (
uöt32_t
)
iCúcBuffCmx3
, 
I_CBUFF_H
, 
	`BPP
(1));

70 
pOut
 = 
	`OpùeCfgBuff
 (
p
, 
SIPP_SHARPEN_ID
, 
D_DMA
|
D_OUT
,(
uöt32_t
)
oCúcBuffCmx3
, 
O_CBUFF_H
, 
	`BPP
(1));

73 
pIn
->
ddr
.
ba£
 = (
uöt32_t
)
iBuf
;

74 
pOut
->
ddr
.
ba£
 = (
uöt32_t
)
oBuf
;

75 
	}
}

	@Sipp/Opipe/ConcurrentPipesPasstrough/leon_rt/opipe_app_cfg_4.c

11 
	~<°rög.h
>

12 
	~"≠p_c⁄fig.h
"

13 
	~"Opùe.h
"

18 
	#I_CBUFF_H
 (3*
IRQ_RATE
)

	)

19 
	#O_CBUFF_H
 (2*
IRQ_RATE
)

	)

25 
C⁄vCfg
 
	gc⁄vCfg
;

27 
uöt8_t
 
	giCúcBuffCmx4
[
I_CBUFF_H
 *
IMG_W
] 
SECTION
(".cmx.d©a"Ë
ALIGNED
(16);

28 
uöt8_t
 
	goCúcBuffCmx4
[
O_CBUFF_H
 *
IMG_W
] 
SECTION
(".cmx.d©a"Ë
ALIGNED
(16);

31 
uöt16_t
 
	gccm5x5
[5*5] =

45 
	$≠pSëP¨ams04
(
Opùe
 *
p
)

48 
p
->
width
 = 
IMG_W
;

49 
p
->
height
 = 
IMG_H
;

52 
p
->
pC⁄vCfg
 = &
c⁄vCfg
;

53 
p
->
cfg
[
SIPP_CONV_ID
] = 5 |

56 
	`mem˝y
(
p
->
pC⁄vCfg
->
m©5x5
, 
ccm5x5
, (ccm5x5));

57 
	}
}

59 
	$buûdAndCfgP4
(
Opùe
 *
p
, 
uöt8_t
 *
iBuf
, uöt8_à*
oBuf
)

61 
DBuf„r
 *
pIn
;

62 
DBuf„r
 *
pOut
;

65 
	`OpùeInô
(
p
);

66 
	`≠pSëP¨ams04
(
p
);

69 
p
->
íMask
 = 1<<
SIPP_CONV_ID
;

72 
pIn
 = 
	`OpùeCfgBuff
 (
p
, 
SIPP_CONV_ID
, 
D_DMA
|
D_IN
, (
uöt32_t
)
iCúcBuffCmx4
, 
I_CBUFF_H
, 
	`BPP
(1));

73 
pOut
 = 
	`OpùeCfgBuff
 (
p
, 
SIPP_CONV_ID
, 
D_DMA
|
D_OUT
,(
uöt32_t
)
oCúcBuffCmx4
, 
O_CBUFF_H
, 
	`BPP
(1));

76 
pIn
->
ddr
.
ba£
 = (
uöt32_t
)
iBuf
;

77 
pOut
->
ddr
.
ba£
 = (
uöt32_t
)
oBuf
;

78 
	}
}

	@Sipp/Opipe/ConcurrentPipesPasstrough/leon_rt/opipe_app_cfg_5.c

11 
	~<°rög.h
>

12 
	~"≠p_c⁄fig.h
"

13 
	~"Opùe.h
"

18 
	#UPFIRDN_ID
 
SIPP_UPFIRDN0_ID


	)

23 
	#I_CBUFF_H
 (3*
IRQ_RATE
)

	)

24 
	#O_CBUFF_H
 (2*
IRQ_RATE
)

	)

31 
UpfúdnCfg
 
	gupdnCfg
;

32 
uöt8_t
 
	giCúcBuffCmx5
[
I_CBUFF_H
 *
IMG_W
] 
SECTION
(".cmx.d©a"Ë
ALIGNED
(16);

33 
uöt8_t
 
	goCúcBuffCmx5
[
O_CBUFF_H
 *
IMG_W
] 
SECTION
(".cmx.d©a"Ë
ALIGNED
(16);

42 
uöt8_t
 
	gh‹zC€fs
[8] 
ALIGNED
(8) = {64, 64, 64, 192, 64, 64, 64, 64};

43 
uöt8_t
 
	gvîtC€fs
[8] 
ALIGNED
(8) = {64, 64, 64, 192, 64, 64, 64, 64};

50 
	$≠pSëP¨ams05
(
Opùe
 *
p
)

53 
p
->
width
 = 
IMG_W
;

54 
p
->
height
 = 
IMG_H
;

57 if(
UPFIRDN_ID
 =
SIPP_UPFIRDN0_ID
Ë
p
->
pUpfúdn0Cfg
 = &
updnCfg
;

58 
p
->
pUpfúdn12Cfg
 = &
updnCfg
;

60 
updnCfg
.
vN
 = updnCfg.
vD
 = 1;

61 
updnCfg
.
hN
 = updnCfg.
hD
 = 1;

62 
updnCfg
.
kîSz
 = 7;

63 
updnCfg
.
vC€fs
 = 
vîtC€fs
;

64 
updnCfg
.
hC€fs
 = 
h‹zC€fs
;

65 
	}
}

67 
	$buûdAndCfgP5
(
Opùe
 *
p
, 
uöt8_t
 *
iBuf
, uöt8_à*
oBuf
)

69 
DBuf„r
 *
pIn
;

70 
DBuf„r
 *
pOut
;

73 
	`OpùeInô
(
p
);

74 
	`≠pSëP¨ams05
(
p
);

77 
p
->
íMask
 = 1<<
UPFIRDN_ID
;

80 
pIn
 = 
	`OpùeCfgBuff
 (
p
, 
UPFIRDN_ID
, 
D_DMA
|
D_IN
, (
uöt32_t
)
iCúcBuffCmx5
, 
I_CBUFF_H
, 
	`BPP
(1));

81 
pOut
 = 
	`OpùeCfgBuff
 (
p
, 
UPFIRDN_ID
, 
D_DMA
|
D_OUT
,(
uöt32_t
)
oCúcBuffCmx5
, 
O_CBUFF_H
, 
	`BPP
(1));

84 
pIn
->
ddr
.
ba£
 = (
uöt32_t
)
iBuf
;

85 
pOut
->
ddr
.
ba£
 = (
uöt32_t
)
oBuf
;

86 
	}
}

	@Sipp/Opipe/FullIsp/leon/app_config.c

13 
	~"≠p_c⁄fig.h
"

14 
	~"DrvC¥.h
"

15 
	~"DrvDdr.h
"

16 
	~"swcLe⁄Utûs.h
"

17 
	~"DrvShaveL2Cache.h
"

18 
	~"DrvTimî.h
"

30 
tyAuxClkDividîCfg
 
	gauxClk
[] =

35 
tySocClockC⁄fig
 
	g˛ocksC⁄fig
 =

37 .
ªfClk0I≈utKhz
 = 
SYS_CLK_KHZ
 ,

38 .
	gªfClk1I≈utKhz
 = 0,

39 .
	gèrgëPŒ0FªqKhz
 = 480000,

40 .
	gèrgëPŒ1FªqKhz
 = 0,

41 .
	g˛kSrcPŒ1
 = 
CLK_SRC_REFCLK0
,

42 .
	gma°îClkDivNumî©‹
 = 1,

43 .
	gma°îClkDivDíomö©‹
 = 1,

44 .
	gcssDssClockE«bÀMask
 = 
APP_CSS_DSS_CLOCKS
,

45 .
	gmssClockE«bÀMask
 = 
APP_MSS_CLOCKS
,

46 .
	gsùpClockE«bÀMask
 = 0,

47 .
	gu∑ClockE«bÀMask
 = 
APP_UPA_CLOCKS
,

48 .
	gpAuxClkCfg
 = 
auxClk
,

57 
	$öôClocksAndMem‹y
()

59 
i
;

62 
	`DrvC¥Inô
();

65 
i
=0;i<12;i++)

66 
	`DrvC¥PowîTu∫OffI¶™d
(
POWER_ISLAND_SHAVE_0
 + 
i
);

67 
	`DrvC¥PowîTu∫OffI¶™d
(
POWER_ISLAND_USB
);

68 
	`DrvC¥PowîTu∫OffI¶™d
(
POWER_ISLAND_DSS
);

70 
	`DrvC¥SysDevi˚A˘i⁄
(
UPA_DOMAIN
, 
DEASSERT_RESET
, 
APP_UPA_CLOCKS
 );

71 
	`DrvC¥SysDevi˚A˘i⁄
(
MSS_DOMAIN
, 
DEASSERT_RESET
, 
APP_MSS_CLOCKS
 );

72 
	`DrvC¥SysDevi˚A˘i⁄
(
CSS_DOMAIN
, 
DEASSERT_RESET
, 
APP_CSS_DSS_CLOCKS
);

74 
	`DrvC¥SëupClocks
(&
˛ocksC⁄fig
);

77 
	}
}

	@Sipp/Opipe/FullIsp/leon/app_config.h

9 #i‚de‡
_APP_CONFIG_H_


10 
	#_APP_CONFIG_H_


	)

15 
	~<mv_ty≥s.h
>

20 
	#SYS_CLK_KHZ
 12000

21 

	)

22 
	#L2CACHE_CFG
 (
SHAVE_L2CACHE_NORMAL_MODE
)

	)

25 
	#APP_CSS_DSS_CLOCKS
 ( 
DEV_CSS_LOS
 | \

	)

26 
	gDEV_CSS_LAHB_CTRL
 | \

27 
	gDEV_CSS_APB4_CTRL
 | \

28 
	gDEV_CSS_CPR
 | \

29 
	gDEV_CSS_LOS_L2C
 | \

30 
	gDEV_CSS_LOS_ICB
 | \

31 
	gDEV_CSS_GPIO
 | \

32 
	gDEV_CSS_JTAG
 | \

33 
	gDEV_CSS_UART
 | \

34 
	gDEV_CSS_MSS_MAS
 | \

35 
	gDEV_CSS_UPA_MAS
 | \

36 
	gDEV_CSS_AON
 )

38 
	#APP_MSS_CLOCKS
 ( 
DEV_MSS_SIPP
 | \

	)

39 
	gDEV_MSS_AMC
 | \

40 
	gDEV_MSS_LRT
 | \

41 
	gDEV_MSS_LRT_DSU
 | \

42 
	gDEV_MSS_LRT_L2C
 | \

43 
	gDEV_MSS_LRT_ICB
 )

45 
	#APP_UPA_CLOCKS
 
DEV_UPA_SHAVE_L2
 | 
DEV_UPA_CDMA
 | 
DEV_UPA_CTRL


	)

56 
öôClocksAndMem‹y
();

	@Sipp/Opipe/FullIsp/leon/main.c

10 
	~"DrvLe⁄.h
"

11 
	~"≠p_c⁄fig.h
"

12 
	~<°dio.h
>

14 
	~<DrvC¥.h
>

15 
	~"DrvDdr.h
"

21 
u32
 
Ãt_°¨t
;

31 
	$maö
()

33 
	`öôClocksAndMem‹y
();

34 
	`DrvLe⁄RTSèπup
((
u32
)&
Ãt_°¨t
);

35 
	`DrvLe⁄RTWaôExecuti⁄
();

37 
	}
}

	@Sipp/Opipe/FullIsp/leon_rt/app_config.h

9 #i‚de‡
_APP_CONFIG_H_


10 
	#_APP_CONFIG_H_


	)

	@Sipp/Opipe/FullIsp/leon_rt/isp_gamma_lut_fp16.c

11 
	~<°döt.h
>

12 
	~"i•_∑øms_wøp.h
"

21 
uöt16_t
 
	ggammaLutFp16
[512*4] 
ALIGNED
(8) = {

	@Sipp/Opipe/FullIsp/leon_rt/isp_params_pp.c

11 
	~<°döt.h
>

12 
	~"i•_∑øms_wøp.h
"

19 
uöt16_t
 
	gi•cLscMesh
[
ISPC_LSC_GAIN_MAP_W
 * 
ISPC_LSC_GAIN_MAP_H
] 
ALIGNED
(8) =

	@Sipp/Opipe/FullIsp/leon_rt/isp_params_pp.h

17 
	#ISPC_INPUT_IMAGE
 "S˚√_2800K_5L_1_10bô.øw"

	)

20 
	#ISPC_BAYER_W
 4208

	)

21 
	#ISPC_BAYER_H
 3120

	)

22 
	#ISPC_BAYER_BITS
 10

	)

24 
	#ISPC_BLACK_LEVEL_P0
 16

	)

25 
	#ISPC_BLACK_LEVEL_P1
 16

	)

26 
	#ISPC_BLACK_LEVEL_P2
 16

	)

27 
	#ISPC_BLACK_LEVEL_P3
 16

	)

29 
	#ISPC_SIGMA_NOISE_FLOOR
 51

	)

30 
	#ISPC_SIGMA_THRESH1_P0
 9

	)

31 
	#ISPC_SIGMA_THRESH2_P0
 18

	)

32 
	#ISPC_SIGMA_THRESH1_P1
 9

	)

33 
	#ISPC_SIGMA_THRESH2_P1
 18

	)

34 
	#ISPC_SIGMA_THRESH1_P2
 9

	)

35 
	#ISPC_SIGMA_THRESH2_P2
 18

	)

36 
	#ISPC_SIGMA_THRESH1_P3
 9

	)

37 
	#ISPC_SIGMA_THRESH2_P3
 18

	)

40 
	#ISPC_LSC_GAIN_MAP_W
 60

	)

41 
	#ISPC_LSC_GAIN_MAP_H
 44

	)

43 
uöt16_t
 
i•cLscMesh
[
ISPC_LSC_GAIN_MAP_W
 * 
ISPC_LSC_GAIN_MAP_H
];

46 
	#ISPC_BAD_PIX_ALPHA_G_HOT
 0x5

47 
	#ISPC_BAD_PIX_ALPHA_RB_HOT
 0x2

48 
	#ISPC_BAD_PIX_ALPHA_G_COLD
 0x5

49 
	#ISPC_BAD_PIX_ALPHA_RB_COLD
 0x5

50 
	#ISPC_BAD_PIX_NOISE_LEVEL
 0x00a3

51 

	)

53 
	#ISPC_GRGB_IMBAL_PLAT_DARK
 150

	)

54 
	#ISPC_GRGB_IMBAL_DECAY_DARK
 200

	)

55 
	#ISPC_GRGB_IMBAL_PLAT_BRIGHT
 400

	)

56 
	#ISPC_GRGB_IMBAL_DECAY_BRIGHT
 500

	)

57 
	#ISPC_GRGB_IMBAL_THRESHOLD
 16

58 

	)

59 
	#ISPC_RAW_GAIN_0
 1148

60 
	#ISPC_RAW_GAIN_1
 988

61 
	#ISPC_RAW_GAIN_2
 988

62 
	#ISPC_RAW_GAIN_3
 2273

63 

	)

64 
	#ISPC_RAW_CLAMP_0
 1023

65 
	#ISPC_RAW_CLAMP_1
 1023

66 
	#ISPC_RAW_CLAMP_2
 1023

67 
	#ISPC_RAW_CLAMP_3
 1023

68 

	)

69 
	#ISPC_RAW_OUTPUT_BITS
 10

	)

	@Sipp/Opipe/FullIsp/leon_rt/isp_params_still.c

11 
	~<°döt.h
>

12 
	~"i•_∑øms_°ûl.h
"

18 
uöt8_t
 
	gi•cLow∑ssKî√l
[9] = {

24 
uöt8_t
 
	gi•cLumaDnsLut
[32] = {

29 
uöt8_t
 
	gi•cYDnsDi°Lut
[256] 
__©åibuã__
((
Æig√d
(8))) = {

64 
uöt8_t
 
	gi•cGammaLut0_32
[9] = {

68 
uöt8_t
 
	gi•cGammaLut32_255
[9] = {

73 
	gi•cLtmCurves
[16*8] = {

93 
uöt8_t
 
	gdogC€ffs11
[6] = {

96 
uöt8_t
 
	gdogC€ffs15
[8] = {

101 
	gi•cCCM
[9] = {

107 
	gi•cCCMOff
[3] = {

111 
uöt16_t
 
	glut3d
[16*16*16*4] = {

371 
	gi•cGammaTabÀ
[8192] = {

1399 
	gi•cCSC
[9] = {

1405 
	gi•cCSCOff
[3] = {

1416 
uöt8_t
 
	ghC€fs
[] 
__©åibuã__
((
Æig√d
(8))) = {

1427 
uöt8_t
 
	gvC€fs
[] 
__©åibuã__
((
Æig√d
(8))) = {

	@Sipp/Opipe/FullIsp/leon_rt/isp_params_still.h

16 
	#ISPC_BAYER_W_STILL
 4208

	)

17 
	#ISPC_BAYER_H_STILL
 3120

	)

18 
	#ISPC_BAYER_BITS_STILL
 10

	)

21 
	#ISPC_DEMOSAIC_MIX_SLOPE
 0

	)

22 
	#ISPC_DEMOSAIC_MIX_OFFSET
 0

	)

23 
	#ISPC_DEMOSAIC_MIX_GRADIENT_MUL
 0

	)

24 
	#ISPC_DEMOSAIC_LUMA_WEIGHT_RED
 77

	)

25 
	#ISPC_DEMOSAIC_LUMA_WEIGHT_GREEN
 150

	)

26 
	#ISPC_DEMOSAIC_LUMA_WEIGHT_BLUE
 29

	)

29 
	#ISPC_CGEN_EPSILON
 1

	)

30 
	#ISPC_CGEN_KR
 106

	)

31 
	#ISPC_CGEN_KG
 191

	)

32 
	#ISPC_CGEN_KB
 149

	)

33 
	#ISPC_CGEN_LUMA_COEFF_R
 76

	)

34 
	#ISPC_CGEN_LUMA_COEFF_G
 150

	)

35 
	#ISPC_CGEN_LUMA_COEFF_B
 29

	)

36 
	#ISPC_CGEN_PFR_STRENGTH
 80

	)

37 
	#ISPC_CGEN_DESAT_OFFSET
 4

	)

38 
	#ISPC_CGEN_DESAT_SLOPE
 43

	)

41 
	#ISPC_CHROMA_MEDIAN_SIZE
 5

	)

44 
	#ISPC_CHROMA_MEDIAN_MIX_SLOPE
 10

	)

45 
	#ISPC_CHROMA_MEDIAN_MIX_OFFSET
 -26

	)

48 
uöt8_t
 
i•cLow∑ssKî√l
[9];

51 
	#ISPC_SHARP_SIGMA
 2.000000

	)

52 
	#ISPC_SHARP_STRENGTH_DARKEN
 0.800000

	)

53 
	#ISPC_SHARP_STRENGTH_LIGHTEN
 2.000000

	)

54 
	#ISPC_SHARP_ALPHA
 0.700000

	)

55 
	#ISPC_SHARP_OVERSHOOT
 1.050000

	)

56 
	#ISPC_SHARP_UNDERSHOOT
 1.000000

	)

57 
	#ISPC_SHARP_RANGE_STOP_0
 0.003922

	)

58 
	#ISPC_SHARP_RANGE_STOP_1
 0.019608

	)

59 
	#ISPC_SHARP_RANGE_STOP_2
 0.980392

	)

60 
	#ISPC_SHARP_RANGE_STOP_3
 1.000000

	)

61 
	#ISPC_SHARP_MIN_THR
 0.000000

	)

62 
	#ISPC_SHARP_COEF0
 0.070159

	)

63 
	#ISPC_SHARP_COEF1
 0.131075

	)

64 
	#ISPC_SHARP_COEF2
 0.190713

	)

65 
	#ISPC_SHARP_COEF3
 0.216106

	)

68 
	#ISPC_LUMA_DNS_STRENGTH
 150.000000

	)

69 
	#ISPC_LUMA_DNS_ALPHA
 128

70 

	)

75 
	#ISPC_LUMA_DNS_F2
 0xØØa9a4

	)

76 
	#ISPC_LUMA_DNS_BITPOS
 7

	)

78 
uöt8_t
 
i•cLumaDnsLut
[32];

80 
uöt8_t
 
i•cYDnsDi°Lut
[256];

82 
uöt8_t
 
i•cGammaLut0_32
[9];

83 
uöt8_t
 
i•cGammaLut32_255
[9];

85 
	#ISPC_LUMA_DNS_REF_SHIFT
 15

	)

87 
i•cLtmCurves
[16*8];

90 
	#ISPC_LTM_FILTER_TH1
 35

	)

93 
	#ISPC_DOG_THR
 4

	)

94 
	#ISPC_DOG_STRENGTH
 191

	)

96 
uöt8_t
 
dogC€ffs11
[6];

97 
uöt8_t
 
dogC€ffs15
[8];

100 
	#ISPC_CHROMA_DNS_TH_R
 20

	)

101 
	#ISPC_CHROMA_DNS_TH_G
 15

	)

102 
	#ISPC_CHROMA_DNS_TH_B
 38

	)

103 
	#ISPC_CHROMA_DNS_LIMIT
 100

	)

104 
	#ISPC_CHROMA_DNS_H_ENAB
 7

	)

107 
	#ISPC_GREY_DESAT_OFFSET
 -35

	)

108 
	#ISPC_GREY_DESAT_SLOPE
 7

	)

109 
	#ISPC_GREY_POINT_R
 106

	)

110 
	#ISPC_GREY_POINT_G
 137

	)

111 
	#ISPC_GREY_POINT_B
 75

	)

115 
	#ISPC_CC_KR
 618

	)

116 
	#ISPC_CC_KG
 343

	)

117 
	#ISPC_CC_KB
 440

	)

118 
i•cCCM
[9];

120 
i•cCCMOff
[3];

122 
uöt16_t
 
lut3d
[16*16*16*4];

124 
i•cGammaTabÀ
[8192];

125 
i•cCSC
[9];

127 
i•cCSCOff
[3];

131 
	#N
 1

	)

132 
	#D
 1

	)

133 
uöt8_t
 
hC€fs
[];

134 
uöt8_t
 
vC€fs
[];

	@Sipp/Opipe/FullIsp/leon_rt/isp_params_wrap.h

9 #i‚de‡
__ISP_PARAMS_WRAP_H__


10 
	#__ISP_PARAMS_WRAP_H__


	)

16 #i‡
deföed
(
__•¨c
)

17 
	#ALIGNED
(
x
Ë
	`__©åibuã__
((
	`Æig√d
(x)))

	)

19 
	#ALIGNED
(
x
)

21 

	)

24 
	#BAYER_PATTERN
 
RGGB


	)

27 
	~"i•_∑øms_µ.h
"

30 #unde‡
ISPC_BAYER_W


31 #unde‡
ISPC_BAYER_H


32 
	#ISPC_BAYER_W
 512

33 
	#ISPC_BAYER_H
 128

	)

36 
	~"i•_∑øms_°ûl.h
"

39 #unde‡
ISPC_BAYER_W_STILL


40 #unde‡
ISPC_BAYER_H_STILL


41 
	#ISPC_BAYER_W_STILL
 
ISPC_BAYER_W


	)

42 
	#ISPC_BAYER_H_STILL
 
ISPC_BAYER_H


	)

46 
uöt16_t
 
gammaLutFp16
[512*4];

	@Sipp/Opipe/FullIsp/leon_rt/main.c

11 
	~<UnôTe°Api.h
>

12 
	~<VcsHooksApi.h
>

13 
	~"mv_ty≥s.h
"

14 
	~"i•_∑øms_wøp.h
"

15 
	~"DrvLe⁄.h
"

16 
	~"DrvLe⁄L2C.h
"

17 
	~"Opùe.h
"

18 
	~"OpùeAµs.h
"

23 
	#N_RUNS
 3

	)

26 
	#INPUT_IMAGE
 "../../../../ªsour˚s/lowLight_512x128.øw"

	)

27 
	#OUTPUT_IMAGE
 "out_512x128_8bµ_P420.yuv"

	)

30 
	#IMG_W
 
ISPC_BAYER_W


	)

31 
	#IMG_H
 
ISPC_BAYER_H


	)

34 
	#O_IMG_W
 ((
IMG_W
 * 
N
 -1)/
D
 + 1)

	)

35 
	#O_IMG_H
 ((
IMG_H
 * 
N
 -1)/
D
 + 1)

	)

37 
	#DEBAYER_Y_H_V
 20

	)

38 
	#SHARP_Y_H_V
 18

	)

41 
	#INPUT_IMAGE_SIZE
 (
IMG_W
 * 
IMG_H
)

	)

44 
	#CHROMA_SIZE
 (
O_IMG_W
*
O_IMG_H
/4)

	)

45 
	#OUTPUT_IMAGE_SIZE
 ((
O_IMG_W
 * 
O_IMG_H
Ë+ (2*
CHROMA_SIZE
))

	)

52 
uöt16_t
 
	giBuf
 [
INPUT_IMAGE_SIZE
] 
SECTION
(".shv5.S.öô"Ë
ALIGNED
(8);

53 
uöt8_t
 
	gyuvBuf
 [
N_RUNS
][
OUTPUT_IMAGE_SIZE
] 
SECTION
(".shv5.S.öô"Ë
ALIGNED
(8);

56 
uöt16_t
 
	gcSigma
 [ 
IMG_W
 * 
I_CBUFF_H
 ] 
SECTION
(".shv1.S.öô"Ë
ALIGNED
(8);

57 
uöt16_t
 
	gcDbyrY
 [ 
IMG_W
 * 
DBYR_Y_H
 ] 
SECTION
(".shv2.S.öô"Ë
ALIGNED
(8);

58 
uöt16_t
 
	gcSh¨pY
 [ 
IMG_W
 * 
SHARP_Y_H
 ] 
SECTION
(".shv3.S.öô"Ë
ALIGNED
(8);

59 
uöt8_t
 
	gcLut
 [ 
IMG_W
 * 
O_CBUFF_H
 * 3] 
SECTION
(".shv4.S.öô"Ë
ALIGNED
(8);

60 
uöt8_t
 
	gcUpfúDn
 [
O_IMG_W
 * 
O_CBUFF_H
 * 3] 
SECTION
(".shv5.S.öô"Ë
ALIGNED
(8);

62 
OpùeMF
 
	g›F
;

66 
≠pSëP¨ams
(
Opùe
 *
p
);

70 
	$≠pBuûdPùe
()

73 
›F
.
ö
.
cBufSigma
.
ba£
 = (
uöt32_t
)
cSigma
; opF.ö.cBufSigma.
h
 = 
I_CBUFF_H
;

74 
›F
.
cBufDbyrY
.
ba£
 = (
uöt32_t
)
cDbyrY
; opF.cBufDbyrY.
h
 = 
DBYR_Y_H
;

75 
›F
.
cBufSh¨p
.
ba£
 = (
uöt32_t
)
cSh¨pY
; opF.cBufSh¨p.
h
 = 
SHARP_Y_H
;

76 
›F
.
cBufLut
.
ba£
 = (
uöt32_t
)
cLut
; opF.cBufLut.
h
 = 
O_CBUFF_H
;

77 
›F
.
cBufPﬁy
.
ba£
 = (
uöt32_t
)
cUpfúDn
; opF.cBufPﬁy.
h
 = 
O_CBUFF_H
;

78 
	`OpùeCª©eFuŒ
(&
›F
, 
	`BPP
(2));

79 
	}
}

81 
	$maö
()

83 
uöt32_t
 
run
;

85 
	`OpùeTe°Inô
();

86 
	`unôTe°Inô
();

89 
	`lﬂdMemFromFûeSim∂e
(
INPUT_IMAGE
, 
IMG_W
*
IMG_H
*2, 
iBuf
);

92 
	`OpùeRe£t
 ();

93 
	`≠pBuûdPùe
();

95 
run
=0;Ñu¿< 
N_RUNS
;Ñun++)

98 
	`≠pSëP¨ams
(&
›F
.
p
);

99 
	`OpùeSëSizeMF
(&
›F
, 
IMG_W
, 
IMG_H
);

100 
›F
.
pIn
->
ddr
.
ba£
 = (
uöt32_t
)
iBuf
;

101 
›F
.
pOutY
->
ddr
.
ba£
 = (
uöt32_t
)&
yuvBuf
[
run
][0];

102 
›F
.
pOutUV
->
ddr
.
ba£
 = (
uöt32_t
)&
yuvBuf
[
run
][
O_IMG_W
*
O_IMG_H
];

104 
	`OpùeSèπ
 (&
›F
.
p
);

105 
	`OpùeWaô
 (&
›F
.
p
);

110 
run
=1;Ñu¿< 
N_RUNS
;Ñun++)

112 
	`unôTe°MemCom∑ª
((*)
yuvBuf
[
run
], (*)yuvBuf[0], (yuvBuf[0]));

114 
	`unôTe°FöÆRï‹t
();

116 
	`ßveMem‹yToFûe
((
uöt32_t
)
yuvBuf
[0], (yuvBuf[0]), 
OUTPUT_IMAGE
);

118 
	`DrvLe⁄RTSig«lSt›
();

120 
	}
}

	@Sipp/Opipe/FullIsp/leon_rt/opipe_app_cfg.c

11 
	~<°rög.h
>

12 
	~<Fp16C⁄vît.h
>

13 
	~"mv_ty≥s.h
"

14 
	~"i•_∑øms_wøp.h
"

15 
	~"Opùe.h
"

16 
	~"OpùeAµs.h
"

24 
SigmaDnsCfg
 
	gsigCfg
;

25 
BlcCfg
 
	gblcCfg
;

26 
LscCfg
 
	glscCfg
;

27 
RawCfg
 
	gøwCfg
;

28 
DbyrCfg
 
	gdbyrCfg
;

29 
LtmCfg
 
	g…mCfg
;

30 
DogCfg
 
	gdogCfg
;

31 
LumaDnsCfg
 
	glumaDnsCfg
;

32 
LumaDnsRefCfg
 
	glumaDnsRefCfg
;

33 
Sh¨≥nCfg
 
	gsh¨pCfg
;

34 
ChromaGíCfg
 
	gcGíCfg
;

35 
MedünCfg
 
	gmedCfg
;

36 
ChromaDnsCfg
 
	gchrDnsCfg
;

37 
CﬁCombCfg
 
	gccCfg
;

38 
LutCfg
 
	glutCfg
;

39 
CﬁC⁄vCfg
 
	gcﬁC⁄vCfg
;

40 
UpfúdnCfg
 
	gupdnCfg0
;

41 
UpfúdnCfg
 
	gupdnCfg12
;

47 
	$≠pSëP¨ams
(
Opùe
 *
p
)

50 
p
->
øwBôs
 = 
ISPC_BAYER_BITS
;

51 
p
->
bayîP©ã∫
 = 
BAYER_PATTERN
;

55 
p
->
pBlcCfg
 = &
blcCfg
;

56 
blcCfg
.
r
 = 16;

57 
blcCfg
.
b
 = 16;

58 
blcCfg
.
gr
 = 16;

59 
blcCfg
.
gb
 = 16;

62 
p
->
pSigmaCfg
 = &
sigCfg
;

63 
sigCfg
.
noi£Flo‹
 = 
ISPC_SIGMA_NOISE_FLOOR
;

64 
sigCfg
.
thªsh1P0
 = 
ISPC_SIGMA_THRESH1_P0
;

65 
sigCfg
.
thªsh2P0
 = 
ISPC_SIGMA_THRESH2_P0
;

66 
sigCfg
.
thªsh1P1
 = 
ISPC_SIGMA_THRESH1_P1
;

67 
sigCfg
.
thªsh2P1
 = 
ISPC_SIGMA_THRESH2_P1
;

68 
sigCfg
.
thªsh1P2
 = 
ISPC_SIGMA_THRESH1_P2
;

69 
sigCfg
.
thªsh2P2
 = 
ISPC_SIGMA_THRESH2_P2
;

70 
sigCfg
.
thªsh1P3
 = 
ISPC_SIGMA_THRESH1_P3
;

71 
sigCfg
.
thªsh2P3
 = 
ISPC_SIGMA_THRESH2_P3
;

74 
p
->
pLscCfg
 = &
lscCfg
;

75 
lscCfg
.
lscWidth
 = 
ISPC_LSC_GAIN_MAP_W
;

76 
lscCfg
.
lscHeight
 = 
ISPC_LSC_GAIN_MAP_H
;

77 
lscCfg
.
lscSåide
 =ÜscCfg.
lscWidth
;

78 
lscCfg
.
pLscTabÀ
 = (
uöt16_t
*)
i•cLscMesh
;

81 
p
->
pRawCfg
 = &
øwCfg
;

82 
øwCfg
.
gaöR
 = 
ISPC_RAW_GAIN_0
;

83 
øwCfg
.
gaöGr
 = 
ISPC_RAW_GAIN_1
;

84 
øwCfg
.
gaöGb
 = 
ISPC_RAW_GAIN_2
;

85 
øwCfg
.
gaöB
 = 
ISPC_RAW_GAIN_3
;

87 
øwCfg
.
˛ampGr
 = 
ISPC_RAW_CLAMP_0
;

88 
øwCfg
.
˛ampR
 = 
ISPC_RAW_CLAMP_1
;

89 
øwCfg
.
˛ampB
 = 
ISPC_RAW_CLAMP_2
;

90 
øwCfg
.
˛ampGb
 = 
ISPC_RAW_CLAMP_3
;

92 
øwCfg
.
grgbImbÆPœtD¨k
 = 
ISPC_GRGB_IMBAL_PLAT_DARK
;

93 
øwCfg
.
grgbImbÆDeˇyD¨k
 = 
ISPC_GRGB_IMBAL_DECAY_DARK
;

94 
øwCfg
.
grgbImbÆPœtBright
 = 
ISPC_GRGB_IMBAL_PLAT_BRIGHT
;

95 
øwCfg
.
grgbImbÆDeˇyBright
 = 
ISPC_GRGB_IMBAL_DECAY_BRIGHT
;

97 
øwCfg
.
grgbImbÆThr
 = 
ISPC_GRGB_IMBAL_THRESHOLD
;

99 
øwCfg
.
dpcAÕhaHŸG
 = 
ISPC_BAD_PIX_ALPHA_G_HOT
;

100 
øwCfg
.
dpcAÕhaHŸRb
 = 
ISPC_BAD_PIX_ALPHA_RB_HOT
;

101 
øwCfg
.
dpcAÕhaCﬁdG
 = 
ISPC_BAD_PIX_ALPHA_G_COLD
;

102 
øwCfg
.
dpcAÕhaCﬁdRb
 = 
ISPC_BAD_PIX_ALPHA_RB_COLD
;

103 
øwCfg
.
dpcNoi£Levñ
 = 
ISPC_BAD_PIX_NOISE_LEVEL
;

106 
p
->
pDbyrCfg
 = &
dbyrCfg
;

107 
dbyrCfg
.
dew‹mGødõ¡Mul
 = 0;

108 
dbyrCfg
.
dew‹mSl›e
 = 
ISPC_DEMOSAIC_MIX_SLOPE
;

109 
dbyrCfg
.
dew‹mOff£t
 = 
ISPC_DEMOSAIC_MIX_OFFSET
;

110 
dbyrCfg
.
lumaWeightR
 = 
ISPC_DEMOSAIC_LUMA_WEIGHT_RED
;

111 
dbyrCfg
.
lumaWeightG
 = 
ISPC_DEMOSAIC_LUMA_WEIGHT_GREEN
;

112 
dbyrCfg
.
lumaWeightB
 = 
ISPC_DEMOSAIC_LUMA_WEIGHT_BLUE
;

115 
p
->
pLtmCfg
 = &
…mCfg
;

116 
…mCfg
.
thr
 = 
ISPC_LTM_FILTER_TH1
;

120 
curve
, 
poöt
, 
ªgoff
;

121 
ªgoff
 = 0;

122 
curve
 = 0; curve < 8; curve++)

124 
poöt
 = 0;Öoint < 16;Öoint += 2)

126 
off
 = 
curve
 + 
poöt
 * 8;

127 
…mCfg
.
curves
[
off
 ] = 
i•cLtmCurves
[off] * 0xfff;

128 
…mCfg
.
curves
[
off
+8] = 
i•cLtmCurves
[off+8] * 0xfff;

129 
ªgoff
 += 4;

135 
p
->
pDogCfg
 = &
dogCfg
;

136 
dogCfg
.
thr
 = 
ISPC_DOG_THR
;

137 
dogCfg
.
°ªngth
 = 
ISPC_DOG_STRENGTH
;

138 
	`mem˝y
(
dogCfg
.
c€ffs11
, 
dogC€ffs11
, (dogCoeffs11));

139 
	`mem˝y
(
dogCfg
.
c€ffs15
, 
dogC€ffs15
, (dogCoeffs15));

142 
p
->
pLumaDnsCfg
 = &
lumaDnsCfg
;

143 
lumaDnsCfg
.
bôpos
 = 
ISPC_LUMA_DNS_BITPOS
;

144 
lumaDnsCfg
.
Æpha
 = 
ISPC_LUMA_DNS_ALPHA
;

145 
lumaDnsCfg
.
f2
 = 
ISPC_LUMA_DNS_F2
;

146 
	`mem˝y
(
lumaDnsCfg
.
lut
, 
i•cLumaDnsLut
, (ispcLumaDnsLut));

148 
p
->
pLumaDnsRefCfg
 = &
lumaDnsRefCfg
;

149 
lumaDnsRefCfg
.
shi·
 = 
ISPC_LUMA_DNS_REF_SHIFT
;

150 
	`mem˝y
(
lumaDnsRefCfg
.
lutGamma0_32
 , 
i•cGammaLut0_32
 , (ispcGammaLut0_32 ));

151 
	`mem˝y
(
lumaDnsRefCfg
.
lutGamma32_255
, 
i•cGammaLut32_255
, (ispcGammaLut32_255));

152 
	`mem˝y
(
lumaDnsRefCfg
.
lutDi°
 , 
i•cYDnsDi°Lut
 , (ispcYDnsDistLut ));

155 
p
->
pSh¨pCfg
 = &
sh¨pCfg
;

156 
sh¨pCfg
.
°ªngthLighãn
 = 0x0000;

157 
sh¨pCfg
.
°ªngthD¨kí
 = 0x0000;

158 
sh¨pCfg
.
möThr
 = 
	`f32Tof16
(
ISPC_SHARP_MIN_THR
);

159 
sh¨pCfg
.
Æpha
 = 0x0000;

160 
sh¨pCfg
.
undîshoŸ
 = 0x0000;

161 
sh¨pCfg
.
ovîshoŸ
 = 0x4000;

163 
sh¨pCfg
.
øngeSt›0
 = sh¨pCfg.
øngeSt›1
 =

164 
sh¨pCfg
.
øngeSt›2
 = sh¨pCfg.
øngeSt›3
 = 0x0000;

166 
sh¨pCfg
.
sh¨≥nC€ffs
[0] = sharpCfg.sharpenCoeffs[1] =

167 
sh¨pCfg
.
sh¨≥nC€ffs
[2] = sharpCfg.sharpenCoeffs[3] = 0x0000;

170 
p
->
pChrGíCfg
 = &
cGíCfg
;

171 
cGíCfg
.
deßtOff£t
 = 
ISPC_CGEN_DESAT_OFFSET
;

172 
cGíCfg
.
deßtSl›e
 = 
ISPC_CGEN_DESAT_SLOPE
;

173 
cGíCfg
.
p‰Såígth
 = 
ISPC_CGEN_PFR_STRENGTH
;

175 
cGíCfg
.
lumaC€ffR
 = 
ISPC_CGEN_LUMA_COEFF_R
;

176 
cGíCfg
.
lumaC€ffG
 = 
ISPC_CGEN_LUMA_COEFF_G
;

177 
cGíCfg
.
lumaC€ffB
 = 
ISPC_CGEN_LUMA_COEFF_B
;

179 
cGíCfg
.
ïsû⁄
 = 
ISPC_CGEN_EPSILON
;

180 
cGíCfg
.
kr
 = 
ISPC_CGEN_KR
;

181 
cGíCfg
.
kg
 = 
ISPC_CGEN_KG
;

182 
cGíCfg
.
kb
 = 
ISPC_CGEN_KB
;

185 
p
->
pMedCfg
 = &
medCfg
;

186 
medCfg
.
kî√lSize
 = 
ISPC_CHROMA_MEDIAN_SIZE
;

187 
medCfg
.
¶›e
 = 
ISPC_CHROMA_MEDIAN_MIX_SLOPE
;

188 
medCfg
.
off£t
 = 
ISPC_CHROMA_MEDIAN_MIX_OFFSET
;

191 
p
->
pChromaDnsCfg
 = &
chrDnsCfg
;

193 
chrDnsCfg
.
hE«b
 = 
ISPC_CHROMA_DNS_H_ENAB
;

194 
chrDnsCfg
.
limô
 = 
ISPC_CHROMA_DNS_LIMIT
;

195 
chrDnsCfg
.
gªyDeßtOff£t
 = 
ISPC_GREY_DESAT_OFFSET
;

196 
chrDnsCfg
.
gªyDeßtSl›e
 = 
ISPC_GREY_DESAT_SLOPE
;

198 
chrDnsCfg
.
th_r
 = 
ISPC_CHROMA_DNS_TH_R
;

199 
chrDnsCfg
.
th_g
 = 
ISPC_CHROMA_DNS_TH_G
;

200 
chrDnsCfg
.
th_b
 = 
ISPC_CHROMA_DNS_TH_B
;

202 
chrDnsCfg
.
gªyCb
 = 
ISPC_GREY_POINT_B
;

203 
chrDnsCfg
.
gªyCg
 = 
ISPC_GREY_POINT_G
;

204 
chrDnsCfg
.
gªyCr
 = 
ISPC_GREY_POINT_R
;

206 
chrDnsCfg
.
c⁄vC€ffC‹√r
 = 
i•cLow∑ssKî√l
[0];

207 
chrDnsCfg
.
c⁄vC€ffEdge
 = 
i•cLow∑ssKî√l
[1];

208 
chrDnsCfg
.
c⁄vC€ffCíãr
 = 
i•cLow∑ssKî√l
[4];

211 
p
->
pCﬁCombCfg
 = &
ccCfg
;

212 
ccCfg
.
kr
 = 
ISPC_CC_KR
;

213 
ccCfg
.
kg
 = 
ISPC_CC_KG
;

214 
ccCfg
.
kb
 = 
ISPC_CC_KB
;

215 
	`mem˝y
(
ccCfg
.
ccm
 , 
i•cCCM
 , (ispcCCM ));

216 
	`mem˝y
(
ccCfg
.
ccmOff
, 
i•cCCMOff
, (ispcCCMOff));

219 
p
->
pLutCfg
 = &
lutCfg
;

220 
lutCfg
.
èbÀ
 = 
gammaLutFp16
;

221 
lutCfg
.
size
 = 512;

222 
lutCfg
.
rgnSize
[0] = 0x55555555;

223 
lutCfg
.
rgnSize
[1] = 0x55555555;

224 
p
->
pCﬁC⁄vCfg
 = &
cﬁC⁄vCfg
;

225 
	`mem˝y
(
cﬁC⁄vCfg
.
m©
 , 
i•cCSC
 , (ispcCSC ));

226 
	`mem˝y
(
cﬁC⁄vCfg
.
off£t
, 
i•cCSCOff
, (ispcCSCOff));

229 
p
->
pUpfúdn0Cfg
 = &
updnCfg0
;

230 
updnCfg0
.
vN
 = 
N
; updnCfg0.
vD
 = 
D
;

231 
updnCfg0
.
hN
 = 
N
; updnCfg0.
hD
 = 
D
;

232 
updnCfg0
.
kîSz
 = 7;

233 
updnCfg0
.
vC€fs
 = vCoefs;

234 
updnCfg0
.
hC€fs
 = hCoefs;

237 
p
->
pUpfúdn12Cfg
 = &
updnCfg12
;

238 
updnCfg12
.
vN
 = 
N
; updnCfg12.
vD
 = (
D
<<1);

239 
updnCfg12
.
hN
 = 
N
; updnCfg12.
hD
 = (
D
<<1);

240 
updnCfg12
.
kîSz
 = 7;

241 
updnCfg12
.
vC€fs
 = vCoefs;

242 
updnCfg12
.
hC€fs
 = hCoefs;

245 
	`OpùeDeÁu…Cfg
(
p
, 
SIPP_SIGMA_ID
 );

246 
	`OpùeDeÁu…Cfg
(
p
, 
SIPP_RAW_ID
 );

247 
	`OpùeDeÁu…Cfg
(
p
, 
SIPP_DBYR_ID
 );

248 
	`OpùeDeÁu…Cfg
(
p
, 
SIPP_DOGL_ID
 );

249 
	`OpùeDeÁu…Cfg
(
p
, 
SIPP_SHARPEN_ID
);

250 
	`OpùeDeÁu…Cfg
(
p
, 
SIPP_CGEN_ID
 );

251 
	`OpùeDeÁu…Cfg
(
p
, 
SIPP_MED_ID
 );

252 
	`OpùeDeÁu…Cfg
(
p
, 
SIPP_CHROMA_ID
 );

253 
	`OpùeDeÁu…Cfg
(
p
, 
SIPP_CC_ID
 );

254 
	`OpùeDeÁu…Cfg
(
p
, 
SIPP_LUT_ID
 );

255 
	}
}

	@Sipp/Opipe/MipiRxPassthrough/leon/app_config.c

13 
	~"≠p_c⁄fig.h
"

14 
	~"DrvC¥.h
"

15 
	~"DrvDdr.h
"

16 
	~"swcLe⁄Utûs.h
"

17 
	~"DrvShaveL2Cache.h
"

18 
	~"DrvTimî.h
"

30 
tyAuxClkDividîCfg
 
	gauxClk
[] =

33 .
auxClockE«bÀMask
 = 
AUX_CLK_MASK_MEDIA
,

34 .
	gauxClockSour˚
 = 
CLK_SRC_SYS_CLK_DIV2
 ,

35 .
	gauxClockDivNumî©‹
 = 1,

36 .
	gauxClockDivDíomö©‹
 = 1,

41 
tySocClockC⁄fig
 
	g˛ocksC⁄fig
 =

43 .
ªfClk0I≈utKhz
 = 
SYS_CLK_KHZ
 ,

44 .
	gªfClk1I≈utKhz
 = 0,

45 .
	gèrgëPŒ0FªqKhz
 = 480000,

46 .
	gèrgëPŒ1FªqKhz
 = 0,

47 .
	g˛kSrcPŒ1
 = 
CLK_SRC_REFCLK0
,

48 .
	gma°îClkDivNumî©‹
 = 1,

49 .
	gma°îClkDivDíomö©‹
 = 1,

50 .
	gcssDssClockE«bÀMask
 = 
APP_CSS_DSS_CLOCKS
,

51 .
	gmssClockE«bÀMask
 = 
APP_MSS_CLOCKS
,

52 .
	gsùpClockE«bÀMask
 = 
DEV_SIPP_MIPI_TX0
,

53 .
	gu∑ClockE«bÀMask
 = 
APP_UPA_CLOCKS
,

54 .
	gpAuxClkCfg
 = 
auxClk
,

63 
	$öôClocksAndMem‹y
()

65 
i
;

68 
	`DrvC¥Inô
();

71 
i
=0;i<12;i++)

72 
	`DrvC¥PowîTu∫OffI¶™d
(
POWER_ISLAND_SHAVE_0
 + 
i
);

73 
	`DrvC¥PowîTu∫OffI¶™d
(
POWER_ISLAND_USB
);

74 
	`DrvC¥PowîTu∫OffI¶™d
(
POWER_ISLAND_DSS
);

76 
	`DrvC¥SysDevi˚A˘i⁄
(
UPA_DOMAIN
, 
DEASSERT_RESET
, 
APP_UPA_CLOCKS
 );

77 
	`DrvC¥SysDevi˚A˘i⁄
(
MSS_DOMAIN
, 
DEASSERT_RESET
, 
APP_MSS_CLOCKS
 );

78 
	`DrvC¥SysDevi˚A˘i⁄
(
CSS_DOMAIN
, 
DEASSERT_RESET
, 
APP_CSS_DSS_CLOCKS
);

80 
	`DrvC¥SëupClocks
(&
˛ocksC⁄fig
);

83 
	}
}

	@Sipp/Opipe/MipiRxPassthrough/leon/app_config.h

9 #i‚de‡
_APP_CONFIG_H_


10 
	#_APP_CONFIG_H_


	)

15 
	~<mv_ty≥s.h
>

20 
	#SYS_CLK_KHZ
 12000

21 

	)

22 
	#L2CACHE_CFG
 (
SHAVE_L2CACHE_NORMAL_MODE
)

	)

25 
	#APP_CSS_DSS_CLOCKS
 ( 
DEV_CSS_LOS
 | \

	)

26 
	gDEV_CSS_LAHB_CTRL
 | \

27 
	gDEV_CSS_APB4_CTRL
 | \

28 
	gDEV_CSS_CPR
 | \

29 
	gDEV_CSS_LOS_DSU
 | \

30 
	gDEV_CSS_LOS_L2C
 | \

31 
	gDEV_CSS_LOS_ICB
 | \

32 
	gDEV_CSS_GPIO
 | \

33 
	gDEV_CSS_JTAG
 | \

34 
	gDEV_CSS_UART
 | \

35 
	gDEV_CSS_MSS_MAS
 | \

36 
	gDEV_CSS_UPA_MAS
 | \

37 
	gDEV_CSS_AON
 )

39 
	#APP_MSS_CLOCKS
 ( 
DEV_MSS_SIPP
 | \

	)

40 
	gDEV_MSS_AMC
 | \

41 
	gDEV_MSS_LRT
 | \

42 
	gDEV_MSS_LRT_DSU
 | \

43 
	gDEV_MSS_LRT_L2C
 | \

44 
	gDEV_MSS_LRT_ICB
 )

46 
	#APP_UPA_CLOCKS
 
DEV_UPA_SHAVE_L2
 | 
DEV_UPA_CDMA
 | 
DEV_UPA_CTRL


	)

57 
öôClocksAndMem‹y
();

	@Sipp/Opipe/MipiRxPassthrough/leon/main.c

10 
	~"DrvLe⁄.h
"

11 
	~"≠p_c⁄fig.h
"

12 
	~<°dio.h
>

14 
	~<DrvC¥.h
>

15 
	~"DrvDdr.h
"

21 
u32
 
Ãt_°¨t
;

31 
	$maö
()

33 
	`öôClocksAndMem‹y
();

34 
	`DrvLe⁄RTSèπup
((
u32
)&
Ãt_°¨t
);

35 
	`DrvLe⁄RTWaôExecuti⁄
();

37 
	}
}

	@Sipp/Opipe/MipiRxPassthrough/leon_rt/app_config.h

8 #i‚de‡
_PARAMS_H_


9 
	#_PARAMS_H_


	)

12 
	~"Opùe.h
"

15 
	#IMG_W
 512

	)

16 
	#IMG_H
 128

	)

18 
	#ISPC_BAYER_BITS
 10

	)

19 
	#BAYER_PATTERN
 
RGGB


	)

25 
≠pSëP¨ams
(
Opùe
 *
p
);

	@Sipp/Opipe/MipiRxPassthrough/leon_rt/main.c

11 
	~<UnôTe°Api.h
>

12 
	~<VcsHooksApi.h
>

13 
	~"Opùe.h
"

14 
	~"OpùeAµs.h
"

15 
	~"≠p_c⁄fig.h
"

16 
	~"DrvLe⁄.h
"

17 
	~"DrvLe⁄L2C.h
"

21 
	#N_FRAMES
 2

	)

24 
	#I_CBUFF_H
 (3*
IRQ_RATE
)

	)

25 
	#O_CBUFF_H
 (2*
IRQ_RATE
)

	)

33 
uöt16_t
 
	giBuf
 [
IMG_W
 * 
IMG_H
] 
SECTION
(".cmx.d©a"Ë
ALIGNED
(16);

34 
uöt16_t
 
	goBuf
[
N_FRAMES
][
IMG_W
 * 
IMG_H
] 
SECTION
(".cmx.d©a"Ë
ALIGNED
(16);

35 
uöt16_t
 
	goCúcBuffCmx
[
O_CBUFF_H
 * 
IMG_W
] 
SECTION
(".cmx.d©a"Ë
ALIGNED
(16);

37 vﬁ©ûê
uöt32_t
 
	g‰ameNo
;

38 
OpùeRx
 
	gpRx
;

39 
oMùiTxLo›backP¨am
 
	gmùiTxCfg
;

46 
	$EofCÆlback
(
Opùe
 *
p
)

48 
	`UNUSED
(
p
);

50 
	`¥ötI¡
(
‰ameNo
);

52 
‰ameNo
++;

53 if(
‰ameNo
 < 
N_FRAMES
)

55 
pRx
.
pOut
->
ddr
.
ba£
 = (
uöt32_t
)
oBuf
[
‰ameNo
];

56 
	`OpùeSèπ
(&
pRx
.
p
);

57 
	`oSèπMùiTxLo›back
(
SIPP_MIPI_TX0_ID
);

59 
	}
}

62 
	$maö
()

64 
	`DrvLL2CInôWrôeThrough
();

65 
	`swcLe⁄SëPIL
(2);

66 
	`unôTe°Inô
();

68 
	`lﬂdMemFromFûeSim∂e
("../../../../ªsour˚s/lowLight_512x128.øw", 
IMG_W
 * 
IMG_H
 * 2, 
iBuf
);

70 
	`OpùeRe£t
();

72 
	`OpùeCª©eRx
(&
pRx
, 
IMG_W
, 
IMG_H
,

73 
SIPP_MIPI_RX1_ID
, 
	`BPP
(2),

74 (
uöt32_t
)
oCúcBuffCmx
, 
O_CBUFF_H
);

75 
pRx
.
p
.
cbEndOfFøme
 = 
EofCÆlback
;

77 
	`≠pSëP¨ams
(&
pRx
.
p
);

78 
pRx
.
pOut
->
ddr
.
ba£
 = (
uöt32_t
)
oBuf
[0];

79 
	`OpùeSèπ
 (&
pRx
.
p
);

82 
	`deÁu…MùiTxLo›P¨ams
(&
mùiTxCfg
, 
SIPP_MIPI_TX0_ID
, (
uöt32_t
)
iBuf
, 
	`BPP
(2), 
IMG_W
, 
IMG_H
);

83 
	`oCfgMùiTxLo›back
 (&
mùiTxCfg
);

85 
	`oSèπMùiTxLo›back
 (
SIPP_MIPI_TX0_ID
);

88 
‰ameNo
 < 
N_FRAMES
){

89 
NOP
;NOP;NOP;NOP;NOP;NOP;NOP;

90 
NOP
;NOP;NOP;NOP;NOP;NOP;NOP;

91 
NOP
;NOP;NOP;NOP;NOP;NOP;NOP;

95 
‰ameNo
=0; fømeNÿ< 
N_FRAMES
; frameNo++)

97 
	`ßveMem‹yToFûe
((
uöt32_t
)
oBuf
[
‰ameNo
], (oBuf), "out.raw");

98 
	`unôTe°MemCom∑ª
((*Ë
oBuf
[
‰ameNo
], (*)
iBuf
, (iBuf));

100 
	`unôTe°FöÆRï‹t
();

102 
	`DrvLe⁄RTSig«lSt›
();

105 
	}
}

	@Sipp/Opipe/MipiRxPassthrough/leon_rt/opipe_app_cfg.c

11 
	~"≠p_c⁄fig.h
"

19 
MùiRxCfg
 
	gmùiCfg
;

25 
	$≠pSëP¨ams
(
Opùe
 *
p
)

28 
p
->
øwBôs
 = 
ISPC_BAYER_BITS
;

29 
p
->
bayîP©ã∫
 = 
BAYER_PATTERN
;

32 
p
->
pMùiRxCfg
[1] = &
mùiCfg
;

33 
mùiCfg
.
cfg
 = 1;

34 
mùiCfg
.
xSèπWidth
 [0] = (
p
->
width
 <<16) | 0x0000;

35 
mùiCfg
.
ySèπHeight
[0] = (
p
->
height
<<16) | 0x0000;

36 
mùiCfg
.
£l01
 = 0xF<<8;

37 
mùiCfg
.
mask
 [0] = (1<<
ISPC_BAYER_BITS
)-1;

38 
	}
}

	@Sipp/Opipe/SimplePassthrough/leon/app_config.c

13 
	~"≠p_c⁄fig.h
"

14 
	~"DrvC¥.h
"

15 
	~"DrvDdr.h
"

16 
	~"swcLe⁄Utûs.h
"

17 
	~"DrvShaveL2Cache.h
"

18 
	~"DrvTimî.h
"

30 
tyAuxClkDividîCfg
 
	gauxClk
[] =

35 
tySocClockC⁄fig
 
	g˛ocksC⁄fig
 =

37 .
ªfClk0I≈utKhz
 = 
SYS_CLK_KHZ
 ,

38 .
	gªfClk1I≈utKhz
 = 0,

39 .
	gèrgëPŒ0FªqKhz
 = 480000,

40 .
	gèrgëPŒ1FªqKhz
 = 0,

41 .
	g˛kSrcPŒ1
 = 
CLK_SRC_REFCLK0
,

42 .
	gma°îClkDivNumî©‹
 = 1,

43 .
	gma°îClkDivDíomö©‹
 = 1,

44 .
	gcssDssClockE«bÀMask
 = 
APP_CSS_DSS_CLOCKS
,

45 .
	gmssClockE«bÀMask
 = 
APP_MSS_CLOCKS
,

46 .
	gsùpClockE«bÀMask
 = 0,

47 .
	gu∑ClockE«bÀMask
 = 
APP_UPA_CLOCKS
,

48 .
	gpAuxClkCfg
 = 
auxClk
,

57 
	$öôClocksAndMem‹y
()

59 
i
;

62 
	`DrvC¥Inô
();

65 
i
=0;i<12;i++)

66 
	`DrvC¥PowîTu∫OffI¶™d
(
POWER_ISLAND_SHAVE_0
 + 
i
);

67 
	`DrvC¥PowîTu∫OffI¶™d
(
POWER_ISLAND_USB
);

68 
	`DrvC¥PowîTu∫OffI¶™d
(
POWER_ISLAND_DSS
);

70 
	`DrvC¥SysDevi˚A˘i⁄
(
UPA_DOMAIN
, 
DEASSERT_RESET
, 
APP_UPA_CLOCKS
 );

71 
	`DrvC¥SysDevi˚A˘i⁄
(
MSS_DOMAIN
, 
DEASSERT_RESET
, 
APP_MSS_CLOCKS
 );

72 
	`DrvC¥SysDevi˚A˘i⁄
(
CSS_DOMAIN
, 
DEASSERT_RESET
, 
APP_CSS_DSS_CLOCKS
);

74 
	`DrvC¥SëupClocks
(&
˛ocksC⁄fig
);

77 
	}
}

	@Sipp/Opipe/SimplePassthrough/leon/app_config.h

9 #i‚de‡
_APP_CONFIG_H_


10 
	#_APP_CONFIG_H_


	)

15 
	~<mv_ty≥s.h
>

20 
	#SYS_CLK_KHZ
 12000

21 

	)

22 
	#L2CACHE_CFG
 (
SHAVE_L2CACHE_NORMAL_MODE
)

	)

25 
	#APP_CSS_DSS_CLOCKS
 ( 
DEV_CSS_LOS
 | \

	)

26 - 
	gDEV_CSS_LAHB_CTRL
 | \

27 - 
	gDEV_CSS_APB4_CTRL
 | \

28 - 
	gDEV_CSS_CPR
 | \

29 - 
	gDEV_CSS_LOS_L2C
 | \

30 - 
	gDEV_CSS_LOS_ICB
 | \

31 - 
	gDEV_CSS_GPIO
 | \

32 - 
	gDEV_CSS_JTAG
 | \

33 - 
	gDEV_CSS_UART
 | \

34 - 
	gDEV_CSS_MSS_MAS
 | \

35 - 
	gDEV_CSS_UPA_MAS
 | \

36 - 
	gDEV_CSS_AON
 )

38 
	#APP_MSS_CLOCKS
 ( 
DEV_MSS_SIPP
 | \

	)

39 
	gDEV_MSS_AMC
 | \

40 
	gDEV_MSS_LRT
 | \

41 
	gDEV_MSS_LRT_DSU
 | \

42 
	gDEV_MSS_LRT_L2C
 | \

43 
	gDEV_MSS_LRT_ICB
 )

46 
	#APP_UPA_CLOCKS
 
DEV_UPA_SHAVE_L2
 | 
DEV_UPA_CDMA
 | 
DEV_UPA_CTRL


	)

57 
öôClocksAndMem‹y
();

	@Sipp/Opipe/SimplePassthrough/leon/main.c

10 
	~"DrvLe⁄.h
"

11 
	~"≠p_c⁄fig.h
"

12 
	~<°dio.h
>

14 
	~<DrvC¥.h
>

15 
	~"DrvDdr.h
"

21 
u32
 
Ãt_°¨t
;

31 
	$maö
()

33 
	`öôClocksAndMem‹y
();

34 
	`DrvLe⁄RTSèπup
((
u32
)&
Ãt_°¨t
);

35 
	`DrvLe⁄RTWaôExecuti⁄
();

37 
	}
}

	@Sipp/Opipe/SimplePassthrough/leon_rt/app_config.h

9 #i‚de‡
_APP_CONFIG_H_


10 
	#_APP_CONFIG_H


	)

16 
	#IMG_W
 512

	)

17 
	#IMG_H
 128

	)

18 
	#ISPC_BAYER_BITS
 10

	)

19 
	#BAYER_PATTERN
 
RGGB


	)

26 
buûdAndCfg
(
Opùe
 *
p
, 
uöt16_t
 *
iBuf
, uöt16_à*
oBuf
);

	@Sipp/Opipe/SimplePassthrough/leon_rt/main.c

10 
	~<UnôTe°Api.h
>

11 
	~<VcsHooksApi.h
>

12 
	~"Opùe.h
"

13 
	~"≠p_c⁄fig.h
"

14 
	~"DrvLe⁄.h
"

15 
	~"DrvLe⁄L2C.h
"

25 
uöt16_t
 
	giBuf
 [
IMG_W
*
IMG_H
] 
SECTION
(".cmx.d©a"Ë
ALIGNED
(16);

26 
uöt16_t
 
	goBuf
[
IMG_W
*
IMG_H
] 
SECTION
(".cmx.d©a"Ë
ALIGNED
(16);

28 
Opùe
 
	gp2
;

32 
buûdAndCfg
(
Opùe
 *
p
, 
uöt16_t
 *
iBuf
, uöt16_à*
oBuf
);

38 
	$maö
()

40 
	`DrvLL2CInôWrôeThrough
();

41 
	`swcLe⁄SëPIL
(2);

42 
	`unôTe°Inô
();

44 
	`lﬂdMemFromFûeSim∂e
("../../../../ªsour˚s/lowLight_512x128.øw", 
IMG_W
*
IMG_H
*2, 
iBuf
);

45 
	`OpùeRe£t
();

47 
	`buûdAndCfg
(&
p2
, 
iBuf
, 
oBuf
);

48 
	`OpùeSèπ
(&
p2
);

49 
	`OpùeWaô
(&
p2
);

51 
	`unôTe°MemCom∑ª
((*)
iBuf
, (*)
oBuf
, (oBuf));

52 
	`unôTe°FöÆRï‹t
();

54 
	`DrvLe⁄RTSig«lSt›
();

56 
	}
}

	@Sipp/Opipe/SimplePassthrough/leon_rt/opipe_app_cfg.c

10 
	~<Fp16C⁄vît.h
>

11 
	~"Opùe.h
"

12 
	~"≠p_c⁄fig.h
"

17 
	#I_CBUFF_H
 (3*
IRQ_RATE
)

	)

18 
	#O_CBUFF_H
 (2*
IRQ_RATE
)

	)

24 
SigmaDnsCfg
 
	gsigCfg
;

25 
BlcCfg
 
	gblcCfg
;

27 
uöt16_t
 
	giCúcBuffCmx
[
I_CBUFF_H
 *
IMG_W
 * 1] 
SECTION
(".cmx.d©a"Ë
ALIGNED
(16);

28 
uöt16_t
 
	goCúcBuffCmx
[
O_CBUFF_H
 *
IMG_W
 * 1] 
SECTION
(".cmx.d©a"Ë
ALIGNED
(16);

34 
	$≠pSëP¨ams
(
Opùe
 *
p
)

37 
p
->
f‹m©
 = 
BAYER
;

38 
p
->
øwBôs
 = 
ISPC_BAYER_BITS
;

39 
p
->
bayîP©ã∫
 = 
BAYER_PATTERN
;

42 
p
->
pBlcCfg
 = &
blcCfg
;

43 
blcCfg
.
r
 = 0;

44 
blcCfg
.
b
 = 0;

45 
blcCfg
.
gr
 = 0;

46 
blcCfg
.
gb
 = 0;

49 
p
->
pSigmaCfg
 = &
sigCfg
;

50 
sigCfg
.
noi£Flo‹
 = 0;

51 
sigCfg
.
thªsh1P0
 = 0;

52 
sigCfg
.
thªsh2P0
 = 0;

53 
sigCfg
.
thªsh1P1
 = 0;

54 
sigCfg
.
thªsh2P1
 = 0;

55 
sigCfg
.
thªsh1P2
 = 0;

56 
sigCfg
.
thªsh2P2
 = 0;

57 
sigCfg
.
thªsh1P3
 = 0;

58 
sigCfg
.
thªsh2P3
 = 0;

59 
	}
}

61 
	$buûdAndCfg
(
Opùe
 *
p
, 
uöt16_t
 *
iBuf
, uöt16_à*
oBuf
)

63 
DBuf„r
 *
pIn
;

64 
DBuf„r
 *
pOut
;

67 
	`OpùeInô
(
p
);

68 
	`≠pSëP¨ams
(
p
);

71 
p
->
íMask
 = 1<<
SIPP_SIGMA_ID
;

72 
p
->
width
 = 
IMG_W
;

73 
p
->
height
 = 
IMG_H
;

76 
p
->
cfg
[
SIPP_SIGMA_ID
] = ( 
BAYER
 << 0) |

78 ((
ISPC_BAYER_BITS
-1) << 4);

81 
pIn
 = 
	`OpùeCfgBuff
 (
p
, 
SIPP_SIGMA_ID
, 
D_DMA
|
D_IN
, (
uöt32_t
)
iCúcBuffCmx
, 
I_CBUFF_H
, 
	`BPP
(2));

82 
pOut
 = 
	`OpùeCfgBuff
 (
p
, 
SIPP_SIGMA_ID
, 
D_DMA
|
D_OUT
,(
uöt32_t
)
oCúcBuffCmx
, 
O_CBUFF_H
, 
	`BPP
(2));

85 
pIn
->
ddr
.
ba£
 = (
uöt32_t
)
iBuf
;

86 
pOut
->
ddr
.
ba£
 = (
uöt32_t
)
oBuf
;

87 
	}
}

	@Sipp/Opipe/UPFIRDN_Filter/leon/app_config.c

13 
	~"≠p_c⁄fig.h
"

14 
	~"DrvC¥.h
"

15 
	~"DrvDdr.h
"

16 
	~"swcLe⁄Utûs.h
"

17 
	~"DrvShaveL2Cache.h
"

18 
	~"DrvTimî.h
"

30 
tyAuxClkDividîCfg
 
	gauxClk
[] =

35 
tySocClockC⁄fig
 
	g˛ocksC⁄fig
 =

37 .
ªfClk0I≈utKhz
 = 
SYS_CLK_KHZ
 ,

38 .
	gªfClk1I≈utKhz
 = 0,

39 .
	gèrgëPŒ0FªqKhz
 = 480000,

40 .
	gèrgëPŒ1FªqKhz
 = 0,

41 .
	g˛kSrcPŒ1
 = 
CLK_SRC_REFCLK0
,

42 .
	gma°îClkDivNumî©‹
 = 1,

43 .
	gma°îClkDivDíomö©‹
 = 1,

44 .
	gcssDssClockE«bÀMask
 = 
APP_CSS_DSS_CLOCKS
,

45 .
	gmssClockE«bÀMask
 = 
APP_MSS_CLOCKS
,

46 .
	gsùpClockE«bÀMask
 = 0,

47 .
	gu∑ClockE«bÀMask
 = 
APP_UPA_CLOCKS
,

48 .
	gpAuxClkCfg
 = 
auxClk
,

57 
	$öôClocksAndMem‹y
()

59 
i
;

62 
	`DrvC¥Inô
();

65 
i
=0;i<12;i++)

66 
	`DrvC¥PowîTu∫OffI¶™d
(
POWER_ISLAND_SHAVE_0
 + 
i
);

67 
	`DrvC¥PowîTu∫OffI¶™d
(
POWER_ISLAND_USB
);

68 
	`DrvC¥PowîTu∫OffI¶™d
(
POWER_ISLAND_DSS
);

70 
	`DrvC¥SysDevi˚A˘i⁄
(
UPA_DOMAIN
, 
DEASSERT_RESET
, 
APP_UPA_CLOCKS
 );

71 
	`DrvC¥SysDevi˚A˘i⁄
(
MSS_DOMAIN
, 
DEASSERT_RESET
, 
APP_MSS_CLOCKS
 );

72 
	`DrvC¥SysDevi˚A˘i⁄
(
CSS_DOMAIN
, 
DEASSERT_RESET
, 
APP_CSS_DSS_CLOCKS
);

74 
	`DrvC¥SëupClocks
(&
˛ocksC⁄fig
);

77 
	}
}

	@Sipp/Opipe/UPFIRDN_Filter/leon/app_config.h

9 #i‚de‡
_APP_CONFIG_H_


10 
	#_APP_CONFIG_H_


	)

15 
	~<mv_ty≥s.h
>

20 
	#SYS_CLK_KHZ
 12000

21 

	)

22 
	#L2CACHE_CFG
 (
SHAVE_L2CACHE_NORMAL_MODE
)

	)

25 
	#APP_CSS_DSS_CLOCKS
 ( 
DEV_CSS_LOS
 | \

	)

26 
	gDEV_CSS_LAHB_CTRL
 | \

27 
	gDEV_CSS_APB4_CTRL
 | \

28 
	gDEV_CSS_CPR
 | \

29 
	gDEV_CSS_LOS_L2C
 | \

30 
	gDEV_CSS_LOS_ICB
 | \

31 
	gDEV_CSS_GPIO
 | \

32 
	gDEV_CSS_JTAG
 | \

33 
	gDEV_CSS_UART
 | \

34 
	gDEV_CSS_MSS_MAS
 | \

35 
	gDEV_CSS_UPA_MAS
 | \

36 
	gDEV_CSS_LOS_DSU
 | \

37 
	gDEV_CSS_AON
 )

39 
	#APP_MSS_CLOCKS
 ( 
DEV_MSS_SIPP
 | \

	)

40 
	gDEV_MSS_AMC
 | \

41 
	gDEV_MSS_LRT
 | \

42 
	gDEV_MSS_LRT_DSU
 | \

43 
	gDEV_MSS_LRT_L2C
 | \

44 
	gDEV_MSS_LRT_ICB
 )

46 
	#APP_UPA_CLOCKS
 
DEV_UPA_SHAVE_L2
 | 
DEV_UPA_CDMA
 | 
DEV_UPA_CTRL


	)

56 
öôClocksAndMem‹y
();

	@Sipp/Opipe/UPFIRDN_Filter/leon/main.c

10 
	~"DrvLe⁄.h
"

11 
	~"≠p_c⁄fig.h
"

12 
	~<°dio.h
>

14 
	~<DrvC¥.h
>

15 
	~"DrvDdr.h
"

21 
u32
 
Ãt_°¨t
;

31 
	$maö
()

33 
	`öôClocksAndMem‹y
();

34 
	`DrvLe⁄RTSèπup
((
u32
)&
Ãt_°¨t
);

35 
	`DrvLe⁄RTWaôExecuti⁄
();

37 
	}
}

	@Sipp/Opipe/UPFIRDN_Filter/leon_rt/app_config.h

9 #i‚de‡
_APP_CONFIG_H_


10 
	#_APP_CONFIG_H_


	)

16 
	#IMG_W
 256

	)

17 
	#IMG_H
 64

	)

23 
BuûdAndCfgPùe
(
Opùe
 *
p
, 
uöt8_t
 *
iBuf
, uöt8_à*
oBuf
);

	@Sipp/Opipe/UPFIRDN_Filter/leon_rt/main.c

10 
	~<UnôTe°Api.h
>

11 
	~<VcsHooksApi.h
>

12 
	~"Opùe.h
"

13 
	~"≠p_c⁄fig.h
"

14 
	~"DrvLe⁄.h
"

15 
	~"DrvLe⁄L2C.h
"

24 
uöt8_t
 
	giBuf
[
IMG_W
 *
IMG_H
 ] 
SECTION
(".cmx.d©a"Ë
ALIGNED
(16);

25 
uöt8_t
 
	goBuf
[
IMG_W
*2*
IMG_H
*2] 
SECTION
(".cmx.d©a"Ë
ALIGNED
(16);

26 
uöt8_t
 
	geBuf
[
IMG_W
*2*
IMG_H
*2] 
SECTION
(".cmx.d©a"Ë
ALIGNED
(16);

28 
Opùe
 
	gp
;

35 
	$maö
()

37 
	`DrvLL2CInôWrôeThrough
();

38 
	`swcLe⁄SëPIL
(2);

39 
	`unôTe°Inô
();

42 
	`lﬂdMemFromFûeSim∂e
("../../../../ªsour˚s/öpU8_256x64.øw", 
IMG_W
*
IMG_H
, 
iBuf
);

43 
	`lﬂdMemFromFûeSim∂e
("../../../../ªsour˚s/expU8_512x128.øw", 
IMG_W
*
IMG_H
*4, 
eBuf
);

44 
	`OpùeRe£t
();

46 
	`BuûdAndCfgPùe
(&
p
, 
iBuf
, 
oBuf
);

47 
	`OpùeSèπ
 (&
p
);

48 
	`OpùeWaô
 (&
p
);

50 
	`ßveMem‹yToFûe
((
uöt32_t
)
oBuf
, (oBuf), "out.bin");

51 
	`unôTe°MemCom∑ª
((*)
oBuf
, (*)
eBuf
, (oBuf));

52 
	`unôTe°FöÆRï‹t
();

54 
	`DrvLe⁄RTSig«lSt›
();

56 
	}
}

	@Sipp/Opipe/UPFIRDN_Filter/leon_rt/opipe_app_cfg.c

11 
	~<°rög.h
>

12 
	~"Opùe.h
"

13 
	~"≠p_c⁄fig.h
"

15 
UpfúdnCfg
 
	gupdnCfg
;

21 
	#UPFIRDN_ID
 
SIPP_UPFIRDN0_ID


	)

26 
	#I_CBUFF_H
 (3*
IRQ_RATE
)

	)

27 
	#O_CBUFF_H
 (2*
IRQ_RATE
)

	)

33 
uöt8_t
 
	giCúcBuffCmx
[
I_CBUFF_H
 *
IMG_W
] 
SECTION
(".cmx.d©a"Ë
ALIGNED
(16);

34 
uöt8_t
 
	goCúcBuffCmx
[
O_CBUFF_H
 *
IMG_W
*2] 
SECTION
(".cmx.d©a"Ë
ALIGNED
(16);

43 
uöt8_t
 
	gh‹zC€fs
[] 
ALIGNED
(8) = {64, 64, 64, 192, 64, 64, 64, 64,

46 
uöt8_t
 
	gvîtC€fs
[] 
ALIGNED
(8) = {64, 64, 64, 192, 64, 64, 64, 64,

54 
	$≠pSëP¨ams
(
Opùe
 *
p
)

57 
p
->
width
 = 
IMG_W
;

58 
p
->
height
 = 
IMG_H
;

61 if(
UPFIRDN_ID
 =
SIPP_UPFIRDN0_ID
Ë
p
->
pUpfúdn0Cfg
 = &
updnCfg
;

62 
p
->
pUpfúdn12Cfg
 = &
updnCfg
;

64 
updnCfg
.
vN
 = 2; updnCfg.
vD
 = 1;

65 
updnCfg
.
hN
 = 2; updnCfg.
hD
 = 1;

66 
updnCfg
.
kîSz
 = 7;

67 
updnCfg
.
vC€fs
 = 
vîtC€fs
;

68 
updnCfg
.
hC€fs
 = 
h‹zC€fs
;

69 
	}
}

72 
	$BuûdAndCfgPùe
(
Opùe
 *
p
, 
uöt8_t
 *
iBuf
, uöt8_à*
oBuf
)

74 
DBuf„r
 *
pIn
;

75 
DBuf„r
 *
pOut
;

78 
	`OpùeInô
(
p
);

79 
	`≠pSëP¨ams
(
p
);

82 
p
->
íMask
 = 1<<
UPFIRDN_ID
;

85 
pIn
 = 
	`OpùeCfgBuff
 (
p
, 
UPFIRDN_ID
, 
D_DMA
|
D_IN
, (
uöt32_t
)
iCúcBuffCmx
, 
I_CBUFF_H
, 
	`BPP
(1));

86 
pOut
 = 
	`OpùeCfgBuff
 (
p
, 
UPFIRDN_ID
, 
D_DMA
|
D_OUT
,(
uöt32_t
)
oCúcBuffCmx
, 
O_CBUFF_H
, 
	`BPP
(1));

89 
pIn
->
ddr
.
ba£
 = (
uöt32_t
)
iBuf
;

90 
pOut
->
ddr
.
ba£
 = (
uöt32_t
)
oBuf
;

91 
pOut
->
ddr
.
height
 = 
IMG_H
*2;

92 
	}
}

	@Sipp/SippFw/ConcurrencyTest/AsyncPipe_x2_concurrent/leon/ConcurrencyAppTypes.h

10 #i‚de‡
__CONCURRENCY_APP_TYPES_H__


11 
	#__CONCURRENCY_APP_TYPES_H__


	)

16 
	#CC_APP_EVENT_HISTORY_SIZE
 0x8

	)

27 
	mCC_APP_PIPE_STATE_UNINIT
 = 0x00,

28 
	mCC_APP_PIPE_STATE_IDLE
 = 0x01,

29 
	mCC_APP_PIPE_STATE_RUNNING
 = 0x02,

30 
	mCC_APP_PIPE_STATE_COMPLETE
 = 0x03

32 } 
	tCC_APP_PIPE_STATE
;

39 
	mCC_APP_PIPE_EVENT_NONE
 = 0x00,

40 
	mCC_APP_PIPE_EVENT_FRAME_DONE
 = 0x01

42 } 
	tCC_APP_PIPE_EVENT
;

50 
CC_APP_PIPE_STATE
 
	meSèã
;

51 
SùpPùñöe
 * 
	msùpFwH™dÀ
;

53 
SùpFûãr
 * 
	mdmaIn
;

54 
SùpFûãr
 * 
	mdmaOut
;

55 
SùpFûãr
 * 
	mHWFûãr
;

56 
SùpFûãr
 * 
	mSWFûãr
;

58 
u32
 
	m‰amesCom∂ëe
;

60 
CC_APP_PIPE_EVENT
 
	mevítLi°
[
CC_APP_EVENT_HISTORY_SIZE
];

61 
u32
 
	mevítLi°WrPå
;

62 
u32
 
	mevítLi°RdPå
;

64 } 
	tC⁄cuºícyAµPùe
, * 
	tpC⁄cuºícyAµPùe
;

	@Sipp/SippFw/ConcurrencyTest/AsyncPipe_x2_concurrent/leon/appParams.h

8 
	#KERNEL_SIZE
 5

	)

10 
u16
 
	gc⁄vM©rix
[
KERNEL_SIZE
 * KERNEL_SIZE] =

19 
u16
 
	ghwKî
[
KERNEL_SIZE
 * KERNEL_SIZE] =

	@Sipp/SippFw/ConcurrencyTest/AsyncPipe_x2_concurrent/leon/main.c

11 
	~<sùp.h
>

12 
	~<sùpTe°Comm⁄.h
>

13 
	~<fûãrs/c⁄v5x5/c⁄v5x5.h
>

14 
	~<fûãrs/boxFûãr5x5/boxFûãr5x5.h
>

15 
	~<°rög.h
>

17 #i‡
deföed
(
SIPP_VCS
)

18 
	~<UnôTe°Api.h
>

19 
	~<DrvTimî.h
>

20 
	~<DrvDdr.h
>

23 
	~"C⁄cuºícyAµTy≥s.h
"

29 #i‚de‡
SIPP_PC


30 
	#SIPP_USE_PRECALC_SCHEDULE


	)

32 
	#CONCURRENCY_APP_NUM_PIPELINES
 0x2

	)

33 
	#CONCURRENCY_APP_FRAMES_PER_PIPE
 0x10

	)

34 
	#CONCURRENCY_TEST_CREATE_CONFLICT
 0

36 

	)

38 
	#CONCURRENCY_APP_PIPE0_WIDTH
 1280

	)

39 
	#CONCURRENCY_APP_PIPE0_HEIGHT
 720

	)

40 
	#CONCURRENCY_APP_PIPE0_NUM_PLANES
 1

	)

41 
u8
 
	tt_Pùe0
;

44 
	#CONCURRENCY_APP_PIPE1_WIDTH
 1280

	)

45 
	#CONCURRENCY_APP_PIPE1_HEIGHT
 720

	)

46 
	#CONCURRENCY_APP_PIPE1_NUM_PLANES
 1

	)

47 
u8
 
	tt_Pùe1
;

49 #i‡
CONCURRENCY_APP_NUM_PIPELINES
 > 0x2

51 
	#CONCURRENCY_APP_PIPE2_WIDTH
 1280

	)

52 
	#CONCURRENCY_APP_PIPE2_HEIGHT
 720

	)

53 
	#CONCURRENCY_APP_PIPE2_NUM_PLANES
 1

	)

54 
u8
 
	tt_Pùe2
;

58 #i‡
CONCURRENCY_APP_NUM_PIPELINES
 > 0x3

60 
	#CONCURRENCY_APP_PIPE3_WIDTH
 1280

	)

61 
	#CONCURRENCY_APP_PIPE3_HEIGHT
 720

	)

62 
	#CONCURRENCY_APP_PIPE3_NUM_PLANES
 1

	)

63 
u8
 
	tt_Pùe3
;

72 
	~"≠pP¨ams.h
"

74 
u32
 
	gsùpEº‹Log
[
SIPP_ERROR_HISTORY_SIZE
];

75 vﬁ©ûê
u32
 
	gã°Com∂ëe
 = 0;

76 
C⁄cuºícyAµPùe
 
	gc⁄cuºícyPùeLi°
[
CONCURRENCY_APP_NUM_PIPELINES
];

78 #i‡
CONCURRENCY_APP_NUM_PIPELINES
 > 0x3

79 #i‡
CONCURRENCY_TEST_CREATE_CONFLICT
 > 0

80 
u32
 
	g¶i˚Fú°
[
CONCURRENCY_APP_NUM_PIPELINES
] = {0,3,6,9};

81 
u32
 
	g¶i˚La°
[
CONCURRENCY_APP_NUM_PIPELINES
] = {3,6,9,11};

83 
u32
 
	g¶i˚Fú°
[
CONCURRENCY_APP_NUM_PIPELINES
] = {0,3,6,9};

84 
u32
 
	g¶i˚La°
[
CONCURRENCY_APP_NUM_PIPELINES
] = {2,5,8,11};

86 #ñi‡
CONCURRENCY_APP_NUM_PIPELINES
 > 0x2

87 #i‡
CONCURRENCY_TEST_CREATE_CONFLICT
 > 0

88 
u32
 
	g¶i˚Fú°
[
CONCURRENCY_APP_NUM_PIPELINES
] = {0,4,8};

89 
u32
 
	g¶i˚La°
[
CONCURRENCY_APP_NUM_PIPELINES
] = {4,8,11};

91 
u32
 
	g¶i˚Fú°
[
CONCURRENCY_APP_NUM_PIPELINES
] = {0,4,8};

92 
u32
 
	g¶i˚La°
[
CONCURRENCY_APP_NUM_PIPELINES
] = {3,7,11};

95 #i‡
CONCURRENCY_TEST_CREATE_CONFLICT
 > 0

96 
u32
 
	g¶i˚Fú°
[
CONCURRENCY_APP_NUM_PIPELINES
] = {0,6};

97 
u32
 
	g¶i˚La°
[
CONCURRENCY_APP_NUM_PIPELINES
] = {6,11};

99 
u32
 
	g¶i˚Fú°
[
CONCURRENCY_APP_NUM_PIPELINES
] = {0,6};

100 
u32
 
	g¶i˚La°
[
CONCURRENCY_APP_NUM_PIPELINES
] = {5,11};

104 
u8
 * 
	gpmBöImg
[
CONCURRENCY_APP_NUM_PIPELINES
];

107 
t_Pùe0
 
DDR_DATA
 
	gDMA0_I≈utBuf„r
[
CONCURRENCY_APP_PIPE0_WIDTH
 * 
CONCURRENCY_APP_PIPE0_HEIGHT
 * 
CONCURRENCY_APP_PIPE0_NUM_PLANES
] 
ALIGNED
(8);

108 
t_Pùe1
 
DDR_DATA
 
	gDMA1_I≈utBuf„r
[
CONCURRENCY_APP_PIPE1_WIDTH
 * 
CONCURRENCY_APP_PIPE1_HEIGHT
 * 
CONCURRENCY_APP_PIPE1_NUM_PLANES
] 
ALIGNED
(8);

109 #i‡
CONCURRENCY_APP_NUM_PIPELINES
 > 0x2

110 
t_Pùe2
 
DDR_DATA
 
	gDMA2_I≈utBuf„r
[
CONCURRENCY_APP_PIPE2_WIDTH
 * 
CONCURRENCY_APP_PIPE2_HEIGHT
 * 
CONCURRENCY_APP_PIPE2_NUM_PLANES
] 
ALIGNED
(8);

112 #i‡
CONCURRENCY_APP_NUM_PIPELINES
 > 0x3

113 
t_Pùe3
 
DDR_DATA
 
	gDMA3_I≈utBuf„r
[
CONCURRENCY_APP_PIPE3_WIDTH
 * 
CONCURRENCY_APP_PIPE3_HEIGHT
 * 
CONCURRENCY_APP_PIPE3_NUM_PLANES
] 
ALIGNED
(8);

116 
t_Pùe0
 
DDR_DATA
 
	gDMA0_OuçutBuf„r
[
CONCURRENCY_APP_PIPE0_WIDTH
 * 
CONCURRENCY_APP_PIPE0_HEIGHT
 * 
CONCURRENCY_APP_PIPE0_NUM_PLANES
] 
ALIGNED
(8);

117 
t_Pùe1
 
DDR_DATA
 
	gDMA1_OuçutBuf„r
[
CONCURRENCY_APP_PIPE1_WIDTH
 * 
CONCURRENCY_APP_PIPE1_HEIGHT
 * 
CONCURRENCY_APP_PIPE1_NUM_PLANES
] 
ALIGNED
(8);

118 #i‡
CONCURRENCY_APP_NUM_PIPELINES
 > 0x2

119 
t_Pùe2
 
DDR_DATA
 
	gDMA2_OuçutBuf„r
[
CONCURRENCY_APP_PIPE2_WIDTH
 * 
CONCURRENCY_APP_PIPE2_HEIGHT
 * 
CONCURRENCY_APP_PIPE2_NUM_PLANES
] 
ALIGNED
(8);

121 #i‡
CONCURRENCY_APP_NUM_PIPELINES
 > 0x3

122 
t_Pùe3
 
DDR_DATA
 
	gDMA3_OuçutBuf„r
[
CONCURRENCY_APP_PIPE3_WIDTH
 * 
CONCURRENCY_APP_PIPE3_HEIGHT
 * 
CONCURRENCY_APP_PIPE3_NUM_PLANES
] 
ALIGNED
(8);

126 
UI¡8
 
ã°_image
;

127 
u16
 
	gc⁄v5x50Cfg_cM©
[
CONCURRENCY_APP_NUM_PIPELINES
][25];

129 #ifde‡
SIPP_VCS


130 
tyAuxClkDividîCfg
 
	gauxClk
[] =

135 
tySocClockC⁄fig
 
	g˛ockC⁄fig
 =

137 .
ªfClk0I≈utKhz
 = 12000,

138 .
	gªfClk1I≈utKhz
 = 0,

139 .
	gèrgëPŒ0FªqKhz
 = 500000,

140 .
	gèrgëPŒ1FªqKhz
 = 0,

141 .
	g˛kSrcPŒ1
 = 
CLK_SRC_REFCLK0
,

142 .
	gma°îClkDivNumî©‹
 = 1,

143 .
	gma°îClkDivDíomö©‹
 = 1,

144 .
	gcssDssClockE«bÀMask
 = 
DEFAULT_CORE_CSS_DSS_CLOCKS
,

145 .
	gmssClockE«bÀMask
 = -1,

146 .
	gu∑ClockE«bÀMask
 = 
DEFAULT_UPA_CLOCKS
,

147 .
	gpAuxClkCfg
 = 
auxClk


156 
öôC⁄vM©
 (
SùpFûãr
 * 
c⁄v5x5
, 
u32
 
pùeId
, u32 
ks
);

157 
≠pSùpCÆlback
 (
SùpPùñöe
 * 
pPùñöe
,

158 
eSIPP_PIPELINE_EVENT
 
eEvít
,

159 
SIPP_PIPELINE_EVENT_DATA
 * 
±EvítD©a
);

165 #ifde‡
SIPP_USE_PRECALC_SCHEDULE


166 
	~"pcDumpScheduÀ.hh
"

167 
	~"pcDumpScheduÀ_1.hh
"

168 #i‡
CONCURRENCY_APP_NUM_PIPELINES
 > 0x2

169 
	~"pcDumpScheduÀ_2.hh
"

171 #i‡
CONCURRENCY_APP_NUM_PIPELINES
 > 0x3

172 
	~"pcDumpScheduÀ_3.hh
"

192 
	$≠pInô
 ()

194 
	`mem£t
 (
c⁄cuºícyPùeLi°
, 0x0, (concurrencyPipeList));

195 
	}
}

212 
u32
 
	$≠pLookupH™dÀ
 (
SùpPùñöe
 * 
pPùñöe
)

214 
u32
 
idx
;

216 
idx
 = 0; idx < 
CONCURRENCY_APP_NUM_PIPELINES
; idx++)

218 
C⁄cuºícyAµPùe
 * 
pùe
 = &
c⁄cuºícyPùeLi°
[
idx
];

220 i‡(
pùe
->
sùpFwH™dÀ
 =
pPùñöe
)

222  
idx
;

227 
	}
}

244 
	$≠pCª©ePùñöes
 ( )

246 
u32
 
idx
;

247 
idx
 = 0; idx < 
CONCURRENCY_APP_NUM_PIPELINES
; idx++ )

249 
C⁄cuºícyAµPùe
 * 
pùe
 = &
c⁄cuºícyPùeLi°
[
idx
];

251 
pùe
->
sùpFwH™dÀ
 = 
	`sùpCª©ePùñöe
 (
¶i˚Fú°
[
idx
],

252 
¶i˚La°
[
idx
],

253 
	`SIPP_MBIN
(
mböImgSùp
));

255 i‡(
	`sùpPùeGëEº‹Sètus
 (
pùe
->
sùpFwH™dÀ
))

257 
u32
 
îrNum
;

258 
	`¥ötf
 ("Pipeline creationÉrror\nError codes:\n");

259 
îrNum
 = 
	`sùpGëEº‹Hi°‹y
 (
sùpEº‹Log
);

260 
îrNum
)

262 
	`¥ötf
 ("%08lx\n", 
sùpEº‹Log
[
îrNum
 - 0x1]);

263 
îrNum
--;

265 
	`exô
 (0x0);

269 
	`sùpRegi°îEvítCÆlback
 (
pùe
->
sùpFwH™dÀ
,

270 
≠pSùpCÆlback
);

272 
	}
}

289 
	$≠pC⁄figuªPùñöes
 ( )

291 
C⁄cuºícyAµPùe
 * 
pùe
;

292 
DmaP¨am
 * 
dmaInCfg
;

293 
DmaP¨am
 * 
dmaOutCfg
;

296 
pùe
 = &
c⁄cuºícyPùeLi°
[0];

298 
pùe
->
dmaIn
 = 
	`sùpCª©eFûãr
 (pùe->
sùpFwH™dÀ
, 0x0, 
CONCURRENCY_APP_PIPE0_WIDTH
, 
CONCURRENCY_APP_PIPE0_HEIGHT
, 
	`N_PL
(
CONCURRENCY_APP_PIPE0_NUM_PLANES
), 
	`SZ
(
t_Pùe0
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

299 
pùe
->
HWFûãr
 = 
	`sùpCª©eFûãr
 (pùe->
sùpFwH™dÀ
, 0x0, 
CONCURRENCY_APP_PIPE0_WIDTH
, 
CONCURRENCY_APP_PIPE0_HEIGHT
, 
	`N_PL
(
CONCURRENCY_APP_PIPE0_NUM_PLANES
), 
	`SZ
(
t_Pùe0
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_CONV_ID
, 0);

300 
pùe
->
SWFûãr
 = 
	`sùpCª©eFûãr
 (pùe->
sùpFwH™dÀ
, 0x0, 
CONCURRENCY_APP_PIPE0_WIDTH
, 
CONCURRENCY_APP_PIPE0_HEIGHT
, 
	`N_PL
(
CONCURRENCY_APP_PIPE0_NUM_PLANES
), 
	`SZ
(
t_Pùe0
), SZ(
BoxFûãr5x5P¨am
), 
	`SVU_SYM
(
svuBoxFûãr5x5
), 0);

301 
pùe
->
dmaOut
 = 
	`sùpCª©eFûãr
 (pùe->
sùpFwH™dÀ
, 0x0, 
CONCURRENCY_APP_PIPE0_WIDTH
, 
CONCURRENCY_APP_PIPE0_HEIGHT
, 
	`N_PL
(
CONCURRENCY_APP_PIPE0_NUM_PLANES
), 
	`SZ
(
t_Pùe0
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

304 
	`sùpLökFûãr
 (
pùe
->
HWFûãr
,Öùe->
dmaIn
, 5, 5 );

305 
	`sùpLökFûãr
 (
pùe
->
SWFûãr
,Öùe->
HWFûãr
, 5, 5 );

306 
	`sùpLökFûãr
 (
pùe
->
dmaOut
,Öùe->
SWFûãr
, 1, 0 );

308 i‡(
	`sùpPùeGëEº‹Sètus
 (
pùe
->
sùpFwH™dÀ
))

310 
u32
 
îrNum
;

311 
	`¥ötf
 ("Pipeline 0 creationÉrror\nError codes:\n");

312 
îrNum
 = 
	`sùpGëEº‹Hi°‹y
 (
sùpEº‹Log
);

313 
îrNum
)

315 
	`¥ötf
 ("%08lx\n", 
sùpEº‹Log
[
îrNum
 - 0x1]);

316 
îrNum
--;

318 
	`exô
 (0x0);

321 
dmaInCfg
 = (
DmaP¨am
 *)
pùe
->
dmaIn
->
∑øms
;

322 
dmaOutCfg
 = (
DmaP¨am
 *)
pùe
->
dmaOut
->
∑øms
;

323 
dmaInCfg
->
ddrAddr
 = (
UI¡32
)
DMA0_I≈utBuf„r
;

324 
dmaOutCfg
->
ddrAddr
 = (
UI¡32
)
DMA0_OuçutBuf„r
;

326 
C⁄vP¨am
 * 
HWFûãrCfg
 = (C⁄vP¨am *)
pùe
->
HWFûãr
->
∑øms
;

327 
HWFûãrCfg
->
cfg
 = 
KERNEL_SIZE
 |

336 
	`∑ckC⁄v5x5CCM
 (
HWFûãrCfg
, 
hwKî
);

338 
BoxFûãr5x5P¨am
 * 
SWFûãrCfg
 = (BoxFûãr5x5P¨am *)
pùe
->
SWFûãr
->
∑øms
;

340 
SWFûãrCfg
->
n‹mÆize
 = 0;

342 #ifde‡
SIPP_USE_PRECALC_SCHEDULE


344 
	`dbgSchedInô
 (
pùe
->
sùpFwH™dÀ
);

347 
	`sùpFöÆizePùñöe
 (
pùe
->
sùpFwH™dÀ
);

349 i‡(
	`sùpPùeGëEº‹Sètus
 (
pùe
->
sùpFwH™dÀ
))

351 
u32
 
îrNum
;

352 
	`¥ötf
 ("Pipeline 0 finalization failed\nError codes:\n");

353 
îrNum
 = 
	`sùpGëEº‹Hi°‹y
 (
sùpEº‹Log
);

354 
îrNum
)

356 
	`¥ötf
 ("%08lx\n", 
sùpEº‹Log
[
îrNum
 - 0x1]);

357 
îrNum
--;

362 
pùe
 = &
c⁄cuºícyPùeLi°
[1];

363 
pùe
->
dmaIn
 = 
	`sùpCª©eFûãr
 (pùe->
sùpFwH™dÀ
, 0x0, 
CONCURRENCY_APP_PIPE0_WIDTH
, 
CONCURRENCY_APP_PIPE0_HEIGHT
, 
	`N_PL
(
CONCURRENCY_APP_PIPE0_NUM_PLANES
), 
	`SZ
(
t_Pùe1
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

364 
pùe
->
SWFûãr
 = 
	`sùpCª©eFûãr
 (pùe->
sùpFwH™dÀ
, 0x0, 
CONCURRENCY_APP_PIPE0_WIDTH
, 
CONCURRENCY_APP_PIPE0_HEIGHT
, 
	`N_PL
(
CONCURRENCY_APP_PIPE0_NUM_PLANES
), 
	`SZ
(
t_Pùe1
), SZ(
C⁄v5x5P¨am
), 
	`SVU_SYM
(
svuC⁄v5x5
), 0);

365 
pùe
->
HWFûãr
 = 
	`sùpCª©eFûãr
 (pùe->
sùpFwH™dÀ
, 0x0, 
CONCURRENCY_APP_PIPE0_WIDTH
, 
CONCURRENCY_APP_PIPE0_HEIGHT
, 
	`N_PL
(
CONCURRENCY_APP_PIPE0_NUM_PLANES
), 
	`SZ
(
t_Pùe1
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_MED_ID
, 0);

366 
pùe
->
dmaOut
 = 
	`sùpCª©eFûãr
 (pùe->
sùpFwH™dÀ
, 0x0, 
CONCURRENCY_APP_PIPE0_WIDTH
, 
CONCURRENCY_APP_PIPE0_HEIGHT
, 
	`N_PL
(
CONCURRENCY_APP_PIPE0_NUM_PLANES
), 
	`SZ
(
t_Pùe1
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

369 
	`sùpLökFûãr
 (
pùe
->
SWFûãr
,Öùe->
dmaIn
, 5, 5 );

370 
	`sùpLökFûãr
 (
pùe
->
HWFûãr
,Öùe->
SWFûãr
, 5, 5 );

371 
	`sùpLökFûãr
 (
pùe
->
dmaOut
,Öùe->
HWFûãr
, 1, 0 );

373 i‡(
	`sùpPùeGëEº‹Sètus
 (
pùe
->
sùpFwH™dÀ
))

375 
u32
 
îrNum
;

376 
	`¥ötf
 ("Pipeline 1 creationÉrror\nError codes:\n");

377 
îrNum
 = 
	`sùpGëEº‹Hi°‹y
 (
sùpEº‹Log
);

378 
îrNum
)

380 
	`¥ötf
 ("%08lx\n", 
sùpEº‹Log
[
îrNum
 - 0x1]);

381 
îrNum
--;

383 
	`exô
 (0x0);

386 
dmaInCfg
 = (
DmaP¨am
 *)
pùe
->
dmaIn
->
∑øms
;

387 
dmaOutCfg
 = (
DmaP¨am
 *)
pùe
->
dmaOut
->
∑øms
;

388 
dmaInCfg
->
ddrAddr
 = (
UI¡32
)
DMA1_I≈utBuf„r
;

389 
dmaOutCfg
->
ddrAddr
 = (
UI¡32
)
DMA1_OuçutBuf„r
;

391 
	`öôC⁄vM©
 (
pùe
->
SWFûãr
, 0x1, 
KERNEL_SIZE
);

392 
MedP¨am
 * 
MedHWFûãrCfg
 = (MedP¨am *)
pùe
->
HWFûãr
->
∑øms
;

393 
MedHWFûãrCfg
->
cfg
 = 
KERNEL_SIZE
 |

394 (((
KERNEL_SIZE
 * KERNEL_SIZE)>>1) << 8) |

397 #ifde‡
SIPP_USE_PRECALC_SCHEDULE


399 
	`dbgSchedInô_1
 (
pùe
->
sùpFwH™dÀ
);

402 
	`sùpFöÆizePùñöe
 (
pùe
->
sùpFwH™dÀ
);

404 i‡(
	`sùpPùeGëEº‹Sètus
 (
pùe
->
sùpFwH™dÀ
))

406 
u32
 
îrNum
;

407 
	`¥ötf
 ("Pipeline 1 finalization failed\nError codes:\n");

408 
îrNum
 = 
	`sùpGëEº‹Hi°‹y
 (
sùpEº‹Log
);

409 
îrNum
)

411 
	`¥ötf
 ("%08lx\n", 
sùpEº‹Log
[
îrNum
 - 0x1]);

412 
îrNum
--;

416 #i‡
CONCURRENCY_APP_NUM_PIPELINES
 > 2

418 
pùe
 = &
c⁄cuºícyPùeLi°
[2];

422 #i‡
CONCURRENCY_APP_NUM_PIPELINES
 > 3

424 
pùe
 = &
c⁄cuºícyPùeLi°
[3];

428 
	}
}

445 
	$≠pLogEvít
 (
C⁄cuºícyAµPùe
 * 
pùe
,

446 
CC_APP_PIPE_EVENT
 
evít
)

448 #i‚de‡
SIPP_PC


450 
u32
 
°‹edIL
 = 
	`swcLe⁄GëPIL
 ();

451 
	`swcLe⁄SëPIL
 (15);

454 
pùe
->
evítLi°
[pùe->
evítLi°WrPå
++] = 
evít
;

455 i‡(
pùe
->
evítLi°WrPå
 =
CC_APP_EVENT_HISTORY_SIZE
)Öipe->eventListWrPtr = 0;

457 #i‚de‡
SIPP_PC


458 
	`swcLe⁄SëPIL
 (
°‹edIL
);

461 
	}
}

478 
CC_APP_PIPE_EVENT
 
	$≠pPro˚ssEvít
 (
C⁄cuºícyAµPùe
 * 
pùe
)

480 
CC_APP_PIPE_EVENT
 
ªtVÆ
 = 
CC_APP_PIPE_EVENT_NONE
;

482 i‡(
pùe
->
evítLi°WrPå
 !pùe->
evítLi°RdPå
 )

484 
ªtVÆ
 = 
pùe
->
evítLi°
[pùe->
evítLi°RdPå
++];

485 i‡(
pùe
->
evítLi°RdPå
 =
CC_APP_EVENT_HISTORY_SIZE
)Öipe->eventListRdPtr = 0;

489  
ªtVÆ
;

490 
	}
}

507 
	$≠pSùpCÆlback
 (
SùpPùñöe
 * 
pPùñöe
,

508 
eSIPP_PIPELINE_EVENT
 
eEvít
,

509 
SIPP_PIPELINE_EVENT_DATA
 * 
±EvítD©a
)

512 
u32
 
pùeIdx
 = 
	`≠pLookupH™dÀ
 (
pPùñöe
);

513 
C⁄cuºícyAµPùe
 * 
pùe
 = &
c⁄cuºícyPùeLi°
[
pùeIdx
];

515 
	`UNUSED
(
±EvítD©a
);

517 i‡(
eEvít
 =
eSIPP_PIPELINE_FRAME_DONE
)

519 
	`¥ötf
 ("Pùê%lu com∂ëe†‰ame\n", 
pùeIdx
);

520 
	`≠pLogEvít
 (
pùe
,

521 
CC_APP_PIPE_EVENT_FRAME_DONE
);

524 
	}
}

541 
u32
 
	$≠pCheckCom∂ëe
 ( )

543 
u32
 
ªtVÆ
 = 0x1;

544 
u32
 
idx
;

546 
idx
 = 0; idx < 
CONCURRENCY_APP_NUM_PIPELINES
; idx++ )

548 
C⁄cuºícyAµPùe
 * 
pùe
 = &
c⁄cuºícyPùeLi°
[
idx
];

549 i‡(
pùe
->
eSèã
 !
CC_APP_PIPE_STATE_COMPLETE
)

551 
ªtVÆ
 = 0x0;

556  
ªtVÆ
;

557 
	}
}

575 
	$≠pTask
 ()

577 
u32
 
pùeIdx
;

579 
ã°Com∂ëe
 == 0)

581 
pùeIdx
 = 0x0;ÖùeIdx < 
CONCURRENCY_APP_NUM_PIPELINES
;ÖipeIdx++)

583 
C⁄cuºícyAµPùe
 * 
pùe
 = &
c⁄cuºícyPùeLi°
[
pùeIdx
];

585 
pùe
->
eSèã
)

587 
CC_APP_PIPE_STATE_UNINIT
 : {

588 
pùe
->
eSèã
 = 
CC_APP_PIPE_STATE_IDLE
;

590 
CC_APP_PIPE_STATE_IDLE
 : {

591 i‡(
pùe
->
‰amesCom∂ëe
 < 
CONCURRENCY_APP_FRAMES_PER_PIPE
)

593 
	`sùpPro˚ssFømeNB
 (
pùe
->
sùpFwH™dÀ
);

594 
pùe
->
eSèã
 = 
CC_APP_PIPE_STATE_RUNNING
;

598 
	`¥ötf
 ("Pùê%lu com∂ëedÑu¿o‡%lu images\n", 
pùeIdx
, 
pùe
->
‰amesCom∂ëe
);

599 
	`sùpFømew‹kRun
 ();

600 
pùe
->
eSèã
 = 
CC_APP_PIPE_STATE_COMPLETE
;

604 
CC_APP_PIPE_STATE_RUNNING
 : {

605 
CC_APP_PIPE_EVENT
 
evít
;

606 (
evít
 = 
	`≠pPro˚ssEvít
 (
pùe
)Ë!
CC_APP_PIPE_EVENT_NONE
)

608 
evít
)

610 
CC_APP_PIPE_EVENT_FRAME_DONE
 : {

611 
pùe
->
‰amesCom∂ëe
++;

612 
pùe
->
eSèã
 = 
CC_APP_PIPE_STATE_IDLE
;

618 
CC_APP_PIPE_STATE_COMPLETE
 : {

619 i‡(
	`≠pCheckCom∂ëe
())

621 
ã°Com∂ëe
 = 1;

625 
	`¥ötf
 ("Unknow¿°©ê⁄Öùê%lu - Tîmö©ögÉ¨ly\n", 
pùeIdx
);

626 
	`exô
 (0x0);

631 
	}
}

651 
	$maö
 (
¨gc
, *
¨gv
[])

653 
	`UNUSED
 (
¨gc
);

654 
	`UNUSED
 (
¨gv
);

656 #ifde‡
SIPP_VCS


657 
	`unôTe°Inô
 ();

658 
	`DrvC¥Inô
 ();

659 
	`DrvDdrInôüli£
 (
NULL
);

660 
	`DrvC¥SëupClocks
 (&
˛ockC⁄fig
);

663 
	`sùpPœtf‹mInô
 ();

665 #ifde‡
SIPP_VCS


666 
	`DrvTimîInô
 ();

669 #i‚de‡
SIPP_PC


670 i‡(
PROCESS_LEON_OS
 =
	`swcWhoAmI
())

672 
	`¥ötf
 ("App Starting on LEON OS\n");

673 
	`¥ötf
 ("Please make sure IRQ sources for dynamicallyÑoute between LeonOSánd LeonRTáre set\n");

677 
	`¥ötf
 ("App Starting on LEON RT\n");

681 
	`sùpPœtf‹mInôAsync
 ();

683 
	`≠pInô
 ();

684 
	`≠pCª©ePùñöes
 ();

685 
	`≠pC⁄figuªPùñöes
 ();

688 
	`≠pTask
 ();

693 #ifde‡
SIPP_VCS


694 
	`unôTe°FöÆRï‹t
();

698 
	}
}

	@Sipp/SippFw/ConcurrencyTest/AsyncPipe_x2_concurrent/leon/pcDumpSchedule.hh

8 
SchedInfo
 
	gsùpDum≥dSched_0
[727] =

740 
	$dbgSchedInô
(
SùpPùñöe
 *
∂
)

742 i‡(
∂
->
löesPîIãr
 != 1)

744 
	`sùpEº‹
 (
∂
->
îr‹Sètus
, 
E_PRECOMP_SCHED
);

748 
∂
->
fûãrs
[ 0]->
nLöes
[0] = 5;

749 
∂
->
fûãrs
[ 1]->
nLöes
[0] = 5;

750 
∂
->
fûãrs
[ 2]->
nLöes
[0] = 1;

751 
∂
->
fûãrs
[ 3]->
nLöes
[0] = 0;

754 
∂
->
fûãrs
[ 1]->
∑ª¡sKS
[ 0] = 0;

755 
∂
->
fûãrs
[ 2]->
∑ª¡sKS
[ 0] = 0;

756 
∂
->
fûãrs
[ 3]->
∑ª¡sKS
[ 0] = 0;

761 
∂
->
fûãrs
[ 0]->
fú°RunRﬁlLöes
 =Öl->fûãrs[ 0]->
fú°RunNumLöes
 = 0;

762 
∂
->
fûãrs
[ 1]->
fú°RunRﬁlLöes
 =Öl->fûãrs[ 1]->
fú°RunNumLöes
 = 0;

763 
∂
->
fûãrs
[ 2]->
fú°RunRﬁlLöes
 =Öl->fûãrs[ 2]->
fú°RunNumLöes
 = 0;

764 
∂
->
fûãrs
[ 3]->
fú°RunRﬁlLöes
 =Öl->fûãrs[ 3]->
fú°RunNumLöes
 = 0;

767 
∂
->
fûãrs
[ 0]->
hPaddög
[ 0] = 0;

768 
∂
->
fûãrs
[ 1]->
hPaddög
[ 0] = 5;

769 
∂
->
fûãrs
[ 2]->
hPaddög
[ 0] = 0;

770 
∂
->
fûãrs
[ 3]->
hPaddög
[ 0] = 0;

773 
∂
->
nIãr
 = 727;

774 
∂
->
schedInfo
 = 
sùpDum≥dSched_0
;

775 
	}
}

	@Sipp/SippFw/ConcurrencyTest/AsyncPipe_x2_concurrent/leon/pcDumpSchedule_1.hh

8 
SchedInfo
 
	gsùpDum≥dSched_1
[728] =

741 
	$dbgSchedInô_1
(
SùpPùñöe
 *
∂
)

743 i‡(
∂
->
löesPîIãr
 != 1)

745 
	`sùpEº‹
 (
∂
->
îr‹Sètus
, 
E_PRECOMP_SCHED
);

749 
∂
->
fûãrs
[ 0]->
nLöes
[0] = 5;

750 
∂
->
fûãrs
[ 1]->
nLöes
[0] = 7;

751 
∂
->
fûãrs
[ 2]->
nLöes
[0] = 1;

752 
∂
->
fûãrs
[ 3]->
nLöes
[0] = 0;

755 
∂
->
fûãrs
[ 1]->
∑ª¡sKS
[ 0] = 0;

756 
∂
->
fûãrs
[ 2]->
∑ª¡sKS
[ 0] = 0;

757 
∂
->
fûãrs
[ 3]->
∑ª¡sKS
[ 0] = 0;

762 
∂
->
fûãrs
[ 0]->
fú°RunRﬁlLöes
 =Öl->fûãrs[ 0]->
fú°RunNumLöes
 = 0;

763 
∂
->
fûãrs
[ 1]->
fú°RunRﬁlLöes
 =Öl->fûãrs[ 1]->
fú°RunNumLöes
 = 0;

764 
∂
->
fûãrs
[ 2]->
fú°RunRﬁlLöes
 =Öl->fûãrs[ 2]->
fú°RunNumLöes
 = 0;

765 
∂
->
fûãrs
[ 3]->
fú°RunRﬁlLöes
 =Öl->fûãrs[ 3]->
fú°RunNumLöes
 = 0;

768 
∂
->
fûãrs
[ 0]->
hPaddög
[ 0] = 5;

769 
∂
->
fûãrs
[ 1]->
hPaddög
[ 0] = 0;

770 
∂
->
fûãrs
[ 2]->
hPaddög
[ 0] = 0;

771 
∂
->
fûãrs
[ 3]->
hPaddög
[ 0] = 0;

774 
∂
->
nIãr
 = 728;

775 
∂
->
schedInfo
 = 
sùpDum≥dSched_1
;

776 
	}
}

	@Sipp/SippFw/ConcurrencyTest/AsyncPipe_x2_concurrent/leon/utils.c

11 
	~<sùp.h
>

12 
	~<sùpTe°Comm⁄.h
>

13 
	~<fûãrs/c⁄v5x5/c⁄v5x5.h
>

15 
u16
 
c⁄vM©rix
[5 * 5];

16 
u16
 
c⁄v5x50Cfg_cM©
[][5 * 5];

18 
	$öôC⁄vM©
 (
SùpFûãr
 * 
c⁄v5x5
, 
u32
 
pùeId
, u32 
ks
)

20 
u32
 
i
;

21 
C⁄v5x5P¨am
 *
c⁄vCfg
 = (C⁄v5x5P¨am*)
c⁄v5x5
->
∑øms
;

23 
c⁄vCfg
->
cM©
 = 
c⁄v5x50Cfg_cM©
[
pùeId
];

25 
i
 = 0; i < 
ks
 * ks; i++)

27 
c⁄vCfg
->
cM©
[
i
] = 
c⁄vM©rix
[i];

29 
	}
}

	@Sipp/SippFw/ConcurrencyTest/MixedIspCvPipe_concurrent/leon/ConcurrencyAppTypes.h

10 #i‚de‡
__CONCURRENCY_APP_TYPES_H__


11 
	#__CONCURRENCY_APP_TYPES_H__


	)

16 
	#CC_APP_EVENT_HISTORY_SIZE
 0x8

	)

27 
	mCC_APP_PIPE_STATE_UNINIT
 = 0x00,

28 
	mCC_APP_PIPE_STATE_IDLE
 = 0x01,

29 
	mCC_APP_PIPE_STATE_RUNNING
 = 0x02,

30 
	mCC_APP_PIPE_STATE_COMPLETE
 = 0x03

32 } 
	tCC_APP_PIPE_STATE
;

39 
	mCC_APP_PIPE_EVENT_NONE
 = 0x00,

40 
	mCC_APP_PIPE_EVENT_FRAME_DONE
 = 0x01

42 } 
	tCC_APP_PIPE_EVENT
;

50 
CC_APP_PIPE_STATE
 
	meSèã
;

51 
SùpPùñöe
 * 
	msùpFwH™dÀ
;

53 
SùpFûãr
 * 
	mdmaIn
;

54 
SùpFûãr
 * 
	mdmaOut
;

56 
SùpFûãr
 *
	mlscMa2x5x0
;

57 
SùpFûãr
 *
	møwMa2x5x0
;

58 
SùpFûãr
 *
	mdebayîMa2x5x0
;

59 
SùpFûãr
 *
	mgíLuma0
;

60 
SùpFûãr
 *
	mgíChroma0
;

61 
SùpFûãr
 *
	mlumaBlur0
;

62 
SùpFûãr
 *
	msh¨≥nMa2x5x1
;

63 
SùpFûãr
 *
	mydnsMa2x5x1
;

64 
SùpFûãr
 *
	mpﬁypha£fúMa2x5x1
;

65 
SùpFûãr
 *
	mmedünMa2x5x1
;

66 
SùpFûãr
 *
	mchromadnsMa2x5x1
;

67 
SùpFûãr
 *
	mcﬁ‹combMa2x5x1
;

68 
SùpFûãr
 *
	mlutMa2x5x1
;

70 
SùpFûãr
 *
	msobñ0
;

71 
SùpFûãr
 *
	mîode3x30
;

72 
SùpFûãr
 *
	mdû©e3x30
;

73 
SùpFûãr
 *
	mlut0
;

75 
SùpFûãr
 * 
	mc⁄v5x5
;

76 
SùpFûãr
 * 
	mbox5x5
;

77 
SùpFûãr
 * 
	mœp5x5
;

79 
u32
 
	m‰amesCom∂ëe
;

81 
CC_APP_PIPE_EVENT
 
	mevítLi°
[
CC_APP_EVENT_HISTORY_SIZE
];

82 
u32
 
	mevítLi°WrPå
;

83 
u32
 
	mevítLi°RdPå
;

85 
u32
 
	mrunAsync
;

87 } 
	tC⁄cuºícyAµPùe
, * 
	tpC⁄cuºícyAµPùe
;

	@Sipp/SippFw/ConcurrencyTest/MixedIspCvPipe_concurrent/leon/appParams.h

8 
	#KERNEL_SIZE
 5

	)

10 
u16
 
	gc⁄vM©rix
[
KERNEL_SIZE
 * KERNEL_SIZE] =

19 
u16
 
	ghwKî
[
KERNEL_SIZE
 * KERNEL_SIZE] =

29 
UI¡8
 
	gîodeM©
[3*3] =

36 
UI¡8
 
	gdû©eM©
[3*3] =

41 
UI¡16
 
	glutTab
[256] 
ALIGNED
(8) =

64 
	#ISP_PIPE_INPUT_BUFFER_WIDTH
 1930

	)

65 
	#ISP_PIPE_INPUT_BUFFER_HEIGHT
 1090

	)

66 
	#ISP_PIPE_INPUT_BUFFER_NUM_PLANES
 1

	)

71 
	#BAYER_W
 
ISP_PIPE_INPUT_BUFFER_WIDTH


	)

72 
	#BAYER_H
 
ISP_PIPE_INPUT_BUFFER_HEIGHT


	)

74 
	#BAYER_BITS
 10

	)

78 
	#BLACK_LEVEL
 0.015625

79 

	)

81 
	#LSC_GAIN_MAP_W
 56

	)

82 
	#LSC_GAIN_MAP_H
 44

	)

85 
UI¡16
 
lscMesh
[44 * 56] 
ALIGNED
(8);

91 
	#BAD_PIX_ALPHA_G_HOT
 0x6

92 
	#BAD_PIX_ALPHA_RB_HOT
 0x6

93 
	#BAD_PIX_ALPHA_G_COLD
 0x6

94 
	#BAD_PIX_ALPHA_RB_COLD
 0x6

95 
	#BAD_PIX_NOISE_LEVEL
 0x0000

96 

	)

104 
	#GRGB_IMBAL_PLAT_DARK
 150

	)

105 
	#GRGB_IMBAL_DECAY_DARK
 200

	)

106 
	#GRGB_IMBAL_PLAT_BRIGHT
 400

	)

107 
	#GRGB_IMBAL_DECAY_BRIGHT
 500

	)

108 
	#GRGB_IMBAL_THRESHOLD
 16

109 

	)

111 
	#CHROMA_GEN_EPSILON
 0.000978

	)

112 
	#CHROMA_MEDIAN_SIZE
 3

	)

115 
	#DIGI_GAIN_GR
 0x0104>>2

116 
	#DIGI_GAIN_GB
 0x0104>>2

117 
	#DIGI_GAIN_R
 0x01ab>>2

118 
	#DIGI_GAIN_B
 0x01ac>>2

119 

	)

120 
	#DIGI_SAT_GR
 255

121 
	#DIGI_SAT_GB
 255

122 
	#DIGI_SAT_R
 255

123 
	#DIGI_SAT_B
 255

124 

	)

132 
	#ISP_CHROMA_PIPE_SCALED_BUFFER_WIDTH
 (
ISP_PIPE_INPUT_BUFFER_WIDTH
 >> 1)

	)

133 
	#ISP_CHROMA_PIPE_SCALED_BUFFER_HEIGHT
 (
ISP_PIPE_INPUT_BUFFER_HEIGHT
 >> 1)

	)

134 
	#ISP_CHROMA_PIPE_SCALED_BUFFER_NUM_PLANES
 3

	)

137 
	#HORZ_N
 1

	)

138 
	#HORZ_D
 2

	)

140 
	#VERT_N
 1

	)

141 
	#VERT_D
 2

	)

143 
	#CCM_COEF
(
x
Ë(
UI¡16
)(x*1024)

	)

148 
	#SHARP_SIGMA
 1.300000

	)

149 
	#SHARP_STRENGTH
 0x3e00

150 
	#SHARP_ALPHA
 0x3666

151 
	#SHARP_OVERSHOOT
 0x3c9a

152 
	#SHARP_UNDERSHOOT
 0x3af5

153 

	)

154 
	#SHARP_RANGE_STOP_0
 0x1c04

155 
	#SHARP_RANGE_STOP_1
 0x2d05

156 
	#SHARP_RANGE_STOP_2
 0x3ae7

157 
	#SHARP_RANGE_STOP_3
 0x3bd8

158 

	)

159 
	#SHARP_MIN_THR
 0x1a25

160 

	)

163 
	#LUMA_DNS_STRENGTH
 12.000000

	)

164 
	#LUMA_DNS_ALPHA
 96

165 

	)

169 
	#LUMA_DNS_F2
 0x55555555

	)

172 
UI¡8
 
yDnsRefLut
[256];

173 
UI¡8
 
yDnsGammaLut
[256];

175 
	#LUMA_DNS_REF_SHIFT
 14

	)

176 
	#LUMA_DNS_REF_GAMMA
 0.800000

	)

179 
	#LUMA_DNS_X_OFFSET
 0

	)

180 
	#LUMA_DNS_Y_OFFSET
 0

	)

183 
	#LUMA_RAND_NOISE_STRENGTH
 0.080000

	)

187 
	#CHROMA_DNS_T1
 4

	)

188 
	#CHROMA_DNS_T2
 5

	)

189 
	#CHROMA_DNS_LIM
 4

	)

190 
	#CHROMA_DNS_H_ENAB
 1

	)

194 
	#DESAT_T1
 0.007843

	)

195 
	#DESAT_MUL
 19.615385

	)

199 
	#GAMMA_DARK
 1.700000

	)

200 
	#GAMMA_BRIGHT
 2.200000

	)

201 
	#GAMMA_ACE_SUB
 0.047059

	)

202 
	#GAMMA_ACE_MUL
 1.053719

	)

205 
ccm
[9] ;

206 
UI¡16
 
sh¨≥n_c€ffs
[4] ;

207 
UI¡16
 
gammaTabÀ
[256] 
ALIGNED
(8);

208 
UI¡8
 
lumaDnsLut
[32] 
ALIGNED
(8) ;

209 
UI¡8
 
h‹zC€fs
[] 
ALIGNED
(8);

210 
UI¡8
 
vîtC€fs
[] 
ALIGNED
(8);

211 
bôpos
;

212 
UI¡32
 
gaussLut
[4] 
ALIGNED
(8);

213 
UI¡32
 
gammaLut
[5] 
ALIGNED
(8);

214 
UI¡8
 
di°LUT
[] 
ALIGNED
(8);

218 
I¡8
 
	gc€fX
[6] = { -1, 1, -2, 2, -1, 1 };

219 
I¡8
 
	gc€fY
[6] = { -1, -2, -1, 1, 2, 1 };

225 
UI¡16
 
	gsh¨≥n_c€ffs
[4] = {0x2583,

230 
UI¡16
 
	ggammaTabÀ
[256] 
ALIGNED
(8) = {

249 
UI¡8
 
	glumaDnsLut
[32] 
ALIGNED
(8) =

260 
UI¡8
 
	gh‹zC€fs
[] 
ALIGNED
(8) = {

270 
UI¡8
 
	gvîtC€fs
[] 
ALIGNED
(8) = {

275 
	gbôpos
 = 3;

277 
	gccm
[9] = {

284 
UI¡32
 
	ggaussLut
[4] 
ALIGNED
(8) = {0xbcdeefff,0x3456789a,0x00011123,0x0};

285 
UI¡32
 
	ggammaLut
[5] 
ALIGNED
(8) = {0x665a4900,0x837d776f,0xa8890089,0xeadecfbe,0x1000fff5};

287 
UI¡8
 
	gdi°LUT
[] 
ALIGNED
(8) =

305 
UI¡8
 
	gyDnsGammaLut
[256] = {

340 
UI¡8
 
	gyDnsRefLut
[256] = {

376 
UI¡16
 
	glscMesh
[44 * 56] 
ALIGNED
(8) =

	@Sipp/SippFw/ConcurrencyTest/MixedIspCvPipe_concurrent/leon/main.c

11 
	~<sùp.h
>

12 
	~<sùpTe°Comm⁄.h
>

13 
	~<fûãrs/c⁄v5x5/c⁄v5x5.h
>

14 
	~<fûãrs/sobñ/sobñ.h
>

15 
	~<fûãrs/îode3x3/îode3x3.h
>

16 
	~<fûãrs/dû©e3x3/dû©e3x3.h
>

17 
	~<fûãrs/boxFûãr5x5/boxFûãr5x5.h
>

18 
	~<fûãrs/œ∂acün5x5/œ∂acün5x5.h
>

19 
	~<fûãrs/gíLuma/gíLuma.h
>

20 
	~<fûãrs/lumaBlur/lumaBlur.h
>

21 
	~<fûãrs/gíChroma/gíChroma.h
>

22 
	~<°rög.h
>

24 #i‡
deföed
(
SIPP_VCS
)

25 
	~<UnôTe°Api.h
>

26 
	~<DrvTimî.h
>

27 
	~<DrvDdr.h
>

30 
	~"C⁄cuºícyAµTy≥s.h
"

36 
	#CONCURRENCY_APP_NUM_PIPELINES
 0x3

	)

37 
	#CONCURRENCY_APP_FRAMES_PER_PIPE
 0x3

	)

38 
	#CONCURRENCY_TEST_CREATE_CONFLICT
 0

40 

	)

42 
	#CONCURRENCY_APP_PIPE0_WIDTH
 522

	)

43 
	#CONCURRENCY_APP_PIPE0_HEIGHT
 128

	)

44 
	#CONCURRENCY_APP_PIPE0_NUM_PLANES
 1

	)

45 
	#CONCURRENCY_APP_PIPE0_ASYNC
 0

46 
u16
 
	tt_Pùe0
;

	)

49 
	#CONCURRENCY_APP_PIPE1_WIDTH
 1280

	)

50 
	#CONCURRENCY_APP_PIPE1_HEIGHT
 720

	)

51 
	#CONCURRENCY_APP_PIPE1_NUM_PLANES
 1

	)

52 
	#CONCURRENCY_APP_PIPE1_ASYNC
 1

	)

53 
u8
 
	tt_Pùe1
;

55 #i‡
CONCURRENCY_APP_NUM_PIPELINES
 > 0x2

57 
	#CONCURRENCY_APP_PIPE2_WIDTH
 1280

	)

58 
	#CONCURRENCY_APP_PIPE2_HEIGHT
 720

	)

59 
	#CONCURRENCY_APP_PIPE2_NUM_PLANES
 1

	)

60 
	#CONCURRENCY_APP_PIPE2_ASYNC
 1

	)

61 
u8
 
	tt_Pùe2
;

65 #i‡
CONCURRENCY_APP_NUM_PIPELINES
 > 0x3

67 
	#CONCURRENCY_APP_PIPE3_WIDTH
 1280

	)

68 
	#CONCURRENCY_APP_PIPE3_HEIGHT
 720

	)

69 
	#CONCURRENCY_APP_PIPE3_NUM_PLANES
 1

	)

70 
	#CONCURRENCY_APP_PIPE3_ASYNC
 1

	)

71 
u8
 
	tt_Pùe3
;

80 
	~"≠pP¨ams.h
"

82 
u32
 
	gsùpEº‹Log
[
SIPP_ERROR_HISTORY_SIZE
];

83 vﬁ©ûê
u32
 
	gã°Com∂ëe
 = 0;

84 
C⁄cuºícyAµPùe
 
	gc⁄cuºícyPùeLi°
[
CONCURRENCY_APP_NUM_PIPELINES
];

86 #i‡
CONCURRENCY_APP_NUM_PIPELINES
 > 0x3

87 #i‡
CONCURRENCY_TEST_CREATE_CONFLICT
 > 0

88 
u32
 
	g¶i˚Fú°
[
CONCURRENCY_APP_NUM_PIPELINES
] = {0,3,6,9};

89 
u32
 
	g¶i˚La°
[
CONCURRENCY_APP_NUM_PIPELINES
] = {3,6,9,11};

91 
u32
 
	g¶i˚Fú°
[
CONCURRENCY_APP_NUM_PIPELINES
] = {0,3,6,9};

92 
u32
 
	g¶i˚La°
[
CONCURRENCY_APP_NUM_PIPELINES
] = {2,5,8,11};

94 #ñi‡
CONCURRENCY_APP_NUM_PIPELINES
 > 0x2

95 #i‡
CONCURRENCY_TEST_CREATE_CONFLICT
 > 0

96 
u32
 
	g¶i˚Fú°
[
CONCURRENCY_APP_NUM_PIPELINES
] = {0,4,8};

97 
u32
 
	g¶i˚La°
[
CONCURRENCY_APP_NUM_PIPELINES
] = {4,8,11};

99 
u32
 
	g¶i˚Fú°
[
CONCURRENCY_APP_NUM_PIPELINES
] = {0,4,8};

100 
u32
 
	g¶i˚La°
[
CONCURRENCY_APP_NUM_PIPELINES
] = {3,7,11};

103 #i‡
CONCURRENCY_TEST_CREATE_CONFLICT
 > 0

104 
u32
 
	g¶i˚Fú°
[
CONCURRENCY_APP_NUM_PIPELINES
] = {0,6};

105 
u32
 
	g¶i˚La°
[
CONCURRENCY_APP_NUM_PIPELINES
] = {6,11};

107 
u32
 
	g¶i˚Fú°
[
CONCURRENCY_APP_NUM_PIPELINES
] = {0,6};

108 
u32
 
	g¶i˚La°
[
CONCURRENCY_APP_NUM_PIPELINES
] = {5,11};

112 
u8
 * 
	gpmBöImg
[
CONCURRENCY_APP_NUM_PIPELINES
];

115 
t_Pùe0
 
DDR_DATA
 
	gDMA0_I≈utBuf„r
[
CONCURRENCY_APP_PIPE0_WIDTH
 * 
CONCURRENCY_APP_PIPE0_HEIGHT
 * 
CONCURRENCY_APP_PIPE0_NUM_PLANES
] 
ALIGNED
(8);

116 
t_Pùe1
 
DDR_DATA
 
	gDMA1_I≈utBuf„r
[
CONCURRENCY_APP_PIPE1_WIDTH
 * 
CONCURRENCY_APP_PIPE1_HEIGHT
 * 
CONCURRENCY_APP_PIPE1_NUM_PLANES
] 
ALIGNED
(8);

117 #i‡
CONCURRENCY_APP_NUM_PIPELINES
 > 0x2

118 
t_Pùe2
 
DDR_DATA
 
	gDMA2_I≈utBuf„r
[
CONCURRENCY_APP_PIPE2_WIDTH
 * 
CONCURRENCY_APP_PIPE2_HEIGHT
 * 
CONCURRENCY_APP_PIPE2_NUM_PLANES
] 
ALIGNED
(8);

120 #i‡
CONCURRENCY_APP_NUM_PIPELINES
 > 0x3

121 
t_Pùe3
 
DDR_DATA
 
	gDMA3_I≈utBuf„r
[
CONCURRENCY_APP_PIPE3_WIDTH
 * 
CONCURRENCY_APP_PIPE3_HEIGHT
 * 
CONCURRENCY_APP_PIPE3_NUM_PLANES
] 
ALIGNED
(8);

124 
t_Pùe0
 
DDR_DATA
 
	gDMA0_OuçutBuf„r
[
CONCURRENCY_APP_PIPE0_WIDTH
 * 
CONCURRENCY_APP_PIPE0_HEIGHT
 * 3 ] 
ALIGNED
(8);

125 
t_Pùe1
 
DDR_DATA
 
	gDMA1_OuçutBuf„r
[
CONCURRENCY_APP_PIPE1_WIDTH
 * 
CONCURRENCY_APP_PIPE1_HEIGHT
 * 
CONCURRENCY_APP_PIPE1_NUM_PLANES
] 
ALIGNED
(8);

126 #i‡
CONCURRENCY_APP_NUM_PIPELINES
 > 0x2

127 
t_Pùe2
 
DDR_DATA
 
	gDMA2_OuçutBuf„r
[
CONCURRENCY_APP_PIPE2_WIDTH
 * 
CONCURRENCY_APP_PIPE2_HEIGHT
 * 
CONCURRENCY_APP_PIPE2_NUM_PLANES
] 
ALIGNED
(8);

129 #i‡
CONCURRENCY_APP_NUM_PIPELINES
 > 0x3

130 
t_Pùe3
 
DDR_DATA
 
	gDMA3_OuçutBuf„r
[
CONCURRENCY_APP_PIPE3_WIDTH
 * 
CONCURRENCY_APP_PIPE3_HEIGHT
 * 
CONCURRENCY_APP_PIPE3_NUM_PLANES
] 
ALIGNED
(8);

134 
UI¡8
 
ã°_image
;

135 
u16
 
	gc⁄v5x50Cfg_cM©
[
CONCURRENCY_APP_NUM_PIPELINES
][25];

137 #ifde‡
SIPP_VCS


138 
tyAuxClkDividîCfg
 
	gauxClk
[] =

143 
tySocClockC⁄fig
 
	g˛ockC⁄fig
 =

145 .
ªfClk0I≈utKhz
 = 12000,

146 .
	gªfClk1I≈utKhz
 = 0,

147 .
	gèrgëPŒ0FªqKhz
 = 500000,

148 .
	gèrgëPŒ1FªqKhz
 = 0,

149 .
	g˛kSrcPŒ1
 = 
CLK_SRC_REFCLK0
,

150 .
	gma°îClkDivNumî©‹
 = 1,

151 .
	gma°îClkDivDíomö©‹
 = 1,

152 .
	gcssDssClockE«bÀMask
 = 
DEFAULT_CORE_CSS_DSS_CLOCKS
,

153 .
	gmssClockE«bÀMask
 = -1,

154 .
	gu∑ClockE«bÀMask
 = 
DEFAULT_UPA_CLOCKS
,

155 .
	gpAuxClkCfg
 = 
auxClk


164 
öôC⁄vM©
 (
SùpFûãr
 * 
c⁄v5x5
, 
u32
 
pùeId
, u32 
ks
);

165 
≠pSùpCÆlback
 (
SùpPùñöe
 * 
pPùñöe
,

166 
eSIPP_PIPELINE_EVENT
 
eEvít
,

167 
SIPP_PIPELINE_EVENT_DATA
 * 
±EvítD©a
);

188 
	$≠pInô
 ()

190 
	`mem£t
 (
c⁄cuºícyPùeLi°
, 0x0, (concurrencyPipeList));

192 
c⁄cuºícyPùeLi°
[0].
runAsync
 = 
CONCURRENCY_APP_PIPE0_ASYNC
;

193 
c⁄cuºícyPùeLi°
[1].
runAsync
 = 
CONCURRENCY_APP_PIPE1_ASYNC
;

194 #i‡
CONCURRENCY_APP_NUM_PIPELINES
 > 0x2

195 
c⁄cuºícyPùeLi°
[2].
runAsync
 = 
CONCURRENCY_APP_PIPE2_ASYNC
;

197 #i‡
CONCURRENCY_APP_NUM_PIPELINES
 > 0x3

198 
c⁄cuºícyPùeLi°
[3].
runAsync
 = 
CONCURRENCY_APP_PIPE3_ASYNC
;

201 
	`sùpRdFûeU8
((
UI¡8
*)
DMA0_I≈utBuf„r
,
CONCURRENCY_APP_PIPE0_WIDTH
 * 
CONCURRENCY_APP_PIPE0_HEIGHT
 * 
CONCURRENCY_APP_PIPE0_NUM_PLANES
 * (
UI¡16
),"../../../../../../../resources/test_522x128.raw");

202 
	}
}

219 
u32
 
	$≠pLookupH™dÀ
 (
SùpPùñöe
 * 
pPùñöe
)

221 
u32
 
idx
;

223 
idx
 = 0; idx < 
CONCURRENCY_APP_NUM_PIPELINES
; idx++)

225 
C⁄cuºícyAµPùe
 * 
pùe
 = &
c⁄cuºícyPùeLi°
[
idx
];

227 i‡(
pùe
->
sùpFwH™dÀ
 =
pPùñöe
)

229  
idx
;

234 
	}
}

251 
	$≠pCª©ePùñöes
 ( )

253 
u32
 
idx
;

254 
idx
 = 0; idx < 
CONCURRENCY_APP_NUM_PIPELINES
; idx++ )

256 
C⁄cuºícyAµPùe
 * 
pùe
 = &
c⁄cuºícyPùeLi°
[
idx
];

258 
pùe
->
sùpFwH™dÀ
 = 
	`sùpCª©ePùñöe
 (
¶i˚Fú°
[
idx
],

259 
¶i˚La°
[
idx
],

260 
	`SIPP_MBIN
(
mböImgSùp
));

262 i‡(
	`sùpPùeGëEº‹Sètus
 (
pùe
->
sùpFwH™dÀ
))

264 
u32
 
îrNum
;

265 
	`¥ötf
 ("Pipeline creationÉrror\nError codes:\n");

266 
îrNum
 = 
	`sùpGëEº‹Hi°‹y
 (
sùpEº‹Log
);

267 
îrNum
)

269 
	`¥ötf
 ("%08lx\n", 
sùpEº‹Log
[
îrNum
 - 0x1]);

270 
îrNum
--;

272 
	`exô
 (0x0);

276 
	`sùpRegi°îEvítCÆlback
 (
pùe
->
sùpFwH™dÀ
,

277 
≠pSùpCÆlback
);

279 
	}
}

296 
	$≠pC⁄figuªPùñöes
 ( )

298 
C⁄cuºícyAµPùe
 * 
pùe
;

299 
DmaP¨am
 * 
dmaInCfg
;

300 
DmaP¨am
 * 
dmaOutCfg
;

303 
pùe
 = &
c⁄cuºícyPùeLi°
[0];

305 
pùe
->
dmaIn
 = 
	`sùpCª©eFûãr
’ùe->
sùpFwH™dÀ
, 0x0, 
CONCURRENCY_APP_PIPE0_WIDTH
, 
CONCURRENCY_APP_PIPE0_HEIGHT
, 
	`N_PL
(1), 
	`SZ
(
UI¡16
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

306 
pùe
->
lscMa2x5x0
 = 
	`sùpCª©eFûãr
’ùe->
sùpFwH™dÀ
, 0x0, 
CONCURRENCY_APP_PIPE0_WIDTH
, 
CONCURRENCY_APP_PIPE0_HEIGHT
, 
	`N_PL
(1), 
	`SZ
(
UI¡16
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_LSC_ID
, 0);

307 
pùe
->
øwMa2x5x0
 = 
	`sùpCª©eFûãr
’ùe->
sùpFwH™dÀ
, 0x0, 
CONCURRENCY_APP_PIPE0_WIDTH
, 
CONCURRENCY_APP_PIPE0_HEIGHT
, 
	`N_PL
(1), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_RAW_ID
, 0);

308 
pùe
->
debayîMa2x5x0
 = 
	`sùpCª©eFûãr
’ùe->
sùpFwH™dÀ
, 0x0, 
CONCURRENCY_APP_PIPE0_WIDTH
, 
CONCURRENCY_APP_PIPE0_HEIGHT
, 
	`N_PL
(3), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DBYR_ID
, 0);

309 
	`sùpFûãrAddOBuf
(
pùe
->
debayîMa2x5x0
, 1, (
UI¡8
));

310 
pùe
->
gíLuma0
 = 
	`sùpCª©eFûãr
’ùe->
sùpFwH™dÀ
, 0x0, 
CONCURRENCY_APP_PIPE0_WIDTH
, 
CONCURRENCY_APP_PIPE0_HEIGHT
, 
	`N_PL
(1), 
	`SZ
(
UI¡8
), 0, 
	`SVU_SYM
(
svuGíLuma
), 0);

311 
pùe
->
lumaBlur0
 = 
	`sùpCª©eFûãr
’ùe->
sùpFwH™dÀ
, 0x0, 
CONCURRENCY_APP_PIPE0_WIDTH
, 
CONCURRENCY_APP_PIPE0_HEIGHT
, 
	`N_PL
(1), 
	`SZ
(
UI¡8
), 0, 
	`SVU_SYM
(
svuLumaBlur
), 0);

312 
pùe
->
gíChroma0
 = 
	`sùpCª©eFûãr
’ùe->
sùpFwH™dÀ
, 0x0, 
CONCURRENCY_APP_PIPE0_WIDTH
, 
CONCURRENCY_APP_PIPE0_HEIGHT
, 
	`N_PL
(3), 
	`SZ
(
UI¡8
), SZ(
ChrGíP¨am
), 
	`SVU_SYM
(
svuGíChroma
), 0);

313 
pùe
->
sh¨≥nMa2x5x1
 = 
	`sùpCª©eFûãr
’ùe->
sùpFwH™dÀ
, 0x0, 
CONCURRENCY_APP_PIPE0_WIDTH
, 
CONCURRENCY_APP_PIPE0_HEIGHT
, 
	`N_PL
(1), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_SHARPEN_ID
, 0);

314 
pùe
->
ydnsMa2x5x1
 = 
	`sùpCª©eFûãr
’ùe->
sùpFwH™dÀ
, 0x0, 
CONCURRENCY_APP_PIPE0_WIDTH
, 
CONCURRENCY_APP_PIPE0_HEIGHT
, 
	`N_PL
(1), 
	`SZ
(
Â16
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_LUMA_ID
, 0);

315 
pùe
->
pﬁypha£fúMa2x5x1
 = 
	`sùpCª©eFûãr
’ùe->
sùpFwH™dÀ
, 
SIPP_RESIZE
, 
CONCURRENCY_APP_PIPE0_WIDTH
/2, 
CONCURRENCY_APP_PIPE0_HEIGHT
/2, 
	`N_PL
(3), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_UPFIRDN_ID
, 0);

316 
pùe
->
medünMa2x5x1
 = 
	`sùpCª©eFûãr
’ùe->
sùpFwH™dÀ
, 0x0, 
CONCURRENCY_APP_PIPE0_WIDTH
/2, 
CONCURRENCY_APP_PIPE0_HEIGHT
/2, 
	`N_PL
(3), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_MED_ID
, 0);

317 
pùe
->
chromadnsMa2x5x1
 = 
	`sùpCª©eFûãr
’ùe->
sùpFwH™dÀ
, 0x0, 
CONCURRENCY_APP_PIPE0_WIDTH
/2, 
CONCURRENCY_APP_PIPE0_HEIGHT
/2, 
	`N_PL
(3), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_CHROMA_ID
, 0);

318 
pùe
->
cﬁ‹combMa2x5x1
 = 
	`sùpCª©eFûãr
’ùe->
sùpFwH™dÀ
, 0x0, 
CONCURRENCY_APP_PIPE0_WIDTH
, 
CONCURRENCY_APP_PIPE0_HEIGHT
, 
	`N_PL
(3), 
	`SZ
(
hÆf
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_CC_ID
, 0);

319 
pùe
->
lutMa2x5x1
 = 
	`sùpCª©eFûãr
’ùe->
sùpFwH™dÀ
, 0x0, 
CONCURRENCY_APP_PIPE0_WIDTH
, 
CONCURRENCY_APP_PIPE0_HEIGHT
, 
	`N_PL
(3), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_LUT_ID
, 0);

320 
pùe
->
dmaOut
 = 
	`sùpCª©eFûãr
’ùe->
sùpFwH™dÀ
, 0x0, 
CONCURRENCY_APP_PIPE0_WIDTH
, 
CONCURRENCY_APP_PIPE0_HEIGHT
, 
	`N_PL
(3), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

323 
	`sùpLökFûãr
(
pùe
->
lscMa2x5x0
,Öùe->
dmaIn
 , 1,0 );

324 
	`sùpLökFûãr
(
pùe
->
øwMa2x5x0
,Öùe->
lscMa2x5x0
, 5,0 );

325 
	`sùpLökFûãr
(
pùe
->
debayîMa2x5x0
,Öùe->
øwMa2x5x0
, 11,11 );

326 
	`sùpLökFûãr
(
pùe
->
gíLuma0
,Öùe->
debayîMa2x5x0
, 1,0 );

327 
	`sùpLökFûãr
(
pùe
->
lumaBlur0
,Öùe->
gíLuma0
, 3,3 );

328 
	`sùpLökFûãr
(
pùe
->
gíChroma0
,Öùe->
debayîMa2x5x0
, 1,1 );

329 
	`sùpLökFûãr
(
pùe
->
gíChroma0
,Öùe->
lumaBlur0
, 1,1 );

330 
	`sùpLökFûãr
(
pùe
->
sh¨≥nMa2x5x1
,Öùe->
gíLuma0
, 7,7 );

331 
	`sùpLökFûãr
(
pùe
->
ydnsMa2x5x1
,Öùe->
sh¨≥nMa2x5x1
, 11,11 );

332 
	`sùpLökFûãr
(
pùe
->
pﬁypha£fúMa2x5x1
,Öùe->
gíChroma0
, 7,7 );

333 
	`sùpLökFûãr
(
pùe
->
medünMa2x5x1
,Öùe->
pﬁypha£fúMa2x5x1
, 3,3 );

334 
	`sùpLökFûãr
(
pùe
->
chromadnsMa2x5x1
,Öùe->
medünMa2x5x1
, 3,3 );

335 
	`sùpLökFûãr
(
pùe
->
cﬁ‹combMa2x5x1
,Öùe->
ydnsMa2x5x1
, 1,1 );

336 
	`sùpLökFûãr
(
pùe
->
cﬁ‹combMa2x5x1
,Öùe->
chromadnsMa2x5x1
, 5,5 );

337 
	`sùpLökFûãr
(
pùe
->
lutMa2x5x1
,Öùe->
cﬁ‹combMa2x5x1
, 1,1 );

338 
	`sùpLökFûãr
(
pùe
->
dmaOut
,Öùe->
debayîMa2x5x0
, 1,1 );

340 i‡(
	`sùpPùeGëEº‹Sètus
 (
pùe
->
sùpFwH™dÀ
))

342 
u32
 
îrNum
;

343 
	`¥ötf
 ("Pipeline 0 creationÉrror\nError codes:\n");

344 
îrNum
 = 
	`sùpGëEº‹Hi°‹y
 (
sùpEº‹Log
);

345 
îrNum
)

347 
	`¥ötf
 ("%08lx\n", 
sùpEº‹Log
[
îrNum
 - 0x1]);

348 
îrNum
--;

350 
	`exô
 (0x0);

353 
DmaP¨am
 *
dmaIn0Cfg
 = (DmaP¨am *)
pùe
->
dmaIn
->
∑øms
;

354 
LscP¨am
 *
lscMa2x5x0Cfg
 = (LscP¨am *)
pùe
->
lscMa2x5x0
->
∑øms
;

355 
RawP¨am
 *
øwMa2x5x0Cfg
 = (RawP¨am *)
pùe
->
øwMa2x5x0
->
∑øms
;

356 
DbyrP¨am
 *
debayîMa2x5x0Cfg
 = (DbyrP¨am *)
pùe
->
debayîMa2x5x0
->
∑øms
;

357 
ChrGíP¨am
 *
gíChroma0Cfg
 = (ChrGíP¨am *)
pùe
->
gíChroma0
->
∑øms
;

358 
UsmP¨am
 *
sh¨≥nMa2x5x1Cfg
 = (UsmP¨am *)
pùe
->
sh¨≥nMa2x5x1
->
∑øms
;

359 
YDnsP¨am
 *
ydnsMa2x5x1Cfg
 = (YDnsP¨am *)
pùe
->
ydnsMa2x5x1
->
∑øms
;

360 
PﬁyFúP¨am
 *
pﬁypha£fúMa2x5x1Cfg
(PﬁyFúP¨am *)
pùe
->
pﬁypha£fúMa2x5x1
->
∑øms
;

361 
MedP¨am
 *
medünMa2x5x1Cfg
 = (MedP¨am *)
pùe
->
medünMa2x5x1
->
∑øms
;

362 
ChrDnsP¨am
 *
chromadnsMa2x5x1Cfg
(ChrDnsP¨am *)
pùe
->
chromadnsMa2x5x1
->
∑øms
;

363 
CﬁCombP¨am
 *
cﬁ‹combMa2x5x1Cfg
(CﬁCombP¨am *)
pùe
->
cﬁ‹combMa2x5x1
->
∑øms
;

364 
LutP¨am
 *
lutMa2x5x1Cfg
 = (LutP¨am *)
pùe
->
lutMa2x5x1
->
∑øms
;

365 
DmaP¨am
 *
dmaOut1Cfg
 = (DmaP¨am *)
pùe
->
dmaOut
->
∑øms
;

370 
lscMa2x5x0Cfg
->
gmBa£
(
UI¡16
*)
lscMesh
;

371 
lscMa2x5x0Cfg
->
gmWidth

LSC_GAIN_MAP_W
;

372 
lscMa2x5x0Cfg
->
gmHeight

LSC_GAIN_MAP_H
;

373 
lscMa2x5x0Cfg
->
d©aF‹m©
=
BAYER
;

374 
lscMa2x5x0Cfg
->
d©aWidth
=
BAYER_BITS
;

375 
øwMa2x5x0Cfg
->
grgbPœt

	`RAW_GRGB_PLATO
(
GRGB_IMBAL_PLAT_DARK
,
GRGB_IMBAL_PLAT_BRIGHT
);

376 
øwMa2x5x0Cfg
->
grgbDeˇy
=
	`RAW_GRGB_DECAY
(
GRGB_IMBAL_DECAY_DARK
,
GRGB_IMBAL_DECAY_BRIGHT
);

377 
øwMa2x5x0Cfg
->
badPixCfg
=
	`RAW_BAD_PIX_CFG
(
BAD_PIX_NOISE_LEVEL
, 
BAD_PIX_ALPHA_G_HOT
, 
BAD_PIX_ALPHA_G_COLD
, 
BAD_PIX_ALPHA_RB_HOT
, 
BAD_PIX_ALPHA_RB_COLD
);

378 
øwMa2x5x0Cfg
->
cfg

	`RAW_CFG
(
BAYER
,
GRBG
,0,0,0,0,(
BAYER_BITS
 - 1),(
GRGB_IMBAL_THRESHOLD
 << 16),0,0,1,0,1);

379 
øwMa2x5x0Cfg
->
gaöS©
[0]=–
DIGI_GAIN_GR
 | (
DIGI_SAT_GR
 << 16));

380 
øwMa2x5x0Cfg
->
gaöS©
[1]=(
DIGI_GAIN_R
 | (
DIGI_SAT_R
 << 16));

381 
øwMa2x5x0Cfg
->
gaöS©
[2]=(
DIGI_GAIN_B
 | (
DIGI_SAT_B
 << 16));

382 
øwMa2x5x0Cfg
->
gaöS©
[3]=(
DIGI_GAIN_GB
 | (
DIGI_SAT_GB
 << 16));

383 
øwMa2x5x0Cfg
->
°©sBa£
=0;

384 
øwMa2x5x0Cfg
->
°©sPœ√s
=0;

385 
øwMa2x5x0Cfg
->
°©sP©chCfg
=0;

386 
øwMa2x5x0Cfg
->
°©sP©chSèπ
=0;

387 
øwMa2x5x0Cfg
->
°©sP©chSkù
=0;

388 
øwMa2x5x0Cfg
->
°©sThªsh
=0;

389 
øwMa2x5x0Cfg
->
afF1c€fs
[0]=0;ÑawMa2x5x0Cfg->afF1coefs[1]=0;ÑawMa2x5x0Cfg->afF1coefs[2]=0;

390 
øwMa2x5x0Cfg
->
afF1c€fs
[3]=0;ÑawMa2x5x0Cfg->afF1coefs[4]=0;ÑawMa2x5x0Cfg->afF1coefs[5]=0;

391 
øwMa2x5x0Cfg
->
afF1c€fs
[6]=0;ÑawMa2x5x0Cfg->afF1coefs[7]=0;ÑawMa2x5x0Cfg->afF1coefs[8]=0;

392 
øwMa2x5x0Cfg
->
afF1c€fs
[9]=0;ÑawMa2x5x0Cfg->afF1c€fs[10]=0;ÑawMa2x5x0Cfg->
afF2c€fs
[0]=0;

393 
øwMa2x5x0Cfg
->
afF2c€fs
[1]=0;ÑawMa2x5x0Cfg->afF2coefs[2]=0;ÑawMa2x5x0Cfg->afF2coefs[3]=0;

394 
øwMa2x5x0Cfg
->
afF2c€fs
[4]=0;ÑawMa2x5x0Cfg->afF2coefs[5]=0;ÑawMa2x5x0Cfg->afF2coefs[6]=0;

395 
øwMa2x5x0Cfg
->
afF2c€fs
[7]=0;ÑawMa2x5x0Cfg->afF2coefs[8]=0;ÑawMa2x5x0Cfg->afF2coefs[9]=0;

396 
øwMa2x5x0Cfg
->
afF2c€fs
[10]=0;

397 
øwMa2x5x0Cfg
->
afMöThªsh
=0;

398 
øwMa2x5x0Cfg
->
afSubåa˘
=0;

399 
øwMa2x5x0Cfg
->
afP©chCfg
=0;

400 
øwMa2x5x0Cfg
->
afP©chSèπ
=0;

401 
øwMa2x5x0Cfg
->
afSètsBa£
=0;

402 
øwMa2x5x0Cfg
->
hi°LumaBa£
=0;

403 
øwMa2x5x0Cfg
->
hi°RgbBa£
=0;

404 
debayîMa2x5x0Cfg
->
cfg

	`DEBAYER_CFG
(
GRBG
,0 ,0,8,8,
P_RGB
,3,0);

405 
debayîMa2x5x0Cfg
->
thªsh
=
	`DEBAYER_THRESH
(0,0,1,0,0,0);

406 
debayîMa2x5x0Cfg
->
dew‹mCfg
=0;

407 
debayîMa2x5x0Cfg
->
lumaWeight
=0;

408 
gíChroma0Cfg
->
ïsû⁄
= 1;

409 
sh¨≥nMa2x5x1Cfg
->
cfg

	`SHARPEN_CFG
(
SHARP_MIN_THR
,7,1,0,0);

410 
sh¨≥nMa2x5x1Cfg
->
°ªngth
=
	`SHARPEN_STRENGTH_CFG
(
SHARP_STRENGTH
, SHARP_STRENGTH);

411 
sh¨≥nMa2x5x1Cfg
->
˛ù

SHARP_ALPHA
;

412 
sh¨≥nMa2x5x1Cfg
->
limô
=
	`SHARPEN_LIMITS_CFG
(
SHARP_UNDERSHOOT
,
SHARP_OVERSHOOT
);

413 
sh¨≥nMa2x5x1Cfg
->
rgnSt›01
=
	`SHARPEN_RANGESTOP01_CFG
(
SHARP_RANGE_STOP_0
, 
SHARP_RANGE_STOP_1
);

414 
sh¨≥nMa2x5x1Cfg
->
rgnSt›23
=
	`SHARPEN_RANGESTOP23_CFG
(
SHARP_RANGE_STOP_2
, 
SHARP_RANGE_STOP_3
);

415 
sh¨≥nMa2x5x1Cfg
->
c€f01
=
	`SHARPEN_COEFS01_CFG
(
sh¨≥n_c€ffs
[0],sharpen_coeffs[1]);

416 
sh¨≥nMa2x5x1Cfg
->
c€f23
=
	`SHARPEN_COEFS23_CFG
(
sh¨≥n_c€ffs
[2],sharpen_coeffs[3]);

417 
ydnsMa2x5x1Cfg
->
cfg

	`LUMA_DNS_CFG
 (0, 0, 
LUMA_DNS_ALPHA
, 
bôpos
);

418 
ydnsMa2x5x1Cfg
->
gaussLut
[0]=gaussLut[0]; ydnsMa2x5x1Cfg->gaussLut[1]=gaussLut[1];

419 
ydnsMa2x5x1Cfg
->
gaussLut
[2]=gaussLut[2]; ydnsMa2x5x1Cfg->gaussLut[3]=gaussLut[3];

420 
ydnsMa2x5x1Cfg
->
f2

LUMA_DNS_F2
;

421 
ydnsMa2x5x1Cfg
->
gammaLut
[0]=gammaLut[0]; ydnsMa2x5x1Cfg->gammaLut[1]=gammaLut[1];

422 
ydnsMa2x5x1Cfg
->
gammaLut
[2]=gammaLut[2]; ydnsMa2x5x1Cfg->gammaLut[3]=gammaLut[3];

423 
ydnsMa2x5x1Cfg
->
gammaLut
[4]=gammaLut[4];

424 
ydnsMa2x5x1Cfg
->
di°Cfg
(
UI¡32
)&
di°LUT
[0];

425 
ydnsMa2x5x1Cfg
->
di°Off£ts
=
LUMA_DNS_X_OFFSET
 | (
LUMA_DNS_Y_OFFSET
 << 16);

426 
ydnsMa2x5x1Cfg
->
fuŒFrmDim
=
ISP_PIPE_INPUT_BUFFER_WIDTH
 | (
ISP_PIPE_INPUT_BUFFER_HEIGHT
 << 16);

427 
pﬁypha£fúMa2x5x1Cfg
->
˛amp
=0;

428 
pﬁypha£fúMa2x5x1Cfg
->
h‹zD
=
HORZ_D
;

429 
pﬁypha£fúMa2x5x1Cfg
->
h‹zN
=
HORZ_N
;

430 
pﬁypha£fúMa2x5x1Cfg
->
vîtD
=
VERT_D
;

431 
pﬁypha£fúMa2x5x1Cfg
->
vîtN
=
VERT_N
;

432 
pﬁypha£fúMa2x5x1Cfg
->
h‹zC€fs
=horzCoefs;

433 
pﬁypha£fúMa2x5x1Cfg
->
vîtC€fs
=vertCoefs;

434 
pﬁypha£fúMa2x5x1Cfg
->
∂™eMode
=
POLY_PLANE_ALL
;

435 
medünMa2x5x1Cfg
->
cfg

	`MED_CFG
(
CHROMA_MEDIAN_SIZE
,((CHROMA_MEDIAN_SIZE * CHROMA_MEDIAN_SIZE)>>1),0,0,0,0);

436 
medünMa2x5x1Cfg
->
lumaAÕha
=0;

437 
chromadnsMa2x5x1Cfg
->
cfg

	`CHROMA_DNS_CFG
(
CHROMA_DNS_H_ENAB
,
CHROMA_DNS_LIM
,0,0,0,0,0);

438 
chromadnsMa2x5x1Cfg
->
thr
[0]=(
CHROMA_DNS_T1
 << 0Ë| (
CHROMA_DNS_T2
 << 8) | (CHROMA_DNS_T1 << 16) | (CHROMA_DNS_T2 << 24);

439 
chromadnsMa2x5x1Cfg
->
thr
[1]=0;

440 
chromadnsMa2x5x1Cfg
->
gªyPt
=
	`CHORMA_GREY_PT_SET
(0,0,0,1);

441 
chromadnsMa2x5x1Cfg
->
chrC€fs
=
	`CHROMA_DNS_COEFFS_SET
(0x74,0x1c,0x07);

442 
cﬁ‹combMa2x5x1Cfg
->
cfg
=
	`CC_CFG
(0,0,1,0,0,3);

443 
cﬁ‹combMa2x5x1Cfg
->
krgb
[0]=(((
UI¡32
)((255.0f*(1.0f/(255.0f/3.0f)))*256))<< 0)|(((UInt32)((255.0f*(1.0f/(255.0f/3.0f)))*256))<<16);

444 
cﬁ‹combMa2x5x1Cfg
->
krgb
[1]=(
UI¡32
)((255.0f*(1.0f/(255.0f/3.0f)))*256);

445 
cﬁ‹combMa2x5x1Cfg
->
ccm
[0]=(
	`CCM_COEF
(ccm[0]) | (CCM_COEF(ccm[3])<<16));

446 
cﬁ‹combMa2x5x1Cfg
->
ccm
[1]=(
	`CCM_COEF
(ccm[6]) | (CCM_COEF(ccm[1])<<16));

447 
cﬁ‹combMa2x5x1Cfg
->
ccm
[2]=(
	`CCM_COEF
(ccm[4]) | (CCM_COEF(ccm[7])<<16));

448 
cﬁ‹combMa2x5x1Cfg
->
ccm
[3]=(
	`CCM_COEF
(ccm[2]) | (CCM_COEF(ccm[5])<<16));

449 
cﬁ‹combMa2x5x1Cfg
->
ccm
[4]=
	`CCM_COEF
(ccm[8]);

450 
cﬁ‹combMa2x5x1Cfg
->
ccOffs
=0;

451 
cﬁ‹combMa2x5x1Cfg
->
thªeDLut
=0;

452 
cﬁ‹combMa2x5x1Cfg
->
lutF‹m©
=0;

453 
lutMa2x5x1Cfg
->
cfg

	`LUT_CFG
(0, 0, 0, 0, 0, 16, 0,1);

454 
lutMa2x5x1Cfg
->
sizeA

	`LUT_REGION_0_TO_7_SIZE
(0x4,0x4,0x4,0x4,0x4,0x4,0x4,0x4);

455 
lutMa2x5x1Cfg
->
sizeB

	`LUT_REGION_8_TO_15_SIZE
(0x4,0x4,0x4,0x4,0x4,0x4,0x4,0x4);

456 
lutMa2x5x1Cfg
->
lut

gammaTabÀ
;

457 
lutMa2x5x1Cfg
->
lutF‹m©
=2;

458 
lutMa2x5x1Cfg
->
m©
[0]= 0;ÜutMa2x5x1Cfg->mat[1]= 0;ÜutMa2x5x1Cfg->mat[2]= 0;

459 
lutMa2x5x1Cfg
->
m©
[3]= 0;ÜutMa2x5x1Cfg->mat[4]= 0;ÜutMa2x5x1Cfg->mat[5]= 0;

460 
lutMa2x5x1Cfg
->
m©
[6]= 0;ÜutMa2x5x1Cfg->mat[7]= 0;ÜutMa2x5x1Cfg->mat[8]= 0;

461 
lutMa2x5x1Cfg
->
off£t
[0]=0;

462 
lutMa2x5x1Cfg
->
off£t
[1]=0;

463 
lutMa2x5x1Cfg
->
off£t
[2]=0;

464 
dmaIn0Cfg
->
ddrAddr
 = (
UI¡32
)
DMA0_I≈utBuf„r
;

465 
dmaOut1Cfg
->
ddrAddr
 = (
UI¡32
)
DMA0_OuçutBuf„r
;

467 
	`sùpFöÆizePùñöe
 (
pùe
->
sùpFwH™dÀ
);

469 i‡(
	`sùpPùeGëEº‹Sètus
 (
pùe
->
sùpFwH™dÀ
))

471 
u32
 
îrNum
;

472 
	`¥ötf
 ("Pipeline 0 finalization failed\nError codes:\n");

473 
îrNum
 = 
	`sùpGëEº‹Hi°‹y
 (
sùpEº‹Log
);

474 
îrNum
)

476 
	`¥ötf
 ("%08lx\n", 
sùpEº‹Log
[
îrNum
 - 0x1]);

477 
îrNum
--;

479 
	`exô
 (0x0);

483 
pùe
 = &
c⁄cuºícyPùeLi°
[1];

484 
pùe
->
dmaIn
 = 
	`sùpCª©eFûãr
 (pùe->
sùpFwH™dÀ
, 0x0, 
CONCURRENCY_APP_PIPE1_WIDTH
, 
CONCURRENCY_APP_PIPE1_HEIGHT
, 
	`N_PL
(
CONCURRENCY_APP_PIPE1_NUM_PLANES
), 
	`SZ
(
t_Pùe1
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

485 
pùe
->
sobñ0
 = 
	`sùpCª©eFûãr
 (pùe->
sùpFwH™dÀ
, 0x0, 
CONCURRENCY_APP_PIPE1_WIDTH
, 
CONCURRENCY_APP_PIPE1_HEIGHT
, 
	`N_PL
(
CONCURRENCY_APP_PIPE1_NUM_PLANES
), 
	`SZ
(
t_Pùe1
), 0, 
	`SVU_SYM
(
svuSobñ
), 0);

486 
pùe
->
îode3x30
 = 
	`sùpCª©eFûãr
 (pùe->
sùpFwH™dÀ
, 0x0, 
CONCURRENCY_APP_PIPE1_WIDTH
, 
CONCURRENCY_APP_PIPE1_HEIGHT
, 
	`N_PL
(
CONCURRENCY_APP_PIPE1_NUM_PLANES
), 
	`SZ
(
t_Pùe1
), SZ(
Erode3x3P¨am
), 
	`SVU_SYM
(
svuErode3x3
), 0);

487 
pùe
->
dû©e3x30
 = 
	`sùpCª©eFûãr
 (pùe->
sùpFwH™dÀ
, 0x0, 
CONCURRENCY_APP_PIPE1_WIDTH
, 
CONCURRENCY_APP_PIPE1_HEIGHT
, 
	`N_PL
(
CONCURRENCY_APP_PIPE1_NUM_PLANES
), 
	`SZ
(
t_Pùe1
), SZ(
Dû©e3x3P¨am
), 
	`SVU_SYM
(
svuDû©e3x3
), 0);

488 
pùe
->
lut0
 = 
	`sùpCª©eFûãr
 (pùe->
sùpFwH™dÀ
, 0x0, 
CONCURRENCY_APP_PIPE1_WIDTH
, 
CONCURRENCY_APP_PIPE1_HEIGHT
, 
	`N_PL
(
CONCURRENCY_APP_PIPE1_NUM_PLANES
), 
	`SZ
(
t_Pùe1
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_LUT_ID
, 0);

489 
pùe
->
dmaOut
 = 
	`sùpCª©eFûãr
 (pùe->
sùpFwH™dÀ
, 0x0, 
CONCURRENCY_APP_PIPE1_WIDTH
, 
CONCURRENCY_APP_PIPE1_HEIGHT
, 
	`N_PL
(
CONCURRENCY_APP_PIPE1_NUM_PLANES
), 
	`SZ
(
t_Pùe1
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

492 
	`sùpLökFûãr
 (
pùe
->
sobñ0
,Öùe->
dmaIn
, 3, 3 );

493 
	`sùpLökFûãr
 (
pùe
->
îode3x30
,Öùe->
sobñ0
, 3, 3 );

494 
	`sùpLökFûãr
 (
pùe
->
dû©e3x30
,Öùe->
îode3x30
, 3, 3 );

495 
	`sùpLökFûãr
 (
pùe
->
lut0
,Öùe->
dû©e3x30
, 1, 1 );

496 
	`sùpLökFûãr
 (
pùe
->
dmaOut
,Öùe->
lut0
, 1, 1 );

498 i‡(
	`sùpPùeGëEº‹Sètus
 (
pùe
->
sùpFwH™dÀ
))

500 
u32
 
îrNum
;

501 
	`¥ötf
 ("Pipeline 1 creationÉrror\nError codes:\n");

502 
îrNum
 = 
	`sùpGëEº‹Hi°‹y
 (
sùpEº‹Log
);

503 
îrNum
)

505 
	`¥ötf
 ("%08lx\n", 
sùpEº‹Log
[
îrNum
 - 0x1]);

506 
îrNum
--;

508 
	`exô
 (0x0);

511 
dmaInCfg
 = (
DmaP¨am
 *)
pùe
->
dmaIn
->
∑øms
;

512 
dmaOutCfg
 = (
DmaP¨am
 *)
pùe
->
dmaOut
->
∑øms
;

513 
dmaInCfg
->
ddrAddr
 = (
UI¡32
)&
ã°_image
;

514 
dmaOutCfg
->
ddrAddr
 = (
UI¡32
)
DMA1_OuçutBuf„r
;

516 
Erode3x3P¨am
 *
îode3x30Cfg
 = (Erode3x3P¨am *)
pùe
->
îode3x30
->
∑øms
;

517 
Dû©e3x3P¨am
 *
dû©e3x30Cfg
 = (Dû©e3x3P¨am *)
pùe
->
dû©e3x30
->
∑øms
;

518 
LutP¨am
 *
lut0Cfg
 = (LutP¨am *)
pùe
->
lut0
->
∑øms
;

520 
îode3x30Cfg
->
eM©
[0]&
îodeM©
[0];

521 
îode3x30Cfg
->
eM©
[1]&
îodeM©
[3];

522 
îode3x30Cfg
->
eM©
[2]&
îodeM©
[6];

523 
dû©e3x30Cfg
->
dM©
[0]&
dû©eM©
[0];

524 
dû©e3x30Cfg
->
dM©
[1]&
dû©eM©
[3];

525 
dû©e3x30Cfg
->
dM©
[2]&
dû©eM©
[6];

526 
lut0Cfg
->
cfg
= (0 ) | (0 << 1) | (8 << 3) | (0 << 8);

527 
lut0Cfg
->
sizeA
= 0x44444444;

528 
lut0Cfg
->
sizeB
= 0x44444444;

529 
lut0Cfg
->
lut

lutTab
;

531 
	`sùpFöÆizePùñöe
 (
pùe
->
sùpFwH™dÀ
);

533 i‡(
	`sùpPùeGëEº‹Sètus
 (
pùe
->
sùpFwH™dÀ
))

535 
u32
 
îrNum
;

536 
	`¥ötf
 ("Pipeline 1 finalization failed\nError codes:\n");

537 
îrNum
 = 
	`sùpGëEº‹Hi°‹y
 (
sùpEº‹Log
);

538 
îrNum
)

540 
	`¥ötf
 ("%08lx\n", 
sùpEº‹Log
[
îrNum
 - 0x1]);

541 
îrNum
--;

543 
	`exô
 (0x0);

546 #i‡
CONCURRENCY_APP_NUM_PIPELINES
 > 2

548 
pùe
 = &
c⁄cuºícyPùeLi°
[2];

550 
pùe
->
dmaIn
 = 
	`sùpCª©eFûãr
 (pùe->
sùpFwH™dÀ
, 0x0, 
CONCURRENCY_APP_PIPE2_WIDTH
, 
CONCURRENCY_APP_PIPE2_HEIGHT
, 
	`N_PL
(
CONCURRENCY_APP_PIPE2_NUM_PLANES
), 
	`SZ
(
t_Pùe2
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

551 
pùe
->
c⁄v5x5
 = 
	`sùpCª©eFûãr
 (pùe->
sùpFwH™dÀ
, 0x0, 
CONCURRENCY_APP_PIPE2_WIDTH
, 
CONCURRENCY_APP_PIPE2_HEIGHT
, 
	`N_PL
(
CONCURRENCY_APP_PIPE2_NUM_PLANES
), 
	`SZ
(
t_Pùe2
), SZ(
C⁄v5x5P¨am
), 
	`SVU_SYM
(
svuC⁄v5x5
), 0);

552 
pùe
->
box5x5
 = 
	`sùpCª©eFûãr
 (pùe->
sùpFwH™dÀ
, 0x0, 
CONCURRENCY_APP_PIPE2_WIDTH
, 
CONCURRENCY_APP_PIPE2_HEIGHT
, 
	`N_PL
(
CONCURRENCY_APP_PIPE2_NUM_PLANES
), 
	`SZ
(
t_Pùe2
), SZ(
BoxFûãr5x5P¨am
), 
	`SVU_SYM
(
svuBoxFûãr5x5
),0);

553 
pùe
->
œp5x5
 = 
	`sùpCª©eFûãr
 (pùe->
sùpFwH™dÀ
, 0x0, 
CONCURRENCY_APP_PIPE2_WIDTH
, 
CONCURRENCY_APP_PIPE2_HEIGHT
, 
	`N_PL
(
CONCURRENCY_APP_PIPE2_NUM_PLANES
), 
	`SZ
(
t_Pùe2
), SZ(0), 
	`SVU_SYM
(
svuL≠œcün5x5
), 0);

554 
pùe
->
dmaOut
 = 
	`sùpCª©eFûãr
 (pùe->
sùpFwH™dÀ
, 0x0, 
CONCURRENCY_APP_PIPE2_WIDTH
, 
CONCURRENCY_APP_PIPE2_HEIGHT
, 
	`N_PL
(
CONCURRENCY_APP_PIPE2_NUM_PLANES
), 
	`SZ
(
t_Pùe2
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

557 
	`sùpLökFûãr
 (
pùe
->
c⁄v5x5
,Öùe->
dmaIn
, 5, 5 );

558 
	`sùpLökFûãr
 (
pùe
->
box5x5
,Öùe->
c⁄v5x5
, 5, 5 );

559 
	`sùpLökFûãr
 (
pùe
->
œp5x5
,Öùe->
box5x5
, 5, 5 );

560 
	`sùpLökFûãr
 (
pùe
->
dmaOut
,Öùe->
œp5x5
, 1, 0 );

562 i‡(
	`sùpPùeGëEº‹Sètus
 (
pùe
->
sùpFwH™dÀ
))

564 
u32
 
îrNum
;

565 
	`¥ötf
 ("Pipeline 2 creationÉrror\nError codes:\n");

566 
îrNum
 = 
	`sùpGëEº‹Hi°‹y
 (
sùpEº‹Log
);

567 
îrNum
)

569 
	`¥ötf
 ("%08lx\n", 
sùpEº‹Log
[
îrNum
 - 0x1]);

570 
îrNum
--;

572 
	`exô
 (0x0);

575 
dmaInCfg
 = (
DmaP¨am
 *)
pùe
->
dmaIn
->
∑øms
;

576 
dmaOutCfg
 = (
DmaP¨am
 *)
pùe
->
dmaOut
->
∑øms
;

577 
dmaInCfg
->
ddrAddr
 = (
UI¡32
)&
ã°_image
;

578 
dmaOutCfg
->
ddrAddr
 = (
UI¡32
)
DMA2_OuçutBuf„r
;

580 
	`öôC⁄vM©
 (
pùe
->
c⁄v5x5
, 0x1, 
KERNEL_SIZE
);

582 
BoxFûãr5x5P¨am
 * 
boxCfg
 = (BoxFûãr5x5P¨am *)
pùe
->
box5x5
->
∑øms
;

583 
boxCfg
->
n‹mÆize
 = 0;

585 
	`sùpFöÆizePùñöe
 (
pùe
->
sùpFwH™dÀ
);

587 i‡(
	`sùpPùeGëEº‹Sètus
 (
pùe
->
sùpFwH™dÀ
))

589 
u32
 
îrNum
;

590 
	`¥ötf
 ("Pipeline 2 finalization failed\nError codes:\n");

591 
îrNum
 = 
	`sùpGëEº‹Hi°‹y
 (
sùpEº‹Log
);

592 
îrNum
)

594 
	`¥ötf
 ("%08lx\n", 
sùpEº‹Log
[
îrNum
 - 0x1]);

595 
îrNum
--;

597 
	`exô
 (0x0);

602 #i‡
CONCURRENCY_APP_NUM_PIPELINES
 > 3

604 
pùe
 = &
c⁄cuºícyPùeLi°
[3];

608 
	}
}

625 
	$≠pLogEvít
 (
C⁄cuºícyAµPùe
 * 
pùe
,

626 
CC_APP_PIPE_EVENT
 
evít
)

628 #i‚de‡
SIPP_PC


630 
u32
 
°‹edIL
 = 
	`swcLe⁄GëPIL
 ();

631 
	`swcLe⁄SëPIL
 (15);

634 
pùe
->
evítLi°
[pùe->
evítLi°WrPå
++] = 
evít
;

635 i‡(
pùe
->
evítLi°WrPå
 =
CC_APP_EVENT_HISTORY_SIZE
)Öipe->eventListWrPtr = 0;

637 #i‚de‡
SIPP_PC


638 
	`swcLe⁄SëPIL
 (
°‹edIL
);

641 
	}
}

658 
CC_APP_PIPE_EVENT
 
	$≠pPro˚ssEvít
 (
C⁄cuºícyAµPùe
 * 
pùe
)

660 
CC_APP_PIPE_EVENT
 
ªtVÆ
 = 
CC_APP_PIPE_EVENT_NONE
;

662 i‡(
pùe
->
evítLi°WrPå
 !pùe->
evítLi°RdPå
 )

664 
ªtVÆ
 = 
pùe
->
evítLi°
[pùe->
evítLi°RdPå
++];

665 i‡(
pùe
->
evítLi°RdPå
 =
CC_APP_EVENT_HISTORY_SIZE
)Öipe->eventListRdPtr = 0;

669  
ªtVÆ
;

670 
	}
}

687 
	$≠pSùpCÆlback
 (
SùpPùñöe
 * 
pPùñöe
,

688 
eSIPP_PIPELINE_EVENT
 
eEvít
,

689 
SIPP_PIPELINE_EVENT_DATA
 * 
±EvítD©a
)

692 
u32
 
pùeIdx
 = 
	`≠pLookupH™dÀ
 (
pPùñöe
);

693 
C⁄cuºícyAµPùe
 * 
pùe
 = &
c⁄cuºícyPùeLi°
[
pùeIdx
];

695 
	`UNUSED
(
±EvítD©a
);

697 i‡(
eEvít
 =
eSIPP_PIPELINE_FRAME_DONE
)

699 
	`¥ötf
 ("Pùê%lu com∂ëe†‰ame\n", 
pùeIdx
);

700 
	`≠pLogEvít
 (
pùe
,

701 
CC_APP_PIPE_EVENT_FRAME_DONE
);

704 
	}
}

721 
u32
 
	$≠pCheckCom∂ëe
 ( )

723 
u32
 
ªtVÆ
 = 0x1;

724 
u32
 
idx
;

726 
idx
 = 0; idx < 
CONCURRENCY_APP_NUM_PIPELINES
; idx++ )

728 
C⁄cuºícyAµPùe
 * 
pùe
 = &
c⁄cuºícyPùeLi°
[
idx
];

729 i‡(
pùe
->
eSèã
 !
CC_APP_PIPE_STATE_COMPLETE
)

731 
ªtVÆ
 = 0x0;

736  
ªtVÆ
;

737 
	}
}

755 
	$≠pTask
 ()

757 
u32
 
pùeIdx
;

759 
ã°Com∂ëe
 == 0)

761 
pùeIdx
 = 0x0;ÖùeIdx < 
CONCURRENCY_APP_NUM_PIPELINES
;ÖipeIdx++)

763 
C⁄cuºícyAµPùe
 * 
pùe
 = &
c⁄cuºícyPùeLi°
[
pùeIdx
];

765 
pùe
->
eSèã
)

767 
CC_APP_PIPE_STATE_UNINIT
 : {

768 
pùe
->
eSèã
 = 
CC_APP_PIPE_STATE_IDLE
;

770 
CC_APP_PIPE_STATE_IDLE
 : {

771 i‡(
pùe
->
‰amesCom∂ëe
 < 
CONCURRENCY_APP_FRAMES_PER_PIPE
)

773 i‡(
pùe
->
runAsync
)

775 
	`¥ötf
("Pùê%lu cÆ»¥o˚s†‰amêasync\n", 
pùeIdx
);

776 
	`sùpPro˚ssFømeNB
 (
pùe
->
sùpFwH™dÀ
);

777 
pùe
->
eSèã
 = 
CC_APP_PIPE_STATE_RUNNING
;

781 
u32
 
îrCode
 = (u32)
E_BLOCK_CALL_REJECTED
;

782 
u32
 
îrMaskIdx
 = 
îrCode
 >> 5;

783 
u32
 
îrMaskE¡ry
 = 0x1 << (
îrCode
 & 0x1F);

786 
	`sùpPro˚ssFøme
 (
pùe
->
sùpFwH™dÀ
);

790 i‡(
pùe
->
sùpFwH™dÀ
->
îr‹Sètus
[
îrMaskIdx
] & 
îrMaskE¡ry
)

792 
	`¥ötf
 ("Pùê%lu faûed i¿ˇŒÅÿblockög API sùpPro˚ssFømêduêtÿa˘ivê™d/‹Öídög o≥øti⁄s\n", 
pùeIdx
);

794 
pùe
->
sùpFwH™dÀ
->
îr‹Sètus
[
îrMaskIdx
] &(~
îrMaskE¡ry
);

798 
	`¥ötf
 ("Pùê%lu suc˚ssfuŒy cÆÀd blockög API sùpPro˚ssFøme\n", 
pùeIdx
);

799 
pùe
->
‰amesCom∂ëe
++;

800 
pùe
->
eSèã
 = 
CC_APP_PIPE_STATE_IDLE
;

806 
	`¥ötf
 ("Pùê%lu com∂ëedÑu¿o‡%lu images\n", 
pùeIdx
, 
pùe
->
‰amesCom∂ëe
);

807 
	`sùpFømew‹kRun
 ();

808 
pùe
->
eSèã
 = 
CC_APP_PIPE_STATE_COMPLETE
;

812 
CC_APP_PIPE_STATE_RUNNING
 : {

813 
CC_APP_PIPE_EVENT
 
evít
;

814 (
evít
 = 
	`≠pPro˚ssEvít
 (
pùe
)Ë!
CC_APP_PIPE_EVENT_NONE
)

816 
evít
)

818 
CC_APP_PIPE_EVENT_FRAME_DONE
 : {

819 
pùe
->
‰amesCom∂ëe
++;

820 
pùe
->
eSèã
 = 
CC_APP_PIPE_STATE_IDLE
;

826 
CC_APP_PIPE_STATE_COMPLETE
 : {

827 i‡(
	`≠pCheckCom∂ëe
())

829 
ã°Com∂ëe
 = 1;

833 
	`¥ötf
 ("Unknow¿°©ê⁄Öùê%lu - Tîmö©ögÉ¨ly\n", 
pùeIdx
);

834 
	`exô
 (0x0);

839 
	}
}

859 
	$maö
 (
¨gc
, *
¨gv
[])

861 
	`UNUSED
 (
¨gc
);

862 
	`UNUSED
 (
¨gv
);

864 #ifde‡
SIPP_VCS


865 
	`unôTe°Inô
 ();

866 
	`DrvC¥Inô
();

867 
	`DrvDdrInôüli£
 (
NULL
);

868 
	`DrvC¥SëupClocks
(&
˛ockC⁄fig
);

871 
	`sùpPœtf‹mInô
 ();

873 #ifde‡
SIPP_VCS


874 
	`DrvTimîInô
 ();

877 #i‚de‡
SIPP_PC


878 i‡(
PROCESS_LEON_OS
 =
	`swcWhoAmI
())

880 
	`¥ötf
 ("App Starting on LEON OS\n");

881 
	`¥ötf
 ("Please make sure IRQ sources for dynamicallyÑoute between LeonOSánd LeonRTáre set\n");

885 
	`¥ötf
 ("App Starting on LEON RT\n");

889 
	`sùpPœtf‹mInôAsync
 ();

891 
	`≠pInô
 ();

892 
	`≠pCª©ePùñöes
 ();

893 
	`≠pC⁄figuªPùñöes
 ();

896 
	`≠pTask
 ();

898 #ifde‡
SIPP_VCS


899 
	`unôTe°FöÆRï‹t
();

903 
	}
}

	@Sipp/SippFw/ConcurrencyTest/MixedIspCvPipe_concurrent/leon/utils.c

11 
	~<sùp.h
>

12 
	~<sùpTe°Comm⁄.h
>

13 
	~<fûãrs/c⁄v5x5/c⁄v5x5.h
>

15 
u16
 
c⁄vM©rix
[5 * 5];

16 
u16
 
c⁄v5x50Cfg_cM©
[][5 * 5];

18 
	$öôC⁄vM©
 (
SùpFûãr
 * 
c⁄v5x5
, 
u32
 
pùeId
, u32 
ks
)

20 
u32
 
i
;

21 
C⁄v5x5P¨am
 *
c⁄vCfg
 = (C⁄v5x5P¨am*)
c⁄v5x5
->
∑øms
;

23 
c⁄vCfg
->
cM©
 = 
c⁄v5x50Cfg_cM©
[
pùeId
];

25 
i
 = 0; i < 
ks
 * ks; i++)

27 
c⁄vCfg
->
cM©
[
i
] = 
c⁄vM©rix
[i];

29 
	}
}

	@Sipp/SippFw/ConcurrencyTest/MixedSyncAsyncPipe_concurrent/leon/ConcurrencyAppTypes.h

10 #i‚de‡
__CONCURRENCY_APP_TYPES_H__


11 
	#__CONCURRENCY_APP_TYPES_H__


	)

16 
	#CC_APP_EVENT_HISTORY_SIZE
 0x8

	)

27 
	mCC_APP_PIPE_STATE_UNINIT
 = 0x00,

28 
	mCC_APP_PIPE_STATE_IDLE
 = 0x01,

29 
	mCC_APP_PIPE_STATE_RUNNING
 = 0x02,

30 
	mCC_APP_PIPE_STATE_COMPLETE
 = 0x03

32 } 
	tCC_APP_PIPE_STATE
;

39 
	mCC_APP_PIPE_EVENT_NONE
 = 0x00,

40 
	mCC_APP_PIPE_EVENT_FRAME_DONE
 = 0x01

42 } 
	tCC_APP_PIPE_EVENT
;

50 
CC_APP_PIPE_STATE
 
	meSèã
;

51 
SùpPùñöe
 * 
	msùpFwH™dÀ
;

53 
SùpFûãr
 * 
	mdmaIn
;

54 
SùpFûãr
 * 
	mdmaOut
;

55 
SùpFûãr
 * 
	mHWFûãr
;

56 
SùpFûãr
 * 
	mSWFûãr
;

58 
u32
 
	m‰amesCom∂ëe
;

60 
CC_APP_PIPE_EVENT
 
	mevítLi°
[
CC_APP_EVENT_HISTORY_SIZE
];

61 
u32
 
	mevítLi°WrPå
;

62 
u32
 
	mevítLi°RdPå
;

64 
u32
 
	mrunAsync
;

66 } 
	tC⁄cuºícyAµPùe
, * 
	tpC⁄cuºícyAµPùe
;

	@Sipp/SippFw/ConcurrencyTest/MixedSyncAsyncPipe_concurrent/leon/appParams.h

8 
	#KERNEL_SIZE
 5

	)

10 
u16
 
	gc⁄vM©rix
[
KERNEL_SIZE
 * KERNEL_SIZE] =

19 
u16
 
	ghwKî
[
KERNEL_SIZE
 * KERNEL_SIZE] =

	@Sipp/SippFw/ConcurrencyTest/MixedSyncAsyncPipe_concurrent/leon/main.c

11 
	~<sùp.h
>

12 
	~<sùpTe°Comm⁄.h
>

13 
	~<fûãrs/c⁄v5x5/c⁄v5x5.h
>

14 
	~<fûãrs/boxFûãr5x5/boxFûãr5x5.h
>

15 
	~<°rög.h
>

17 #i‡
deföed
(
SIPP_VCS
)

18 
	~<UnôTe°Api.h
>

19 
	~<DrvTimî.h
>

20 
	~<DrvDdr.h
>

23 
	~"C⁄cuºícyAµTy≥s.h
"

29 #i‚de‡
SIPP_PC


30 
	#SIPP_USE_PRECALC_SCHEDULE


	)

32 
	#CONCURRENCY_APP_NUM_PIPELINES
 0x2

	)

33 
	#CONCURRENCY_APP_FRAMES_PER_PIPE
 0x3

	)

34 
	#CONCURRENCY_TEST_CREATE_CONFLICT
 0

36 

	)

38 
	#CONCURRENCY_APP_PIPE0_WIDTH
 1280

	)

39 
	#CONCURRENCY_APP_PIPE0_HEIGHT
 720

	)

40 
	#CONCURRENCY_APP_PIPE0_NUM_PLANES
 1

	)

41 
	#CONCURRENCY_APP_PIPE0_ASYNC
 1

	)

42 
u8
 
	tt_Pùe0
;

45 
	#CONCURRENCY_APP_PIPE1_WIDTH
 1280

	)

46 
	#CONCURRENCY_APP_PIPE1_HEIGHT
 720

	)

47 
	#CONCURRENCY_APP_PIPE1_NUM_PLANES
 1

	)

48 
	#CONCURRENCY_APP_PIPE1_ASYNC
 0

49 
u8
 
	tt_Pùe1
;

	)

51 #i‡
CONCURRENCY_APP_NUM_PIPELINES
 > 0x2

53 
	#CONCURRENCY_APP_PIPE2_WIDTH
 1280

	)

54 
	#CONCURRENCY_APP_PIPE2_HEIGHT
 720

	)

55 
	#CONCURRENCY_APP_PIPE2_NUM_PLANES
 1

	)

56 
	#CONCURRENCY_APP_PIPE2_ASYNC
 1

	)

57 
u8
 
	tt_Pùe2
;

61 #i‡
CONCURRENCY_APP_NUM_PIPELINES
 > 0x3

63 
	#CONCURRENCY_APP_PIPE3_WIDTH
 1280

	)

64 
	#CONCURRENCY_APP_PIPE3_HEIGHT
 720

	)

65 
	#CONCURRENCY_APP_PIPE3_NUM_PLANES
 1

	)

66 
	#CONCURRENCY_APP_PIPE3_ASYNC
 1

	)

67 
u8
 
	tt_Pùe3
;

76 
	~"≠pP¨ams.h
"

78 
u32
 
	gsùpEº‹Log
[
SIPP_ERROR_HISTORY_SIZE
];

79 vﬁ©ûê
u32
 
	gã°Com∂ëe
 = 0;

80 
C⁄cuºícyAµPùe
 
	gc⁄cuºícyPùeLi°
[
CONCURRENCY_APP_NUM_PIPELINES
];

82 #i‡
CONCURRENCY_APP_NUM_PIPELINES
 > 0x3

83 #i‡
CONCURRENCY_TEST_CREATE_CONFLICT
 > 0

84 
u32
 
	g¶i˚Fú°
[
CONCURRENCY_APP_NUM_PIPELINES
] = {0,3,6,9};

85 
u32
 
	g¶i˚La°
[
CONCURRENCY_APP_NUM_PIPELINES
] = {3,6,9,11};

87 
u32
 
	g¶i˚Fú°
[
CONCURRENCY_APP_NUM_PIPELINES
] = {0,3,6,9};

88 
u32
 
	g¶i˚La°
[
CONCURRENCY_APP_NUM_PIPELINES
] = {2,5,8,11};

90 #ñi‡
CONCURRENCY_APP_NUM_PIPELINES
 > 0x2

91 #i‡
CONCURRENCY_TEST_CREATE_CONFLICT
 > 0

92 
u32
 
	g¶i˚Fú°
[
CONCURRENCY_APP_NUM_PIPELINES
] = {0,4,8};

93 
u32
 
	g¶i˚La°
[
CONCURRENCY_APP_NUM_PIPELINES
] = {4,8,11};

95 
u32
 
	g¶i˚Fú°
[
CONCURRENCY_APP_NUM_PIPELINES
] = {0,4,8};

96 
u32
 
	g¶i˚La°
[
CONCURRENCY_APP_NUM_PIPELINES
] = {3,7,11};

99 #i‡
CONCURRENCY_TEST_CREATE_CONFLICT
 > 0

100 
u32
 
	g¶i˚Fú°
[
CONCURRENCY_APP_NUM_PIPELINES
] = {0,6};

101 
u32
 
	g¶i˚La°
[
CONCURRENCY_APP_NUM_PIPELINES
] = {6,11};

103 
u32
 
	g¶i˚Fú°
[
CONCURRENCY_APP_NUM_PIPELINES
] = {0,6};

104 
u32
 
	g¶i˚La°
[
CONCURRENCY_APP_NUM_PIPELINES
] = {5,11};

108 
u8
 * 
	gpmBöImg
[
CONCURRENCY_APP_NUM_PIPELINES
];

111 
t_Pùe0
 
DDR_DATA
 
	gDMA0_I≈utBuf„r
[
CONCURRENCY_APP_PIPE0_WIDTH
 * 
CONCURRENCY_APP_PIPE0_HEIGHT
 * 
CONCURRENCY_APP_PIPE0_NUM_PLANES
] 
ALIGNED
(8);

112 
t_Pùe1
 
DDR_DATA
 
	gDMA1_I≈utBuf„r
[
CONCURRENCY_APP_PIPE1_WIDTH
 * 
CONCURRENCY_APP_PIPE1_HEIGHT
 * 
CONCURRENCY_APP_PIPE1_NUM_PLANES
] 
ALIGNED
(8);

113 #i‡
CONCURRENCY_APP_NUM_PIPELINES
 > 0x2

114 
t_Pùe2
 
DDR_DATA
 
	gDMA2_I≈utBuf„r
[
CONCURRENCY_APP_PIPE2_WIDTH
 * 
CONCURRENCY_APP_PIPE2_HEIGHT
 * 
CONCURRENCY_APP_PIPE2_NUM_PLANES
] 
ALIGNED
(8);

116 #i‡
CONCURRENCY_APP_NUM_PIPELINES
 > 0x3

117 
t_Pùe3
 
DDR_DATA
 
	gDMA3_I≈utBuf„r
[
CONCURRENCY_APP_PIPE3_WIDTH
 * 
CONCURRENCY_APP_PIPE3_HEIGHT
 * 
CONCURRENCY_APP_PIPE3_NUM_PLANES
] 
ALIGNED
(8);

120 
t_Pùe0
 
DDR_DATA
 
	gDMA0_OuçutBuf„r
[
CONCURRENCY_APP_PIPE0_WIDTH
 * 
CONCURRENCY_APP_PIPE0_HEIGHT
 * 
CONCURRENCY_APP_PIPE0_NUM_PLANES
] 
ALIGNED
(8);

121 
t_Pùe1
 
DDR_DATA
 
	gDMA1_OuçutBuf„r
[
CONCURRENCY_APP_PIPE1_WIDTH
 * 
CONCURRENCY_APP_PIPE1_HEIGHT
 * 
CONCURRENCY_APP_PIPE1_NUM_PLANES
] 
ALIGNED
(8);

122 #i‡
CONCURRENCY_APP_NUM_PIPELINES
 > 0x2

123 
t_Pùe2
 
DDR_DATA
 
	gDMA2_OuçutBuf„r
[
CONCURRENCY_APP_PIPE2_WIDTH
 * 
CONCURRENCY_APP_PIPE2_HEIGHT
 * 
CONCURRENCY_APP_PIPE2_NUM_PLANES
] 
ALIGNED
(8);

125 #i‡
CONCURRENCY_APP_NUM_PIPELINES
 > 0x3

126 
t_Pùe3
 
DDR_DATA
 
	gDMA3_OuçutBuf„r
[
CONCURRENCY_APP_PIPE3_WIDTH
 * 
CONCURRENCY_APP_PIPE3_HEIGHT
 * 
CONCURRENCY_APP_PIPE3_NUM_PLANES
] 
ALIGNED
(8);

130 
UI¡8
 
ã°_image
;

131 
u16
 
	gc⁄v5x50Cfg_cM©
[
CONCURRENCY_APP_NUM_PIPELINES
][25];

133 #ifde‡
SIPP_VCS


134 
tyAuxClkDividîCfg
 
	gauxClk
[] =

139 
tySocClockC⁄fig
 
	g˛ockC⁄fig
 =

141 .
ªfClk0I≈utKhz
 = 12000,

142 .
	gªfClk1I≈utKhz
 = 0,

143 .
	gèrgëPŒ0FªqKhz
 = 500000,

144 .
	gèrgëPŒ1FªqKhz
 = 0,

145 .
	g˛kSrcPŒ1
 = 
CLK_SRC_REFCLK0
,

146 .
	gma°îClkDivNumî©‹
 = 1,

147 .
	gma°îClkDivDíomö©‹
 = 1,

148 .
	gcssDssClockE«bÀMask
 = 
DEFAULT_CORE_CSS_DSS_CLOCKS
,

149 .
	gmssClockE«bÀMask
 = -1,

150 .
	gu∑ClockE«bÀMask
 = 
DEFAULT_UPA_CLOCKS
,

151 .
	gpAuxClkCfg
 = 
auxClk


160 
öôC⁄vM©
 (
SùpFûãr
 * 
c⁄v5x5
, 
u32
 
pùeId
, u32 
ks
);

161 
≠pSùpCÆlback
 (
SùpPùñöe
 * 
pPùñöe
,

162 
eSIPP_PIPELINE_EVENT
 
eEvít
,

163 
SIPP_PIPELINE_EVENT_DATA
 * 
±EvítD©a
);

169 #ifde‡
SIPP_USE_PRECALC_SCHEDULE


170 
	~"pcDumpScheduÀ.hh
"

171 
	~"pcDumpScheduÀ_1.hh
"

172 #i‡
CONCURRENCY_APP_NUM_PIPELINES
 > 0x2

173 
	~"pcDumpScheduÀ_2.hh
"

175 #i‡
CONCURRENCY_APP_NUM_PIPELINES
 > 0x3

176 
	~"pcDumpScheduÀ_3.hh
"

196 
	$≠pInô
 ()

198 
	`mem£t
 (
c⁄cuºícyPùeLi°
, 0x0, (concurrencyPipeList));

200 
c⁄cuºícyPùeLi°
[0].
runAsync
 = 
CONCURRENCY_APP_PIPE0_ASYNC
;

201 
c⁄cuºícyPùeLi°
[1].
runAsync
 = 
CONCURRENCY_APP_PIPE1_ASYNC
;

202 #i‡
CONCURRENCY_APP_NUM_PIPELINES
 > 0x2

203 
c⁄cuºícyPùeLi°
[2].
runAsync
 = 
CONCURRENCY_APP_PIPE2_ASYNC
;

205 #i‡
CONCURRENCY_APP_NUM_PIPELINES
 > 0x3

206 
c⁄cuºícyPùeLi°
[3].
runAsync
 = 
CONCURRENCY_APP_PIPE3_ASYNC
;

208 
	}
}

225 
u32
 
	$≠pLookupH™dÀ
 (
SùpPùñöe
 * 
pPùñöe
)

227 
u32
 
idx
;

229 
idx
 = 0; idx < 
CONCURRENCY_APP_NUM_PIPELINES
; idx++)

231 
C⁄cuºícyAµPùe
 * 
pùe
 = &
c⁄cuºícyPùeLi°
[
idx
];

233 i‡(
pùe
->
sùpFwH™dÀ
 =
pPùñöe
)

235  
idx
;

240 
	}
}

257 
	$≠pCª©ePùñöes
 ( )

259 
u32
 
idx
;

260 
idx
 = 0; idx < 
CONCURRENCY_APP_NUM_PIPELINES
; idx++ )

262 
C⁄cuºícyAµPùe
 * 
pùe
 = &
c⁄cuºícyPùeLi°
[
idx
];

264 
pùe
->
sùpFwH™dÀ
 = 
	`sùpCª©ePùñöe
 (
¶i˚Fú°
[
idx
],

265 
¶i˚La°
[
idx
],

266 
	`SIPP_MBIN
(
mböImgSùp
));

268 i‡(
	`sùpPùeGëEº‹Sètus
 (
pùe
->
sùpFwH™dÀ
))

270 
u32
 
îrNum
;

271 
	`¥ötf
 ("Pipeline creationÉrror\nError codes:\n");

272 
îrNum
 = 
	`sùpGëEº‹Hi°‹y
 (
sùpEº‹Log
);

273 
îrNum
)

275 
	`¥ötf
 ("%08lx\n", 
sùpEº‹Log
[
îrNum
 - 0x1]);

276 
îrNum
--;

278 
	`exô
 (0x0);

282 
	`sùpRegi°îEvítCÆlback
 (
pùe
->
sùpFwH™dÀ
,

283 
≠pSùpCÆlback
);

285 
	}
}

302 
	$≠pC⁄figuªPùñöes
 ( )

304 
C⁄cuºícyAµPùe
 * 
pùe
;

305 
DmaP¨am
 * 
dmaInCfg
;

306 
DmaP¨am
 * 
dmaOutCfg
;

309 
pùe
 = &
c⁄cuºícyPùeLi°
[0];

311 
pùe
->
dmaIn
 = 
	`sùpCª©eFûãr
 (pùe->
sùpFwH™dÀ
, 0x0, 
CONCURRENCY_APP_PIPE0_WIDTH
, 
CONCURRENCY_APP_PIPE0_HEIGHT
, 
	`N_PL
(
CONCURRENCY_APP_PIPE0_NUM_PLANES
), 
	`SZ
(
t_Pùe0
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

312 
pùe
->
HWFûãr
 = 
	`sùpCª©eFûãr
 (pùe->
sùpFwH™dÀ
, 0x0, 
CONCURRENCY_APP_PIPE0_WIDTH
, 
CONCURRENCY_APP_PIPE0_HEIGHT
, 
	`N_PL
(
CONCURRENCY_APP_PIPE0_NUM_PLANES
), 
	`SZ
(
t_Pùe0
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_CONV_ID
, 0);

313 
pùe
->
SWFûãr
 = 
	`sùpCª©eFûãr
 (pùe->
sùpFwH™dÀ
, 0x0, 
CONCURRENCY_APP_PIPE0_WIDTH
, 
CONCURRENCY_APP_PIPE0_HEIGHT
, 
	`N_PL
(
CONCURRENCY_APP_PIPE0_NUM_PLANES
), 
	`SZ
(
t_Pùe0
), SZ(
BoxFûãr5x5P¨am
), 
	`SVU_SYM
(
svuBoxFûãr5x5
), 0);

314 
pùe
->
dmaOut
 = 
	`sùpCª©eFûãr
 (pùe->
sùpFwH™dÀ
, 0x0, 
CONCURRENCY_APP_PIPE0_WIDTH
, 
CONCURRENCY_APP_PIPE0_HEIGHT
, 
	`N_PL
(
CONCURRENCY_APP_PIPE0_NUM_PLANES
), 
	`SZ
(
t_Pùe0
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

317 
	`sùpLökFûãr
 (
pùe
->
HWFûãr
,Öùe->
dmaIn
, 5, 5 );

318 
	`sùpLökFûãr
 (
pùe
->
SWFûãr
,Öùe->
HWFûãr
, 5, 5 );

319 
	`sùpLökFûãr
 (
pùe
->
dmaOut
,Öùe->
SWFûãr
, 1, 0 );

321 i‡(
	`sùpPùeGëEº‹Sètus
 (
pùe
->
sùpFwH™dÀ
))

323 
u32
 
îrNum
;

324 
	`¥ötf
 ("Pipeline 0 creationÉrror\nError codes:\n");

325 
îrNum
 = 
	`sùpGëEº‹Hi°‹y
 (
sùpEº‹Log
);

326 
îrNum
)

328 
	`¥ötf
 ("%08lx\n", 
sùpEº‹Log
[
îrNum
 - 0x1]);

329 
îrNum
--;

331 
	`exô
 (0x0);

334 
dmaInCfg
 = (
DmaP¨am
 *)
pùe
->
dmaIn
->
∑øms
;

335 
dmaOutCfg
 = (
DmaP¨am
 *)
pùe
->
dmaOut
->
∑øms
;

336 
dmaInCfg
->
ddrAddr
 = (
UI¡32
)
DMA0_I≈utBuf„r
;

337 
dmaOutCfg
->
ddrAddr
 = (
UI¡32
)
DMA0_OuçutBuf„r
;

339 
C⁄vP¨am
 * 
HWFûãrCfg
 = (C⁄vP¨am *)
pùe
->
HWFûãr
->
∑øms
;

340 
HWFûãrCfg
->
cfg
 = 
KERNEL_SIZE
 |

348 
BoxFûãr5x5P¨am
 * 
SWFûãrCfg
 = (BoxFûãr5x5P¨am *)
pùe
->
SWFûãr
->
∑øms
;

349 
SWFûãrCfg
->
n‹mÆize
 = 0;

352 
	`∑ckC⁄v5x5CCM
 (
HWFûãrCfg
, 
hwKî
);

354 #ifde‡
SIPP_USE_PRECALC_SCHEDULE


356 
	`dbgSchedInô
 (
pùe
->
sùpFwH™dÀ
);

359 
	`sùpFöÆizePùñöe
 (
pùe
->
sùpFwH™dÀ
);

361 i‡(
	`sùpPùeGëEº‹Sètus
 (
pùe
->
sùpFwH™dÀ
))

363 
u32
 
îrNum
;

364 
	`¥ötf
 ("Pipeline 0 finalization failed\nError codes:\n");

365 
îrNum
 = 
	`sùpGëEº‹Hi°‹y
 (
sùpEº‹Log
);

366 
îrNum
)

368 
	`¥ötf
 ("%08lx\n", 
sùpEº‹Log
[
îrNum
 - 0x1]);

369 
îrNum
--;

374 
pùe
 = &
c⁄cuºícyPùeLi°
[1];

375 
pùe
->
dmaIn
 = 
	`sùpCª©eFûãr
 (pùe->
sùpFwH™dÀ
, 0x0, 
CONCURRENCY_APP_PIPE0_WIDTH
, 
CONCURRENCY_APP_PIPE0_HEIGHT
, 
	`N_PL
(
CONCURRENCY_APP_PIPE0_NUM_PLANES
), 
	`SZ
(
t_Pùe1
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

376 
pùe
->
SWFûãr
 = 
	`sùpCª©eFûãr
 (pùe->
sùpFwH™dÀ
, 0x0, 
CONCURRENCY_APP_PIPE0_WIDTH
, 
CONCURRENCY_APP_PIPE0_HEIGHT
, 
	`N_PL
(
CONCURRENCY_APP_PIPE0_NUM_PLANES
), 
	`SZ
(
t_Pùe1
), SZ(
C⁄v5x5P¨am
), 
	`SVU_SYM
(
svuC⁄v5x5
), 0);

377 
pùe
->
HWFûãr
 = 
	`sùpCª©eFûãr
 (pùe->
sùpFwH™dÀ
, 0x0, 
CONCURRENCY_APP_PIPE0_WIDTH
, 
CONCURRENCY_APP_PIPE0_HEIGHT
, 
	`N_PL
(
CONCURRENCY_APP_PIPE0_NUM_PLANES
), 
	`SZ
(
t_Pùe1
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_MED_ID
, 0);

378 
pùe
->
dmaOut
 = 
	`sùpCª©eFûãr
 (pùe->
sùpFwH™dÀ
, 0x0, 
CONCURRENCY_APP_PIPE0_WIDTH
, 
CONCURRENCY_APP_PIPE0_HEIGHT
, 
	`N_PL
(
CONCURRENCY_APP_PIPE0_NUM_PLANES
), 
	`SZ
(
t_Pùe1
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

381 
	`sùpLökFûãr
 (
pùe
->
SWFûãr
,Öùe->
dmaIn
, 5, 5 );

382 
	`sùpLökFûãr
 (
pùe
->
HWFûãr
,Öùe->
SWFûãr
, 5, 5 );

383 
	`sùpLökFûãr
 (
pùe
->
dmaOut
,Öùe->
HWFûãr
, 1, 0 );

385 i‡(
	`sùpPùeGëEº‹Sètus
 (
pùe
->
sùpFwH™dÀ
))

387 
u32
 
îrNum
;

388 
	`¥ötf
 ("Pipeline 1 creationÉrror\nError codes:\n");

389 
îrNum
 = 
	`sùpGëEº‹Hi°‹y
 (
sùpEº‹Log
);

390 
îrNum
)

392 
	`¥ötf
 ("%08lx\n", 
sùpEº‹Log
[
îrNum
 - 0x1]);

393 
îrNum
--;

395 
	`exô
 (0x0);

398 
dmaInCfg
 = (
DmaP¨am
 *)
pùe
->
dmaIn
->
∑øms
;

399 
dmaOutCfg
 = (
DmaP¨am
 *)
pùe
->
dmaOut
->
∑øms
;

400 
dmaInCfg
->
ddrAddr
 = (
UI¡32
)
DMA1_I≈utBuf„r
;

401 
dmaOutCfg
->
ddrAddr
 = (
UI¡32
)
DMA1_OuçutBuf„r
;

403 
	`öôC⁄vM©
 (
pùe
->
SWFûãr
, 0x1, 
KERNEL_SIZE
);

404 
MedP¨am
 * 
MedHWFûãrCfg
 = (MedP¨am *)
pùe
->
HWFûãr
->
∑øms
;

405 
MedHWFûãrCfg
->
cfg
 = 
KERNEL_SIZE
 |

406 (((
KERNEL_SIZE
 * KERNEL_SIZE)>>1) << 8) |

409 #ifde‡
SIPP_USE_PRECALC_SCHEDULE


411 
	`dbgSchedInô_1
 (
pùe
->
sùpFwH™dÀ
);

414 
	`sùpFöÆizePùñöe
 (
pùe
->
sùpFwH™dÀ
);

416 i‡(
	`sùpPùeGëEº‹Sètus
 (
pùe
->
sùpFwH™dÀ
))

418 
u32
 
îrNum
;

419 
	`¥ötf
 ("Pipeline 1 finalization failed\nError codes:\n");

420 
îrNum
 = 
	`sùpGëEº‹Hi°‹y
 (
sùpEº‹Log
);

421 
îrNum
)

423 
	`¥ötf
 ("%08lx\n", 
sùpEº‹Log
[
îrNum
 - 0x1]);

424 
îrNum
--;

428 #i‡
CONCURRENCY_APP_NUM_PIPELINES
 > 2

430 
pùe
 = &
c⁄cuºícyPùeLi°
[2];

434 #i‡
CONCURRENCY_APP_NUM_PIPELINES
 > 3

436 
pùe
 = &
c⁄cuºícyPùeLi°
[3];

440 
	}
}

457 
	$≠pLogEvít
 (
C⁄cuºícyAµPùe
 * 
pùe
,

458 
CC_APP_PIPE_EVENT
 
evít
)

460 #i‚de‡
SIPP_PC


462 
u32
 
°‹edIL
 = 
	`swcLe⁄GëPIL
 ();

463 
	`swcLe⁄SëPIL
 (15);

466 
pùe
->
evítLi°
[pùe->
evítLi°WrPå
++] = 
evít
;

467 i‡(
pùe
->
evítLi°WrPå
 =
CC_APP_EVENT_HISTORY_SIZE
)Öipe->eventListWrPtr = 0;

469 #i‚de‡
SIPP_PC


470 
	`swcLe⁄SëPIL
 (
°‹edIL
);

473 
	}
}

490 
CC_APP_PIPE_EVENT
 
	$≠pPro˚ssEvít
 (
C⁄cuºícyAµPùe
 * 
pùe
)

492 
CC_APP_PIPE_EVENT
 
ªtVÆ
 = 
CC_APP_PIPE_EVENT_NONE
;

494 i‡(
pùe
->
evítLi°WrPå
 !pùe->
evítLi°RdPå
 )

496 
ªtVÆ
 = 
pùe
->
evítLi°
[pùe->
evítLi°RdPå
++];

497 i‡(
pùe
->
evítLi°RdPå
 =
CC_APP_EVENT_HISTORY_SIZE
)Öipe->eventListRdPtr = 0;

501  
ªtVÆ
;

502 
	}
}

519 
	$≠pSùpCÆlback
 (
SùpPùñöe
 * 
pPùñöe
,

520 
eSIPP_PIPELINE_EVENT
 
eEvít
,

521 
SIPP_PIPELINE_EVENT_DATA
 * 
±EvítD©a
)

524 
u32
 
pùeIdx
 = 
	`≠pLookupH™dÀ
 (
pPùñöe
);

525 
C⁄cuºícyAµPùe
 * 
pùe
 = &
c⁄cuºícyPùeLi°
[
pùeIdx
];

527 
	`UNUSED
(
±EvítD©a
);

529 i‡(
eEvít
 =
eSIPP_PIPELINE_FRAME_DONE
)

531 
	`¥ötf
 ("Pùê%lu com∂ëe†‰ame\n", 
pùeIdx
);

532 
	`≠pLogEvít
 (
pùe
,

533 
CC_APP_PIPE_EVENT_FRAME_DONE
);

536 
	}
}

553 
u32
 
	$≠pCheckCom∂ëe
 ( )

555 
u32
 
ªtVÆ
 = 0x1;

556 
u32
 
idx
;

558 
idx
 = 0; idx < 
CONCURRENCY_APP_NUM_PIPELINES
; idx++ )

560 
C⁄cuºícyAµPùe
 * 
pùe
 = &
c⁄cuºícyPùeLi°
[
idx
];

561 i‡(
pùe
->
eSèã
 !
CC_APP_PIPE_STATE_COMPLETE
)

563 
ªtVÆ
 = 0x0;

568  
ªtVÆ
;

569 
	}
}

587 
	$≠pTask
 ()

589 
u32
 
pùeIdx
;

591 
ã°Com∂ëe
 == 0)

593 
pùeIdx
 = 0x0;ÖùeIdx < 
CONCURRENCY_APP_NUM_PIPELINES
;ÖipeIdx++)

595 
C⁄cuºícyAµPùe
 * 
pùe
 = &
c⁄cuºícyPùeLi°
[
pùeIdx
];

597 
pùe
->
eSèã
)

599 
CC_APP_PIPE_STATE_UNINIT
 : {

600 
pùe
->
eSèã
 = 
CC_APP_PIPE_STATE_IDLE
;

602 
CC_APP_PIPE_STATE_IDLE
 : {

603 i‡(
pùe
->
‰amesCom∂ëe
 < 
CONCURRENCY_APP_FRAMES_PER_PIPE
)

605 i‡(
pùe
->
runAsync
)

607 
	`¥ötf
("Pùê%lu cÆ»¥o˚s†‰amêasync\n", 
pùeIdx
);

608 
	`sùpPro˚ssFømeNB
 (
pùe
->
sùpFwH™dÀ
);

609 
pùe
->
eSèã
 = 
CC_APP_PIPE_STATE_RUNNING
;

613 
u32
 
îrCode
 = (u32)
E_BLOCK_CALL_REJECTED
;

614 
u32
 
îrMaskIdx
 = 
îrCode
 >> 5;

615 
u32
 
îrMaskE¡ry
 = 0x1 << (
îrCode
 & 0x1F);

618 
	`sùpPro˚ssFøme
 (
pùe
->
sùpFwH™dÀ
);

622 i‡(
pùe
->
sùpFwH™dÀ
->
îr‹Sètus
[
îrMaskIdx
] & 
îrMaskE¡ry
)

624 
	`¥ötf
 ("Pùê%lu faûed i¿ˇŒÅÿblockög API sùpPro˚ssFømêduêtÿa˘ivê™d/‹Öídög o≥øti⁄s\n", 
pùeIdx
);

626 
pùe
->
sùpFwH™dÀ
->
îr‹Sètus
[
îrMaskIdx
] &(~
îrMaskE¡ry
);

630 
	`¥ötf
 ("Pùê%lu suc˚ssfuŒy cÆÀd blockög API sùpPro˚ssFøme\n", 
pùeIdx
);

631 
pùe
->
‰amesCom∂ëe
++;

632 
pùe
->
eSèã
 = 
CC_APP_PIPE_STATE_IDLE
;

638 
	`¥ötf
 ("Pùê%lu com∂ëedÑu¿o‡%lu images\n", 
pùeIdx
, 
pùe
->
‰amesCom∂ëe
);

639 
	`sùpFømew‹kRun
 ();

640 
pùe
->
eSèã
 = 
CC_APP_PIPE_STATE_COMPLETE
;

644 
CC_APP_PIPE_STATE_RUNNING
 : {

645 
CC_APP_PIPE_EVENT
 
evít
;

646 (
evít
 = 
	`≠pPro˚ssEvít
 (
pùe
)Ë!
CC_APP_PIPE_EVENT_NONE
)

648 
evít
)

650 
CC_APP_PIPE_EVENT_FRAME_DONE
 : {

651 
pùe
->
‰amesCom∂ëe
++;

652 
pùe
->
eSèã
 = 
CC_APP_PIPE_STATE_IDLE
;

658 
CC_APP_PIPE_STATE_COMPLETE
 : {

659 i‡(
	`≠pCheckCom∂ëe
())

661 
ã°Com∂ëe
 = 1;

665 
	`¥ötf
 ("Unknow¿°©ê⁄Öùê%lu - Tîmö©ögÉ¨ly\n", 
pùeIdx
);

666 
	`exô
 (0x0);

671 
	}
}

691 
	$maö
 (
¨gc
, *
¨gv
[])

693 
	`UNUSED
 (
¨gc
);

694 
	`UNUSED
 (
¨gv
);

696 #ifde‡
SIPP_VCS


697 
	`unôTe°Inô
 ();

698 
	`DrvC¥Inô
();

699 
	`DrvDdrInôüli£
 (
NULL
);

700 
	`DrvC¥SëupClocks
(&
˛ockC⁄fig
);

703 
	`sùpPœtf‹mInô
 ();

705 #ifde‡
SIPP_VCS


706 
	`DrvTimîInô
 ();

709 #i‚de‡
SIPP_PC


710 i‡(
PROCESS_LEON_OS
 =
	`swcWhoAmI
())

712 
	`¥ötf
 ("App Starting on LEON OS\n");

713 
	`¥ötf
 ("Please make sure IRQ sources for dynamicallyÑoute between LeonOSánd LeonRTáre set\n");

717 
	`¥ötf
 ("App Starting on LEON RT\n");

721 
	`sùpPœtf‹mInôAsync
 ();

723 
	`≠pInô
 ();

724 
	`≠pCª©ePùñöes
 ();

725 
	`≠pC⁄figuªPùñöes
 ();

728 
	`≠pTask
 ();

730 #ifde‡
SIPP_VCS


731 
	`unôTe°FöÆRï‹t
();

735 
	}
}

	@Sipp/SippFw/ConcurrencyTest/MixedSyncAsyncPipe_concurrent/leon/pcDumpSchedule.hh

8 
SchedInfo
 
	gsùpDum≥dSched_0
[727] =

740 
	$dbgSchedInô
(
SùpPùñöe
 *
∂
)

742 i‡(
∂
->
löesPîIãr
 != 1)

744 
	`sùpEº‹
 (
∂
->
îr‹Sètus
, 
E_PRECOMP_SCHED
);

748 
∂
->
fûãrs
[ 0]->
nLöes
[0] = 5;

749 
∂
->
fûãrs
[ 1]->
nLöes
[0] = 5;

750 
∂
->
fûãrs
[ 2]->
nLöes
[0] = 1;

751 
∂
->
fûãrs
[ 3]->
nLöes
[0] = 0;

754 
∂
->
fûãrs
[ 1]->
∑ª¡sKS
[ 0] = 0;

755 
∂
->
fûãrs
[ 2]->
∑ª¡sKS
[ 0] = 0;

756 
∂
->
fûãrs
[ 3]->
∑ª¡sKS
[ 0] = 0;

761 
∂
->
fûãrs
[ 0]->
fú°RunRﬁlLöes
 =Öl->fûãrs[ 0]->
fú°RunNumLöes
 = 0;

762 
∂
->
fûãrs
[ 1]->
fú°RunRﬁlLöes
 =Öl->fûãrs[ 1]->
fú°RunNumLöes
 = 0;

763 
∂
->
fûãrs
[ 2]->
fú°RunRﬁlLöes
 =Öl->fûãrs[ 2]->
fú°RunNumLöes
 = 0;

764 
∂
->
fûãrs
[ 3]->
fú°RunRﬁlLöes
 =Öl->fûãrs[ 3]->
fú°RunNumLöes
 = 0;

767 
∂
->
fûãrs
[ 0]->
hPaddög
[ 0] = 0;

768 
∂
->
fûãrs
[ 1]->
hPaddög
[ 0] = 5;

769 
∂
->
fûãrs
[ 2]->
hPaddög
[ 0] = 0;

770 
∂
->
fûãrs
[ 3]->
hPaddög
[ 0] = 0;

773 
∂
->
nIãr
 = 727;

774 
∂
->
schedInfo
 = 
sùpDum≥dSched_0
;

775 
	}
}

	@Sipp/SippFw/ConcurrencyTest/MixedSyncAsyncPipe_concurrent/leon/pcDumpSchedule_1.hh

8 
SchedInfo
 
	gsùpDum≥dSched_1
[728] =

741 
	$dbgSchedInô_1
(
SùpPùñöe
 *
∂
)

743 i‡(
∂
->
löesPîIãr
 != 1)

745 
	`sùpEº‹
 (
∂
->
îr‹Sètus
, 
E_PRECOMP_SCHED
);

749 
∂
->
fûãrs
[ 0]->
nLöes
[0] = 5;

750 
∂
->
fûãrs
[ 1]->
nLöes
[0] = 6;

751 
∂
->
fûãrs
[ 2]->
nLöes
[0] = 1;

752 
∂
->
fûãrs
[ 3]->
nLöes
[0] = 0;

755 
∂
->
fûãrs
[ 1]->
∑ª¡sKS
[ 0] = 0;

756 
∂
->
fûãrs
[ 2]->
∑ª¡sKS
[ 0] = 0;

757 
∂
->
fûãrs
[ 3]->
∑ª¡sKS
[ 0] = 0;

762 
∂
->
fûãrs
[ 0]->
fú°RunRﬁlLöes
 =Öl->fûãrs[ 0]->
fú°RunNumLöes
 = 0;

763 
∂
->
fûãrs
[ 1]->
fú°RunRﬁlLöes
 =Öl->fûãrs[ 1]->
fú°RunNumLöes
 = 0;

764 
∂
->
fûãrs
[ 2]->
fú°RunRﬁlLöes
 =Öl->fûãrs[ 2]->
fú°RunNumLöes
 = 0;

765 
∂
->
fûãrs
[ 3]->
fú°RunRﬁlLöes
 =Öl->fûãrs[ 3]->
fú°RunNumLöes
 = 0;

768 
∂
->
fûãrs
[ 0]->
hPaddög
[ 0] = 5;

769 
∂
->
fûãrs
[ 1]->
hPaddög
[ 0] = 0;

770 
∂
->
fûãrs
[ 2]->
hPaddög
[ 0] = 0;

771 
∂
->
fûãrs
[ 3]->
hPaddög
[ 0] = 0;

774 
∂
->
nIãr
 = 728;

775 
∂
->
schedInfo
 = 
sùpDum≥dSched_1
;

776 
	}
}

	@Sipp/SippFw/ConcurrencyTest/MixedSyncAsyncPipe_concurrent/leon/utils.c

11 
	~<sùp.h
>

12 
	~<sùpTe°Comm⁄.h
>

13 
	~<fûãrs/c⁄v5x5/c⁄v5x5.h
>

15 
u16
 
c⁄vM©rix
[5 * 5];

16 
u16
 
c⁄v5x50Cfg_cM©
[][5 * 5];

18 
	$öôC⁄vM©
 (
SùpFûãr
 * 
c⁄v5x5
, 
u32
 
pùeId
, u32 
ks
)

20 
u32
 
i
;

21 
C⁄v5x5P¨am
 *
c⁄vCfg
 = (C⁄v5x5P¨am*)
c⁄v5x5
->
∑øms
;

23 
c⁄vCfg
->
cM©
 = 
c⁄v5x50Cfg_cM©
[
pùeId
];

25 
i
 = 0; i < 
ks
 * ks; i++)

27 
c⁄vCfg
->
cM©
[
i
] = 
c⁄vM©rix
[i];

29 
	}
}

	@Sipp/SippFw/HwFilters/testHwChromaDns/leon/app_config.c

13 
	~"≠p_c⁄fig.h
"

14 
	~"DrvC¥.h
"

15 
	~"DrvDdr.h
"

16 
	~"swcLe⁄Utûs.h
"

17 
	~"DrvShaveL2Cache.h
"

18 
	~"DrvTimî.h
"

22 
	#SYS_CLK_KHZ
 12000

23 

	)

24 
	#L2CACHE_CFG
 (
SHAVE_L2CACHE_NORMAL_MODE
)

	)

25 
	#PARTITION_0
 (0)

	)

26 
	#SHAVES_USED
 (12)

	)

29 
	#AUX_CLOCKS_MIPICFG
 (
AUX_CLK_MASK_MIPI_ECFG
 | 
AUX_CLK_MASK_MIPI_CFG
)

	)

30 
	#AUX_CLOCKS_VIDEO
 (
AUX_CLK_MASK_MEDIA
 | 
AUX_CLK_MASK_LCD
)

	)

32 
	#MSS_CLOCKS
 ( 
DEV_MSS_APB_SLV
 | \

33 
DEV_MSS_APB2_CTRL
 | \

34 
DEV_MSS_RTBRIDGE
 | \

35 
DEV_MSS_RTAHB_CTRL
 | \

36 
DEV_MSS_LRT
 | \

37 
DEV_MSS_LRT_DSU
 | \

38 
DEV_MSS_LRT_L2C
 | \

39 
DEV_MSS_LRT_ICB
 | \

40 
DEV_MSS_AXI_BRIDGE
 | \

41 
DEV_MSS_MXI_CTRL
 | \

42 
DEV_MSS_MXI_DEFSLV
 | \

43 
DEV_MSS_AXI_MON
 | \

44 
DEV_MSS_LCD
 | \

45 
DEV_MSS_AMC
 | \

46 
DEV_MSS_SIPP
 | \

47 
DEV_MSS_TIM
 )

	)

49 
	#SIPP_CLOCKS
 ( 
DEV_SIPP_SIPP_ABPSLV
 | \

50 
DEV_SIPP_MIPI
 | \

51 
DEV_SIPP_MIPI_RX1
 )

	)

60 
tyAuxClkDividîCfg
 
	gauxClk
[] =

63 .
auxClockE«bÀMask
 = 
AUX_CLOCKS_VIDEO
,

64 .
	gauxClockSour˚
 = 
CLK_SRC_SYS_CLK_DIV2
 ,

65 .
	gauxClockDivNumî©‹
 = 1,

66 .
	gauxClockDivDíomö©‹
 = 1,

69 .
	gauxClockE«bÀMask
 = 
AUX_CLOCKS_MIPICFG
,

70 .
	gauxClockSour˚
 = 
CLK_SRC_SYS_CLK
 ,

71 .
	gauxClockDivNumî©‹
 = 1,

72 .
	gauxClockDivDíomö©‹
 = 18,

80 
tySocClockC⁄fig
 
	g˛ocksC⁄fig
 =

82 .
ªfClk0I≈utKhz
 = 
SYS_CLK_KHZ
 ,

83 .
	gªfClk1I≈utKhz
 = 0,

84 .
	gèrgëPŒ0FªqKhz
 = 360000,

85 .
	gèrgëPŒ1FªqKhz
 = 0,

86 .
	g˛kSrcPŒ1
 = 
CLK_SRC_REFCLK0
,

87 .
	gma°îClkDivNumî©‹
 = 1,

88 .
	gma°îClkDivDíomö©‹
 = 1,

89 .
	gcssDssClockE«bÀMask
 = 
DEFAULT_CORE_CSS_DSS_CLOCKS
,

90 .
	gmssClockE«bÀMask
 = 
MSS_CLOCKS
,

91 .
	gsùpClockE«bÀMask
 = 
SIPP_CLOCKS
,

92 .
	gu∑ClockE«bÀMask
 = 0,

93 .
	gpAuxClkCfg
 = 
auxClk
,

102 
	$öôClocksAndMem‹y
()

104 
i
;

105 
s32
 
sc
;

108 
sc
 = 
	`DrvC¥Inô
();

109 if(
sc
)

110  
sc
;

112 
	`DrvC¥SysDevi˚A˘i⁄
(
SIPP_DOMAIN
, 
ASSERT_RESET
, 
DEV_SIPP_MIPI
);

113 
	`DrvC¥SysDevi˚A˘i⁄
(
MSS_DOMAIN
, 
ASSERT_RESET
, 
DEV_MSS_SIPP
 | 
DEV_MSS_AMC
 | 
DEV_MSS_LCD
 );

114 
	`DrvC¥SysDevi˚A˘i⁄
(
MSS_DOMAIN
, 
DEASSERT_RESET
, 
DEV_MSS_SIPP
 );

116 
sc
 = 
	`DrvC¥SëupClocks
(&
˛ocksC⁄fig
);

117 if(
sc
)

118  
sc
;

120 
	`DrvC¥SysDevi˚A˘i⁄
(
MSS_DOMAIN
, 
DEASSERT_RESET
, -1);

121 
	`DrvC¥SysDevi˚A˘i⁄
(
CSS_DOMAIN
, 
DEASSERT_RESET
, -1);

122 
	`DrvC¥SysDevi˚A˘i⁄
(
SIPP_DOMAIN
, 
DEASSERT_RESET
, -1);

124 
	`swcLe⁄SëPIL
(0);

126 
	`DrvDdrInôüli£
(
NULL
);

129 
sc
 = 
	`DrvShaveL2CacheSëMode
(
L2CACHE_CFG
);

130 if(
sc
)

131  
sc
;

134 
	`DrvShaveL2CacheSëupP¨tôi⁄
(
SHAVEPART256KB
);

137 
sc
 = 
	`DrvShaveL2CacheAŒoˇãSëP¨tôi⁄s
();

138 if(
sc
)

139  
sc
;

142 
i
 = 0; i < 
SHAVES_USED
; i++)

144 
	`DrvShaveL2CacheSëLSUP¨tId
(
i
, 
PARTITION_0
);

147 
	`DrvShaveL2CacheP¨tôi⁄FlushAndInvÆid©e
(
PARTITION_0
);

150 
	}
}

	@Sipp/SippFw/HwFilters/testHwChromaDns/leon/app_config.h

13 #i‚de‡
APP_CONFIG_H


14 
	#APP_CONFIG_H


	)

18 
	~"mv_ty≥s.h
"

29 
öôClocksAndMem‹y
();

	@Sipp/SippFw/HwFilters/testHwChromaDns/leon/main.c

9 
	~<sùp.h
>

10 
	~<sùpTe°Comm⁄.h
>

12 #i‡
deföed
(
SIPP_VCS
)

13 
	~<UnôTe°Api.h
>

14 
	~<DrvTimî.h
>

15 
	~<DrvDdr.h
>

18 
	~"ã°HwChromaDnsSëup.h
"

19 
	~"ã°HwChromaDns.h
"

25 
	#SIPP_TEST_SYNC_API


27 

	)

32 
Te°HwChromaDns
 
	gã°ChromaDnsPùe
;

34 #i‚de‡
SIPP_TEST_SYNC_API


35 vﬁ©ûê
u32
 
	gã°Com∂ëe
 = 0;

38 
UI¡8
 
DDR_DATA
 
	gTe°HwChromaDns_dmaRef0_buf„r
[792 * 645 * 3 ]
ALIGNED
(8);

44 #ifde‡
SIPP_USE_PRECALC_SCHEDULE


45 
	~"pcDumpScheduÀ.hh
"

49 #i‚de‡
SIPP_TEST_SYNC_API


50 
	$≠pSùpCÆlback
 ( 
SùpPùñöe
 * 
pPùñöe
,

51 
eSIPP_PIPELINE_EVENT
 
eEvít
,

52 
SIPP_PIPELINE_EVENT_DATA
 * 
±EvítD©a


55 i‡(
eEvít
 =
eSIPP_PIPELINE_FRAME_DONE
)

57 
	`¥ötf
 ("appSippCallback : Frame doneÉventÑeceived : TestÖroceedingÅo checksándÅermination\n");

58 
ã°Com∂ëe
 = 1;

61 
	}
}

66 
	$maö
 (
¨gc
, *
¨gv
[])

68 
	`UNUSED
 (
¨gc
);

69 
	`UNUSED
 (
¨gv
);

70 
u32
 
sùpEº‹Log
[
SIPP_ERROR_HISTORY_SIZE
];

72 
	`sùpPœtf‹mInô
 ();

74 #i‚de‡
SIPP_PC


75 i‡(
PROCESS_LEON_OS
 =
	`swcWhoAmI
())

77 
	`¥ötf
 ("App Starting on LEON OS\n");

79 #i‚de‡
SIPP_TEST_SYNC_API


80 
	`¥ötf
 ("Please make sure IRQ sources for dynamicallyÑoute between LeonOSánd LeonRTáre set\n");

85 
	`¥ötf
 ("App Starting on LEON RT\n");

89 #i‚de‡
SIPP_TEST_SYNC_API


90 
	`sùpPœtf‹mInôAsync
 ();

93 #ifde‡
SIPP_VCS


94 
	`unôTe°Inô
 ();

95 
	`DrvTimîInô
 ();

96 
	`DrvDdrInôüli£
 (
NULL
);

99 
	`buûdTe°HwChromaDns
(&
ã°ChromaDnsPùe
);

101 i‡(
	`sùpPùeGëEº‹Sètus
 (
ã°ChromaDnsPùe
.
∂
))

103 
u32
 
îrNum
;

104 
	`¥ötf
 ("Pipeline creationÉrror\nError codes:\n");

105 
îrNum
 = 
	`sùpGëEº‹Hi°‹y
 (
sùpEº‹Log
);

106 
îrNum
)

108 
	`¥ötf
 ("%08lx\n", 
sùpEº‹Log
[
îrNum
 - 0x1]);

109 
îrNum
--;

113 #i‚de‡
SIPP_TEST_SYNC_API


115 
	`sùpRegi°îEvítCÆlback
 (
ã°ChromaDnsPùe
.
∂
,

116 
≠pSùpCÆlback
);

120 
	`c⁄figTe°HwChromaDns
(&
ã°ChromaDnsPùe
);

121 
	`ªadTe°HwChromaDnsI≈ut
(&
ã°ChromaDnsPùe
);

123 #ifde‡
SIPP_USE_PRECALC_SCHEDULE


125 
	`dbgSchedInô
 (
pPùe
);

128 #ifde‡
SIPP_TEST_SYNC_API


129 
	`sùpPro˚ssFøme
(
ã°ChromaDnsPùe
.
∂
);

131 i‡(
	`sùpPùeGëEº‹Sètus
 (
ã°ChromaDnsPùe
.
∂
))

133 
u32
 
îrNum
;

134 
	`¥ötf
 ("PipelineÑuntimeÉrror\nError codes:\n");

135 
îrNum
 = 
	`sùpGëEº‹Hi°‹y
 (
sùpEº‹Log
);

136 
îrNum
)

138 
	`¥ötf
 ("%08lx\n", 
sùpEº‹Log
[
îrNum
 - 0x1]);

139 
îrNum
--;

144 
	`sùpPro˚ssFømeNB
(
ã°ChromaDnsPùe
.
∂
);

146 i‡(
	`sùpPùeGëEº‹Sètus
 (
ã°ChromaDnsPùe
.
∂
))

148 
u32
 
îrNum
;

149 
	`¥ötf
 ("PipelineÑuntimeÉrror\nError codes:\n");

150 
îrNum
 = 
	`sùpGëEº‹Hi°‹y
 (
sùpEº‹Log
);

151 
îrNum
)

153 
	`¥ötf
 ("%08lx\n", 
sùpEº‹Log
[
îrNum
 - 0x1]);

154 
îrNum
--;

158  
ã°Com∂ëe
 == 0x0 )

164 #ifde‡ 
SIPP_PC


165 
	`sùpGíîicRu¡imeWaôI§ThªadTîm
 ();

168 
	`wrôeTe°HwChromaDnsOuçut
(&
ã°ChromaDnsPùe
);

171 
TBD
 - 
Te°
 
d©a
 
√eds
 
ªg√øãd
 
a·î
 
c
-
modñ
 
upd©es


172 
	`sùpRdFûeU8
(
Te°HwChromaDns_dmaRef0_buf„r
, 
SIPP_HW_CHR_DNS_BUFFER_SIZE
, "../../../../../../../resources/uvdenoise_unitTestOut.rgb");

173 
	`sùpDbgCom∑ªU8
((
u8
*)
Te°HwChromaDns_dmaRef0_buf„r
,(
uöt8_t
*)
Te°HwChromaDns_dmaOut0_buf„r
,
SIPP_HW_CHR_DNS_BUFFER_SIZE
);

176 #ifde‡
SIPP_VCS


177 
	`unôTe°FöÆRï‹t
();

181 
	}
}

	@Sipp/SippFw/HwFilters/testHwChromaDns/leon/testHwChromaDns.c

13 
	~"ã°HwChromaDns.h
"

15 
	~<ö˛ude/sùpHwDefs.h
>

16 
	~<¨ch/ma2x5x/ö˛ude/sùpHwDefs_ma2x5x.h
>

20 
UI¡8
 
DDR_DATA
 
	gTe°HwChromaDns_dmaIn0_buf„r
[792 * 645 * 3 ]
ALIGNED
(8);

21 
UI¡8
 
DDR_DATA
 
	gTe°HwChromaDns_dmaOut0_buf„r
[792 * 645 * 3 ]
ALIGNED
(8);

24 
	$ªadTe°HwChromaDnsI≈ut
(
Te°HwChromaDns
 *
pPl
)

26 
	`sùpRdFûeU8
((
UI¡8
*)
Te°HwChromaDns_dmaIn0_buf„r
,792 * 645 * 3 * (UInt8),"../../../../../../../resources/OCT_792x645_I_chroma_dns_8bpp.raw");

28 ()(
pPl
);

30 
	}
}

32 
	$wrôeTe°HwChromaDnsOuçut
(
Te°HwChromaDns
 *
pPl
)

34 
	`sùpWrFûeU8
((
UI¡8
*)
Te°HwChromaDns_dmaOut0_buf„r
,792 * 645 * 3 * (UInt8),"uvDnsUnitTestOut.raw");

36 ()(
pPl
);

38 
	}
}

40 
	$buûdTe°HwChromaDns
(
Te°HwChromaDns
 *
pPl
)

43 
pPl
->
∂
 = 
	`sùpCª©ePùñöe
(0, 7, 
	`SIPP_MBIN
(
mböImgSùp
));

46 
pPl
->
dmaIn0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x00, 792, 645, 
	`N_PL
(3), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

47 
pPl
->
chromadnsMa2x5x0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x0, 792, 645, 
	`N_PL
(3), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_CHROMA_ID
, 0);

48 
pPl
->
dmaOut0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x00, 792, 645, 
	`N_PL
(3), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

51 
	`sùpLökFûãr
(
pPl
->
chromadnsMa2x5x0
,ÖPl->
dmaIn0
, 3,3 );

52 
	`sùpLökFûãr
(
pPl
->
dmaOut0
,ÖPl->
chromadnsMa2x5x0
, 1,1 );

54 
	}
}

57 
	$c⁄figTe°HwChromaDns
(
Te°HwChromaDns
 *
pPl
)

59 
DmaP¨am
 *
dmaIn0Cfg
 = (DmaP¨am *)
pPl
->
dmaIn0
->
∑øms
;

60 
ChrDnsP¨am
 *
chromadnsMa2x5x0Cfg
(ChrDnsP¨am *)
pPl
->
chromadnsMa2x5x0
->
∑øms
;

61 
DmaP¨am
 *
dmaOut0Cfg
 = (DmaP¨am *)
pPl
->
dmaOut0
->
∑øms
;

66 
chromadnsMa2x5x0Cfg
->
cfg
=
	`CHROMA_DNS_CFG
(
HOR_ENABLE
,
LIMIT
,
FORCE_WT_H
,
FORCE_WT_V
,0,
OFFSET
,
SLOPE
);

67 
chromadnsMa2x5x0Cfg
->
thr
[0]=0x07030703;

68 
chromadnsMa2x5x0Cfg
->
thr
[1]=0x0b000b;

69 
chromadnsMa2x5x0Cfg
->
gªyPt
=
	`CHORMA_GREY_PT_SET
(
GREY_CB
,
GREY_CG
,
GREY_CR
,
GREY_PT
);

70 
chromadnsMa2x5x0Cfg
->
chrC€fs
=
	`CHROMA_DNS_COEFFS_SET
(
CENTER_COEFF
,
CENTER_EDGE_COEFF
,
CORNER_COEFF
);

71 
dmaIn0Cfg
->
ddrAddr
 = (
UI¡32
)&
Te°HwChromaDns_dmaIn0_buf„r
;

72 
dmaOut0Cfg
->
ddrAddr
 = (
UI¡32
)&
Te°HwChromaDns_dmaOut0_buf„r
;

75 
	}
}

	@Sipp/SippFw/HwFilters/testHwChromaDns/leon/testHwChromaDns.h

13 #i‚de‡
__TESTHWCHROMADNS_H__


14 
	#__TESTHWCHROMADNS_H__


	)

16 
	~<sùp.h
>

17 
	~<sùpTe°Comm⁄.h
>

19 
	~"ã°HwChromaDnsSëup.h
"

23 
UI¡8
 
DDR_DATA
 
Te°HwChromaDns_dmaIn0_buf„r
[ 792 * 645 * 3 ]
ALIGNED
(8);

24 
UI¡8
 
DDR_DATA
 
Te°HwChromaDns_dmaOut0_buf„r
[ 792 * 645 * 3 ]
ALIGNED
(8);

28 
	sTe°HwChromaDns


31 
SùpPùñöe
 *
	m∂
;

34 
SùpFûãr
 *
	mdmaIn0
;

35 
SùpFûãr
 *
	mchromadnsMa2x5x0
;

36 
SùpFûãr
 *
	mdmaOut0
;

38 } 
	tTe°HwChromaDns
;

40 
ªadTe°HwChromaDnsI≈ut
(
Te°HwChromaDns
 *
pPl
);

41 
wrôeTe°HwChromaDnsOuçut
(
Te°HwChromaDns
 *
pPl
);

43 
buûdTe°HwChromaDns
(
Te°HwChromaDns
 *
pPl
);

44 
c⁄figTe°HwChromaDns
(
Te°HwChromaDns
 *
pPl
);

	@Sipp/SippFw/HwFilters/testHwChromaDns/leon/testHwChromaDnsSetup.h

7 #i‚de‡
LEON_TESTHWCHROMADNSSETUP_H_


8 
	#LEON_TESTHWCHROMADNSSETUP_H_


	)

11 
	#SIPP_HW_CHR_DNS_BUFFER_WIDTH
 792

	)

12 
	#SIPP_HW_CHR_DNS_BUFFER_HEIGHT
 645

	)

13 
	#SIPP_HW_CHR_DNS_BUFFER_NUM_PLANES
 3

	)

14 
	#SIPP_HW_CHR_DNS_BUFFER_SIZE
 (
SIPP_HW_CHR_DNS_BUFFER_WIDTH
 * 
SIPP_HW_CHR_DNS_BUFFER_HEIGHT
 * 
SIPP_HW_CHR_DNS_BUFFER_NUM_PLANES
)

	)

16 
	#FIRST_STEP_EN
 
ENABLED


	)

17 
	#SECOND_STEP_EN
 
ENABLED


	)

18 
	#THIRD_STEP_EN
 
DISABLED


	)

19 
	#HOR_ENABLE
 ((
THIRD_STEP_EN
 << 2Ë| (
SECOND_STEP_EN
 << 1Ë| 
FIRST_STEP_EN
)

	)

20 
	#LIMIT
 5

	)

21 
	#FORCE_WT_H
 0

	)

22 
	#FORCE_WT_V
 0

	)

23 
	#TWO_PLANE_MODE
 
DISABLED


	)

24 
	#THREE_PLANE_MODE
 
DISABLED


	)

25 
	#OFFSET
 ( 
öt8_t
)-2

	)

26 
	#SLOPE
 (
uöt8_t
)(.12 * 0xff)

	)

28 
	#HOR_T1
 3

	)

29 
	#HOR_T2
 7

	)

30 
	#HOR_T3
 11

	)

31 
	#VER_T1
 3

	)

32 
	#VER_T2
 7

	)

33 
	#VER_T3
 11

	)

35 
	#CHROMA_R_SCALE
 1.25f

	)

36 
	#GREY_CR
 (
uöt8_t
)(255/3 * 
CHROMA_R_SCALE
)

	)

37 
	#CHROMA_G_SCALE
 2.25f

	)

38 
	#GREY_CG
 (
uöt8_t
)(255/3 * 
CHROMA_G_SCALE
)

	)

39 
	#CHROMA_B_SCALE
 1.75f

	)

40 
	#GREY_CB
 (
uöt8_t
)((255/3 * 
CHROMA_B_SCALE
)*(!
TWO_PLANE_MODE
))

	)

41 
	#GREY_PT
 
DISABLED


	)

43 
	#CORNER_COEFF
 0x07

	)

44 
	#CENTER_EDGE_COEFF
 0x1c

	)

45 
	#CENTER_COEFF
 0x74

	)

	@Sipp/SippFw/HwFilters/testHwColorComb/leon/app_config.c

13 
	~"≠p_c⁄fig.h
"

14 
	~"DrvC¥.h
"

15 
	~"DrvDdr.h
"

16 
	~"swcLe⁄Utûs.h
"

17 
	~"DrvShaveL2Cache.h
"

18 
	~"DrvTimî.h
"

22 
	#PARTITION_0
 (0)

	)

23 
	#SHAVES_USED
 (12)

	)

32 
tyAuxClkDividîCfg
 
	gauxClk
[] =

35 .
auxClockE«bÀMask
 = 0xfffffff‡& (~
AUX_CLK_MASK_DDR_CORE_CTRL
Ë& (~
AUX_CLK_MASK_DDR_REF
),

36 .
	gauxClockSour˚
 = 
CLK_SRC_SYS_CLK
 ,

37 .
	gauxClockDivNumî©‹
 = 1,

38 .
	gauxClockDivDíomö©‹
 = 1,

41 .
	gauxClockE«bÀMask
 = 
AUX_CLK_MASK_MEDIA
,

42 .
	gauxClockSour˚
 = 
CLK_SRC_SYS_CLK_DIV2
 ,

43 .
	gauxClockDivNumî©‹
 = 1,

44 .
	gauxClockDivDíomö©‹
 = 1,

47 .
	gauxClockE«bÀMask
 = 
CLOCKS_MIPICFG
,

48 .
	gauxClockSour˚
 = 
CLK_SRC_SYS_CLK
 ,

49 .
	gauxClockDivNumî©‹
 = 1,

50 .
	gauxClockDivDíomö©‹
 = 18,

58 
tySocClockC⁄fig
 
	g˛ocksC⁄fig
 =

60 .
ªfClk0I≈utKhz
 = 
SYS_CLK_KHZ
 ,

61 .
	gªfClk1I≈utKhz
 = 0,

62 .
	gèrgëPŒ0FªqKhz
 = 480000,

63 .
	gèrgëPŒ1FªqKhz
 = 0,

64 .
	g˛kSrcPŒ1
 = 
CLK_SRC_REFCLK0
,

65 .
	gma°îClkDivNumî©‹
 = 1,

66 .
	gma°îClkDivDíomö©‹
 = 1,

67 .
	gcssDssClockE«bÀMask
 = 
DEFAULT_CORE_CSS_DSS_CLOCKS
,

68 .
	gmssClockE«bÀMask
 = 
MSS_CLOCKS
,

69 .
	gsùpClockE«bÀMask
 = 
SIPP_CLOCKS
,

70 .
	gu∑ClockE«bÀMask
 = 
APP_UPA_CLOCKS
,

71 .
	gpAuxClkCfg
 = 
auxClk
,

80 
	$öôClocksAndMem‹y
()

82 
i
;

85 
	`DrvC¥Inô
();

87 
	`DrvC¥SysDevi˚A˘i⁄
(
SIPP_DOMAIN
, 
ASSERT_RESET
, 
DEV_SIPP_MIPI
 | 
DEV_SIPP_MIPI_RX1
);

88 
	`DrvC¥SysDevi˚A˘i⁄
(
MSS_DOMAIN
, 
ASSERT_RESET
, 
DEV_MSS_SIPP
 | 
DEV_MSS_AMC
 | 
DEV_MSS_LCD
 );

90 
	`DrvC¥SysDevi˚A˘i⁄
(
MSS_DOMAIN
, 
DEASSERT_RESET
, -1);

91 
	`DrvC¥SysDevi˚A˘i⁄
(
CSS_DOMAIN
, 
DEASSERT_RESET
, -1);

92 
	`DrvC¥SysDevi˚A˘i⁄
(
SIPP_DOMAIN
, 
DEASSERT_RESET
, -1);

94 
	`DrvC¥SëupClocks
(&
˛ocksC⁄fig
);

96 
	`swcLe⁄SëPIL
(0);

98 
	`DrvTimîInô
();

99 
	`DrvDdrInôüli£
(
NULL
);

102 
	`DrvShaveL2CacheSëMode
(
L2CACHE_CFG
);

105 
	`DrvShaveL2CacheSëupP¨tôi⁄
(
SHAVEPART256KB
);

108 
	`DrvShaveL2CacheAŒoˇãSëP¨tôi⁄s
();

111 
i
 = 0; i < 
SHAVES_USED
; i++)

113 
	`DrvShaveL2CacheSëLSUP¨tId
(
i
, 
PARTITION_0
);

116 
	`DrvShaveL2CacheP¨tôi⁄FlushAndInvÆid©e
(
PARTITION_0
);

119 
	}
}

	@Sipp/SippFw/HwFilters/testHwColorComb/leon/app_config.h

9 #i‚de‡
_APP_CONFIG_H_


10 
	#_APP_CONFIG_H_


	)

15 
	~<mv_ty≥s.h
>

19 
	#SYS_CLK_KHZ
 12000

20 

	)

21 
	#L2CACHE_CFG
 (
SHAVE_L2CACHE_NORMAL_MODE
)

	)

24 
	#CLOCKS_MIPICFG
 (
AUX_CLK_MASK_MIPI_ECFG
 | 
AUX_CLK_MASK_MIPI_CFG
)

	)

26 
	#MSS_CLOCKS
 ( 
DEV_MSS_APB_SLV
 | \

	)

27 
	gDEV_MSS_APB2_CTRL
 | \

28 
	gDEV_MSS_RTBRIDGE
 | \

29 
	gDEV_MSS_RTAHB_CTRL
 | \

30 
	gDEV_MSS_LRT
 | \

31 
	gDEV_MSS_LRT_DSU
 | \

32 
	gDEV_MSS_LRT_L2C
 | \

33 
	gDEV_MSS_LRT_ICB
 | \

34 
	gDEV_MSS_AXI_BRIDGE
 | \

35 
	gDEV_MSS_MXI_CTRL
 | \

36 
	gDEV_MSS_MXI_DEFSLV
 | \

37 
	gDEV_MSS_AXI_MON
 | \

38 
	gDEV_MSS_CIF0
 | \

39 
	gDEV_MSS_CIF1
 | \

40 
	gDEV_MSS_LCD
 | \

41 
	gDEV_MSS_AMC
 | \

42 
	gDEV_MSS_SIPP
 | \

43 
	gDEV_MSS_TIM
 )

46 
	#SIPP_CLOCKS
 ( 
DEV_SIPP_SIPP_ABPSLV
 | \

	)

47 
	gDEV_SIPP_MIPI
 | \

48 
	gDEV_SIPP_MIPI_RX1
 )

50 
	#APP_UPA_CLOCKS
 
DEV_UPA_SHAVE_L2
 | 
DEV_UPA_CDMA
 | 
DEV_UPA_CTRL


	)

59 
öôClocksAndMem‹y
();

	@Sipp/SippFw/HwFilters/testHwColorComb/leon/colorComb3dLut.h

1 
u16
 
	gLut3D
[16 * 16 * 16 * 4] 
ALIGNED
(8) = {

	@Sipp/SippFw/HwFilters/testHwColorComb/leon/main.c

13 
	~<sùp.h
>

14 
	~<sùpTe°Comm⁄.h
>

16 #i‡
deföed
(
SIPP_VCS
)

17 
	~<UnôTe°Api.h
>

18 
	~<DrvTimî.h
>

19 
	~<DrvDdr.h
>

23 
	~"ã°HwCﬁ‹CombSëup.h
"

24 
	~"ã°HwCﬁ‹Comb.h
"

30 
	#SIPP_TEST_SYNC_API


32 

	)

37 
	~"cﬁ‹Comb3dLut.h
"

39 
Te°HwCﬁ‹Comb
 
	gã°Cﬁ‹Comb
;

41 #i‚de‡
SIPP_TEST_SYNC_API


42 vﬁ©ûê
u32
 
	gã°Com∂ëe
 = 0;

45 
u16
 
	gcﬁC‹rM©rix
[] = {

65 #ifde‡
SIPP_USE_PRECALC_SCHEDULE


66 
	~"pcDumpScheduÀ.hh
"

70 
	$maö
 (
¨gc
, *
¨gv
[])

72 
	`UNUSED
 (
¨gc
);

73 
	`UNUSED
 (
¨gv
);

74 
u32
 
sùpEº‹Log
[
SIPP_ERROR_HISTORY_SIZE
];

76 
	`sùpPœtf‹mInô
 ();

78 #i‚de‡
SIPP_PC


79 i‡(
PROCESS_LEON_OS
 =
	`swcWhoAmI
())

81 
	`¥ötf
 ("App Starting on LEON OS\n");

83 #i‚de‡
SIPP_TEST_SYNC_API


84 
	`¥ötf
 ("Please make sure IRQ sources for dynamicallyÑoute between LeonOSánd LeonRTáre set\n");

89 
	`¥ötf
 ("App Starting on LEON RT\n");

93 #i‚de‡
SIPP_TEST_SYNC_API


94 
	`sùpPœtf‹mInôAsync
 ();

97 #ifde‡
SIPP_VCS


98 
	`unôTe°Inô
 ();

99 
	`DrvTimîInô
 ();

100 
	`DrvDdrInôüli£
 (
NULL
);

103 
	`buûdTe°HwCﬁ‹Comb
 (&
ã°Cﬁ‹Comb
);

105 i‡(
	`sùpPùeGëEº‹Sètus
 (
ã°Cﬁ‹Comb
.
∂
))

107 
u32
 
îrNum
;

108 
	`¥ötf
 ("Pipeline creationÉrror\nError codes:\n");

109 
îrNum
 = 
	`sùpGëEº‹Hi°‹y
 (
sùpEº‹Log
);

110 
îrNum
)

112 
	`¥ötf
 ("%08lx\n", 
sùpEº‹Log
[
îrNum
 - 0x1]);

113 
îrNum
--;

117 
	`ªadTe°HwCﬁ‹CombI≈ut
(&
ã°Cﬁ‹Comb
);

119 #i‚de‡
SIPP_TEST_SYNC_API


121 
	`sùpRegi°îEvítCÆlback
 (
ã°Cﬁ‹Comb
.
∂
,

122 
≠pSùpCÆlback
);

125 
	`c⁄figTe°HwCﬁ‹Comb
 (&
ã°Cﬁ‹Comb
);

127 #ifde‡
SIPP_USE_PRECALC_SCHEDULE


129 
	`dbgSchedInô
 (
ã°Cﬁ‹Comb
.
∂
);

132 #ifde‡
SIPP_TEST_SYNC_API


133 
	`sùpPro˚ssFøme
 (
ã°Cﬁ‹Comb
.
∂
);

135 i‡(
	`sùpPùeGëEº‹Sètus
 (
ã°Cﬁ‹Comb
.
∂
))

137 
u32
 
îrNum
;

138 
	`¥ötf
 ("PipelineÑuntimeÉrror\nError codes:\n");

139 
îrNum
 = 
	`sùpGëEº‹Hi°‹y
 (
sùpEº‹Log
);

140 
îrNum
)

142 
	`¥ötf
 ("%08lx\n", 
sùpEº‹Log
[
îrNum
 - 0x1]);

143 
îrNum
--;

148 
	`sùpPro˚ssFømeNB
 (
ã°Cﬁ‹Comb
.
∂
);

150 i‡(
	`sùpPùeGëEº‹Sètus
 (
ã°Cﬁ‹Comb
.
∂
))

152 
u32
 
îrNum
;

153 
	`¥ötf
 ("PipelineÑuntimeÉrror\nError codes:\n");

154 
îrNum
 = 
	`sùpGëEº‹Hi°‹y
 (
sùpEº‹Log
);

155 
îrNum
)

157 
	`¥ötf
 ("%08lx\n", 
sùpEº‹Log
[
îrNum
 - 0x1]);

158 
îrNum
--;

162  
ã°Com∂ëe
 == 0x0 )

168 #ifde‡
SIPP_PC


169 
	`sùpGíîicRu¡imeWaôI§ThªadTîm
 ();

172 
	`wrôeTe°HwCﬁ‹CombOuçut
(&
ã°Cﬁ‹Comb
);

174 #ifde‡
SIPP_VCS


175 
	`unôTe°FöÆRï‹t
();

179 
	}
}

	@Sipp/SippFw/HwFilters/testHwColorComb/leon/testHwColorComb.c

13 
	~"ã°HwCﬁ‹Comb.h
"

15 
	~<ö˛ude/sùpHwDefs.h
>

16 
	~<¨ch/ma2x5x/ö˛ude/sùpHwDefs_ma2x5x.h
>

20 
UI¡8
 
DDR_DATA
 
	gTe°HwCﬁ‹Comb_dmaIn0_buf„r
[
SIPP_HW_COL_COMB_LUMA_BUFFER_WIDTH
* 
SIPP_HW_COL_COMB_LUMA_BUFFER_HEIGHT
* 
SIPP_HW_COL_COMB_LUMA_BUFFER_NUM_PLANES
]
ALIGNED
(8);

21 
UI¡8
 
DDR_DATA
 
	gTe°HwCﬁ‹Comb_dmaIn1_buf„r
[
SIPP_HW_COL_COMB_CHR_BUFFER_WIDTH
* 
SIPP_HW_COL_COMB_CHR_BUFFER_HEIGHT
* 
SIPP_HW_COL_COMB_CHR_BUFFER_NUM_PLANES
]
ALIGNED
(8);

22 
UI¡16
 
DDR_DATA
 
	gTe°HwCﬁ‹Comb_dmaOut0_buf„r
[
SIPP_HW_COL_COMB_BUFFER_WIDTH
* 
SIPP_HW_COL_COMB_BUFFER_HEIGHT
* 
SIPP_HW_COL_COMB_BUFFER_NUM_PLANES
]
ALIGNED
(8);

25 
	$ªadTe°HwCﬁ‹CombI≈ut
(
Te°HwCﬁ‹Comb
 *
pPl
)

27 
	`sùpRdFûeU8
((
UI¡8
*)
Te°HwCﬁ‹Comb_dmaIn0_buf„r
,
SIPP_HW_COL_COMB_LUMA_BUFFER_WIDTH
 * 
SIPP_HW_COL_COMB_LUMA_BUFFER_HEIGHT
 * 
SIPP_HW_COL_COMB_LUMA_BUFFER_NUM_PLANES
* (UInt8),"../../../../../../../resources/OCT_1584x1290_I_Chroma_block__luma_8bpp.raw");

28 
	`sùpRdFûeU8
((
UI¡8
*)
Te°HwCﬁ‹Comb_dmaIn1_buf„r
,
SIPP_HW_COL_COMB_CHR_BUFFER_WIDTH
 * 
SIPP_HW_COL_COMB_CHR_BUFFER_HEIGHT
 * 
SIPP_HW_COL_COMB_CHR_BUFFER_NUM_PLANES
* (UInt8),"../../../../../../../resources/OCT_792x645_I_chroma_block__chroma_8bpp.raw");

30 ()(
pPl
);

32 
	}
}

34 
	$wrôeTe°HwCﬁ‹CombOuçut
(
Te°HwCﬁ‹Comb
 *
pPl
)

36 
	`sùpWrFûeU8
((
UI¡8
*)
Te°HwCﬁ‹Comb_dmaOut0_buf„r
,
SIPP_HW_COL_COMB_BUFFER_WIDTH
 * 
SIPP_HW_COL_COMB_BUFFER_HEIGHT
 * 
SIPP_HW_COL_COMB_BUFFER_NUM_PLANES
* (
UI¡16
),"colorCombOutput.raw");

38 ()(
pPl
);

40 
	}
}

42 
	$buûdTe°HwCﬁ‹Comb
(
Te°HwCﬁ‹Comb
 *
pPl
)

45 
pPl
->
∂
 = 
	`sùpCª©ePùñöe
(0, 7, 
	`SIPP_MBIN
(
mböImgSùp
));

48 
pPl
->
dmaIn0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x00, 
SIPP_HW_COL_COMB_LUMA_BUFFER_WIDTH
, 
SIPP_HW_COL_COMB_LUMA_BUFFER_HEIGHT
, 
	`N_PL
(
SIPP_HW_COL_COMB_LUMA_BUFFER_NUM_PLANES
), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

49 
pPl
->
dmaIn1
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x00, 
SIPP_HW_COL_COMB_CHR_BUFFER_WIDTH
, 
SIPP_HW_COL_COMB_CHR_BUFFER_HEIGHT
, 
	`N_PL
(
SIPP_HW_COL_COMB_CHR_BUFFER_NUM_PLANES
), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

50 
pPl
->
cﬁ‹combMa2x5x0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x0, 
SIPP_HW_COL_COMB_BUFFER_WIDTH
, 
SIPP_HW_COL_COMB_BUFFER_HEIGHT
, 
	`N_PL
(
SIPP_HW_COL_COMB_BUFFER_NUM_PLANES
), 
	`SZ
(
UI¡16
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_CC_ID
, 0);

51 
pPl
->
dmaOut0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x00, 
SIPP_HW_COL_COMB_BUFFER_WIDTH
, 
SIPP_HW_COL_COMB_BUFFER_HEIGHT
, 
	`N_PL
(
SIPP_HW_COL_COMB_BUFFER_NUM_PLANES
), 
	`SZ
(
UI¡16
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

54 
	`sùpLökFûãr
(
pPl
->
cﬁ‹combMa2x5x0
,ÖPl->
dmaIn0
, 1,1 );

55 
	`sùpLökFûãr
(
pPl
->
cﬁ‹combMa2x5x0
,ÖPl->
dmaIn1
, 5,5 );

56 
	`sùpLökFûãr
(
pPl
->
dmaOut0
,ÖPl->
cﬁ‹combMa2x5x0
, 1,1 );

58 
	}
}

61 
	$c⁄figTe°HwCﬁ‹Comb
(
Te°HwCﬁ‹Comb
 *
pPl
)

63 
DmaP¨am
 *
dmaIn0Cfg
 = (DmaP¨am *)
pPl
->
dmaIn0
->
∑øms
;

64 
DmaP¨am
 *
dmaIn1Cfg
 = (DmaP¨am *)
pPl
->
dmaIn1
->
∑øms
;

65 
CﬁCombP¨am
 *
cﬁ‹combMa2x5x0Cfg
(CﬁCombP¨am *)
pPl
->
cﬁ‹combMa2x5x0
->
∑øms
;

66 
DmaP¨am
 *
dmaOut0Cfg
 = (DmaP¨am *)
pPl
->
dmaOut0
->
∑øms
;

71 
cﬁ‹combMa2x5x0Cfg
->
cfg
=
	`CC_CFG
(
FORCE_LUMA_ONE
,0,
LUT_3D_BYPASS
,
LUT_3D_LOAD
,
U12F_OUTPUT
,
OUTPUT_PLANE_MULT
);

72 
cﬁ‹combMa2x5x0Cfg
->
krgb
[0]=
K_R
 | (
K_G
 << 16);

73 
cﬁ‹combMa2x5x0Cfg
->
krgb
[1]=(
K_B
 | (
EPSILON
 << 16));

74 
cﬁ‹combMa2x5x0Cfg
->
ccm
[0]=(
cﬁC‹rM©rix
[0] | colCorrMatrix[1] << 16);

75 
cﬁ‹combMa2x5x0Cfg
->
ccm
[1]=(
cﬁC‹rM©rix
[2] | colCorrMatrix[3] << 16);

76 
cﬁ‹combMa2x5x0Cfg
->
ccm
[2]=(
cﬁC‹rM©rix
[4] | colCorrMatrix[5] << 16);

77 
cﬁ‹combMa2x5x0Cfg
->
ccm
[3]=(
cﬁC‹rM©rix
[6] | colCorrMatrix[7] << 16);

78 
cﬁ‹combMa2x5x0Cfg
->
ccm
[4]=(
cﬁC‹rM©rix
[8] | 
R_OFF
 << 16);

79 
cﬁ‹combMa2x5x0Cfg
->
ccOffs
=(
G_OFF
 | 
B_OFF
 << 16);

80 
cﬁ‹combMa2x5x0Cfg
->
thªeDLut
=
Lut3D
;

81 
cﬁ‹combMa2x5x0Cfg
->
lutF‹m©
=0x2;

82 
dmaIn0Cfg
->
ddrAddr
 = (
UI¡32
)&
Te°HwCﬁ‹Comb_dmaIn0_buf„r
;

83 
dmaIn1Cfg
->
ddrAddr
 = (
UI¡32
)&
Te°HwCﬁ‹Comb_dmaIn1_buf„r
;

84 
dmaOut0Cfg
->
ddrAddr
 = (
UI¡32
)&
Te°HwCﬁ‹Comb_dmaOut0_buf„r
;

87 
	}
}

	@Sipp/SippFw/HwFilters/testHwColorComb/leon/testHwColorComb.h

13 #i‚de‡
__TESTHWCOLORCOMB_H__


14 
	#__TESTHWCOLORCOMB_H__


	)

16 
	~<sùp.h
>

17 
	~<sùpTe°Comm⁄.h
>

19 
	~"ã°HwCﬁ‹CombSëup.h
"

23 
UI¡8
 
DDR_DATA
 
Te°HwCﬁ‹Comb_dmaIn0_buf„r
[ 
SIPP_HW_COL_COMB_LUMA_BUFFER_WIDTH
 * 
SIPP_HW_COL_COMB_LUMA_BUFFER_HEIGHT
 * 
SIPP_HW_COL_COMB_LUMA_BUFFER_NUM_PLANES
 ]
ALIGNED
(8);

24 
UI¡8
 
DDR_DATA
 
Te°HwCﬁ‹Comb_dmaIn1_buf„r
[ 
SIPP_HW_COL_COMB_CHR_BUFFER_WIDTH
 * 
SIPP_HW_COL_COMB_CHR_BUFFER_HEIGHT
 * 
SIPP_HW_COL_COMB_CHR_BUFFER_NUM_PLANES
 ]
ALIGNED
(8);

25 
UI¡16
 
DDR_DATA
 
Te°HwCﬁ‹Comb_dmaOut0_buf„r
[ 
SIPP_HW_COL_COMB_BUFFER_WIDTH
 * 
SIPP_HW_COL_COMB_BUFFER_HEIGHT
 * 
SIPP_HW_COL_COMB_BUFFER_NUM_PLANES
 ]
ALIGNED
(8);

29 
	sTe°HwCﬁ‹Comb


32 
SùpPùñöe
 *
	m∂
;

35 
SùpFûãr
 *
	mdmaIn0
;

36 
SùpFûãr
 *
	mcﬁ‹combMa2x5x0
;

37 
SùpFûãr
 *
	mdmaIn1
;

38 
SùpFûãr
 *
	mdmaOut0
;

40 } 
	tTe°HwCﬁ‹Comb
;

42 
ªadTe°HwCﬁ‹CombI≈ut
(
Te°HwCﬁ‹Comb
 *
pPl
);

43 
wrôeTe°HwCﬁ‹CombOuçut
(
Te°HwCﬁ‹Comb
 *
pPl
);

45 
buûdTe°HwCﬁ‹Comb
(
Te°HwCﬁ‹Comb
 *
pPl
);

46 
c⁄figTe°HwCﬁ‹Comb
(
Te°HwCﬁ‹Comb
 *
pPl
);

	@Sipp/SippFw/HwFilters/testHwColorComb/leon/testHwColorCombSetup.h

8 #i‚de‡
_TESTHWCOLORCOMBSETUP_H_


9 
	#_TESTHWCOLORCOMBSETUP_H_


	)

15 
	#FORCE_LUMA_ONE
 0

	)

16 
	#LUT_3D_BYPASS
 
DISABLED


	)

17 
	#LUT_3D_LOAD
 
ENABLED


	)

18 
	#U12F_OUTPUT
 
ENABLED


	)

19 
	#MUL
 255

	)

20 
	#T1
 2

	)

21 
	#OUTPUT_PLANE_MULT
 3

	)

23 
	#K_R
 0x0303

24 
	#K_G
 0x0303

25 

	)

26 
	#K_B
 0x0303

27 
	#EPSILON
 5

	)

29 
	#R_OFF
 0x0008

30 
	#G_OFF
 0x0018

31 
	#B_OFF
 0x1ff4

32 

	)

33 
	#SIPP_HW_COL_COMB_LUMA_BUFFER_WIDTH
 1584

	)

34 
	#SIPP_HW_COL_COMB_LUMA_BUFFER_HEIGHT
 1290

	)

35 
	#SIPP_HW_COL_COMB_LUMA_BUFFER_NUM_PLANES
 1

	)

36 
	#SIPP_HW_COL_COMB_LUMA_BUFFER_SIZE
 (
SIPP_HW_COL_COMB_LUMA_BUFFER_WIDTH
 * 
SIPP_HW_COL_COMB_LUMA_BUFFER_HEIGHT
 * 
SIPP_HW_COL_COMB_LUMA_BUFFER_NUM_PLANES
)

	)

37 
	#SIPP_HW_COL_COMB_CHR_BUFFER_WIDTH
 (1584 >> 1)

	)

38 
	#SIPP_HW_COL_COMB_CHR_BUFFER_HEIGHT
 (1290 >> 1)

	)

39 
	#SIPP_HW_COL_COMB_CHR_BUFFER_NUM_PLANES
 3

	)

40 
	#SIPP_HW_COL_COMB_CHR_BUFFER_SIZE
 (
SIPP_HW_COL_COMB_CHR_BUFFER_WIDTH
 * 
SIPP_HW_COL_COMB_CHR_BUFFER_HEIGHT
 * 
SIPP_HW_COL_COMB_CHR_BUFFER_NUM_PLANES
)

	)

41 
	#SIPP_HW_COL_COMB_BUFFER_WIDTH
 1584

	)

42 
	#SIPP_HW_COL_COMB_BUFFER_HEIGHT
 1290

	)

43 
	#SIPP_HW_COL_COMB_BUFFER_NUM_PLANES
 3

	)

44 
	#SIPP_HW_COL_COMB_BUFFER_SIZE
 (
SIPP_HW_COL_COMB_BUFFER_WIDTH
 * 
SIPP_HW_COL_COMB_BUFFER_HEIGHT
 * 
SIPP_HW_COL_COMB_BUFFER_NUM_PLANES
)

	)

50 
u16
 
cﬁC‹rM©rix
[];

51 
u16
 
Lut3D
[16 * 16 * 16 * 4];

	@Sipp/SippFw/HwFilters/testHwConv/leon/app_config.c

13 
	~"≠p_c⁄fig.h
"

14 
	~"DrvC¥.h
"

15 
	~"DrvDdr.h
"

16 
	~"swcLe⁄Utûs.h
"

17 
	~"DrvShaveL2Cache.h
"

18 
	~"DrvTimî.h
"

22 
	#SYS_CLK_KHZ
 12000

23 

	)

24 
	#L2CACHE_CFG
 (
SHAVE_L2CACHE_NORMAL_MODE
)

	)

25 
	#PARTITION_0
 (0)

	)

26 
	#SHAVES_USED
 (12)

	)

29 
	#AUX_CLOCKS_MIPICFG
 (
AUX_CLK_MASK_MIPI_ECFG
 | 
AUX_CLK_MASK_MIPI_CFG
)

	)

30 
	#AUX_CLOCKS_VIDEO
 (
AUX_CLK_MASK_MEDIA
 | 
AUX_CLK_MASK_LCD
)

	)

32 
	#MSS_CLOCKS
 ( 
DEV_MSS_APB_SLV
 | \

33 
DEV_MSS_APB2_CTRL
 | \

34 
DEV_MSS_RTBRIDGE
 | \

35 
DEV_MSS_RTAHB_CTRL
 | \

36 
DEV_MSS_LRT
 | \

37 
DEV_MSS_LRT_DSU
 | \

38 
DEV_MSS_LRT_L2C
 | \

39 
DEV_MSS_LRT_ICB
 | \

40 
DEV_MSS_AXI_BRIDGE
 | \

41 
DEV_MSS_MXI_CTRL
 | \

42 
DEV_MSS_MXI_DEFSLV
 | \

43 
DEV_MSS_AXI_MON
 | \

44 
DEV_MSS_LCD
 | \

45 
DEV_MSS_AMC
 | \

46 
DEV_MSS_SIPP
 | \

47 
DEV_MSS_TIM
 )

	)

49 
	#SIPP_CLOCKS
 ( 
DEV_SIPP_SIPP_ABPSLV
 | \

50 
DEV_SIPP_MIPI
 | \

51 
DEV_SIPP_MIPI_RX1
 )

	)

60 
tyAuxClkDividîCfg
 
	gauxClk
[] =

63 .
auxClockE«bÀMask
 = 
AUX_CLOCKS_VIDEO
,

64 .
	gauxClockSour˚
 = 
CLK_SRC_SYS_CLK_DIV2
 ,

65 .
	gauxClockDivNumî©‹
 = 1,

66 .
	gauxClockDivDíomö©‹
 = 1,

69 .
	gauxClockE«bÀMask
 = 
AUX_CLOCKS_MIPICFG
,

70 .
	gauxClockSour˚
 = 
CLK_SRC_SYS_CLK
 ,

71 .
	gauxClockDivNumî©‹
 = 1,

72 .
	gauxClockDivDíomö©‹
 = 18,

80 
tySocClockC⁄fig
 
	g˛ocksC⁄fig
 =

82 .
ªfClk0I≈utKhz
 = 
SYS_CLK_KHZ
 ,

83 .
	gªfClk1I≈utKhz
 = 0,

84 .
	gèrgëPŒ0FªqKhz
 = 360000,

85 .
	gèrgëPŒ1FªqKhz
 = 0,

86 .
	g˛kSrcPŒ1
 = 
CLK_SRC_REFCLK0
,

87 .
	gma°îClkDivNumî©‹
 = 1,

88 .
	gma°îClkDivDíomö©‹
 = 1,

89 .
	gcssDssClockE«bÀMask
 = 
DEFAULT_CORE_CSS_DSS_CLOCKS
,

90 .
	gmssClockE«bÀMask
 = 
MSS_CLOCKS
,

91 .
	gsùpClockE«bÀMask
 = 
SIPP_CLOCKS
,

92 .
	gu∑ClockE«bÀMask
 = 0,

93 .
	gpAuxClkCfg
 = 
auxClk
,

102 
	$öôClocksAndMem‹y
()

104 
i
;

105 
s32
 
sc
;

108 
sc
 = 
	`DrvC¥Inô
();

109 if(
sc
)

110  
sc
;

112 
	`DrvC¥SysDevi˚A˘i⁄
(
SIPP_DOMAIN
, 
ASSERT_RESET
, 
DEV_SIPP_MIPI
);

113 
	`DrvC¥SysDevi˚A˘i⁄
(
MSS_DOMAIN
, 
ASSERT_RESET
, 
DEV_MSS_SIPP
 | 
DEV_MSS_AMC
 | 
DEV_MSS_LCD
 );

114 
	`DrvC¥SysDevi˚A˘i⁄
(
MSS_DOMAIN
, 
DEASSERT_RESET
, 
DEV_MSS_SIPP
 );

116 
sc
 = 
	`DrvC¥SëupClocks
(&
˛ocksC⁄fig
);

117 if(
sc
)

118  
sc
;

120 
	`DrvC¥SysDevi˚A˘i⁄
(
MSS_DOMAIN
, 
DEASSERT_RESET
, -1);

121 
	`DrvC¥SysDevi˚A˘i⁄
(
CSS_DOMAIN
, 
DEASSERT_RESET
, -1);

122 
	`DrvC¥SysDevi˚A˘i⁄
(
SIPP_DOMAIN
, 
DEASSERT_RESET
, -1);

124 
	`swcLe⁄SëPIL
(0);

126 
	`DrvDdrInôüli£
(
NULL
);

129 
sc
 = 
	`DrvShaveL2CacheSëMode
(
L2CACHE_CFG
);

130 if(
sc
)

131  
sc
;

134 
	`DrvShaveL2CacheSëupP¨tôi⁄
(
SHAVEPART256KB
);

137 
sc
 = 
	`DrvShaveL2CacheAŒoˇãSëP¨tôi⁄s
();

138 if(
sc
)

139  
sc
;

142 
i
 = 0; i < 
SHAVES_USED
; i++)

144 
	`DrvShaveL2CacheSëLSUP¨tId
(
i
, 
PARTITION_0
);

147 
	`DrvShaveL2CacheP¨tôi⁄FlushAndInvÆid©e
(
PARTITION_0
);

150 
	}
}

	@Sipp/SippFw/HwFilters/testHwConv/leon/app_config.h

13 #i‚de‡
APP_CONFIG_H


14 
	#APP_CONFIG_H


	)

18 
	~"mv_ty≥s.h
"

29 
öôClocksAndMem‹y
();

	@Sipp/SippFw/HwFilters/testHwConv/leon/main.c

10 
	~<sùp.h
>

11 
	~<sùpTe°Comm⁄.h
>

13 #i‡
deföed
(
SIPP_VCS
)

14 
	~<UnôTe°Api.h
>

15 
	~<DrvTimî.h
>

16 
	~<DrvDdr.h
>

20 
	~"ã°HwC⁄v.h
"

26 
	#SIPP_TEST_SYNC_API


28 

	)

29 
	#SIPP_HW_CONV_BUFFER_WIDTH
 1296

	)

30 
	#SIPP_HW_CONV_BUFFER_HEIGHT
 972

	)

31 
	#SIPP_HW_CONV_BUFFER_NUM_PLANES
 1

	)

32 
	#SIPP_HW_CONV_BUFFER_SIZE
 (
SIPP_HW_CONV_BUFFER_WIDTH
 * 
SIPP_HW_CONV_BUFFER_HEIGHT
 * 
SIPP_HW_CONV_BUFFER_NUM_PLANES
)

	)

38 #ifde‡
SIPP_USE_PRECALC_SCHEDULE


39 
	~"pcDumpScheduÀ.hh
"

42 
Te°HwC⁄v
 
	gã°C⁄vPùe
;

44 #i‚de‡
SIPP_TEST_SYNC_API


45 vﬁ©ûê
u32
 
	gã°Com∂ëe
 = 0;

56 #ifde‡
SIPP_USE_PRECALC_SCHEDULE


57 
	~"pcDumpScheduÀ.hh
"

61 #i‚de‡
SIPP_TEST_SYNC_API


62 
	$≠pSùpCÆlback
 ( 
SùpPùñöe
 * 
pPùñöe
,

63 
eSIPP_PIPELINE_EVENT
 
eEvít
,

64 
SIPP_PIPELINE_EVENT_DATA
 * 
±EvítD©a


67 i‡(
eEvít
 =
eSIPP_PIPELINE_FRAME_DONE
)

69 
	`¥ötf
 ("appSippCallback : Frame doneÉventÑeceived : TestÖroceedingÅo checksándÅermination\n");

70 
ã°Com∂ëe
 = 1;

72 
	}
}

77 
	$maö
 (
¨gc
, *
¨gv
[])

79 
	`UNUSED
 (
¨gc
);

80 
	`UNUSED
 (
¨gv
);

81 
u32
 
sùpEº‹Log
[
SIPP_ERROR_HISTORY_SIZE
];

83 
	`sùpPœtf‹mInô
 ();

85 #i‚de‡
SIPP_PC


86 i‡(
PROCESS_LEON_OS
 =
	`swcWhoAmI
())

88 
	`¥ötf
 ("App Starting on LEON OS\n");

90 #i‚de‡
SIPP_TEST_SYNC_API


91 
	`¥ötf
 ("Please make sure IRQ sources for dynamicallyÑoute between LeonOSánd LeonRTáre set\n");

96 
	`¥ötf
 ("App Starting on LEON RT\n");

100 #i‚de‡
SIPP_TEST_SYNC_API


101 
	`sùpPœtf‹mInôAsync
 ();

104 #ifde‡
SIPP_VCS


105 
	`unôTe°Inô
 ();

106 
	`DrvTimîInô
 ();

107 
	`DrvDdrInôüli£
 (
NULL
);

110 
	`buûdTe°HwC⁄v
(&
ã°C⁄vPùe
);

112 i‡(
	`sùpPùeGëEº‹Sètus
 (
ã°C⁄vPùe
.
∂
))

114 
u32
 
îrNum
;

115 
	`¥ötf
 ("Pipeline creationÉrror\nError codes:\n");

116 
îrNum
 = 
	`sùpGëEº‹Hi°‹y
 (
sùpEº‹Log
);

117 
îrNum
)

119 
	`¥ötf
 ("%08lx\n", 
sùpEº‹Log
[
îrNum
 - 0x1]);

120 
îrNum
--;

124 #i‚de‡
SIPP_TEST_SYNC_API


126 
	`sùpRegi°îEvítCÆlback
 (
ã°C⁄vPùe
.
∂
,

127 
≠pSùpCÆlback
);

130 
	`c⁄figTe°HwC⁄v
(&
ã°C⁄vPùe
);

132 
	`ªadTe°HwC⁄vI≈ut
(&
ã°C⁄vPùe
);

134 #ifde‡
SIPP_USE_PRECALC_SCHEDULE


136 
	`dbgSchedInô
 (
ã°C⁄vPùe
.
∂
);

139 #ifde‡
SIPP_TEST_SYNC_API


140 
	`sùpPro˚ssFøme
 (
ã°C⁄vPùe
.
∂
);

142 i‡(
	`sùpPùeGëEº‹Sètus
 (
ã°C⁄vPùe
.
∂
))

144 
u32
 
îrNum
;

145 
	`¥ötf
 ("PipelineÑuntimeÉrror\nError codes:\n");

146 
îrNum
 = 
	`sùpGëEº‹Hi°‹y
 (
sùpEº‹Log
);

147 
îrNum
)

149 
	`¥ötf
 ("%08lx\n", 
sùpEº‹Log
[
îrNum
 - 0x1]);

150 
îrNum
--;

155 
	`sùpPro˚ssFømeNB
 (
ã°C⁄vPùe
.
∂
);

157 i‡(
	`sùpPùeGëEº‹Sètus
 (
ã°C⁄vPùe
.
∂
))

159 
u32
 
îrNum
;

160 
	`¥ötf
 ("PipelineÑuntimeÉrror\nError codes:\n");

161 
îrNum
 = 
	`sùpGëEº‹Hi°‹y
 (
sùpEº‹Log
);

162 
îrNum
)

164 
	`¥ötf
 ("%08lx\n", 
sùpEº‹Log
[
îrNum
 - 0x1]);

165 
îrNum
--;

169  
ã°Com∂ëe
 == 0x0 )

175 #ifde‡ 
SIPP_PC


176 
	`sùpGíîicRu¡imeWaôI§ThªadTîm
 ();

179 
	`wrôeTe°HwC⁄vOuçut
(&
ã°C⁄vPùe
);

181 
	`sùpRdFûeU8
 (
Te°HwC⁄v_dmaIn0_buf„r
, 
SIPP_HW_CONV_BUFFER_SIZE
, "../../../../../../../resources/0_0_convOutput_1296x972_P400.rgb");

182 
	`sùpDbgCom∑ªU8
((
u8
*)
Te°HwC⁄v_dmaIn0_buf„r
, (
uöt8_t
*)
Te°HwC⁄v_dmaOut0_buf„r
, 
SIPP_HW_CONV_BUFFER_SIZE
);

184 #ifde‡
SIPP_VCS


185 
	`unôTe°FöÆRï‹t
 ();

189 
	}
}

	@Sipp/SippFw/HwFilters/testHwConv/leon/testHwConv.c

13 
	~"ã°HwC⁄v.h
"

15 
	~<ö˛ude/sùpHwDefs.h
>

16 
	~<¨ch/ma2x5x/ö˛ude/sùpHwDefs_ma2x5x.h
>

20 
UI¡8
 
DDR_DATA
 
	gTe°HwC⁄v_dmaIn0_buf„r
 [
SIPP_HW_CONV_BUFFER_WIDTH
* 
SIPP_HW_CONV_BUFFER_HEIGHT
* 
SIPP_HW_CONV_BUFFER_NUM_PLANES
]
ALIGNED
(8);

21 
UI¡8
 
DDR_DATA
 
	gTe°HwC⁄v_dmaOut0_buf„r
[
SIPP_HW_CONV_BUFFER_WIDTH
* 
SIPP_HW_CONV_BUFFER_HEIGHT
* 
SIPP_HW_CONV_BUFFER_NUM_PLANES
]
ALIGNED
(8);

24 
	$ªadTe°HwC⁄vI≈ut
(
Te°HwC⁄v
 *
pPl
)

26 
	`sùpRdFûeU8
((
UI¡8
*)
Te°HwC⁄v_dmaIn0_buf„r
,
SIPP_HW_CONV_BUFFER_WIDTH
 * 
SIPP_HW_CONV_BUFFER_HEIGHT
 * 
SIPP_HW_CONV_BUFFER_NUM_PLANES
* (UInt8),"../../../../../../../resources/testIMG_1296x972_P400.rgb");

28 ()(
pPl
);

30 
	}
}

32 
	$wrôeTe°HwC⁄vOuçut
(
Te°HwC⁄v
 *
pPl
)

34 
	`sùpWrFûeU8
((
UI¡8
*)
Te°HwC⁄v_dmaOut0_buf„r
,
SIPP_HW_CONV_BUFFER_WIDTH
 * 
SIPP_HW_CONV_BUFFER_HEIGHT
 * 
SIPP_HW_CONV_BUFFER_NUM_PLANES
* (UInt8),"unitTestOut.raw");

36 ()(
pPl
);

38 
	}
}

40 
	$buûdTe°HwC⁄v
(
Te°HwC⁄v
 *
pPl
)

43 
pPl
->
∂
 = 
	`sùpCª©ePùñöe
(0, 7, 
	`SIPP_MBIN
(
mböImgSùp
));

46 
pPl
->
dmaIn0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x00, 
SIPP_HW_CONV_BUFFER_WIDTH
, 
SIPP_HW_CONV_BUFFER_HEIGHT
, 
	`N_PL
(
SIPP_HW_CONV_BUFFER_NUM_PLANES
), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

47 
pPl
->
c⁄vﬁuti⁄Ma2x5x0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x0, 
SIPP_HW_CONV_BUFFER_WIDTH
, 
SIPP_HW_CONV_BUFFER_HEIGHT
, 
	`N_PL
(
SIPP_HW_CONV_BUFFER_NUM_PLANES
), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_CONV_ID
, 0);

48 
pPl
->
dmaOut0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x00, 
SIPP_HW_CONV_BUFFER_WIDTH
, 
SIPP_HW_CONV_BUFFER_HEIGHT
, 
	`N_PL
(
SIPP_HW_CONV_BUFFER_NUM_PLANES
), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

51 
	`sùpLökFûãr
(
pPl
->
c⁄vﬁuti⁄Ma2x5x0
,ÖPl->
dmaIn0
, 3,3 );

52 
	`sùpLökFûãr
(
pPl
->
dmaOut0
,ÖPl->
c⁄vﬁuti⁄Ma2x5x0
, 1,1 );

54 
	}
}

57 
	$c⁄figTe°HwC⁄v
(
Te°HwC⁄v
 *
pPl
)

59 
DmaP¨am
 *
dmaIn0Cfg
 = (DmaP¨am *)
pPl
->
dmaIn0
->
∑øms
;

60 
C⁄vP¨am
 *
c⁄vﬁuti⁄Ma2x5x0Cfg
(C⁄vP¨am *)
pPl
->
c⁄vﬁuti⁄Ma2x5x0
->
∑øms
;

61 
DmaP¨am
 *
dmaOut0Cfg
 = (DmaP¨am *)
pPl
->
dmaOut0
->
∑øms
;

66 
c⁄vﬁuti⁄Ma2x5x0Cfg
->
cfg
=
	`CONV_CFG
(3, 1, 1, 0,1, 0, 0x3646, 1, 0);

67 
c⁄vﬁuti⁄Ma2x5x0Cfg
->
kî√l
[0]=0x0;

68 
c⁄vﬁuti⁄Ma2x5x0Cfg
->
kî√l
[1]= 0x0;

69 
c⁄vﬁuti⁄Ma2x5x0Cfg
->
kî√l
[2]= 0x0;

70 
c⁄vﬁuti⁄Ma2x5x0Cfg
->
kî√l
[3]= 0x0;

71 
c⁄vﬁuti⁄Ma2x5x0Cfg
->
kî√l
[4]= 0x00003000;

72 
c⁄vﬁuti⁄Ma2x5x0Cfg
->
kî√l
[5]= 0x0;

73 
c⁄vﬁuti⁄Ma2x5x0Cfg
->
kî√l
[6]= 0x30000000;

74 
c⁄vﬁuti⁄Ma2x5x0Cfg
->
kî√l
[7]= 0x30003800;

75 
c⁄vﬁuti⁄Ma2x5x0Cfg
->
kî√l
[8]= 0x0;

76 
c⁄vﬁuti⁄Ma2x5x0Cfg
->
kî√l
[9]= 0x0;

77 
c⁄vﬁuti⁄Ma2x5x0Cfg
->
kî√l
[10]= 0x00003000;

78 
c⁄vﬁuti⁄Ma2x5x0Cfg
->
kî√l
[11]= 0x0;

79 
c⁄vﬁuti⁄Ma2x5x0Cfg
->
kî√l
[12]= 0x0;

80 
c⁄vﬁuti⁄Ma2x5x0Cfg
->
kî√l
[13]= 0x0;

81 
c⁄vﬁuti⁄Ma2x5x0Cfg
->
kî√l
[14]= 0x0;

82 
c⁄vﬁuti⁄Ma2x5x0Cfg
->
shadowKî√l
[0]=0x0;

83 
c⁄vﬁuti⁄Ma2x5x0Cfg
->
shadowKî√l
[1]= 0x0;

84 
c⁄vﬁuti⁄Ma2x5x0Cfg
->
shadowKî√l
[2]= 0x0;

85 
c⁄vﬁuti⁄Ma2x5x0Cfg
->
shadowKî√l
[3]= 0x0;

86 
c⁄vﬁuti⁄Ma2x5x0Cfg
->
shadowKî√l
[4]= 0x00003000;

87 
c⁄vﬁuti⁄Ma2x5x0Cfg
->
shadowKî√l
[5]= 0x0;

88 
c⁄vﬁuti⁄Ma2x5x0Cfg
->
shadowKî√l
[6]= 0x30000000;

89 
c⁄vﬁuti⁄Ma2x5x0Cfg
->
shadowKî√l
[7]= 0x30003800;

90 
c⁄vﬁuti⁄Ma2x5x0Cfg
->
shadowKî√l
[8]= 0x0;

91 
c⁄vﬁuti⁄Ma2x5x0Cfg
->
shadowKî√l
[9]= 0x0;

92 
c⁄vﬁuti⁄Ma2x5x0Cfg
->
shadowKî√l
[10]= 0x00003000;

93 
c⁄vﬁuti⁄Ma2x5x0Cfg
->
shadowKî√l
[11]= 0x0;

94 
c⁄vﬁuti⁄Ma2x5x0Cfg
->
shadowKî√l
[12]= 0x0;

95 
c⁄vﬁuti⁄Ma2x5x0Cfg
->
shadowKî√l
[13]= 0x0;

96 
c⁄vﬁuti⁄Ma2x5x0Cfg
->
shadowKî√l
[14]= 0x0;

97 
dmaIn0Cfg
->
ddrAddr
 = (
UI¡32
)&
Te°HwC⁄v_dmaIn0_buf„r
;

98 
dmaOut0Cfg
->
ddrAddr
 = (
UI¡32
)&
Te°HwC⁄v_dmaOut0_buf„r
;

101 
	}
}

	@Sipp/SippFw/HwFilters/testHwConv/leon/testHwConv.h

13 #i‚de‡
__TESTHWCONV_H__


14 
	#__TESTHWCONV_H__


	)

16 
	~<sùp.h
>

17 
	~<sùpTe°Comm⁄.h
>

19 
	~"ã°HwC⁄vSëup.h
"

23 
UI¡8
 
DDR_DATA
 
Te°HwC⁄v_dmaIn0_buf„r
[ 
SIPP_HW_CONV_BUFFER_WIDTH
 * 
SIPP_HW_CONV_BUFFER_HEIGHT
 * 
SIPP_HW_CONV_BUFFER_NUM_PLANES
 ]
ALIGNED
(8);

24 
UI¡8
 
DDR_DATA
 
Te°HwC⁄v_dmaOut0_buf„r
[ 
SIPP_HW_CONV_BUFFER_WIDTH
 * 
SIPP_HW_CONV_BUFFER_HEIGHT
 * 
SIPP_HW_CONV_BUFFER_NUM_PLANES
 ]
ALIGNED
(8);

28 
	sTe°HwC⁄v


31 
SùpPùñöe
 *
	m∂
;

34 
SùpFûãr
 *
	mdmaIn0
;

35 
SùpFûãr
 *
	mdmaOut0
;

36 
SùpFûãr
 *
	mc⁄vﬁuti⁄Ma2x5x0
;

38 } 
	tTe°HwC⁄v
;

40 
ªadTe°HwC⁄vI≈ut
(
Te°HwC⁄v
 *
pPl
);

41 
wrôeTe°HwC⁄vOuçut
(
Te°HwC⁄v
 *
pPl
);

43 
buûdTe°HwC⁄v
(
Te°HwC⁄v
 *
pPl
);

44 
c⁄figTe°HwC⁄v
(
Te°HwC⁄v
 *
pPl
);

	@Sipp/SippFw/HwFilters/testHwConv/leon/testHwConvSetup.h

7 #i‚de‡
LEON_TESTHWCONVSETUP_H_


8 
	#LEON_TESTHWCONVSETUP_H_


	)

10 
	#SIPP_HW_CONV_BUFFER_WIDTH
 1296

	)

11 
	#SIPP_HW_CONV_BUFFER_HEIGHT
 972

	)

12 
	#SIPP_HW_CONV_BUFFER_NUM_PLANES
 1

	)

13 
	#SIPP_HW_CONV_BUFFER_SIZE
 (
SIPP_HW_CONV_BUFFER_WIDTH
 * 
SIPP_HW_CONV_BUFFER_HEIGHT
 * 
SIPP_HW_CONV_BUFFER_NUM_PLANES
)

	)

	@Sipp/SippFw/HwFilters/testHwDbyr/leon/app_config.c

13 
	~<ªgi°îsMyrüd.h
>

14 
	~<DrvC¥.h
>

19 #i‚de‡
IPIPE_CLK_CONFIG_SEL


20 
	#ùùeClockC⁄fig
 
ùùeClkC⁄figMV182


	)

22 
	#ùùeClockC⁄fig
 
IPIPE_CLK_CONFIG_SEL


	)

35 
tyAuxClkDividîCfg
 
	gauxClkAŒOn
[] =

37 {0x0FFFFFFF & (~(1<<
CSS_AUX_DDR_CORE
)Ë, 
CLK_SRC_REFCLK0
, 1, 1},

42 
tySocClockC⁄fig
 
	gùùeClkC⁄figMV182
 =

44 .
ªfClk0I≈utKhz
 = 12000,

45 .
	gªfClk1I≈utKhz
 = 0,

46 .
	gèrgëPŒ0FªqKhz
 = 264000,

47 .
	gèrgëPŒ1FªqKhz
 = 0,

48 .
	g˛kSrcPŒ1
 = 
CLK_SRC_REFCLK0
,

49 .
	gma°îClkDivNumî©‹
 = 
DONT_TOUCH_MASTER_DIVIDER
,

50 .
	gma°îClkDivDíomö©‹
 = 
DONT_TOUCH_MASTER_DIVIDER
,

51 .
	gcssDssClockE«bÀMask
 = 0xFFFFFFFFFFFFFFFFULL,

52 .
	gmssClockE«bÀMask
 = 0xFFFFFFFF,

53 .
	gsùpClockE«bÀMask
 = 0xFFFFFFFF,

54 .
	gu∑ClockE«bÀMask
 = 0xFFFFFFFF,

55 .
	gpAuxClkCfg
 = 
auxClkAŒOn
,

67 
	$öôClocksAndMem‹y
()

69 
	`DrvC¥Inô
();

70 
	`DrvC¥SëupClocks
(&
ùùeClockC⁄fig
);

73 
	}
}

	@Sipp/SippFw/HwFilters/testHwDbyr/leon/app_config.h

9 #i‚de‡
_APP_CONFIG_H_


10 
	#_APP_CONFIG_H_


	)

16 
öôClocksAndMem‹y
();

	@Sipp/SippFw/HwFilters/testHwDbyr/leon/main.c

10 
	~<sùp.h
>

11 
	~<sùpTe°Comm⁄.h
>

13 #i‡
deföed
(
SIPP_VCS
)

14 
	~<UnôTe°Api.h
>

15 
	~<DrvTimî.h
>

16 
	~<DrvDdr.h
>

20 
	~"ã°HwDbyr.h
"

26 
	#SIPP_TEST_SYNC_API


28 

	)

33 
Te°HwDbyr
 
	gã°DbyrPùe
;

35 #i‚de‡
SIPP_TEST_SYNC_API


36 vﬁ©ûê
u32
 
	gã°Com∂ëe
 = 0;

40 
uöt16_t
 
	giBuff12
[] = {

60 
uöt16_t
 
	geBuff12
[3][
SIPP_HW_DEBAYER_INPUT_BUFFER_WIDTH
 * 
SIPP_HW_DEBAYER_INPUT_BUFFER_HEIGHT
] =

125 #ifde‡
SIPP_USE_PRECALC_SCHEDULE


126 
	~"pcDumpScheduÀ.hh
"

131 #i‚de‡
SIPP_TEST_SYNC_API


132 
	$≠pSùpCÆlback
 ( 
SùpPùñöe
 * 
pPùñöe
,

133 
eSIPP_PIPELINE_EVENT
 
eEvít
,

134 
SIPP_PIPELINE_EVENT_DATA
 * 
±EvítD©a


137 i‡(
eEvít
 =
eSIPP_PIPELINE_FRAME_DONE
)

139 
	`¥ötf
 ("appSippCallback : Frame doneÉventÑeceived : TestÖroceedingÅo checksándÅermination\n");

140 
ã°Com∂ëe
 = 1;

143 
	}
}

148 
	$maö
 (
¨gc
, *
¨gv
[])

150 
	`UNUSED
 (
¨gc
);

151 
	`UNUSED
 (
¨gv
);

152 
u32
 
sùpEº‹Log
[
SIPP_ERROR_HISTORY_SIZE
];

154 
	`sùpPœtf‹mInô
 ();

156 #i‚de‡
SIPP_PC


157 i‡(
PROCESS_LEON_OS
 =
	`swcWhoAmI
())

159 
	`¥ötf
 ("App Starting on LEON OS\n");

161 #i‚de‡
SIPP_TEST_SYNC_API


162 
	`¥ötf
 ("Please make sure IRQ sources for dynamicallyÑoute between LeonOSánd LeonRTáre set\n");

167 
	`¥ötf
 ("App Starting on LEON RT\n");

171 #i‚de‡
SIPP_TEST_SYNC_API


172 
	`sùpPœtf‹mInôAsync
 ();

175 #ifde‡
SIPP_VCS


176 
	`unôTe°Inô
();

177 
	`DrvTimîInô
();

178 
	`DrvDdrInôüli£
(
NULL
);

181 
	`buûdTe°HwDbyr
(&
ã°DbyrPùe
);

183 i‡(
	`sùpPùeGëEº‹Sètus
 (
ã°DbyrPùe
.
∂
))

185 
u32
 
îrNum
;

186 
	`¥ötf
 ("Pipeline creationÉrror\nError codes:\n");

187 
îrNum
 = 
	`sùpGëEº‹Hi°‹y
 (
sùpEº‹Log
);

188 
îrNum
)

190 
	`¥ötf
 ("%08lx\n", 
sùpEº‹Log
[
îrNum
 - 0x1]);

191 
îrNum
--;

195 #i‚de‡
SIPP_TEST_SYNC_API


197 
	`sùpRegi°îEvítCÆlback
 (
ã°DbyrPùe
.
∂
,

198 
≠pSùpCÆlback
);

201 
	`c⁄figTe°HwDbyr
(&
ã°DbyrPùe
);

203 #ifde‡
SIPP_USE_PRECALC_SCHEDULE


205 
	`dbgSchedInô
(
ã°DbyrPùe
.
∂
);

208 #ifde‡
SIPP_TEST_SYNC_API


209 
	`sùpPro˚ssFøme
(
ã°DbyrPùe
.
∂
);

211 i‡(
	`sùpPùeGëEº‹Sètus
 (
ã°DbyrPùe
.
∂
))

213 
u32
 
îrNum
;

214 
	`¥ötf
 ("PipelineÑuntimeÉrror\nError codes:\n");

215 
îrNum
 = 
	`sùpGëEº‹Hi°‹y
 (
sùpEº‹Log
);

216 
îrNum
)

218 
	`¥ötf
 ("%08lx\n", 
sùpEº‹Log
[
îrNum
 - 0x1]);

219 
îrNum
--;

224 
	`sùpPro˚ssFømeNB
(
ã°DbyrPùe
.
∂
);

226 i‡(
	`sùpPùeGëEº‹Sètus
 (
ã°DbyrPùe
.
∂
))

228 
u32
 
îrNum
;

229 
	`¥ötf
 ("PipelineÑuntimeÉrror\nError codes:\n");

230 
îrNum
 = 
	`sùpGëEº‹Hi°‹y
 (
sùpEº‹Log
);

231 
îrNum
)

233 
	`¥ötf
 ("%08lx\n", 
sùpEº‹Log
[
îrNum
 - 0x1]);

234 
îrNum
--;

238 
ã°Com∂ëe
 == 0x0)

244 #ifde‡ 
SIPP_PC


245 
	`sùpGíîicRu¡imeWaôI§ThªadTîm
 ();

248 
	`wrôeTe°HwDbyrOuçut
(&
ã°DbyrPùe
);

251 
	`sùpDbgCom∑ªU8
((
u8
*)
eBuff12
, (u8*)
Te°HwDbyr_dmaOut0_buf„r
, 
SIPP_HW_DEBAYER_INPUT_BUFFER_SIZE
 * (
u16
));

253 #ifde‡
SIPP_VCS


254 
	`unôTe°FöÆRï‹t
();

258 
	}
}

	@Sipp/SippFw/HwFilters/testHwDbyr/leon/testDataDbyr.h

1 #i‚de‡
__TEST_DATA_DBYR_H__


2 
	#__TEST_DATA_DBYR_H__


	)

4 
	#SIPP_HW_DEBAYER_INPUT_BUFFER_WIDTH
 32

	)

5 
	#SIPP_HW_DEBAYER_INPUT_BUFFER_HEIGHT
 16

	)

6 
	#SIPP_HW_DEBAYER_INPUT_BUFFER_NUM_PLANES
 1

	)

7 
	#SIPP_HW_DEBAYER_INPUT_BUFFER_SIZE
 (
SIPP_HW_DEBAYER_INPUT_BUFFER_WIDTH
 * 
SIPP_HW_DEBAYER_INPUT_BUFFER_HEIGHT
 * 
SIPP_HW_DEBAYER_INPUT_BUFFER_NUM_PLANES
)

	)

10 
uöt16_t
 
iBuff12
[];

13 
uöt16_t
 
eBuff12
[3][
SIPP_HW_DEBAYER_INPUT_BUFFER_WIDTH
 * 
SIPP_HW_DEBAYER_INPUT_BUFFER_HEIGHT
];

	@Sipp/SippFw/HwFilters/testHwDbyr/leon/testHwDbyr.c

13 
	~"ã°HwDbyr.h
"

15 
	~<ö˛ude/sùpHwDefs.h
>

16 
	~<¨ch/ma2x5x/ö˛ude/sùpHwDefs_ma2x5x.h
>

20 
UI¡16
 
DDR_DATA
 
	gTe°HwDbyr_dmaOut0_buf„r
[
SIPP_HW_DEBAYER_INPUT_BUFFER_WIDTH
* 
SIPP_HW_DEBAYER_INPUT_BUFFER_HEIGHT
* 3 ]
ALIGNED
(8);

21 
UI¡8
 
DDR_DATA
 
	gTe°HwDbyr_dmaOut1_buf„r
[
SIPP_HW_DEBAYER_INPUT_BUFFER_WIDTH
* 
SIPP_HW_DEBAYER_INPUT_BUFFER_HEIGHT
* 
SIPP_HW_DEBAYER_INPUT_BUFFER_NUM_PLANES
]
ALIGNED
(8);

24 
	$ªadTe°HwDbyrI≈ut
(
Te°HwDbyr
 *
pPl
)

27 ()(
pPl
);

29 
	}
}

31 
	$wrôeTe°HwDbyrOuçut
(
Te°HwDbyr
 *
pPl
)

33 
	`sùpWrFûeU8
((
UI¡8
*)
Te°HwDbyr_dmaOut0_buf„r
,
SIPP_HW_DEBAYER_INPUT_BUFFER_WIDTH
 * 
SIPP_HW_DEBAYER_INPUT_BUFFER_HEIGHT
 * 3 * (
UI¡16
),"dbyrOutputRGB.raw");

34 
	`sùpWrFûeU8
((
UI¡8
*)
Te°HwDbyr_dmaOut1_buf„r
,
SIPP_HW_DEBAYER_INPUT_BUFFER_WIDTH
 * 
SIPP_HW_DEBAYER_INPUT_BUFFER_HEIGHT
 * 
SIPP_HW_DEBAYER_INPUT_BUFFER_NUM_PLANES
* (UInt8),"dbyrOutputLuma.raw");

36 ()(
pPl
);

38 
	}
}

40 
	$buûdTe°HwDbyr
(
Te°HwDbyr
 *
pPl
)

43 
pPl
->
∂
 = 
	`sùpCª©ePùñöe
(0, 0, 
	`SIPP_MBIN
(
mböImgSùp
));

46 
pPl
->
dmaIn0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x00, 
SIPP_HW_DEBAYER_INPUT_BUFFER_WIDTH
, 
SIPP_HW_DEBAYER_INPUT_BUFFER_HEIGHT
, 
	`N_PL
(
SIPP_HW_DEBAYER_INPUT_BUFFER_NUM_PLANES
), 
	`SZ
(
UI¡16
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

47 
pPl
->
debayîMa2x5x0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x0, 
SIPP_HW_DEBAYER_INPUT_BUFFER_WIDTH
, 
SIPP_HW_DEBAYER_INPUT_BUFFER_HEIGHT
, 
	`N_PL
(3), 
	`SZ
(
UI¡16
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DBYR_ID
, 0);

48 
	`sùpFûãrAddOBuf
(
pPl
->
debayîMa2x5x0
, 
SIPP_HW_DEBAYER_INPUT_BUFFER_NUM_PLANES
, (
UI¡8
));

49 
pPl
->
dmaOut0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x00, 
SIPP_HW_DEBAYER_INPUT_BUFFER_WIDTH
, 
SIPP_HW_DEBAYER_INPUT_BUFFER_HEIGHT
, 
	`N_PL
(3), 
	`SZ
(
UI¡16
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

50 
pPl
->
dmaOut1
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x00, 
SIPP_HW_DEBAYER_INPUT_BUFFER_WIDTH
, 
SIPP_HW_DEBAYER_INPUT_BUFFER_HEIGHT
, 
	`N_PL
(
SIPP_HW_DEBAYER_INPUT_BUFFER_NUM_PLANES
), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

53 
	`sùpLökFûãr
(
pPl
->
debayîMa2x5x0
,ÖPl->
dmaIn0
, 11,11 );

54 
	`sùpLökFûãr
(
pPl
->
dmaOut0
,ÖPl->
debayîMa2x5x0
, 1,1 );

55 
	`sùpLökFûãr
(
pPl
->
dmaOut1
,ÖPl->
debayîMa2x5x0
, 1,1 );

56 
	`sùpLökFûãrSëOBuf
(
pPl
->
dmaOut1
,ÖPl->
debayîMa2x5x0
, 1);

58 
	}
}

61 
	$c⁄figTe°HwDbyr
(
Te°HwDbyr
 *
pPl
)

63 
DmaP¨am
 *
dmaIn0Cfg
 = (DmaP¨am *)
pPl
->
dmaIn0
->
∑øms
;

64 
DbyrP¨am
 *
debayîMa2x5x0Cfg
 = (DbyrP¨am *)
pPl
->
debayîMa2x5x0
->
∑øms
;

65 
DmaP¨am
 *
dmaOut0Cfg
 = (DmaP¨am *)
pPl
->
dmaOut0
->
∑øms
;

66 
DmaP¨am
 *
dmaOut1Cfg
 = (DmaP¨am *)
pPl
->
dmaOut1
->
∑øms
;

71 
debayîMa2x5x0Cfg
->
cfg

	`DEBAYER_CFG
(
GRBG
,0,0,12,12,0,3,0);

72 
debayîMa2x5x0Cfg
->
thªsh
=
	`DEBAYER_THRESH
(0,0,1,1,1,0) ;

73 
debayîMa2x5x0Cfg
->
dew‹mCfg
=
	`DEBAYER_DEWORM
(0,0);

74 
debayîMa2x5x0Cfg
->
lumaWeight
=
	`DEBAYER_LUMA_COEFS_CFG
(96 , 128, 32);

75 
dmaIn0Cfg
->
ddrAddr
 = (
UI¡32
)
iBuff12
;

76 
dmaOut0Cfg
->
ddrAddr
 = (
UI¡32
)&
Te°HwDbyr_dmaOut0_buf„r
;

77 
dmaOut1Cfg
->
ddrAddr
 = (
UI¡32
)&
Te°HwDbyr_dmaOut1_buf„r
;

80 
	}
}

	@Sipp/SippFw/HwFilters/testHwDbyr/leon/testHwDbyr.h

13 #i‚de‡
__TESTHWDBYR_H__


14 
	#__TESTHWDBYR_H__


	)

16 
	~<sùp.h
>

17 
	~<sùpTe°Comm⁄.h
>

19 
	~"ã°D©aDbyr.h
"

23 
UI¡16
 
DDR_DATA
 
Te°HwDbyr_dmaOut0_buf„r
[ 
SIPP_HW_DEBAYER_INPUT_BUFFER_WIDTH
 * 
SIPP_HW_DEBAYER_INPUT_BUFFER_HEIGHT
 * 3 ]
ALIGNED
(8);

24 
UI¡8
 
DDR_DATA
 
Te°HwDbyr_dmaOut1_buf„r
[ 
SIPP_HW_DEBAYER_INPUT_BUFFER_WIDTH
 * 
SIPP_HW_DEBAYER_INPUT_BUFFER_HEIGHT
 * 
SIPP_HW_DEBAYER_INPUT_BUFFER_NUM_PLANES
 ]
ALIGNED
(8);

28 
	sTe°HwDbyr


31 
SùpPùñöe
 *
	m∂
;

34 
SùpFûãr
 *
	mdmaIn0
;

35 
SùpFûãr
 *
	mdmaOut0
;

36 
SùpFûãr
 *
	mdebayîMa2x5x0
;

37 
SùpFûãr
 *
	mdmaOut1
;

39 } 
	tTe°HwDbyr
;

41 
ªadTe°HwDbyrI≈ut
(
Te°HwDbyr
 *
pPl
);

42 
wrôeTe°HwDbyrOuçut
(
Te°HwDbyr
 *
pPl
);

44 
buûdTe°HwDbyr
(
Te°HwDbyr
 *
pPl
);

45 
c⁄figTe°HwDbyr
(
Te°HwDbyr
 *
pPl
);

	@Sipp/SippFw/HwFilters/testHwDoGLTM/leon/app_config.c

13 
	~"≠p_c⁄fig.h
"

14 
	~"DrvC¥.h
"

15 
	~"DrvDdr.h
"

16 
	~"swcLe⁄Utûs.h
"

17 
	~"DrvShaveL2Cache.h
"

18 
	~"DrvTimî.h
"

22 
	#SYS_CLK_KHZ
 12000

23 

	)

24 
	#L2CACHE_CFG
 (
SHAVE_L2CACHE_NORMAL_MODE
)

	)

25 
	#PARTITION_0
 (0)

	)

26 
	#SHAVES_USED
 (12)

	)

29 
	#AUX_CLOCKS_MIPICFG
 (
AUX_CLK_MASK_MIPI_ECFG
 | 
AUX_CLK_MASK_MIPI_CFG
)

	)

30 
	#AUX_CLOCKS_VIDEO
 (
AUX_CLK_MASK_MEDIA
 | 
AUX_CLK_MASK_LCD
)

	)

32 
	#MSS_CLOCKS
 ( 
DEV_MSS_APB_SLV
 | \

33 
DEV_MSS_APB2_CTRL
 | \

34 
DEV_MSS_RTBRIDGE
 | \

35 
DEV_MSS_RTAHB_CTRL
 | \

36 
DEV_MSS_LRT
 | \

37 
DEV_MSS_LRT_DSU
 | \

38 
DEV_MSS_LRT_L2C
 | \

39 
DEV_MSS_LRT_ICB
 | \

40 
DEV_MSS_AXI_BRIDGE
 | \

41 
DEV_MSS_MXI_CTRL
 | \

42 
DEV_MSS_MXI_DEFSLV
 | \

43 
DEV_MSS_AXI_MON
 | \

44 
DEV_MSS_LCD
 | \

45 
DEV_MSS_AMC
 | \

46 
DEV_MSS_SIPP
 | \

47 
DEV_MSS_TIM
 )

	)

49 
	#SIPP_CLOCKS
 ( 
DEV_SIPP_SIPP_ABPSLV
 | \

50 
DEV_SIPP_MIPI
 | \

51 
DEV_SIPP_MIPI_RX1
 )

	)

60 
tyAuxClkDividîCfg
 
	gauxClk
[] =

63 .
auxClockE«bÀMask
 = 
AUX_CLOCKS_VIDEO
,

64 .
	gauxClockSour˚
 = 
CLK_SRC_SYS_CLK_DIV2
 ,

65 .
	gauxClockDivNumî©‹
 = 1,

66 .
	gauxClockDivDíomö©‹
 = 1,

69 .
	gauxClockE«bÀMask
 = 
AUX_CLOCKS_MIPICFG
,

70 .
	gauxClockSour˚
 = 
CLK_SRC_SYS_CLK
 ,

71 .
	gauxClockDivNumî©‹
 = 1,

72 .
	gauxClockDivDíomö©‹
 = 18,

80 
tySocClockC⁄fig
 
	g˛ocksC⁄fig
 =

82 .
ªfClk0I≈utKhz
 = 
SYS_CLK_KHZ
 ,

83 .
	gªfClk1I≈utKhz
 = 0,

84 .
	gèrgëPŒ0FªqKhz
 = 360000,

85 .
	gèrgëPŒ1FªqKhz
 = 0,

86 .
	g˛kSrcPŒ1
 = 
CLK_SRC_REFCLK0
,

87 .
	gma°îClkDivNumî©‹
 = 1,

88 .
	gma°îClkDivDíomö©‹
 = 1,

89 .
	gcssDssClockE«bÀMask
 = 
DEFAULT_CORE_CSS_DSS_CLOCKS
,

90 .
	gmssClockE«bÀMask
 = 
MSS_CLOCKS
,

91 .
	gsùpClockE«bÀMask
 = 
SIPP_CLOCKS
,

92 .
	gu∑ClockE«bÀMask
 = 0,

93 .
	gpAuxClkCfg
 = 
auxClk
,

102 
	$öôClocksAndMem‹y
()

104 
i
;

105 
s32
 
sc
;

108 
sc
 = 
	`DrvC¥Inô
();

109 if(
sc
)

110  
sc
;

112 
	`DrvC¥SysDevi˚A˘i⁄
(
SIPP_DOMAIN
, 
ASSERT_RESET
, 
DEV_SIPP_MIPI
);

113 
	`DrvC¥SysDevi˚A˘i⁄
(
MSS_DOMAIN
, 
ASSERT_RESET
, 
DEV_MSS_SIPP
 | 
DEV_MSS_AMC
 | 
DEV_MSS_LCD
 );

114 
	`DrvC¥SysDevi˚A˘i⁄
(
MSS_DOMAIN
, 
DEASSERT_RESET
, 
DEV_MSS_SIPP
 );

116 
sc
 = 
	`DrvC¥SëupClocks
(&
˛ocksC⁄fig
);

117 if(
sc
)

118  
sc
;

120 
	`DrvC¥SysDevi˚A˘i⁄
(
MSS_DOMAIN
, 
DEASSERT_RESET
, -1);

121 
	`DrvC¥SysDevi˚A˘i⁄
(
CSS_DOMAIN
, 
DEASSERT_RESET
, -1);

122 
	`DrvC¥SysDevi˚A˘i⁄
(
SIPP_DOMAIN
, 
DEASSERT_RESET
, -1);

124 
	`swcLe⁄SëPIL
(0);

126 
	`DrvDdrInôüli£
(
NULL
);

129 
sc
 = 
	`DrvShaveL2CacheSëMode
(
L2CACHE_CFG
);

130 if(
sc
)

131  
sc
;

134 
	`DrvShaveL2CacheSëupP¨tôi⁄
(
SHAVEPART256KB
);

137 
sc
 = 
	`DrvShaveL2CacheAŒoˇãSëP¨tôi⁄s
();

138 if(
sc
)

139  
sc
;

142 
i
 = 0; i < 
SHAVES_USED
; i++)

144 
	`DrvShaveL2CacheSëLSUP¨tId
(
i
, 
PARTITION_0
);

147 
	`DrvShaveL2CacheP¨tôi⁄FlushAndInvÆid©e
(
PARTITION_0
);

150 
	}
}

	@Sipp/SippFw/HwFilters/testHwDoGLTM/leon/app_config.h

13 #i‚de‡
APP_CONFIG_H


14 
	#APP_CONFIG_H


	)

18 
	~"mv_ty≥s.h
"

29 
öôClocksAndMem‹y
();

	@Sipp/SippFw/HwFilters/testHwDoGLTM/leon/main.c

9 
	~<sùp.h
>

10 
	~<sùpTe°Comm⁄.h
>

12 #i‡
deföed
(
SIPP_VCS
)

13 
	~<UnôTe°Api.h
>

14 
	~<DrvTimî.h
>

15 
	~<DrvDdr.h
>

18 
	~"ã°HwDogLtmSëup.h
"

19 
	~"ã°HwDoGLTM.h
"

25 
	#SIPP_TEST_SYNC_API


27 

	)

32 #ifde‡
SIPP_USE_PRECALC_SCHEDULE


33 
	~"pcDumpScheduÀ.hh
"

36 
Te°HwDoGLTM
 
	gã°DogLTMPùe
;

38 #i‚de‡
SIPP_TEST_SYNC_API


39 vﬁ©ûê
u32
 
	gã°Com∂ëe
 = 0;

42 c⁄° 
uöt16_t
 
	g…m_curves
[
NPOINTS
][
NCURVES
] =

62 
u8
 
	gKCSë0
[] =

72 
u8
 
	gKCSë1
[] =

84 
u8
 
DDR_DATA
 
	gSùpHwDoGLTM_dmaRef_buf„r
[
SIPP_HW_DOG_LTM_BUFFER_SIZE
];

91 #i‚de‡
SIPP_TEST_SYNC_API


92 
	$≠pSùpCÆlback
 ( 
SùpPùñöe
 * 
pPùñöe
,

93 
eSIPP_PIPELINE_EVENT
 
eEvít
,

94 
SIPP_PIPELINE_EVENT_DATA
 * 
±EvítD©a


97 i‡(
eEvít
 =
eSIPP_PIPELINE_FRAME_DONE
)

99 
	`¥ötf
 ("appSippCallback : Frame doneÉventÑeceived : TestÖroceedingÅo checksándÅermination\n");

100 
ã°Com∂ëe
 = 1;

103 
	}
}

108 
	$maö
 (
¨gc
, *
¨gv
[])

110 
	`UNUSED
 (
¨gc
);

111 
	`UNUSED
 (
¨gv
);

112 
u32
 
sùpEº‹Log
[
SIPP_ERROR_HISTORY_SIZE
];

114 
	`sùpPœtf‹mInô
();

116 #i‚de‡
SIPP_PC


117 i‡(
PROCESS_LEON_OS
 =
	`swcWhoAmI
())

119 
	`¥ötf
 ("App Starting on LEON OS\n");

121 #i‚de‡
SIPP_TEST_SYNC_API


122 
	`¥ötf
 ("Please make sure IRQ sources for dynamicallyÑoute between LeonOSánd LeonRTáre set\n");

127 
	`¥ötf
 ("App Starting on LEON RT\n");

131 #i‚de‡
SIPP_TEST_SYNC_API


132 
	`sùpPœtf‹mInôAsync
 ();

135 #ifde‡
SIPP_VCS


136 
	`unôTe°Inô
();

137 
	`DrvTimîInô
();

138 
	`DrvDdrInôüli£
(
NULL
);

141 
	`buûdTe°HwDoGLTM
(&
ã°DogLTMPùe
);

143 i‡(
	`sùpPùeGëEº‹Sètus
 (
ã°DogLTMPùe
.
∂
))

145 
u32
 
îrNum
;

146 
	`¥ötf
 ("Pipeline creationÉrror\nError codes:\n");

147 
îrNum
 = 
	`sùpGëEº‹Hi°‹y
 (
sùpEº‹Log
);

148 
îrNum
)

150 
	`¥ötf
 ("%08lx\n", 
sùpEº‹Log
[
îrNum
 - 0x1]);

151 
îrNum
--;

155 #i‚de‡
SIPP_TEST_SYNC_API


157 
	`sùpRegi°îEvítCÆlback
 (
ã°DogLTMPùe
.
∂
,

158 
≠pSùpCÆlback
);

161 
	`c⁄figTe°HwDoGLTM
(&
ã°DogLTMPùe
);

163 
	`ªadTe°HwDoGLTMI≈ut
(&
ã°DogLTMPùe
);

165 #ifde‡
SIPP_USE_PRECALC_SCHEDULE


167 
	`dbgSchedInô
(
ã°DogLTMPùe
.
∂
);

170 #ifde‡
SIPP_TEST_SYNC_API


171 
	`sùpPro˚ssFøme
(
ã°DogLTMPùe
.
∂
);

173 i‡(
	`sùpPùeGëEº‹Sètus
 (
ã°DogLTMPùe
.
∂
))

175 
u32
 
îrNum
;

176 
	`¥ötf
 ("PipelineÑuntimeÉrror\nError codes:\n");

177 
îrNum
 = 
	`sùpGëEº‹Hi°‹y
 (
sùpEº‹Log
);

178 
îrNum
)

180 
	`¥ötf
 ("%08lx\n", 
sùpEº‹Log
[
îrNum
 - 0x1]);

181 
îrNum
--;

186 
	`sùpPro˚ssFømeNB
(
ã°DogLTMPùe
.
∂
);

188 i‡(
	`sùpPùeGëEº‹Sètus
 (
ã°DogLTMPùe
.
∂
))

190 
u32
 
îrNum
;

191 
	`¥ötf
 ("PipelineÑuntimeÉrror\nError codes:\n");

192 
îrNum
 = 
	`sùpGëEº‹Hi°‹y
 (
sùpEº‹Log
);

193 
îrNum
)

195 
	`¥ötf
 ("%08lx\n", 
sùpEº‹Log
[
îrNum
 - 0x1]);

196 
îrNum
--;

200  
ã°Com∂ëe
 == 0x0 )

206 #ifde‡ 
SIPP_PC


207 
	`sùpGíîicRu¡imeWaôI§ThªadTîm
 ();

210 
	`wrôeTe°HwDoGLTMOuçut
(&
ã°DogLTMPùe
);

213 
	`sùpRdFûeU8
 (
SùpHwDoGLTM_dmaRef_buf„r
, 
SIPP_HW_DOG_LTM_BUFFER_SIZE
, "../../../../../../../resources/Ref_dogLtmOutput_8bit_1584x1290.raw");

214 
	`sùpDbgCom∑ªU8
 (
SùpHwDoGLTM_dmaRef_buf„r
,
Te°HwDoGLTM_dmaOut0_buf„r
, 
SIPP_HW_DOG_LTM_BUFFER_SIZE
);

217 #ifde‡
SIPP_VCS


218 
	`unôTe°FöÆRï‹t
();

222 
	}
}

	@Sipp/SippFw/HwFilters/testHwDoGLTM/leon/testHwDoGLTM.c

13 
	~"ã°HwDoGLTM.h
"

15 
	~<ö˛ude/sùpHwDefs.h
>

16 
	~<¨ch/ma2x5x/ö˛ude/sùpHwDefs_ma2x5x.h
>

20 
UI¡8
 
DDR_DATA
 
	gTe°HwDoGLTM_dmaIn0_buf„r
[1584 * 1290 * 1 ]
ALIGNED
(8);

21 
UI¡8
 
DDR_DATA
 
	gTe°HwDoGLTM_dmaOut0_buf„r
[1584 * 1290 * 1 ]
ALIGNED
(8);

24 
	$ªadTe°HwDoGLTMI≈ut
(
Te°HwDoGLTM
 *
pPl
)

26 
	`sùpRdFûeU8
((
UI¡8
*)
Te°HwDoGLTM_dmaIn0_buf„r
,1584 * 1290 * 1 * (UInt8),"../../../../../../../resources/OCT_1584x1290_I_dogltm_8bpp.raw");

28 ()(
pPl
);

30 
	}
}

32 
	$wrôeTe°HwDoGLTMOuçut
(
Te°HwDoGLTM
 *
pPl
)

34 
	`sùpWrFûeU8
((
UI¡8
*)
Te°HwDoGLTM_dmaOut0_buf„r
,1584 * 1290 * 1 * (UInt8),"dogLtmOutput_8bit_1584x1290.raw");

36 ()(
pPl
);

38 
	}
}

40 
	$buûdTe°HwDoGLTM
(
Te°HwDoGLTM
 *
pPl
)

43 
pPl
->
∂
 = 
	`sùpCª©ePùñöe
(0, 0, 
	`SIPP_MBIN
(
mböImgSùp
));

46 
pPl
->
dmaIn0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x00, 1584, 1290, 
	`N_PL
(1), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

47 
pPl
->
dogLtmMa2x5x0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x0, 1584, 1290, 
	`N_PL
(1), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DOGL_ID
, 0);

48 
pPl
->
dmaOut0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x00, 1584, 1290, 
	`N_PL
(1), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

51 
	`sùpLökFûãr
(
pPl
->
dogLtmMa2x5x0
,ÖPl->
dmaIn0
, 15,15 );

52 
	`sùpLökFûãr
(
pPl
->
dmaOut0
,ÖPl->
dogLtmMa2x5x0
, 1,1 );

54 
	}
}

57 
	$c⁄figTe°HwDoGLTM
(
Te°HwDoGLTM
 *
pPl
)

59 
DmaP¨am
 *
dmaIn0Cfg
 = (DmaP¨am *)
pPl
->
dmaIn0
->
∑øms
;

60 
DogLtmP¨am
 *
dogLtmMa2x5x0Cfg
 = (DogLtmP¨am *)
pPl
->
dogLtmMa2x5x0
->
∑øms
;

61 
DmaP¨am
 *
dmaOut0Cfg
 = (DmaP¨am *)
pPl
->
dmaOut0
->
∑øms
;

66 
dogLtmMa2x5x0Cfg
->
cfg

	`DOGL_CFG_SET
(
MODE
,
DOG_THR
,
DOG_OUTPUT_CLAMP
,
DS_MODE
,
LTM_THR
,0,
DOG_HEIGHT
);

67 
dogLtmMa2x5x0Cfg
->
dogC€ffs11
=
KCSë0
;

68 
dogLtmMa2x5x0Cfg
->
dogC€ffs15
=
KCSë1
;

69 
dogLtmMa2x5x0Cfg
->
dogSåígth
=0xFF;

70 
dogLtmMa2x5x0Cfg
->
…mCurves
=(
u16
 *)
…m_curves
;

71 
dmaIn0Cfg
->
ddrAddr
 = (
UI¡32
)&
Te°HwDoGLTM_dmaIn0_buf„r
;

72 
dmaOut0Cfg
->
ddrAddr
 = (
UI¡32
)&
Te°HwDoGLTM_dmaOut0_buf„r
;

75 
	}
}

	@Sipp/SippFw/HwFilters/testHwDoGLTM/leon/testHwDoGLTM.h

13 #i‚de‡
__TESTHWDOGLTM_H__


14 
	#__TESTHWDOGLTM_H__


	)

16 
	~<sùp.h
>

17 
	~<sùpTe°Comm⁄.h
>

19 
	~"ã°HwDogLtmSëup.h
"

23 
UI¡8
 
DDR_DATA
 
Te°HwDoGLTM_dmaIn0_buf„r
[ 1584 * 1290 * 1 ]
ALIGNED
(8);

24 
UI¡8
 
DDR_DATA
 
Te°HwDoGLTM_dmaOut0_buf„r
[ 1584 * 1290 * 1 ]
ALIGNED
(8);

28 
	sTe°HwDoGLTM


31 
SùpPùñöe
 *
	m∂
;

34 
SùpFûãr
 *
	mdmaIn0
;

35 
SùpFûãr
 *
	mdmaOut0
;

36 
SùpFûãr
 *
	mdogLtmMa2x5x0
;

38 } 
	tTe°HwDoGLTM
;

40 
ªadTe°HwDoGLTMI≈ut
(
Te°HwDoGLTM
 *
pPl
);

41 
wrôeTe°HwDoGLTMOuçut
(
Te°HwDoGLTM
 *
pPl
);

43 
buûdTe°HwDoGLTM
(
Te°HwDoGLTM
 *
pPl
);

44 
c⁄figTe°HwDoGLTM
(
Te°HwDoGLTM
 *
pPl
);

	@Sipp/SippFw/HwFilters/testHwDoGLTM/leon/testHwDogLtmSetup.h

3 #i‚de‡
TEST_HWDOGLTM_SETUP_H_


4 
	#TEST_HWDOGLTM_SETUP_H_


	)

8 
	#NCURVES
 8

	)

9 
	#NPOINTS
 16

	)

11 
	#MODE_DOG_ONLY
 0x0

	)

12 
	#MODE_LTM_ONLY
 0x1

	)

13 
	#MODE_DOG_DENOISE
 0x2

	)

14 
	#MODE_DOG_LTM
 0x3

	)

16 
	#DSMODE_CARRY
 0x0

	)

17 
	#DSMODE_DOWN
 0x1

	)

18 
	#DSMODE_UPDN
 0x2

	)

20 
	#MODE
 
MODE_DOG_LTM


	)

21 
	#DOG_THR
 (
uöt16_t
)(0.015‡* 0xff)

	)

22 
	#DOG_OUTPUT_CLAMP
 
DISABLED


	)

23 
	#DS_MODE
 
DSMODE_CARRY


	)

24 
	#DOG_HEIGHT
 15

	)

25 
	#DOG_STR
 (
uöt16_t
)(1.000‡* 0xff)

	)

26 
	#LTM_THR
 35

	)

28 
	#SIPP_HW_DOG_LTM_BUFFER_WIDTH
 1584

	)

29 
	#SIPP_HW_DOG_LTM_BUFFER_HEIGHT
 1290

	)

30 
	#SIPP_HW_DOG_LTM_BUFFER_NUM_PLANES
 1

	)

31 
	#SIPP_HW_DOG_LTM_BUFFER_SIZE
 (
SIPP_HW_DOG_LTM_BUFFER_WIDTH
 * 
SIPP_HW_DOG_LTM_BUFFER_HEIGHT
 * 
SIPP_HW_DOG_LTM_BUFFER_NUM_PLANES
)

	)

35 c⁄° 
uöt16_t
 
…m_curves
[
NPOINTS
][
NCURVES
];

36 
u8
 
KCSë0
[];

37 
u8
 
KCSë1
[];

	@Sipp/SippFw/HwFilters/testHwEdgeOperator/leon/app_config.c

13 
	~<ªgi°îsMyrüd.h
>

14 
	~<DrvC¥.h
>

19 #i‚de‡
IPIPE_CLK_CONFIG_SEL


20 
	#ùùeClockC⁄fig
 
ùùeClkC⁄figMV182


	)

22 
	#ùùeClockC⁄fig
 
IPIPE_CLK_CONFIG_SEL


	)

35 
tyAuxClkDividîCfg
 
	gauxClkAŒOn
[] =

37 {0x0FFFFFFF & (~(1<<
CSS_AUX_DDR_CORE
)Ë, 
CLK_SRC_REFCLK0
, 1, 1},

42 
tySocClockC⁄fig
 
	gùùeClkC⁄figMV182
 =

44 .
ªfClk0I≈utKhz
 = 12000,

45 .
	gªfClk1I≈utKhz
 = 0,

46 .
	gèrgëPŒ0FªqKhz
 = 264000,

47 .
	gèrgëPŒ1FªqKhz
 = 0,

48 .
	g˛kSrcPŒ1
 = 
CLK_SRC_REFCLK0
,

49 .
	gma°îClkDivNumî©‹
 = 
DONT_TOUCH_MASTER_DIVIDER
,

50 .
	gma°îClkDivDíomö©‹
 = 
DONT_TOUCH_MASTER_DIVIDER
,

51 .
	gcssDssClockE«bÀMask
 = 0xFFFFFFFFFFFFFFFFULL,

52 .
	gmssClockE«bÀMask
 = 0xFFFFFFFF,

53 .
	gsùpClockE«bÀMask
 = 0xFFFFFFFF,

54 .
	gu∑ClockE«bÀMask
 = 0xFFFFFFFF,

55 .
	gpAuxClkCfg
 = 
auxClkAŒOn
,

67 
	$öôClocksAndMem‹y
()

69 
s32
 
sc
;

71 
sc

	`DrvC¥Inô
();

72 if(
sc
)

73  
sc
;

74 
sc
 = 
	`DrvC¥SëupClocks
(&
ùùeClockC⁄fig
);

75 if(
sc
)

76  
sc
;

78 
	}
}

	@Sipp/SippFw/HwFilters/testHwEdgeOperator/leon/app_config.h

9 #i‚de‡
_APP_CONFIG_H_


10 
	#_APP_CONFIG_H_


	)

16 
öôClocksAndMem‹y
();

	@Sipp/SippFw/HwFilters/testHwEdgeOperator/leon/main.c

10 
	~<sùp.h
>

11 
	~<sùpTe°Comm⁄.h
>

12 
	~"ã°HwEdgeO≥øt‹.h
"

14 #i‡
deföed
(
SIPP_VCS
)

15 
	~<UnôTe°Api.h
>

16 
	~<DrvTimî.h
>

17 
	~<DrvDdr.h
>

25 
	#SIPP_TEST_SYNC_API


26 

	)

31 #ifde‡
SIPP_USE_PRECALC_SCHEDULE


32 
	~"pcDumpScheduÀ.hh
"

35 #i‚de‡
SIPP_TEST_SYNC_API


36 vﬁ©ûê
u32
 
	gã°Com∂ëe
 = 0;

39 
u8
 
DDR_DATA
 
	gTe°HwEdgeO≥øt‹_ªf_buf„r
[
SIPP_HW_EDGE_OP_BUFFER_SIZE
];

41 
Te°HwEdgeO≥øt‹
 
	gã°EdgeOp
;

47 #ifde‡
SIPP_USE_PRECALC_SCHEDULE


48 
	~"pcDumpScheduÀ.hh
"

51 #i‚de‡
SIPP_TEST_SYNC_API


52 
	$≠pSùpCÆlback
 ( 
SùpPùñöe
 * 
pPùñöe
,

53 
eSIPP_PIPELINE_EVENT
 
eEvít
,

54 
SIPP_PIPELINE_EVENT_DATA
 * 
±EvítD©a


57 i‡(
eEvít
 =
eSIPP_PIPELINE_FRAME_DONE
)

59 
	`¥ötf
 ("appSippCallback : Frame doneÉventÑeceived : TestÖroceedingÅo checksándÅermination\n");

60 
ã°Com∂ëe
 = 1;

62 
	}
}

67 
	$maö
 (
¨gc
, *
¨gv
[])

69 
	`UNUSED
 (
¨gc
);

70 
	`UNUSED
 (
¨gv
);

71 
u32
 
sùpEº‹Log
[
SIPP_ERROR_HISTORY_SIZE
];

73 
	`sùpPœtf‹mInô
 ();

75 #i‚de‡
SIPP_PC


76 i‡(
PROCESS_LEON_OS
 =
	`swcWhoAmI
())

78 
	`¥ötf
 ("App Starting on LEON OS\n");

80 #i‚de‡
SIPP_TEST_SYNC_API


81 
	`¥ötf
 ("Please make sure IRQ sources for dynamicallyÑoute between LeonOSánd LeonRTáre set\n");

86 
	`¥ötf
 ("App Starting on LEON RT\n");

90 #i‚de‡
SIPP_TEST_SYNC_API


91 
	`sùpPœtf‹mInôAsync
 ();

94 #ifde‡
SIPP_VCS


95 
	`unôTe°Inô
 ();

96 
	`DrvTimîInô
 ();

97 
	`DrvDdrInôüli£
 (
NULL
);

100 
	`buûdTe°HwEdgeO≥øt‹
 (&
ã°EdgeOp
);

102 i‡(
	`sùpPùeGëEº‹Sètus
 (
ã°EdgeOp
.
∂
))

104 
u32
 
îrNum
;

105 
	`¥ötf
 ("Pipeline creationÉrror\nError codes:\n");

106 
îrNum
 = 
	`sùpGëEº‹Hi°‹y
 (
sùpEº‹Log
);

107 
îrNum
)

109 
	`¥ötf
 ("%08lx\n", 
sùpEº‹Log
[
îrNum
 - 0x1]);

110 
îrNum
--;

114 #i‚de‡
SIPP_TEST_SYNC_API


116 
	`sùpRegi°îEvítCÆlback
 (
ã°EdgeOp
.
∂
,

117 
≠pSùpCÆlback
);

120 
	`c⁄figTe°HwEdgeO≥øt‹
 (&
ã°EdgeOp
);

122 
	`ªadTe°HwEdgeO≥øt‹I≈ut
(&
ã°EdgeOp
);

124 #ifde‡
SIPP_USE_PRECALC_SCHEDULE


126 
	`dbgSchedInô
 (
ã°EdgeOp
.
∂
);

129 #ifde‡
SIPP_TEST_SYNC_API


130 
	`sùpPro˚ssFøme
 (
ã°EdgeOp
.
∂
);

132 i‡(
	`sùpPùeGëEº‹Sètus
 (
ã°EdgeOp
.
∂
))

134 
u32
 
îrNum
;

135 
	`¥ötf
 ("PipelineÑuntimeÉrror\nError codes:\n");

136 
îrNum
 = 
	`sùpGëEº‹Hi°‹y
 (
sùpEº‹Log
);

137 
îrNum
)

139 
	`¥ötf
 ("%08lx\n", 
sùpEº‹Log
[
îrNum
 - 0x1]);

140 
îrNum
--;

145 
	`sùpPro˚ssFømeNB
 (
ã°EdgeOp
.
∂
);

147 i‡(
	`sùpPùeGëEº‹Sètus
 (
ã°EdgeOp
.
∂
))

149 
u32
 
îrNum
;

150 
	`¥ötf
 ("PipelineÑuntimeÉrror\nError codes:\n");

151 
îrNum
 = 
	`sùpGëEº‹Hi°‹y
 (
sùpEº‹Log
);

152 
îrNum
)

154 
	`¥ötf
 ("%08lx\n", 
sùpEº‹Log
[
îrNum
 - 0x1]);

155 
îrNum
--;

159  
ã°Com∂ëe
 == 0x0 )

165 #ifde‡ 
SIPP_PC


166 
	`sùpGíîicRu¡imeWaôI§ThªadTîm
 ();

169 
	`sùpRdFûeU8
((
u8
*)
Te°HwEdgeO≥øt‹_ªf_buf„r
,\

170 
SIPP_HW_EDGE_OP_BUFFER_SIZE
,\

172 
	`wrôeTe°HwEdgeO≥øt‹Ouçut
(&
ã°EdgeOp
);

173 
	`sùpDbgCom∑ªU8
((
u8
*)
Te°HwEdgeO≥øt‹_ªf_buf„r
,\

174 (
u8
*)
Te°HwEdgeO≥øt‹_dmaOut0_buf„r
,\

175 
SIPP_HW_EDGE_OP_BUFFER_SIZE
);

177 #ifde‡
SIPP_VCS


178 
	`unôTe°FöÆRï‹t
();

182 
	}
}

	@Sipp/SippFw/HwFilters/testHwEdgeOperator/leon/testHwEdgeOperator.c

13 
	~"ã°HwEdgeO≥øt‹.h
"

15 
	~<ö˛ude/sùpHwDefs.h
>

16 
	~<¨ch/ma2x5x/ö˛ude/sùpHwDefs_ma2x5x.h
>

20 
UI¡8
 
DDR_DATA
 
	gTe°HwEdgeO≥øt‹_dmaIn0_buf„r
[
SIPP_HW_EDGE_OP_BUFFER_WIDTH
* 
SIPP_HW_EDGE_OP_BUFFER_HEIGHT
* 
SIPP_HW_EDGE_OP_BUFFER_NUM_PLANES
]
ALIGNED
(8);

21 
UI¡8
 
DDR_DATA
 
	gTe°HwEdgeO≥øt‹_dmaOut0_buf„r
[
SIPP_HW_EDGE_OP_BUFFER_WIDTH
* 
SIPP_HW_EDGE_OP_BUFFER_HEIGHT
* 
SIPP_HW_EDGE_OP_BUFFER_NUM_PLANES
]
ALIGNED
(8);

24 
	$ªadTe°HwEdgeO≥øt‹I≈ut
(
Te°HwEdgeO≥øt‹
 *
pPl
)

26 
	`sùpRdFûeU8
((
UI¡8
*)
Te°HwEdgeO≥øt‹_dmaIn0_buf„r
,
SIPP_HW_EDGE_OP_BUFFER_WIDTH
 * 
SIPP_HW_EDGE_OP_BUFFER_HEIGHT
 * 
SIPP_HW_EDGE_OP_BUFFER_NUM_PLANES
* (UInt8),"../../../../../../../resources/testIMG_1296x972_P400.rgb");

28 ()(
pPl
);

30 
	}
}

32 
	$wrôeTe°HwEdgeO≥øt‹Ouçut
(
Te°HwEdgeO≥øt‹
 *
pPl
)

34 
	`sùpWrFûeU8
((
UI¡8
*)
Te°HwEdgeO≥øt‹_dmaOut0_buf„r
,
SIPP_HW_EDGE_OP_BUFFER_WIDTH
 * 
SIPP_HW_EDGE_OP_BUFFER_HEIGHT
 * 
SIPP_HW_EDGE_OP_BUFFER_NUM_PLANES
* (UInt8),"edgeOpTestOut.rgb");

36 ()(
pPl
);

38 
	}
}

40 
	$buûdTe°HwEdgeO≥øt‹
(
Te°HwEdgeO≥øt‹
 *
pPl
)

43 
pPl
->
∂
 = 
	`sùpCª©ePùñöe
(0, 7, 
	`SIPP_MBIN
(
mböImgSùp
));

46 
pPl
->
dmaIn0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x00, 
SIPP_HW_EDGE_OP_BUFFER_WIDTH
, 
SIPP_HW_EDGE_OP_BUFFER_HEIGHT
, 
	`N_PL
(
SIPP_HW_EDGE_OP_BUFFER_NUM_PLANES
), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

47 
pPl
->
edge›î©‹Ma2x5x0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x0, 
SIPP_HW_EDGE_OP_BUFFER_WIDTH
, 
SIPP_HW_EDGE_OP_BUFFER_HEIGHT
, 
	`N_PL
(
SIPP_HW_EDGE_OP_BUFFER_NUM_PLANES
), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_EDGE_OP_ID
, 0);

48 
pPl
->
dmaOut0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x00, 
SIPP_HW_EDGE_OP_BUFFER_WIDTH
, 
SIPP_HW_EDGE_OP_BUFFER_HEIGHT
, 
	`N_PL
(
SIPP_HW_EDGE_OP_BUFFER_NUM_PLANES
), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

51 
	`sùpLökFûãr
(
pPl
->
edge›î©‹Ma2x5x0
,ÖPl->
dmaIn0
, 3,3 );

52 
	`sùpLökFûãr
(
pPl
->
dmaOut0
,ÖPl->
edge›î©‹Ma2x5x0
, 1,1 );

54 
	}
}

57 
	$c⁄figTe°HwEdgeO≥øt‹
(
Te°HwEdgeO≥øt‹
 *
pPl
)

59 
DmaP¨am
 *
dmaIn0Cfg
 = (DmaP¨am *)
pPl
->
dmaIn0
->
∑øms
;

60 
EdgeP¨am
 *
edge›î©‹Ma2x5x0Cfg
(EdgeP¨am *)
pPl
->
edge›î©‹Ma2x5x0
->
∑øms
;

61 
DmaP¨am
 *
dmaOut0Cfg
 = (DmaP¨am *)
pPl
->
dmaOut0
->
∑øms
;

66 
edge›î©‹Ma2x5x0Cfg
->
cfg
=
	`EDGE_OPERATOR_CFG
(
INPUT_MODE
, 
OUTPUT_MODE
, 
THETA_MODE
, 
MAGN_SCALE_FACT
, 
THETA_OVX
);

67 
edge›î©‹Ma2x5x0Cfg
->
xC€ff
=( 1 & 0x1f) | (-1 & 0x1f) << 5 | ( 2 & 0x1f) << 10 | (-2 & 0x1f) << 15 | ( 1 & 0x1f) << 20 | (-1 & 0x1f) << 25;

68 
edge›î©‹Ma2x5x0Cfg
->
yC€ff
=( 1 & 0x1f) | ( 2 & 0x1f) << 5 | ( 1 & 0x1f) << 10 | (-1 & 0x1f) << 15 | (-2 & 0x1f) << 20 | (-1 & 0x1f) << 25;

69 
dmaIn0Cfg
->
ddrAddr
 = (
UI¡32
)&
Te°HwEdgeO≥øt‹_dmaIn0_buf„r
;

70 
dmaOut0Cfg
->
ddrAddr
 = (
UI¡32
)&
Te°HwEdgeO≥øt‹_dmaOut0_buf„r
;

73 
	}
}

	@Sipp/SippFw/HwFilters/testHwEdgeOperator/leon/testHwEdgeOperator.h

13 #i‚de‡
__TESTHWEDGEOPERATOR_H__


14 
	#__TESTHWEDGEOPERATOR_H__


	)

16 
	~<sùp.h
>

17 
	~<sùpTe°Comm⁄.h
>

19 
	~"ã°HwEdgeO≥øt‹Sëup.h
"

23 
UI¡8
 
DDR_DATA
 
Te°HwEdgeO≥øt‹_dmaIn0_buf„r
[ 
SIPP_HW_EDGE_OP_BUFFER_WIDTH
 * 
SIPP_HW_EDGE_OP_BUFFER_HEIGHT
 * 
SIPP_HW_EDGE_OP_BUFFER_NUM_PLANES
 ]
ALIGNED
(8);

24 
UI¡8
 
DDR_DATA
 
Te°HwEdgeO≥øt‹_dmaOut0_buf„r
[ 
SIPP_HW_EDGE_OP_BUFFER_WIDTH
 * 
SIPP_HW_EDGE_OP_BUFFER_HEIGHT
 * 
SIPP_HW_EDGE_OP_BUFFER_NUM_PLANES
 ]
ALIGNED
(8);

28 
	sTe°HwEdgeO≥øt‹


31 
SùpPùñöe
 *
	m∂
;

34 
SùpFûãr
 *
	mdmaIn0
;

35 
SùpFûãr
 *
	mdmaOut0
;

36 
SùpFûãr
 *
	medge›î©‹Ma2x5x0
;

38 } 
	tTe°HwEdgeO≥øt‹
;

40 
ªadTe°HwEdgeO≥øt‹I≈ut
(
Te°HwEdgeO≥øt‹
 *
pPl
);

41 
wrôeTe°HwEdgeO≥øt‹Ouçut
(
Te°HwEdgeO≥øt‹
 *
pPl
);

43 
buûdTe°HwEdgeO≥øt‹
(
Te°HwEdgeO≥øt‹
 *
pPl
);

44 
c⁄figTe°HwEdgeO≥øt‹
(
Te°HwEdgeO≥øt‹
 *
pPl
);

	@Sipp/SippFw/HwFilters/testHwEdgeOperator/leon/testHwEdgeOperatorSetup.h

1 #i‚de‡
LEON_TESTHWEDGEOPERATORSETUP_H_


2 
	#LEON_TESTHWEDGEOPERATORSETUP_H_


	)

4 
	#SIPP_HW_EDGE_OP_BUFFER_WIDTH
 1296

	)

5 
	#SIPP_HW_EDGE_OP_BUFFER_HEIGHT
 972

	)

6 
	#SIPP_HW_EDGE_OP_BUFFER_NUM_PLANES
 1

	)

7 
	#SIPP_HW_EDGE_OP_BUFFER_SIZE
 (
SIPP_HW_EDGE_OP_BUFFER_WIDTH
 * \

8 
SIPP_HW_EDGE_OP_BUFFER_HEIGHT
 * 
SIPP_HW_EDGE_OP_BUFFER_NUM_PLANES
)

	)

11 
	#INPUT_MODE
 
NORMAL_MODE


	)

12 
	#OUTPUT_MODE
 
ORIENT_8BIT


	)

13 
	#THETA_MODE
 
NORMAL_THETA


	)

14 
	#THETA_OVX
 
ENABLED


	)

15 
	#MAGN_SCALE_FACT
 0x3C00

	)

	@Sipp/SippFw/HwFilters/testHwGenChroma/leon/app_config.c

13 
	~"≠p_c⁄fig.h
"

14 
	~"DrvC¥.h
"

15 
	~"DrvDdr.h
"

16 
	~"swcLe⁄Utûs.h
"

17 
	~"DrvShaveL2Cache.h
"

18 
	~"DrvTimî.h
"

22 
	#SYS_CLK_KHZ
 12000

23 

	)

24 
	#L2CACHE_CFG
 (
SHAVE_L2CACHE_NORMAL_MODE
)

	)

25 
	#PARTITION_0
 (0)

	)

26 
	#SHAVES_USED
 (12)

	)

29 
	#AUX_CLOCKS_MIPICFG
 (
AUX_CLK_MASK_MIPI_ECFG
 | 
AUX_CLK_MASK_MIPI_CFG
)

	)

30 
	#AUX_CLOCKS_VIDEO
 (
AUX_CLK_MASK_MEDIA
 | 
AUX_CLK_MASK_LCD
)

	)

32 
	#MSS_CLOCKS
 ( 
DEV_MSS_APB_SLV
 | \

33 
DEV_MSS_APB2_CTRL
 | \

34 
DEV_MSS_RTBRIDGE
 | \

35 
DEV_MSS_RTAHB_CTRL
 | \

36 
DEV_MSS_LRT
 | \

37 
DEV_MSS_LRT_DSU
 | \

38 
DEV_MSS_LRT_L2C
 | \

39 
DEV_MSS_LRT_ICB
 | \

40 
DEV_MSS_AXI_BRIDGE
 | \

41 
DEV_MSS_MXI_CTRL
 | \

42 
DEV_MSS_MXI_DEFSLV
 | \

43 
DEV_MSS_AXI_MON
 | \

44 
DEV_MSS_LCD
 | \

45 
DEV_MSS_AMC
 | \

46 
DEV_MSS_SIPP
 | \

47 
DEV_MSS_TIM
 )

	)

49 
	#SIPP_CLOCKS
 ( 
DEV_SIPP_SIPP_ABPSLV
 | \

50 
DEV_SIPP_MIPI
 | \

51 
DEV_SIPP_MIPI_RX1
 )

	)

60 
tyAuxClkDividîCfg
 
	gauxClk
[] =

63 .
auxClockE«bÀMask
 = 
AUX_CLOCKS_VIDEO
,

64 .
	gauxClockSour˚
 = 
CLK_SRC_SYS_CLK_DIV2
 ,

65 .
	gauxClockDivNumî©‹
 = 1,

66 .
	gauxClockDivDíomö©‹
 = 1,

69 .
	gauxClockE«bÀMask
 = 
AUX_CLOCKS_MIPICFG
,

70 .
	gauxClockSour˚
 = 
CLK_SRC_SYS_CLK
 ,

71 .
	gauxClockDivNumî©‹
 = 1,

72 .
	gauxClockDivDíomö©‹
 = 18,

80 
tySocClockC⁄fig
 
	g˛ocksC⁄fig
 =

82 .
ªfClk0I≈utKhz
 = 
SYS_CLK_KHZ
 ,

83 .
	gªfClk1I≈utKhz
 = 0,

84 .
	gèrgëPŒ0FªqKhz
 = 360000,

85 .
	gèrgëPŒ1FªqKhz
 = 0,

86 .
	g˛kSrcPŒ1
 = 
CLK_SRC_REFCLK0
,

87 .
	gma°îClkDivNumî©‹
 = 1,

88 .
	gma°îClkDivDíomö©‹
 = 1,

89 .
	gcssDssClockE«bÀMask
 = 
DEFAULT_CORE_CSS_DSS_CLOCKS
,

90 .
	gmssClockE«bÀMask
 = 
MSS_CLOCKS
,

91 .
	gsùpClockE«bÀMask
 = 
SIPP_CLOCKS
,

92 .
	gu∑ClockE«bÀMask
 = 0,

93 .
	gpAuxClkCfg
 = 
auxClk
,

102 
	$öôClocksAndMem‹y
()

104 
i
;

105 
s32
 
sc
;

108 
sc
 = 
	`DrvC¥Inô
();

109 if(
sc
)

110  
sc
;

112 
	`DrvC¥SysDevi˚A˘i⁄
(
SIPP_DOMAIN
, 
ASSERT_RESET
, 
DEV_SIPP_MIPI
);

113 
	`DrvC¥SysDevi˚A˘i⁄
(
MSS_DOMAIN
, 
ASSERT_RESET
, 
DEV_MSS_SIPP
 | 
DEV_MSS_AMC
 | 
DEV_MSS_LCD
 );

114 
	`DrvC¥SysDevi˚A˘i⁄
(
MSS_DOMAIN
, 
DEASSERT_RESET
, 
DEV_MSS_SIPP
 );

116 
sc
 = 
	`DrvC¥SëupClocks
(&
˛ocksC⁄fig
);

117 if(
sc
)

118  
sc
;

120 
	`DrvC¥SysDevi˚A˘i⁄
(
MSS_DOMAIN
, 
DEASSERT_RESET
, -1);

121 
	`DrvC¥SysDevi˚A˘i⁄
(
CSS_DOMAIN
, 
DEASSERT_RESET
, -1);

122 
	`DrvC¥SysDevi˚A˘i⁄
(
SIPP_DOMAIN
, 
DEASSERT_RESET
, -1);

124 
	`swcLe⁄SëPIL
(0);

126 
	`DrvDdrInôüli£
(
NULL
);

129 
sc
 = 
	`DrvShaveL2CacheSëMode
(
L2CACHE_CFG
);

130 if(
sc
)

131  
sc
;

134 
	`DrvShaveL2CacheSëupP¨tôi⁄
(
SHAVEPART256KB
);

137 
sc
 = 
	`DrvShaveL2CacheAŒoˇãSëP¨tôi⁄s
();

138 if(
sc
)

139  
sc
;

142 
i
 = 0; i < 
SHAVES_USED
; i++)

144 
	`DrvShaveL2CacheSëLSUP¨tId
(
i
, 
PARTITION_0
);

147 
	`DrvShaveL2CacheP¨tôi⁄FlushAndInvÆid©e
(
PARTITION_0
);

150 
	}
}

	@Sipp/SippFw/HwFilters/testHwGenChroma/leon/app_config.h

13 #i‚de‡
APP_CONFIG_H


14 
	#APP_CONFIG_H


	)

18 
	~"mv_ty≥s.h
"

29 
öôClocksAndMem‹y
();

	@Sipp/SippFw/HwFilters/testHwGenChroma/leon/main.c

9 
	~<sùp.h
>

10 
	~<sùpTe°Comm⁄.h
>

12 #i‡
deföed
(
SIPP_VCS
)

13 
	~<UnôTe°Api.h
>

14 
	~<DrvTimî.h
>

15 
	~<DrvDdr.h
>

18 
	~"ã°HwGíChromaSëup.h
"

19 
	~"ã°HwGíChroma.h
"

26 
	#SIPP_TEST_SYNC_API


28 

	)

45 #ifde‡
SIPP_USE_PRECALC_SCHEDULE


46 
	~"pcDumpScheduÀ.hh
"

49 
Te°HwGíChroma
 
	gã°GíChromaPùe
;

51 #i‚de‡
SIPP_TEST_SYNC_API


52 vﬁ©ûê
u32
 
	gã°Com∂ëe
 = 0;

59 #i‚de‡
SIPP_TEST_SYNC_API


60 
	$≠pSùpCÆlback
 ( 
SùpPùñöe
 * 
pPùñöe
,

61 
eSIPP_PIPELINE_EVENT
 
eEvít
,

62 
SIPP_PIPELINE_EVENT_DATA
 * 
±EvítD©a


65 i‡(
eEvít
 =
eSIPP_PIPELINE_FRAME_DONE
)

67 
	`¥ötf
 ("appSippCallback : Frame doneÉventÑeceived : TestÖroceedingÅo checksándÅermination\n");

68 
ã°Com∂ëe
 = 1;

71 
	}
}

76 
	$maö
 (
¨gc
, *
¨gv
[])

78 
	`UNUSED
 (
¨gc
);

79 
	`UNUSED
 (
¨gv
);

80 
u32
 
sùpEº‹Log
[
SIPP_ERROR_HISTORY_SIZE
];

82 
	`sùpPœtf‹mInô
 ();

84 #i‚de‡
SIPP_PC


85 i‡(
PROCESS_LEON_OS
 =
	`swcWhoAmI
())

87 
	`¥ötf
 ("App Starting on LEON OS\n");

89 #i‚de‡
SIPP_TEST_SYNC_API


90 
	`¥ötf
 ("Please make sure IRQ sources for dynamicallyÑoute between LeonOSánd LeonRTáre set\n");

95 
	`¥ötf
 ("App Starting on LEON RT\n");

99 #i‚de‡
SIPP_TEST_SYNC_API


100 
	`sùpPœtf‹mInôAsync
 ();

103 #ifde‡
SIPP_VCS


104 
	`unôTe°Inô
 ();

105 
	`DrvTimîInô
 ();

106 
	`DrvDdrInôüli£
 (
NULL
);

109 
	`buûdTe°HwGíChroma
 (&
ã°GíChromaPùe
);

111 i‡(
	`sùpPùeGëEº‹Sètus
 (
ã°GíChromaPùe
.
∂
))

113 
u32
 
îrNum
;

114 
	`¥ötf
 ("Pipeline creationÉrror\nError codes:\n");

115 
îrNum
 = 
	`sùpGëEº‹Hi°‹y
 (
sùpEº‹Log
);

116 
îrNum
)

118 
	`¥ötf
 ("%08lx\n", 
sùpEº‹Log
[
îrNum
 - 0x1]);

119 
îrNum
--;

123 #i‚de‡
SIPP_TEST_SYNC_API


125 
	`sùpRegi°îEvítCÆlback
 (
ã°GíChromaPùe
.
∂
,

126 
≠pSùpCÆlback
);

129 
	`c⁄figTe°HwGíChroma
 (&
ã°GíChromaPùe
);

131 
	`ªadTe°HwGíChromaI≈ut
 (&
ã°GíChromaPùe
);

133 #ifde‡
SIPP_USE_PRECALC_SCHEDULE


135 
	`dbgSchedInô
(
ã°GíChromaPùe
.
∂
);

138 #ifde‡
SIPP_TEST_SYNC_API


139 
	`sùpPro˚ssFøme
(
ã°GíChromaPùe
.
∂
);

141 i‡(
	`sùpPùeGëEº‹Sètus
 (
ã°GíChromaPùe
.
∂
))

143 
u32
 
îrNum
;

144 
	`¥ötf
 ("PipelineÑuntimeÉrror\nError codes:\n");

145 
îrNum
 = 
	`sùpGëEº‹Hi°‹y
 (
sùpEº‹Log
);

146 
îrNum
)

148 
	`¥ötf
 ("%08lx\n", 
sùpEº‹Log
[
îrNum
 - 0x1]);

149 
îrNum
--;

154 
	`sùpPro˚ssFømeNB
(
ã°GíChromaPùe
.
∂
);

156 i‡(
	`sùpPùeGëEº‹Sètus
 (
ã°GíChromaPùe
.
∂
))

158 
u32
 
îrNum
;

159 
	`¥ötf
 ("PipelineÑuntimeÉrror\nError codes:\n");

160 
îrNum
 = 
	`sùpGëEº‹Hi°‹y
 (
sùpEº‹Log
);

161 
îrNum
)

163 
	`¥ötf
 ("%08lx\n", 
sùpEº‹Log
[
îrNum
 - 0x1]);

164 
îrNum
--;

168  
ã°Com∂ëe
 == 0x0 )

174 #ifde‡ 
SIPP_PC


175 
	`sùpGíîicRu¡imeWaôI§ThªadTîm
 ();

178 
	`wrôeTe°HwGíChromaOuçut
 (&
ã°GíChromaPùe
);

182 #ifde‡
SIPP_VCS


183 
	`unôTe°FöÆRï‹t
();

187 
	}
}

	@Sipp/SippFw/HwFilters/testHwGenChroma/leon/testHwGenChroma.c

13 
	~"ã°HwGíChroma.h
"

15 
	~<ö˛ude/sùpHwDefs.h
>

16 
	~<¨ch/ma2x5x/ö˛ude/sùpHwDefs_ma2x5x.h
>

20 
UI¡8
 
DDR_DATA
 
	gTe°HwGíChroma_dmaIn0_buf„r
[1083 * 1289 * 3 ]
ALIGNED
(8);

21 
UI¡8
 
DDR_DATA
 
	gTe°HwGíChroma_dmaOut0_buf„r
[542 * 644 * 3 ]
ALIGNED
(8);

24 
	$ªadTe°HwGíChromaI≈ut
(
Te°HwGíChroma
 *
pPl
)

26 
	`sùpRdFûeU8
((
UI¡8
*)
Te°HwGíChroma_dmaIn0_buf„r
,1083 * 1289 * 3 * (UInt8),"../../../../../../../resources/GenChromaIn1083x1289_3_1bpp.rgb");

28 ()(
pPl
);

30 
	}
}

32 
	$wrôeTe°HwGíChromaOuçut
(
Te°HwGíChroma
 *
pPl
)

34 
	`sùpWrFûeU8
((
UI¡8
*)
Te°HwGíChroma_dmaOut0_buf„r
,542 * 644 * 3 * (UInt8),"genChromaOutput.rgb");

36 ()(
pPl
);

38 
	}
}

40 
	$buûdTe°HwGíChroma
(
Te°HwGíChroma
 *
pPl
)

43 
pPl
->
∂
 = 
	`sùpCª©ePùñöe
(0, 7, 
	`SIPP_MBIN
(
mböImgSùp
));

46 
pPl
->
dmaIn0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x00, 1083, 1289, 
	`N_PL
(3), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

47 
pPl
->
chromaGíMa2x5x0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 
SIPP_RESIZE
, 542, 644, 
	`N_PL
(3), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_CGEN_ID
, 0);

48 
pPl
->
dmaOut0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x00, 542, 644, 
	`N_PL
(3), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

51 
	`sùpLökFûãr
(
pPl
->
chromaGíMa2x5x0
,ÖPl->
dmaIn0
, 6,6 );

52 
	`sùpLökFûãr
(
pPl
->
dmaOut0
,ÖPl->
chromaGíMa2x5x0
, 1,1 );

54 
	}
}

57 
	$c⁄figTe°HwGíChroma
(
Te°HwGíChroma
 *
pPl
)

59 
DmaP¨am
 *
dmaIn0Cfg
 = (DmaP¨am *)
pPl
->
dmaIn0
->
∑øms
;

60 
GíChrP¨am
 *
chromaGíMa2x5x0Cfg
(GíChrP¨am *)
pPl
->
chromaGíMa2x5x0
->
∑øms
;

61 
DmaP¨am
 *
dmaOut0Cfg
 = (DmaP¨am *)
pPl
->
dmaOut0
->
∑øms
;

66 
chromaGíMa2x5x0Cfg
->
cfg
=
	`CGEN_CFG_SET
(0x50,
DAD_OFFSET
,
DAD_SLOPE
,
RSZ_INPUT_DW
,
BYPASS_PF_DAD
,
DS_MODE
);

67 
chromaGíMa2x5x0Cfg
->
yC€fs
=
	`CGEN_LUMA_COEFF_SET
(
LUMA_R_COEFF
,
LUMA_G_COEFF
,
LUMA_B_COEFF
) ;

68 
chromaGíMa2x5x0Cfg
->
chrC€fs
=
	`CGEN_CHROMA_COEFF_SET
(
CHROMA_EPSILON
,
CHROMA_R_COEFF
,
CHROMA_G_COEFF
,
CHROMA_B_COEFF
);

69 
dmaIn0Cfg
->
ddrAddr
 = (
UI¡32
)&
Te°HwGíChroma_dmaIn0_buf„r
;

70 
dmaOut0Cfg
->
ddrAddr
 = (
UI¡32
)&
Te°HwGíChroma_dmaOut0_buf„r
;

73 
	}
}

	@Sipp/SippFw/HwFilters/testHwGenChroma/leon/testHwGenChroma.h

13 #i‚de‡
__TESTHWGENCHROMA_H__


14 
	#__TESTHWGENCHROMA_H__


	)

16 
	~<sùp.h
>

17 
	~<sùpTe°Comm⁄.h
>

19 
	~"ã°HwGíChromaSëup.h
"

23 
UI¡8
 
DDR_DATA
 
Te°HwGíChroma_dmaIn0_buf„r
[ 1083 * 1289 * 3 ]
ALIGNED
(8);

24 
UI¡8
 
DDR_DATA
 
Te°HwGíChroma_dmaOut0_buf„r
[ 542 * 644 * 3 ]
ALIGNED
(8);

28 
	sTe°HwGíChroma


31 
SùpPùñöe
 *
	m∂
;

34 
SùpFûãr
 *
	mdmaIn0
;

35 
SùpFûãr
 *
	mdmaOut0
;

36 
SùpFûãr
 *
	mchromaGíMa2x5x0
;

38 } 
	tTe°HwGíChroma
;

40 
ªadTe°HwGíChromaI≈ut
(
Te°HwGíChroma
 *
pPl
);

41 
wrôeTe°HwGíChromaOuçut
(
Te°HwGíChroma
 *
pPl
);

43 
buûdTe°HwGíChroma
(
Te°HwGíChroma
 *
pPl
);

44 
c⁄figTe°HwGíChroma
(
Te°HwGíChroma
 *
pPl
);

	@Sipp/SippFw/HwFilters/testHwGenChroma/leon/testHwGenChromaSetup.h

7 #i‚de‡
LEON_TESTHWGENCHROMASETUP_H_


8 
	#LEON_TESTHWGENCHROMASETUP_H_


	)

10 
	#FLOAT_TO_FIXED5_3
(
A
, 
B
Ë(
uöt8_t
Ë(((AË<< 3Ë+ ((BË* 8))

	)

12 
	#DSMODE_CARRY
 0x0

	)

13 
	#DSMODE_DOWN
 0x1

	)

14 
	#DSMODE_UPDN
 0x2

	)

16 
	#PFR_STRENGTH
 10.f

	)

17 
	#DAD_OFFSET
 1

	)

18 
	#DAD_SLOPE
 255

	)

19 
	#RSZ_INPUT_DW
 8

	)

20 
	#BYPASS_PF_DAD
 
DISABLED


	)

21 
	#DS_MODE
 
DSMODE_DOWN


	)

22 
	#INPUT_DATA_WIDTH
 
RSZ_INPUT_DW


	)

23 
	#ODD_IMAGE_WIDTH
 
ENABLED


	)

24 
	#ODD_IMAGE_HEIGHT
 
ENABLED


	)

26 
	#LUMA_R_COEFF
 (
uöt8_t
)(.299‡* 255)

	)

27 
	#LUMA_G_COEFF
 (
uöt8_t
)(.587‡* 255)

	)

28 
	#LUMA_B_COEFF
 (
uöt8_t
)(.114‡* 255)

	)

29 
	#CHROMA_EPSILON
 2

	)

30 
	#CHROMA_R_SCALE
 1.25f

	)

31 
	#CHROMA_R_COEFF
 (
uöt8_t
)(255/3 * 
CHROMA_R_SCALE
)

	)

32 
	#CHROMA_G_SCALE
 2.25f

	)

33 
	#CHROMA_G_COEFF
 (
uöt8_t
)(255/3 * 
CHROMA_G_SCALE
)

	)

34 
	#CHROMA_B_SCALE
 1.75f

	)

35 
	#CHROMA_B_COEFF
 (
uöt8_t
)(255/3 * 
CHROMA_B_SCALE
)

	)

37 
	#SIPP_HW_CHR_GEN_INPUT_BUFFER_WIDTH
 1083

	)

38 
	#SIPP_HW_CHR_GEN_INPUT_BUFFER_HEIGHT
 1289

	)

39 
	#SIPP_HW_CHR_GEN_INPUT_BUFFER_NUM_PLANES
 3

	)

40 
	#SIPP_HW_CHR_GEN_INPUT_BUFFER_SIZE
 (
SIPP_HW_CHR_GEN_INPUT_BUFFER_WIDTH
 * 
SIPP_HW_CHR_GEN_INPUT_BUFFER_HEIGHT
 * 
SIPP_HW_CHR_GEN_INPUT_BUFFER_NUM_PLANES
)

	)

41 
	#SIPP_HW_CHR_GEN_OUTPUT_BUFFER_WIDTH
 ((
SIPP_HW_CHR_GEN_INPUT_BUFFER_WIDTH
 + 1Ë>> 1)

	)

42 
	#SIPP_HW_CHR_GEN_OUTPUT_BUFFER_HEIGHT
 (
SIPP_HW_CHR_GEN_INPUT_BUFFER_HEIGHT
 >> 1)

	)

43 
	#SIPP_HW_CHR_GEN_OUTPUT_BUFFER_NUM_PLANES
 3

	)

44 
	#SIPP_HW_CHR_GEN_OUTPUT_BUFFER_SIZE
 (
SIPP_HW_CHR_GEN_OUTPUT_BUFFER_WIDTH
 * 
SIPP_HW_CHR_GEN_OUTPUT_BUFFER_HEIGHT
 * 
SIPP_HW_CHR_GEN_OUTPUT_BUFFER_NUM_PLANES
)

	)

	@Sipp/SippFw/HwFilters/testHwHarrisCorners/leon/app_config.c

13 
	~<ªgi°îsMyrüd.h
>

14 
	~<DrvC¥.h
>

19 #i‚de‡
IPIPE_CLK_CONFIG_SEL


20 
	#ùùeClockC⁄fig
 
ùùeClkC⁄figMV182


	)

22 
	#ùùeClockC⁄fig
 
IPIPE_CLK_CONFIG_SEL


	)

35 
tyAuxClkDividîCfg
 
	gauxClkAŒOn
[] =

37 {0x0FFFFFFF & (~(1<<
CSS_AUX_DDR_CORE
)Ë, 
CLK_SRC_REFCLK0
, 1, 1},

42 
tySocClockC⁄fig
 
	gùùeClkC⁄figMV182
 =

44 .
ªfClk0I≈utKhz
 = 12000,

45 .
	gªfClk1I≈utKhz
 = 0,

46 .
	gèrgëPŒ0FªqKhz
 = 264000,

47 .
	gèrgëPŒ1FªqKhz
 = 0,

48 .
	g˛kSrcPŒ1
 = 
CLK_SRC_REFCLK0
,

49 .
	gma°îClkDivNumî©‹
 = 
DONT_TOUCH_MASTER_DIVIDER
,

50 .
	gma°îClkDivDíomö©‹
 = 
DONT_TOUCH_MASTER_DIVIDER
,

51 .
	gcssDssClockE«bÀMask
 = 0xFFFFFFFFFFFFFFFFULL,

52 .
	gmssClockE«bÀMask
 = 0xFFFFFFFF,

53 .
	gsùpClockE«bÀMask
 = 0xFFFFFFFF,

54 .
	gu∑ClockE«bÀMask
 = 0xFFFFFFFF,

55 .
	gpAuxClkCfg
 = 
auxClkAŒOn
,

67 
	$öôClocksAndMem‹y
()

69 
s32
 
sc
;

71 
sc
 = 
	`DrvC¥Inô
();

72 if(
sc
)

73  
sc
;

74 
sc
 = 
	`DrvC¥SëupClocks
(&
ùùeClockC⁄fig
);

75 if(
sc
)

76  
sc
;

78 
	}
}

	@Sipp/SippFw/HwFilters/testHwHarrisCorners/leon/app_config.h

9 #i‚de‡
_APP_CONFIG_H_


10 
	#_APP_CONFIG_H_


	)

16 
öôClocksAndMem‹y
();

	@Sipp/SippFw/HwFilters/testHwHarrisCorners/leon/main.c

10 
	~<sùp.h
>

11 
	~<sùpTe°Comm⁄.h
>

12 
	~"ã°HwH¨risC‹√rs.h
"

14 #i‡
deföed
(
SIPP_VCS
)

15 
	~<UnôTe°Api.h
>

16 
	~<DrvTimî.h
>

17 
	~<DrvDdr.h
>

24 
	#SIPP_TEST_SYNC_API


25 

	)

30 #ifde‡
SIPP_USE_PRECALC_SCHEDULE


31 
	~"pcDumpScheduÀ.hh
"

34 
Te°HwH¨risC‹√rs
 
	gã°H¨ris
;

36 #i‚de‡
SIPP_TEST_SYNC_API


37 vﬁ©ûê
u32
 
	gã°Com∂ëe
 = 0;

40 
u32
 
DDR_DATA
 
	gTe°HwH¨risC‹√rs_ªf_buf„r
[
SIPP_HW_HARRIS_BUFFER_SIZE
];

46 #ifde‡
SIPP_USE_PRECALC_SCHEDULE


47 
	~"pcDumpScheduÀ.hh
"

50 #i‚de‡
SIPP_TEST_SYNC_API


51 
	$≠pSùpCÆlback
 ( 
SùpPùñöe
 * 
pPùñöe
,

52 
eSIPP_PIPELINE_EVENT
 
eEvít
,

53 
SIPP_PIPELINE_EVENT_DATA
 * 
±EvítD©a


56 i‡(
eEvít
 =
eSIPP_PIPELINE_FRAME_DONE
)

58 
	`¥ötf
 ("appSippCallback : Frame doneÉventÑeceived : TestÖroceedingÅo checksándÅermination\n");

59 
ã°Com∂ëe
 = 1;

62 
	}
}

67 
	$maö
 (
¨gc
, *
¨gv
[])

69 
	`UNUSED
 (
¨gc
);

70 
	`UNUSED
 (
¨gv
);

71 
u32
 
sùpEº‹Log
[
SIPP_ERROR_HISTORY_SIZE
];

73 
	`sùpPœtf‹mInô
 ();

75 #i‚de‡
SIPP_PC


76 i‡(
PROCESS_LEON_OS
 =
	`swcWhoAmI
())

78 
	`¥ötf
 ("App Starting on LEON OS\n");

80 #i‚de‡
SIPP_TEST_SYNC_API


81 
	`¥ötf
 ("Please make sure IRQ sources for dynamicallyÑoute between LeonOSánd LeonRTáre set\n");

86 
	`¥ötf
 ("App Starting on LEON RT\n");

90 #i‚de‡
SIPP_TEST_SYNC_API


91 
	`sùpPœtf‹mInôAsync
 ();

94 #ifde‡
SIPP_VCS


95 
	`unôTe°Inô
 ();

96 
	`DrvTimîInô
 ();

97 
	`DrvDdrInôüli£
 (
NULL
);

100 
	`buûdTe°HwH¨risC‹√rs
 (&
ã°H¨ris
);

102 i‡(
	`sùpPùeGëEº‹Sètus
 (
ã°H¨ris
.
∂
))

104 
u32
 
îrNum
;

105 
	`¥ötf
 ("Pipeline creationÉrror\nError codes:\n");

106 
îrNum
 = 
	`sùpGëEº‹Hi°‹y
 (
sùpEº‹Log
);

107 
îrNum
)

109 
	`¥ötf
 ("%08lx\n", 
sùpEº‹Log
[
îrNum
 - 0x1]);

110 
îrNum
--;

114 #i‚de‡
SIPP_TEST_SYNC_API


116 
	`sùpRegi°îEvítCÆlback
 (
ã°H¨ris
.
∂
,

117 
≠pSùpCÆlback
);

120 
	`c⁄figTe°HwH¨risC‹√rs
 (&
ã°H¨ris
);

122 
	`ªadTe°HwH¨risC‹√rsI≈ut
(&
ã°H¨ris
);

124 #ifde‡
SIPP_USE_PRECALC_SCHEDULE


126 
	`dbgSchedInô
 (
ã°H¨ris
.
∂
);

129 #ifde‡
SIPP_TEST_SYNC_API


130 
	`sùpPro˚ssFøme
(
ã°H¨ris
.
∂
);

132 i‡(
	`sùpPùeGëEº‹Sètus
 (
ã°H¨ris
.
∂
))

134 
u32
 
îrNum
;

135 
	`¥ötf
 ("PipelineÑuntimeÉrror\nError codes:\n");

136 
îrNum
 = 
	`sùpGëEº‹Hi°‹y
 (
sùpEº‹Log
);

137 
îrNum
)

139 
	`¥ötf
 ("%08lx\n", 
sùpEº‹Log
[
îrNum
 - 0x1]);

140 
îrNum
--;

145 
	`sùpPro˚ssFømeNB
(
ã°H¨ris
.
∂
);

147 i‡(
	`sùpPùeGëEº‹Sètus
 (
ã°H¨ris
.
∂
))

149 
u32
 
îrNum
;

150 
	`¥ötf
 ("PipelineÑuntimeÉrror\nError codes:\n");

151 
îrNum
 = 
	`sùpGëEº‹Hi°‹y
 (
sùpEº‹Log
);

152 
îrNum
)

154 
	`¥ötf
 ("%08lx\n", 
sùpEº‹Log
[
îrNum
 - 0x1]);

155 
îrNum
--;

159  
ã°Com∂ëe
 == 0x0 )

166 #ifde‡ 
SIPP_PC


167 
	`sùpGíîicRu¡imeWaôI§ThªadTîm
 ();

170 
	`sùpRdFûeU8
((
u8
*)
Te°HwH¨risC‹√rs_ªf_buf„r
,\

171 
SIPP_HW_HARRIS_BUFFER_SIZE
 * (
u32
),\

174 
	`wrôeTe°HwH¨risC‹√rsOuçut
(&
ã°H¨ris
);

176 
	`sùpDbgCom∑ªU8
((
u8
*)
Te°HwH¨risC‹√rs_ªf_buf„r
,\

177 (
u8
*)
Te°HwH¨risC‹√rs_dmaOut0_buf„r
,\

178 
SIPP_HW_HARRIS_BUFFER_SIZE
 * (
u32
));

180 #ifde‡
SIPP_VCS


181 
	`unôTe°FöÆRï‹t
();

185 
	}
}

	@Sipp/SippFw/HwFilters/testHwHarrisCorners/leon/testHwHarrisCorners.c

13 
	~"ã°HwH¨risC‹√rs.h
"

15 
	~<ö˛ude/sùpHwDefs.h
>

16 
	~<¨ch/ma2x5x/ö˛ude/sùpHwDefs_ma2x5x.h
>

20 
UI¡8
 
DDR_DATA
 
	gTe°HwH¨risC‹√rs_dmaIn0_buf„r
[
SIPP_HW_HARRIS_BUFFER_WIDTH
* 
SIPP_HW_HARRIS_BUFFER_HEIGHT
* 
SIPP_HW_HARRIS_BUFFER_NUM_PLANES
]
ALIGNED
(8);

21 
UI¡32
 
DDR_DATA
 
	gTe°HwH¨risC‹√rs_dmaOut0_buf„r
[
SIPP_HW_HARRIS_BUFFER_WIDTH
* 
SIPP_HW_HARRIS_BUFFER_HEIGHT
* 
SIPP_HW_HARRIS_BUFFER_NUM_PLANES
]
ALIGNED
(8);

24 
	$ªadTe°HwH¨risC‹√rsI≈ut
(
Te°HwH¨risC‹√rs
 *
pPl
)

26 
	`sùpRdFûeU8
((
UI¡8
*)
Te°HwH¨risC‹√rs_dmaIn0_buf„r
,
SIPP_HW_HARRIS_BUFFER_WIDTH
 * 
SIPP_HW_HARRIS_BUFFER_HEIGHT
 * 
SIPP_HW_HARRIS_BUFFER_NUM_PLANES
* (UInt8),"../../../../../../../resources/testIMG_1296x972_P400.rgb");

28 ()(
pPl
);

30 
	}
}

32 
	$wrôeTe°HwH¨risC‹√rsOuçut
(
Te°HwH¨risC‹√rs
 *
pPl
)

34 
	`sùpWrFûeU8
((
UI¡8
*)
Te°HwH¨risC‹√rs_dmaOut0_buf„r
,
SIPP_HW_HARRIS_BUFFER_WIDTH
 * 
SIPP_HW_HARRIS_BUFFER_HEIGHT
 * 
SIPP_HW_HARRIS_BUFFER_NUM_PLANES
* (
UI¡32
),"harrisUnitTestOut.rgb");

36 ()(
pPl
);

38 
	}
}

40 
	$buûdTe°HwH¨risC‹√rs
(
Te°HwH¨risC‹√rs
 *
pPl
)

43 
pPl
->
∂
 = 
	`sùpCª©ePùñöe
(0, 7, 
	`SIPP_MBIN
(
mböImgSùp
));

46 
pPl
->
dmaIn0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x00, 
SIPP_HW_HARRIS_BUFFER_WIDTH
, 
SIPP_HW_HARRIS_BUFFER_HEIGHT
, 
	`N_PL
(
SIPP_HW_HARRIS_BUFFER_NUM_PLANES
), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

47 
pPl
->
h¨risc‹√rsMa2x5x0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x0, 
SIPP_HW_HARRIS_BUFFER_WIDTH
, 
SIPP_HW_HARRIS_BUFFER_HEIGHT
, 
	`N_PL
(
SIPP_HW_HARRIS_BUFFER_NUM_PLANES
), 
	`SZ
(
UI¡32
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_HARRIS_ID
, 0);

48 
pPl
->
dmaOut0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x00, 
SIPP_HW_HARRIS_BUFFER_WIDTH
, 
SIPP_HW_HARRIS_BUFFER_HEIGHT
, 
	`N_PL
(
SIPP_HW_HARRIS_BUFFER_NUM_PLANES
), 
	`SZ
(
UI¡32
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

51 
	`sùpLökFûãr
(
pPl
->
h¨risc‹√rsMa2x5x0
,ÖPl->
dmaIn0
, 5,5 );

52 
	`sùpLökFûãr
(
pPl
->
dmaOut0
,ÖPl->
h¨risc‹√rsMa2x5x0
, 1,1 );

54 
	}
}

57 
	$c⁄figTe°HwH¨risC‹√rs
(
Te°HwH¨risC‹√rs
 *
pPl
)

59 
DmaP¨am
 *
dmaIn0Cfg
 = (DmaP¨am *)
pPl
->
dmaIn0
->
∑øms
;

60 
H¨risP¨am
 *
h¨risc‹√rsMa2x5x0Cfg
(H¨risP¨am *)
pPl
->
h¨risc‹√rsMa2x5x0
->
∑øms
;

61 
DmaP¨am
 *
dmaOut0Cfg
 = (DmaP¨am *)
pPl
->
dmaOut0
->
∑øms
;

66 
h¨risc‹√rsMa2x5x0Cfg
->
cfg
=
	`HARRIS_CORNER_CFG
(
KERNEL_SIZE
, 
OUTPUT_CHOICE
, 
EXP_SUBTRAHEND
);

67 
h¨risc‹√rsMa2x5x0Cfg
->
kVÆue
=
K_VAL
;

68 
dmaIn0Cfg
->
ddrAddr
 = (
UI¡32
)&
Te°HwH¨risC‹√rs_dmaIn0_buf„r
;

69 
dmaOut0Cfg
->
ddrAddr
 = (
UI¡32
)&
Te°HwH¨risC‹√rs_dmaOut0_buf„r
;

72 
	}
}

	@Sipp/SippFw/HwFilters/testHwHarrisCorners/leon/testHwHarrisCorners.h

13 #i‚de‡
__TESTHWHARRISCORNERS_H__


14 
	#__TESTHWHARRISCORNERS_H__


	)

16 
	~<sùp.h
>

17 
	~<sùpTe°Comm⁄.h
>

19 
	~"ã°HwH¨risC‹√rsSëup.h
"

23 
UI¡8
 
DDR_DATA
 
Te°HwH¨risC‹√rs_dmaIn0_buf„r
[ 
SIPP_HW_HARRIS_BUFFER_WIDTH
 * 
SIPP_HW_HARRIS_BUFFER_HEIGHT
 * 
SIPP_HW_HARRIS_BUFFER_NUM_PLANES
 ]
ALIGNED
(8);

24 
UI¡32
 
DDR_DATA
 
Te°HwH¨risC‹√rs_dmaOut0_buf„r
[ 
SIPP_HW_HARRIS_BUFFER_WIDTH
 * 
SIPP_HW_HARRIS_BUFFER_HEIGHT
 * 
SIPP_HW_HARRIS_BUFFER_NUM_PLANES
 ]
ALIGNED
(8);

28 
	sTe°HwH¨risC‹√rs


31 
SùpPùñöe
 *
	m∂
;

34 
SùpFûãr
 *
	mdmaIn0
;

35 
SùpFûãr
 *
	mh¨risc‹√rsMa2x5x0
;

36 
SùpFûãr
 *
	mdmaOut0
;

38 } 
	tTe°HwH¨risC‹√rs
;

40 
ªadTe°HwH¨risC‹√rsI≈ut
(
Te°HwH¨risC‹√rs
 *
pPl
);

41 
wrôeTe°HwH¨risC‹√rsOuçut
(
Te°HwH¨risC‹√rs
 *
pPl
);

43 
buûdTe°HwH¨risC‹√rs
(
Te°HwH¨risC‹√rs
 *
pPl
);

44 
c⁄figTe°HwH¨risC‹√rs
(
Te°HwH¨risC‹√rs
 *
pPl
);

	@Sipp/SippFw/HwFilters/testHwHarrisCorners/leon/testHwHarrisCornersSetup.h

1 #i‚de‡
LEON_TESTHWHARRISCORNERSSETUP_H_


2 
	#LEON_TESTHWHARRISCORNERSSETUP_H_


	)

4 
	#SIPP_HW_HARRIS_BUFFER_WIDTH
 1296

	)

5 
	#SIPP_HW_HARRIS_BUFFER_HEIGHT
 972

	)

6 
	#SIPP_HW_HARRIS_BUFFER_NUM_PLANES
 1

	)

7 
	#SIPP_HW_HARRIS_BUFFER_SIZE
 (
SIPP_HW_HARRIS_BUFFER_WIDTH
 * 
SIPP_HW_HARRIS_BUFFER_HEIGHT
 * 
SIPP_HW_HARRIS_BUFFER_NUM_PLANES
)

	)

10 
	#HARRIS_OUTPUT_SCORE
 0

	)

11 
	#HARRIS_OUTPUT_DETERMINANT
 1

	)

12 
	#KERNEL_SIZE
 5

	)

13 
	#OUTPUT_CHOICE
 
HARRIS_OUTPUT_SCORE


	)

14 
	#EXP_SUBTRAHEND
 0

	)

15 
	#K_VAL
 0.05f

	)

	@Sipp/SippFw/HwFilters/testHwLsc/leon/app_config.c

13 
	~<ªgi°îsMyrüd.h
>

14 
	~<DrvC¥.h
>

19 #i‚de‡
IPIPE_CLK_CONFIG_SEL


20 
	#ùùeClockC⁄fig
 
ùùeClkC⁄figMV182


	)

22 
	#ùùeClockC⁄fig
 
IPIPE_CLK_CONFIG_SEL


	)

35 
tyAuxClkDividîCfg
 
	gauxClkAŒOn
[] =

37 {0x0FFFFFFF & (~(1<<
CSS_AUX_DDR_CORE
)Ë, 
CLK_SRC_REFCLK0
, 1, 1},

42 
tySocClockC⁄fig
 
	gùùeClkC⁄figMV182
 =

44 .
ªfClk0I≈utKhz
 = 12000,

45 .
	gªfClk1I≈utKhz
 = 0,

46 .
	gèrgëPŒ0FªqKhz
 = 264000,

47 .
	gèrgëPŒ1FªqKhz
 = 0,

48 .
	g˛kSrcPŒ1
 = 
CLK_SRC_REFCLK0
,

49 .
	gma°îClkDivNumî©‹
 = 
DONT_TOUCH_MASTER_DIVIDER
,

50 .
	gma°îClkDivDíomö©‹
 = 
DONT_TOUCH_MASTER_DIVIDER
,

51 .
	gcssDssClockE«bÀMask
 = 0xFFFFFFFFFFFFFFFFULL,

52 .
	gmssClockE«bÀMask
 = 0xFFFFFFFF,

53 .
	gsùpClockE«bÀMask
 = 0xFFFFFFFF,

54 .
	gu∑ClockE«bÀMask
 = 0xFFFFFFFF,

55 .
	gpAuxClkCfg
 = 
auxClkAŒOn
,

67 
	$öôClocksAndMem‹y
()

69 
	`DrvC¥Inô
();

70 
	`DrvC¥SëupClocks
(&
ùùeClockC⁄fig
);

73 
	}
}

	@Sipp/SippFw/HwFilters/testHwLsc/leon/app_config.h

9 #i‚de‡
_APP_CONFIG_H_


10 
	#_APP_CONFIG_H_


	)

16 
öôClocksAndMem‹y
();

	@Sipp/SippFw/HwFilters/testHwLsc/leon/bayerGainMeshMap.h

1 
uöt16_t
 
	gbayîGaöMesh
[] 
	$ALIGNED
(8Ë
CMX_DATA
 = {

5106 
	}
};

	@Sipp/SippFw/HwFilters/testHwLsc/leon/main.c

13 
	~<sùp.h
>

14 
	~<sùpTe°Comm⁄.h
>

16 
	~"bayîGaöMeshM≠.h
"

18 #i‡
deföed
(
SIPP_VCS
)

19 
	~<UnôTe°Api.h
>

20 
	~<DrvTimî.h
>

21 
	~<DrvDdr.h
>

24 
	~"ã°D©a.h
"

25 
	~"ã°HwLsc.h
"

30 
	#SIPP_TEST_SYNC_API


32 

	)

39 
Te°HwLsc
 
	glscPùe
;

44 #i‚de‡
SIPP_TEST_SYNC_API


45 vﬁ©ûê
u32
 
	gã°Com∂ëe
 = 0;

58 #ifde‡
SIPP_USE_PRECALC_SCHEDULE


59 
	~"pcDumpScheduÀ.hh
"

65 #i‚de‡
SIPP_TEST_SYNC_API


66 
	$≠pSùpCÆlback
 ( 
SùpPùñöe
 * 
pPùñöe
,

67 
eSIPP_PIPELINE_EVENT
 
eEvít
,

68 
SIPP_PIPELINE_EVENT_DATA
 * 
±EvítD©a


71 i‡(
eEvít
 =
eSIPP_PIPELINE_FRAME_DONE
)

73 
	`¥ötf
 ("appSippCallback : Frame doneÉventÑeceived : TestÖroceedingÅo checksándÅermination\n");

74 
ã°Com∂ëe
 = 1;

77 
	}
}

81 
	$maö
 (
¨gc
, *
¨gv
[])

83 
	`UNUSED
 (
¨gc
);

84 
	`UNUSED
 (
¨gv
);

85 
u32
 
sùpEº‹Log
[
SIPP_ERROR_HISTORY_SIZE
];

87 
	`sùpPœtf‹mInô
 ();

89 #i‚de‡
SIPP_PC


90 i‡(
PROCESS_LEON_OS
 =
	`swcWhoAmI
())

92 
	`¥ötf
 ("App Starting on LEON OS\n");

94 #i‚de‡
SIPP_TEST_SYNC_API


95 
	`¥ötf
 ("Please make sure IRQ sources for dynamicallyÑoute between LeonOSánd LeonRTáre set\n");

100 
	`¥ötf
 ("App Starting on LEON RT\n");

104 #i‚de‡
SIPP_TEST_SYNC_API


105 
	`sùpPœtf‹mInôAsync
 ();

108 #ifde‡
SIPP_VCS


109 
	`unôTe°Inô
();

110 
	`DrvTimîInô
();

111 
	`DrvDdrInôüli£
(
NULL
);

114 
	`buûdTe°HwLsc
(&
lscPùe
);

116 i‡(
	`sùpPùeGëEº‹Sètus
 (
lscPùe
.
∂
))

118 
u32
 
îrNum
;

119 
	`¥ötf
 ("Pipeline creationÉrror\nError codes:\n");

120 
îrNum
 = 
	`sùpGëEº‹Hi°‹y
 (
sùpEº‹Log
);

121 
îrNum
)

123 
	`¥ötf
 ("%08lx\n", 
sùpEº‹Log
[
îrNum
 - 0x1]);

124 
îrNum
--;

128 #i‚de‡
SIPP_TEST_SYNC_API


130 
	`sùpRegi°îEvítCÆlback
 (
lscPùe
.
∂
,

131 
≠pSùpCÆlback
);

134 
	`c⁄figTe°HwLsc
(&
lscPùe
);

136 
	`ªadTe°HwLscI≈ut
(&
lscPùe
);

138 #ifde‡
SIPP_USE_PRECALC_SCHEDULE


140 
	`dbgSchedInô
 (
lscPùe
.
∂
);

143 #ifde‡
SIPP_TEST_SYNC_API


144 
	`sùpPro˚ssFøme
 (
lscPùe
.
∂
);

146 i‡(
	`sùpPùeGëEº‹Sètus
 (
lscPùe
.
∂
))

148 
u32
 
îrNum
;

149 
	`¥ötf
 ("PipelineÑuntimeÉrror\nError codes:\n");

150 
îrNum
 = 
	`sùpGëEº‹Hi°‹y
 (
sùpEº‹Log
);

151 
îrNum
)

153 
	`¥ötf
 ("%08lx\n", 
sùpEº‹Log
[
îrNum
 - 0x1]);

154 
îrNum
--;

159 
	`sùpPro˚ssFømeNB
 (
lscPùe
.
∂
);

161 i‡(
	`sùpPùeGëEº‹Sètus
 (
lscPùe
.
∂
))

163 
u32
 
îrNum
;

164 
	`¥ötf
 ("PipelineÑuntimeÉrror\nError codes:\n");

165 
îrNum
 = 
	`sùpGëEº‹Hi°‹y
 (
sùpEº‹Log
);

166 
îrNum
)

168 
	`¥ötf
 ("%08lx\n", 
sùpEº‹Log
[
îrNum
 - 0x1]);

169 
îrNum
--;

173  
ã°Com∂ëe
 == 0x0 )

179 #ifde‡ 
SIPP_PC


180 
	`sùpGíîicRu¡imeWaôI§ThªadTîm
 ();

183 
	`wrôeTe°HwLscOuçut
(&
lscPùe
);

187 
	`sùpRdFûeU8
 ((
u8
*)
Te°HwLsc_dmaIn0_buf„r
, 
SIPP_HW_LSC_BUFFER_SIZE
 * (
u16
), "../../../../../../../resources/Ref_outLSC_3264x2448.raw");

188 
	`sùpDbgCom∑ªU8
 ((
u8
*)
Te°HwLsc_dmaIn0_buf„r
, (u8*)
Te°HwLsc_dmaOut0_buf„r
, 
SIPP_HW_LSC_BUFFER_SIZE
 * (
u16
));

191 #ifde‡
SIPP_VCS


192 
	`unôTe°FöÆRï‹t
();

196 
	}
}

	@Sipp/SippFw/HwFilters/testHwLsc/leon/testData.h

1 #i‚de‡
TESTHWLSC_SETUP_H_


2 
	#TESTHWLSC_SETUP_H_


	)

4 
uöt16_t
 
bayîGaöMesh
[];

6 
	#SIPP_HW_LSC_BUFFER_WIDTH
 3264

	)

7 
	#SIPP_HW_LSC_BUFFER_HEIGHT
 2448

	)

8 
	#SIPP_HW_LSC_BUFFER_NUM_PLANES
 1

	)

9 
	#SIPP_HW_LSC_BUFFER_SIZE
 (
SIPP_HW_LSC_BUFFER_WIDTH
 * 
SIPP_HW_LSC_BUFFER_HEIGHT
 * 
SIPP_HW_LSC_BUFFER_NUM_PLANES
)

	)

11 
	#FORMAT
 
BAYER


	)

12 
	#DATA_WIDTH
 10

	)

14 
	#IMAGE_WIDTH
 3264

	)

15 
	#IMAGE_HEIGHT
 2448

	)

17 
	#GM_WIDTH
 58

	)

18 
	#GM_HEIGHT
 44

	)

19 
	#GM_PLANE_NO
 1

	)

21 
	#LSC_IN_FORMAT
 
SIPP_FORMAT_16BIT


	)

22 
	#LSC_OUT_FORMAT
 
SIPP_FORMAT_16BIT


	)

23 
	#LSC_GM_FORMAT
 
SIPP_FORMAT_16BIT


	)

	@Sipp/SippFw/HwFilters/testHwLsc/leon/testHwLsc.c

13 
	~"ã°HwLsc.h
"

15 
	~<ö˛ude/sùpHwDefs.h
>

16 
	~<¨ch/ma2x5x/ö˛ude/sùpHwDefs_ma2x5x.h
>

20 
UI¡16
 
DDR_DATA
 
	gTe°HwLsc_dmaIn0_buf„r
 [
SIPP_HW_LSC_BUFFER_WIDTH
* 
SIPP_HW_LSC_BUFFER_HEIGHT
* 
SIPP_HW_LSC_BUFFER_NUM_PLANES
]
ALIGNED
(8);

21 
UI¡16
 
DDR_DATA
 
	gTe°HwLsc_dmaOut0_buf„r
 [
SIPP_HW_LSC_BUFFER_WIDTH
* 
SIPP_HW_LSC_BUFFER_HEIGHT
* 
SIPP_HW_LSC_BUFFER_NUM_PLANES
]
ALIGNED
(8);

24 
	$ªadTe°HwLscI≈ut
(
Te°HwLsc
 *
pPl
)

26 
	`sùpRdFûeU8
((
UI¡8
*)
Te°HwLsc_dmaIn0_buf„r
,
SIPP_HW_LSC_BUFFER_WIDTH
 * 
SIPP_HW_LSC_BUFFER_HEIGHT
 * 
SIPP_HW_LSC_BUFFER_NUM_PLANES
* (
UI¡16
),"../../../../../../../resources/wall_3264x2448_hwlscOFF_5.7ms_1x.raw");

28 ()(
pPl
);

30 
	}
}

32 
	$wrôeTe°HwLscOuçut
(
Te°HwLsc
 *
pPl
)

34 
	`sùpWrFûeU8
((
UI¡8
*)
Te°HwLsc_dmaOut0_buf„r
,
SIPP_HW_LSC_BUFFER_WIDTH
 * 
SIPP_HW_LSC_BUFFER_HEIGHT
 * 
SIPP_HW_LSC_BUFFER_NUM_PLANES
* (
UI¡16
),"output.raw");

36 ()(
pPl
);

38 
	}
}

40 
	$buûdTe°HwLsc
(
Te°HwLsc
 *
pPl
)

43 
pPl
->
∂
 = 
	`sùpCª©ePùñöe
(0, 0, 
	`SIPP_MBIN
(
mböImgSùp
));

46 
pPl
->
dmaIn0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x00, 
SIPP_HW_LSC_BUFFER_WIDTH
, 
SIPP_HW_LSC_BUFFER_HEIGHT
, 
	`N_PL
(
SIPP_HW_LSC_BUFFER_NUM_PLANES
), 
	`SZ
(
UI¡16
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

47 
pPl
->
lscMa2x5x0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x0, 
SIPP_HW_LSC_BUFFER_WIDTH
, 
SIPP_HW_LSC_BUFFER_HEIGHT
, 
	`N_PL
(
SIPP_HW_LSC_BUFFER_NUM_PLANES
), 
	`SZ
(
UI¡16
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_LSC_ID
, 0);

48 
pPl
->
dmaOut0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x00, 
SIPP_HW_LSC_BUFFER_WIDTH
, 
SIPP_HW_LSC_BUFFER_HEIGHT
, 
	`N_PL
(
SIPP_HW_LSC_BUFFER_NUM_PLANES
), 
	`SZ
(
UI¡16
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

51 
	`sùpLökFûãr
(
pPl
->
lscMa2x5x0
,ÖPl->
dmaIn0
, 1,0 );

52 
	`sùpLökFûãr
(
pPl
->
dmaOut0
,ÖPl->
lscMa2x5x0
, 1,1 );

54 
	}
}

57 
	$c⁄figTe°HwLsc
(
Te°HwLsc
 *
pPl
)

59 
DmaP¨am
 *
dmaIn0Cfg
 = (DmaP¨am *)
pPl
->
dmaIn0
->
∑øms
;

60 
LscP¨am
 *
lscMa2x5x0Cfg
 = (LscP¨am *)
pPl
->
lscMa2x5x0
->
∑øms
;

61 
DmaP¨am
 *
dmaOut0Cfg
 = (DmaP¨am *)
pPl
->
dmaOut0
->
∑øms
;

66 
lscMa2x5x0Cfg
->
gmBa£

bayîGaöMesh
;

67 
lscMa2x5x0Cfg
->
gmWidth

GM_WIDTH
;

68 
lscMa2x5x0Cfg
->
gmHeight

GM_HEIGHT
;

69 
lscMa2x5x0Cfg
->
d©aF‹m©
=
	`SIPP_LSC_CFG_FORMAT
(
FORMAT
);

70 
lscMa2x5x0Cfg
->
d©aWidth
=
DATA_WIDTH
;

71 
dmaIn0Cfg
->
ddrAddr
 = (
UI¡32
)&
Te°HwLsc_dmaIn0_buf„r
;

72 
dmaOut0Cfg
->
ddrAddr
 = (
UI¡32
)&
Te°HwLsc_dmaOut0_buf„r
;

75 
	}
}

	@Sipp/SippFw/HwFilters/testHwLsc/leon/testHwLsc.h

13 #i‚de‡
__TESTHWLSC_H__


14 
	#__TESTHWLSC_H__


	)

16 
	~<sùp.h
>

17 
	~<sùpTe°Comm⁄.h
>

19 
	~"ã°D©a.h
"

23 
UI¡16
 
DDR_DATA
 
Te°HwLsc_dmaIn0_buf„r
[ 
SIPP_HW_LSC_BUFFER_WIDTH
 * 
SIPP_HW_LSC_BUFFER_HEIGHT
 * 
SIPP_HW_LSC_BUFFER_NUM_PLANES
 ]
ALIGNED
(8);

24 
UI¡16
 
DDR_DATA
 
Te°HwLsc_dmaOut0_buf„r
[ 
SIPP_HW_LSC_BUFFER_WIDTH
 * 
SIPP_HW_LSC_BUFFER_HEIGHT
 * 
SIPP_HW_LSC_BUFFER_NUM_PLANES
 ]
ALIGNED
(8);

28 
	sTe°HwLsc


31 
SùpPùñöe
 *
	m∂
;

34 
SùpFûãr
 *
	mdmaIn0
;

35 
SùpFûãr
 *
	mdmaOut0
;

36 
SùpFûãr
 *
	mlscMa2x5x0
;

38 } 
	tTe°HwLsc
;

40 
ªadTe°HwLscI≈ut
(
Te°HwLsc
 *
pPl
);

41 
wrôeTe°HwLscOuçut
(
Te°HwLsc
 *
pPl
);

43 
buûdTe°HwLsc
(
Te°HwLsc
 *
pPl
);

44 
c⁄figTe°HwLsc
(
Te°HwLsc
 *
pPl
);

	@Sipp/SippFw/HwFilters/testHwLumaDns/leon/app_config.c

13 
	~"≠p_c⁄fig.h
"

14 
	~"DrvC¥.h
"

15 
	~"DrvDdr.h
"

16 
	~"swcLe⁄Utûs.h
"

17 
	~"DrvShaveL2Cache.h
"

18 
	~"DrvTimî.h
"

22 
	#SYS_CLK_KHZ
 12000

23 

	)

24 
	#L2CACHE_CFG
 (
SHAVE_L2CACHE_NORMAL_MODE
)

	)

27 
	#AUX_CLOCKS_MIPICFG
 (
AUX_CLK_MASK_MIPI_ECFG
 | 
AUX_CLK_MASK_MIPI_CFG
)

	)

28 
	#AUX_CLOCKS_VIDEO
 (
AUX_CLK_MASK_MEDIA
 | 
AUX_CLK_MASK_LCD
)

	)

29 
	#PARTITION_0
 (0)

	)

30 
	#SHAVES_USED
 (12)

	)

32 
	#MSS_CLOCKS
 ( 
DEV_MSS_APB_SLV
 | \

33 
DEV_MSS_APB2_CTRL
 | \

34 
DEV_MSS_RTBRIDGE
 | \

35 
DEV_MSS_RTAHB_CTRL
 | \

36 
DEV_MSS_LRT
 | \

37 
DEV_MSS_LRT_DSU
 | \

38 
DEV_MSS_LRT_L2C
 | \

39 
DEV_MSS_LRT_ICB
 | \

40 
DEV_MSS_AXI_BRIDGE
 | \

41 
DEV_MSS_MXI_CTRL
 | \

42 
DEV_MSS_MXI_DEFSLV
 | \

43 
DEV_MSS_AXI_MON
 | \

44 
DEV_MSS_LCD
 | \

45 
DEV_MSS_AMC
 | \

46 
DEV_MSS_SIPP
 | \

47 
DEV_MSS_TIM
 )

	)

49 
	#SIPP_CLOCKS
 ( 
DEV_SIPP_SIPP_ABPSLV
 | \

50 
DEV_SIPP_MIPI
 | \

51 
DEV_SIPP_MIPI_RX1
 )

	)

60 
tyAuxClkDividîCfg
 
	gauxClk
[] =

63 .
auxClockE«bÀMask
 = 
AUX_CLOCKS_VIDEO
,

64 .
	gauxClockSour˚
 = 
CLK_SRC_SYS_CLK_DIV2
 ,

65 .
	gauxClockDivNumî©‹
 = 1,

66 .
	gauxClockDivDíomö©‹
 = 1,

69 .
	gauxClockE«bÀMask
 = 
AUX_CLOCKS_MIPICFG
,

70 .
	gauxClockSour˚
 = 
CLK_SRC_SYS_CLK
 ,

71 .
	gauxClockDivNumî©‹
 = 1,

72 .
	gauxClockDivDíomö©‹
 = 18,

80 
tySocClockC⁄fig
 
	g˛ocksC⁄fig
 =

82 .
ªfClk0I≈utKhz
 = 
SYS_CLK_KHZ
 ,

83 .
	gªfClk1I≈utKhz
 = 0,

84 .
	gèrgëPŒ0FªqKhz
 = 360000,

85 .
	gèrgëPŒ1FªqKhz
 = 0,

86 .
	g˛kSrcPŒ1
 = 
CLK_SRC_REFCLK0
,

87 .
	gma°îClkDivNumî©‹
 = 1,

88 .
	gma°îClkDivDíomö©‹
 = 1,

89 .
	gcssDssClockE«bÀMask
 = 
DEFAULT_CORE_CSS_DSS_CLOCKS
,

90 .
	gmssClockE«bÀMask
 = 
MSS_CLOCKS
,

91 .
	gsùpClockE«bÀMask
 = 
SIPP_CLOCKS
,

92 .
	gu∑ClockE«bÀMask
 = 0,

93 .
	gpAuxClkCfg
 = 
auxClk
,

102 
	$öôClocksAndMem‹y
()

104 
i
;

105 
s32
 
sc
;

108 
sc
 = 
	`DrvC¥Inô
();

109 if(
sc
)

110  
sc
;

112 
	`DrvC¥SysDevi˚A˘i⁄
(
SIPP_DOMAIN
, 
ASSERT_RESET
, 
DEV_SIPP_MIPI
);

113 
	`DrvC¥SysDevi˚A˘i⁄
(
MSS_DOMAIN
, 
ASSERT_RESET
, 
DEV_MSS_SIPP
 | 
DEV_MSS_AMC
 | 
DEV_MSS_LCD
 );

114 
	`DrvC¥SysDevi˚A˘i⁄
(
MSS_DOMAIN
, 
DEASSERT_RESET
, 
DEV_MSS_SIPP
 );

116 
sc
 = 
	`DrvC¥SëupClocks
(&
˛ocksC⁄fig
);

117 if(
sc
)

118  
sc
;

120 
	`DrvC¥SysDevi˚A˘i⁄
(
MSS_DOMAIN
, 
DEASSERT_RESET
, -1);

121 
	`DrvC¥SysDevi˚A˘i⁄
(
CSS_DOMAIN
, 
DEASSERT_RESET
, -1);

122 
	`DrvC¥SysDevi˚A˘i⁄
(
SIPP_DOMAIN
, 
DEASSERT_RESET
, -1);

124 
	`swcLe⁄SëPIL
(0);

126 
	`DrvDdrInôüli£
(
NULL
);

129 
sc
 = 
	`DrvShaveL2CacheSëMode
(
L2CACHE_CFG
);

130 if(
sc
)

131  
sc
;

134 
	`DrvShaveL2CacheSëupP¨tôi⁄
(
SHAVEPART256KB
);

137 
sc
 = 
	`DrvShaveL2CacheAŒoˇãSëP¨tôi⁄s
();

138 if(
sc
)

139  
sc
;

142 
i
 = 0; i < 
SHAVES_USED
; i++)

144 
	`DrvShaveL2CacheSëLSUP¨tId
(
i
, 
PARTITION_0
);

147 
	`DrvShaveL2CacheP¨tôi⁄FlushAndInvÆid©e
(
PARTITION_0
);

150 
	}
}

	@Sipp/SippFw/HwFilters/testHwLumaDns/leon/app_config.h

13 #i‚de‡
APP_CONFIG_H


14 
	#APP_CONFIG_H


	)

18 
	~"mv_ty≥s.h
"

29 
öôClocksAndMem‹y
();

	@Sipp/SippFw/HwFilters/testHwLumaDns/leon/main.c

9 
	~<sùp.h
>

10 
	~<sùpTe°Comm⁄.h
>

11 
	~"ã°HwLumaDns.h
"

12 #i‡
deföed
(
SIPP_VCS
)

13 
	~<UnôTe°Api.h
>

14 
	~<DrvTimî.h
>

15 
	~<DrvDdr.h
>

23 
	#SIPP_TEST_SYNC_API


25 

	)

31 
Te°HwLumaDns
 
	gã°LumaDnsPùe
;

33 #i‚de‡
SIPP_TEST_SYNC_API


34 vﬁ©ûê
u32
 
	gã°Com∂ëe
 = 0;

37 
u32
 
	ggaussLut
[4] = {0x9abddeef,0x12234578,0x0,0x0};

38 
u32
 
	ggammaLut
[5] = {0x665a4900,0x837d776f,0xa8890089,0xeadecfbe,0x1000fff5};

40 
u8
 
DDR_DATA
 
	gSùpHwLumaDns_ªf_buf„r
[
SIPP_HW_LUM_DNS_BUFFER_SIZE
];

50 #ifde‡
SIPP_USE_PRECALC_SCHEDULE


51 
	~"pcDumpScheduÀ.hh
"

55 #i‚de‡
SIPP_TEST_SYNC_API


56 
	$≠pSùpCÆlback
 ( 
SùpPùñöe
 * 
pPùñöe
,

57 
eSIPP_PIPELINE_EVENT
 
eEvít
,

58 
SIPP_PIPELINE_EVENT_DATA
 * 
±EvítD©a


61 i‡(
eEvít
 =
eSIPP_PIPELINE_FRAME_DONE
)

63 
	`¥ötf
 ("appSippCallback : Frame doneÉventÑeceived : TestÖroceedingÅo checksándÅermination\n");

64 
ã°Com∂ëe
 = 1;

67 
	}
}

72 
	$maö
 (
¨gc
, *
¨gv
[])

74 
	`UNUSED
 (
¨gc
);

75 
	`UNUSED
 (
¨gv
);

76 
u32
 
sùpEº‹Log
[
SIPP_ERROR_HISTORY_SIZE
];

78 
	`sùpPœtf‹mInô
 ();

80 #i‚de‡
SIPP_PC


81 i‡(
PROCESS_LEON_OS
 =
	`swcWhoAmI
())

83 
	`¥ötf
 ("App Starting on LEON OS\n");

85 #i‚de‡
SIPP_TEST_SYNC_API


86 
	`¥ötf
 ("Please make sure IRQ sources for dynamicallyÑoute between LeonOSánd LeonRTáre set\n");

91 
	`¥ötf
 ("App Starting on LEON RT\n");

95 #i‚de‡
SIPP_TEST_SYNC_API


96 
	`sùpPœtf‹mInôAsync
 ();

99 #ifde‡
SIPP_VCS


100 
	`unôTe°Inô
();

101 
	`DrvTimîInô
();

102 
	`DrvDdrInôüli£
(
NULL
);

105 
	`buûdTe°HwLumaDns
 (&
ã°LumaDnsPùe
);

107 i‡(
	`sùpPùeGëEº‹Sètus
 (
ã°LumaDnsPùe
.
∂
))

109 
u32
 
îrNum
;

110 
	`¥ötf
 ("Pipeline creationÉrror\nError codes:\n");

111 
îrNum
 = 
	`sùpGëEº‹Hi°‹y
 (
sùpEº‹Log
);

112 
îrNum
)

114 
	`¥ötf
 ("%08lx\n", 
sùpEº‹Log
[
îrNum
 - 0x1]);

115 
îrNum
--;

119 #i‚de‡
SIPP_TEST_SYNC_API


121 
	`sùpRegi°îEvítCÆlback
 (
ã°LumaDnsPùe
.
∂
,

122 
≠pSùpCÆlback
);

125 
	`c⁄figTe°HwLumaDns
 (&
ã°LumaDnsPùe
);

126 
	`ªadTe°HwLumaDnsI≈ut
(&
ã°LumaDnsPùe
);

129 #ifde‡
SIPP_USE_PRECALC_SCHEDULE


131 
	`dbgSchedInô
(
ã°LumaDnsPùe
.
∂
);

134 #ifde‡
SIPP_TEST_SYNC_API


135 
	`sùpPro˚ssFøme
(
ã°LumaDnsPùe
.
∂
);

137 i‡(
	`sùpPùeGëEº‹Sètus
 (
ã°LumaDnsPùe
.
∂
))

139 
u32
 
îrNum
;

140 
	`¥ötf
 ("PipelineÑuntimeÉrror\nError codes:\n");

141 
îrNum
 = 
	`sùpGëEº‹Hi°‹y
 (
sùpEº‹Log
);

142 
îrNum
)

144 
	`¥ötf
 ("%08lx\n", 
sùpEº‹Log
[
îrNum
 - 0x1]);

145 
îrNum
--;

150 
	`sùpPro˚ssFømeNB
(
ã°LumaDnsPùe
.
∂
);

152 i‡(
	`sùpPùeGëEº‹Sètus
 (
ã°LumaDnsPùe
.
∂
))

154 
u32
 
îrNum
;

155 
	`¥ötf
 ("PipelineÑuntimeÉrror\nError codes:\n");

156 
îrNum
 = 
	`sùpGëEº‹Hi°‹y
 (
sùpEº‹Log
);

157 
îrNum
)

159 
	`¥ötf
 ("%08lx\n", 
sùpEº‹Log
[
îrNum
 - 0x1]);

160 
îrNum
--;

164  
ã°Com∂ëe
 == 0x0 )

170 #ifde‡ 
SIPP_PC


171 
	`sùpGíîicRu¡imeWaôI§ThªadTîm
 ();

173 
	`wrôeTe°HwLumaDnsOuçut
(&
ã°LumaDnsPùe
);

174 
	`sùpRdFûeU8
(
SùpHwLumaDns_ªf_buf„r
, 
SIPP_HW_LUM_DNS_BUFFER_SIZE
, "../../../../../../../resources/Ref_lumaOutput_384x290.raw");

175 
	`sùpDbgCom∑ªU8
((
u8
*)
SùpHwLumaDns_ªf_buf„r
, (
uöt8_t
*)
Te°HwLumaDns_dmaOut0_buf„r
, 
SIPP_HW_LUM_DNS_BUFFER_SIZE
);

177 #ifde‡
SIPP_VCS


178 
	`unôTe°FöÆRï‹t
();

182 
	}
}

	@Sipp/SippFw/HwFilters/testHwLumaDns/leon/testHwLumaDns.c

13 
	~"ã°HwLumaDns.h
"

15 
	~<ö˛ude/sùpHwDefs.h
>

16 
	~<¨ch/ma2x5x/ö˛ude/sùpHwDefs_ma2x5x.h
>

20 
UI¡8
 
DDR_DATA
 
	gTe°HwLumaDns_dmaIn0_buf„r
[
SIPP_HW_LUM_DNS_BUFFER_WIDTH
* 
SIPP_HW_LUM_DNS_BUFFER_HEIGHT
* 
SIPP_HW_LUM_DNS_BUFFER_NUM_PLANES
]
ALIGNED
(8);

21 
UI¡8
 
DDR_DATA
 
	gTe°HwLumaDns_dmaOut0_buf„r
[
SIPP_HW_LUM_DNS_BUFFER_WIDTH
* 
SIPP_HW_LUM_DNS_BUFFER_HEIGHT
* 
SIPP_HW_LUM_DNS_BUFFER_NUM_PLANES
]
ALIGNED
(8);

24 
	$ªadTe°HwLumaDnsI≈ut
(
Te°HwLumaDns
 *
pPl
)

26 
	`sùpRdFûeU8
((
UI¡8
*)
Te°HwLumaDns_dmaIn0_buf„r
,
SIPP_HW_LUM_DNS_BUFFER_WIDTH
 * 
SIPP_HW_LUM_DNS_BUFFER_HEIGHT
 * 
SIPP_HW_LUM_DNS_BUFFER_NUM_PLANES
* (UInt8),"../../../../../../../resources/OCT_384x290_I_Y_dns_luma_8bpp.raw");

28 ()(
pPl
);

30 
	}
}

32 
	$wrôeTe°HwLumaDnsOuçut
(
Te°HwLumaDns
 *
pPl
)

34 
	`sùpWrFûeU8
((
UI¡8
*)
Te°HwLumaDns_dmaOut0_buf„r
,
SIPP_HW_LUM_DNS_BUFFER_WIDTH
 * 
SIPP_HW_LUM_DNS_BUFFER_HEIGHT
 * 
SIPP_HW_LUM_DNS_BUFFER_NUM_PLANES
* (UInt8),"output.raw");

36 ()(
pPl
);

38 
	}
}

40 
	$buûdTe°HwLumaDns
(
Te°HwLumaDns
 *
pPl
)

43 
pPl
->
∂
 = 
	`sùpCª©ePùñöe
(0, 0, 
	`SIPP_MBIN
(
mböImgSùp
));

46 
pPl
->
dmaIn0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x00, 
SIPP_HW_LUM_DNS_BUFFER_WIDTH
, 
SIPP_HW_LUM_DNS_BUFFER_HEIGHT
, 
	`N_PL
(
SIPP_HW_LUM_DNS_BUFFER_NUM_PLANES
), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

47 
pPl
->
ydnsMa2x5x0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x0, 
SIPP_HW_LUM_DNS_BUFFER_WIDTH
, 
SIPP_HW_LUM_DNS_BUFFER_HEIGHT
, 
	`N_PL
(
SIPP_HW_LUM_DNS_BUFFER_NUM_PLANES
), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_LUMA_ID
, 0);

48 
pPl
->
dmaOut0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x00, 
SIPP_HW_LUM_DNS_BUFFER_WIDTH
, 
SIPP_HW_LUM_DNS_BUFFER_HEIGHT
, 
	`N_PL
(
SIPP_HW_LUM_DNS_BUFFER_NUM_PLANES
), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

51 
	`sùpLökFûãr
(
pPl
->
ydnsMa2x5x0
,ÖPl->
dmaIn0
, 11,11 );

52 
	`sùpLökFûãr
(
pPl
->
dmaOut0
,ÖPl->
ydnsMa2x5x0
, 1,1 );

54 
	}
}

57 
	$c⁄figTe°HwLumaDns
(
Te°HwLumaDns
 *
pPl
)

59 
DmaP¨am
 *
dmaIn0Cfg
 = (DmaP¨am *)
pPl
->
dmaIn0
->
∑øms
;

60 
YDnsP¨am
 *
ydnsMa2x5x0Cfg
 = (YDnsP¨am *)
pPl
->
ydnsMa2x5x0
->
∑øms
;

61 
DmaP¨am
 *
dmaOut0Cfg
 = (DmaP¨am *)
pPl
->
dmaOut0
->
∑øms
;

66 
ydnsMa2x5x0Cfg
->
cfg
= 0x01084005;

67 
ydnsMa2x5x0Cfg
->
gaussLut
[0]=0x9abddeef;

68 
ydnsMa2x5x0Cfg
->
gaussLut
[1]=0x12234578;

69 
ydnsMa2x5x0Cfg
->
gaussLut
[2]=0x0;

70 
ydnsMa2x5x0Cfg
->
gaussLut
[3]=0x0;

71 
ydnsMa2x5x0Cfg
->
f2
= 0;

72 
ydnsMa2x5x0Cfg
->
gammaLut
[0]=0x665a4900;

73 
ydnsMa2x5x0Cfg
->
gammaLut
[1]=0x837d776f;

74 
ydnsMa2x5x0Cfg
->
gammaLut
[2]=0xa8890089;

75 
ydnsMa2x5x0Cfg
->
gammaLut
[3]=0xeadecfbe;

76 
ydnsMa2x5x0Cfg
->
gammaLut
[4]=0x1000fff5;

77 
ydnsMa2x5x0Cfg
->
di°Cfg
(
u32
)
di°LUT
;

78 
ydnsMa2x5x0Cfg
->
di°Off£ts
=
X_OFFSET
 | (
Y_OFFSET
 << 16);

79 
ydnsMa2x5x0Cfg
->
fuŒFrmDim

FULL_IMAGE_WIDTH
 | (
FULL_IMAGE_HEIGHT
 << 16);

80 
dmaIn0Cfg
->
ddrAddr
 = (
UI¡32
)&
Te°HwLumaDns_dmaIn0_buf„r
;

81 
dmaOut0Cfg
->
ddrAddr
 = (
UI¡32
)&
Te°HwLumaDns_dmaOut0_buf„r
;

84 
	}
}

	@Sipp/SippFw/HwFilters/testHwLumaDns/leon/testHwLumaDns.h

13 #i‚de‡
__TESTHWLUMADNS_H__


14 
	#__TESTHWLUMADNS_H__


	)

16 
	~<sùp.h
>

17 
	~<sùpTe°Comm⁄.h
>

19 
	~"ã°HwLumaDnsSëup.h
"

23 
UI¡8
 
DDR_DATA
 
Te°HwLumaDns_dmaIn0_buf„r
[ 
SIPP_HW_LUM_DNS_BUFFER_WIDTH
 * 
SIPP_HW_LUM_DNS_BUFFER_HEIGHT
 * 
SIPP_HW_LUM_DNS_BUFFER_NUM_PLANES
 ]
ALIGNED
(8);

24 
UI¡8
 
DDR_DATA
 
Te°HwLumaDns_dmaOut0_buf„r
[ 
SIPP_HW_LUM_DNS_BUFFER_WIDTH
 * 
SIPP_HW_LUM_DNS_BUFFER_HEIGHT
 * 
SIPP_HW_LUM_DNS_BUFFER_NUM_PLANES
 ]
ALIGNED
(8);

28 
	sTe°HwLumaDns


31 
SùpPùñöe
 *
	m∂
;

34 
SùpFûãr
 *
	mdmaIn0
;

35 
SùpFûãr
 *
	mdmaOut0
;

36 
SùpFûãr
 *
	mydnsMa2x5x0
;

38 } 
	tTe°HwLumaDns
;

40 
ªadTe°HwLumaDnsI≈ut
(
Te°HwLumaDns
 *
pPl
);

41 
wrôeTe°HwLumaDnsOuçut
(
Te°HwLumaDns
 *
pPl
);

43 
buûdTe°HwLumaDns
(
Te°HwLumaDns
 *
pPl
);

44 
c⁄figTe°HwLumaDns
(
Te°HwLumaDns
 *
pPl
);

	@Sipp/SippFw/HwFilters/testHwLumaDns/leon/testHwLumaDnsSetup.h

1 #i‚de‡
LEON_TESTHWLUMADNSSETUP_H_


2 
	#LEON_TESTHWLUMADNSSETUP_H_


	)

4 c⁄° 
u8
 
	gdi°LUT
[] =

21 
	#SIPP_HW_LUM_DNS_BUFFER_WIDTH
 384

	)

22 
	#SIPP_HW_LUM_DNS_BUFFER_HEIGHT
 290

	)

23 
	#SIPP_HW_LUM_DNS_BUFFER_NUM_PLANES
 1

	)

24 
	#SIPP_HW_LUM_DNS_BUFFER_SIZE
 (
SIPP_HW_LUM_DNS_BUFFER_WIDTH
 * 
SIPP_HW_LUM_DNS_BUFFER_HEIGHT
 * 
SIPP_HW_LUM_DNS_BUFFER_NUM_PLANES
)

	)

27 
	#ALPHA
 0.5

	)

28 
	#STRENGTH
 40

	)

29 
	#GAMMA
 0.3

	)

30 
	#ANGLE_OF_VIEW
 90

	)

31 
	#LUT_LOAD
 
ENABLED


	)

32 
	#X_OFFSET
 0

	)

33 
	#Y_OFFSET
 0

	)

34 
	#TC_PI
 3.141592653589793238462643383279502884

	)

36 
	#FULL_IMAGE_WIDTH
 
SIPP_HW_LUM_DNS_BUFFER_WIDTH


37 
	#FULL_IMAGE_HEIGHT
 
SIPP_HW_LUM_DNS_BUFFER_HEIGHT


38 

	)

	@Sipp/SippFw/HwFilters/testHwLut/leon/app_config.c

13 
	~"≠p_c⁄fig.h
"

14 
	~"DrvC¥.h
"

15 
	~"DrvDdr.h
"

16 
	~"swcLe⁄Utûs.h
"

17 
	~"DrvShaveL2Cache.h
"

18 
	~"DrvTimî.h
"

22 
	#SYS_CLK_KHZ
 12000

23 

	)

24 
	#L2CACHE_CFG
 (
SHAVE_L2CACHE_NORMAL_MODE
)

	)

25 
	#PARTITION_0
 (0)

	)

26 
	#SHAVES_USED
 (12)

	)

29 
	#AUX_CLOCKS_MIPICFG
 (
AUX_CLK_MASK_MIPI_ECFG
 | 
AUX_CLK_MASK_MIPI_CFG
)

	)

30 
	#AUX_CLOCKS_VIDEO
 (
AUX_CLK_MASK_MEDIA
 | 
AUX_CLK_MASK_LCD
)

	)

32 
	#MSS_CLOCKS
 ( 
DEV_MSS_APB_SLV
 | \

33 
DEV_MSS_APB2_CTRL
 | \

34 
DEV_MSS_RTBRIDGE
 | \

35 
DEV_MSS_RTAHB_CTRL
 | \

36 
DEV_MSS_LRT
 | \

37 
DEV_MSS_LRT_DSU
 | \

38 
DEV_MSS_LRT_L2C
 | \

39 
DEV_MSS_LRT_ICB
 | \

40 
DEV_MSS_AXI_BRIDGE
 | \

41 
DEV_MSS_MXI_CTRL
 | \

42 
DEV_MSS_MXI_DEFSLV
 | \

43 
DEV_MSS_AXI_MON
 | \

44 
DEV_MSS_LCD
 | \

45 
DEV_MSS_AMC
 | \

46 
DEV_MSS_SIPP
 | \

47 
DEV_MSS_TIM
 )

	)

49 
	#SIPP_CLOCKS
 ( 
DEV_SIPP_SIPP_ABPSLV
 | \

50 
DEV_SIPP_MIPI
 | \

51 
DEV_SIPP_MIPI_RX1
 )

	)

60 
tyAuxClkDividîCfg
 
	gauxClk
[] =

63 .
auxClockE«bÀMask
 = 
AUX_CLOCKS_VIDEO
,

64 .
	gauxClockSour˚
 = 
CLK_SRC_SYS_CLK_DIV2
 ,

65 .
	gauxClockDivNumî©‹
 = 1,

66 .
	gauxClockDivDíomö©‹
 = 1,

69 .
	gauxClockE«bÀMask
 = 
AUX_CLOCKS_MIPICFG
,

70 .
	gauxClockSour˚
 = 
CLK_SRC_SYS_CLK
 ,

71 .
	gauxClockDivNumî©‹
 = 1,

72 .
	gauxClockDivDíomö©‹
 = 18,

80 
tySocClockC⁄fig
 
	g˛ocksC⁄fig
 =

82 .
ªfClk0I≈utKhz
 = 
SYS_CLK_KHZ
 ,

83 .
	gªfClk1I≈utKhz
 = 0,

84 .
	gèrgëPŒ0FªqKhz
 = 360000,

85 .
	gèrgëPŒ1FªqKhz
 = 0,

86 .
	g˛kSrcPŒ1
 = 
CLK_SRC_REFCLK0
,

87 .
	gma°îClkDivNumî©‹
 = 1,

88 .
	gma°îClkDivDíomö©‹
 = 1,

89 .
	gcssDssClockE«bÀMask
 = 
DEFAULT_CORE_CSS_DSS_CLOCKS
,

90 .
	gmssClockE«bÀMask
 = 
MSS_CLOCKS
,

91 .
	gsùpClockE«bÀMask
 = 
SIPP_CLOCKS
,

92 .
	gu∑ClockE«bÀMask
 = 0,

93 .
	gpAuxClkCfg
 = 
auxClk
,

102 
	$öôClocksAndMem‹y
()

104 
i
;

105 
s32
 
sc
;

108 
sc
 = 
	`DrvC¥Inô
();

109 if(
sc
)

110  
sc
;

112 
	`DrvC¥SysDevi˚A˘i⁄
(
SIPP_DOMAIN
, 
ASSERT_RESET
, 
DEV_SIPP_MIPI
);

113 
	`DrvC¥SysDevi˚A˘i⁄
(
MSS_DOMAIN
, 
ASSERT_RESET
, 
DEV_MSS_SIPP
 | 
DEV_MSS_AMC
 | 
DEV_MSS_LCD
 );

114 
	`DrvC¥SysDevi˚A˘i⁄
(
MSS_DOMAIN
, 
DEASSERT_RESET
, 
DEV_MSS_SIPP
 );

116 
sc
 = 
	`DrvC¥SëupClocks
(&
˛ocksC⁄fig
);

117 if(
sc
)

118  
sc
;

120 
	`DrvC¥SysDevi˚A˘i⁄
(
MSS_DOMAIN
, 
DEASSERT_RESET
, -1);

121 
	`DrvC¥SysDevi˚A˘i⁄
(
CSS_DOMAIN
, 
DEASSERT_RESET
, -1);

122 
	`DrvC¥SysDevi˚A˘i⁄
(
SIPP_DOMAIN
, 
DEASSERT_RESET
, -1);

124 
	`swcLe⁄SëPIL
(0);

126 
	`DrvDdrInôüli£
(
NULL
);

129 
sc
 = 
	`DrvShaveL2CacheSëMode
(
L2CACHE_CFG
);

130 if(
sc
)

131  
sc
;

134 
	`DrvShaveL2CacheSëupP¨tôi⁄
(
SHAVEPART256KB
);

137 
sc
 = 
	`DrvShaveL2CacheAŒoˇãSëP¨tôi⁄s
();

138 if(
sc
)

139  
sc
;

142 
i
 = 0; i < 
SHAVES_USED
; i++)

144 
	`DrvShaveL2CacheSëLSUP¨tId
(
i
, 
PARTITION_0
);

147 
	`DrvShaveL2CacheP¨tôi⁄FlushAndInvÆid©e
(
PARTITION_0
);

150 
	}
}

	@Sipp/SippFw/HwFilters/testHwLut/leon/app_config.h

13 #i‚de‡
APP_CONFIG_H


14 
	#APP_CONFIG_H


	)

18 
	~"mv_ty≥s.h
"

29 
öôClocksAndMem‹y
();

	@Sipp/SippFw/HwFilters/testHwLut/leon/main.c

13 
	~<sùp.h
>

14 
	~<sùpTe°Comm⁄.h
>

16 #i‡
deföed
(
SIPP_VCS
)

17 
	~<UnôTe°Api.h
>

18 
	~<DrvTimî.h
>

19 
	~<DrvDdr.h
>

22 
	~"ã°HwLut.h
"

28 
	#SIPP_TEST_SYNC_API


30 

	)

31 #ifde‡
SIPP_PC


36 
Â16
 
	tlut_ôy≥
;

37 
Â16
 
	tlut_…y≥
;

38 
	#INCONV
(
x
Ë(x)*(1.0f/255)

	)

39 
	#LUTCONV
(
x
Ë(x)*(1.0f/255)

	)

40 
	#APBCONV
(
x
Ëx.
	`gëPackedVÆue
()

	)

41 
	#OUTCONV
(
x
Ë(
uöt8_t
)
	)
x

51 
Te°HwLut
 
	gã°Lut
;

53 #i‚de‡
SIPP_TEST_SYNC_API


54 vﬁ©ûê
u32
 
	gã°Com∂ëe
 = 0;

58 c⁄° 
uöt16_t
 
	gt⁄Æ_curve
[256] = {

93 
uöt8_t
 
DDR_DATA
 
	gSùpHwLut_Ref_buf„r
[
SIPP_HW_LUT_OUTPUT_BUFFER_SIZE
];

95 #i‚de‡
SIPP_LUT_TEST_CREATE_LUT


96 
	~"ã°Lut.h
"

103 #ifde‡
SIPP_USE_PRECALC_SCHEDULE


104 
	~"pcDumpScheduÀ.hh
"

107 * 
sùpPÆMem˝y
 (*
pDe°
, c⁄° *
pSrc
, 
u32
 
uSize
);

112 #ifde‡
SIPP_LUT_TEST_CREATE_LUT


114 
	$≠pCª©eLut
 (
lut_…y≥
 * 
lbuf
)

116 
˙t1
, 
˙t2
, 
˙t3
, 
˙t4
;

118 
˙t1
 = 0; c¡1 < 
LUTS_NO
; cnt1++)

120 
˙t2
 = 0; cnt2 < 256; cnt2++)

122 
˙t3
 = 0; c¡3 < 
CHANNELS_NO
; cnt3++)

124 *
lbuf
++ = 
	`LUTCONV
(
	`CLIP
((
t⁄Æ_curve
[
˙t2
] - 
˙t3
 + 10*
˙t1
), 0xFF));

126 
˙t4
 = 
˙t3
; c¡4 < 
LUT_ALLOCATE
; cnt4++)

128 *
lbuf
++ = 
	`LUTCONV
(0);

133 
	}
}

136 #ifde‡
SIPP_PC


137 
	$≠pPrötLut
 (
lut_…y≥
 * 
lbuf
)

139 
FILE
 * 
lutFp
 = 
	`f›í
 ("testLut.h", "w");

140 
˙t1
;

142 
	`Ârötf
(
lutFp
, "u16ÅestLUTBuf[] ALIGNED(8) = {\n");

144 
˙t1
 = 0; c¡1 < 
LUT_SIZE
; cnt1 += 4)

146 
	`Ârötf
(
lutFp
, "0x%04x,0x%04x,0x%04x,0x%04x,\n",

147 *((
uöt16_t
*)&
lbuf
[
˙t1
 + 0x0]),

148 *((
uöt16_t
*)&
lbuf
[
˙t1
 + 0x1]),

149 *((
uöt16_t
*)&
lbuf
[
˙t1
 + 0x2]),

150 *((
uöt16_t
*)&
lbuf
[
˙t1
 + 0x3]));

153 
	`Ârötf
(
lutFp
, "};\n\n");

154 
	`f˛o£
 (
lutFp
);

155 
	}
}

157 #ifde‡
SIPP_LUT_TEST_GEN_INPUT


159 
uöt32_t
 
	$≠pGíî©eFp16LUT
 (
u32
 
numIPœ√s
,

160 
u32
 
numCh™√ls
,

161 
u32
 
width
,

162 
u32
 
height
,

163 
FILE
 * 
lutFp
,

164 
FILE
 * 
outLutFp
)

166 
uöt8_t
 * 
c⁄vbuf
 = 
√w
 uöt8_à[
width
*
height
];

167 
lut_ôy≥
 
öputPix
;

168 
lut_ôy≥
 * 
pixPå
 = &
öputPix
;

169 
uöt32_t
 
idx
 = 0;

171 
∂
 = 0;Ö»< 
numIPœ√s
;Öl++)

173 
ch
 = 0; ch < 
numCh™√ls
; ch++)

175 
	`‰ód
(
c⁄vbuf
, (*c⁄vbuf), 
width
*
height
, 
lutFp
);

177 
pix
 = 0;Öix < 
width
 * 
height
;Öix++, 
idx
++)

179 
u8
 
öputPix8
 = 
c⁄vbuf
[
pix
];

180 *
pixPå
 = 
	`INCONV
(
öputPix8
);

181 
SùpHwLut_dmaIn0_buf„r
[
idx
] = 
öputPix
.
	`gëPackedVÆue
();

182 
	`fwrôe
(&
SùpHwLut_dmaIn0_buf„r
[
idx
], (
uöt16_t
), 0x1, 
outLutFp
);

187  
idx
;

188 
	}
}

196 #i‚de‡
SIPP_TEST_SYNC_API


197 
	$≠pSùpCÆlback
 ( 
SùpPùñöe
 * 
pPùñöe
,

198 
eSIPP_PIPELINE_EVENT
 
eEvít
,

199 
SIPP_PIPELINE_EVENT_DATA
 * 
±EvítD©a


202 i‡(
eEvít
 =
eSIPP_PIPELINE_FRAME_DONE
)

204 
	`¥ötf
 ("appSippCallback : Frame doneÉventÑeceived : TestÖroceedingÅo checksándÅermination\n");

205 
ã°Com∂ëe
 = 1;

208 
	}
}

212 
Â16
 
	g≠pLUT
[
LUT_SIZE
] 
ALIGNED
(8);

214 
	$maö
 (
¨gc
, *
¨gv
[])

216 
	`UNUSED
 (
¨gc
);

217 
	`UNUSED
 (
¨gv
);

218 
u32
 
sùpEº‹Log
[
SIPP_ERROR_HISTORY_SIZE
];

220 
	`sùpPœtf‹mInô
 ();

222 #i‚de‡
SIPP_PC


223 i‡(
PROCESS_LEON_OS
 =
	`swcWhoAmI
())

225 
	`¥ötf
 ("App Starting on LEON OS\n");

227 #i‚de‡
SIPP_TEST_SYNC_API


228 
	`¥ötf
 ("Please make sure IRQ sources for dynamicallyÑoute between LeonOSánd LeonRTáre set\n");

233 
	`¥ötf
 ("App Starting on LEON RT\n");

237 #i‚de‡
SIPP_TEST_SYNC_API


238 
	`sùpPœtf‹mInôAsync
 ();

241 #ifde‡
SIPP_VCS


242 
	`unôTe°Inô
 ();

243 
	`DrvTimîInô
 ();

244 
	`DrvDdrInôüli£
 (
NULL
);

247 
	`buûdTe°HwLut
 (&
ã°Lut
);

249 i‡(
	`sùpPùeGëEº‹Sètus
 (
ã°Lut
.
∂
))

251 
u32
 
îrNum
;

252 
	`¥ötf
 ("Pipeline creationÉrror\nError codes:\n");

253 
îrNum
 = 
	`sùpGëEº‹Hi°‹y
 (
sùpEº‹Log
);

254 
îrNum
)

256 
	`¥ötf
 ("%08lx\n", 
sùpEº‹Log
[
îrNum
 - 0x1]);

257 
îrNum
--;

262 #i‚de‡
SIPP_TEST_SYNC_API


264 
	`sùpRegi°îEvítCÆlback
 (
ã°Lut
.
∂
,

265 
≠pSùpCÆlback
);

268 
	`c⁄figTe°HwLut
 (&
ã°Lut
);

269 #ifde‡
SIPP_LUT_TEST_CREATE_LUT


270 
	`≠pCª©eLut
 (
≠pLUT
);

271 
	`≠pPrötLut
 (
≠pLUT
);

273 
	`sùpPÆMem˝y
 ((*)
≠pLUT
, (*)
ã°LUTBuf
, (
lut_…y≥
Ë* 
LUT_SIZE
);

276 #ifde‡
SIPP_LUT_TEST_GEN_INPUT


278 
FILE
 * 
lutFp
 = 
	`f›í
("../../../../../../../resources/OCT_384x290_I_gamma_8bpp.raw", "r");

279 
FILE
 * 
outLutFp
 = 
	`f›í
("../../../../../../../resources/OCT_384x290_I_gamma_16bpp.raw", "wb");

281 
uöt32_t
 
uNumILöes
 = 
	`≠pGíî©eFp16LUT
 (
SIPP_HW_LUT_BUFFER_NUM_IN_PLANES
,

282 
CHANNELS_NO
,

283 
SIPP_HW_LUT_BUFFER_WIDTH
,

284 
SIPP_HW_LUT_BUFFER_HEIGHT
,

285 
lutFp
,

286 
outLutFp
);

288 
	`¥ötf
("uNumILöe†%d\n", 
uNumILöes
);

289 
	`f˛o£
 (
lutFp
);

290 
	`f˛o£
 (
outLutFp
);

292 
	`ªadTe°HwLutI≈ut
(&
ã°Lut
);

295 #ifde‡
SIPP_USE_PRECALC_SCHEDULE


297 
	`dbgSchedInô
 (
ã°Lut
.
∂
);

300 #ifde‡
SIPP_TEST_SYNC_API


301 
	`sùpPro˚ssFøme
(
ã°Lut
.
∂
);

303 i‡(
	`sùpPùeGëEº‹Sètus
 (
ã°Lut
.
∂
))

305 
u32
 
îrNum
;

306 
	`¥ötf
 ("PipelineÑuntimeÉrror\nError codes:\n");

307 
îrNum
 = 
	`sùpGëEº‹Hi°‹y
 (
sùpEº‹Log
);

308 
îrNum
)

310 
	`¥ötf
 ("%08lx\n", 
sùpEº‹Log
[
îrNum
 - 0x1]);

311 
îrNum
--;

316 
	`sùpPro˚ssFømeNB
(
ã°Lut
.
∂
);

318 i‡(
	`sùpPùeGëEº‹Sètus
 (
ã°Lut
.
∂
))

320 
u32
 
îrNum
;

321 
	`¥ötf
 ("PipelineÑuntimeÉrror\nError codes:\n");

322 
îrNum
 = 
	`sùpGëEº‹Hi°‹y
 (
sùpEº‹Log
);

323 
îrNum
)

325 
	`¥ötf
 ("%08lx\n", 
sùpEº‹Log
[
îrNum
 - 0x1]);

326 
îrNum
--;

330  
ã°Com∂ëe
 == 0x0 )

334 #ifde‡ 
SIPP_PC


335 
	`sùpGíîicRu¡imeWaôI§ThªadTîm
 ();

339 
	`wrôeTe°HwLutOuçut
(&
ã°Lut
);

340 
	`sùpRdFûeU8
 ((
u8
*)
SùpHwLut_Ref_buf„r
, 
SIPP_HW_LUT_OUTPUT_BUFFER_SIZE
, "../../../../../../../resources/Ref_lutTestOutput_384x290_8bpp.raw");

341 
	`sùpDbgCom∑ªU8
 ((
u8
*)
Te°HwLut_dmaOut0_buf„r
, 
SùpHwLut_Ref_buf„r
, 
SIPP_HW_LUT_OUTPUT_BUFFER_SIZE
);

343 #ifde‡
SIPP_VCS


344 
	`unôTe°FöÆRï‹t
();

348 
	}
}

	@Sipp/SippFw/HwFilters/testHwLut/leon/testHwLut.c

13 
	~"ã°HwLut.h
"

15 
	~<ö˛ude/sùpHwDefs.h
>

16 
	~<¨ch/ma2x5x/ö˛ude/sùpHwDefs_ma2x5x.h
>

20 
UI¡16
 
DDR_DATA
 
	gTe°HwLut_dmaIn0_buf„r
 [
SIPP_HW_LUT_BUFFER_WIDTH
* 
SIPP_HW_LUT_BUFFER_HEIGHT
* 
SIPP_HW_LUT_BUFFER_NUM_IN_PLANES
]
ALIGNED
(8);

21 
UI¡8
 
DDR_DATA
 
	gTe°HwLut_dmaOut0_buf„r
 [
SIPP_HW_LUT_BUFFER_WIDTH
* 
SIPP_HW_LUT_BUFFER_HEIGHT
* 
SIPP_HW_LUT_BUFFER_NUM_IN_PLANES
]
ALIGNED
(8);

24 
	$ªadTe°HwLutI≈ut
(
Te°HwLut
 *
pPl
)

26 
	`sùpRdFûeU8
((
UI¡8
*)
Te°HwLut_dmaIn0_buf„r
,
SIPP_HW_LUT_BUFFER_WIDTH
 * 
SIPP_HW_LUT_BUFFER_HEIGHT
 * 
SIPP_HW_LUT_BUFFER_NUM_IN_PLANES
* (
UI¡16
),"../../../../../../../resources/OCT_384x290_I_gamma_16bpp.raw");

28 ()(
pPl
);

30 
	}
}

32 
	$wrôeTe°HwLutOuçut
(
Te°HwLut
 *
pPl
)

34 
	`sùpWrFûeU8
((
UI¡8
*)
Te°HwLut_dmaOut0_buf„r
,
SIPP_HW_LUT_BUFFER_WIDTH
 * 
SIPP_HW_LUT_BUFFER_HEIGHT
 * 
SIPP_HW_LUT_BUFFER_NUM_IN_PLANES
* (UInt8),"lutTestOutput.raw");

36 ()(
pPl
);

38 
	}
}

40 
	$buûdTe°HwLut
(
Te°HwLut
 *
pPl
)

43 
pPl
->
∂
 = 
	`sùpCª©ePùñöe
(0, 0, 
	`SIPP_MBIN
(
mböImgSùp
));

46 
pPl
->
dmaIn0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x00, 
SIPP_HW_LUT_BUFFER_WIDTH
, 
SIPP_HW_LUT_BUFFER_HEIGHT
, 
	`N_PL
(
SIPP_HW_LUT_BUFFER_NUM_IN_PLANES
), 
	`SZ
(
UI¡16
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

47 
pPl
->
lutMa2x5x0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x0, 
SIPP_HW_LUT_BUFFER_WIDTH
, 
SIPP_HW_LUT_BUFFER_HEIGHT
, 
	`N_PL
(
SIPP_HW_LUT_BUFFER_NUM_IN_PLANES
), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_LUT_ID
, 0);

48 
pPl
->
dmaOut0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x00, 
SIPP_HW_LUT_BUFFER_WIDTH
, 
SIPP_HW_LUT_BUFFER_HEIGHT
, 
	`N_PL
(
SIPP_HW_LUT_BUFFER_NUM_IN_PLANES
), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

51 
	`sùpLökFûãr
(
pPl
->
lutMa2x5x0
,ÖPl->
dmaIn0
, 1,1 );

52 
	`sùpLökFûãr
(
pPl
->
dmaOut0
,ÖPl->
lutMa2x5x0
, 1,1 );

54 
	}
}

57 
	$c⁄figTe°HwLut
(
Te°HwLut
 *
pPl
)

59 
DmaP¨am
 *
dmaIn0Cfg
 = (DmaP¨am *)
pPl
->
dmaIn0
->
∑øms
;

60 
LutP¨am
 *
lutMa2x5x0Cfg
 = (LutP¨am *)
pPl
->
lutMa2x5x0
->
∑øms
;

61 
DmaP¨am
 *
dmaOut0Cfg
 = (DmaP¨am *)
pPl
->
dmaOut0
->
∑øms
;

66 
lutMa2x5x0Cfg
->
cfg

INTERP_MODE
 | 
CHANNEL_MODE
<< 1 | 
INT_WIDTH
<< 3 | (
LUTS_NO
 - 1Ë<< 8 |(
CHANNELS_NO
 - 1Ë<< 12 | 
LUT_LOAD
 << 14 | 
APB_ACCESS
<< 15 | 
CSC_ENABLE
<< 16;

67 
lutMa2x5x0Cfg
->
sizeA

LUT_REGION0_SIZE_I
 | (
LUT_REGION1_SIZE_I
 << 4Ë| (
LUT_REGION2_SIZE_I
 << 8Ë| (
LUT_REGION3_SIZE_I
 << 12Ë| (
LUT_REGION4_SIZE_I
 << 16Ë| (
LUT_REGION5_SIZE_I
 << 20Ë| (
LUT_REGION6_SIZE_I
 << 24Ë| (
LUT_REGION7_SIZE_I
 << 28);

68 
lutMa2x5x0Cfg
->
sizeB

LUT_REGION8_SIZE_I
 | (
LUT_REGION9_SIZE_I
 << 4Ë| (
LUT_REGION10_SIZE_I
 << 8Ë| (
LUT_REGION11_SIZE_I
 << 12Ë| (
LUT_REGION12_SIZE_I
 << 16Ë| (
LUT_REGION13_SIZE_I
 << 20Ë| (
LUT_REGION14_SIZE_I
 << 24Ë| (
LUT_REGION15_SIZE_I
 << 28);

69 
lutMa2x5x0Cfg
->
lut
(*)
≠pLUT
;

70 
lutMa2x5x0Cfg
->
lutF‹m©
=
LUT_LD_FORMAT
;

71 
lutMa2x5x0Cfg
->
m©
[0]
LUT_MAT_11
;

72 
lutMa2x5x0Cfg
->
m©
[1]
LUT_MAT_12
;

73 
lutMa2x5x0Cfg
->
m©
[2]
LUT_MAT_13
;

74 
lutMa2x5x0Cfg
->
m©
[3]
LUT_MAT_21
;

75 
lutMa2x5x0Cfg
->
m©
[4]
LUT_MAT_22
;

76 
lutMa2x5x0Cfg
->
m©
[5]
LUT_MAT_23
;

77 
lutMa2x5x0Cfg
->
m©
[6]
LUT_MAT_31
;

78 
lutMa2x5x0Cfg
->
m©
[7]
LUT_MAT_32
;

79 
lutMa2x5x0Cfg
->
m©
[8]
LUT_MAT_33
;

80 
lutMa2x5x0Cfg
->
off£t
[0]=
LUT_OFF_1
;

81 
lutMa2x5x0Cfg
->
off£t
[1]=
LUT_OFF_2
;

82 
lutMa2x5x0Cfg
->
off£t
[2]=
LUT_OFF_3
;

83 
dmaIn0Cfg
->
ddrAddr
 = (
UI¡32
)&
Te°HwLut_dmaIn0_buf„r
;

84 
dmaOut0Cfg
->
ddrAddr
 = (
UI¡32
)&
Te°HwLut_dmaOut0_buf„r
;

87 
	}
}

	@Sipp/SippFw/HwFilters/testHwLut/leon/testHwLut.h

13 #i‚de‡
__TESTHWLUT_H__


14 
	#__TESTHWLUT_H__


	)

16 
	~<sùp.h
>

17 
	~<sùpTe°Comm⁄.h
>

19 
	~"ã°HwLutSëup.h
"

23 
UI¡16
 
DDR_DATA
 
Te°HwLut_dmaIn0_buf„r
[ 
SIPP_HW_LUT_BUFFER_WIDTH
 * 
SIPP_HW_LUT_BUFFER_HEIGHT
 * 
SIPP_HW_LUT_BUFFER_NUM_IN_PLANES
 ]
ALIGNED
(8);

24 
UI¡8
 
DDR_DATA
 
Te°HwLut_dmaOut0_buf„r
[ 
SIPP_HW_LUT_BUFFER_WIDTH
 * 
SIPP_HW_LUT_BUFFER_HEIGHT
 * 
SIPP_HW_LUT_BUFFER_NUM_IN_PLANES
 ]
ALIGNED
(8);

28 
	sTe°HwLut


31 
SùpPùñöe
 *
	m∂
;

34 
SùpFûãr
 *
	mdmaIn0
;

35 
SùpFûãr
 *
	mdmaOut0
;

36 
SùpFûãr
 *
	mlutMa2x5x0
;

38 } 
	tTe°HwLut
;

40 
ªadTe°HwLutI≈ut
(
Te°HwLut
 *
pPl
);

41 
wrôeTe°HwLutOuçut
(
Te°HwLut
 *
pPl
);

43 
buûdTe°HwLut
(
Te°HwLut
 *
pPl
);

44 
c⁄figTe°HwLut
(
Te°HwLut
 *
pPl
);

	@Sipp/SippFw/HwFilters/testHwLut/leon/testHwLutSetup.h

1 #i‚de‡
LEON_TESTHWLUTSETUP_H_


2 
	#LEON_TESTHWLUTSETUP_H_


	)

4 
	#SIPP_HW_LUT_BUFFER_WIDTH
 384

	)

5 
	#SIPP_HW_LUT_BUFFER_HEIGHT
 290

	)

6 
	#SIPP_HW_LUT_BUFFER_NUM_IN_PLANES
 3

	)

7 
	#SIPP_HW_LUT_BUFFER_NUM_OUT_PLANES
 3

	)

8 
	#SIPP_HW_LUT_INPUT_BUFFER_SIZE
 (
SIPP_HW_LUT_BUFFER_WIDTH
 * 
SIPP_HW_LUT_BUFFER_HEIGHT
 * 
SIPP_HW_LUT_BUFFER_NUM_IN_PLANES
)

	)

9 
	#SIPP_HW_LUT_OUTPUT_BUFFER_SIZE
 (
SIPP_HW_LUT_BUFFER_WIDTH
 * 
SIPP_HW_LUT_BUFFER_HEIGHT
 * 
SIPP_HW_LUT_BUFFER_NUM_OUT_PLANES
)

	)

11 
	#LUT_REGION0_SIZE_I
 4

	)

12 
	#LUT_REGION1_SIZE_I
 4

	)

13 
	#LUT_REGION2_SIZE_I
 4

	)

14 
	#LUT_REGION3_SIZE_I
 4

	)

15 
	#LUT_REGION4_SIZE_I
 4

	)

16 
	#LUT_REGION5_SIZE_I
 4

	)

17 
	#LUT_REGION6_SIZE_I
 4

	)

18 
	#LUT_REGION7_SIZE_I
 4

	)

20 
	#LUT_REGION8_SIZE_I
 4

	)

21 
	#LUT_REGION9_SIZE_I
 4

	)

22 
	#LUT_REGION10_SIZE_I
 4

	)

23 
	#LUT_REGION11_SIZE_I
 4

	)

24 
	#LUT_REGION12_SIZE_I
 4

	)

25 
	#LUT_REGION13_SIZE_I
 4

	)

26 
	#LUT_REGION14_SIZE_I
 4

	)

27 
	#LUT_REGION15_SIZE_I
 4

	)

29 
	#INTERP_MODE
 
ENABLED


	)

30 
	#CHANNEL_MODE
 
ENABLED


	)

31 
	#INT_WIDTH
 12

	)

32 
	#LUTS_NO
 2

	)

33 
	#LUT_LOAD
 
ENABLED


	)

34 
	#APB_ACCESS
 
DISABLED


	)

35 
	#CSC_ENABLE
 
ENABLED


	)

37 
	#FLOAT_TO_FIXED6_10
(
A
Ë(
öt16_t
)((AË* 1024)

	)

38 
	#FLOAT_TO_FIXED4_8
(
A
, 
B
Ë(
uöt16_t
)(((AË<< 8Ë+ ((BË* 256))

	)

39 
	#FLOAT_TO_FIXED1_7
(
A
, 
B
Ë(
uöt8_t
Ë(((AË<< 7Ë+ ((BË* 128))

	)

40 
	#FLOAT_TO_FIXED5_3
(
A
, 
B
Ë(
uöt8_t
Ë(((AË<< 3Ë+ ((BË* 8))

	)

41 
	#FLOAT_TO_FIXED2_10
(
A
Ë(
öt16_t
)((AË* 1024)

	)

42 
	#FLOAT_TO_FIXED1_12
(
A
Ë(
öt16_t
)((AË* 4096)

	)

44 
	#LUT_MAT_11
 (
	`FLOAT_TO_FIXED2_10
–0.299fË& 0xfff)

	)

45 
	#LUT_MAT_12
 (
	`FLOAT_TO_FIXED2_10
–0.587fË& 0xfff)

	)

46 
	#LUT_MAT_13
 (
	`FLOAT_TO_FIXED2_10
–0.114fË& 0xfff)

	)

47 
	#LUT_MAT_21
 (
	`FLOAT_TO_FIXED2_10
(-0.169fË& 0xfff)

	)

48 
	#LUT_MAT_22
 (
	`FLOAT_TO_FIXED2_10
(-0.331fË& 0xfff)

	)

49 
	#LUT_MAT_23
 (
	`FLOAT_TO_FIXED2_10
–0.500fË& 0xfff)

	)

50 
	#LUT_MAT_31
 (
	`FLOAT_TO_FIXED2_10
–0.500fË& 0xfff)

	)

51 
	#LUT_MAT_32
 (
	`FLOAT_TO_FIXED2_10
(-0.419fË& 0xfff)

	)

52 
	#LUT_MAT_33
 (
	`FLOAT_TO_FIXED2_10
(-0.081fË& 0xfff)

	)

53 
	#LUT_OFF_1
 ( 0 << 4)

	)

54 
	#LUT_OFF_2
 (128 << 4)

	)

55 
	#LUT_OFF_3
 (128 << 4)

	)

58 
	#SIPP_FORMAT_8BIT
 0x1

	)

59 
	#SIPP_FORMAT_16BIT
 0x2

	)

60 
	#SIPP_FORMAT_32BIT
 0x4

	)

61 
	#SIPP_FORMAT_PACK10
 0x5

	)

62 
	#SIPP_FORMAT_PACK12
 0x3

	)

64 
	#LUT_IN_FORMAT
 
SIPP_FORMAT_16BIT


	)

65 
	#LUT_LD_FORMAT
 
SIPP_FORMAT_16BIT


	)

66 
	#LUT_OUT_FORMAT
 
SIPP_FORMAT_8BIT


	)

68 
	#CHANNELS_NO
 3

	)

69 
	#LUT_ALLOCATE
 4

	)

70 
	#LUT_SIZE
 (256 * 
LUT_ALLOCATE
 * 
LUTS_NO
)

	)

72 
Â16
 
≠pLUT
[
LUT_SIZE
] 
ALIGNED
(8);

	@Sipp/SippFw/HwFilters/testHwLut/leon/testLut.h

1 
u16
 
	gã°LUTBuf
[] 
ALIGNED
(8) = {

	@Sipp/SippFw/HwFilters/testHwMedian/leon/app_config.c

13 
	~<ªgi°îsMyrüd.h
>

14 
	~<DrvC¥.h
>

19 #i‚de‡
IPIPE_CLK_CONFIG_SEL


20 
	#ùùeClockC⁄fig
 
ùùeClkC⁄figMV182


	)

22 
	#ùùeClockC⁄fig
 
IPIPE_CLK_CONFIG_SEL


	)

35 
tyAuxClkDividîCfg
 
	gauxClkAŒOn
[] =

37 {0x0FFFFFFF & (~(1<<
CSS_AUX_DDR_CORE
)Ë, 
CLK_SRC_REFCLK0
, 1, 1},

42 
tySocClockC⁄fig
 
	gùùeClkC⁄figMV182
 =

44 .
ªfClk0I≈utKhz
 = 12000,

45 .
	gªfClk1I≈utKhz
 = 0,

46 .
	gèrgëPŒ0FªqKhz
 = 264000,

47 .
	gèrgëPŒ1FªqKhz
 = 0,

48 .
	g˛kSrcPŒ1
 = 
CLK_SRC_REFCLK0
,

49 .
	gma°îClkDivNumî©‹
 = 
DONT_TOUCH_MASTER_DIVIDER
,

50 .
	gma°îClkDivDíomö©‹
 = 
DONT_TOUCH_MASTER_DIVIDER
,

51 .
	gcssDssClockE«bÀMask
 = 0xFFFFFFFFFFFFFFFFULL,

52 .
	gmssClockE«bÀMask
 = 0xFFFFFFFF,

53 .
	gsùpClockE«bÀMask
 = 0xFFFFFFFF,

54 .
	gu∑ClockE«bÀMask
 = 0xFFFFFFFF,

55 .
	gpAuxClkCfg
 = 
auxClkAŒOn
,

67 
	$öôClocksAndMem‹y
()

69 
	`DrvC¥Inô
();

70 
	`DrvC¥SëupClocks
(&
ùùeClockC⁄fig
);

73 
	}
}

	@Sipp/SippFw/HwFilters/testHwMedian/leon/app_config.h

9 #i‚de‡
_APP_CONFIG_H_


10 
	#_APP_CONFIG_H_


	)

16 
öôClocksAndMem‹y
();

	@Sipp/SippFw/HwFilters/testHwMedian/leon/main.c

20 
	~<sùp.h
>

21 
	~<sùpTe°Comm⁄.h
>

23 #i‡
deföed
(
SIPP_VCS
)

24 
	~<UnôTe°Api.h
>

25 
	~<DrvTimî.h
>

26 
	~<DrvDdr.h
>

29 
	~"ã°D©a.h
"

30 
	~"ã°HwMedün.h
"

36 
	#SIPP_TEST_SYNC_API


37 
	#SIPP_USE_PRECALC_SCHEDULE


	)

42 
Te°HwMedün
 
	gmedünPùe
;

44 #i‚de‡
SIPP_TEST_SYNC_API


45 vﬁ©ûê
u32
 
	gã°Com∂ëe
 = 0;

48 #ifde‡
SIPP_USE_PRECALC_SCHEDULE


49 
	~"pcDumpScheduÀ.hh
"

55 #i‚de‡
SIPP_TEST_SYNC_API


56 
	$≠pSùpCÆlback
 ( 
SùpPùñöe
 * 
pPùñöe
,

57 
eSIPP_PIPELINE_EVENT
 
eEvít
,

58 
SIPP_PIPELINE_EVENT_DATA
 * 
±EvítD©a
 )

60 i‡(
eEvít
 =
eSIPP_PIPELINE_FRAME_DONE
)

62 
	`¥ötf
 ("appSippCallback : Frame doneÉventÑeceived : TestÖroceedingÅo checksándÅermination\n");

63 
ã°Com∂ëe
 = 1;

66 
	}
}

70 
	$maö
 (
¨gc
, *
¨gv
[])

72 
	`UNUSED
 (
¨gc
);

73 
	`UNUSED
 (
¨gv
);

74 
u32
 
sùpEº‹Log
[
SIPP_ERROR_HISTORY_SIZE
];

76 
	`sùpPœtf‹mInô
 ();

78 #i‚de‡
SIPP_PC


79 i‡(
PROCESS_LEON_OS
 =
	`swcWhoAmI
())

81 
	`¥ötf
 ("App Starting on LEON OS\n");

83 #i‚de‡
SIPP_TEST_SYNC_API


84 
	`¥ötf
 ("Please make sure IRQ sources for dynamicallyÑoute between LeonOSánd LeonRTáre set\n");

89 
	`¥ötf
 ("App Starting on LEON RT\n");

93 #i‚de‡
SIPP_TEST_SYNC_API


94 
	`sùpPœtf‹mInôAsync
 ();

97 #ifde‡
SIPP_VCS


98 
	`unôTe°Inô
 ();

99 
	`DrvTimîInô
 ();

100 
	`DrvDdrInôüli£
 (
NULL
);

103 
	`buûdTe°HwMedün
(&
medünPùe
);

105 i‡(
	`sùpPùeGëEº‹Sètus
 (
medünPùe
.
∂
))

107 
u32
 
îrNum
;

108 
	`¥ötf
 ("Pipeline creationÉrror\nError codes:\n");

109 
îrNum
 = 
	`sùpGëEº‹Hi°‹y
 (
sùpEº‹Log
);

110 
îrNum
)

112 
	`¥ötf
 ("%08lx\n", 
sùpEº‹Log
[
îrNum
 - 0x1]);

113 
îrNum
--;

117 #i‚de‡
SIPP_TEST_SYNC_API


119 
	`sùpRegi°îEvítCÆlback
 (
medünPùe
.
∂
,

120 
≠pSùpCÆlback
);

123 
	`c⁄figTe°HwMedün
(&
medünPùe
);

125 
	`ªadTe°HwMedünI≈ut
(&
medünPùe
);

126 #ifde‡
SIPP_USE_PRECALC_SCHEDULE


128 
	`dbgSchedInô
 (
medünPùe
.
∂
);

131 #ifde‡
SIPP_TEST_SYNC_API


132 
	`sùpPro˚ssFøme
(
medünPùe
.
∂
);

134 i‡(
	`sùpPùeGëEº‹Sètus
 (
medünPùe
.
∂
))

136 
u32
 
îrNum
;

137 
	`¥ötf
 ("PipelineÑuntimeÉrror\nError codes:\n");

138 
îrNum
 = 
	`sùpGëEº‹Hi°‹y
 (
sùpEº‹Log
);

139 
îrNum
)

141 
	`¥ötf
 ("%08lx\n", 
sùpEº‹Log
[
îrNum
 - 0x1]);

142 
îrNum
--;

147 
	`sùpPro˚ssFømeNB
(
medünPùe
.
∂
);

149 i‡(
	`sùpPùeGëEº‹Sètus
 (
medünPùe
.
∂
))

151 
u32
 
îrNum
;

152 
	`¥ötf
 ("PipelineÑuntimeÉrror\nError codes:\n");

153 
îrNum
 = 
	`sùpGëEº‹Hi°‹y
 (
sùpEº‹Log
);

154 
îrNum
)

156 
	`¥ötf
 ("%08lx\n", 
sùpEº‹Log
[
îrNum
 - 0x1]);

157 
îrNum
--;

161  
ã°Com∂ëe
 == 0x0 )

167 #ifde‡ 
SIPP_PC


168 
	`sùpGíîicRu¡imeWaôI§ThªadTîm
 ();

171 
	`wrôeTe°HwMedünOuçut
(&
medünPùe
);

172 
	`sùpRdFûeU8
 (
Te°HwMedün_dmaIn0_buf„r
, 
SIPP_HW_MED_CHROMA_BUFFER_SIZE
 , "../../../../../../../resources/Ref_MedianOutput_192x145_8bpp.raw");

173 
	`sùpDbgCom∑ªU8
 (
Te°HwMedün_dmaIn0_buf„r
, 
Te°HwMedün_dmaOut0_buf„r
, 
SIPP_HW_MED_CHROMA_BUFFER_SIZE
);

175 #ifde‡
SIPP_VCS


176 
	`unôTe°FöÆRï‹t
();

180 
	}
}

	@Sipp/SippFw/HwFilters/testHwMedian/leon/pcDumpSchedule.hh

8 
SchedInfo
 
	gsùpDum≥dSched_0
[295] =

308 
	$dbgSchedInô
(
SùpPùñöe
 *
∂
)

310 i‡(
∂
->
löesPîIãr
 != 1)

312 
	`sùpEº‹
 (
∂
->
îr‹Sètus
, 
E_PRECOMP_SCHED
);

316 
∂
->
fûãrs
[ 0]->
nLöes
[0] = 8;

317 
∂
->
fûãrs
[ 1]->
nLöes
[0] = 5;

318 
∂
->
fûãrs
[ 2]->
nLöes
[0] = 1;

319 
∂
->
fûãrs
[ 3]->
nLöes
[0] = 0;

322 
∂
->
fûãrs
[ 2]->
∑ª¡sKS
[ 0] = 0;

323 
∂
->
fûãrs
[ 2]->
∑ª¡sKS
[ 1] = 0;

324 
∂
->
fûãrs
[ 3]->
∑ª¡sKS
[ 0] = 0;

329 
∂
->
fûãrs
[ 0]->
fú°RunRﬁlLöes
 =Öl->fûãrs[ 0]->
fú°RunNumLöes
 = 0;

330 
∂
->
fûãrs
[ 1]->
fú°RunRﬁlLöes
 =Öl->fûãrs[ 1]->
fú°RunNumLöes
 = 0;

331 
∂
->
fûãrs
[ 2]->
fú°RunRﬁlLöes
 =Öl->fûãrs[ 2]->
fú°RunNumLöes
 = 0;

332 
∂
->
fûãrs
[ 3]->
fú°RunRﬁlLöes
 =Öl->fûãrs[ 3]->
fú°RunNumLöes
 = 0;

335 
∂
->
fûãrs
[ 0]->
hPaddög
[ 0] = 0;

336 
∂
->
fûãrs
[ 1]->
hPaddög
[ 0] = 0;

337 
∂
->
fûãrs
[ 2]->
hPaddög
[ 0] = 0;

338 
∂
->
fûãrs
[ 3]->
hPaddög
[ 0] = 0;

341 
∂
->
nIãr
 = 295;

342 
∂
->
schedInfo
 = 
sùpDum≥dSched_0
;

343 
	}
}

	@Sipp/SippFw/HwFilters/testHwMedian/leon/testData.h

1 
	#KERNEL_SIZE
 7

	)

2 
	#THRESHOLD
 0x1FF

	)

3 
	#OUT_SEL
 ((
KERNEL_SIZE
 >> 1Ë* (KERNEL_SIZEË+ (KERNEL_SIZE >> 1))

	)

4 
	#LUMA_ABLEND_EN
 0x1

	)

5 
	#LUMA_SAMPLE_EN
 0x1

	)

7 
	#OFFSET
 (
u8
)(-.2*255)

	)

8 
	#SLOPE
 6

	)

10 
	#SIPP_HW_MED_CHROMA_BUFFER_WIDTH
 192

	)

11 
	#SIPP_HW_MED_CHROMA_BUFFER_HEIGHT
 145

	)

12 
	#SIPP_HW_MED_CHROMA_BUFFER_NUM_PLANES
 3

	)

13 
	#SIPP_HW_MED_CHROMA_BUFFER_SIZE
 (
SIPP_HW_MED_CHROMA_BUFFER_WIDTH
 * 
SIPP_HW_MED_CHROMA_BUFFER_HEIGHT
 * 
SIPP_HW_MED_CHROMA_BUFFER_NUM_PLANES
)

	)

14 
	#SIPP_HW_MED_LUMA_BUFFER_WIDTH
 (
SIPP_HW_MED_CHROMA_BUFFER_WIDTH
 << 
LUMA_SAMPLE_EN
)

	)

15 
	#SIPP_HW_MED_LUMA_BUFFER_HEIGHT
 (
SIPP_HW_MED_CHROMA_BUFFER_HEIGHT
 << 
LUMA_SAMPLE_EN
)

	)

16 
	#SIPP_HW_MED_LUMA_BUFFER_NUM_PLANES
 1

	)

17 
	#SIPP_HW_MED_LUMA_BUFFER_SIZE
 (
SIPP_HW_MED_LUMA_BUFFER_WIDTH
 * 
SIPP_HW_MED_LUMA_BUFFER_HEIGHT
 * 
SIPP_HW_MED_LUMA_BUFFER_NUM_PLANES
)

	)

	@Sipp/SippFw/HwFilters/testHwMedian/leon/testHwMedian.c

13 
	~"ã°HwMedün.h
"

15 
	~<ö˛ude/sùpHwDefs.h
>

16 
	~<¨ch/ma2x5x/ö˛ude/sùpHwDefs_ma2x5x.h
>

20 
UI¡8
 
DDR_DATA
 
	gTe°HwMedün_dmaIn0_buf„r
[
SIPP_HW_MED_CHROMA_BUFFER_WIDTH
* 
SIPP_HW_MED_CHROMA_BUFFER_HEIGHT
* 
SIPP_HW_MED_CHROMA_BUFFER_NUM_PLANES
]
ALIGNED
(8);

21 
UI¡8
 
DDR_DATA
 
	gTe°HwMedün_dmaIn1_buf„r
[
SIPP_HW_MED_LUMA_BUFFER_WIDTH
* 
SIPP_HW_MED_LUMA_BUFFER_HEIGHT
* 
SIPP_HW_MED_LUMA_BUFFER_NUM_PLANES
]
ALIGNED
(8);

22 
UI¡8
 
DDR_DATA
 
	gTe°HwMedün_dmaOut0_buf„r
[
SIPP_HW_MED_CHROMA_BUFFER_WIDTH
* 
SIPP_HW_MED_CHROMA_BUFFER_HEIGHT
* 
SIPP_HW_MED_CHROMA_BUFFER_NUM_PLANES
]
ALIGNED
(8);

25 
	$ªadTe°HwMedünI≈ut
(
Te°HwMedün
 *
pPl
)

27 
	`sùpRdFûeU8
((
UI¡8
*)
Te°HwMedün_dmaIn0_buf„r
,
SIPP_HW_MED_CHROMA_BUFFER_WIDTH
 * 
SIPP_HW_MED_CHROMA_BUFFER_HEIGHT
 * 
SIPP_HW_MED_CHROMA_BUFFER_NUM_PLANES
* (UInt8),"../../../../../../../resources/OCT_192x145_I_median_chroma_8bpp.raw");

28 
	`sùpRdFûeU8
((
UI¡8
*)
Te°HwMedün_dmaIn1_buf„r
,
SIPP_HW_MED_LUMA_BUFFER_WIDTH
 * 
SIPP_HW_MED_LUMA_BUFFER_HEIGHT
 * 
SIPP_HW_MED_LUMA_BUFFER_NUM_PLANES
* (UInt8),"../../../../../../../resources/OCT_384x290_I_median_luma_8bpp.raw");

30 ()(
pPl
);

32 
	}
}

34 
	$wrôeTe°HwMedünOuçut
(
Te°HwMedün
 *
pPl
)

36 
	`sùpWrFûeU8
((
UI¡8
*)
Te°HwMedün_dmaOut0_buf„r
,
SIPP_HW_MED_CHROMA_BUFFER_WIDTH
 * 
SIPP_HW_MED_CHROMA_BUFFER_HEIGHT
 * 
SIPP_HW_MED_CHROMA_BUFFER_NUM_PLANES
* (UInt8),"output.raw");

38 ()(
pPl
);

40 
	}
}

42 
	$buûdTe°HwMedün
(
Te°HwMedün
 *
pPl
)

45 
pPl
->
∂
 = 
	`sùpCª©ePùñöe
(0, 0, 
	`SIPP_MBIN
(
mböImgSùp
));

48 
pPl
->
dmaIn0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x00, 
SIPP_HW_MED_CHROMA_BUFFER_WIDTH
, 
SIPP_HW_MED_CHROMA_BUFFER_HEIGHT
, 
	`N_PL
(
SIPP_HW_MED_CHROMA_BUFFER_NUM_PLANES
), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

49 
pPl
->
dmaIn1
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x00, 
SIPP_HW_MED_LUMA_BUFFER_WIDTH
, 
SIPP_HW_MED_LUMA_BUFFER_HEIGHT
, 
	`N_PL
(
SIPP_HW_MED_LUMA_BUFFER_NUM_PLANES
), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

50 
pPl
->
medünMa2x5x0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x0, 
SIPP_HW_MED_CHROMA_BUFFER_WIDTH
, 
SIPP_HW_MED_CHROMA_BUFFER_HEIGHT
, 
	`N_PL
(
SIPP_HW_MED_CHROMA_BUFFER_NUM_PLANES
), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_MED_ID
, 0);

51 
pPl
->
dmaOut0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x00, 
SIPP_HW_MED_CHROMA_BUFFER_WIDTH
, 
SIPP_HW_MED_CHROMA_BUFFER_HEIGHT
, 
	`N_PL
(
SIPP_HW_MED_CHROMA_BUFFER_NUM_PLANES
), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

54 
	`sùpLökFûãr
(
pPl
->
medünMa2x5x0
,ÖPl->
dmaIn0
, 7,7 );

55 
	`sùpLökFûãr
(
pPl
->
medünMa2x5x0
,ÖPl->
dmaIn1
, 1,0 );

56 
	`sùpLökFûãr
(
pPl
->
dmaOut0
,ÖPl->
medünMa2x5x0
, 1,1 );

58 
	}
}

61 
	$c⁄figTe°HwMedün
(
Te°HwMedün
 *
pPl
)

63 
DmaP¨am
 *
dmaIn0Cfg
 = (DmaP¨am *)
pPl
->
dmaIn0
->
∑øms
;

64 
DmaP¨am
 *
dmaIn1Cfg
 = (DmaP¨am *)
pPl
->
dmaIn1
->
∑øms
;

65 
MedP¨am
 *
medünMa2x5x0Cfg
 = (MedP¨am *)
pPl
->
medünMa2x5x0
->
∑øms
;

66 
DmaP¨am
 *
dmaOut0Cfg
 = (DmaP¨am *)
pPl
->
dmaOut0
->
∑øms
;

71 
medünMa2x5x0Cfg
->
cfg

	`MED_CFG
(
KERNEL_SIZE
,
OUT_SEL
,
THRESHOLD
,
LUMA_ABLEND_EN
,
LUMA_SAMPLE_EN
,0);

72 
medünMa2x5x0Cfg
->
lumaAÕha
=–
OFFSET
 | 
SLOPE
 << 8);

73 
dmaIn0Cfg
->
ddrAddr
 = (
UI¡32
)&
Te°HwMedün_dmaIn0_buf„r
;

74 
dmaIn1Cfg
->
ddrAddr
 = (
UI¡32
)&
Te°HwMedün_dmaIn1_buf„r
;

75 
dmaOut0Cfg
->
ddrAddr
 = (
UI¡32
)&
Te°HwMedün_dmaOut0_buf„r
;

78 
	}
}

	@Sipp/SippFw/HwFilters/testHwMedian/leon/testHwMedian.h

13 #i‚de‡
__TESTHWMEDIAN_H__


14 
	#__TESTHWMEDIAN_H__


	)

16 
	~<sùp.h
>

17 
	~<sùpTe°Comm⁄.h
>

19 
	~"ã°D©a.h
"

23 
UI¡8
 
DDR_DATA
 
Te°HwMedün_dmaIn0_buf„r
[ 
SIPP_HW_MED_CHROMA_BUFFER_WIDTH
 * 
SIPP_HW_MED_CHROMA_BUFFER_HEIGHT
 * 
SIPP_HW_MED_CHROMA_BUFFER_NUM_PLANES
 ]
ALIGNED
(8);

24 
UI¡8
 
DDR_DATA
 
Te°HwMedün_dmaIn1_buf„r
[ 
SIPP_HW_MED_LUMA_BUFFER_WIDTH
 * 
SIPP_HW_MED_LUMA_BUFFER_HEIGHT
 * 
SIPP_HW_MED_LUMA_BUFFER_NUM_PLANES
 ]
ALIGNED
(8);

25 
UI¡8
 
DDR_DATA
 
Te°HwMedün_dmaOut0_buf„r
[ 
SIPP_HW_MED_CHROMA_BUFFER_WIDTH
 * 
SIPP_HW_MED_CHROMA_BUFFER_HEIGHT
 * 
SIPP_HW_MED_CHROMA_BUFFER_NUM_PLANES
 ]
ALIGNED
(8);

29 
	sTe°HwMedün


32 
SùpPùñöe
 *
	m∂
;

35 
SùpFûãr
 *
	mmedünMa2x5x0
;

36 
SùpFûãr
 *
	mdmaIn0
;

37 
SùpFûãr
 *
	mdmaOut0
;

38 
SùpFûãr
 *
	mdmaIn1
;

40 } 
	tTe°HwMedün
;

42 
ªadTe°HwMedünI≈ut
(
Te°HwMedün
 *
pPl
);

43 
wrôeTe°HwMedünOuçut
(
Te°HwMedün
 *
pPl
);

45 
buûdTe°HwMedün
(
Te°HwMedün
 *
pPl
);

46 
c⁄figTe°HwMedün
(
Te°HwMedün
 *
pPl
);

	@Sipp/SippFw/HwFilters/testHwPolyPhaseFIR/leon/app_config.c

13 
	~<ªgi°îsMyrüd.h
>

14 
	~<DrvC¥.h
>

19 #i‚de‡
IPIPE_CLK_CONFIG_SEL


20 
	#ùùeClockC⁄fig
 
ùùeClkC⁄figMV182


	)

22 
	#ùùeClockC⁄fig
 
IPIPE_CLK_CONFIG_SEL


	)

35 
tyAuxClkDividîCfg
 
	gauxClkAŒOn
[] =

37 {0x0FFFFFFF & (~(1<<
CSS_AUX_DDR_CORE
)Ë, 
CLK_SRC_REFCLK0
, 1, 1},

42 
tySocClockC⁄fig
 
	gùùeClkC⁄figMV182
 =

44 .
ªfClk0I≈utKhz
 = 12000,

45 .
	gªfClk1I≈utKhz
 = 0,

46 .
	gèrgëPŒ0FªqKhz
 = 264000,

47 .
	gèrgëPŒ1FªqKhz
 = 0,

48 .
	g˛kSrcPŒ1
 = 
CLK_SRC_REFCLK0
,

49 .
	gma°îClkDivNumî©‹
 = 
DONT_TOUCH_MASTER_DIVIDER
,

50 .
	gma°îClkDivDíomö©‹
 = 
DONT_TOUCH_MASTER_DIVIDER
,

51 .
	gcssDssClockE«bÀMask
 = 0xFFFFFFFFFFFFFFFFULL,

52 .
	gmssClockE«bÀMask
 = 0xFFFFFFFF,

53 .
	gsùpClockE«bÀMask
 = 0xFFFFFFFF,

54 .
	gu∑ClockE«bÀMask
 = 0xFFFFFFFF,

55 .
	gpAuxClkCfg
 = 
auxClkAŒOn
,

67 
	$öôClocksAndMem‹y
()

69 
s32
 
sc
;

71 
sc

	`DrvC¥Inô
();

72 if(
sc
)

73  
sc
;

74 
sc
 = 
	`DrvC¥SëupClocks
(&
ùùeClockC⁄fig
);

75 if(
sc
)

76  
sc
;

78 
	}
}

	@Sipp/SippFw/HwFilters/testHwPolyPhaseFIR/leon/app_config.h

9 #i‚de‡
_APP_CONFIG_H_


10 
	#_APP_CONFIG_H_


	)

16 
öôClocksAndMem‹y
();

	@Sipp/SippFw/HwFilters/testHwPolyPhaseFIR/leon/main.c

9 
	~<sùp.h
>

10 
	~<sùpTe°Comm⁄.h
>

11 
	~"ã°HwPﬁyPha£FIR.h
"

13 #i‡
deföed
(
SIPP_VCS
)

14 
	~<UnôTe°Api.h
>

15 
	~<DrvTimî.h
>

16 
	~<DrvDdr.h
>

24 
	#SIPP_TEST_SYNC_API


26 

	)

31 #ifde‡
SIPP_USE_PRECALC_SCHEDULE


32 
	~"pcDumpScheduÀ.hh
"

35 
Te°HwPﬁyPha£FIR
 
	gã°Pﬁy
;

37 #i‚de‡
SIPP_TEST_SYNC_API


38 vﬁ©ûê
u32
 
	gã°Com∂ëe
 = 0;

42 
u8
 
DDR_DATA
 
	gTe°HwPﬁyPha£FIR_ªf_buf„r
[
SIPP_HW_POLY_FIR_INPUT_BUFFER_SIZE
];

48 #ifde‡
SIPP_USE_PRECALC_SCHEDULE


49 
	~"pcDumpScheduÀ.hh
"

53 #i‚de‡
SIPP_TEST_SYNC_API


54 
	$≠pSùpCÆlback
 ( 
SùpPùñöe
 * 
pPùñöe
,

55 
eSIPP_PIPELINE_EVENT
 
eEvít
,

56 
SIPP_PIPELINE_EVENT_DATA
 * 
±EvítD©a


59 i‡(
eEvít
 =
eSIPP_PIPELINE_FRAME_DONE
)

61 
	`¥ötf
 ("appSippCallback : Frame doneÉventÑeceived : TestÖroceedingÅo checksándÅermination\n");

62 
ã°Com∂ëe
 = 1;

65 
	}
}

70 
	$maö
 (
¨gc
, *
¨gv
[])

72 
	`UNUSED
 (
¨gc
);

73 
	`UNUSED
 (
¨gv
);

74 
u32
 
sùpEº‹Log
[
SIPP_ERROR_HISTORY_SIZE
];

76 
	`sùpPœtf‹mInô
 ();

78 #i‚de‡
SIPP_PC


79 i‡(
PROCESS_LEON_OS
 =
	`swcWhoAmI
())

81 
	`¥ötf
 ("App Starting on LEON OS\n");

83 #i‚de‡
SIPP_TEST_SYNC_API


84 
	`¥ötf
 ("Please make sure IRQ sources for dynamicallyÑoute between LeonOSánd LeonRTáre set\n");

89 
	`¥ötf
 ("App Starting on LEON RT\n");

93 #i‚de‡
SIPP_TEST_SYNC_API


94 
	`sùpPœtf‹mInôAsync
 ();

97 #ifde‡
SIPP_VCS


98 
	`unôTe°Inô
 ();

99 
	`DrvTimîInô
 ();

100 
	`DrvDdrInôüli£
 (
NULL
);

103 
	`buûdTe°HwPﬁyPha£FIR
 (&
ã°Pﬁy
);

105 i‡(
	`sùpPùeGëEº‹Sètus
 (
ã°Pﬁy
.
∂
))

107 
u32
 
îrNum
;

108 
	`¥ötf
 ("Pipeline creationÉrror\nError codes:\n");

109 
îrNum
 = 
	`sùpGëEº‹Hi°‹y
 (
sùpEº‹Log
);

110 
îrNum
)

112 
	`¥ötf
 ("%08lx\n", 
sùpEº‹Log
[
îrNum
 - 0x1]);

113 
îrNum
--;

117 #i‚de‡
SIPP_TEST_SYNC_API


119 
	`sùpRegi°îEvítCÆlback
 (
ã°Pﬁy
.
∂
,

120 
≠pSùpCÆlback
);

123 
	`c⁄figTe°HwPﬁyPha£FIR
 (&
ã°Pﬁy
);

125 
	`ªadTe°HwPﬁyPha£FIRI≈ut
(&
ã°Pﬁy
);

127 #ifde‡
SIPP_USE_PRECALC_SCHEDULE


129 
	`dbgSchedInô
 (
ã°Pﬁy
.
∂
);

132 #ifde‡
SIPP_TEST_SYNC_API


133 
	`sùpPro˚ssFøme
(
ã°Pﬁy
.
∂
);

135 i‡(
	`sùpPùeGëEº‹Sètus
 (
ã°Pﬁy
.
∂
))

137 
u32
 
îrNum
;

138 
	`¥ötf
 ("PipelineÑuntimeÉrror\nError codes:\n");

139 
îrNum
 = 
	`sùpGëEº‹Hi°‹y
 (
sùpEº‹Log
);

140 
îrNum
)

142 
	`¥ötf
 ("%08lx\n", 
sùpEº‹Log
[
îrNum
 - 0x1]);

143 
îrNum
--;

148 
	`sùpPro˚ssFømeNB
(
ã°Pﬁy
.
∂
);

150 i‡(
	`sùpPùeGëEº‹Sètus
 (
ã°Pﬁy
.
∂
))

152 
u32
 
îrNum
;

153 
	`¥ötf
 ("PipelineÑuntimeÉrror\nError codes:\n");

154 
îrNum
 = 
	`sùpGëEº‹Hi°‹y
 (
sùpEº‹Log
);

155 
îrNum
)

157 
	`¥ötf
 ("%08lx\n", 
sùpEº‹Log
[
îrNum
 - 0x1]);

158 
îrNum
--;

162  
ã°Com∂ëe
 == 0x0 )

168 #ifde‡ 
SIPP_PC


169 
	`sùpGíîicRu¡imeWaôI§ThªadTîm
 ();

172 
	`sùpRdFûeU8
 (
Te°HwPﬁyPha£FIR_ªf_buf„r
, 
SIPP_HW_POLY_FIR_OUTPUT_BUFFER_SIZE
, "../../../../../../../resources/Ref_PolyTestOutput_2074x146_P400.rgb");

173 
	`wrôeTe°HwPﬁyPha£FIROuçut
(&
ã°Pﬁy
);

174 
	`sùpDbgCom∑ªU8
 (
Te°HwPﬁyPha£FIR_ªf_buf„r
, 
Te°HwPﬁyPha£FIR_dmaOut0_buf„r
, 
SIPP_HW_POLY_FIR_OUTPUT_BUFFER_SIZE
);

176 #ifde‡
SIPP_VCS


177 
	`unôTe°FöÆRï‹t
();

181 
	}
}

	@Sipp/SippFw/HwFilters/testHwPolyPhaseFIR/leon/testHwPolyPhaseFIR.c

13 
	~"ã°HwPﬁyPha£FIR.h
"

15 
	~<ö˛ude/sùpHwDefs.h
>

16 
	~<¨ch/ma2x5x/ö˛ude/sùpHwDefs_ma2x5x.h
>

20 
UI¡8
 
DDR_DATA
 
	gTe°HwPﬁyPha£FIR_dmaIn0_buf„r
[
SIPP_HW_POLY_FIR_INPUT_BUFFER_WIDTH
* 
SIPP_HW_POLY_FIR_INPUT_BUFFER_HEIGHT
* 
SIPP_HW_POLY_FIR_INPUT_BUFFER_NUM_PLANES
]
ALIGNED
(8);

21 
UI¡8
 
DDR_DATA
 
	gTe°HwPﬁyPha£FIR_dmaOut0_buf„r
[
SIPP_HW_POLY_FIR_OUTPUT_BUFFER_WIDTH
* 
SIPP_HW_POLY_FIR_OUTPUT_BUFFER_HEIGHT
* 
SIPP_HW_POLY_FIR_INPUT_BUFFER_NUM_PLANES
]
ALIGNED
(8);

24 
	$ªadTe°HwPﬁyPha£FIRI≈ut
(
Te°HwPﬁyPha£FIR
 *
pPl
)

26 
	`sùpRdFûeU8
((
UI¡8
*)
Te°HwPﬁyPha£FIR_dmaIn0_buf„r
,
SIPP_HW_POLY_FIR_INPUT_BUFFER_WIDTH
 * 
SIPP_HW_POLY_FIR_INPUT_BUFFER_HEIGHT
 * 
SIPP_HW_POLY_FIR_INPUT_BUFFER_NUM_PLANES
* (UInt8),"../../../../../../../resources/testIMG_1296x972_P400.rgb");

28 ()(
pPl
);

30 
	}
}

32 
	$wrôeTe°HwPﬁyPha£FIROuçut
(
Te°HwPﬁyPha£FIR
 *
pPl
)

34 
	`sùpWrFûeU8
((
UI¡8
*)
Te°HwPﬁyPha£FIR_dmaOut0_buf„r
,
SIPP_HW_POLY_FIR_OUTPUT_BUFFER_WIDTH
 * 
SIPP_HW_POLY_FIR_OUTPUT_BUFFER_HEIGHT
 * 
SIPP_HW_POLY_FIR_INPUT_BUFFER_NUM_PLANES
* (UInt8),"output.raw");

36 ()(
pPl
);

38 
	}
}

40 
	$buûdTe°HwPﬁyPha£FIR
(
Te°HwPﬁyPha£FIR
 *
pPl
)

43 
pPl
->
∂
 = 
	`sùpCª©ePùñöe
(0, 0, 
	`SIPP_MBIN
(
mböImgSùp
));

46 
pPl
->
dmaIn0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x00, 
SIPP_HW_POLY_FIR_INPUT_BUFFER_WIDTH
, 
SIPP_HW_POLY_FIR_INPUT_BUFFER_HEIGHT
, 
	`N_PL
(
SIPP_HW_POLY_FIR_INPUT_BUFFER_NUM_PLANES
), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

47 
pPl
->
pﬁypha£fúMa2x5x0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 
SIPP_RESIZE
, 
SIPP_HW_POLY_FIR_OUTPUT_BUFFER_WIDTH
, 
SIPP_HW_POLY_FIR_OUTPUT_BUFFER_HEIGHT
, 
	`N_PL
(
SIPP_HW_POLY_FIR_INPUT_BUFFER_NUM_PLANES
), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_UPFIRDN_ID
, 0);

48 
pPl
->
dmaOut0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x00, 
SIPP_HW_POLY_FIR_OUTPUT_BUFFER_WIDTH
, 
SIPP_HW_POLY_FIR_OUTPUT_BUFFER_HEIGHT
, 
	`N_PL
(
SIPP_HW_POLY_FIR_INPUT_BUFFER_NUM_PLANES
), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

51 
	`sùpLökFûãr
(
pPl
->
pﬁypha£fúMa2x5x0
,ÖPl->
dmaIn0
, 3,3 );

52 
	`sùpLökFûãr
(
pPl
->
dmaOut0
,ÖPl->
pﬁypha£fúMa2x5x0
, 1,1 );

54 
	}
}

57 
	$c⁄figTe°HwPﬁyPha£FIR
(
Te°HwPﬁyPha£FIR
 *
pPl
)

59 
DmaP¨am
 *
dmaIn0Cfg
 = (DmaP¨am *)
pPl
->
dmaIn0
->
∑øms
;

60 
PﬁyFúP¨am
 *
pﬁypha£fúMa2x5x0Cfg
(PﬁyFúP¨am *)
pPl
->
pﬁypha£fúMa2x5x0
->
∑øms
;

61 
DmaP¨am
 *
dmaOut0Cfg
 = (DmaP¨am *)
pPl
->
dmaOut0
->
∑øms
;

66 
pﬁypha£fúMa2x5x0Cfg
->
˛amp
=
OUTPUT_CLAMP
;

67 
pﬁypha£fúMa2x5x0Cfg
->
h‹zD
=
H_DEN
;

68 
pﬁypha£fúMa2x5x0Cfg
->
h‹zN
=
H_NUM
;

69 
pﬁypha£fúMa2x5x0Cfg
->
vîtD
=
V_DEN
;

70 
pﬁypha£fúMa2x5x0Cfg
->
vîtN
=
V_NUM
;

71 
pﬁypha£fúMa2x5x0Cfg
->
h‹zC€fs
=(
UI¡8
*)
c€fs
;

72 
pﬁypha£fúMa2x5x0Cfg
->
vîtC€fs
=(
UI¡8
*)
c€fs
;

73 
pﬁypha£fúMa2x5x0Cfg
->
∂™eMode
=
POLY_PLANE_ALL
;

74 
dmaIn0Cfg
->
ddrAddr
 = (
UI¡32
)&
Te°HwPﬁyPha£FIR_dmaIn0_buf„r
;

75 
dmaOut0Cfg
->
ddrAddr
 = (
UI¡32
)&
Te°HwPﬁyPha£FIR_dmaOut0_buf„r
;

78 
	}
}

	@Sipp/SippFw/HwFilters/testHwPolyPhaseFIR/leon/testHwPolyPhaseFIR.h

13 #i‚de‡
__TESTHWPOLYPHASEFIR_H__


14 
	#__TESTHWPOLYPHASEFIR_H__


	)

16 
	~<sùp.h
>

17 
	~<sùpTe°Comm⁄.h
>

19 
	~"ã°HwPﬁyPha£FIRSëup.h
"

23 
UI¡8
 
DDR_DATA
 
Te°HwPﬁyPha£FIR_dmaIn0_buf„r
[ 
SIPP_HW_POLY_FIR_INPUT_BUFFER_WIDTH
 * 
SIPP_HW_POLY_FIR_INPUT_BUFFER_HEIGHT
 * 
SIPP_HW_POLY_FIR_INPUT_BUFFER_NUM_PLANES
 ]
ALIGNED
(8);

24 
UI¡8
 
DDR_DATA
 
Te°HwPﬁyPha£FIR_dmaOut0_buf„r
[ 
SIPP_HW_POLY_FIR_OUTPUT_BUFFER_WIDTH
 * 
SIPP_HW_POLY_FIR_OUTPUT_BUFFER_HEIGHT
 * 
SIPP_HW_POLY_FIR_INPUT_BUFFER_NUM_PLANES
 ]
ALIGNED
(8);

28 
	sTe°HwPﬁyPha£FIR


31 
SùpPùñöe
 *
	m∂
;

34 
SùpFûãr
 *
	mdmaIn0
;

35 
SùpFûãr
 *
	mdmaOut0
;

36 
SùpFûãr
 *
	mpﬁypha£fúMa2x5x0
;

38 } 
	tTe°HwPﬁyPha£FIR
;

40 
ªadTe°HwPﬁyPha£FIRI≈ut
(
Te°HwPﬁyPha£FIR
 *
pPl
);

41 
wrôeTe°HwPﬁyPha£FIROuçut
(
Te°HwPﬁyPha£FIR
 *
pPl
);

43 
buûdTe°HwPﬁyPha£FIR
(
Te°HwPﬁyPha£FIR
 *
pPl
);

44 
c⁄figTe°HwPﬁyPha£FIR
(
Te°HwPﬁyPha£FIR
 *
pPl
);

	@Sipp/SippFw/HwFilters/testHwPolyPhaseFIR/leon/testHwPolyPhaseFIRSetup.h

1 #i‚de‡
LEON_TESTHWPOLYPHASEFIRSETUP_H_


2 
	#LEON_TESTHWPOLYPHASEFIRSETUP_H_


	)

4 
	#SIPP_HW_POLY_FIR_INPUT_BUFFER_WIDTH
 1296

	)

5 
	#SIPP_HW_POLY_FIR_INPUT_BUFFER_HEIGHT
 972

	)

6 
	#SIPP_HW_POLY_FIR_INPUT_BUFFER_NUM_PLANES
 1

	)

7 
	#SIPP_HW_POLY_FIR_INPUT_BUFFER_SIZE
 (
SIPP_HW_POLY_FIR_INPUT_BUFFER_WIDTH
 * 
SIPP_HW_POLY_FIR_INPUT_BUFFER_HEIGHT
 * 
SIPP_HW_POLY_FIR_INPUT_BUFFER_NUM_PLANES
)

	)

9 
	#SIPP_HW_POLY_FIR_OUTPUT_BUFFER_WIDTH
 2074

	)

10 
	#SIPP_HW_POLY_FIR_OUTPUT_BUFFER_HEIGHT
 146

	)

11 
	#SIPP_HW_POLY_FIR_OUTPUT_BUFFER_NUM_PLANES
 1

	)

12 
	#SIPP_HW_POLY_FIR_OUTPUT_BUFFER_SIZE
 (
SIPP_HW_POLY_FIR_OUTPUT_BUFFER_WIDTH
 * 
SIPP_HW_POLY_FIR_OUTPUT_BUFFER_HEIGHT
 * 
SIPP_HW_POLY_FIR_OUTPUT_BUFFER_NUM_PLANES
)

	)

15 
	#KERNEL_SIZE
 3

	)

16 
	#OUTPUT_CLAMP
 1

	)

17 
	#H_DEN
 5

	)

18 
	#H_NUM
 8

	)

19 
	#V_DEN
 20

	)

20 
	#V_NUM
 3

	)

22 c⁄° 
UI¡32
 
	gc€fs
[16] = {0xc0404040, 0xc0404040, 0xc0404040, 0xc0404040,

	@Sipp/SippFw/HwFilters/testHwRaw/leon/app_config.c

13 
	~<ªgi°îsMyrüd.h
>

14 
	~<DrvC¥.h
>

19 #i‚de‡
IPIPE_CLK_CONFIG_SEL


20 
	#ùùeClockC⁄fig
 
ùùeClkC⁄figMV182


	)

22 
	#ùùeClockC⁄fig
 
IPIPE_CLK_CONFIG_SEL


	)

35 
tyAuxClkDividîCfg
 
	gauxClkAŒOn
[] =

37 {0x0FFFFFFF & (~(1<<
CSS_AUX_DDR_CORE
)Ë, 
CLK_SRC_REFCLK0
, 1, 1},

42 
tySocClockC⁄fig
 
	gùùeClkC⁄figMV182
 =

44 .
ªfClk0I≈utKhz
 = 12000,

45 .
	gªfClk1I≈utKhz
 = 0,

46 .
	gèrgëPŒ0FªqKhz
 = 264000,

47 .
	gèrgëPŒ1FªqKhz
 = 0,

48 .
	g˛kSrcPŒ1
 = 
CLK_SRC_REFCLK0
,

49 .
	gma°îClkDivNumî©‹
 = 
DONT_TOUCH_MASTER_DIVIDER
,

50 .
	gma°îClkDivDíomö©‹
 = 
DONT_TOUCH_MASTER_DIVIDER
,

51 .
	gcssDssClockE«bÀMask
 = 0xFFFFFFFFFFFFFFFFULL,

52 .
	gmssClockE«bÀMask
 = 0xFFFFFFFF,

53 .
	gsùpClockE«bÀMask
 = 0xFFFFFFFF,

54 .
	gu∑ClockE«bÀMask
 = 0xFFFFFFFF,

55 .
	gpAuxClkCfg
 = 
auxClkAŒOn
,

67 
	$öôClocksAndMem‹y
()

69 
s32
 
sc
;

71 
sc

	`DrvC¥Inô
();

72 if(
sc
)

73  
sc
;

74 
sc
 = 
	`DrvC¥SëupClocks
(&
ùùeClockC⁄fig
);

75 if(
sc
)

76  
sc
;

78 
	}
}

	@Sipp/SippFw/HwFilters/testHwRaw/leon/app_config.h

9 #i‚de‡
_APP_CONFIG_H_


10 
	#_APP_CONFIG_H_


	)

16 
öôClocksAndMem‹y
();

	@Sipp/SippFw/HwFilters/testHwRaw/leon/main.c

13 
	~<sùp.h
>

14 
	~<sùpTe°Comm⁄.h
>

15 
	~"ã°HwRaw.h
"

17 #ifde‡
SIPP_VCS


18 
	~<UnôTe°Api.h
>

19 
	~<DrvTimî.h
>

20 
	~<DrvDdr.h
>

27 
	#SIPP_TEST_SYNC_API


29 

	)

34 
Te°HwRaw
 
	gã°Raw
;

36 #i‚de‡
SIPP_TEST_SYNC_API


37 vﬁ©ûê
u32
 
	gã°Com∂ëe
 = 0;

41 
´_∑tch_°©s
 
DDR_DATA
 
	g´SètsBuff
[
AE_PATCHES_NO
];

42 
AF_∑xñ_°©i°ics
 
DDR_DATA
 
	gafSètsBuff
[
AF_PATCHES_NO
];

43 
u32
 
DDR_DATA
 
	ghi°Luma
 [256];

44 
u32
 
DDR_DATA
 
	ghi°RGB
 [3*128];

49  
u32
 
	gbayîLumaHi°
[256] = {

60  
u32
 
	gbayîRgbHi°
[3][128] =

78  
´_∑tch_°©s
 
	gbayîAeSèts
[
AE_PATCHES_NO
] = {

87 #ifde‡
SIPP_USE_PRECALC_SCHEDULE


88 
	~"pcDumpScheduÀ.hh
"

91 #i‚de‡
SIPP_TEST_SYNC_API


92 
	$≠pSùpCÆlback
 ( 
SùpPùñöe
 * 
pPùñöe
,

93 
eSIPP_PIPELINE_EVENT
 
eEvít
,

94 
SIPP_PIPELINE_EVENT_DATA
 * 
±EvítD©a


97 i‡(
eEvít
 =
eSIPP_PIPELINE_FRAME_DONE
)

99 
	`¥ötf
 ("appSippCallback : Frame doneÉventÑeceived : TestÖroceedingÅo checksándÅermination\n");

100 
ã°Com∂ëe
 = 1;

102 
	}
}

106 
	$maö
 (
¨gc
, *
¨gv
[])

108 
	`UNUSED
 (
¨gc
);

109 
	`UNUSED
 (
¨gv
);

110 
u32
 
sùpEº‹Log
[
SIPP_ERROR_HISTORY_SIZE
];

112 
	`sùpPœtf‹mInô
 ();

114 #i‚de‡
SIPP_PC


115 i‡(
PROCESS_LEON_OS
 =
	`swcWhoAmI
())

117 
	`¥ötf
 ("App Starting on LEON OS\n");

119 #i‚de‡
SIPP_TEST_SYNC_API


120 
	`¥ötf
 ("Please make sure IRQ sources for dynamicallyÑoute between LeonOSánd LeonRTáre set\n");

125 
	`¥ötf
 ("App Starting on LEON RT\n");

129 #i‚de‡
SIPP_TEST_SYNC_API


130 
	`sùpPœtf‹mInôAsync
 ();

133 #ifde‡
SIPP_VCS


134 
	`unôTe°Inô
();

135 
	`DrvTimîInô
();

136 
	`DrvDdrInôüli£
(
NULL
);

139 
	`buûdTe°HwRaw
(&
ã°Raw
);

141 i‡(
	`sùpPùeGëEº‹Sètus
 (
ã°Raw
.
∂
))

143 
u32
 
îrNum
;

144 
	`¥ötf
 ("Pipeline creationÉrror\nError codes:\n");

145 
îrNum
 = 
	`sùpGëEº‹Hi°‹y
 (
sùpEº‹Log
);

146 
îrNum
)

148 
	`¥ötf
 ("%08lx\n", 
sùpEº‹Log
[
îrNum
 - 0x1]);

149 
îrNum
--;

153 #i‚de‡
SIPP_TEST_SYNC_API


155 
	`sùpRegi°îEvítCÆlback
 (
ã°Raw
.
∂
,

156 
≠pSùpCÆlback
);

159 
	`c⁄figTe°HwRaw
(&
ã°Raw
);

161 #ifde‡
SIPP_USE_PRECALC_SCHEDULE


163 
	`dbgSchedInô
 (
ã°Raw
.
∂
);

166 #ifde‡
SIPP_TEST_SYNC_API


167 
	`sùpPro˚ssFøme
 (
ã°Raw
.
∂
);

169 i‡(
	`sùpPùeGëEº‹Sètus
 (
ã°Raw
.
∂
))

171 
u32
 
îrNum
;

172 
	`¥ötf
 ("PipelineÑuntimeÉrror\nError codes:\n");

173 
îrNum
 = 
	`sùpGëEº‹Hi°‹y
 (
sùpEº‹Log
);

174 
îrNum
)

176 
	`¥ötf
 ("%08lx\n", 
sùpEº‹Log
[
îrNum
 - 0x1]);

177 
îrNum
--;

182 
	`sùpPro˚ssFømeNB
 (
ã°Raw
.
∂
);

184 i‡(
	`sùpPùeGëEº‹Sètus
 (
ã°Raw
.
∂
))

186 
u32
 
îrNum
;

187 
	`¥ötf
 ("PipelineÑuntimeÉrror\nError codes:\n");

188 
îrNum
 = 
	`sùpGëEº‹Hi°‹y
 (
sùpEº‹Log
);

189 
îrNum
)

191 
	`¥ötf
 ("%08lx\n", 
sùpEº‹Log
[
îrNum
 - 0x1]);

192 
îrNum
--;

196 
ã°Com∂ëe
 == 0x0)

202 #ifde‡ 
SIPP_PC


203 
	`sùpGíîicRu¡imeWaôI§ThªadTîm
 ();

206 
	`wrôeTe°HwRawOuçut
(&
ã°Raw
);

209 
	`sùpWrFûeU8
 ((
u8
*)
hi°Luma
,(histLuma),"BAYER_lumaHist.stat");

210 
	`sùpWrFûeU8
 ((
u8
*)&
hi°RGB
[0*128],128*(
u32
),"BAYER_R-hist.stat");

211 
	`sùpWrFûeU8
 ((
u8
*)&
hi°RGB
[1*128],128*(
u32
),"BAYER_G-hist.stat");

212 
	`sùpWrFûeU8
 ((
u8
*)&
hi°RGB
[2*128],128*(
u32
),"BAYER_B-hist.stat");

213 
	`sùpWrFûeU8
 ((
u8
*)
´SètsBuff
,(aeStatsBuff) * (u8),"BAYER_Ae.stat");

215 
	`sùpDbgCom∑ªU8
 ((
u8
*)
bayîLumaHi°
, (u8*)
hi°Luma
, (histLuma));

216 
	`sùpDbgCom∑ªU8
 ((
u8
*)
bayîRgbHi°
[0], (u8*)&
hi°RGB
[0*128], 128*(
u32
));

217 
	`sùpDbgCom∑ªU8
 ((
u8
*)
bayîRgbHi°
[1], (u8*)&
hi°RGB
[1*128], 128*(
u32
));

218 
	`sùpDbgCom∑ªU8
 ((
u8
*)
bayîRgbHi°
[2], (u8*)&
hi°RGB
[2*128], 128*(
u32
));

219 
	`sùpDbgCom∑ªU8
 ((
u8
*)
bayîAeSèts
, (u8*)
´SètsBuff
 , (aeStatsBuff));

221 #ifde‡
SIPP_VCS


222 
	`unôTe°FöÆRï‹t
();

226 
	}
}

	@Sipp/SippFw/HwFilters/testHwRaw/leon/testHwRaw.c

13 
	~"ã°HwRaw.h
"

15 
	~<ö˛ude/sùpHwDefs.h
>

16 
	~<¨ch/ma2x5x/ö˛ude/sùpHwDefs_ma2x5x.h
>

20 
UI¡8
 
DDR_DATA
 
	gTe°HwRaw_dmaOut0_buf„r
 [
SIPP_HW_RAW_BUFFER_WIDTH
* 
SIPP_HW_RAW_BUFFER_HEIGHT
* 
SIPP_HW_RAW_BUFFER_NUM_PLANES
]
ALIGNED
(8);

23 
	$ªadTe°HwRawI≈ut
(
Te°HwRaw
 *
pPl
)

26 ()(
pPl
);

28 
	}
}

30 
	$wrôeTe°HwRawOuçut
(
Te°HwRaw
 *
pPl
)

32 
	`sùpWrFûeU8
((
UI¡8
*)
Te°HwRaw_dmaOut0_buf„r
,
SIPP_HW_RAW_BUFFER_WIDTH
 * 
SIPP_HW_RAW_BUFFER_HEIGHT
 * 
SIPP_HW_RAW_BUFFER_NUM_PLANES
* (UInt8),"output.raw");

34 ()(
pPl
);

36 
	}
}

38 
	$buûdTe°HwRaw
(
Te°HwRaw
 *
pPl
)

41 
pPl
->
∂
 = 
	`sùpCª©ePùñöe
(0, 0, 
	`SIPP_MBIN
(
mböImgSùp
));

44 
pPl
->
dmaIn0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x00, 
SIPP_HW_RAW_BUFFER_WIDTH
, 
SIPP_HW_RAW_BUFFER_HEIGHT
, 
	`N_PL
(
SIPP_HW_RAW_BUFFER_NUM_PLANES
), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

45 
pPl
->
øwMa2x5x0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x0, 
SIPP_HW_RAW_BUFFER_WIDTH
, 
SIPP_HW_RAW_BUFFER_HEIGHT
, 
	`N_PL
(
SIPP_HW_RAW_BUFFER_NUM_PLANES
), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_RAW_ID
, 0);

46 
pPl
->
dmaOut0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x00, 
SIPP_HW_RAW_BUFFER_WIDTH
, 
SIPP_HW_RAW_BUFFER_HEIGHT
, 
	`N_PL
(
SIPP_HW_RAW_BUFFER_NUM_PLANES
), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

49 
	`sùpLökFûãr
(
pPl
->
øwMa2x5x0
,ÖPl->
dmaIn0
, 5,5 );

50 
	`sùpLökFûãr
(
pPl
->
dmaOut0
,ÖPl->
øwMa2x5x0
, 1,1 );

52 
	}
}

55 
	$c⁄figTe°HwRaw
(
Te°HwRaw
 *
pPl
)

57 
DmaP¨am
 *
dmaIn0Cfg
 = (DmaP¨am *)
pPl
->
dmaIn0
->
∑øms
;

58 
RawP¨am
 *
øwMa2x5x0Cfg
 = (RawP¨am *)
pPl
->
øwMa2x5x0
->
∑øms
;

59 
DmaP¨am
 *
dmaOut0Cfg
 = (DmaP¨am *)
pPl
->
dmaOut0
->
∑øms
;

64 
øwMa2x5x0Cfg
->
grgbPœt
= 0;

65 
øwMa2x5x0Cfg
->
grgbDeˇy
=0;

66 
øwMa2x5x0Cfg
->
badPixCfg
=0;

67 
øwMa2x5x0Cfg
->
cfg

	`RAW_CFG
(
BAYER
, 
BAYER_PATTERN
,0,0,
AE_PATCH_STATS_EN
,
AE_RGB_HIST_STATS_EN
,(
INPUT_DATA_WIDTH
-1),0,0,
AF_PATCH_STATS_EN
,0,
AE_Y_HIST_STATS_EN
,0);

68 
øwMa2x5x0Cfg
->
gaöS©
[0]=((
DIGI_SAT
<<16Ë| 
DIGI_GAIN
 );

69 
øwMa2x5x0Cfg
->
gaöS©
[1]((
DIGI_SAT
<<16Ë| 
DIGI_GAIN
 );

70 
øwMa2x5x0Cfg
->
gaöS©
[2]((
DIGI_SAT
<<16Ë| 
DIGI_GAIN
 );

71 
øwMa2x5x0Cfg
->
gaöS©
[3]((
DIGI_SAT
<<16Ë| 
DIGI_GAIN
 );

72 
øwMa2x5x0Cfg
->
°©sBa£
=(
UI¡32
*)
´SètsBuff
;

73 
øwMa2x5x0Cfg
->
°©sPœ√s
=(
PATCH_PLANE_0
 << 0Ë| ( 
PATCH_PLANE_1
 << 4Ë| (
Y_HIST_PLANE
 << 16Ë| ((
ACTIVE_PATCH_PLANES
 - 1)*(2<<19));

74 
øwMa2x5x0Cfg
->
°©sP©chCfg
=((
AE_HPATCHES_NO
 - 1Ë| (
AE_VPATCHES_NO
 - 1Ë<< 8 | (
AE_PATCH_WIDTH
 - 1Ë<< 16 | (
AE_PATCH_HEIGHT
- 1) << 24);

75 
øwMa2x5x0Cfg
->
°©sP©chSèπ
=(
AE_Y_START
 << 16Ë| 
AE_X_START
;

76 
øwMa2x5x0Cfg
->
°©sP©chSkù
=((
AE_Y_SKIP
 - 1Ë<< 16Ë| (
AE_X_SKIP
 - 1);

77 
øwMa2x5x0Cfg
->
°©sThªsh
=(0<<16) | 255;

78 
øwMa2x5x0Cfg
->
afF1c€fs
[0]=44;

79 
øwMa2x5x0Cfg
->
afF1c€fs
[1]= 288;

80 
øwMa2x5x0Cfg
->
afF1c€fs
[2]= -200;

81 
øwMa2x5x0Cfg
->
afF1c€fs
[3]= 16;

82 
øwMa2x5x0Cfg
->
afF1c€fs
[4]= 28;

83 
øwMa2x5x0Cfg
->
afF1c€fs
[5]= 16;

84 
øwMa2x5x0Cfg
->
afF1c€fs
[6]= 368;

85 
øwMa2x5x0Cfg
->
afF1c€fs
[7]= -212;

86 
øwMa2x5x0Cfg
->
afF1c€fs
[8]= 536;

87 
øwMa2x5x0Cfg
->
afF1c€fs
[9]= -1076;

88 
øwMa2x5x0Cfg
->
afF1c€fs
[10]= 536;

89 
øwMa2x5x0Cfg
->
afF2c€fs
[0]=44;

90 
øwMa2x5x0Cfg
->
afF2c€fs
[1]= -288;

91 
øwMa2x5x0Cfg
->
afF2c€fs
[2]= -200;

92 
øwMa2x5x0Cfg
->
afF2c€fs
[3]= 104;

93 
øwMa2x5x0Cfg
->
afF2c€fs
[4]= 204;

94 
øwMa2x5x0Cfg
->
afF2c€fs
[5]= 104;

95 
øwMa2x5x0Cfg
->
afF2c€fs
[6]= -368;

96 
øwMa2x5x0Cfg
->
afF2c€fs
[7]= -212;

97 
øwMa2x5x0Cfg
->
afF2c€fs
[8]= 76;

98 
øwMa2x5x0Cfg
->
afF2c€fs
[9]= -152;

99 
øwMa2x5x0Cfg
->
afF2c€fs
[10]= 76;

100 
øwMa2x5x0Cfg
->
afMöThªsh
=0;

101 
øwMa2x5x0Cfg
->
afSubåa˘
=32;

102 
øwMa2x5x0Cfg
->
afP©chCfg
=((
AF_HPATCHES_NO
 - 1Ë| ((
AF_VPATCHES_NO
 - 1Ë<< 8 )| ((
AF_PATCH_WIDTH
 - 1Ë<< 16)| ((
AF_PATCH_HEIGHT
- 1) << 24));

103 
øwMa2x5x0Cfg
->
afP©chSèπ
=((
AF_X_START
Ë|(
AF_Y_START
 << 16));

104 
øwMa2x5x0Cfg
->
afSètsBa£
=(
UI¡32
*)
afSètsBuff
;

105 
øwMa2x5x0Cfg
->
hi°LumaBa£
=
hi°Luma
;

106 
øwMa2x5x0Cfg
->
hi°RgbBa£
=
hi°RGB
;

107 
dmaIn0Cfg
->
ddrAddr
 = (
UI¡32
)&
SùpHwRaw_dmaIn0_buf„r
;

108 
dmaOut0Cfg
->
ddrAddr
 = (
UI¡32
)&
Te°HwRaw_dmaOut0_buf„r
;

111 
	}
}

	@Sipp/SippFw/HwFilters/testHwRaw/leon/testHwRaw.h

13 #i‚de‡
__TESTHWRAW_H__


14 
	#__TESTHWRAW_H__


	)

16 
	~<sùp.h
>

17 
	~<sùpTe°Comm⁄.h
>

19 
	~"ã°HwRawSëup.h
"

23 
UI¡8
 
DDR_DATA
 
Te°HwRaw_dmaOut0_buf„r
[ 
SIPP_HW_RAW_BUFFER_WIDTH
 * 
SIPP_HW_RAW_BUFFER_HEIGHT
 * 
SIPP_HW_RAW_BUFFER_NUM_PLANES
 ]
ALIGNED
(8);

27 
	sTe°HwRaw


30 
SùpPùñöe
 *
	m∂
;

33 
SùpFûãr
 *
	møwMa2x5x0
;

34 
SùpFûãr
 *
	mdmaIn0
;

35 
SùpFûãr
 *
	mdmaOut0
;

37 } 
	tTe°HwRaw
;

39 
ªadTe°HwRawI≈ut
(
Te°HwRaw
 *
pPl
);

40 
wrôeTe°HwRawOuçut
(
Te°HwRaw
 *
pPl
);

42 
buûdTe°HwRaw
(
Te°HwRaw
 *
pPl
);

43 
c⁄figTe°HwRaw
(
Te°HwRaw
 *
pPl
);

	@Sipp/SippFw/HwFilters/testHwRaw/leon/testHwRawSetup.h

1 #i‚de‡
LEON_TESTHWRAWSETUP_H_


2 
	#LEON_TESTHWRAWSETUP_H_


	)

4 
	#SIPP_HW_RAW_BUFFER_WIDTH
 64

	)

5 
	#SIPP_HW_RAW_BUFFER_HEIGHT
 16

	)

6 
	#SIPP_HW_RAW_BUFFER_NUM_PLANES
 1

	)

7 
	#SIPP_HW_RAW_BUFFER_SIZE
 (
SIPP_HW_RAW_BUFFER_WIDTH
 * 
SIPP_HW_RAW_BUFFER_HEIGHT
 * 
SIPP_HW_RAW_BUFFER_NUM_PLANES
)

	)

11 
	#AE_HPATCHES_NO
 3

	)

12 
	#AE_VPATCHES_NO
 2

	)

13 
	#AE_PATCH_WIDTH
 4

	)

14 
	#AE_PATCH_HEIGHT
 4

	)

15 
	#AE_X_START
 6

	)

16 
	#AE_Y_START
 2

	)

17 
	#AE_X_OFFSET
 10

	)

18 
	#AE_Y_OFFSET
 2

	)

19 
	#AE_X_SKIP
 (
AE_PATCH_WIDTH
 + 
AE_X_OFFSET
)

	)

20 
	#AE_Y_SKIP
 (
AE_PATCH_HEIGHT
 + 
AE_Y_OFFSET
)

	)

21 
	#AE_PATCHES_NO
 (
AE_VPATCHES_NO
 * 
AE_HPATCHES_NO
)

	)

23 
	#AF_HPATCHES_NO
 4

	)

24 
	#AF_VPATCHES_NO
 3

	)

25 
	#AF_PATCH_WIDTH
 6

	)

26 
	#AF_PATCH_HEIGHT
 4

	)

27 
	#AF_X_START
 8

	)

28 
	#AF_Y_START
 2

	)

29 
	#AF_PATCHES_NO
 (
AF_VPATCHES_NO
 * 
AF_HPATCHES_NO
)

	)

32 
	#HIST_PLANE_0
 0

	)

33 
	#HIST_PLANE_1
 0

	)

34 
	#PATCH_PLANE_0
 0

	)

35 
	#PATCH_PLANE_1
 0

	)

37 
	#Y_HIST_PLANE
 0

	)

38 
	#ACTIVE_PATCH_PLANES
 0

	)

41 
	#BAYER_PATTERN
 
GRBG


	)

44 
	#AE_PATCH_STATS_EN
 1

	)

45 
	#AF_PATCH_STATS_EN
 1

	)

46 
	#AE_Y_HIST_STATS_EN
 1

	)

47 
	#AE_RGB_HIST_STATS_EN
 1

	)

49 
	#INPUT_DATA_WIDTH
 8

	)

50 
	#OUTPUT_DATA_WIDTH
 8

	)

52 
	#DIGI_SAT
 1023

	)

53 
	#DIGI_GAIN
 0x0421

54 

	)

55 
´_∑tch_°©s
 
DDR_DATA
 
´SètsBuff
[
AE_PATCHES_NO
];

56 
AF_∑xñ_°©i°ics
 
DDR_DATA
 
afSètsBuff
[
AF_PATCHES_NO
];

57 
u32
 
DDR_DATA
 
hi°Luma
 [256];

58 
u32
 
DDR_DATA
 
hi°RGB
 [3*128];

63 c⁄° 
UI¡8
 
	gSùpHwRaw_dmaIn0_buf„r
[
SIPP_HW_RAW_BUFFER_WIDTH
 * 
SIPP_HW_RAW_BUFFER_HEIGHT
 * 
SIPP_HW_RAW_BUFFER_NUM_PLANES
] =

	@Sipp/SippFw/HwFilters/testHwSharpen/leon/app_config.c

13 
	~<ªgi°îsMyrüd.h
>

14 
	~<DrvC¥.h
>

19 #i‚de‡
IPIPE_CLK_CONFIG_SEL


20 
	#ùùeClockC⁄fig
 
ùùeClkC⁄figMV182


	)

22 
	#ùùeClockC⁄fig
 
IPIPE_CLK_CONFIG_SEL


	)

35 
tyAuxClkDividîCfg
 
	gauxClkAŒOn
[] =

37 {0x0FFFFFFF & (~(1<<
CSS_AUX_DDR_CORE
)Ë, 
CLK_SRC_REFCLK0
, 1, 1},

42 
tySocClockC⁄fig
 
	gùùeClkC⁄figMV182
 =

44 .
ªfClk0I≈utKhz
 = 12000,

45 .
	gªfClk1I≈utKhz
 = 0,

46 .
	gèrgëPŒ0FªqKhz
 = 264000,

47 .
	gèrgëPŒ1FªqKhz
 = 0,

48 .
	g˛kSrcPŒ1
 = 
CLK_SRC_REFCLK0
,

49 .
	gma°îClkDivNumî©‹
 = 
DONT_TOUCH_MASTER_DIVIDER
,

50 .
	gma°îClkDivDíomö©‹
 = 
DONT_TOUCH_MASTER_DIVIDER
,

51 .
	gcssDssClockE«bÀMask
 = 0xFFFFFFFFFFFFFFFFULL,

52 .
	gmssClockE«bÀMask
 = 0xFFFFFFFF,

53 .
	gsùpClockE«bÀMask
 = 0xFFFFFFFF,

54 .
	gu∑ClockE«bÀMask
 = 0xFFFFFFFF,

55 .
	gpAuxClkCfg
 = 
auxClkAŒOn
,

67 
	$öôClocksAndMem‹y
()

69 
	`DrvC¥Inô
();

70 
	`DrvC¥SëupClocks
(&
ùùeClockC⁄fig
);

73 
	}
}

	@Sipp/SippFw/HwFilters/testHwSharpen/leon/app_config.h

9 #i‚de‡
_APP_CONFIG_H_


10 
	#_APP_CONFIG_H_


	)

16 
öôClocksAndMem‹y
();

	@Sipp/SippFw/HwFilters/testHwSharpen/leon/main.c

13 
	~<sùp.h
>

14 
	~<sùpTe°Comm⁄.h
>

16 #i‡
deföed
(
SIPP_VCS
)

17 
	~<UnôTe°Api.h
>

18 
	~<DrvTimî.h
>

19 
	~<DrvDdr.h
>

22 
	~"ã°HwSh¨≥n.h
"

23 
	~"ã°Ma¸os.h
"

26 
	#SIPP_TEST_SYNC_API


28 

	)

36 
Te°HwSh¨≥n
 
	gã°Sh¨≥nPùe
;

41 #i‚de‡
SIPP_TEST_SYNC_API


42 vﬁ©ûê
u32
 
	gã°Com∂ëe
 = 0;

53 #ifde‡
SIPP_USE_PRECALC_SCHEDULE


54 
	~"pcDumpScheduÀ.hh
"

60 #i‚de‡
SIPP_TEST_SYNC_API


61 
	$≠pSùpCÆlback
 ( 
SùpPùñöe
 * 
pPùñöe
,

62 
eSIPP_PIPELINE_EVENT
 
eEvít
,

63 
SIPP_PIPELINE_EVENT_DATA
 * 
±EvítD©a


66 i‡(
eEvít
 =
eSIPP_PIPELINE_FRAME_DONE
)

68 
	`¥ötf
 ("appSippCallback : Frame doneÉventÑeceived : TestÖroceedingÅo checksándÅermination\n");

69 
ã°Com∂ëe
 = 1;

72 
	}
}

76 
	$maö
 (
¨gc
, *
¨gv
[])

78 
	`UNUSED
 (
¨gc
);

79 
	`UNUSED
 (
¨gv
);

80 
u32
 
sùpEº‹Log
[
SIPP_ERROR_HISTORY_SIZE
];

82 
	`sùpPœtf‹mInô
 ();

84 #i‚de‡
SIPP_PC


85 i‡(
PROCESS_LEON_OS
 =
	`swcWhoAmI
())

87 
	`¥ötf
 ("App Starting on LEON OS\n");

89 #i‚de‡
SIPP_TEST_SYNC_API


90 
	`¥ötf
 ("Please make sure IRQ sources for dynamicallyÑoute between LeonOSánd LeonRTáre set\n");

95 
	`¥ötf
 ("App Starting on LEON RT\n");

99 #i‚de‡
SIPP_TEST_SYNC_API


100 
	`sùpPœtf‹mInôAsync
 ();

103 #ifde‡
SIPP_VCS


104 
	`unôTe°Inô
 ();

105 
	`DrvTimîInô
 ();

106 
	`DrvDdrInôüli£
 (
NULL
);

109 
	`buûdTe°HwSh¨≥n
(&
ã°Sh¨≥nPùe
);

111 i‡(
	`sùpPùeGëEº‹Sètus
 (
ã°Sh¨≥nPùe
.
∂
))

113 
u32
 
îrNum
;

114 
	`¥ötf
 ("Pipeline creationÉrror\nError codes:\n");

115 
îrNum
 = 
	`sùpGëEº‹Hi°‹y
 (
sùpEº‹Log
);

116 
îrNum
)

118 
	`¥ötf
 ("%08lx\n", 
sùpEº‹Log
[
îrNum
 - 0x1]);

119 
îrNum
--;

123 #i‚de‡
SIPP_TEST_SYNC_API


125 
	`sùpRegi°îEvítCÆlback
 (
ã°Sh¨≥nPùe
.
∂
,

126 
≠pSùpCÆlback
);

129 
	`c⁄figTe°HwSh¨≥n
(&
ã°Sh¨≥nPùe
);

131 
	`ªadTe°HwSh¨≥nI≈ut
(&
ã°Sh¨≥nPùe
);

133 #ifde‡
SIPP_USE_PRECALC_SCHEDULE


135 
	`dbgSchedInô
(
ã°Sh¨≥nPùe
.
∂
);

138 #ifde‡
SIPP_TEST_SYNC_API


139 
	`sùpPro˚ssFøme
(
ã°Sh¨≥nPùe
.
∂
);

141 i‡(
	`sùpPùeGëEº‹Sètus
 (
ã°Sh¨≥nPùe
.
∂
))

143 
u32
 
îrNum
;

144 
	`¥ötf
 ("PipelineÑuntimeÉrror\nError codes:\n");

145 
îrNum
 = 
	`sùpGëEº‹Hi°‹y
 (
sùpEº‹Log
);

146 
îrNum
)

148 
	`¥ötf
 ("%08lx\n", 
sùpEº‹Log
[
îrNum
 - 0x1]);

149 
îrNum
--;

154 
	`sùpPro˚ssFømeNB
(
ã°Sh¨≥nPùe
.
∂
);

156 i‡(
	`sùpPùeGëEº‹Sètus
 (
ã°Sh¨≥nPùe
.
∂
))

158 
u32
 
îrNum
;

159 
	`¥ötf
 ("PipelineÑuntimeÉrror\nError codes:\n");

160 
îrNum
 = 
	`sùpGëEº‹Hi°‹y
 (
sùpEº‹Log
);

161 
îrNum
)

163 
	`¥ötf
 ("%08lx\n", 
sùpEº‹Log
[
îrNum
 - 0x1]);

164 
îrNum
--;

168  
ã°Com∂ëe
 == 0x0 )

174 #ifde‡ 
SIPP_PC


175 
	`sùpGíîicRu¡imeWaôI§ThªadTîm
 ();

179 
	`wrôeTe°HwSh¨≥nOuçut
(&
ã°Sh¨≥nPùe
);

181 
	`sùpRdFûeU8
 (
Te°HwSh¨≥n_dmaIn0_buf„r
, 
SIPP_HW_SHARPEN_BUFFER_SIZE
, "../../../../../../../resources/Ref_sharpenOutput_pepper512x512.y");

182 
	`sùpDbgCom∑ªU8
 (
Te°HwSh¨≥n_dmaIn0_buf„r
, 
Te°HwSh¨≥n_dmaOut0_buf„r
, 
SIPP_HW_SHARPEN_BUFFER_SIZE
);

184 #ifde‡
SIPP_VCS


185 
	`unôTe°FöÆRï‹t
();

189 
	}
}

	@Sipp/SippFw/HwFilters/testHwSharpen/leon/testHwSharpen.c

13 
	~"ã°HwSh¨≥n.h
"

15 
	~<ö˛ude/sùpHwDefs.h
>

16 
	~<¨ch/ma2x5x/ö˛ude/sùpHwDefs_ma2x5x.h
>

20 
UI¡8
 
DDR_DATA
 
	gTe°HwSh¨≥n_dmaIn0_buf„r
[
SIPP_HW_SHARPEN_BUFFER_WIDTH
* 
SIPP_HW_SHARPEN_BUFFER_HEIGHT
* 1 ]
ALIGNED
(8);

21 
UI¡8
 
DDR_DATA
 
	gTe°HwSh¨≥n_dmaOut0_buf„r
[
SIPP_HW_SHARPEN_BUFFER_WIDTH
* 
SIPP_HW_SHARPEN_BUFFER_HEIGHT
* 1 ]
ALIGNED
(8);

24 
	$ªadTe°HwSh¨≥nI≈ut
(
Te°HwSh¨≥n
 *
pPl
)

26 
	`sùpRdFûeU8
((
UI¡8
*)
Te°HwSh¨≥n_dmaIn0_buf„r
,
SIPP_HW_SHARPEN_BUFFER_WIDTH
 * 
SIPP_HW_SHARPEN_BUFFER_HEIGHT
 * 1 * (UInt8),"../../../../../../../resources/lumaSharpenInput.y");

28 ()(
pPl
);

30 
	}
}

32 
	$wrôeTe°HwSh¨≥nOuçut
(
Te°HwSh¨≥n
 *
pPl
)

34 
	`sùpWrFûeU8
((
UI¡8
*)
Te°HwSh¨≥n_dmaOut0_buf„r
,
SIPP_HW_SHARPEN_BUFFER_WIDTH
 * 
SIPP_HW_SHARPEN_BUFFER_HEIGHT
 * 1 * (UInt8),"output.raw");

36 ()(
pPl
);

38 
	}
}

40 
	$buûdTe°HwSh¨≥n
(
Te°HwSh¨≥n
 *
pPl
)

43 
pPl
->
∂
 = 
	`sùpCª©ePùñöe
(0, 0, 
	`SIPP_MBIN
(
mböImgSùp
));

46 
pPl
->
dmaIn0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x00, 
SIPP_HW_SHARPEN_BUFFER_WIDTH
, 
SIPP_HW_SHARPEN_BUFFER_HEIGHT
, 
	`N_PL
(1), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

47 
pPl
->
sh¨≥nMa2x5x
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x0, 
SIPP_HW_SHARPEN_BUFFER_WIDTH
, 
SIPP_HW_SHARPEN_BUFFER_HEIGHT
, 
	`N_PL
(1), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_SHARPEN_ID
, 0);

48 
pPl
->
dmaOut0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x00, 
SIPP_HW_SHARPEN_BUFFER_WIDTH
, 
SIPP_HW_SHARPEN_BUFFER_HEIGHT
, 
	`N_PL
(1), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

51 
	`sùpLökFûãr
(
pPl
->
sh¨≥nMa2x5x
,ÖPl->
dmaIn0
, 7,7 );

52 
	`sùpLökFûãr
(
pPl
->
dmaOut0
,ÖPl->
sh¨≥nMa2x5x
, 1,1 );

54 
	}
}

57 
	$c⁄figTe°HwSh¨≥n
(
Te°HwSh¨≥n
 *
pPl
)

59 
DmaP¨am
 *
dmaIn0Cfg
 = (DmaP¨am *)
pPl
->
dmaIn0
->
∑øms
;

60 
UsmP¨am
 *
sh¨≥nMa2x5xCfg
 = (UsmP¨am *)
pPl
->
sh¨≥nMa2x5x
->
∑øms
;

61 
DmaP¨am
 *
dmaOut0Cfg
 = (DmaP¨am *)
pPl
->
dmaOut0
->
∑øms
;

66 
sh¨≥nMa2x5xCfg
->
cfg

	`SHARPEN_CFG
–
THR
, 
KERNEL_SIZE
,
OUTPUT_CLAMP
 ,
SHARPENING
,
OUTPUT_DELTAS
);

67 
sh¨≥nMa2x5xCfg
->
°ªngth
=
	`SHARPEN_STRENGTH_CFG
(
STRENGTH_LIGHTEN
, 
STRENGTH_DARKEN
 );

68 
sh¨≥nMa2x5xCfg
->
˛ù

CLIPPING_ALPHA
;

69 
sh¨≥nMa2x5xCfg
->
limô

	`SHARPEN_LIMITS_CFG
(
UNDERSHOOT
,
OVERSHOOT
);

70 
sh¨≥nMa2x5xCfg
->
rgnSt›01
=
	`SHARPEN_RANGESTOP01_CFG
(
RANGE_STOP0
, 
RANGE_STOP1
);

71 
sh¨≥nMa2x5xCfg
->
rgnSt›23

	`SHARPEN_RANGESTOP01_CFG
(
RANGE_STOP2
, 
RANGE_STOP3
);

72 
sh¨≥nMa2x5xCfg
->
c€f01
=
	`SHARPEN_COEFS01_CFG
(0x2400,0x2e00);

73 
sh¨≥nMa2x5xCfg
->
c€f23
=
	`SHARPEN_COEFS23_CFG
(0x3380, 0x3500);

74 
dmaIn0Cfg
->
ddrAddr
 = (
UI¡32
)&
Te°HwSh¨≥n_dmaIn0_buf„r
;

75 
dmaOut0Cfg
->
ddrAddr
 = (
UI¡32
)&
Te°HwSh¨≥n_dmaOut0_buf„r
;

78 
	}
}

	@Sipp/SippFw/HwFilters/testHwSharpen/leon/testHwSharpen.h

13 #i‚de‡
__TESTHWSHARPEN_H__


14 
	#__TESTHWSHARPEN_H__


	)

16 
	~<sùp.h
>

17 
	~<sùpTe°Comm⁄.h
>

19 
	~"ã°Ma¸os.h
"

23 
UI¡8
 
DDR_DATA
 
Te°HwSh¨≥n_dmaIn0_buf„r
[ 
SIPP_HW_SHARPEN_BUFFER_WIDTH
 * 
SIPP_HW_SHARPEN_BUFFER_HEIGHT
 * 1 ]
ALIGNED
(8);

24 
UI¡8
 
DDR_DATA
 
Te°HwSh¨≥n_dmaOut0_buf„r
[ 
SIPP_HW_SHARPEN_BUFFER_WIDTH
 * 
SIPP_HW_SHARPEN_BUFFER_HEIGHT
 * 1 ]
ALIGNED
(8);

28 
	sTe°HwSh¨≥n


31 
SùpPùñöe
 *
	m∂
;

34 
SùpFûãr
 *
	mdmaIn0
;

35 
SùpFûãr
 *
	mdmaOut0
;

36 
SùpFûãr
 *
	msh¨≥nMa2x5x
;

38 } 
	tTe°HwSh¨≥n
;

40 
ªadTe°HwSh¨≥nI≈ut
(
Te°HwSh¨≥n
 *
pPl
);

41 
wrôeTe°HwSh¨≥nOuçut
(
Te°HwSh¨≥n
 *
pPl
);

43 
buûdTe°HwSh¨≥n
(
Te°HwSh¨≥n
 *
pPl
);

44 
c⁄figTe°HwSh¨≥n
(
Te°HwSh¨≥n
 *
pPl
);

	@Sipp/SippFw/HwFilters/testHwSharpen/leon/testMacros.h

5 
	#SIPP_TEST_SYNC_API


7 

	)

8 
	#SIPP_HW_SHARPEN_BUFFER_WIDTH
 512

	)

9 
	#SIPP_HW_SHARPEN_BUFFER_HEIGHT
 512

	)

10 
	#SIPP_HW_SHARPEN_BUFFER_NUM_PLANES
 1

	)

11 
	#SIPP_HW_SHARPEN_BUFFER_SIZE
 (
SIPP_HW_SHARPEN_BUFFER_WIDTH
 * 
SIPP_HW_SHARPEN_BUFFER_HEIGHT
 * 
SIPP_HW_SHARPEN_BUFFER_NUM_PLANES
)

	)

13 
	#SHARPENING
 0

	)

14 
	#BLURRING
 1

	)

16 
	#KERNEL_SIZE
 7

	)

17 
	#OUTPUT_CLAMP
 0

	)

18 
	#MODE
 
SHARPENING


	)

19 
	#OUTPUT_DELTAS
 0

	)

20 
	#THR
 0x211e

	)

22 
	#STRENGTH_DARKEN
 0x3999

23 
	#STRENGTH_LIGHTEN
 0x3d33

24 

	)

25 
	#CLIPPING_ALPHA
 0x3c00

26 

	)

27 
	#LIMIT
 8

	)

28 
	#OVERSHOOT
 0x3c51

29 
	#UNDERSHOOT
 0x3b69

30 

	)

31 
	#RANGE_STOP0
 0x1c04

32 
	#RANGE_STOP1
 0x2d05

33 
	#RANGE_STOP2
 0x3ae6

34 
	#RANGE_STOP3
 0x3bd7

	@Sipp/SippFw/HwFilters/testHwSigmaDenoise/leon/app_config.c

13 
	~<ªgi°îsMyrüd.h
>

14 
	~<DrvC¥.h
>

19 #i‚de‡
IPIPE_CLK_CONFIG_SEL


20 
	#ùùeClockC⁄fig
 
ùùeClkC⁄figMV182


	)

22 
	#ùùeClockC⁄fig
 
IPIPE_CLK_CONFIG_SEL


	)

35 
tyAuxClkDividîCfg
 
	gauxClkAŒOn
[] =

37 {0x0FFFFFFF & (~(1<<
CSS_AUX_DDR_CORE
)Ë, 
CLK_SRC_REFCLK0
, 1, 1},

42 
tySocClockC⁄fig
 
	gùùeClkC⁄figMV182
 =

44 .
ªfClk0I≈utKhz
 = 12000,

45 .
	gªfClk1I≈utKhz
 = 0,

46 .
	gèrgëPŒ0FªqKhz
 = 264000,

47 .
	gèrgëPŒ1FªqKhz
 = 0,

48 .
	g˛kSrcPŒ1
 = 
CLK_SRC_REFCLK0
,

49 .
	gma°îClkDivNumî©‹
 = 
DONT_TOUCH_MASTER_DIVIDER
,

50 .
	gma°îClkDivDíomö©‹
 = 
DONT_TOUCH_MASTER_DIVIDER
,

51 .
	gcssDssClockE«bÀMask
 = 0xFFFFFFFFFFFFFFFFULL,

52 .
	gmssClockE«bÀMask
 = 0xFFFFFFFF,

53 .
	gsùpClockE«bÀMask
 = 0xFFFFFFFF,

54 .
	gu∑ClockE«bÀMask
 = 0xFFFFFFFF,

55 .
	gpAuxClkCfg
 = 
auxClkAŒOn
,

67 
	$öôClocksAndMem‹y
()

69 
	`DrvC¥Inô
();

70 
	`DrvC¥SëupClocks
(&
ùùeClockC⁄fig
);

73 
	}
}

	@Sipp/SippFw/HwFilters/testHwSigmaDenoise/leon/app_config.h

9 #i‚de‡
_APP_CONFIG_H_


10 
	#_APP_CONFIG_H_


	)

16 
öôClocksAndMem‹y
();

	@Sipp/SippFw/HwFilters/testHwSigmaDenoise/leon/main.c

13 
	~<sùp.h
>

14 
	~<sùpTe°Comm⁄.h
>

16 #i‡
deföed
(
SIPP_VCS
)

17 
	~<UnôTe°Api.h
>

18 
	~<DrvTimî.h
>

19 
	~<DrvDdr.h
>

22 
	~"ã°D©a.h
"

23 
	~"ã°HwSigmaDíoi£.h
"

27 
	#SIPP_TEST_SYNC_API


29 

	)

34 
Te°HwSigmaDíoi£
 
	gsigmaDíoi£Pùe
;

41 #i‚de‡
SIPP_TEST_SYNC_API


42 vﬁ©ûê
u32
 
	gã°Com∂ëe
 = 0;

53 #ifde‡
SIPP_USE_PRECALC_SCHEDULE


54 
	~"pcDumpScheduÀ.hh
"

60 #i‚de‡
SIPP_TEST_SYNC_API


61 
	$≠pSùpCÆlback
 ( 
SùpPùñöe
 * 
pPùñöe
,

62 
eSIPP_PIPELINE_EVENT
 
eEvít
,

63 
SIPP_PIPELINE_EVENT_DATA
 * 
±EvítD©a


66 i‡(
eEvít
 =
eSIPP_PIPELINE_FRAME_DONE
)

68 
	`¥ötf
 ("appSippCallback : Frame doneÉventÑeceived : TestÖroceedingÅo checksándÅermination\n");

69 
ã°Com∂ëe
 = 1;

72 
	}
}

76 
	$maö
 (
¨gc
, *
¨gv
[])

78 
	`UNUSED
 (
¨gc
);

79 
	`UNUSED
 (
¨gv
);

80 
u32
 
sùpEº‹Log
[
SIPP_ERROR_HISTORY_SIZE
];

82 
	`sùpPœtf‹mInô
 ();

84 #i‚de‡
SIPP_PC


85 i‡(
PROCESS_LEON_OS
 =
	`swcWhoAmI
())

87 
	`¥ötf
 ("App Starting on LEON OS\n");

89 #i‚de‡
SIPP_TEST_SYNC_API


90 
	`¥ötf
 ("Please make sure IRQ sources for dynamicallyÑoute between LeonOSánd LeonRTáre set\n");

95 
	`¥ötf
 ("App Starting on LEON RT\n");

99 #i‚de‡
SIPP_TEST_SYNC_API


100 
	`sùpPœtf‹mInôAsync
 ();

103 #ifde‡
SIPP_VCS


104 
	`unôTe°Inô
 ();

105 
	`DrvTimîInô
 ();

106 
	`DrvDdrInôüli£
 (
NULL
);

109 
	`buûdTe°HwSigmaDíoi£
(&
sigmaDíoi£Pùe
);

111 i‡(
	`sùpPùeGëEº‹Sètus
 (
sigmaDíoi£Pùe
.
∂
))

113 
u32
 
îrNum
;

114 
	`¥ötf
 ("Pipeline creationÉrror\nError codes:\n");

115 
îrNum
 = 
	`sùpGëEº‹Hi°‹y
 (
sùpEº‹Log
);

116 
îrNum
)

118 
	`¥ötf
 ("%08lx\n", 
sùpEº‹Log
[
îrNum
 - 0x1]);

119 
îrNum
--;

123 #i‚de‡
SIPP_TEST_SYNC_API


125 
	`sùpRegi°îEvítCÆlback
 (
sigmaDíoi£Pùe
.
∂
,

126 
≠pSùpCÆlback
);

129 
	`c⁄figTe°HwSigmaDíoi£
(&
sigmaDíoi£Pùe
);

130 
	`ªadTe°HwSigmaDíoi£I≈ut
(&
sigmaDíoi£Pùe
);

131 #ifde‡
SIPP_USE_PRECALC_SCHEDULE


133 
	`dbgSchedInô
(
pPùe
);

136 #ifde‡
SIPP_TEST_SYNC_API


137 
	`sùpPro˚ssFøme
(
sigmaDíoi£Pùe
.
∂
);

139 i‡(
	`sùpPùeGëEº‹Sètus
 (
sigmaDíoi£Pùe
.
∂
))

141 
u32
 
îrNum
;

142 
	`¥ötf
 ("PipelineÑuntimeÉrror\nError codes:\n");

143 
îrNum
 = 
	`sùpGëEº‹Hi°‹y
 (
sùpEº‹Log
);

144 
îrNum
)

146 
	`¥ötf
 ("%08lx\n", 
sùpEº‹Log
[
îrNum
 - 0x1]);

147 
îrNum
--;

152 
	`sùpPro˚ssFømeNB
(
sigmaDíoi£Pùe
.
∂
);

154 i‡(
	`sùpPùeGëEº‹Sètus
 (
sigmaDíoi£Pùe
.
∂
))

156 
u32
 
îrNum
;

157 
	`¥ötf
 ("PipelineÑuntimeÉrror\nError codes:\n");

158 
îrNum
 = 
	`sùpGëEº‹Hi°‹y
 (
sùpEº‹Log
);

159 
îrNum
)

161 
	`¥ötf
 ("%08lx\n", 
sùpEº‹Log
[
îrNum
 - 0x1]);

162 
îrNum
--;

166  
ã°Com∂ëe
 == 0x0 )

172 #ifde‡ 
SIPP_PC


173 
	`sùpGíîicRu¡imeWaôI§ThªadTîm
 ();

176 
	`wrôeTe°HwSigmaDíoi£Ouçut
(&
sigmaDíoi£Pùe
);

178 
	`sùpRdFûeU8
((
u8
*)
Te°HwSigmaDíoi£_dmaIn0_buf„r
, 
SIPP_HW_SIGMA_DNS_BUFFER_SIZE
, "../../../../../../../resources/Ref_sigmaOutput_1600x1300_10bpp.raw");

179 
	`sùpDbgCom∑ªU8
((
u8
*)
Te°HwSigmaDíoi£_dmaIn0_buf„r
, (u8*)
Te°HwSigmaDíoi£_dmaOut0_buf„r
, 
SIPP_HW_SIGMA_DNS_BUFFER_SIZE
);

181 #ifde‡
SIPP_VCS


182 
	`unôTe°FöÆRï‹t
();

186 
	}
}

	@Sipp/SippFw/HwFilters/testHwSigmaDenoise/leon/testData.h

1 
	#FORMAT
 
BAYER


	)

2 
	#PASSTHROUGH_BIT
 
ENABLED


	)

3 
	#DATA_WIDTH
 10

	)

4 
	#TEST_IMAGE_DW
 10

	)

5 
	#NOISE_FLOOR
 (
uöt16_t
)(.05‡* ((1 << 
DATA_WIDTH
Ë- 1))

	)

7 
	#GR_THR_MUL_0
 (
uöt8_t
)(.025‡* 255)

	)

8 
	#GR_THR_MUL_1
 (
uöt8_t
)(.050‡* 255)

	)

9 
	#R_THR_MUL_0
 (
uöt8_t
)(.025‡* 255)

	)

10 
	#R_THR_MUL_1
 (
uöt8_t
)(.050‡* 255)

	)

11 
	#B_THR_MUL_0
 (
uöt8_t
)(.025‡* 255)

	)

12 
	#B_THR_MUL_1
 (
uöt8_t
)(.050‡* 255)

	)

13 
	#GB_THR_MUL_0
 (
uöt8_t
)(.025‡* 255)

	)

14 
	#GB_THR_MUL_1
 (
uöt8_t
)(.050‡* 255)

	)

16 
	#BLACK0
 (0x1 << ((
DATA_WIDTH
 - 
TEST_IMAGE_DW
Ë* (DATA_WIDTH >TEST_IMAGE_DW)))

	)

17 
	#BLACK1
 (0x2 << ((
DATA_WIDTH
 - 
TEST_IMAGE_DW
Ë* (DATA_WIDTH >TEST_IMAGE_DW)))

	)

18 
	#BLACK2
 (0x3 << ((
DATA_WIDTH
 - 
TEST_IMAGE_DW
Ë* (DATA_WIDTH >TEST_IMAGE_DW)))

	)

19 
	#BLACK3
 (0x4 << ((
DATA_WIDTH
 - 
TEST_IMAGE_DW
Ë* (DATA_WIDTH >TEST_IMAGE_DW)))

	)

21 
	#SIPP_HW_SIGMA_DNS_BUFFER_WIDTH
 1600

	)

22 
	#SIPP_HW_SIGMA_DNS_BUFFER_HEIGHT
 1300

	)

23 
	#SIPP_HW_SIGMA_DNS_BUFFER_NUM_PLANES
 1

	)

24 
	#SIPP_HW_SIGMA_DNS_BUFFER_SIZE
 (
SIPP_HW_SIGMA_DNS_BUFFER_WIDTH
* 
SIPP_HW_SIGMA_DNS_BUFFER_HEIGHT
* 
SIPP_HW_SIGMA_DNS_BUFFER_NUM_PLANES
 *2)

	)

	@Sipp/SippFw/HwFilters/testHwSigmaDenoise/leon/testHwSigmaDenoise.c

13 
	~"ã°HwSigmaDíoi£.h
"

15 
	~<ö˛ude/sùpHwDefs.h
>

16 
	~<¨ch/ma2x5x/ö˛ude/sùpHwDefs_ma2x5x.h
>

20 
UI¡16
 
DDR_DATA
 
	gTe°HwSigmaDíoi£_dmaIn0_buf„r
[
SIPP_HW_SIGMA_DNS_BUFFER_WIDTH
* 
SIPP_HW_SIGMA_DNS_BUFFER_HEIGHT
* 
SIPP_HW_SIGMA_DNS_BUFFER_NUM_PLANES
]
ALIGNED
(8);

21 
UI¡16
 
DDR_DATA
 
	gTe°HwSigmaDíoi£_dmaOut0_buf„r
[
SIPP_HW_SIGMA_DNS_BUFFER_WIDTH
* 
SIPP_HW_SIGMA_DNS_BUFFER_HEIGHT
* 
SIPP_HW_SIGMA_DNS_BUFFER_NUM_PLANES
]
ALIGNED
(8);

24 
	$ªadTe°HwSigmaDíoi£I≈ut
(
Te°HwSigmaDíoi£
 *
pPl
)

26 
	`sùpRdFûeU8
((
UI¡8
*)
Te°HwSigmaDíoi£_dmaIn0_buf„r
,
SIPP_HW_SIGMA_DNS_BUFFER_WIDTH
 * 
SIPP_HW_SIGMA_DNS_BUFFER_HEIGHT
 * 
SIPP_HW_SIGMA_DNS_BUFFER_NUM_PLANES
* (
UI¡16
),"../../../../../../../resources/OCT_1600x1300_I_Sigma_10bpp.raw");

28 ()(
pPl
);

30 
	}
}

32 
	$wrôeTe°HwSigmaDíoi£Ouçut
(
Te°HwSigmaDíoi£
 *
pPl
)

34 
	`sùpWrFûeU8
((
UI¡8
*)
Te°HwSigmaDíoi£_dmaOut0_buf„r
,
SIPP_HW_SIGMA_DNS_BUFFER_WIDTH
 * 
SIPP_HW_SIGMA_DNS_BUFFER_HEIGHT
 * 
SIPP_HW_SIGMA_DNS_BUFFER_NUM_PLANES
* (
UI¡16
),"output.raw");

36 ()(
pPl
);

38 
	}
}

40 
	$buûdTe°HwSigmaDíoi£
(
Te°HwSigmaDíoi£
 *
pPl
)

43 
pPl
->
∂
 = 
	`sùpCª©ePùñöe
(0, 0, 
	`SIPP_MBIN
(
mböImgSùp
));

46 
pPl
->
dmaIn0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x00, 
SIPP_HW_SIGMA_DNS_BUFFER_WIDTH
, 
SIPP_HW_SIGMA_DNS_BUFFER_HEIGHT
, 
	`N_PL
(
SIPP_HW_SIGMA_DNS_BUFFER_NUM_PLANES
), 
	`SZ
(
UI¡16
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

47 
pPl
->
sigmaDnsMa2x5x0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x0, 
SIPP_HW_SIGMA_DNS_BUFFER_WIDTH
, 
SIPP_HW_SIGMA_DNS_BUFFER_HEIGHT
, 
	`N_PL
(
SIPP_HW_SIGMA_DNS_BUFFER_NUM_PLANES
), 
	`SZ
(
UI¡16
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_SIGMA_ID
, 0);

48 
pPl
->
dmaOut0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x00, 
SIPP_HW_SIGMA_DNS_BUFFER_WIDTH
, 
SIPP_HW_SIGMA_DNS_BUFFER_HEIGHT
, 
	`N_PL
(
SIPP_HW_SIGMA_DNS_BUFFER_NUM_PLANES
), 
	`SZ
(
UI¡16
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

51 
	`sùpLökFûãr
(
pPl
->
sigmaDnsMa2x5x0
,ÖPl->
dmaIn0
, 5,5 );

52 
	`sùpLökFûãr
(
pPl
->
dmaOut0
,ÖPl->
sigmaDnsMa2x5x0
, 1,1 );

54 
	}
}

57 
	$c⁄figTe°HwSigmaDíoi£
(
Te°HwSigmaDíoi£
 *
pPl
)

59 
DmaP¨am
 *
dmaIn0Cfg
 = (DmaP¨am *)
pPl
->
dmaIn0
->
∑øms
;

60 
SigmaP¨am
 *
sigmaDnsMa2x5x0Cfg
 = (SigmaP¨am *)
pPl
->
sigmaDnsMa2x5x0
->
∑øms
;

61 
DmaP¨am
 *
dmaOut0Cfg
 = (DmaP¨am *)
pPl
->
dmaOut0
->
∑øms
;

66 
sigmaDnsMa2x5x0Cfg
->
thªsh
[0]=(
GR_THR_MUL_0
 << 0 | 
GR_THR_MUL_1
 << 8 | 
R_THR_MUL_0
 << 16 | 
R_THR_MUL_1
 << 24);

67 
sigmaDnsMa2x5x0Cfg
->
thªsh
[1]=(
B_THR_MUL_0
 << 0 | 
B_THR_MUL_1
 << 8 | 
GB_THR_MUL_0
 << 16 | 
GB_THR_MUL_1
 << 24);

68 
sigmaDnsMa2x5x0Cfg
->
cfg

	`SIGMA_DNS_CFG
(
NOISE_FLOOR
 , (
DATA_WIDTH
 -1), 
PASSTHROUGH_BIT
,
FORMAT
);

69 
sigmaDnsMa2x5x0Cfg
->
bayîP©ã∫
=
GRBG
;

70 
sigmaDnsMa2x5x0Cfg
->
blcGR
=
BLACK0
;

71 
sigmaDnsMa2x5x0Cfg
->
blcR
=
BLACK1
;

72 
sigmaDnsMa2x5x0Cfg
->
blcB
=
BLACK2
;

73 
sigmaDnsMa2x5x0Cfg
->
blcGB
=
BLACK3
;

74 
dmaIn0Cfg
->
ddrAddr
 = (
UI¡32
)&
Te°HwSigmaDíoi£_dmaIn0_buf„r
;

75 
dmaOut0Cfg
->
ddrAddr
 = (
UI¡32
)&
Te°HwSigmaDíoi£_dmaOut0_buf„r
;

78 
	}
}

	@Sipp/SippFw/HwFilters/testHwSigmaDenoise/leon/testHwSigmaDenoise.h

13 #i‚de‡
__TESTHWSIGMADENOISE_H__


14 
	#__TESTHWSIGMADENOISE_H__


	)

16 
	~<sùp.h
>

17 
	~<sùpTe°Comm⁄.h
>

19 
	~"ã°D©a.h
"

23 
UI¡16
 
DDR_DATA
 
Te°HwSigmaDíoi£_dmaIn0_buf„r
[ 
SIPP_HW_SIGMA_DNS_BUFFER_WIDTH
 * 
SIPP_HW_SIGMA_DNS_BUFFER_HEIGHT
 * 
SIPP_HW_SIGMA_DNS_BUFFER_NUM_PLANES
 ]
ALIGNED
(8);

24 
UI¡16
 
DDR_DATA
 
Te°HwSigmaDíoi£_dmaOut0_buf„r
[ 
SIPP_HW_SIGMA_DNS_BUFFER_WIDTH
 * 
SIPP_HW_SIGMA_DNS_BUFFER_HEIGHT
 * 
SIPP_HW_SIGMA_DNS_BUFFER_NUM_PLANES
 ]
ALIGNED
(8);

28 
	sTe°HwSigmaDíoi£


31 
SùpPùñöe
 *
	m∂
;

34 
SùpFûãr
 *
	msigmaDnsMa2x5x0
;

35 
SùpFûãr
 *
	mdmaIn0
;

36 
SùpFûãr
 *
	mdmaOut0
;

38 } 
	tTe°HwSigmaDíoi£
;

40 
ªadTe°HwSigmaDíoi£I≈ut
(
Te°HwSigmaDíoi£
 *
pPl
);

41 
wrôeTe°HwSigmaDíoi£Ouçut
(
Te°HwSigmaDíoi£
 *
pPl
);

43 
buûdTe°HwSigmaDíoi£
(
Te°HwSigmaDíoi£
 *
pPl
);

44 
c⁄figTe°HwSigmaDíoi£
(
Te°HwSigmaDíoi£
 *
pPl
);

	@Sipp/SippFw/ISPPipe/leon/ISPParamsPP.c

11 
	~<°döt.h
>

12 
	~"ISPPùe.h
"

19 
uöt16_t
 
	gi•cLscMesh
[
ISPC_LSC_GAIN_MAP_W
 * 
ISPC_LSC_GAIN_MAP_H
] 
ALIGNED
(8) =

	@Sipp/SippFw/ISPPipe/leon/ISPParamsStill.c

11 
	~<°döt.h
>

12 
	~"ISPPùe.h
"

18 
uöt8_t
 
	gi•cLow∑ssKî√l
[9] = {

24 
uöt8_t
 
	gi•cLumaDnsLut
[32] = {

29 
uöt8_t
 
	gi•cYDnsDi°Lut
[256] 
__©åibuã__
((
Æig√d
(8))) = {

64 
uöt8_t
 
	gi•cGammaLut0_32
[9] = {

68 
uöt8_t
 
	gi•cGammaLut32_255
[9] = {

73 
	gi•cLtmCurves
[16*8] = {

93 
uöt8_t
 
	gdogC€ffs11
[6] = {

96 
uöt8_t
 
	gdogC€ffs15
[8] = {

101 
	gi•cCCM
[9] = {

107 
	gi•cCCMOff
[3] = {

111 
uöt16_t
 
	glut3d
[16*16*16*4] = {

371 
	gi•cGammaTabÀ
[8192] = {

1398 
uöt16_t
 
	ggammaLutFp16
[512*4] 
ALIGNED
(8) = {

1914 
	gi•cCSC
[9] = {

1920 
	gi•cCSCOff
[3] = {

1924 
u16
 
	g…m_curves
[16*8];

1925 
u32
 
	ggaussLut
[4];

1926 
u32
 
	ggammaLut
[5];

1928 
u16
 
	gcsc_lut_c€ffs
[9];

1929 
u16
 
	gcsc_lut_off£ts
[3];

1931 
u16
 
	gccm_lut_c€ffs
[9];

1932 
u16
 
	gccm_lut_off£ts
[3];

1945 
	$dog…mC⁄vîtCurves
()

1947 
curve
, 
poöt
, 
ªgoff
;

1948 
ªgoff
 = 0;

1949 
curve
 = 0; curve < 8; curve++) {

1950 
poöt
 = 0;Öoint < 16;Öoint += 2) {

1951 
off
 = 
curve
 + 
poöt
 * 8;

1952 
…m_curves
[
off
 ] = 
i•cLtmCurves
[off] * 0xfff;

1953 
…m_curves
[
off
+8] = 
i•cLtmCurves
[off+8] * 0xfff;

1954 
ªgoff
 += 4;

1957 
	}
}

1959 
	$dog…mCª©eLuts
 ()

1961 
u32
 
idx
;

1963 
idx
 = 0; idx < 4; idx++)

1965 
gaussLut
[
idx
] = 
i•cLumaDnsLut
[(idx<< 3) + 0] |

1966 (
i•cLumaDnsLut
[(
idx
<< 3) + 1] << 4 ) |

1967 (
i•cLumaDnsLut
[(
idx
<< 3) + 2] << 8 ) |

1968 (
i•cLumaDnsLut
[(
idx
<< 3) + 3] << 12) |

1969 (
i•cLumaDnsLut
[(
idx
<< 3) + 4] << 16) |

1970 (
i•cLumaDnsLut
[(
idx
<< 3) + 5] << 20) |

1971 (
i•cLumaDnsLut
[(
idx
<< 3) + 6] << 24) |

1972 (
i•cLumaDnsLut
[(
idx
<< 3) + 7] << 28);

1975 
gammaLut
[0] = 
i•cGammaLut0_32
[0] | ispcGammaLut0_32[1] << 8 |

1976 
i•cGammaLut0_32
[2] << 16 | ispcGammaLut0_32[3] << 24;

1977 
gammaLut
[1] = 
i•cGammaLut0_32
[4] | ispcGammaLut0_32[5] << 8 |

1978 
i•cGammaLut0_32
[6] << 16 | ispcGammaLut0_32[7] << 24;

1979 
gammaLut
[2] = 
i•cGammaLut0_32
[8] | 
i•cGammaLut32_255
[0] << 8 |

1980 
i•cGammaLut32_255
[1] << 16 | ispcGammaLut32_255[2] << 24;

1981 
gammaLut
[3] = 
i•cGammaLut32_255
[3] | ispcGammaLut32_255[4] << 8 |

1982 
i•cGammaLut32_255
[5] << 16 | ispcGammaLut32_255[6] << 24;

1983 
gammaLut
[4] = 
i•cGammaLut32_255
[7] | ispcGammaLut32_255[8] << 8;

1984 
	}
}

1986 
	#CCVT
(
f
Ë(()((fË* 1024 + .5Ë& 0xfff)

	)

1987 
	#OCVT
(
f
Ë(()((fË* 4096 + .5Ë& 0x1ffff)

	)

1989 
	$lutCª©eLuts
 ()

1991 
u32
 
idx
;

1993 
idx
 = 0; idx < 9; idx++)

1995 
csc_lut_c€ffs
[
idx
] = 
	`CCVT
(
i•cCSC
[idx]);

1997 
idx
 = 0; idx < 3; idx++)

1999 
csc_lut_off£ts
[
idx
] = 
	`OCVT
(
i•cCSCOff
[idx]);

2001 
	}
}

2004 
	#CCMC
(
f
) (()((f * 0x400) + .5) & 0xffff)

2005 
	#CCMO
(
f
) (()((f * 0x1000) + .5) & 0x1fff)

2006 

	)

2007 
	$ccombCª©eC€ffs
 ()

2009 
u32
 
idx
;

2011 
idx
 = 0; idx < 9; idx++)

2013 
ccm_lut_c€ffs
[
idx
] = 
	`CCMC
(
i•cCCM
[idx]);

2015 
idx
 = 0; idx < 3; idx++)

2017 
ccm_lut_off£ts
[
idx
] = 
	`CCMO
(
i•cCCMOff
[idx]);

2019 
	}
}

2021 
	$ISPPùeCª©eP¨ams
 ()

2023 
	`ccombCª©eC€ffs
();

2024 
	`lutCª©eLuts
 ();

2025 
	`dog…mC⁄vîtCurves
 ();

2026 
	`dog…mCª©eLuts
 ();

2027 
	}
}

	@Sipp/SippFw/ISPPipe/leon/ISPPipe.c

13 
	~"ISPPùe.h
"

15 
	~<ö˛ude/sùpHwDefs.h
>

16 
	~<¨ch/ma2x5x/ö˛ude/sùpHwDefs_ma2x5x.h
>

20 
UI¡16
 
DDR_DATA
 
	gISPPùe_dmaIn0_buf„r
 [
SIPP_ISP_PIPE_BUFFER_WIDTH
* 
SIPP_ISP_PIPE_BUFFER_HEIGHT
* 
SIPP_ISP_PIPE_BUFFER_INPUT_NUM_PLANES
]
ALIGNED
(8);

21 
UI¡8
 
DDR_DATA
 
	gISPPùe_dmaOut0_buf„r
 [
SIPP_ISP_PIPE_BUFFER_WIDTH
* 
SIPP_ISP_PIPE_BUFFER_HEIGHT
* 3 ]
ALIGNED
(8);

24 
	$ªadISPPùeI≈ut
(
ISPPùe
 *
pPl
)

26 
	`sùpRdFûeU8
((
UI¡8
*)
ISPPùe_dmaIn0_buf„r
,
SIPP_ISP_PIPE_BUFFER_WIDTH
 * 
SIPP_ISP_PIPE_BUFFER_HEIGHT
 * 
SIPP_ISP_PIPE_BUFFER_INPUT_NUM_PLANES
* (
UI¡16
),"../../../../../../resources/lowLight_512x128.raw");

28 ()(
pPl
);

30 
	}
}

32 
	$wrôeISPPùeOuçut
(
ISPPùe
 *
pPl
)

34 
	`sùpWrFûeU8
((
UI¡8
*)
ISPPùe_dmaOut0_buf„r
,
SIPP_ISP_PIPE_BUFFER_WIDTH
 * 
SIPP_ISP_PIPE_BUFFER_HEIGHT
 * 3 * (UInt8),"out_p444.yuv");

36 ()(
pPl
);

38 
	}
}

40 
	$buûdISPPùe
(
ISPPùe
 *
pPl
)

43 
pPl
->
∂
 = 
	`sùpCª©ePùñöe
(0, 7, 
	`SIPP_MBIN
(
mböImgSùp
));

46 
pPl
->
dmaIn0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x00, 
SIPP_ISP_PIPE_BUFFER_WIDTH
, 
SIPP_ISP_PIPE_BUFFER_HEIGHT
, 
	`N_PL
(
SIPP_ISP_PIPE_BUFFER_INPUT_NUM_PLANES
), 
	`SZ
(
UI¡16
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

47 
pPl
->
sigmaDnsMa2x5x0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x0, 
SIPP_ISP_PIPE_BUFFER_WIDTH
, 
SIPP_ISP_PIPE_BUFFER_HEIGHT
, 
	`N_PL
(
SIPP_ISP_PIPE_BUFFER_INPUT_NUM_PLANES
), 
	`SZ
(
UI¡16
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_SIGMA_ID
, 0);

48 
pPl
->
lscMa2x5x0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x0, 
SIPP_ISP_PIPE_BUFFER_WIDTH
, 
SIPP_ISP_PIPE_BUFFER_HEIGHT
, 
	`N_PL
(
SIPP_ISP_PIPE_BUFFER_INPUT_NUM_PLANES
), 
	`SZ
(
UI¡16
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_LSC_ID
, 0);

49 
pPl
->
øwMa2x5x0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x0, 
SIPP_ISP_PIPE_BUFFER_WIDTH
, 
SIPP_ISP_PIPE_BUFFER_HEIGHT
, 
	`N_PL
(
SIPP_ISP_PIPE_BUFFER_INPUT_NUM_PLANES
), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_RAW_ID
, 0);

50 
pPl
->
debayîMa2x5x0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x0, 
SIPP_ISP_PIPE_BUFFER_WIDTH
, 
SIPP_ISP_PIPE_BUFFER_HEIGHT
, 
	`N_PL
(3), 
	`SZ
(
UI¡16
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DBYR_ID
, 0);

51 
	`sùpFûãrAddOBuf
(
pPl
->
debayîMa2x5x0
, 
SIPP_ISP_PIPE_BUFFER_INPUT_NUM_PLANES
, (
Â16
));

52 
pPl
->
dogLtmMa2x5x0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x0, 
SIPP_ISP_PIPE_BUFFER_WIDTH
, 
SIPP_ISP_PIPE_BUFFER_HEIGHT
, 
	`N_PL
(
SIPP_ISP_PIPE_BUFFER_INPUT_NUM_PLANES
), 
	`SZ
(
Â16
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DOGL_ID
, 0);

53 
pPl
->
ydnsMa2x5x0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x0, 
SIPP_ISP_PIPE_BUFFER_WIDTH
, 
SIPP_ISP_PIPE_BUFFER_HEIGHT
, 
	`N_PL
(
SIPP_ISP_PIPE_BUFFER_INPUT_NUM_PLANES
), 
	`SZ
(
Â16
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_LUMA_ID
, 0);

54 
pPl
->
sh¨≥nMa2x5x0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x0, 
SIPP_ISP_PIPE_BUFFER_WIDTH
, 
SIPP_ISP_PIPE_BUFFER_HEIGHT
, 
	`N_PL
(
SIPP_ISP_PIPE_BUFFER_INPUT_NUM_PLANES
), 
	`SZ
(
Â16
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_SHARPEN_ID
, 0);

55 
pPl
->
chromaGíMa2x5x0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 
SIPP_RESIZE
, 
ISPC_CHROMA_PIPE_WIDTH
, 
ISPC_CHROMA_PIPE_HEIGHT
, 
	`N_PL
(3), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_CGEN_ID
, 0);

56 
pPl
->
medünMa2x5x0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x0, 
ISPC_CHROMA_PIPE_WIDTH
, 
ISPC_CHROMA_PIPE_HEIGHT
, 
	`N_PL
(3), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_MED_ID
, 0);

57 
pPl
->
chromadnsMa2x5x0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x0, 
ISPC_CHROMA_PIPE_WIDTH
, 
ISPC_CHROMA_PIPE_HEIGHT
, 
	`N_PL
(3), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_CHROMA_ID
, 0);

58 
pPl
->
cﬁ‹combMa2x5x0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x0, 
SIPP_ISP_PIPE_BUFFER_WIDTH
, 
SIPP_ISP_PIPE_BUFFER_HEIGHT
, 
	`N_PL
(3), 
	`SZ
(
UI¡16
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_CC_ID
, 0);

59 
pPl
->
lutMa2x5x0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x0, 
SIPP_ISP_PIPE_BUFFER_WIDTH
, 
SIPP_ISP_PIPE_BUFFER_HEIGHT
, 
	`N_PL
(3), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_LUT_ID
, 0);

60 
pPl
->
dmaOut0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x00, 
SIPP_ISP_PIPE_BUFFER_WIDTH
, 
SIPP_ISP_PIPE_BUFFER_HEIGHT
, 
	`N_PL
(3), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

63 
	`sùpLökFûãr
(
pPl
->
sigmaDnsMa2x5x0
,ÖPl->
dmaIn0
, 5,5 );

64 
	`sùpLökFûãr
(
pPl
->
lscMa2x5x0
,ÖPl->
sigmaDnsMa2x5x0
, 1,1 );

65 
	`sùpLökFûãr
(
pPl
->
øwMa2x5x0
,ÖPl->
lscMa2x5x0
, 5,5 );

66 
	`sùpLökFûãr
(
pPl
->
debayîMa2x5x0
,ÖPl->
øwMa2x5x0
, 11,11 );

67 
	`sùpLökFûãr
(
pPl
->
dogLtmMa2x5x0
,ÖPl->
debayîMa2x5x0
, 15,15 );

68 
	`sùpLökFûãrSëOBuf
(
pPl
->
dogLtmMa2x5x0
,ÖPl->
debayîMa2x5x0
, 1);

69 
	`sùpLökFûãr
(
pPl
->
ydnsMa2x5x0
,ÖPl->
dogLtmMa2x5x0
, 11,11 );

70 
	`sùpLökFûãr
(
pPl
->
sh¨≥nMa2x5x0
,ÖPl->
ydnsMa2x5x0
, 7,7 );

71 
	`sùpLökFûãr
(
pPl
->
chromaGíMa2x5x0
,ÖPl->
debayîMa2x5x0
, 6,6 );

72 
	`sùpLökFûãr
(
pPl
->
medünMa2x5x0
,ÖPl->
chromaGíMa2x5x0
, 7,7 );

73 
	`sùpLökFûãr
(
pPl
->
medünMa2x5x0
,ÖPl->
debayîMa2x5x0
, 1,0 );

74 
	`sùpLökFûãrSëOBuf
(
pPl
->
medünMa2x5x0
,ÖPl->
debayîMa2x5x0
, 1);

75 
	`sùpLökFûãr
(
pPl
->
chromadnsMa2x5x0
,ÖPl->
medünMa2x5x0
, 3,3 );

76 
	`sùpLökFûãr
(
pPl
->
cﬁ‹combMa2x5x0
,ÖPl->
sh¨≥nMa2x5x0
, 1,1 );

77 
	`sùpLökFûãr
(
pPl
->
cﬁ‹combMa2x5x0
,ÖPl->
chromadnsMa2x5x0
, 5,5 );

78 
	`sùpLökFûãr
(
pPl
->
lutMa2x5x0
,ÖPl->
cﬁ‹combMa2x5x0
, 1,1 );

79 
	`sùpLökFûãr
(
pPl
->
dmaOut0
,ÖPl->
lutMa2x5x0
, 1,1 );

81 
	}
}

84 
	$c⁄figISPPùe
(
ISPPùe
 *
pPl
)

86 
DmaP¨am
 *
dmaIn0Cfg
 = (DmaP¨am *)
pPl
->
dmaIn0
->
∑øms
;

87 
SigmaP¨am
 *
sigmaDnsMa2x5x0Cfg
 = (SigmaP¨am *)
pPl
->
sigmaDnsMa2x5x0
->
∑øms
;

88 
LscP¨am
 *
lscMa2x5x0Cfg
 = (LscP¨am *)
pPl
->
lscMa2x5x0
->
∑øms
;

89 
RawP¨am
 *
øwMa2x5x0Cfg
 = (RawP¨am *)
pPl
->
øwMa2x5x0
->
∑øms
;

90 
DbyrP¨am
 *
debayîMa2x5x0Cfg
 = (DbyrP¨am *)
pPl
->
debayîMa2x5x0
->
∑øms
;

91 
DogLtmP¨am
 *
dogLtmMa2x5x0Cfg
 = (DogLtmP¨am *)
pPl
->
dogLtmMa2x5x0
->
∑øms
;

92 
YDnsP¨am
 *
ydnsMa2x5x0Cfg
 = (YDnsP¨am *)
pPl
->
ydnsMa2x5x0
->
∑øms
;

93 
UsmP¨am
 *
sh¨≥nMa2x5x0Cfg
 = (UsmP¨am *)
pPl
->
sh¨≥nMa2x5x0
->
∑øms
;

94 
GíChrP¨am
 *
chromaGíMa2x5x0Cfg
(GíChrP¨am *)
pPl
->
chromaGíMa2x5x0
->
∑øms
;

95 
MedP¨am
 *
medünMa2x5x0Cfg
 = (MedP¨am *)
pPl
->
medünMa2x5x0
->
∑øms
;

96 
ChrDnsP¨am
 *
chromadnsMa2x5x0Cfg
(ChrDnsP¨am *)
pPl
->
chromadnsMa2x5x0
->
∑øms
;

97 
CﬁCombP¨am
 *
cﬁ‹combMa2x5x0Cfg
(CﬁCombP¨am *)
pPl
->
cﬁ‹combMa2x5x0
->
∑øms
;

98 
LutP¨am
 *
lutMa2x5x0Cfg
 = (LutP¨am *)
pPl
->
lutMa2x5x0
->
∑øms
;

99 
DmaP¨am
 *
dmaOut0Cfg
 = (DmaP¨am *)
pPl
->
dmaOut0
->
∑øms
;

104 
sigmaDnsMa2x5x0Cfg
->
thªsh
[0]=(
ISPC_SIGMA_THRESH1_P0
 << 0 | 
ISPC_SIGMA_THRESH2_P0
 << 8 | 
ISPC_SIGMA_THRESH1_P1
 << 16 | 
ISPC_SIGMA_THRESH2_P1
 << 24);

105 
sigmaDnsMa2x5x0Cfg
->
thªsh
[1]=(
ISPC_SIGMA_THRESH1_P2
 << 0 | 
ISPC_SIGMA_THRESH2_P2
 << 8 | 
ISPC_SIGMA_THRESH1_P3
 << 16 | 
ISPC_SIGMA_THRESH2_P3
 << 24);

106 
sigmaDnsMa2x5x0Cfg
->
cfg

	`SIGMA_DNS_CFG
(
ISPC_SIGMA_NOISE_FLOOR
, (
ISPC_BAYER_BITS
 - 1), 
SIGMA_DNS_PASSTHRU_BIT
,
FORMAT
);

107 
sigmaDnsMa2x5x0Cfg
->
bayîP©ã∫
=
GRBG
;

108 
sigmaDnsMa2x5x0Cfg
->
blcGR
=16;

109 
sigmaDnsMa2x5x0Cfg
->
blcR
=16;

110 
sigmaDnsMa2x5x0Cfg
->
blcB
=16;

111 
sigmaDnsMa2x5x0Cfg
->
blcGB
=16;

112 
lscMa2x5x0Cfg
->
gmBa£

i•cLscMesh
;

113 
lscMa2x5x0Cfg
->
gmWidth

ISPC_LSC_GAIN_MAP_W
;

114 
lscMa2x5x0Cfg
->
gmHeight

ISPC_LSC_GAIN_MAP_H
;

115 
lscMa2x5x0Cfg
->
d©aF‹m©
=
	`SIPP_LSC_CFG_FORMAT
(
BAYER
);

116 
lscMa2x5x0Cfg
->
d©aWidth
=
ISPC_BAYER_BITS
;

117 
øwMa2x5x0Cfg
->
grgbPœt

	`RAW_GRGB_PLATO
(
ISPC_GRGB_IMBAL_PLAT_DARK
,
ISPC_GRGB_IMBAL_PLAT_BRIGHT
);

118 
øwMa2x5x0Cfg
->
grgbDeˇy
=
	`RAW_GRGB_DECAY
(
ISPC_GRGB_IMBAL_DECAY_BRIGHT
, 
ISPC_GRGB_IMBAL_DECAY_DARK
);

119 
øwMa2x5x0Cfg
->
badPixCfg
=
	`RAW_BAD_PIX_CFG
(
ISPC_BAD_PIX_NOISE_LEVEL
, 
ISPC_BAD_PIX_ALPHA_G_HOT
, 
ISPC_BAD_PIX_ALPHA_G_COLD
, 
ISPC_BAD_PIX_ALPHA_RB_HOT
, 
ISPC_BAD_PIX_ALPHA_RB_COLD
);

120 
øwMa2x5x0Cfg
->
cfg

	`RAW_CFG
(
BAYER
,
BAYER_PATTERN
,
GRGB_IMBAL_EN
,0,
AE_PATCH_STATS_EN
,
AE_RGB_HIST_STATS_EN
,(
ISPC_BAYER_BITS
 - 1),
ISPC_GRGB_IMBAL_THRESHOLD
,0,
AF_PATCH_STATS_EN
,
BAYER_2x2_MODE
,
AE_Y_HIST_STATS_EN
,
HOT_COLD_PIX_SUPPRESS_EN
);

121 
øwMa2x5x0Cfg
->
gaöS©
[0]=((
ISPC_RAW_CLAMP_0
<<16Ë| 
ISPC_RAW_GAIN_GR
 );

122 
øwMa2x5x0Cfg
->
gaöS©
[1]((
ISPC_RAW_CLAMP_1
<<16Ë| 
ISPC_RAW_GAIN_R
 );

123 
øwMa2x5x0Cfg
->
gaöS©
[2]((
ISPC_RAW_CLAMP_2
<<16Ë| 
ISPC_RAW_GAIN_B
 );

124 
øwMa2x5x0Cfg
->
gaöS©
[3]((
ISPC_RAW_CLAMP_3
<<16Ë| 
ISPC_RAW_GAIN_GB
 );

125 
øwMa2x5x0Cfg
->
°©sBa£
=0;

126 
øwMa2x5x0Cfg
->
°©sPœ√s
=0;

127 
øwMa2x5x0Cfg
->
°©sP©chCfg
=0;

128 
øwMa2x5x0Cfg
->
°©sP©chSèπ
=0;

129 
øwMa2x5x0Cfg
->
°©sP©chSkù
=0;

130 
øwMa2x5x0Cfg
->
°©sThªsh
=0;

131 
øwMa2x5x0Cfg
->
afF1c€fs
[0]=0;

132 
øwMa2x5x0Cfg
->
afF1c€fs
[1]=0;

133 
øwMa2x5x0Cfg
->
afF1c€fs
[2]=0;

134 
øwMa2x5x0Cfg
->
afF1c€fs
[3]=0;

135 
øwMa2x5x0Cfg
->
afF1c€fs
[4]=0;

136 
øwMa2x5x0Cfg
->
afF1c€fs
[5]=0;

137 
øwMa2x5x0Cfg
->
afF1c€fs
[6]=0;

138 
øwMa2x5x0Cfg
->
afF1c€fs
[7]=0;

139 
øwMa2x5x0Cfg
->
afF1c€fs
[8]=0;

140 
øwMa2x5x0Cfg
->
afF1c€fs
[9]=0;

141 
øwMa2x5x0Cfg
->
afF1c€fs
[10]=0;

142 
øwMa2x5x0Cfg
->
afF2c€fs
[0]=0;

143 
øwMa2x5x0Cfg
->
afF2c€fs
[1]=0;

144 
øwMa2x5x0Cfg
->
afF2c€fs
[2]=0;

145 
øwMa2x5x0Cfg
->
afF2c€fs
[3]=0;

146 
øwMa2x5x0Cfg
->
afF2c€fs
[4]=0;

147 
øwMa2x5x0Cfg
->
afF2c€fs
[5]=0;

148 
øwMa2x5x0Cfg
->
afF2c€fs
[6]=0;

149 
øwMa2x5x0Cfg
->
afF2c€fs
[7]=0;

150 
øwMa2x5x0Cfg
->
afF2c€fs
[8]=0;

151 
øwMa2x5x0Cfg
->
afF2c€fs
[9]=0;

152 
øwMa2x5x0Cfg
->
afF2c€fs
[10]=0;

153 
øwMa2x5x0Cfg
->
afMöThªsh
=0;

154 
øwMa2x5x0Cfg
->
afSubåa˘
=0;

155 
øwMa2x5x0Cfg
->
afP©chCfg
=0;

156 
øwMa2x5x0Cfg
->
afP©chSèπ
=0;

157 
øwMa2x5x0Cfg
->
afSètsBa£
=0;

158 
øwMa2x5x0Cfg
->
hi°LumaBa£
=0;

159 
øwMa2x5x0Cfg
->
hi°RgbBa£
=0;

160 
debayîMa2x5x0Cfg
->
cfg

	`DEBAYER_CFG
(
BAYER_PATTERN
,0,0,
ISPC_BAYER_BITS
,
ISPC_DEBAYER_BITS
,
IMAGE_ORDER_OUT
, 
OUTPUT_PLANE_NO
,0);

161 
debayîMa2x5x0Cfg
->
thªsh
=
	`DEBAYER_THRESH
(0,0,1,1,1,0) ;

162 
debayîMa2x5x0Cfg
->
dew‹mCfg
=
	`DEBAYER_DEWORM
(
ISPC_DEMOSAIC_MIX_OFFSET
,
ISPC_DEMOSAIC_MIX_SLOPE
);

163 
debayîMa2x5x0Cfg
->
lumaWeight
=
	`DEBAYER_LUMA_COEFS_CFG
(
ISPC_DEMOSAIC_LUMA_WEIGHT_RED
 , 
ISPC_DEMOSAIC_LUMA_WEIGHT_GREEN
, 
ISPC_DEMOSAIC_LUMA_WEIGHT_BLUE
);

164 
dogLtmMa2x5x0Cfg
->
cfg

	`DOGL_CFG_SET
(
DOG_LTM_MODE
,
ISPC_DOG_THR
,
DOG_OUTPUT_CLAMP
,
DS_MODE
,
ISPC_LTM_FILTER_TH1
,0,
DOG_HEIGHT
);;

165 
dogLtmMa2x5x0Cfg
->
dogC€ffs11
=dogCoeffs11;

166 
dogLtmMa2x5x0Cfg
->
dogC€ffs15
=dogCoeffs15;

167 
dogLtmMa2x5x0Cfg
->
dogSåígth
=
ISPC_DOG_STRENGTH
;

168 
dogLtmMa2x5x0Cfg
->
…mCurves
=(
u16
 *)
…m_curves
;

169 
ydnsMa2x5x0Cfg
->
cfg

	`LUMA_DNS_CFG
(0x1, 
ISPC_LUMA_DNS_REF_SHIFT
, 
ISPC_LUMA_DNS_ALPHA
, 
ISPC_LUMA_DNS_BITPOS
);

170 
ydnsMa2x5x0Cfg
->
gaussLut
[0]=gaussLut[0];

171 
ydnsMa2x5x0Cfg
->
gaussLut
[1]=gaussLut[1];

172 
ydnsMa2x5x0Cfg
->
gaussLut
[2]=gaussLut[2];

173 
ydnsMa2x5x0Cfg
->
gaussLut
[3]=gaussLut[3];

174 
ydnsMa2x5x0Cfg
->
f2

ISPC_LUMA_DNS_F2
;

175 
ydnsMa2x5x0Cfg
->
gammaLut
[0]=gammaLut[0];

176 
ydnsMa2x5x0Cfg
->
gammaLut
[1]=gammaLut[1];

177 
ydnsMa2x5x0Cfg
->
gammaLut
[2]=gammaLut[2];

178 
ydnsMa2x5x0Cfg
->
gammaLut
[3]=gammaLut[3];

179 
ydnsMa2x5x0Cfg
->
gammaLut
[4]=gammaLut[4];

180 
ydnsMa2x5x0Cfg
->
di°Cfg
(
u32
)
i•cYDnsDi°Lut
;

181 
ydnsMa2x5x0Cfg
->
di°Off£ts
=
X_OFFSET
 | (
Y_OFFSET
 << 16);

182 
ydnsMa2x5x0Cfg
->
fuŒFrmDim
=(
FULL_IMAGE_WIDTH
 << 16 ) | 
FULL_IMAGE_HEIGHT
;

183 
sh¨≥nMa2x5x0Cfg
->
cfg

	`SHARPEN_CFG
–
THR
, 
SHARPEN_KERNEL_SIZE
,
OUTPUT_CLAMP
 ,
SHARPEN_MODE
,
OUTPUT_DELTAS
);

184 
sh¨≥nMa2x5x0Cfg
->
°ªngth
=
	`SHARPEN_STRENGTH_CFG
(
SHARPEN_STRENGTH_LIGHTEN
, 
SHARPEN_STRENGTH_DARKEN
 );

185 
sh¨≥nMa2x5x0Cfg
->
˛ù

SHARPEN_CLIPPING_ALPHA
;

186 
sh¨≥nMa2x5x0Cfg
->
limô

	`SHARPEN_LIMITS_CFG
(0x0,0x4000);

187 
sh¨≥nMa2x5x0Cfg
->
rgnSt›01
=
	`SHARPEN_RANGESTOP01_CFG
(
SHARPEN_RANGE_STOP0
, 
SHARPEN_RANGE_STOP1
);

188 
sh¨≥nMa2x5x0Cfg
->
rgnSt›23

	`SHARPEN_RANGESTOP01_CFG
(
SHARPEN_RANGE_STOP2
, 
SHARPEN_RANGE_STOP3
);

189 
sh¨≥nMa2x5x0Cfg
->
c€f01
=
	`SHARPEN_COEFS01_CFG
(0x0,0x0);

190 
sh¨≥nMa2x5x0Cfg
->
c€f23
=
	`SHARPEN_COEFS23_CFG
(0x0,0x0);

191 
chromaGíMa2x5x0Cfg
->
cfg
=
	`CGEN_CFG_SET
(
ISPC_CGEN_PFR_STRENGTH
,
ISPC_CGEN_DESAT_OFFSET
,
ISPC_CGEN_DESAT_SLOPE
,
ISPC_DEBAYER_BITS
,
BYPASS_PF_DAD
,
DS_MODE
);

192 
chromaGíMa2x5x0Cfg
->
yC€fs
=
	`CGEN_LUMA_COEFF_SET
(
ISPC_CGEN_LUMA_COEFF_R
,
ISPC_CGEN_LUMA_COEFF_G
,
ISPC_CGEN_LUMA_COEFF_B
) ;

193 
chromaGíMa2x5x0Cfg
->
chrC€fs
=
	`CGEN_CHROMA_COEFF_SET
(
ISPC_CGEN_EPSILON
,
ISPC_CGEN_KR
,
ISPC_CGEN_KG
,
ISPC_CGEN_KB
);

194 
medünMa2x5x0Cfg
->
cfg

	`MED_CFG
(
MEDIAN_KERNEL_SIZE
,
MEDIAN_OUT_SEL
,
MEDIAN_THRESHOLD
,
MEDIAN_LUMA_ABLEND_EN
,
MEDIAN_LUMA_SAMPLE_EN
,0);

195 
medünMa2x5x0Cfg
->
lumaAÕha
=
	`MED_LUMA_ALPHA
(
ISPC_CHROMA_MEDIAN_MIX_SLOPE
,
ISPC_CHROMA_MEDIAN_MIX_OFFSET
);

196 
chromadnsMa2x5x0Cfg
->
cfg
=
	`CHROMA_DNS_CFG
(
ISPC_CHROMA_DNS_H_ENAB
,
ISPC_CHROMA_DNS_LIMIT
,
FORCE_WT_H
,
FORCE_WT_V
,(
PLANES_PER_CYCLE
-1),
ISPC_GREY_DESAT_OFFSET
,
ISPC_GREY_DESAT_SLOPE
);

197 
chromadnsMa2x5x0Cfg
->
thr
[0]=
CHROMA_DNS_THRESH0
;

198 
chromadnsMa2x5x0Cfg
->
thr
[1]=
CHROMA_DNS_THRESH1
;

199 
chromadnsMa2x5x0Cfg
->
gªyPt
=
	`CHORMA_GREY_PT_SET
(
ISPC_GREY_POINT_B
,
ISPC_GREY_POINT_G
,
ISPC_GREY_POINT_R
,
GREY_PT_EN
);

200 
chromadnsMa2x5x0Cfg
->
chrC€fs
=
	`CHROMA_DNS_COEFFS_SET
(
i•cLow∑ssKî√l
[4],ispcLowpassKernel[1],ispcLowpassKernel[0]);

201 
cﬁ‹combMa2x5x0Cfg
->
cfg
=
	`CC_CFG
(
FORCE_LUMA_ONE
,0,
LUT_3D_BYPASS
,
LUT_3D_LOAD
,
U12F_OUTPUT
,
CC_OUTPUT_PLANE
);

202 
cﬁ‹combMa2x5x0Cfg
->
krgb
[0]=
ISPC_CC_KR
 | (
ISPC_CC_KG
 << 16);

203 
cﬁ‹combMa2x5x0Cfg
->
krgb
[1]=(
ISPC_CC_KB
 | (
ISPC_CGEN_EPSILON
 << 16));

204 
cﬁ‹combMa2x5x0Cfg
->
ccm
[0]=(
ccm_lut_c€ffs
[0] | (ccm_lut_coeffs[3] << 16));

205 
cﬁ‹combMa2x5x0Cfg
->
ccm
[1]=(
ccm_lut_c€ffs
[6] | (ccm_lut_coeffs[1] << 16));

206 
cﬁ‹combMa2x5x0Cfg
->
ccm
[2]=(
ccm_lut_c€ffs
[4] | (ccm_lut_coeffs[7] << 16));

207 
cﬁ‹combMa2x5x0Cfg
->
ccm
[3]=(
ccm_lut_c€ffs
[2] | (ccm_lut_coeffs[5] << 16));

208 
cﬁ‹combMa2x5x0Cfg
->
ccm
[4]=(
ccm_lut_c€ffs
[8] | (
ccm_lut_off£ts
[0] << 16));

209 
cﬁ‹combMa2x5x0Cfg
->
ccOffs
=(
ccm_lut_off£ts
[1] | (ccm_lut_offsets[2] << 16));

210 
cﬁ‹combMa2x5x0Cfg
->
thªeDLut
=0x0;

211 
cﬁ‹combMa2x5x0Cfg
->
lutF‹m©
=0x0;

212 
lutMa2x5x0Cfg
->
cfg

INTERP_MODE
 | 
CHANNEL_MODE
<< 1 | (
CHANNELS_NO
 - 1Ë<< 12 | 
LUT_LOAD
 << 14 | 
CSC_ENABLE
<< 16;

213 
lutMa2x5x0Cfg
->
sizeA

LUT_REGION0_SIZE_I
 | (
LUT_REGION1_SIZE_I
 << 4Ë| (
LUT_REGION2_SIZE_I
 << 8Ë| (
LUT_REGION3_SIZE_I
 << 12Ë| (
LUT_REGION4_SIZE_I
 << 16Ë| (
LUT_REGION5_SIZE_I
 << 20Ë| (
LUT_REGION6_SIZE_I
 << 24Ë| (
LUT_REGION7_SIZE_I
 << 28);

214 
lutMa2x5x0Cfg
->
sizeB

LUT_REGION8_SIZE_I
 | (
LUT_REGION9_SIZE_I
 << 4Ë| (
LUT_REGION10_SIZE_I
 << 8Ë| (
LUT_REGION11_SIZE_I
 << 12Ë| (
LUT_REGION12_SIZE_I
 << 16Ë| (
LUT_REGION13_SIZE_I
 << 20Ë| (
LUT_REGION14_SIZE_I
 << 24Ë| (
LUT_REGION15_SIZE_I
 << 28);

215 
lutMa2x5x0Cfg
->
lut
(*)
gammaLutFp16
;

216 
lutMa2x5x0Cfg
->
lutF‹m©
=
LUT_LD_FORMAT
;

217 
lutMa2x5x0Cfg
->
m©
[0]
LUT_MAT_11
;

218 
lutMa2x5x0Cfg
->
m©
[1]
LUT_MAT_12
;

219 
lutMa2x5x0Cfg
->
m©
[2]
LUT_MAT_13
;

220 
lutMa2x5x0Cfg
->
m©
[3]
LUT_MAT_21
;

221 
lutMa2x5x0Cfg
->
m©
[4]
LUT_MAT_22
;

222 
lutMa2x5x0Cfg
->
m©
[5]
LUT_MAT_23
;

223 
lutMa2x5x0Cfg
->
m©
[6]
LUT_MAT_31
;

224 
lutMa2x5x0Cfg
->
m©
[7]
LUT_MAT_32
;

225 
lutMa2x5x0Cfg
->
m©
[8]
LUT_MAT_33
;

226 
lutMa2x5x0Cfg
->
off£t
[0]=
LUT_OFF_1
;

227 
lutMa2x5x0Cfg
->
off£t
[1]=
LUT_OFF_2
;

228 
lutMa2x5x0Cfg
->
off£t
[2]=
LUT_OFF_3
;

229 
dmaIn0Cfg
->
ddrAddr
 = (
UI¡32
)&
ISPPùe_dmaIn0_buf„r
;

230 
dmaOut0Cfg
->
ddrAddr
 = (
UI¡32
)&
ISPPùe_dmaOut0_buf„r
;

233 
	}
}

	@Sipp/SippFw/ISPPipe/leon/ISPPipe.h

13 #i‚de‡
__ISPPIPE_H__


14 
	#__ISPPIPE_H__


	)

16 
	~<sùp.h
>

17 
	~<sùpTe°Comm⁄.h
>

19 
	~"ISPPùeSëtögs.h
"

23 
UI¡16
 
DDR_DATA
 
ISPPùe_dmaIn0_buf„r
[ 
SIPP_ISP_PIPE_BUFFER_WIDTH
 * 
SIPP_ISP_PIPE_BUFFER_HEIGHT
 * 
SIPP_ISP_PIPE_BUFFER_INPUT_NUM_PLANES
 ]
ALIGNED
(8);

24 
UI¡8
 
DDR_DATA
 
ISPPùe_dmaOut0_buf„r
[ 
SIPP_ISP_PIPE_BUFFER_WIDTH
 * 
SIPP_ISP_PIPE_BUFFER_HEIGHT
 * 3 ]
ALIGNED
(8);

28 
	sISPPùe


31 
SùpPùñöe
 *
	m∂
;

34 
SùpFûãr
 *
	mdmaIn0
;

35 
SùpFûãr
 *
	msigmaDnsMa2x5x0
;

36 
SùpFûãr
 *
	mlscMa2x5x0
;

37 
SùpFûãr
 *
	møwMa2x5x0
;

38 
SùpFûãr
 *
	mdebayîMa2x5x0
;

39 
SùpFûãr
 *
	mdogLtmMa2x5x0
;

40 
SùpFûãr
 *
	mydnsMa2x5x0
;

41 
SùpFûãr
 *
	msh¨≥nMa2x5x0
;

42 
SùpFûãr
 *
	mchromaGíMa2x5x0
;

43 
SùpFûãr
 *
	mmedünMa2x5x0
;

44 
SùpFûãr
 *
	mchromadnsMa2x5x0
;

45 
SùpFûãr
 *
	mcﬁ‹combMa2x5x0
;

46 
SùpFûãr
 *
	mlutMa2x5x0
;

47 
SùpFûãr
 *
	mdmaOut0
;

49 } 
	tISPPùe
;

51 
ªadISPPùeI≈ut
(
ISPPùe
 *
pPl
);

52 
wrôeISPPùeOuçut
(
ISPPùe
 *
pPl
);

54 
buûdISPPùe
(
ISPPùe
 *
pPl
);

55 
c⁄figISPPùe
(
ISPPùe
 *
pPl
);

	@Sipp/SippFw/ISPPipe/leon/ISPPipeSettings.h

4 #i‚de‡
_ISP_PIPE_SETTINGS_H_


5 
	#_ISP_PIPE_SETTINGS_H_


	)

12 
	#SIPP_ISP_PIPE_BUFFER_WIDTH
 512

	)

13 
	#SIPP_ISP_PIPE_BUFFER_HEIGHT
 128

	)

14 
	#SIPP_ISP_PIPE_BUFFER_INPUT_NUM_PLANES
 1

	)

15 
	#ISPC_BAYER_BITS
 10

	)

16 
	#BAYER_PATTERN
 
RGGB


	)

17 
	#FORMAT
 
BAYER


	)

18 
	#FULL_IMAGE_WIDTH
 
SIPP_ISP_PIPE_BUFFER_WIDTH


	)

19 
	#FULL_IMAGE_HEIGHT
 
SIPP_ISP_PIPE_BUFFER_HEIGHT


	)

20 
	#ISPC_CHROMA_PIPE_WIDTH
 (
FULL_IMAGE_WIDTH
 >> 0x1)

	)

21 
	#ISPC_CHROMA_PIPE_HEIGHT
 (
FULL_IMAGE_HEIGHT
 >> 0x1)

	)

29 
	#ISPC_SIGMA_NOISE_FLOOR
 51

	)

30 
	#ISPC_SIGMA_THRESH1_P0
 9

	)

31 
	#ISPC_SIGMA_THRESH2_P0
 18

	)

32 
	#ISPC_SIGMA_THRESH1_P1
 9

	)

33 
	#ISPC_SIGMA_THRESH2_P1
 18

	)

34 
	#ISPC_SIGMA_THRESH1_P2
 9

	)

35 
	#ISPC_SIGMA_THRESH2_P2
 18

	)

36 
	#ISPC_SIGMA_THRESH1_P3
 9

	)

37 
	#ISPC_SIGMA_THRESH2_P3
 18

	)

39 
	#SIGMA_DNS_PASSTHRU_BIT
 
DISABLED


	)

45 
	#ISPC_LSC_GAIN_MAP_W
 60

	)

46 
	#ISPC_LSC_GAIN_MAP_H
 44

	)

48 
uöt16_t
 
i•cLscMesh
[
ISPC_LSC_GAIN_MAP_W
 * 
ISPC_LSC_GAIN_MAP_H
];

54 
	#ISPC_BAD_PIX_ALPHA_G_HOT
 0x5

55 
	#ISPC_BAD_PIX_ALPHA_RB_HOT
 0x2

56 
	#ISPC_BAD_PIX_ALPHA_G_COLD
 0x5

57 
	#ISPC_BAD_PIX_ALPHA_RB_COLD
 0x5

58 
	#ISPC_BAD_PIX_NOISE_LEVEL
 0x00a3

59 

	)

61 
	#ISPC_GRGB_IMBAL_PLAT_DARK
 150

	)

62 
	#ISPC_GRGB_IMBAL_DECAY_DARK
 200

	)

63 
	#ISPC_GRGB_IMBAL_PLAT_BRIGHT
 400

	)

64 
	#ISPC_GRGB_IMBAL_DECAY_BRIGHT
 500

	)

65 
	#ISPC_GRGB_IMBAL_THRESHOLD
 16

66 

	)

67 
	#ISPC_RAW_GAIN_R
 1148

68 
	#ISPC_RAW_GAIN_GR
 988

69 
	#ISPC_RAW_GAIN_GB
 988

70 
	#ISPC_RAW_GAIN_B
 2273

71 

	)

72 
	#ISPC_RAW_CLAMP_0
 1023

73 
	#ISPC_RAW_CLAMP_1
 1023

74 
	#ISPC_RAW_CLAMP_2
 1023

75 
	#ISPC_RAW_CLAMP_3
 1023

76 

	)

77 
	#ISPC_RAW_OUTPUT_BITS
 10

	)

80 
	#GRGB_IMBAL_EN
 
ENABLED


	)

81 
	#AE_PATCH_STATS_EN
 
DISABLED


	)

82 
	#AF_PATCH_STATS_EN
 
DISABLED


	)

83 
	#AE_Y_HIST_STATS_EN
 
DISABLED


	)

84 
	#AE_RGB_HIST_STATS_EN
 
DISABLED


	)

85 
	#HOT_COLD_PIX_SUPPRESS_EN
 
ENABLED


	)

86 
	#BAYER_2x2_MODE
 1

	)

91 
	#ISPC_DEBAYER_BITS
 12

	)

92 
	#RGB_EN
 1

	)

93 
	#FORCE_RB_ZERO
 0

	)

94 
	#IMAGE_ORDER_OUT
 
P_RGB


	)

95 
	#OUTPUT_PLANE_NO
 3

	)

97 
	#ISPC_DEMOSAIC_MIX_SLOPE
 0

	)

98 
	#ISPC_DEMOSAIC_MIX_OFFSET
 0

	)

99 
	#ISPC_DEMOSAIC_MIX_GRADIENT_MUL
 0

	)

100 
	#ISPC_DEMOSAIC_LUMA_WEIGHT_RED
 77

	)

101 
	#ISPC_DEMOSAIC_LUMA_WEIGHT_GREEN
 150

	)

102 
	#ISPC_DEMOSAIC_LUMA_WEIGHT_BLUE
 29

	)

107 
	#MODE_DOG_ONLY
 0x0

	)

108 
	#MODE_LTM_ONLY
 0x1

	)

109 
	#MODE_DOG_DENOISE
 0x2

	)

110 
	#MODE_DOG_LTM
 0x3

	)

111 
	#DOG_LTM_MODE
 
MODE_DOG_LTM


	)

113 
	#DOG_OUTPUT_CLAMP
 
DISABLED


	)

114 
	#DOG_HEIGHT
 15

	)

116 
i•cLtmCurves
[16*8];

119 
	#ISPC_LTM_FILTER_TH1
 35

	)

122 
	#ISPC_DOG_THR
 4

	)

123 
	#ISPC_DOG_STRENGTH
 191

	)

125 
uöt8_t
 
dogC€ffs11
[6];

126 
uöt8_t
 
dogC€ffs15
[8];

127 
u16
 
…m_curves
[16*8];

129 
	#DSMODE_CARRY
 0x0

	)

130 
	#DSMODE_DOWN
 0x1

	)

131 
	#DSMODE_UPDN
 0x2

	)

132 
	#DS_MODE
 
DSMODE_DOWN


	)

141 
	#ISPC_LUMA_DNS_F2
 0xØØa9a4

	)

142 
	#ISPC_LUMA_DNS_BITPOS
 7

	)

144 
uöt8_t
 
i•cLumaDnsLut
[32];

146 
uöt8_t
 
i•cYDnsDi°Lut
[256];

148 
uöt8_t
 
i•cGammaLut0_32
[9];

149 
uöt8_t
 
i•cGammaLut32_255
[9];

151 
	#ISPC_LUMA_DNS_REF_SHIFT
 15

	)

152 
	#X_OFFSET
 0

	)

153 
	#Y_OFFSET
 0

	)

155 
u32
 
gaussLut
[4];

156 
u32
 
gammaLut
[5];

158 
	#ISPC_LUMA_DNS_STRENGTH
 150.000000

	)

159 
	#ISPC_LUMA_DNS_ALPHA
 128

160 

	)

164 
	#SHARPEN_KERNEL_SIZE
 7

	)

166 
	#SHARPEN_STRENGTH_DARKEN
 0x0000

167 
	#SHARPEN_STRENGTH_LIGHTEN
 0x0000

168 
	#SHARPEN_CLIPPING_ALPHA
 0x0000

169 
	#SHARPEN_RANGE_STOP0
 0x0000

	)

170 
	#SHARPEN_RANGE_STOP1
 0x0000

	)

171 
	#SHARPEN_RANGE_STOP2
 0x0000

	)

172 
	#SHARPEN_RANGE_STOP3
 0x0000

	)

173 
	#SHARPENING
 0

	)

174 
	#BLURRING
 1

	)

175 
	#SHARPEN_MODE
 
SHARPENING


	)

176 
	#OUTPUT_DELTAS
 0

	)

177 
	#THR
 0x0

	)

178 
	#OUTPUT_CLAMP
 1

	)

181 
	#ISPC_SHARP_SIGMA
 2.000000

	)

184 
	#ISPC_SHARP_ALPHA
 0.700000

	)

185 
	#ISPC_SHARP_OVERSHOOT
 1.050000

	)

186 
	#ISPC_SHARP_UNDERSHOOT
 1.000000

	)

187 
	#ISPC_SHARP_RANGE_STOP_0
 0.003922

	)

188 
	#ISPC_SHARP_RANGE_STOP_1
 0.019608

	)

189 
	#ISPC_SHARP_RANGE_STOP_2
 0.980392

	)

190 
	#ISPC_SHARP_RANGE_STOP_3
 1.000000

	)

191 
	#ISPC_SHARP_MIN_THR
 0.000000

	)

192 
	#ISPC_SHARP_COEF0
 0.070159

	)

193 
	#ISPC_SHARP_COEF1
 0.131075

	)

194 
	#ISPC_SHARP_COEF2
 0.190713

	)

195 
	#ISPC_SHARP_COEF3
 0.216106

	)

201 
	#ISPC_CGEN_EPSILON
 1

	)

202 
	#ISPC_CGEN_KR
 106

	)

203 
	#ISPC_CGEN_KG
 191

	)

204 
	#ISPC_CGEN_KB
 149

	)

205 
	#ISPC_CGEN_LUMA_COEFF_R
 76

	)

206 
	#ISPC_CGEN_LUMA_COEFF_G
 150

	)

207 
	#ISPC_CGEN_LUMA_COEFF_B
 29

	)

208 
	#ISPC_CGEN_PFR_STRENGTH
 80

	)

209 
	#ISPC_CGEN_DESAT_OFFSET
 4

	)

210 
	#ISPC_CGEN_DESAT_SLOPE
 43

	)

212 
	#BYPASS_PF_DAD
 
DISABLED


	)

213 
	#DSMODE_CARRY
 0x0

	)

214 
	#DSMODE_DOWN
 0x1

	)

215 
	#DSMODE_UPDN
 0x2

	)

216 
	#DS_MODE
 
DSMODE_DOWN


	)

221 
	#MEDIAN_KERNEL_SIZE
 0x7

222 
	#MEDIAN_THRESHOLD
 0x1FF

	)

223 
	#MEDIAN_OUT_SEL
 ((
MEDIAN_KERNEL_SIZE
 >> 1Ë* (MEDIAN_KERNEL_SIZEË+ (MEDIAN_KERNEL_SIZE >> 1))

	)

224 
	#MEDIAN_LUMA_ABLEND_EN
 
ENABLED


	)

225 
	#MEDIAN_LUMA_SAMPLE_EN
 
ENABLED


	)

227 
	#ISPC_CHROMA_MEDIAN_MIX_SLOPE
 10

	)

228 
	#ISPC_CHROMA_MEDIAN_MIX_OFFSET
 -26

	)

233 
	#ISPC_CHROMA_DNS_TH_R
 20

	)

234 
	#ISPC_CHROMA_DNS_TH_G
 15

	)

235 
	#ISPC_CHROMA_DNS_TH_B
 38

	)

236 
	#ISPC_CHROMA_DNS_LIMIT
 100

	)

237 
	#ISPC_CHROMA_DNS_H_ENAB
 7

	)

238 
	#PLANES_PER_CYCLE
 3

	)

239 
	#FORCE_WT_H
 0

	)

240 
	#FORCE_WT_V
 0

	)

243 
	#ISPC_GREY_DESAT_OFFSET
 -35

	)

244 
	#ISPC_GREY_DESAT_SLOPE
 7

	)

245 
	#ISPC_GREY_POINT_R
 106

	)

246 
	#ISPC_GREY_POINT_G
 137

	)

247 
	#ISPC_GREY_POINT_B
 75

	)

248 
	#GREY_PT_EN
 
DISABLED


	)

250 
uöt8_t
 
i•cLow∑ssKî√l
[9];

252 
	#ISPC_CHROMA_DNS_TH_R
 20

	)

253 
	#ISPC_CHROMA_DNS_TH_G
 15

	)

254 
	#ISPC_CHROMA_DNS_TH_B
 38

	)

256 
	#CHROMA_DNS_THRESH0
 (
ISPC_CHROMA_DNS_TH_R
 | (ISPC_CHROMA_DNS_TH_R << 16Ë| (
ISPC_CHROMA_DNS_TH_G
 << 8Ë| (ISPC_CHROMA_DNS_TH_G << 24))

	)

257 
	#CHROMA_DNS_THRESH1
 (
ISPC_CHROMA_DNS_TH_B
 | (ISPC_CHROMA_DNS_TH_B << 16))

	)

261 
i•cCCM
[9];

262 
i•cCCMOff
[3];

264 
	#FORCE_LUMA_ONE
 
DISABLED


	)

265 
	#LUT_3D_BYPASS
 
ENABLED


	)

266 
	#LUT_3D_LOAD
 
DISABLED


	)

267 
	#U12F_OUTPUT
 
DISABLED


	)

268 
	#MUL
 255

	)

269 
	#CC_OUTPUT_PLANE
 3

	)

271 
	#T1
 2

	)

273 
	#ISPC_CC_KR
 618

	)

274 
	#ISPC_CC_KG
 343

	)

275 
	#ISPC_CC_KB
 440

	)

277 
u16
 
ccm_lut_c€ffs
[9];

278 
u16
 
ccm_lut_off£ts
[3];

283 
	#INTERP_MODE
 
ENABLED


	)

284 
	#CHANNEL_MODE
 
ENABLED


	)

285 
	#INT_WIDTH
 12

	)

286 
	#LUTS_NO
 2

	)

287 
	#LUT_LOAD
 
ENABLED


	)

288 
	#APB_ACCESS
 
DISABLED


	)

289 
	#CSC_ENABLE
 
ENABLED


	)

290 
	#CHANNELS_NO
 3

	)

292 
i•cGammaTabÀ
[8192];

293 
uöt16_t
 
gammaLutFp16
[512*4];

294 
i•cCSC
[9];

295 
i•cCSCOff
[3];

297 
uöt16_t
 
lut3d
[16*16*16*4];

299 
u16
 
csc_lut_c€ffs
[9];

300 
u16
 
csc_lut_off£ts
[3];

302 
	#LUT_LD_FORMAT
 0

	)

304 
	#LUT_MAT_11
 
csc_lut_c€ffs
[0]

	)

305 
	#LUT_MAT_12
 
csc_lut_c€ffs
[1]

	)

306 
	#LUT_MAT_13
 
csc_lut_c€ffs
[2]

	)

307 
	#LUT_MAT_21
 
csc_lut_c€ffs
[3]

	)

308 
	#LUT_MAT_22
 
csc_lut_c€ffs
[4]

	)

309 
	#LUT_MAT_23
 
csc_lut_c€ffs
[5]

	)

310 
	#LUT_MAT_31
 
csc_lut_c€ffs
[6]

	)

311 
	#LUT_MAT_32
 
csc_lut_c€ffs
[7]

	)

312 
	#LUT_MAT_33
 
csc_lut_c€ffs
[8]

	)

313 
	#LUT_OFF_1
 
csc_lut_off£ts
[0]

	)

314 
	#LUT_OFF_2
 
csc_lut_off£ts
[1]

	)

315 
	#LUT_OFF_3
 
csc_lut_off£ts
[2]

	)

317 
	#LUT_REGION0_SIZE_I
 5

	)

318 
	#LUT_REGION1_SIZE_I
 5

	)

319 
	#LUT_REGION2_SIZE_I
 5

	)

320 
	#LUT_REGION3_SIZE_I
 5

	)

321 
	#LUT_REGION4_SIZE_I
 5

	)

322 
	#LUT_REGION5_SIZE_I
 5

	)

323 
	#LUT_REGION6_SIZE_I
 5

	)

324 
	#LUT_REGION7_SIZE_I
 5

	)

326 
	#LUT_REGION8_SIZE_I
 5

	)

327 
	#LUT_REGION9_SIZE_I
 5

	)

328 
	#LUT_REGION10_SIZE_I
 5

	)

329 
	#LUT_REGION11_SIZE_I
 5

	)

330 
	#LUT_REGION12_SIZE_I
 5

	)

331 
	#LUT_REGION13_SIZE_I
 5

	)

332 
	#LUT_REGION14_SIZE_I
 5

	)

333 
	#LUT_REGION15_SIZE_I
 5

	)

	@Sipp/SippFw/ISPPipe/leon/app_config.c

13 
	~<ªgi°îsMyrüd.h
>

14 
	~<DrvC¥.h
>

19 #i‚de‡
IPIPE_CLK_CONFIG_SEL


20 
	#ùùeClockC⁄fig
 
ùùeClkC⁄figMV182


	)

22 
	#ùùeClockC⁄fig
 
IPIPE_CLK_CONFIG_SEL


	)

35 
tyAuxClkDividîCfg
 
	gauxClkAŒOn
[] =

37 {0x0FFFFFFF & (~(1<<
CSS_AUX_DDR_CORE
)Ë, 
CLK_SRC_REFCLK0
, 1, 1},

42 
tySocClockC⁄fig
 
	gùùeClkC⁄figMV182
 =

44 .
ªfClk0I≈utKhz
 = 12000,

45 .
	gªfClk1I≈utKhz
 = 0,

46 .
	gèrgëPŒ0FªqKhz
 = 264000,

47 .
	gèrgëPŒ1FªqKhz
 = 0,

48 .
	g˛kSrcPŒ1
 = 
CLK_SRC_REFCLK0
,

49 .
	gma°îClkDivNumî©‹
 = 
DONT_TOUCH_MASTER_DIVIDER
,

50 .
	gma°îClkDivDíomö©‹
 = 
DONT_TOUCH_MASTER_DIVIDER
,

51 .
	gcssDssClockE«bÀMask
 = 0xFFFFFFFFFFFFFFFFULL,

52 .
	gmssClockE«bÀMask
 = 0xFFFFFFFF,

53 .
	gsùpClockE«bÀMask
 = 0xFFFFFFFF,

54 .
	gu∑ClockE«bÀMask
 = 0xFFFFFFFF,

55 .
	gpAuxClkCfg
 = 
auxClkAŒOn
,

67 
	$öôClocksAndMem‹y
()

69 
	`DrvC¥Inô
();

70 
	`DrvC¥SëupClocks
(&
ùùeClockC⁄fig
);

73 
	}
}

	@Sipp/SippFw/ISPPipe/leon/app_config.h

9 #i‚de‡
_APP_CONFIG_H_


10 
	#_APP_CONFIG_H_


	)

16 
öôClocksAndMem‹y
();

	@Sipp/SippFw/ISPPipe/leon/main.c

8 #i‡
deföed
(
SIPP_VCS
)

9 
	~<DrvTimî.h
>

10 
	~<DrvDdr.h
>

13 
	~"≠p_c⁄fig.h
"

14 
	~"ISPPùe.h
"

19 
	#SIPP_TEST_SYNC_API


	)

27 
ISPPùe
 
	gmyPl
;

29 #i‚de‡
SIPP_TEST_SYNC_API


30 vﬁ©ûê
u32
 
	gã°Com∂ëe
 = 0;

37 #ifde‡
SIPP_USE_PRECALC_SCHEDULE


38 
	~"pcDumpScheduÀ.hh
"

43 
ISPPùeCª©eP¨ams
 ( );

45 #i‚de‡
SIPP_TEST_SYNC_API


46 
	$≠pSùpCÆlback
 ( 
SùpPùñöe
 * 
pPùñöe
,

47 
eSIPP_PIPELINE_EVENT
 
eEvít
,

48 
SIPP_PIPELINE_EVENT_DATA
 * 
±EvítD©a


51 i‡(
eEvít
 =
eSIPP_PIPELINE_FRAME_DONE
)

53 
	`¥ötf
 ("appSippCallback : Frame doneÉventÑeceived : TestÖroceedingÅo checksándÅermination\n");

54 
ã°Com∂ëe
 = 1;

57 
	}
}

61 
	$maö
 (
¨gc
, *
¨gv
[])

63 
	`UNUSED
 (
¨gc
);

64 
	`UNUSED
 (
¨gv
);

65 
u32
 
sùpEº‹Log
[
SIPP_ERROR_HISTORY_SIZE
];

67 
	`sùpPœtf‹mInô
 ();

69 #i‚de‡
SIPP_TEST_SYNC_API


70 
ã°Com∂ëe
 = 0;

73 #i‚de‡
SIPP_PC


74 i‡(
PROCESS_LEON_OS
 =
	`swcWhoAmI
())

76 
	`¥ötf
 ("App Starting on LEON OS\n");

78 #i‚de‡
SIPP_TEST_SYNC_API


79 
	`¥ötf
 ("Please make sure IRQ sources for dynamicallyÑoute between LeonOSánd LeonRTáre set\n");

84 
	`¥ötf
 ("App Starting on LEON RT\n");

88 #i‚de‡
SIPP_TEST_SYNC_API


89 
	`sùpPœtf‹mInôAsync
 ();

92 #ifde‡
SIPP_VCS


93 
	`unôTe°Inô
 ();

94 
	`DrvTimîInô
 ();

95 
	`DrvDdrInôüli£
 (
NULL
);

98 
	`buûdISPPùe
 (&
myPl
);

100 i‡(
	`sùpPùeGëEº‹Sètus
 (
myPl
.
∂
))

102 
u32
 
îrNum
;

103 
	`¥ötf
 ("Pipeline creationÉrror\nError codes:\n");

104 
îrNum
 = 
	`sùpGëEº‹Hi°‹y
 (
sùpEº‹Log
);

105 
îrNum
)

107 
	`¥ötf
 ("%08lx\n", 
sùpEº‹Log
[
îrNum
 - 0x1]);

108 
îrNum
--;

112 #i‚de‡
SIPP_TEST_SYNC_API


114 
	`sùpRegi°îEvítCÆlback
 (
myPl
.
∂
,

115 
≠pSùpCÆlback
);

118 
	`ISPPùeCª©eP¨ams
 ();

120 
	`c⁄figISPPùe
 (&
myPl
);

122 #ifde‡
DISABLE_OPIPE_CONNECTIONS


123 
myPl
.
∂
->
Êags
 |(
PLF_DISABLE_OPIPE_CONS
);

126 #ifde‡
SIPP_USE_PRECALC_SCHEDULE


128 
	`dbgSchedInô
(
myPl
.
∂
);

131 
	`ªadISPPùeI≈ut
 (&
myPl
);

132 #ifde‡
SIPP_TEST_SYNC_API


133 
	`sùpPro˚ssFøme
 (
myPl
.
∂
);

135 i‡(
	`sùpPùeGëEº‹Sètus
 (
myPl
.
∂
))

137 
u32
 
îrNum
;

138 
	`¥ötf
 ("PipelineÑuntimeÉrror\nError codes:\n");

139 
îrNum
 = 
	`sùpGëEº‹Hi°‹y
 (
sùpEº‹Log
);

140 
îrNum
)

142 
	`¥ötf
 ("%08lx\n", 
sùpEº‹Log
[
îrNum
 - 0x1]);

143 
îrNum
--;

148 
	`sùpPro˚ssFømeNB
 (
myPl
.
∂
);

150 i‡(
	`sùpPùeGëEº‹Sètus
 (
myPl
.
∂
))

152 
u32
 
îrNum
;

153 
	`¥ötf
 ("PipelineÑuntimeÉrror\nError codes:\n");

154 
îrNum
 = 
	`sùpGëEº‹Hi°‹y
 (
sùpEº‹Log
);

155 
îrNum
)

157 
	`¥ötf
 ("%08lx\n", 
sùpEº‹Log
[
îrNum
 - 0x1]);

158 
îrNum
--;

162 
ã°Com∂ëe
 == 0x0)

168 #ifde‡ 
SIPP_PC


169 
	`sùpGíîicRu¡imeWaôI§ThªadTîm
 ();

172 
	`wrôeISPPùeOuçut
 (&
myPl
);

174 #ifde‡
SIPP_VCS


175 
	`unôTe°FöÆRï‹t
();

179 
	}
}

	@Sipp/SippFw/Runtimes/HwConv/leon/HwConv.c

13 
	~"HwC⁄v.h
"

15 
	~<ö˛ude/sùpHwDefs.h
>

16 
	~<¨ch/ma2x5x/ö˛ude/sùpHwDefs_ma2x5x.h
>

20 
UI¡8
 
DDR_DATA
 
	gHwC⁄v_dmaIn0_buf„r
 [
SIPP_HW_CONV_BUFFER_WIDTH
* 
SIPP_HW_CONV_BUFFER_HEIGHT
* 
SIPP_HW_CONV_BUFFER_NUM_PLANES
]
ALIGNED
(8);

21 
UI¡8
 
DDR_DATA
 
	gHwC⁄v_dmaOut0_buf„r
 [
SIPP_HW_CONV_BUFFER_WIDTH
* 
SIPP_HW_CONV_BUFFER_HEIGHT
* 
SIPP_HW_CONV_BUFFER_NUM_PLANES
]
ALIGNED
(8);

24 
	$ªadHwC⁄vI≈ut
(
HwC⁄v
 *
pPl
)

26 
	`sùpRdFûeU8
((
UI¡8
*)
HwC⁄v_dmaIn0_buf„r
,
SIPP_HW_CONV_BUFFER_WIDTH
 * 
SIPP_HW_CONV_BUFFER_HEIGHT
 * 
SIPP_HW_CONV_BUFFER_NUM_PLANES
* (UInt8),"../../../../../../../resources/testIMG_1296x972_P400.rgb");

28 ()(
pPl
);

30 
	}
}

32 
	$wrôeHwC⁄vOuçut
(
HwC⁄v
 *
pPl
)

34 
	`sùpWrFûeU8
((
UI¡8
*)
HwC⁄v_dmaOut0_buf„r
,
SIPP_HW_CONV_BUFFER_WIDTH
 * 
SIPP_HW_CONV_BUFFER_HEIGHT
 * 
SIPP_HW_CONV_BUFFER_NUM_PLANES
* (UInt8),"output.raw");

36 ()(
pPl
);

38 
	}
}

40 
	$buûdHwC⁄v
(
HwC⁄v
 *
pPl
)

43 
pPl
->
∂
 = 
	`sùpCª©ePùñöe
(0, 3, 
	`SIPP_MBIN
(
mböImgSùp
));

46 
pPl
->
dmaIn0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x00, 
SIPP_HW_CONV_BUFFER_WIDTH
, 
SIPP_HW_CONV_BUFFER_HEIGHT
, 
	`N_PL
(
SIPP_HW_CONV_BUFFER_NUM_PLANES
), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

47 
pPl
->
c⁄vﬁuti⁄Ma2x5x0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x0, 
SIPP_HW_CONV_BUFFER_WIDTH
, 
SIPP_HW_CONV_BUFFER_HEIGHT
, 
	`N_PL
(
SIPP_HW_CONV_BUFFER_NUM_PLANES
), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_CONV_ID
, 0);

48 
pPl
->
dmaOut0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x00, 
SIPP_HW_CONV_BUFFER_WIDTH
, 
SIPP_HW_CONV_BUFFER_HEIGHT
, 
	`N_PL
(
SIPP_HW_CONV_BUFFER_NUM_PLANES
), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

51 
	`sùpLökFûãr
(
pPl
->
c⁄vﬁuti⁄Ma2x5x0
,ÖPl->
dmaIn0
, 3,3 );

52 
	`sùpLökFûãr
(
pPl
->
dmaOut0
,ÖPl->
c⁄vﬁuti⁄Ma2x5x0
, 1,1 );

54 
	}
}

57 
	$c⁄figHwC⁄v
(
HwC⁄v
 *
pPl
)

59 
DmaP¨am
 *
dmaIn0Cfg
 = (DmaP¨am *)
pPl
->
dmaIn0
->
∑øms
;

60 
C⁄vP¨am
 *
c⁄vﬁuti⁄Ma2x5x0Cfg
(C⁄vP¨am *)
pPl
->
c⁄vﬁuti⁄Ma2x5x0
->
∑øms
;

61 
DmaP¨am
 *
dmaOut0Cfg
 = (DmaP¨am *)
pPl
->
dmaOut0
->
∑øms
;

66 
c⁄vﬁuti⁄Ma2x5x0Cfg
->
cfg
=
	`CONV_CFG
(3, 1, 1, 0,1, 0, 0x3646, 1, 0);

67 
c⁄vﬁuti⁄Ma2x5x0Cfg
->
kî√l
[0]=0x0;

68 
c⁄vﬁuti⁄Ma2x5x0Cfg
->
kî√l
[1]= 0x0;

69 
c⁄vﬁuti⁄Ma2x5x0Cfg
->
kî√l
[2]= 0x0;

70 
c⁄vﬁuti⁄Ma2x5x0Cfg
->
kî√l
[3]= 0x0;

71 
c⁄vﬁuti⁄Ma2x5x0Cfg
->
kî√l
[4]= 0x00003000;

72 
c⁄vﬁuti⁄Ma2x5x0Cfg
->
kî√l
[5]= 0x0;

73 
c⁄vﬁuti⁄Ma2x5x0Cfg
->
kî√l
[6]= 0x30000000;

74 
c⁄vﬁuti⁄Ma2x5x0Cfg
->
kî√l
[7]= 0x30003800;

75 
c⁄vﬁuti⁄Ma2x5x0Cfg
->
kî√l
[8]= 0x0;

76 
c⁄vﬁuti⁄Ma2x5x0Cfg
->
kî√l
[9]= 0x0;

77 
c⁄vﬁuti⁄Ma2x5x0Cfg
->
kî√l
[10]= 0x00003000;

78 
c⁄vﬁuti⁄Ma2x5x0Cfg
->
kî√l
[11]= 0x0;

79 
c⁄vﬁuti⁄Ma2x5x0Cfg
->
kî√l
[12]= 0x0;

80 
c⁄vﬁuti⁄Ma2x5x0Cfg
->
kî√l
[13]= 0x0;

81 
c⁄vﬁuti⁄Ma2x5x0Cfg
->
kî√l
[14]= 0x0;

82 
c⁄vﬁuti⁄Ma2x5x0Cfg
->
shadowKî√l
[0]=0x0;

83 
c⁄vﬁuti⁄Ma2x5x0Cfg
->
shadowKî√l
[1]= 0x0;

84 
c⁄vﬁuti⁄Ma2x5x0Cfg
->
shadowKî√l
[2]= 0x0;

85 
c⁄vﬁuti⁄Ma2x5x0Cfg
->
shadowKî√l
[3]= 0x0;

86 
c⁄vﬁuti⁄Ma2x5x0Cfg
->
shadowKî√l
[4]= 0x00003000;

87 
c⁄vﬁuti⁄Ma2x5x0Cfg
->
shadowKî√l
[5]= 0x0;

88 
c⁄vﬁuti⁄Ma2x5x0Cfg
->
shadowKî√l
[6]= 0x30000000;

89 
c⁄vﬁuti⁄Ma2x5x0Cfg
->
shadowKî√l
[7]= 0x30003800;

90 
c⁄vﬁuti⁄Ma2x5x0Cfg
->
shadowKî√l
[8]= 0x0;

91 
c⁄vﬁuti⁄Ma2x5x0Cfg
->
shadowKî√l
[9]= 0x0;

92 
c⁄vﬁuti⁄Ma2x5x0Cfg
->
shadowKî√l
[10]= 0x00003000;

93 
c⁄vﬁuti⁄Ma2x5x0Cfg
->
shadowKî√l
[11]= 0x0;

94 
c⁄vﬁuti⁄Ma2x5x0Cfg
->
shadowKî√l
[12]= 0x0;

95 
c⁄vﬁuti⁄Ma2x5x0Cfg
->
shadowKî√l
[13]= 0x0;

96 
c⁄vﬁuti⁄Ma2x5x0Cfg
->
shadowKî√l
[14]= 0x0;

97 
dmaIn0Cfg
->
ddrAddr
 = (
UI¡32
)&
HwC⁄v_dmaIn0_buf„r
;

98 
dmaOut0Cfg
->
ddrAddr
 = (
UI¡32
)&
HwC⁄v_dmaOut0_buf„r
;

101 
	}
}

	@Sipp/SippFw/Runtimes/HwConv/leon/HwConv.h

13 #i‚de‡
__HWCONV_H__


14 
	#__HWCONV_H__


	)

16 
	~<sùp.h
>

17 
	~<sùpTe°Comm⁄.h
>

19 
	~"HwC⁄vSëup.h
"

23 
UI¡8
 
DDR_DATA
 
HwC⁄v_dmaIn0_buf„r
[ 
SIPP_HW_CONV_BUFFER_WIDTH
 * 
SIPP_HW_CONV_BUFFER_HEIGHT
 * 
SIPP_HW_CONV_BUFFER_NUM_PLANES
 ]
ALIGNED
(8);

24 
UI¡8
 
DDR_DATA
 
HwC⁄v_dmaOut0_buf„r
[ 
SIPP_HW_CONV_BUFFER_WIDTH
 * 
SIPP_HW_CONV_BUFFER_HEIGHT
 * 
SIPP_HW_CONV_BUFFER_NUM_PLANES
 ]
ALIGNED
(8);

28 
	sHwC⁄v


31 
SùpPùñöe
 *
	m∂
;

34 
SùpFûãr
 *
	mdmaIn0
;

35 
SùpFûãr
 *
	mdmaOut0
;

36 
SùpFûãr
 *
	mc⁄vﬁuti⁄Ma2x5x0
;

38 } 
	tHwC⁄v
;

40 
ªadHwC⁄vI≈ut
(
HwC⁄v
 *
pPl
);

41 
wrôeHwC⁄vOuçut
(
HwC⁄v
 *
pPl
);

43 
buûdHwC⁄v
(
HwC⁄v
 *
pPl
);

44 
c⁄figHwC⁄v
(
HwC⁄v
 *
pPl
);

	@Sipp/SippFw/Runtimes/HwConv/leon/HwConvSetup.h

5 #i‚de‡
LEON_TESTHWCONVSETUP_H_


6 
	#LEON_TESTHWCONVSETUP_H_


	)

8 
	#SIPP_HW_CONV_BUFFER_WIDTH
 1296

	)

9 
	#SIPP_HW_CONV_BUFFER_HEIGHT
 972

	)

10 
	#SIPP_HW_CONV_BUFFER_NUM_PLANES
 1

	)

11 
	#SIPP_HW_CONV_BUFFER_SIZE
 (
SIPP_HW_CONV_BUFFER_WIDTH
 * 
SIPP_HW_CONV_BUFFER_HEIGHT
 * 
SIPP_HW_CONV_BUFFER_NUM_PLANES
)

	)

	@Sipp/SippFw/Runtimes/HwConv/leon/app_config.c

13 
	~<ªgi°îsMyrüd.h
>

14 
	~<DrvC¥.h
>

19 #i‚de‡
IPIPE_CLK_CONFIG_SEL


20 
	#ùùeClockC⁄fig
 
ùùeClkC⁄figMV182


	)

22 
	#ùùeClockC⁄fig
 
IPIPE_CLK_CONFIG_SEL


	)

35 
tyAuxClkDividîCfg
 
	gauxClkAŒOn
[] =

38 {(0x0FFFFFFF & (~
AUX_CLK_MASK_DDR_CORE_CTRL
)), 
CLK_SRC_REFCLK0
, 1, 1},

43 
tySocClockC⁄fig
 
	gùùeClkC⁄figMV182
 =

45 .
ªfClk0I≈utKhz
 = 12000,

46 .
	gªfClk1I≈utKhz
 = 0,

47 .
	gèrgëPŒ0FªqKhz
 = 504000,

48 .
	gèrgëPŒ1FªqKhz
 = 0,

49 .
	g˛kSrcPŒ1
 = 
CLK_SRC_REFCLK0
,

50 .
	gma°îClkDivNumî©‹
 = 
DONT_TOUCH_MASTER_DIVIDER
,

51 .
	gma°îClkDivDíomö©‹
 = 
DONT_TOUCH_MASTER_DIVIDER
,

52 .
	gcssDssClockE«bÀMask
 = 0xFFFFFFFFFFFFFFFFULL,

53 .
	gmssClockE«bÀMask
 = 0xFFFFFFFF,

54 .
	gsùpClockE«bÀMask
 = 0xFFFFFFFF,

55 .
	gu∑ClockE«bÀMask
 = 0xFFFFFFFF,

56 .
	gpAuxClkCfg
 = 
auxClkAŒOn
,

68 
	$öôClocksAndMem‹y
()

70 
	`DrvC¥Inô
();

71 
	`DrvC¥SëupClocks
(&
ùùeClockC⁄fig
);

74 
	}
}

	@Sipp/SippFw/Runtimes/HwConv/leon/app_config.h

13 #i‚de‡
APP_CONFIG_H


14 
	#APP_CONFIG_H


	)

18 
	~"mv_ty≥s.h
"

29 
öôClocksAndMem‹y
();

	@Sipp/SippFw/Runtimes/HwConv/leon/main.c

9 
	~<sùp.h
>

10 
	~<sùpTe°Comm⁄.h
>

12 #i‡
deföed
(
SIPP_VCS
)

13 
	~<UnôTe°Api.h
>

14 
	~<DrvTimî.h
>

15 
	~<DrvDdr.h
>

16 
	~<swcLe⁄Utûs.h
>

19 
	~"HwC⁄v.h
"

24 
	#DYNAMIC_IRQ_SIPP_TEST_0
 
IRQ_DYNAMIC_0


	)

25 
	#DYNAMIC_IRQ_SIPP_TEST_1
 
IRQ_DYNAMIC_1


	)

26 
	#DYNAMIC_IRQ_SIPP_TEST_2
 
IRQ_DYNAMIC_2


	)

31 
HwC⁄v
 
	gã°C⁄vPùe
;

32 vﬁ©ûê
u32
 
	gã°Com∂ëe
 = 0;

38 
	$≠pSùpCÆlback
 ( 
SùpPùñöe
 * 
pPùñöe
,

39 
eSIPP_PIPELINE_EVENT
 
eEvít
,

40 
SIPP_PIPELINE_EVENT_DATA
 * 
±EvítD©a
)

42 
	`UNUSED
(
pPùñöe
);

43 
	`UNUSED
(
±EvítD©a
);

45 i‡(
eEvít
 =
eSIPP_PIPELINE_FRAME_DONE
)

47 
	`¥ötf
 ("appSippCallback : Frame doneÉventÑeceived : TestÖroceedingÅo checksándÅermination\n");

48 
ã°Com∂ëe
 = 1;

50 
	}
}

52 
	$maö
 (
¨gc
, *
¨gv
[])

54 
	`UNUSED
 (
¨gc
);

55 
	`UNUSED
 (
¨gv
);

56 
u32
 
sùpEº‹Log
[
SIPP_ERROR_HISTORY_SIZE
];

58 
uöt64_t
 
°¨tT
, 
ídT
, 
‰ameT
;

60 
	`sùpPœtf‹mInô
 ();

62 i‡(
PROCESS_LEON_OS
 =
	`swcWhoAmI
())

64 
	`¥ötf
 ("App Starting on LEON OS\n");

65 
	`¥ötf
 ("Please make sure IRQ sources for dynamicallyÑoute between LeonOSánd LeonRTáre set\n");

68 
	`sùpDynRouãIrq
 (
DYNAMIC_IRQ_SIPP_TEST_0
, 
DYNAMIC_IRQ_SIPP_TEST_1
, 
DYNAMIC_IRQ_SIPP_TEST_2
);

72 
	`¥ötf
 ("App Starting on LEON RT\n");

75 
	`sùpPœtf‹mInôAsync
 ();

77 #ifde‡
SIPP_VCS


78 
	`unôTe°Inô
 ();

79 
	`DrvTimîInô
 ();

80 
	`DrvDdrInôüli£
 (
NULL
);

83 
	`buûdHwC⁄v
 (&
ã°C⁄vPùe
);

85 i‡(
	`sùpPùeGëEº‹Sètus
 (
ã°C⁄vPùe
.
∂
))

87 
u32
 
îrNum
;

88 
	`¥ötf
 ("Pipeline creationÉrror\nError codes:\n");

89 
îrNum
 = 
	`sùpGëEº‹Hi°‹y
 (
sùpEº‹Log
);

90 
îrNum
)

92 
	`¥ötf
 ("%08lx\n", 
sùpEº‹Log
[
îrNum
 - 0x1]);

93 
îrNum
--;

98 
	`sùpRegi°îEvítCÆlback
 (
ã°C⁄vPùe
.
∂
,

99 
≠pSùpCÆlback
);

101 
	`c⁄figHwC⁄v
 (&
ã°C⁄vPùe
);

103 
	`ªadHwC⁄vI≈ut
 (&
ã°C⁄vPùe
);

106 
ã°C⁄vPùe
.
∂
->
Êags
 |
PLF_CONSIDER_OPIPE_RT
;

108 
	`sùpFöÆizePùñöe
 (
ã°C⁄vPùe
.
∂
);

110 
	`DrvTimîGëSy°emTicks64
 (&
°¨tT
);

112 
	`sùpPro˚ssFømeNB
 (
ã°C⁄vPùe
.
∂
);

114 i‡(
	`sùpPùeGëEº‹Sètus
 (
ã°C⁄vPùe
.
∂
))

116 
u32
 
îrNum
;

117 
	`¥ötf
 ("PipelineÑuntimeÉrror\nError codes:\n");

118 
îrNum
 = 
	`sùpGëEº‹Hi°‹y
 (
sùpEº‹Log
);

119 
îrNum
)

121 
	`¥ötf
 ("%08lx\n", 
sùpEº‹Log
[
îrNum
 - 0x1]);

122 
îrNum
--;

126  
ã°Com∂ëe
 == 0x0 )

131 
	`DrvTimîGëSy°emTicks64
 (&
ídT
);

132 
‰ameT
 = 
ídT
 - 
°¨tT
;

133 
	`¥ötf
(" Pîf‹m™˚: %‡cc/pix \n", (()
‰ameT
Ë/ (
SIPP_HW_CONV_BUFFER_WIDTH
*
SIPP_HW_CONV_BUFFER_HEIGHT
));

135 
	`wrôeHwC⁄vOuçut
(&
ã°C⁄vPùe
);

137 
	`sùpRdFûeU8
 (
HwC⁄v_dmaIn0_buf„r
, 
SIPP_HW_CONV_BUFFER_SIZE
, "../../../../../../../resources/0_0_convOutput_1296x972_P400.rgb");

138 
	`sùpDbgCom∑ªU8
((
UI¡8
*)
HwC⁄v_dmaIn0_buf„r
, (UI¡8*)
HwC⁄v_dmaOut0_buf„r
, 
SIPP_HW_CONV_BUFFER_SIZE
);

140 #ifde‡
SIPP_VCS


141 
	`unôTe°FöÆRï‹t
 ();

145 
	}
}

	@Sipp/SippFw/Runtimes/ISPPipe/leon/ISPParamsPP.c

11 
	~<°döt.h
>

12 
	~"ISPPùe.h
"

19 
uöt16_t
 
	gi•cLscMesh
[
ISPC_LSC_GAIN_MAP_W
 * 
ISPC_LSC_GAIN_MAP_H
] 
ALIGNED
(8) =

	@Sipp/SippFw/Runtimes/ISPPipe/leon/ISPParamsStill.c

11 
	~<°döt.h
>

12 
	~"ISPPùe.h
"

18 
uöt8_t
 
	gi•cLow∑ssKî√l
[9] = {

24 
uöt8_t
 
	gi•cLumaDnsLut
[32] = {

29 
uöt8_t
 
	gi•cYDnsDi°Lut
[256] 
__©åibuã__
((
Æig√d
(8))) = {

64 
uöt8_t
 
	gi•cGammaLut0_32
[9] = {

68 
uöt8_t
 
	gi•cGammaLut32_255
[9] = {

73 
	gi•cLtmCurves
[16*8] = {

93 
uöt8_t
 
	gdogC€ffs11
[6] = {

96 
uöt8_t
 
	gdogC€ffs15
[8] = {

101 
	gi•cCCM
[9] = {

107 
	gi•cCCMOff
[3] = {

111 
uöt16_t
 
	glut3d
[16*16*16*4] = {

371 
	gi•cGammaTabÀ
[8192] = {

1398 
uöt16_t
 
	ggammaLutFp16
[512*4] 
ALIGNED
(8) = {

1914 
	gi•cCSC
[9] = {

1920 
	gi•cCSCOff
[3] = {

1924 
u16
 
	g…m_curves
[16*8];

1925 
u32
 
	ggaussLut
[4];

1926 
u32
 
	ggammaLut
[5];

1928 
u16
 
	gcsc_lut_c€ffs
[9];

1929 
u16
 
	gcsc_lut_off£ts
[3];

1931 
u16
 
	gccm_lut_c€ffs
[9];

1932 
u16
 
	gccm_lut_off£ts
[3];

1945 
	$dog…mC⁄vîtCurves
()

1947 
curve
, 
poöt
, 
ªgoff
;

1948 
ªgoff
 = 0;

1949 
curve
 = 0; curve < 8; curve++) {

1950 
poöt
 = 0;Öoint < 16;Öoint += 2) {

1951 
off
 = 
curve
 + 
poöt
 * 8;

1952 
…m_curves
[
off
 ] = 
i•cLtmCurves
[off] * 0xfff;

1953 
…m_curves
[
off
+8] = 
i•cLtmCurves
[off+8] * 0xfff;

1954 
ªgoff
 += 4;

1957 
	}
}

1959 
	$dog…mCª©eLuts
 ()

1961 
u32
 
idx
;

1963 
idx
 = 0; idx < 4; idx++)

1965 
gaussLut
[
idx
] = 
i•cLumaDnsLut
[(idx<< 3) + 0] |

1966 (
i•cLumaDnsLut
[(
idx
<< 3) + 1] << 4 ) |

1967 (
i•cLumaDnsLut
[(
idx
<< 3) + 2] << 8 ) |

1968 (
i•cLumaDnsLut
[(
idx
<< 3) + 3] << 12) |

1969 (
i•cLumaDnsLut
[(
idx
<< 3) + 4] << 16) |

1970 (
i•cLumaDnsLut
[(
idx
<< 3) + 5] << 20) |

1971 (
i•cLumaDnsLut
[(
idx
<< 3) + 6] << 24) |

1972 (
i•cLumaDnsLut
[(
idx
<< 3) + 7] << 28);

1975 
gammaLut
[0] = 
i•cGammaLut0_32
[0] | ispcGammaLut0_32[1] << 8 |

1976 
i•cGammaLut0_32
[2] << 16 | ispcGammaLut0_32[3] << 24;

1977 
gammaLut
[1] = 
i•cGammaLut0_32
[4] | ispcGammaLut0_32[5] << 8 |

1978 
i•cGammaLut0_32
[6] << 16 | ispcGammaLut0_32[7] << 24;

1979 
gammaLut
[2] = 
i•cGammaLut0_32
[8] | 
i•cGammaLut32_255
[0] << 8 |

1980 
i•cGammaLut32_255
[1] << 16 | ispcGammaLut32_255[2] << 24;

1981 
gammaLut
[3] = 
i•cGammaLut32_255
[3] | ispcGammaLut32_255[4] << 8 |

1982 
i•cGammaLut32_255
[5] << 16 | ispcGammaLut32_255[6] << 24;

1983 
gammaLut
[4] = 
i•cGammaLut32_255
[7] | ispcGammaLut32_255[8] << 8;

1984 
	}
}

1986 
	#CCVT
(
f
Ë(()((fË* 1024 + .5Ë& 0xfff)

	)

1987 
	#OCVT
(
f
Ë(()((fË* 4096 + .5Ë& 0x1ffff)

	)

1989 
	$lutCª©eLuts
 ()

1991 
u32
 
idx
;

1993 
idx
 = 0; idx < 9; idx++)

1995 
csc_lut_c€ffs
[
idx
] = 
	`CCVT
(
i•cCSC
[idx]);

1997 
idx
 = 0; idx < 3; idx++)

1999 
csc_lut_off£ts
[
idx
] = 
	`OCVT
(
i•cCSCOff
[idx]);

2001 
	}
}

2004 
	#CCMC
(
f
) (()((f * 0x400) + .5) & 0xffff)

2005 
	#CCMO
(
f
) (()((f * 0x1000) + .5) & 0x1fff)

2006 

	)

2007 
	$ccombCª©eC€ffs
 ()

2009 
u32
 
idx
;

2011 
idx
 = 0; idx < 9; idx++)

2013 
ccm_lut_c€ffs
[
idx
] = 
	`CCMC
(
i•cCCM
[idx]);

2015 
idx
 = 0; idx < 3; idx++)

2017 
ccm_lut_off£ts
[
idx
] = 
	`CCMO
(
i•cCCMOff
[idx]);

2019 
	}
}

2021 
	$ISPPùeCª©eP¨ams
 ()

2023 
	`ccombCª©eC€ffs
();

2024 
	`lutCª©eLuts
 ();

2025 
	`dog…mC⁄vîtCurves
 ();

2026 
	`dog…mCª©eLuts
 ();

2027 
	}
}

	@Sipp/SippFw/Runtimes/ISPPipe/leon/ISPPipe.c

13 
	~"ISPPùe.h
"

15 
	~<ö˛ude/sùpHwDefs.h
>

16 
	~<¨ch/ma2x5x/ö˛ude/sùpHwDefs_ma2x5x.h
>

20 
UI¡16
 
DDR_DATA
 
	gISPPùe_dmaIn0_buf„r
 [
SIPP_ISP_PIPE_BUFFER_WIDTH
* 
SIPP_ISP_PIPE_BUFFER_HEIGHT
* 
SIPP_ISP_PIPE_BUFFER_INPUT_NUM_PLANES
]
ALIGNED
(8);

21 
UI¡8
 
DDR_DATA
 
	gISPPùe_dmaOut0_buf„r
 [
SIPP_ISP_PIPE_BUFFER_WIDTH
* 
SIPP_ISP_PIPE_BUFFER_HEIGHT
* 
SIPP_ISP_PIPE_BUFFER_OUTPUT_NUM_PLANES
]
ALIGNED
(8);

24 
	$ªadISPPùeI≈ut
(
ISPPùe
 *
pPl
)

26 
	`sùpRdFûeU8
((
UI¡8
*)
ISPPùe_dmaIn0_buf„r
,
SIPP_ISP_PIPE_BUFFER_WIDTH
 * 
SIPP_ISP_PIPE_BUFFER_HEIGHT
 * 
SIPP_ISP_PIPE_BUFFER_INPUT_NUM_PLANES
* (
UI¡16
),"../../../../../../../resources/lowLight_1920x1080.raw");

28 ()(
pPl
);

30 
	}
}

32 
	$wrôeISPPùeOuçut
(
ISPPùe
 *
pPl
)

34 
	`sùpWrFûeU8
((
UI¡8
*)
ISPPùe_dmaOut0_buf„r
,
SIPP_ISP_PIPE_BUFFER_WIDTH
 * 
SIPP_ISP_PIPE_BUFFER_HEIGHT
 * 
SIPP_ISP_PIPE_BUFFER_OUTPUT_NUM_PLANES
* (UInt8),"out_p444.yuv");

36 ()(
pPl
);

38 
	}
}

40 
	$buûdISPPùe
(
ISPPùe
 *
pPl
)

43 
pPl
->
∂
 = 
	`sùpCª©ePùñöe
(0, 7, 
	`SIPP_MBIN
(
mböImgSùp
));

46 
pPl
->
dmaIn0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x00, 
SIPP_ISP_PIPE_BUFFER_WIDTH
, 
SIPP_ISP_PIPE_BUFFER_HEIGHT
, 
	`N_PL
(
SIPP_ISP_PIPE_BUFFER_INPUT_NUM_PLANES
), 
	`SZ
(
UI¡16
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

47 
pPl
->
sigmaDnsMa2x5x0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x0, 
SIPP_ISP_PIPE_BUFFER_WIDTH
, 
SIPP_ISP_PIPE_BUFFER_HEIGHT
, 
	`N_PL
(
SIPP_ISP_PIPE_BUFFER_INPUT_NUM_PLANES
), 
	`SZ
(
UI¡16
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_SIGMA_ID
, 0);

48 
pPl
->
lscMa2x5x0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x0, 
SIPP_ISP_PIPE_BUFFER_WIDTH
, 
SIPP_ISP_PIPE_BUFFER_HEIGHT
, 
	`N_PL
(
SIPP_ISP_PIPE_BUFFER_INPUT_NUM_PLANES
), 
	`SZ
(
UI¡16
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_LSC_ID
, 0);

49 
pPl
->
øwMa2x5x0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x0, 
SIPP_ISP_PIPE_BUFFER_WIDTH
, 
SIPP_ISP_PIPE_BUFFER_HEIGHT
, 
	`N_PL
(
SIPP_ISP_PIPE_BUFFER_INPUT_NUM_PLANES
), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_RAW_ID
, 0);

50 
pPl
->
debayîMa2x5x0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x0, 
SIPP_ISP_PIPE_BUFFER_WIDTH
, 
SIPP_ISP_PIPE_BUFFER_HEIGHT
, 
	`N_PL
(
SIPP_ISP_PIPE_BUFFER_OUTPUT_NUM_PLANES
), 
	`SZ
(
UI¡16
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DBYR_ID
, 0);

51 
	`sùpFûãrAddOBuf
(
pPl
->
debayîMa2x5x0
, 
SIPP_ISP_PIPE_BUFFER_INPUT_NUM_PLANES
, (
Â16
));

52 
pPl
->
dogLtmMa2x5x0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x0, 
SIPP_ISP_PIPE_BUFFER_WIDTH
, 
SIPP_ISP_PIPE_BUFFER_HEIGHT
, 
	`N_PL
(
SIPP_ISP_PIPE_BUFFER_INPUT_NUM_PLANES
), 
	`SZ
(
Â16
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DOGL_ID
, 0);

53 
pPl
->
ydnsMa2x5x0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x0, 
SIPP_ISP_PIPE_BUFFER_WIDTH
, 
SIPP_ISP_PIPE_BUFFER_HEIGHT
, 
	`N_PL
(
SIPP_ISP_PIPE_BUFFER_INPUT_NUM_PLANES
), 
	`SZ
(
Â16
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_LUMA_ID
, 0);

54 
pPl
->
sh¨≥nMa2x5x0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x0, 
SIPP_ISP_PIPE_BUFFER_WIDTH
, 
SIPP_ISP_PIPE_BUFFER_HEIGHT
, 
	`N_PL
(
SIPP_ISP_PIPE_BUFFER_INPUT_NUM_PLANES
), 
	`SZ
(
Â16
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_SHARPEN_ID
, 0);

55 
pPl
->
chromaGíMa2x5x0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 
SIPP_RESIZE
, 
ISPC_CHROMA_PIPE_WIDTH
, 
ISPC_CHROMA_PIPE_HEIGHT
, 
	`N_PL
(
SIPP_ISP_PIPE_BUFFER_OUTPUT_NUM_PLANES
), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_CGEN_ID
, 0);

56 
pPl
->
medünMa2x5x0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x0, 
ISPC_CHROMA_PIPE_WIDTH
, 
ISPC_CHROMA_PIPE_HEIGHT
, 
	`N_PL
(
SIPP_ISP_PIPE_BUFFER_OUTPUT_NUM_PLANES
), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_MED_ID
, 0);

57 
pPl
->
chromadnsMa2x5x0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x0, 
ISPC_CHROMA_PIPE_WIDTH
, 
ISPC_CHROMA_PIPE_HEIGHT
, 
	`N_PL
(
SIPP_ISP_PIPE_BUFFER_OUTPUT_NUM_PLANES
), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_CHROMA_ID
, 0);

58 
pPl
->
cﬁ‹combMa2x5x0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x0, 
SIPP_ISP_PIPE_BUFFER_WIDTH
, 
SIPP_ISP_PIPE_BUFFER_HEIGHT
, 
	`N_PL
(
SIPP_ISP_PIPE_BUFFER_OUTPUT_NUM_PLANES
), 
	`SZ
(
UI¡16
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_CC_ID
, 0);

59 
pPl
->
lutMa2x5x0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x0, 
SIPP_ISP_PIPE_BUFFER_WIDTH
, 
SIPP_ISP_PIPE_BUFFER_HEIGHT
, 
	`N_PL
(
SIPP_ISP_PIPE_BUFFER_OUTPUT_NUM_PLANES
), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_LUT_ID
, 0);

60 
pPl
->
dmaOut0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x00, 
SIPP_ISP_PIPE_BUFFER_WIDTH
, 
SIPP_ISP_PIPE_BUFFER_HEIGHT
, 
	`N_PL
(
SIPP_ISP_PIPE_BUFFER_OUTPUT_NUM_PLANES
), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

63 
	`sùpLökFûãr
(
pPl
->
sigmaDnsMa2x5x0
,ÖPl->
dmaIn0
, 5,5 );

64 
	`sùpLökFûãr
(
pPl
->
lscMa2x5x0
,ÖPl->
sigmaDnsMa2x5x0
, 1,1 );

65 
	`sùpLökFûãr
(
pPl
->
øwMa2x5x0
,ÖPl->
lscMa2x5x0
, 5,5 );

66 
	`sùpLökFûãr
(
pPl
->
debayîMa2x5x0
,ÖPl->
øwMa2x5x0
, 11,11 );

67 
	`sùpLökFûãr
(
pPl
->
dogLtmMa2x5x0
,ÖPl->
debayîMa2x5x0
, 15,15 );

68 
	`sùpLökFûãrSëOBuf
(
pPl
->
dogLtmMa2x5x0
,ÖPl->
debayîMa2x5x0
, 1);

69 
	`sùpLökFûãr
(
pPl
->
ydnsMa2x5x0
,ÖPl->
dogLtmMa2x5x0
, 11,11 );

70 
	`sùpLökFûãr
(
pPl
->
sh¨≥nMa2x5x0
,ÖPl->
ydnsMa2x5x0
, 7,7 );

71 
	`sùpLökFûãr
(
pPl
->
chromaGíMa2x5x0
,ÖPl->
debayîMa2x5x0
, 6,6 );

72 
	`sùpLökFûãr
(
pPl
->
medünMa2x5x0
,ÖPl->
chromaGíMa2x5x0
, 7,7 );

73 
	`sùpLökFûãr
(
pPl
->
medünMa2x5x0
,ÖPl->
debayîMa2x5x0
, 1,0 );

74 
	`sùpLökFûãrSëOBuf
(
pPl
->
medünMa2x5x0
,ÖPl->
debayîMa2x5x0
, 1);

75 
	`sùpLökFûãr
(
pPl
->
chromadnsMa2x5x0
,ÖPl->
medünMa2x5x0
, 3,3 );

76 
	`sùpLökFûãr
(
pPl
->
cﬁ‹combMa2x5x0
,ÖPl->
sh¨≥nMa2x5x0
, 1,1 );

77 
	`sùpLökFûãr
(
pPl
->
cﬁ‹combMa2x5x0
,ÖPl->
chromadnsMa2x5x0
, 5,5 );

78 
	`sùpLökFûãr
(
pPl
->
lutMa2x5x0
,ÖPl->
cﬁ‹combMa2x5x0
, 1,1 );

79 
	`sùpLökFûãr
(
pPl
->
dmaOut0
,ÖPl->
lutMa2x5x0
, 1,1 );

81 
	}
}

84 
	$c⁄figISPPùe
(
ISPPùe
 *
pPl
)

86 
DmaP¨am
 *
dmaIn0Cfg
 = (DmaP¨am *)
pPl
->
dmaIn0
->
∑øms
;

87 
SigmaP¨am
 *
sigmaDnsMa2x5x0Cfg
 = (SigmaP¨am *)
pPl
->
sigmaDnsMa2x5x0
->
∑øms
;

88 
LscP¨am
 *
lscMa2x5x0Cfg
 = (LscP¨am *)
pPl
->
lscMa2x5x0
->
∑øms
;

89 
RawP¨am
 *
øwMa2x5x0Cfg
 = (RawP¨am *)
pPl
->
øwMa2x5x0
->
∑øms
;

90 
DbyrP¨am
 *
debayîMa2x5x0Cfg
 = (DbyrP¨am *)
pPl
->
debayîMa2x5x0
->
∑øms
;

91 
DogLtmP¨am
 *
dogLtmMa2x5x0Cfg
 = (DogLtmP¨am *)
pPl
->
dogLtmMa2x5x0
->
∑øms
;

92 
YDnsP¨am
 *
ydnsMa2x5x0Cfg
 = (YDnsP¨am *)
pPl
->
ydnsMa2x5x0
->
∑øms
;

93 
UsmP¨am
 *
sh¨≥nMa2x5x0Cfg
 = (UsmP¨am *)
pPl
->
sh¨≥nMa2x5x0
->
∑øms
;

94 
GíChrP¨am
 *
chromaGíMa2x5x0Cfg
(GíChrP¨am *)
pPl
->
chromaGíMa2x5x0
->
∑øms
;

95 
MedP¨am
 *
medünMa2x5x0Cfg
 = (MedP¨am *)
pPl
->
medünMa2x5x0
->
∑øms
;

96 
ChrDnsP¨am
 *
chromadnsMa2x5x0Cfg
(ChrDnsP¨am *)
pPl
->
chromadnsMa2x5x0
->
∑øms
;

97 
CﬁCombP¨am
 *
cﬁ‹combMa2x5x0Cfg
(CﬁCombP¨am *)
pPl
->
cﬁ‹combMa2x5x0
->
∑øms
;

98 
LutP¨am
 *
lutMa2x5x0Cfg
 = (LutP¨am *)
pPl
->
lutMa2x5x0
->
∑øms
;

99 
DmaP¨am
 *
dmaOut0Cfg
 = (DmaP¨am *)
pPl
->
dmaOut0
->
∑øms
;

104 
sigmaDnsMa2x5x0Cfg
->
thªsh
[0]=(
ISPC_SIGMA_THRESH1_P0
 << 0 | 
ISPC_SIGMA_THRESH2_P0
 << 8 | 
ISPC_SIGMA_THRESH1_P1
 << 16 | 
ISPC_SIGMA_THRESH2_P1
 << 24);

105 
sigmaDnsMa2x5x0Cfg
->
thªsh
[1]=(
ISPC_SIGMA_THRESH1_P2
 << 0 | 
ISPC_SIGMA_THRESH2_P2
 << 8 | 
ISPC_SIGMA_THRESH1_P3
 << 16 | 
ISPC_SIGMA_THRESH2_P3
 << 24);

106 
sigmaDnsMa2x5x0Cfg
->
cfg

	`SIGMA_DNS_CFG
(
ISPC_SIGMA_NOISE_FLOOR
, (
ISPC_BAYER_BITS
 - 1), 
SIGMA_DNS_PASSTHRU_BIT
,
FORMAT
);

107 
sigmaDnsMa2x5x0Cfg
->
bayîP©ã∫
=
GRBG
;

108 
sigmaDnsMa2x5x0Cfg
->
blcGR
=16;

109 
sigmaDnsMa2x5x0Cfg
->
blcR
=16;

110 
sigmaDnsMa2x5x0Cfg
->
blcB
=16;

111 
sigmaDnsMa2x5x0Cfg
->
blcGB
=16;

112 
lscMa2x5x0Cfg
->
gmBa£

i•cLscMesh
;

113 
lscMa2x5x0Cfg
->
gmWidth

ISPC_LSC_GAIN_MAP_W
;

114 
lscMa2x5x0Cfg
->
gmHeight

ISPC_LSC_GAIN_MAP_H
;

115 
lscMa2x5x0Cfg
->
d©aF‹m©
=
	`SIPP_LSC_CFG_FORMAT
(
BAYER
);

116 
lscMa2x5x0Cfg
->
d©aWidth
=
ISPC_BAYER_BITS
;

117 
øwMa2x5x0Cfg
->
grgbPœt

	`RAW_GRGB_PLATO
(
ISPC_GRGB_IMBAL_PLAT_DARK
,
ISPC_GRGB_IMBAL_PLAT_BRIGHT
);

118 
øwMa2x5x0Cfg
->
grgbDeˇy
=
	`RAW_GRGB_DECAY
(
ISPC_GRGB_IMBAL_DECAY_BRIGHT
, 
ISPC_GRGB_IMBAL_DECAY_DARK
);

119 
øwMa2x5x0Cfg
->
badPixCfg
=
	`RAW_BAD_PIX_CFG
(
ISPC_BAD_PIX_NOISE_LEVEL
, 
ISPC_BAD_PIX_ALPHA_G_HOT
, 
ISPC_BAD_PIX_ALPHA_G_COLD
, 
ISPC_BAD_PIX_ALPHA_RB_HOT
, 
ISPC_BAD_PIX_ALPHA_RB_COLD
);

120 
øwMa2x5x0Cfg
->
cfg

	`RAW_CFG
(
BAYER
,
BAYER_PATTERN
,
GRGB_IMBAL_EN
,0,
AE_PATCH_STATS_EN
,
AE_RGB_HIST_STATS_EN
,(
ISPC_BAYER_BITS
 - 1),
ISPC_GRGB_IMBAL_THRESHOLD
,0,
AF_PATCH_STATS_EN
,
BAYER_2x2_MODE
,
AE_Y_HIST_STATS_EN
,
HOT_COLD_PIX_SUPPRESS_EN
);

121 
øwMa2x5x0Cfg
->
gaöS©
[0]=((
ISPC_RAW_CLAMP_0
<<16Ë| 
ISPC_RAW_GAIN_GR
 );

122 
øwMa2x5x0Cfg
->
gaöS©
[1]((
ISPC_RAW_CLAMP_1
<<16Ë| 
ISPC_RAW_GAIN_R
 );

123 
øwMa2x5x0Cfg
->
gaöS©
[2]((
ISPC_RAW_CLAMP_2
<<16Ë| 
ISPC_RAW_GAIN_B
 );

124 
øwMa2x5x0Cfg
->
gaöS©
[3]((
ISPC_RAW_CLAMP_3
<<16Ë| 
ISPC_RAW_GAIN_GB
 );

125 
øwMa2x5x0Cfg
->
°©sBa£
=0;

126 
øwMa2x5x0Cfg
->
°©sPœ√s
=0;

127 
øwMa2x5x0Cfg
->
°©sP©chCfg
=0;

128 
øwMa2x5x0Cfg
->
°©sP©chSèπ
=0;

129 
øwMa2x5x0Cfg
->
°©sP©chSkù
=0;

130 
øwMa2x5x0Cfg
->
°©sThªsh
=0;

131 
øwMa2x5x0Cfg
->
afF1c€fs
[0]=0;

132 
øwMa2x5x0Cfg
->
afF1c€fs
[1]=0;

133 
øwMa2x5x0Cfg
->
afF1c€fs
[2]=0;

134 
øwMa2x5x0Cfg
->
afF1c€fs
[3]=0;

135 
øwMa2x5x0Cfg
->
afF1c€fs
[4]=0;

136 
øwMa2x5x0Cfg
->
afF1c€fs
[5]=0;

137 
øwMa2x5x0Cfg
->
afF1c€fs
[6]=0;

138 
øwMa2x5x0Cfg
->
afF1c€fs
[7]=0;

139 
øwMa2x5x0Cfg
->
afF1c€fs
[8]=0;

140 
øwMa2x5x0Cfg
->
afF1c€fs
[9]=0;

141 
øwMa2x5x0Cfg
->
afF1c€fs
[10]=0;

142 
øwMa2x5x0Cfg
->
afF2c€fs
[0]=0;

143 
øwMa2x5x0Cfg
->
afF2c€fs
[1]=0;

144 
øwMa2x5x0Cfg
->
afF2c€fs
[2]=0;

145 
øwMa2x5x0Cfg
->
afF2c€fs
[3]=0;

146 
øwMa2x5x0Cfg
->
afF2c€fs
[4]=0;

147 
øwMa2x5x0Cfg
->
afF2c€fs
[5]=0;

148 
øwMa2x5x0Cfg
->
afF2c€fs
[6]=0;

149 
øwMa2x5x0Cfg
->
afF2c€fs
[7]=0;

150 
øwMa2x5x0Cfg
->
afF2c€fs
[8]=0;

151 
øwMa2x5x0Cfg
->
afF2c€fs
[9]=0;

152 
øwMa2x5x0Cfg
->
afF2c€fs
[10]=0;

153 
øwMa2x5x0Cfg
->
afMöThªsh
=0;

154 
øwMa2x5x0Cfg
->
afSubåa˘
=0;

155 
øwMa2x5x0Cfg
->
afP©chCfg
=0;

156 
øwMa2x5x0Cfg
->
afP©chSèπ
=0;

157 
øwMa2x5x0Cfg
->
afSètsBa£
=0;

158 
øwMa2x5x0Cfg
->
hi°LumaBa£
=0;

159 
øwMa2x5x0Cfg
->
hi°RgbBa£
=0;

160 
debayîMa2x5x0Cfg
->
cfg

	`DEBAYER_CFG
(
BAYER_PATTERN
,0,0,
ISPC_BAYER_BITS
,
ISPC_DEBAYER_BITS
,
IMAGE_ORDER_OUT
, 
OUTPUT_PLANE_NO
,0);

161 
debayîMa2x5x0Cfg
->
thªsh
=
	`DEBAYER_THRESH
(0,0,1,1,1,0) ;

162 
debayîMa2x5x0Cfg
->
dew‹mCfg
=
	`DEBAYER_DEWORM
(
ISPC_DEMOSAIC_MIX_OFFSET
,
ISPC_DEMOSAIC_MIX_SLOPE
);

163 
debayîMa2x5x0Cfg
->
lumaWeight
=
	`DEBAYER_LUMA_COEFS_CFG
(
ISPC_DEMOSAIC_LUMA_WEIGHT_RED
 , 
ISPC_DEMOSAIC_LUMA_WEIGHT_GREEN
, 
ISPC_DEMOSAIC_LUMA_WEIGHT_BLUE
);

164 
dogLtmMa2x5x0Cfg
->
cfg

	`DOGL_CFG_SET
(
DOG_LTM_MODE
,
ISPC_DOG_THR
,
DOG_OUTPUT_CLAMP
,
DS_MODE
,
ISPC_LTM_FILTER_TH1
,0,
DOG_HEIGHT
);;

165 
dogLtmMa2x5x0Cfg
->
dogC€ffs11
=dogCoeffs11;

166 
dogLtmMa2x5x0Cfg
->
dogC€ffs15
=dogCoeffs15;

167 
dogLtmMa2x5x0Cfg
->
dogSåígth
=
ISPC_DOG_STRENGTH
;

168 
dogLtmMa2x5x0Cfg
->
…mCurves
=(
u16
 *)
…m_curves
;

169 
ydnsMa2x5x0Cfg
->
cfg

	`LUMA_DNS_CFG
(0x1, 
ISPC_LUMA_DNS_REF_SHIFT
, 
ISPC_LUMA_DNS_ALPHA
, 
ISPC_LUMA_DNS_BITPOS
);

170 
ydnsMa2x5x0Cfg
->
gaussLut
[0]=gaussLut[0];

171 
ydnsMa2x5x0Cfg
->
gaussLut
[1]=gaussLut[1];

172 
ydnsMa2x5x0Cfg
->
gaussLut
[2]=gaussLut[2];

173 
ydnsMa2x5x0Cfg
->
gaussLut
[3]=gaussLut[3];

174 
ydnsMa2x5x0Cfg
->
f2

ISPC_LUMA_DNS_F2
;

175 
ydnsMa2x5x0Cfg
->
gammaLut
[0]=gammaLut[0];

176 
ydnsMa2x5x0Cfg
->
gammaLut
[1]=gammaLut[1];

177 
ydnsMa2x5x0Cfg
->
gammaLut
[2]=gammaLut[2];

178 
ydnsMa2x5x0Cfg
->
gammaLut
[3]=gammaLut[3];

179 
ydnsMa2x5x0Cfg
->
gammaLut
[4]=gammaLut[4];

180 
ydnsMa2x5x0Cfg
->
di°Cfg
(
u32
)
i•cYDnsDi°Lut
;

181 
ydnsMa2x5x0Cfg
->
di°Off£ts
=
X_OFFSET
 | (
Y_OFFSET
 << 16);

182 
ydnsMa2x5x0Cfg
->
fuŒFrmDim
=(
FULL_IMAGE_WIDTH
 << 16 ) | 
FULL_IMAGE_HEIGHT
;

183 
sh¨≥nMa2x5x0Cfg
->
cfg

	`SHARPEN_CFG
–
THR
, 
SHARPEN_KERNEL_SIZE
,
OUTPUT_CLAMP
 ,
SHARPEN_MODE
,
OUTPUT_DELTAS
);

184 
sh¨≥nMa2x5x0Cfg
->
°ªngth
=
	`SHARPEN_STRENGTH_CFG
(
SHARPEN_STRENGTH_LIGHTEN
, 
SHARPEN_STRENGTH_DARKEN
 );

185 
sh¨≥nMa2x5x0Cfg
->
˛ù

SHARPEN_CLIPPING_ALPHA
;

186 
sh¨≥nMa2x5x0Cfg
->
limô

	`SHARPEN_LIMITS_CFG
(0x0,0x4000);

187 
sh¨≥nMa2x5x0Cfg
->
rgnSt›01
=
	`SHARPEN_RANGESTOP01_CFG
(
SHARPEN_RANGE_STOP0
, 
SHARPEN_RANGE_STOP1
);

188 
sh¨≥nMa2x5x0Cfg
->
rgnSt›23

	`SHARPEN_RANGESTOP01_CFG
(
SHARPEN_RANGE_STOP2
, 
SHARPEN_RANGE_STOP3
);

189 
sh¨≥nMa2x5x0Cfg
->
c€f01
=
	`SHARPEN_COEFS01_CFG
(0x0,0x0);

190 
sh¨≥nMa2x5x0Cfg
->
c€f23
=
	`SHARPEN_COEFS23_CFG
(0x0,0x0);

191 
chromaGíMa2x5x0Cfg
->
cfg
=
	`CGEN_CFG_SET
(
ISPC_CGEN_PFR_STRENGTH
,
ISPC_CGEN_DESAT_OFFSET
,
ISPC_CGEN_DESAT_SLOPE
,
ISPC_DEBAYER_BITS
,
BYPASS_PF_DAD
,
DS_MODE
);

192 
chromaGíMa2x5x0Cfg
->
yC€fs
=
	`CGEN_LUMA_COEFF_SET
(
ISPC_CGEN_LUMA_COEFF_R
,
ISPC_CGEN_LUMA_COEFF_G
,
ISPC_CGEN_LUMA_COEFF_B
) ;

193 
chromaGíMa2x5x0Cfg
->
chrC€fs
=
	`CGEN_CHROMA_COEFF_SET
(
ISPC_CGEN_EPSILON
,
ISPC_CGEN_KR
,
ISPC_CGEN_KG
,
ISPC_CGEN_KB
);

194 
medünMa2x5x0Cfg
->
cfg

	`MED_CFG
(
MEDIAN_KERNEL_SIZE
,
MEDIAN_OUT_SEL
,
MEDIAN_THRESHOLD
,
MEDIAN_LUMA_ABLEND_EN
,
MEDIAN_LUMA_SAMPLE_EN
,0);

195 
medünMa2x5x0Cfg
->
lumaAÕha
=
	`MED_LUMA_ALPHA
(
ISPC_CHROMA_MEDIAN_MIX_SLOPE
,
ISPC_CHROMA_MEDIAN_MIX_OFFSET
);

196 
chromadnsMa2x5x0Cfg
->
cfg
=
	`CHROMA_DNS_CFG
(
ISPC_CHROMA_DNS_H_ENAB
,
ISPC_CHROMA_DNS_LIMIT
,
FORCE_WT_H
,
FORCE_WT_V
,(
PLANES_PER_CYCLE
-1),
ISPC_GREY_DESAT_OFFSET
,
ISPC_GREY_DESAT_SLOPE
);

197 
chromadnsMa2x5x0Cfg
->
thr
[0]=
CHROMA_DNS_THRESH0
;

198 
chromadnsMa2x5x0Cfg
->
thr
[1]=
CHROMA_DNS_THRESH1
;

199 
chromadnsMa2x5x0Cfg
->
gªyPt
=
	`CHORMA_GREY_PT_SET
(
ISPC_GREY_POINT_B
,
ISPC_GREY_POINT_G
,
ISPC_GREY_POINT_R
,
GREY_PT_EN
);

200 
chromadnsMa2x5x0Cfg
->
chrC€fs
=
	`CHROMA_DNS_COEFFS_SET
(
i•cLow∑ssKî√l
[4],ispcLowpassKernel[1],ispcLowpassKernel[0]);

201 
cﬁ‹combMa2x5x0Cfg
->
cfg
=
	`CC_CFG
(
FORCE_LUMA_ONE
,0,
LUT_3D_BYPASS
,
LUT_3D_LOAD
,
U12F_OUTPUT
,
CC_OUTPUT_PLANE
);

202 
cﬁ‹combMa2x5x0Cfg
->
krgb
[0]=
ISPC_CC_KR
 | (
ISPC_CC_KG
 << 16);

203 
cﬁ‹combMa2x5x0Cfg
->
krgb
[1]=(
ISPC_CC_KB
 | (
ISPC_CGEN_EPSILON
 << 16));

204 
cﬁ‹combMa2x5x0Cfg
->
ccm
[0]=(
ccm_lut_c€ffs
[0] | (ccm_lut_coeffs[3] << 16));

205 
cﬁ‹combMa2x5x0Cfg
->
ccm
[1]=(
ccm_lut_c€ffs
[6] | (ccm_lut_coeffs[1] << 16));

206 
cﬁ‹combMa2x5x0Cfg
->
ccm
[2]=(
ccm_lut_c€ffs
[4] | (ccm_lut_coeffs[7] << 16));

207 
cﬁ‹combMa2x5x0Cfg
->
ccm
[3]=(
ccm_lut_c€ffs
[2] | (ccm_lut_coeffs[5] << 16));

208 
cﬁ‹combMa2x5x0Cfg
->
ccm
[4]=(
ccm_lut_c€ffs
[8] | (
ccm_lut_off£ts
[0] << 16));

209 
cﬁ‹combMa2x5x0Cfg
->
ccOffs
=(
ccm_lut_off£ts
[1] | (ccm_lut_offsets[2] << 16));

210 
cﬁ‹combMa2x5x0Cfg
->
thªeDLut
=0x0;

211 
cﬁ‹combMa2x5x0Cfg
->
lutF‹m©
=0x0;

212 
lutMa2x5x0Cfg
->
cfg

INTERP_MODE
 | 
CHANNEL_MODE
<< 1 | (
CHANNELS_NO
 - 1Ë<< 12 | 
LUT_LOAD
 << 14 | 
CSC_ENABLE
<< 16;

213 
lutMa2x5x0Cfg
->
sizeA

LUT_REGION0_SIZE_I
 | (
LUT_REGION1_SIZE_I
 << 4Ë| (
LUT_REGION2_SIZE_I
 << 8Ë| (
LUT_REGION3_SIZE_I
 << 12Ë| (
LUT_REGION4_SIZE_I
 << 16Ë| (
LUT_REGION5_SIZE_I
 << 20Ë| (
LUT_REGION6_SIZE_I
 << 24Ë| (
LUT_REGION7_SIZE_I
 << 28);

214 
lutMa2x5x0Cfg
->
sizeB

LUT_REGION8_SIZE_I
 | (
LUT_REGION9_SIZE_I
 << 4Ë| (
LUT_REGION10_SIZE_I
 << 8Ë| (
LUT_REGION11_SIZE_I
 << 12Ë| (
LUT_REGION12_SIZE_I
 << 16Ë| (
LUT_REGION13_SIZE_I
 << 20Ë| (
LUT_REGION14_SIZE_I
 << 24Ë| (
LUT_REGION15_SIZE_I
 << 28);

215 
lutMa2x5x0Cfg
->
lut
(*)
gammaLutFp16
;

216 
lutMa2x5x0Cfg
->
lutF‹m©
=
LUT_LD_FORMAT
;

217 
lutMa2x5x0Cfg
->
m©
[0]
LUT_MAT_11
;

218 
lutMa2x5x0Cfg
->
m©
[1]
LUT_MAT_12
;

219 
lutMa2x5x0Cfg
->
m©
[2]
LUT_MAT_13
;

220 
lutMa2x5x0Cfg
->
m©
[3]
LUT_MAT_21
;

221 
lutMa2x5x0Cfg
->
m©
[4]
LUT_MAT_22
;

222 
lutMa2x5x0Cfg
->
m©
[5]
LUT_MAT_23
;

223 
lutMa2x5x0Cfg
->
m©
[6]
LUT_MAT_31
;

224 
lutMa2x5x0Cfg
->
m©
[7]
LUT_MAT_32
;

225 
lutMa2x5x0Cfg
->
m©
[8]
LUT_MAT_33
;

226 
lutMa2x5x0Cfg
->
off£t
[0]=
LUT_OFF_1
;

227 
lutMa2x5x0Cfg
->
off£t
[1]=
LUT_OFF_2
;

228 
lutMa2x5x0Cfg
->
off£t
[2]=
LUT_OFF_3
;

229 
dmaIn0Cfg
->
ddrAddr
 = (
UI¡32
)&
ISPPùe_dmaIn0_buf„r
;

230 
dmaOut0Cfg
->
ddrAddr
 = (
UI¡32
)&
ISPPùe_dmaOut0_buf„r
;

233 
	}
}

	@Sipp/SippFw/Runtimes/ISPPipe/leon/ISPPipe.h

13 #i‚de‡
__ISPPIPE_H__


14 
	#__ISPPIPE_H__


	)

16 
	~<sùp.h
>

17 
	~<sùpTe°Comm⁄.h
>

19 
	~"ISPPùeSëtögs.h
"

23 
UI¡16
 
DDR_DATA
 
ISPPùe_dmaIn0_buf„r
[ 
SIPP_ISP_PIPE_BUFFER_WIDTH
 * 
SIPP_ISP_PIPE_BUFFER_HEIGHT
 * 
SIPP_ISP_PIPE_BUFFER_INPUT_NUM_PLANES
 ]
ALIGNED
(8);

24 
UI¡8
 
DDR_DATA
 
ISPPùe_dmaOut0_buf„r
[ 
SIPP_ISP_PIPE_BUFFER_WIDTH
 * 
SIPP_ISP_PIPE_BUFFER_HEIGHT
 * 
SIPP_ISP_PIPE_BUFFER_OUTPUT_NUM_PLANES
 ]
ALIGNED
(8);

28 
	sISPPùe


31 
SùpPùñöe
 *
	m∂
;

34 
SùpFûãr
 *
	mdmaIn0
;

35 
SùpFûãr
 *
	msigmaDnsMa2x5x0
;

36 
SùpFûãr
 *
	mlscMa2x5x0
;

37 
SùpFûãr
 *
	møwMa2x5x0
;

38 
SùpFûãr
 *
	mdebayîMa2x5x0
;

39 
SùpFûãr
 *
	mdogLtmMa2x5x0
;

40 
SùpFûãr
 *
	mydnsMa2x5x0
;

41 
SùpFûãr
 *
	msh¨≥nMa2x5x0
;

42 
SùpFûãr
 *
	mchromaGíMa2x5x0
;

43 
SùpFûãr
 *
	mmedünMa2x5x0
;

44 
SùpFûãr
 *
	mchromadnsMa2x5x0
;

45 
SùpFûãr
 *
	mcﬁ‹combMa2x5x0
;

46 
SùpFûãr
 *
	mlutMa2x5x0
;

47 
SùpFûãr
 *
	mdmaOut0
;

49 } 
	tISPPùe
;

51 
ªadISPPùeI≈ut
(
ISPPùe
 *
pPl
);

52 
wrôeISPPùeOuçut
(
ISPPùe
 *
pPl
);

54 
buûdISPPùe
(
ISPPùe
 *
pPl
);

55 
c⁄figISPPùe
(
ISPPùe
 *
pPl
);

	@Sipp/SippFw/Runtimes/ISPPipe/leon/ISPPipeSettings.h

4 #i‚de‡
_ISP_PIPE_SETTINGS_H_


5 
	#_ISP_PIPE_SETTINGS_H_


	)

12 
	#SIPP_ISP_PIPE_BUFFER_WIDTH
 1920

	)

13 
	#SIPP_ISP_PIPE_BUFFER_HEIGHT
 1080

	)

14 
	#SIPP_ISP_PIPE_BUFFER_INPUT_NUM_PLANES
 1

	)

15 
	#SIPP_ISP_PIPE_BUFFER_OUTPUT_NUM_PLANES
 3

	)

17 
	#ISPC_BAYER_BITS
 10

	)

18 
	#BAYER_PATTERN
 
RGGB


	)

19 
	#FORMAT
 
BAYER


	)

20 
	#FULL_IMAGE_WIDTH
 
SIPP_ISP_PIPE_BUFFER_WIDTH


	)

21 
	#FULL_IMAGE_HEIGHT
 
SIPP_ISP_PIPE_BUFFER_HEIGHT


	)

22 
	#ISPC_CHROMA_PIPE_WIDTH
 (
FULL_IMAGE_WIDTH
 >> 0x1)

	)

23 
	#ISPC_CHROMA_PIPE_HEIGHT
 (
FULL_IMAGE_HEIGHT
 >> 0x1)

	)

31 
	#ISPC_SIGMA_NOISE_FLOOR
 51

	)

32 
	#ISPC_SIGMA_THRESH1_P0
 9

	)

33 
	#ISPC_SIGMA_THRESH2_P0
 18

	)

34 
	#ISPC_SIGMA_THRESH1_P1
 9

	)

35 
	#ISPC_SIGMA_THRESH2_P1
 18

	)

36 
	#ISPC_SIGMA_THRESH1_P2
 9

	)

37 
	#ISPC_SIGMA_THRESH2_P2
 18

	)

38 
	#ISPC_SIGMA_THRESH1_P3
 9

	)

39 
	#ISPC_SIGMA_THRESH2_P3
 18

	)

41 
	#SIGMA_DNS_PASSTHRU_BIT
 
DISABLED


	)

47 
	#ISPC_LSC_GAIN_MAP_W
 60

	)

48 
	#ISPC_LSC_GAIN_MAP_H
 44

	)

50 
uöt16_t
 
i•cLscMesh
[
ISPC_LSC_GAIN_MAP_W
 * 
ISPC_LSC_GAIN_MAP_H
];

56 
	#ISPC_BAD_PIX_ALPHA_G_HOT
 0x5

57 
	#ISPC_BAD_PIX_ALPHA_RB_HOT
 0x2

58 
	#ISPC_BAD_PIX_ALPHA_G_COLD
 0x5

59 
	#ISPC_BAD_PIX_ALPHA_RB_COLD
 0x5

60 
	#ISPC_BAD_PIX_NOISE_LEVEL
 0x00a3

61 

	)

63 
	#ISPC_GRGB_IMBAL_PLAT_DARK
 150

	)

64 
	#ISPC_GRGB_IMBAL_DECAY_DARK
 200

	)

65 
	#ISPC_GRGB_IMBAL_PLAT_BRIGHT
 400

	)

66 
	#ISPC_GRGB_IMBAL_DECAY_BRIGHT
 500

	)

67 
	#ISPC_GRGB_IMBAL_THRESHOLD
 16

68 

	)

69 
	#ISPC_RAW_GAIN_R
 1148

70 
	#ISPC_RAW_GAIN_GR
 988

71 
	#ISPC_RAW_GAIN_GB
 988

72 
	#ISPC_RAW_GAIN_B
 2273

73 

	)

74 
	#ISPC_RAW_CLAMP_0
 1023

75 
	#ISPC_RAW_CLAMP_1
 1023

76 
	#ISPC_RAW_CLAMP_2
 1023

77 
	#ISPC_RAW_CLAMP_3
 1023

78 

	)

79 
	#ISPC_RAW_OUTPUT_BITS
 10

	)

82 
	#GRGB_IMBAL_EN
 
ENABLED


	)

83 
	#AE_PATCH_STATS_EN
 
DISABLED


	)

84 
	#AF_PATCH_STATS_EN
 
DISABLED


	)

85 
	#AE_Y_HIST_STATS_EN
 
DISABLED


	)

86 
	#AE_RGB_HIST_STATS_EN
 
DISABLED


	)

87 
	#HOT_COLD_PIX_SUPPRESS_EN
 
ENABLED


	)

88 
	#BAYER_2x2_MODE
 1

	)

93 
	#ISPC_DEBAYER_BITS
 12

	)

94 
	#RGB_EN
 1

	)

95 
	#FORCE_RB_ZERO
 0

	)

96 
	#IMAGE_ORDER_OUT
 
P_RGB


	)

97 
	#OUTPUT_PLANE_NO
 3

	)

99 
	#ISPC_DEMOSAIC_MIX_SLOPE
 0

	)

100 
	#ISPC_DEMOSAIC_MIX_OFFSET
 0

	)

101 
	#ISPC_DEMOSAIC_MIX_GRADIENT_MUL
 0

	)

102 
	#ISPC_DEMOSAIC_LUMA_WEIGHT_RED
 77

	)

103 
	#ISPC_DEMOSAIC_LUMA_WEIGHT_GREEN
 150

	)

104 
	#ISPC_DEMOSAIC_LUMA_WEIGHT_BLUE
 29

	)

109 
	#MODE_DOG_ONLY
 0x0

	)

110 
	#MODE_LTM_ONLY
 0x1

	)

111 
	#MODE_DOG_DENOISE
 0x2

	)

112 
	#MODE_DOG_LTM
 0x3

	)

113 
	#DOG_LTM_MODE
 
MODE_DOG_LTM


	)

115 
	#DOG_OUTPUT_CLAMP
 
DISABLED


	)

116 
	#DOG_HEIGHT
 15

	)

118 
i•cLtmCurves
[16*8];

121 
	#ISPC_LTM_FILTER_TH1
 35

	)

124 
	#ISPC_DOG_THR
 4

	)

125 
	#ISPC_DOG_STRENGTH
 191

	)

127 
uöt8_t
 
dogC€ffs11
[6];

128 
uöt8_t
 
dogC€ffs15
[8];

129 
u16
 
…m_curves
[16*8];

131 
	#DSMODE_CARRY
 0x0

	)

132 
	#DSMODE_DOWN
 0x1

	)

133 
	#DSMODE_UPDN
 0x2

	)

134 
	#DS_MODE
 
DSMODE_DOWN


	)

143 
	#ISPC_LUMA_DNS_F2
 0xØØa9a4

	)

144 
	#ISPC_LUMA_DNS_BITPOS
 7

	)

146 
uöt8_t
 
i•cLumaDnsLut
[32];

148 
uöt8_t
 
i•cYDnsDi°Lut
[256];

150 
uöt8_t
 
i•cGammaLut0_32
[9];

151 
uöt8_t
 
i•cGammaLut32_255
[9];

153 
	#ISPC_LUMA_DNS_REF_SHIFT
 15

	)

154 
	#X_OFFSET
 0

	)

155 
	#Y_OFFSET
 0

	)

157 
u32
 
gaussLut
[4];

158 
u32
 
gammaLut
[5];

160 
	#ISPC_LUMA_DNS_STRENGTH
 150.000000

	)

161 
	#ISPC_LUMA_DNS_ALPHA
 128

162 

	)

166 
	#SHARPEN_KERNEL_SIZE
 7

	)

168 
	#SHARPEN_STRENGTH_DARKEN
 0x0000

169 
	#SHARPEN_STRENGTH_LIGHTEN
 0x0000

170 
	#SHARPEN_CLIPPING_ALPHA
 0x0000

171 
	#SHARPEN_RANGE_STOP0
 0x0000

	)

172 
	#SHARPEN_RANGE_STOP1
 0x0000

	)

173 
	#SHARPEN_RANGE_STOP2
 0x0000

	)

174 
	#SHARPEN_RANGE_STOP3
 0x0000

	)

175 
	#SHARPENING
 0

	)

176 
	#BLURRING
 1

	)

177 
	#SHARPEN_MODE
 
SHARPENING


	)

178 
	#OUTPUT_DELTAS
 0

	)

179 
	#THR
 0x0

	)

180 
	#OUTPUT_CLAMP
 1

	)

183 
	#ISPC_SHARP_SIGMA
 2.000000

	)

186 
	#ISPC_SHARP_ALPHA
 0.700000

	)

187 
	#ISPC_SHARP_OVERSHOOT
 1.050000

	)

188 
	#ISPC_SHARP_UNDERSHOOT
 1.000000

	)

189 
	#ISPC_SHARP_RANGE_STOP_0
 0.003922

	)

190 
	#ISPC_SHARP_RANGE_STOP_1
 0.019608

	)

191 
	#ISPC_SHARP_RANGE_STOP_2
 0.980392

	)

192 
	#ISPC_SHARP_RANGE_STOP_3
 1.000000

	)

193 
	#ISPC_SHARP_MIN_THR
 0.000000

	)

194 
	#ISPC_SHARP_COEF0
 0.070159

	)

195 
	#ISPC_SHARP_COEF1
 0.131075

	)

196 
	#ISPC_SHARP_COEF2
 0.190713

	)

197 
	#ISPC_SHARP_COEF3
 0.216106

	)

203 
	#ISPC_CGEN_EPSILON
 1

	)

204 
	#ISPC_CGEN_KR
 106

	)

205 
	#ISPC_CGEN_KG
 191

	)

206 
	#ISPC_CGEN_KB
 149

	)

207 
	#ISPC_CGEN_LUMA_COEFF_R
 76

	)

208 
	#ISPC_CGEN_LUMA_COEFF_G
 150

	)

209 
	#ISPC_CGEN_LUMA_COEFF_B
 29

	)

210 
	#ISPC_CGEN_PFR_STRENGTH
 80

	)

211 
	#ISPC_CGEN_DESAT_OFFSET
 4

	)

212 
	#ISPC_CGEN_DESAT_SLOPE
 43

	)

214 
	#BYPASS_PF_DAD
 
DISABLED


	)

215 
	#DSMODE_CARRY
 0x0

	)

216 
	#DSMODE_DOWN
 0x1

	)

217 
	#DSMODE_UPDN
 0x2

	)

218 
	#DS_MODE
 
DSMODE_DOWN


	)

223 
	#MEDIAN_KERNEL_SIZE
 0x7

224 
	#MEDIAN_THRESHOLD
 0x1FF

	)

225 
	#MEDIAN_OUT_SEL
 ((
MEDIAN_KERNEL_SIZE
 >> 1Ë* (MEDIAN_KERNEL_SIZEË+ (MEDIAN_KERNEL_SIZE >> 1))

	)

226 
	#MEDIAN_LUMA_ABLEND_EN
 
ENABLED


	)

227 
	#MEDIAN_LUMA_SAMPLE_EN
 
ENABLED


	)

229 
	#ISPC_CHROMA_MEDIAN_MIX_SLOPE
 10

	)

230 
	#ISPC_CHROMA_MEDIAN_MIX_OFFSET
 -26

	)

235 
	#ISPC_CHROMA_DNS_TH_R
 20

	)

236 
	#ISPC_CHROMA_DNS_TH_G
 15

	)

237 
	#ISPC_CHROMA_DNS_TH_B
 38

	)

238 
	#ISPC_CHROMA_DNS_LIMIT
 100

	)

239 
	#ISPC_CHROMA_DNS_H_ENAB
 7

	)

240 
	#PLANES_PER_CYCLE
 3

	)

241 
	#FORCE_WT_H
 0

	)

242 
	#FORCE_WT_V
 0

	)

245 
	#ISPC_GREY_DESAT_OFFSET
 -35

	)

246 
	#ISPC_GREY_DESAT_SLOPE
 7

	)

247 
	#ISPC_GREY_POINT_R
 106

	)

248 
	#ISPC_GREY_POINT_G
 137

	)

249 
	#ISPC_GREY_POINT_B
 75

	)

250 
	#GREY_PT_EN
 
DISABLED


	)

252 
uöt8_t
 
i•cLow∑ssKî√l
[9];

254 
	#ISPC_CHROMA_DNS_TH_R
 20

	)

255 
	#ISPC_CHROMA_DNS_TH_G
 15

	)

256 
	#ISPC_CHROMA_DNS_TH_B
 38

	)

258 
	#CHROMA_DNS_THRESH0
 (
ISPC_CHROMA_DNS_TH_R
 | (ISPC_CHROMA_DNS_TH_R << 16Ë| (
ISPC_CHROMA_DNS_TH_G
 << 8Ë| (ISPC_CHROMA_DNS_TH_G << 24))

	)

259 
	#CHROMA_DNS_THRESH1
 (
ISPC_CHROMA_DNS_TH_B
 | (ISPC_CHROMA_DNS_TH_B << 16))

	)

263 
i•cCCM
[9];

264 
i•cCCMOff
[3];

266 
	#FORCE_LUMA_ONE
 
DISABLED


	)

267 
	#LUT_3D_BYPASS
 
ENABLED


	)

268 
	#LUT_3D_LOAD
 
DISABLED


	)

269 
	#U12F_OUTPUT
 
DISABLED


	)

270 
	#MUL
 255

	)

271 
	#CC_OUTPUT_PLANE
 3

	)

273 
	#T1
 2

	)

275 
	#ISPC_CC_KR
 618

	)

276 
	#ISPC_CC_KG
 343

	)

277 
	#ISPC_CC_KB
 440

	)

279 
u16
 
ccm_lut_c€ffs
[9];

280 
u16
 
ccm_lut_off£ts
[3];

285 
	#INTERP_MODE
 
ENABLED


	)

286 
	#CHANNEL_MODE
 
ENABLED


	)

287 
	#INT_WIDTH
 12

	)

288 
	#LUTS_NO
 2

	)

289 
	#LUT_LOAD
 
ENABLED


	)

290 
	#APB_ACCESS
 
DISABLED


	)

291 
	#CSC_ENABLE
 
ENABLED


	)

292 
	#CHANNELS_NO
 3

	)

294 
i•cGammaTabÀ
[8192];

295 
uöt16_t
 
gammaLutFp16
[512*4];

296 
i•cCSC
[9];

297 
i•cCSCOff
[3];

299 
uöt16_t
 
lut3d
[16*16*16*4];

301 
u16
 
csc_lut_c€ffs
[9];

302 
u16
 
csc_lut_off£ts
[3];

304 
	#LUT_LD_FORMAT
 0

	)

306 
	#LUT_MAT_11
 
csc_lut_c€ffs
[0]

	)

307 
	#LUT_MAT_12
 
csc_lut_c€ffs
[1]

	)

308 
	#LUT_MAT_13
 
csc_lut_c€ffs
[2]

	)

309 
	#LUT_MAT_21
 
csc_lut_c€ffs
[3]

	)

310 
	#LUT_MAT_22
 
csc_lut_c€ffs
[4]

	)

311 
	#LUT_MAT_23
 
csc_lut_c€ffs
[5]

	)

312 
	#LUT_MAT_31
 
csc_lut_c€ffs
[6]

	)

313 
	#LUT_MAT_32
 
csc_lut_c€ffs
[7]

	)

314 
	#LUT_MAT_33
 
csc_lut_c€ffs
[8]

	)

315 
	#LUT_OFF_1
 
csc_lut_off£ts
[0]

	)

316 
	#LUT_OFF_2
 
csc_lut_off£ts
[1]

	)

317 
	#LUT_OFF_3
 
csc_lut_off£ts
[2]

	)

319 
	#LUT_REGION0_SIZE_I
 5

	)

320 
	#LUT_REGION1_SIZE_I
 5

	)

321 
	#LUT_REGION2_SIZE_I
 5

	)

322 
	#LUT_REGION3_SIZE_I
 5

	)

323 
	#LUT_REGION4_SIZE_I
 5

	)

324 
	#LUT_REGION5_SIZE_I
 5

	)

325 
	#LUT_REGION6_SIZE_I
 5

	)

326 
	#LUT_REGION7_SIZE_I
 5

	)

328 
	#LUT_REGION8_SIZE_I
 5

	)

329 
	#LUT_REGION9_SIZE_I
 5

	)

330 
	#LUT_REGION10_SIZE_I
 5

	)

331 
	#LUT_REGION11_SIZE_I
 5

	)

332 
	#LUT_REGION12_SIZE_I
 5

	)

333 
	#LUT_REGION13_SIZE_I
 5

	)

334 
	#LUT_REGION14_SIZE_I
 5

	)

335 
	#LUT_REGION15_SIZE_I
 5

	)

	@Sipp/SippFw/Runtimes/ISPPipe/leon/app_config.c

13 
	~<ªgi°îsMyrüd.h
>

14 
	~<DrvC¥.h
>

19 #i‚de‡
IPIPE_CLK_CONFIG_SEL


20 
	#ùùeClockC⁄fig
 
ùùeClkC⁄figMV182


	)

22 
	#ùùeClockC⁄fig
 
IPIPE_CLK_CONFIG_SEL


	)

35 
tyAuxClkDividîCfg
 
	gauxClkAŒOn
[] =

37 {0x0FFFFFFF & (~(1<<
CSS_AUX_DDR_CORE
)Ë, 
CLK_SRC_REFCLK0
, 1, 1},

42 
tySocClockC⁄fig
 
	gùùeClkC⁄figMV182
 =

44 .
ªfClk0I≈utKhz
 = 12000,

45 .
	gªfClk1I≈utKhz
 = 0,

46 .
	gèrgëPŒ0FªqKhz
 = 504000,

47 .
	gèrgëPŒ1FªqKhz
 = 0,

48 .
	g˛kSrcPŒ1
 = 
CLK_SRC_REFCLK0
,

49 .
	gma°îClkDivNumî©‹
 = 
DONT_TOUCH_MASTER_DIVIDER
,

50 .
	gma°îClkDivDíomö©‹
 = 
DONT_TOUCH_MASTER_DIVIDER
,

51 .
	gcssDssClockE«bÀMask
 = 0xFFFFFFFFFFFFFFFFULL,

52 .
	gmssClockE«bÀMask
 = 0xFFFFFFFF,

53 .
	gsùpClockE«bÀMask
 = 0xFFFFFFFF,

54 .
	gu∑ClockE«bÀMask
 = 0xFFFFFFFF,

55 .
	gpAuxClkCfg
 = 
auxClkAŒOn
,

67 
	$öôClocksAndMem‹y
()

69 
	`DrvC¥Inô
();

70 
	`DrvC¥SëupClocks
(&
ùùeClockC⁄fig
);

73 
	}
}

	@Sipp/SippFw/Runtimes/ISPPipe/leon/app_config.h

9 #i‚de‡
_APP_CONFIG_H_


10 
	#_APP_CONFIG_H_


	)

16 
öôClocksAndMem‹y
();

	@Sipp/SippFw/Runtimes/ISPPipe/leon/main.c

8 #i‡
deföed
(
SIPP_VCS
)

9 
	~<DrvTimî.h
>

10 
	~<DrvDdr.h
>

13 
	~"≠p_c⁄fig.h
"

14 
	~"ISPPùe.h
"

19 
	#SIPP_TEST_NUM_FRAMES
 5

	)

20 
	#USE_PRECOMP_SCHED


	)

26 
ISPPùe
 
	gmyPl
;

27 vﬁ©ûê
u32
 
	gã°Com∂ëe
 = 0;

28 vﬁ©ûê
u32
 
	g‰ameD⁄e
 = 0;

29 vﬁ©ûê
u32
 
	g‰amesCom∂ëe
 = 0;

35 
ISPPùeCª©eP¨ams
 ( );

37 
	$≠pSùpCÆlback
 ( 
SùpPùñöe
 * 
pPùñöe
,

38 
eSIPP_PIPELINE_EVENT
 
eEvít
,

39 
SIPP_PIPELINE_EVENT_DATA
 * 
±EvítD©a


42 
	`UNUSED
(
pPùñöe
);

43 
	`UNUSED
(
±EvítD©a
);

45 i‡(
eEvít
 =
eSIPP_PIPELINE_FRAME_DONE
)

47 
‰ameD⁄e
 = 1;

48 
‰amesCom∂ëe
++;

49 
	`¥ötf
 ("≠pSùpCÆlback : Fømêd⁄êevíàª˚ived : %lu\n", 
‰amesCom∂ëe
);

53 
	}
}

55 
	$≠pTask
 (
SùpPùñöe
 * 
pPùñöe
)

57 
ã°Com∂ëe
 == 0)

59 i‡(
‰ameD⁄e
)

61 
‰ameD⁄e
 = 0;

63 i‡(
‰amesCom∂ëe
 =
SIPP_TEST_NUM_FRAMES
)

65 
ã°Com∂ëe
 = 1;

66 
	`¥ötf
 ("≠pTask : %lu fømesCom∂ëêTe°Öro˚edögÅÿcheck†™dÅîmö©i⁄\n", 
‰amesCom∂ëe
);

70 
	`¥ötf
("CallÖrocess frameásync\n");

71 
	`sùpPro˚ssFømeNB
 (
pPùñöe
);

75 
	}
}

78 
	$maö
 (
¨gc
, *
¨gv
[])

80 
	`UNUSED
 (
¨gc
);

81 
	`UNUSED
 (
¨gv
);

82 
u32
 
sùpEº‹Log
[
SIPP_ERROR_HISTORY_SIZE
];

84 
uöt64_t
 
°¨tT
, 
ídT
, 
‰ameT
;

86 
	`sùpPœtf‹mInô
 ();

88 i‡(
PROCESS_LEON_OS
 =
	`swcWhoAmI
())

90 
	`¥ötf
 ("App Starting on LEON OS\n");

91 
	`¥ötf
 ("Please make sure IRQ sources for dynamicallyÑoute between LeonOSánd LeonRTáre set\n");

95 
	`¥ötf
 ("App Starting on LEON RT\n");

98 
	`sùpPœtf‹mInôAsync
 ();

100 #ifde‡
SIPP_VCS


101 
	`unôTe°Inô
 ();

102 
	`DrvTimîInô
 ();

103 
	`DrvDdrInôüli£
 (
NULL
);

106 
	`buûdISPPùe
 (&
myPl
);

108 i‡(
	`sùpPùeGëEº‹Sètus
 (
myPl
.
∂
))

110 
u32
 
îrNum
;

111 
	`¥ötf
 ("Pipeline creationÉrror\nError codes:\n");

112 
îrNum
 = 
	`sùpGëEº‹Hi°‹y
 (
sùpEº‹Log
);

113 
îrNum
)

115 
	`¥ötf
 ("%08lx\n", 
sùpEº‹Log
[
îrNum
 - 0x1]);

116 
îrNum
--;

120 #ifde‡
USE_PRECOMP_SCHED


121 
	`sùpPùeSëNumLöesPîBuf
 (
myPl
.
dmaIn0
, 0, 24);

122 
	`sùpPùeSëNumLöesPîBuf
 (
myPl
.
debayîMa2x5x0
, 1, 32);

123 
	`sùpPùeSëNumLöesPîBuf
 (
myPl
.
sh¨≥nMa2x5x0
, 0, 8);

124 
	`sùpPùeSëNumLöesPîBuf
 (
myPl
.
lutMa2x5x0
, 0, 16);

128 
	`sùpRegi°îEvítCÆlback
 (
myPl
.
∂
,

129 
≠pSùpCÆlback
);

130 
	`ISPPùeCª©eP¨ams
 ();

131 
	`c⁄figISPPùe
 (&
myPl
);

133 
	`ªadISPPùeI≈ut
 (&
myPl
);

136 
myPl
.
∂
->
Êags
 |
PLF_CONSIDER_OPIPE_RT
;

138 
	`sùpFöÆizePùñöe
 (
myPl
.
∂
);

140 
	`DrvTimîGëSy°emTicks64
 (&
°¨tT
);

143 
ã°Com∂ëe
 = 0;

144 
	`sùpPro˚ssFømeNB
 (
myPl
.
∂
);

146 i‡(
	`sùpPùeGëEº‹Sètus
 (
myPl
.
∂
))

148 
u32
 
îrNum
;

149 
	`¥ötf
 ("PipelineÑuntimeÉrror\nError codes:\n");

150 
îrNum
 = 
	`sùpGëEº‹Hi°‹y
 (
sùpEº‹Log
);

151 
îrNum
)

153 
	`¥ötf
 ("%08lx\n", 
sùpEº‹Log
[
îrNum
 - 0x1]);

154 
îrNum
--;

158 
	`≠pTask
 (
myPl
.
∂
);

160 
	`DrvTimîGëSy°emTicks64
 (&
ídT
);

161 
‰ameT
 = 
ídT
 - 
°¨tT
;

162 
	`¥ötf
(" Pîf‹m™˚: %‡cc/pix \n", (()
‰ameT
Ë/ (
SIPP_ISP_PIPE_BUFFER_WIDTH
 * 
SIPP_ISP_PIPE_BUFFER_HEIGHT
 * 
SIPP_TEST_NUM_FRAMES
));

164 
	`wrôeISPPùeOuçut
 (&
myPl
);

166 #i‡
	`deföed
(
MA2150
)

167 
	`sùpRdFûeU8
 ((
UI¡8
*)
ISPPùe_dmaIn0_buf„r
, 
SIPP_ISP_PIPE_BUFFER_WIDTH
 * 
SIPP_ISP_PIPE_BUFFER_HEIGHT
 * 
SIPP_ISP_PIPE_BUFFER_OUTPUT_NUM_PLANES
, "../../../../../../../resources/ref_isp_out_ma2150_1920x1080_P444.yuv");

168 #ñi‡
	`deföed
(
MA2450
)

169 
	`sùpRdFûeU8
 ((
UI¡8
*)
ISPPùe_dmaIn0_buf„r
, 
SIPP_ISP_PIPE_BUFFER_WIDTH
 * 
SIPP_ISP_PIPE_BUFFER_HEIGHT
 * 
SIPP_ISP_PIPE_BUFFER_OUTPUT_NUM_PLANES
, "../../../../../../../resources/ref_isp_out_ma2450_1920x1080_P444.yuv");

172 
	`sùpDbgCom∑ªU8
((
UI¡8
*)
ISPPùe_dmaIn0_buf„r
, 
ISPPùe_dmaOut0_buf„r
, 
SIPP_ISP_PIPE_BUFFER_WIDTH
 * 
SIPP_ISP_PIPE_BUFFER_HEIGHT
 * 
SIPP_ISP_PIPE_BUFFER_OUTPUT_NUM_PLANES
);

174 #ifde‡
SIPP_VCS


175 
	`unôTe°FöÆRï‹t
();

179 
	}
}

	@Sipp/SippFw/Runtimes/MonoPipe/leon/app_config.c

13 
	~<ªgi°îsMyrüd.h
>

14 
	~<DrvC¥.h
>

19 #i‚de‡
IPIPE_CLK_CONFIG_SEL


20 
	#ùùeClockC⁄fig
 
ùùeClkC⁄figMV182


	)

22 
	#ùùeClockC⁄fig
 
IPIPE_CLK_CONFIG_SEL


	)

32 
tyAuxClkDividîCfg
 
	gauxClkAŒOn
[] =

34 {0x0FFFFFFF & (~(1<<
CSS_AUX_DDR_CORE
)Ë, 
CLK_SRC_REFCLK0
, 1, 1},

39 
tySocClockC⁄fig
 
	gùùeClkC⁄figMV182
 =

41 .
ªfClk0I≈utKhz
 = 12000,

42 .
	gªfClk1I≈utKhz
 = 0,

43 .
	gèrgëPŒ0FªqKhz
 = 504000,

44 .
	gèrgëPŒ1FªqKhz
 = 0,

45 .
	g˛kSrcPŒ1
 = 
CLK_SRC_REFCLK0
,

46 .
	gma°îClkDivNumî©‹
 = 
DONT_TOUCH_MASTER_DIVIDER
,

47 .
	gma°îClkDivDíomö©‹
 = 
DONT_TOUCH_MASTER_DIVIDER
,

48 .
	gcssDssClockE«bÀMask
 = 0xFFFFFFFFFFFFFFFFULL,

49 .
	gmssClockE«bÀMask
 = 0xFFFFFFFF,

50 .
	gsùpClockE«bÀMask
 = 0xFFFFFFFF,

51 .
	gu∑ClockE«bÀMask
 = 0xFFFFFFFF,

52 .
	gpAuxClkCfg
 = 
auxClkAŒOn
,

64 
	$öôClocksAndMem‹y
()

66 
s32
 
sc
;

68 
sc
 = 
	`DrvC¥Inô
();

69 if(
sc
)

70  
sc
;

71 
sc
 = 
	`DrvC¥SëupClocks
(&
ùùeClockC⁄fig
);

72 if(
sc
)

73  
sc
;

75 
	}
}

	@Sipp/SippFw/Runtimes/MonoPipe/leon/app_config.h

9 #i‚de‡
_APP_CONFIG_H_


10 
	#_APP_CONFIG_H_


	)

16 
öôClocksAndMem‹y
();

	@Sipp/SippFw/Runtimes/MonoPipe/leon/isp_params.c

1 
	~<sùp.h
>

2 
	~<sùpTe°Comm⁄.h
>

3 
	~"≠p_c⁄fig.h
"

4 
	~<i•_∑øms.h
>

5 
	~<°döt.h
>

6 
	~"m⁄oPùe.h
"

10 
uöt16_t
 
	gi•cLscMesh
[
ISPC_LSC_GAIN_MAP_W
 * 
ISPC_LSC_GAIN_MAP_H
] 
__©åibuã__
((
£˘i⁄
(".cmx.d©a"))Ë__©åibuã__((
Æig√d
(8))) =

22 
uöt8_t
 
	gi•cLumaDnsLut
[32] = {

27 
uöt8_t
 
	gi•cYDnsDi°Lut
[256] 
__©åibuã__
((
Æig√d
(8))) = {

62 
uöt8_t
 
	gi•cGammaLut0_32
[9] = {

66 
uöt8_t
 
	gi•cGammaLut32_255
[9] = {

73 
uöt16_t
 
	ggammaLutFp16
[512] 
__©åibuã__
((
£˘i⁄
(".cmx.d©a"))Ë__©åibuã__((
Æig√d
(8))) =

144 
u32
 
	ggaussLut
[4];

145 
u32
 
	ggammaLut
[5];

151 
	$dog…mCª©eLuts
 ()

153 
u32
 
idx
;

155 
idx
 = 0; idx < 4; idx++)

157 
gaussLut
[
idx
] = 
i•cLumaDnsLut
[(idx<< 3) + 0] |

158 (
i•cLumaDnsLut
[(
idx
<< 3) + 1] << 4 ) |

159 (
i•cLumaDnsLut
[(
idx
<< 3) + 2] << 8 ) |

160 (
i•cLumaDnsLut
[(
idx
<< 3) + 3] << 12) |

161 (
i•cLumaDnsLut
[(
idx
<< 3) + 4] << 16) |

162 (
i•cLumaDnsLut
[(
idx
<< 3) + 5] << 20) |

163 (
i•cLumaDnsLut
[(
idx
<< 3) + 6] << 24) |

164 (
i•cLumaDnsLut
[(
idx
<< 3) + 7] << 28);

167 
gammaLut
[0] = 
i•cGammaLut0_32
[0] | ispcGammaLut0_32[1] << 8 |

168 
i•cGammaLut0_32
[2] << 16 | ispcGammaLut0_32[3] << 24;

169 
gammaLut
[1] = 
i•cGammaLut0_32
[4] | ispcGammaLut0_32[5] << 8 |

170 
i•cGammaLut0_32
[6] << 16 | ispcGammaLut0_32[7] << 24;

171 
gammaLut
[2] = 
i•cGammaLut0_32
[8] | 
i•cGammaLut32_255
[0] << 8 |

172 
i•cGammaLut32_255
[1] << 16 | ispcGammaLut32_255[2] << 24;

173 
gammaLut
[3] = 
i•cGammaLut32_255
[3] | ispcGammaLut32_255[4] << 8 |

174 
i•cGammaLut32_255
[5] << 16 | ispcGammaLut32_255[6] << 24;

175 
gammaLut
[4] = 
i•cGammaLut32_255
[7] | ispcGammaLut32_255[8] << 8;

177 
	}
}

179 
	$M⁄oPùeCª©eP¨ams
 ()

181 
	`dog…mCª©eLuts
 ();

182 
	}
}

	@Sipp/SippFw/Runtimes/MonoPipe/leon/isp_params.h

1 #i‚de‡
__ISP_PARAMS_H__


2 
	#__ISP_PARAMS_H__


	)

5 
	#ISPC_BAYER_W
 640

	)

6 
	#ISPC_BAYER_H
 480

	)

8 
	#RAW_OUT_BITS
 8

	)

10 
	#MONO_PIPE_INPUT_BUFFER_WIDTH
 
ISPC_BAYER_W


	)

11 
	#MONO_PIPE_INPUT_BUFFER_HEIGHT
 
ISPC_BAYER_H


	)

13 #i‚de‡
ALIGNED


14 
	#ALIGNED
(
x
Ë
	`__©åibuã__
((
	`Æig√d
(x)))

	)

17 
	#BAYER_PATTERN
 0

18 

	)

19 
	#ISPC_BAYER_BITS
 10

	)

20 
	#FORMAT
 
PLANAR


	)

21 
	#SIGMA_DNS_PASSTHRU_BIT
 
ENABLED


	)

23 
	#ISPC_BLACK_LEVEL_P0
 0

	)

24 
	#ISPC_BLACK_LEVEL_P1
 0

	)

25 
	#ISPC_BLACK_LEVEL_P2
 0

	)

26 
	#ISPC_BLACK_LEVEL_P3
 0

	)

28 
	#ISPC_SIGMA_NOISE_FLOOR
 0x0

	)

29 
	#ISPC_SIGMA_THRESH1_P0
 0x0

	)

30 
	#ISPC_SIGMA_THRESH2_P0
 0x0

	)

31 
	#ISPC_SIGMA_THRESH1_P1
 0x0

	)

32 
	#ISPC_SIGMA_THRESH2_P1
 0x0

	)

33 
	#ISPC_SIGMA_THRESH1_P2
 0x0

	)

34 
	#ISPC_SIGMA_THRESH2_P2
 0x0

	)

35 
	#ISPC_SIGMA_THRESH1_P3
 0x0

	)

36 
	#ISPC_SIGMA_THRESH2_P3
 0x0

	)

39 
	#ISPC_LSC_GAIN_MAP_W
 8

	)

40 
	#ISPC_LSC_GAIN_MAP_H
 8

	)

43 
	#GRGB_IMBAL_PLAT_DARK
 0x0

	)

44 
	#GRGB_IMBAL_DECAY_DARK
 0x0

	)

45 
	#GRGB_IMBAL_PLAT_BRIGHT
 0x0

	)

46 
	#GRGB_IMBAL_DECAY_BRIGHT
 0x0

	)

47 
	#ISPC_GRGB_IMBAL_THRESHOLD
 0

	)

49 
	#ISPC_BAD_PIX_ALPHA_G_HOT
 0x0

50 
	#ISPC_BAD_PIX_ALPHA_RB_HOT
 0x0

51 
	#ISPC_BAD_PIX_ALPHA_G_COLD
 0x0

52 
	#ISPC_BAD_PIX_ALPHA_RB_COLD
 0x0

53 
	#ISPC_BAD_PIX_NOISE_LEVEL
 0x0

54 

	)

55 
	#GRGB_IMBAL_EN
 
DISABLED


	)

56 
	#AE_PATCH_STATS_EN
 
DISABLED


	)

57 
	#AF_PATCH_STATS_EN
 
DISABLED


	)

58 
	#AE_Y_HIST_STATS_EN
 
DISABLED


	)

59 
	#AE_RGB_HIST_STATS_EN
 
DISABLED


	)

60 
	#HOT_COLD_PIX_SUPPRESS_EN
 
DISABLED


	)

61 
	#BAYER_2x2_MODE
 0

	)

64 
	#DIGI_GAIN_GR
 0x0100>>2

65 
	#DIGI_GAIN_GB
 0x0100>>2

66 
	#DIGI_GAIN_R
 0x0100>>2

67 
	#DIGI_GAIN_B
 0x0100>>2

68 

	)

69 
	#DIGI_SAT_GR
 ((1<<
RAW_OUT_BITS
)-1)

70 
	#DIGI_SAT_GB
 ((1<<
RAW_OUT_BITS
)-1)

71 
	#DIGI_SAT_R
 ((1<<
RAW_OUT_BITS
)-1)

72 
	#DIGI_SAT_B
 ((1<<
RAW_OUT_BITS
)-1)

73 

	)

75 
	#SHARPENING
 0

	)

76 
	#BLURRING
 1

	)

78 
	#SHARPEN_MODE
 
SHARPENING


	)

79 
	#KERNEL_SIZE
 7

	)

80 
	#CLAMP_OUTPUT
 1

	)

81 
	#OUTPUT_DELTAS
 0

	)

83 
	#ISPC_SHARP_STRENGTH_DARKEN
 0x0000

	)

84 
	#ISPC_SHARP_STRENGTH_LIGHTEN
 0x0000

	)

85 
	#ISPC_SHARP_ALPHA
 0x0000

	)

86 
	#ISPC_SHARP_OVERSHOOT
 0x4000

	)

87 
	#ISPC_SHARP_UNDERSHOOT
 0x0000

	)

88 
	#ISPC_SHARP_RANGE_STOP_0
 0x0000

	)

89 
	#ISPC_SHARP_RANGE_STOP_1
 0x0000

	)

90 
	#ISPC_SHARP_RANGE_STOP_2
 0x0000

	)

91 
	#ISPC_SHARP_RANGE_STOP_3
 0x0000

	)

92 
	#ISPC_SHARP_MIN_THR
 0x0000

	)

93 
	#ISPC_SHARP_COEF0
 0x0000

	)

94 
	#ISPC_SHARP_COEF1
 0x0000

	)

95 
	#ISPC_SHARP_COEF2
 0x0000

	)

96 
	#ISPC_SHARP_COEF3
 0x0000

	)

99 
	#ISPC_LUMA_DNS_STRENGTH
 150.000000

	)

100 
	#ISPC_LUMA_DNS_ALPHA
 128

101 

	)

106 
	#ISPC_LUMA_DNS_F2
 0xØØa9a4

	)

107 
	#ISPC_LUMA_DNS_BITPOS
 7

	)

109 
	#ISPC_LUMA_DNS_REF_SHIFT
 15

	)

110 
	#LUMA_DNS_X_OFFSET
 0

	)

111 
	#LUMA_DNS_Y_OFFSET
 0

	)

113 
u32
 
gaussLut
[4];

114 
u32
 
gammaLut
[5];

117 
	#FP16_MODE
 1

	)

118 
	#CHANNEL_MODE
 0

	)

119 
	#NUM_LUTS
 1

	)

121 
uöt8_t
 
i•cLumaDnsLut
 [32];

122 
uöt8_t
 
i•cYDnsDi°Lut
 [256];

123 
uöt8_t
 
i•cGammaLut0_32
 [9];

124 
uöt8_t
 
i•cGammaLut32_255
[9];

126 
uöt16_t
 
i•cLscMesh
[
ISPC_LSC_GAIN_MAP_W
 * 
ISPC_LSC_GAIN_MAP_H
];

127 
uöt16_t
 
gammaLutFp16
[512];

	@Sipp/SippFw/Runtimes/MonoPipe/leon/main.c

7 #i‡
deföed
(
SIPP_VCS
)

8 
	~<DrvTimî.h
>

9 
	~<DrvDdr.h
>

12 
	~"≠p_c⁄fig.h
"

13 
	~"m⁄oPùe.h
"

19 
	#SIPP_TEST_NUM_FRAMES
 3

	)

20 
	#USE_PRECOMP_SCHED


	)

26 
M⁄oPùe
 
	gmyPl
;

27 vﬁ©ûê
u32
 
	gã°Com∂ëe
 = 0;

33 
M⁄oPùeCª©eP¨ams
 ();

36 
	$≠pSùpCÆlback
 (
SùpPùñöe
 * 
pPùñöe
,

37 
eSIPP_PIPELINE_EVENT
 
eEvít
,

38 
SIPP_PIPELINE_EVENT_DATA
 * 
±EvítD©a
)

40 
	`UNUSED
 (
pPùñöe
);

41 
	`UNUSED
 (
±EvítD©a
);

43 i‡(
eEvít
 =
eSIPP_PIPELINE_FRAME_DONE
)

45 
ã°Com∂ëe
 = 1;

48 
	}
}

52 
	$maö
 (
¨gc
, *
¨gv
[])

54 
	`UNUSED
 (
¨gc
);

55 
	`UNUSED
 (
¨gv
);

56 
u32
 
sùpEº‹Log
[
SIPP_ERROR_HISTORY_SIZE
];

58 
uöt64_t
 
°¨tT
, 
ídT
, 
‰ameT
;

60 
	`sùpPœtf‹mInô
();

62 i‡(
PROCESS_LEON_OS
 =
	`swcWhoAmI
())

64 
	`¥ötf
 ("App Starting on LEON OS\n");

65 
	`¥ötf
 ("Please make sure IRQ sources for dynamicallyÑoute between LeonOSánd LeonRTáre set\n");

69 
	`¥ötf
 ("App Starting on LEON RT\n");

72 
	`sùpPœtf‹mInôAsync
 ();

74 #ifde‡
SIPP_VCS


75 
	`unôTe°Inô
 ();

76 
	`DrvTimîInô
 ();

77 
	`DrvDdrInôüli£
 (
NULL
);

80 
	`buûdM⁄oPùe
 (&
myPl
);

82 i‡(
	`sùpPùeGëEº‹Sètus
 (
myPl
.
∂
))

84 
u32
 
îrNum
;

85 
	`¥ötf
 ("Pipeline creationÉrror\nError codes:\n");

86 
îrNum
 = 
	`sùpGëEº‹Hi°‹y
 (
sùpEº‹Log
);

87 
îrNum
)

89 
	`¥ötf
 ("%08lx\n", 
sùpEº‹Log
[
îrNum
 - 0x1]);

90 
îrNum
--;

94 #ifde‡
USE_PRECOMP_SCHED


95 
	`sùpPùeSëNumLöesPîBuf
 (
myPl
.
dmaIn0
, 0, 24);

96 
	`sùpPùeSëNumLöesPîBuf
 (
myPl
.
øwMa2x5x0
, 0, 16);

97 
	`sùpPùeSëNumLöesPîBuf
 (
myPl
.
sh¨≥nMa2x5x0
, 0, 16);

98 
	`sùpPùeSëNumLöesPîBuf
 (
myPl
.
lutMa2x5x0
, 0, 16);

102 
	`sùpRegi°îEvítCÆlback
 (
myPl
.
∂
,

103 
≠pSùpCÆlback
);

105 
	`M⁄oPùeCª©eP¨ams
 ();

106 
	`c⁄figM⁄oPùe
 (&
myPl
);

108 
	`ªadM⁄oPùeI≈ut
(&
myPl
);

111 
myPl
.
∂
->
Êags
 |
PLF_CONSIDER_OPIPE_RT
;

113 
	`sùpFöÆizePùñöe
 (
myPl
.
∂
);

115 
u32
 
run
 = 0;Ñu¿< 
SIPP_TEST_NUM_FRAMES
;Ñun++)

117 
	`DrvTimîGëSy°emTicks64
 (&
°¨tT
);

120 
ã°Com∂ëe
 = 0;

121 
	`sùpPro˚ssFømeNB
 (
myPl
.
∂
);

123 i‡(
	`sùpPùeGëEº‹Sètus
 (
myPl
.
∂
))

125 
u32
 
îrNum
;

126 
	`¥ötf
 ("PipelineÑuntimeÉrror\nError codes:\n");

127 
îrNum
 = 
	`sùpGëEº‹Hi°‹y
 (
sùpEº‹Log
);

128 
îrNum
)

130 
	`¥ötf
 ("%08lx\n", 
sùpEº‹Log
[
îrNum
 - 0x1]);

131 
îrNum
--;

135 
ã°Com∂ëe
 == 0x0)

140 
	`DrvTimîGëSy°emTicks64
(&
ídT
);

141 
‰ameT
 = 
ídT
 - 
°¨tT
;

142 
	`¥ötf
(" Pîf‹m™˚: %‡cc/pix \n", (()
‰ameT
Ë/ (
MONO_PIPE_INPUT_BUFFER_WIDTH
 * 
MONO_PIPE_INPUT_BUFFER_HEIGHT
));

145 
	`wrôeM⁄oPùeOuçut
 (&
myPl
);

147 
	`sùpRdFûeU8
 ((
UI¡8
*)
M⁄oPùe_dmaIn0_buf„r
, 
MONO_PIPE_INPUT_BUFFER_WIDTH
 * 
MONO_PIPE_INPUT_BUFFER_HEIGHT
 , "../../../../../../../resources/ref_monoPipe_out_640x480.raw");

148 
	`sùpDbgCom∑ªU8
((
UI¡8
*)
M⁄oPùe_dmaIn0_buf„r
, 
M⁄oPùe_dmaOut0_buf„r
, 
MONO_PIPE_INPUT_BUFFER_WIDTH
 * 
MONO_PIPE_INPUT_BUFFER_HEIGHT
);

150 #ifde‡
SIPP_VCS


151 
	`unôTe°FöÆRï‹t
();

155 
	}
}

	@Sipp/SippFw/Runtimes/MonoPipe/leon/monoPipe.c

13 
	~"m⁄oPùe.h
"

15 
	~<ö˛ude/sùpHwDefs.h
>

16 
	~<¨ch/ma2x5x/ö˛ude/sùpHwDefs_ma2x5x.h
>

20 
UI¡16
 
DDR_DATA
 
	gM⁄oPùe_dmaIn0_buf„r
 [
MONO_PIPE_INPUT_BUFFER_WIDTH
* 
MONO_PIPE_INPUT_BUFFER_HEIGHT
* 1 ]
ALIGNED
(8);

21 
UI¡8
 
DDR_DATA
 
	gM⁄oPùe_dmaOut0_buf„r
 [
MONO_PIPE_INPUT_BUFFER_WIDTH
* 
MONO_PIPE_INPUT_BUFFER_HEIGHT
* 1 ]
ALIGNED
(8);

24 
	$ªadM⁄oPùeI≈ut
(
M⁄oPùe
 *
pPl
)

26 
	`sùpRdFûeU8
((
UI¡8
*)
M⁄oPùe_dmaIn0_buf„r
,
MONO_PIPE_INPUT_BUFFER_WIDTH
 * 
MONO_PIPE_INPUT_BUFFER_HEIGHT
 * 1 * (
UI¡16
),"../../../../../../../resources/test_640x480_10b.raw");

28 ()(
pPl
);

30 
	}
}

32 
	$wrôeM⁄oPùeOuçut
(
M⁄oPùe
 *
pPl
)

34 
	`sùpWrFûeU8
((
UI¡8
*)
M⁄oPùe_dmaOut0_buf„r
,
MONO_PIPE_INPUT_BUFFER_WIDTH
 * 
MONO_PIPE_INPUT_BUFFER_HEIGHT
 * 1 * (UInt8),"output_640x480.raw");

36 ()(
pPl
);

38 
	}
}

40 
	$buûdM⁄oPùe
(
M⁄oPùe
 *
pPl
)

43 
pPl
->
∂
 = 
	`sùpCª©ePùñöe
(0, 3, 
	`SIPP_MBIN
(
mböImgSùp
));

46 
pPl
->
dmaIn0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x00, 
MONO_PIPE_INPUT_BUFFER_WIDTH
, 
MONO_PIPE_INPUT_BUFFER_HEIGHT
, 
	`N_PL
(1), 
	`SZ
(
UI¡16
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

47 
pPl
->
sigmaDnsMa2x5x0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x0, 
MONO_PIPE_INPUT_BUFFER_WIDTH
, 
MONO_PIPE_INPUT_BUFFER_HEIGHT
, 
	`N_PL
(1), 
	`SZ
(
UI¡16
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_SIGMA_ID
, 0);

48 
pPl
->
lscMa2x5x0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x0, 
MONO_PIPE_INPUT_BUFFER_WIDTH
, 
MONO_PIPE_INPUT_BUFFER_HEIGHT
, 
	`N_PL
(1), 
	`SZ
(
UI¡16
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_LSC_ID
, 0);

49 
pPl
->
øwMa2x5x0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x0, 
MONO_PIPE_INPUT_BUFFER_WIDTH
, 
MONO_PIPE_INPUT_BUFFER_HEIGHT
, 
	`N_PL
(1), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_RAW_ID
, 0);

50 
pPl
->
ydnsMa2x5x0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x0, 
MONO_PIPE_INPUT_BUFFER_WIDTH
, 
MONO_PIPE_INPUT_BUFFER_HEIGHT
, 
	`N_PL
(1), 
	`SZ
(
Â16
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_LUMA_ID
, 0);

51 
pPl
->
sh¨≥nMa2x5x0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x0, 
MONO_PIPE_INPUT_BUFFER_WIDTH
, 
MONO_PIPE_INPUT_BUFFER_HEIGHT
, 
	`N_PL
(1), 
	`SZ
(
Â16
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_SHARPEN_ID
, 0);

52 
pPl
->
lutMa2x5x0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x0, 
MONO_PIPE_INPUT_BUFFER_WIDTH
, 
MONO_PIPE_INPUT_BUFFER_HEIGHT
, 
	`N_PL
(1), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_LUT_ID
, 0);

53 
pPl
->
dmaOut0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x00, 
MONO_PIPE_INPUT_BUFFER_WIDTH
, 
MONO_PIPE_INPUT_BUFFER_HEIGHT
, 
	`N_PL
(1), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

56 
	`sùpLökFûãr
(
pPl
->
sigmaDnsMa2x5x0
,ÖPl->
dmaIn0
, 5,5 );

57 
	`sùpLökFûãr
(
pPl
->
lscMa2x5x0
,ÖPl->
sigmaDnsMa2x5x0
, 1,0 );

58 
	`sùpLökFûãr
(
pPl
->
øwMa2x5x0
,ÖPl->
lscMa2x5x0
, 5,5 );

59 
	`sùpLökFûãr
(
pPl
->
ydnsMa2x5x0
,ÖPl->
øwMa2x5x0
, 11,11 );

60 
	`sùpLökFûãr
(
pPl
->
sh¨≥nMa2x5x0
,ÖPl->
ydnsMa2x5x0
, 7,7 );

61 
	`sùpLökFûãr
(
pPl
->
lutMa2x5x0
,ÖPl->
sh¨≥nMa2x5x0
, 1,1 );

62 
	`sùpLökFûãr
(
pPl
->
dmaOut0
,ÖPl->
lutMa2x5x0
, 1,1 );

64 
	}
}

67 
	$c⁄figM⁄oPùe
(
M⁄oPùe
 *
pPl
)

69 
DmaP¨am
 *
dmaIn0Cfg
 = (DmaP¨am *)
pPl
->
dmaIn0
->
∑øms
;

70 
SigmaP¨am
 *
sigmaDnsMa2x5x0Cfg
 = (SigmaP¨am *)
pPl
->
sigmaDnsMa2x5x0
->
∑øms
;

71 
LscP¨am
 *
lscMa2x5x0Cfg
 = (LscP¨am *)
pPl
->
lscMa2x5x0
->
∑øms
;

72 
RawP¨am
 *
øwMa2x5x0Cfg
 = (RawP¨am *)
pPl
->
øwMa2x5x0
->
∑øms
;

73 
YDnsP¨am
 *
ydnsMa2x5x0Cfg
 = (YDnsP¨am *)
pPl
->
ydnsMa2x5x0
->
∑øms
;

74 
UsmP¨am
 *
sh¨≥nMa2x5x0Cfg
 = (UsmP¨am *)
pPl
->
sh¨≥nMa2x5x0
->
∑øms
;

75 
LutP¨am
 *
lutMa2x5x0Cfg
 = (LutP¨am *)
pPl
->
lutMa2x5x0
->
∑øms
;

76 
DmaP¨am
 *
dmaOut0Cfg
 = (DmaP¨am *)
pPl
->
dmaOut0
->
∑øms
;

81 
sigmaDnsMa2x5x0Cfg
->
thªsh
[0]=(
ISPC_SIGMA_THRESH1_P0
 << 0 | 
ISPC_SIGMA_THRESH2_P0
 << 8 | 
ISPC_SIGMA_THRESH1_P1
 << 16 | 
ISPC_SIGMA_THRESH2_P1
 << 24);

82 
sigmaDnsMa2x5x0Cfg
->
thªsh
[1]=(
ISPC_SIGMA_THRESH1_P2
 << 0 | 
ISPC_SIGMA_THRESH2_P2
 << 8 | 
ISPC_SIGMA_THRESH1_P3
 << 16 | 
ISPC_SIGMA_THRESH2_P3
 << 24);

83 
sigmaDnsMa2x5x0Cfg
->
cfg

	`SIGMA_DNS_CFG
(
ISPC_SIGMA_NOISE_FLOOR
, (
ISPC_BAYER_BITS
 - 1), 
SIGMA_DNS_PASSTHRU_BIT
, 
FORMAT
);

84 
sigmaDnsMa2x5x0Cfg
->
bayîP©ã∫
=
BAYER_PATTERN
;

85 
sigmaDnsMa2x5x0Cfg
->
blcGR
=
ISPC_BLACK_LEVEL_P2
;

86 
sigmaDnsMa2x5x0Cfg
->
blcR
=
ISPC_BLACK_LEVEL_P3
;

87 
sigmaDnsMa2x5x0Cfg
->
blcB
=
ISPC_BLACK_LEVEL_P0
;

88 
sigmaDnsMa2x5x0Cfg
->
blcGB
=
ISPC_BLACK_LEVEL_P1
;

89 
lscMa2x5x0Cfg
->
gmBa£

i•cLscMesh
;

90 
lscMa2x5x0Cfg
->
gmWidth

ISPC_LSC_GAIN_MAP_W
;

91 
lscMa2x5x0Cfg
->
gmHeight

ISPC_LSC_GAIN_MAP_H
;

92 
lscMa2x5x0Cfg
->
d©aF‹m©
=
	`SIPP_LSC_CFG_FORMAT
(
FORMAT
);

93 
lscMa2x5x0Cfg
->
d©aWidth
=
ISPC_BAYER_BITS
;

94 
øwMa2x5x0Cfg
->
grgbPœt

	`RAW_GRGB_PLATO
(
GRGB_IMBAL_PLAT_DARK
, 
GRGB_IMBAL_PLAT_BRIGHT
);

95 
øwMa2x5x0Cfg
->
grgbDeˇy
=
	`RAW_GRGB_DECAY
(
GRGB_IMBAL_DECAY_DARK
, 
GRGB_IMBAL_DECAY_BRIGHT
);

96 
øwMa2x5x0Cfg
->
badPixCfg
=
	`RAW_BAD_PIX_CFG
(
ISPC_BAD_PIX_NOISE_LEVEL
, 
ISPC_BAD_PIX_ALPHA_G_HOT
, 
ISPC_BAD_PIX_ALPHA_G_COLD
, 
ISPC_BAD_PIX_ALPHA_RB_HOT
, 
ISPC_BAD_PIX_ALPHA_RB_COLD
);

97 
øwMa2x5x0Cfg
->
cfg

	`RAW_CFG
(
FORMAT
, 
BAYER_PATTERN
, 
GRGB_IMBAL_EN
, 0, 
AE_PATCH_STATS_EN
, 
AE_RGB_HIST_STATS_EN
, (
ISPC_BAYER_BITS
 - 1), 
ISPC_GRGB_IMBAL_THRESHOLD
, 0, 
AF_PATCH_STATS_EN
, 
BAYER_2x2_MODE
, 
AE_Y_HIST_STATS_EN
, 
HOT_COLD_PIX_SUPPRESS_EN
);

98 
øwMa2x5x0Cfg
->
gaöS©
[0](
DIGI_GAIN_GR
 | (
DIGI_SAT_GR
 << 16));

99 
øwMa2x5x0Cfg
->
gaöS©
[1](
DIGI_GAIN_R
 | (
DIGI_SAT_R
 << 16));

100 
øwMa2x5x0Cfg
->
gaöS©
[2](
DIGI_GAIN_B
 | (
DIGI_SAT_B
 << 16));

101 
øwMa2x5x0Cfg
->
gaöS©
[3](
DIGI_GAIN_GB
 | (
DIGI_SAT_GB
 << 16));

102 
øwMa2x5x0Cfg
->
°©sBa£
=0;

103 
øwMa2x5x0Cfg
->
°©sPœ√s
=0;

104 
øwMa2x5x0Cfg
->
°©sP©chCfg
=0;

105 
øwMa2x5x0Cfg
->
°©sP©chSèπ
=0;

106 
øwMa2x5x0Cfg
->
°©sP©chSkù
=0;

107 
øwMa2x5x0Cfg
->
°©sThªsh
=0;

108 
øwMa2x5x0Cfg
->
afF1c€fs
[0]=0;

109 
øwMa2x5x0Cfg
->
afF1c€fs
[1]=0;

110 
øwMa2x5x0Cfg
->
afF1c€fs
[2]=0;

111 
øwMa2x5x0Cfg
->
afF1c€fs
[3]=0;

112 
øwMa2x5x0Cfg
->
afF1c€fs
[4]=0;

113 
øwMa2x5x0Cfg
->
afF1c€fs
[5]=0;

114 
øwMa2x5x0Cfg
->
afF1c€fs
[6]=0;

115 
øwMa2x5x0Cfg
->
afF1c€fs
[7]=0;

116 
øwMa2x5x0Cfg
->
afF1c€fs
[8]=0;

117 
øwMa2x5x0Cfg
->
afF1c€fs
[9]=0;

118 
øwMa2x5x0Cfg
->
afF1c€fs
[10]=0;

119 
øwMa2x5x0Cfg
->
afF2c€fs
[0]=0;

120 
øwMa2x5x0Cfg
->
afF2c€fs
[1]=0;

121 
øwMa2x5x0Cfg
->
afF2c€fs
[2]=0;

122 
øwMa2x5x0Cfg
->
afF2c€fs
[3]=0;

123 
øwMa2x5x0Cfg
->
afF2c€fs
[4]=0;

124 
øwMa2x5x0Cfg
->
afF2c€fs
[5]=0;

125 
øwMa2x5x0Cfg
->
afF2c€fs
[6]=0;

126 
øwMa2x5x0Cfg
->
afF2c€fs
[7]=0;

127 
øwMa2x5x0Cfg
->
afF2c€fs
[8]=0;

128 
øwMa2x5x0Cfg
->
afF2c€fs
[9]=0;

129 
øwMa2x5x0Cfg
->
afF2c€fs
[10]=0;

130 
øwMa2x5x0Cfg
->
afMöThªsh
=0;

131 
øwMa2x5x0Cfg
->
afSubåa˘
=0;

132 
øwMa2x5x0Cfg
->
afP©chCfg
=0;

133 
øwMa2x5x0Cfg
->
afP©chSèπ
=0;

134 
øwMa2x5x0Cfg
->
afSètsBa£
=0;

135 
øwMa2x5x0Cfg
->
hi°LumaBa£
=0;

136 
øwMa2x5x0Cfg
->
hi°RgbBa£
=0;

137 
ydnsMa2x5x0Cfg
->
cfg

	`LUMA_DNS_CFG
(0, 
ISPC_LUMA_DNS_REF_SHIFT
, 
ISPC_LUMA_DNS_ALPHA
, 
ISPC_LUMA_DNS_BITPOS
);

138 
ydnsMa2x5x0Cfg
->
gaussLut
[0]=gaussLut[0];

139 
ydnsMa2x5x0Cfg
->
gaussLut
[1]=gaussLut[1];

140 
ydnsMa2x5x0Cfg
->
gaussLut
[2]=gaussLut[2];

141 
ydnsMa2x5x0Cfg
->
gaussLut
[3]=gaussLut[3];

142 
ydnsMa2x5x0Cfg
->
f2

ISPC_LUMA_DNS_F2
;

143 
ydnsMa2x5x0Cfg
->
gammaLut
[0]=gammaLut[0];

144 
ydnsMa2x5x0Cfg
->
gammaLut
[1]=gammaLut[1];

145 
ydnsMa2x5x0Cfg
->
gammaLut
[2]=gammaLut[2];

146 
ydnsMa2x5x0Cfg
->
gammaLut
[3]=gammaLut[3];

147 
ydnsMa2x5x0Cfg
->
gammaLut
[4]=gammaLut[4];

148 
ydnsMa2x5x0Cfg
->
di°Cfg
(
u32
)
i•cYDnsDi°Lut
;

149 
ydnsMa2x5x0Cfg
->
di°Off£ts
=
LUMA_DNS_X_OFFSET
 | (
LUMA_DNS_Y_OFFSET
 << 16);

150 
ydnsMa2x5x0Cfg
->
fuŒFrmDim
=
MONO_PIPE_INPUT_BUFFER_WIDTH
 | (
MONO_PIPE_INPUT_BUFFER_HEIGHT
 << 16);

151 
sh¨≥nMa2x5x0Cfg
->
cfg

	`SHARPEN_CFG
(
ISPC_SHARP_MIN_THR
,
KERNEL_SIZE
, 
CLAMP_OUTPUT
, 
SHARPEN_MODE
, 
OUTPUT_DELTAS
);

152 
sh¨≥nMa2x5x0Cfg
->
°ªngth
=
	`SHARPEN_STRENGTH_CFG
(
ISPC_SHARP_STRENGTH_LIGHTEN
, 
ISPC_SHARP_STRENGTH_DARKEN
);

153 
sh¨≥nMa2x5x0Cfg
->
˛ù

ISPC_SHARP_ALPHA
;

154 
sh¨≥nMa2x5x0Cfg
->
limô
=
	`SHARPEN_LIMITS_CFG
(
ISPC_SHARP_UNDERSHOOT
, 
ISPC_SHARP_OVERSHOOT
);

155 
sh¨≥nMa2x5x0Cfg
->
rgnSt›01
=
	`SHARPEN_RANGESTOP01_CFG
(
ISPC_SHARP_RANGE_STOP_0
, 
ISPC_SHARP_RANGE_STOP_1
);

156 
sh¨≥nMa2x5x0Cfg
->
rgnSt›23
=
	`SHARPEN_RANGESTOP01_CFG
(
ISPC_SHARP_RANGE_STOP_2
, 
ISPC_SHARP_RANGE_STOP_3
);

157 
sh¨≥nMa2x5x0Cfg
->
c€f01
=
	`SHARPEN_COEFS01_CFG
(
ISPC_SHARP_COEF0
, 
ISPC_SHARP_COEF1
);

158 
sh¨≥nMa2x5x0Cfg
->
c€f23
=
	`SHARPEN_COEFS23_CFG
(
ISPC_SHARP_COEF2
, 
ISPC_SHARP_COEF3
);

159 
lutMa2x5x0Cfg
->
cfg

	`LUT_CFG
(0, 0, 0, 0, 
NUM_LUTS
, 10, 
CHANNEL_MODE
, 
FP16_MODE
);

160 
lutMa2x5x0Cfg
->
sizeA
= 0x55555555;

161 
lutMa2x5x0Cfg
->
sizeB
= 0x55555555;

162 
lutMa2x5x0Cfg
->
lut

gammaLutFp16
;

163 
lutMa2x5x0Cfg
->
lutF‹m©
=0;

164 
lutMa2x5x0Cfg
->
m©
[0]= 0;

165 
lutMa2x5x0Cfg
->
m©
[1]= 0;

166 
lutMa2x5x0Cfg
->
m©
[2]= 0;

167 
lutMa2x5x0Cfg
->
m©
[3]= 0;

168 
lutMa2x5x0Cfg
->
m©
[4]= 0;

169 
lutMa2x5x0Cfg
->
m©
[5]= 0;

170 
lutMa2x5x0Cfg
->
m©
[6]= 0;

171 
lutMa2x5x0Cfg
->
m©
[7]= 0;

172 
lutMa2x5x0Cfg
->
m©
[8]= 0;

173 
lutMa2x5x0Cfg
->
off£t
[0]=0;

174 
lutMa2x5x0Cfg
->
off£t
[1]=0;

175 
lutMa2x5x0Cfg
->
off£t
[2]=0;

176 
dmaIn0Cfg
->
ddrAddr
 = (
UI¡32
)&
M⁄oPùe_dmaIn0_buf„r
;

177 
dmaOut0Cfg
->
ddrAddr
 = (
UI¡32
)&
M⁄oPùe_dmaOut0_buf„r
;

180 
	}
}

	@Sipp/SippFw/Runtimes/MonoPipe/leon/monoPipe.h

13 #i‚de‡
__MONOPIPE_H__


14 
	#__MONOPIPE_H__


	)

16 
	~<sùp.h
>

17 
	~<sùpTe°Comm⁄.h
>

19 
	~"i•_∑øms.h
"

23 
UI¡16
 
DDR_DATA
 
M⁄oPùe_dmaIn0_buf„r
[ 
MONO_PIPE_INPUT_BUFFER_WIDTH
 * 
MONO_PIPE_INPUT_BUFFER_HEIGHT
 * 1 ]
ALIGNED
(8);

24 
UI¡8
 
DDR_DATA
 
M⁄oPùe_dmaOut0_buf„r
[ 
MONO_PIPE_INPUT_BUFFER_WIDTH
 * 
MONO_PIPE_INPUT_BUFFER_HEIGHT
 * 1 ]
ALIGNED
(8);

28 
	sM⁄oPùe


31 
SùpPùñöe
 *
	m∂
;

34 
SùpFûãr
 *
	mdmaIn0
;

35 
SùpFûãr
 *
	msigmaDnsMa2x5x0
;

36 
SùpFûãr
 *
	mlscMa2x5x0
;

37 
SùpFûãr
 *
	møwMa2x5x0
;

38 
SùpFûãr
 *
	mlutMa2x5x0
;

39 
SùpFûãr
 *
	mdmaOut0
;

40 
SùpFûãr
 *
	msh¨≥nMa2x5x0
;

41 
SùpFûãr
 *
	mydnsMa2x5x0
;

43 } 
	tM⁄oPùe
;

45 
ªadM⁄oPùeI≈ut
(
M⁄oPùe
 *
pPl
);

46 
wrôeM⁄oPùeOuçut
(
M⁄oPùe
 *
pPl
);

48 
buûdM⁄oPùe
(
M⁄oPùe
 *
pPl
);

49 
c⁄figM⁄oPùe
(
M⁄oPùe
 *
pPl
);

	@Sipp/SippFw/Runtimes/MultiStream/leon/ISPParamsPP.c

11 
	~<°döt.h
>

13 
	~"ISPPùeSëtögs.h
"

20 
uöt16_t
 
	gi•cLscMesh
[
ISPC_LSC_GAIN_MAP_W
 * 
ISPC_LSC_GAIN_MAP_H
] 
ALIGNED
(8) =

	@Sipp/SippFw/Runtimes/MultiStream/leon/ISPParamsStill.c

11 
	~<°döt.h
>

13 
	~"ISPPùeSëtögs.h
"

19 
uöt8_t
 
	gi•cLow∑ssKî√l
[9] = {

25 
uöt8_t
 
	gi•cLumaDnsLut
[32] = {

30 
uöt8_t
 
	gi•cYDnsDi°Lut
[256] 
__©åibuã__
((
Æig√d
(8))) = {

65 
uöt8_t
 
	gi•cGammaLut0_32
[9] = {

69 
uöt8_t
 
	gi•cGammaLut32_255
[9] = {

74 
	gi•cLtmCurves
[16*8] = {

94 
uöt8_t
 
	gdogC€ffs11
[6] = {

97 
uöt8_t
 
	gdogC€ffs15
[8] = {

102 
	gi•cCCM
[9] = {

108 
	gi•cCCMOff
[3] = {

112 
uöt16_t
 
	ggammaLutFp16
[512*4] 
ALIGNED
(8) = {

628 
	gi•cCSC
[9] = {

634 
	gi•cCSCOff
[3] = {

638 
u16
 
	g…m_curves
[16*8];

639 
u32
 
	ggaussLut
[4];

640 
u32
 
	ggammaLut
[5];

642 
u16
 
	gcsc_lut_c€ffs
[9];

643 
u16
 
	gcsc_lut_off£ts
[3];

645 
u16
 
	gccm_lut_c€ffs
[9];

646 
u16
 
	gccm_lut_off£ts
[3];

650 
uöt8_t
 
	ghC€fs
[] 
__©åibuã__
((
Æig√d
(8))) = {

661 
uöt8_t
 
	gvC€fs
[] 
__©åibuã__
((
Æig√d
(8))) = {

681 
	$dog…mC⁄vîtCurves
()

683 
curve
, 
poöt
, 
ªgoff
;

684 
ªgoff
 = 0;

685 
curve
 = 0; curve < 8; curve++) {

686 
poöt
 = 0;Öoint < 16;Öoint += 2) {

687 
off
 = 
curve
 + 
poöt
 * 8;

688 
…m_curves
[
off
 ] = 
i•cLtmCurves
[off] * 0xfff;

689 
…m_curves
[
off
+8] = 
i•cLtmCurves
[off+8] * 0xfff;

690 
ªgoff
 += 4;

693 
	}
}

695 
	$dog…mCª©eLuts
 ()

697 
u32
 
idx
;

699 
idx
 = 0; idx < 4; idx++)

701 
gaussLut
[
idx
] = 
i•cLumaDnsLut
[(idx<< 3) + 0] |

702 (
i•cLumaDnsLut
[(
idx
<< 3) + 1] << 4 ) |

703 (
i•cLumaDnsLut
[(
idx
<< 3) + 2] << 8 ) |

704 (
i•cLumaDnsLut
[(
idx
<< 3) + 3] << 12) |

705 (
i•cLumaDnsLut
[(
idx
<< 3) + 4] << 16) |

706 (
i•cLumaDnsLut
[(
idx
<< 3) + 5] << 20) |

707 (
i•cLumaDnsLut
[(
idx
<< 3) + 6] << 24) |

708 (
i•cLumaDnsLut
[(
idx
<< 3) + 7] << 28);

711 
gammaLut
[0] = 
i•cGammaLut0_32
[0] | ispcGammaLut0_32[1] << 8 |

712 
i•cGammaLut0_32
[2] << 16 | ispcGammaLut0_32[3] << 24;

713 
gammaLut
[1] = 
i•cGammaLut0_32
[4] | ispcGammaLut0_32[5] << 8 |

714 
i•cGammaLut0_32
[6] << 16 | ispcGammaLut0_32[7] << 24;

715 
gammaLut
[2] = 
i•cGammaLut0_32
[8] | 
i•cGammaLut32_255
[0] << 8 |

716 
i•cGammaLut32_255
[1] << 16 | ispcGammaLut32_255[2] << 24;

717 
gammaLut
[3] = 
i•cGammaLut32_255
[3] | ispcGammaLut32_255[4] << 8 |

718 
i•cGammaLut32_255
[5] << 16 | ispcGammaLut32_255[6] << 24;

719 
gammaLut
[4] = 
i•cGammaLut32_255
[7] | ispcGammaLut32_255[8] << 8;

720 
	}
}

722 
	#CCVT
(
f
Ë(()((fË* 1024 + .5Ë& 0xfff)

	)

723 
	#OCVT
(
f
Ë(()((fË* 4096 + .5Ë& 0x1ffff)

	)

725 
	$lutCª©eLuts
 ()

727 
u32
 
idx
;

729 
idx
 = 0; idx < 9; idx++)

731 
csc_lut_c€ffs
[
idx
] = 
	`CCVT
(
i•cCSC
[idx]);

733 
idx
 = 0; idx < 3; idx++)

735 
csc_lut_off£ts
[
idx
] = 
	`OCVT
(
i•cCSCOff
[idx]);

737 
	}
}

740 
	#CCMC
(
f
) (()((f * 0x400) + .5) & 0xffff)

741 
	#CCMO
(
f
) (()((f * 0x1000) + .5) & 0x1fff)

742 

	)

743 
	$ccombCª©eC€ffs
 ()

745 
u32
 
idx
;

747 
idx
 = 0; idx < 9; idx++)

749 
ccm_lut_c€ffs
[
idx
] = 
	`CCMC
(
i•cCCM
[idx]);

751 
idx
 = 0; idx < 3; idx++)

753 
ccm_lut_off£ts
[
idx
] = 
	`CCMO
(
i•cCCMOff
[idx]);

755 
	}
}

757 
	$ISPPùeCª©eP¨ams
 ()

759 
	`ccombCª©eC€ffs
();

760 
	`lutCª©eLuts
 ();

761 
	`dog…mC⁄vîtCurves
 ();

762 
	`dog…mCª©eLuts
 ();

763 
	}
}

	@Sipp/SippFw/Runtimes/MultiStream/leon/ISPPipeSettings.h

4 #i‚de‡
_ISP_PIPE_SETTINGS_H_


5 
	#_ISP_PIPE_SETTINGS_H_


	)

7 
	~<sùp.h
>

15 
	#ISPC_SIGMA_NOISE_FLOOR
 51

	)

16 
	#ISPC_SIGMA_THRESH1_P0
 9

	)

17 
	#ISPC_SIGMA_THRESH2_P0
 18

	)

18 
	#ISPC_SIGMA_THRESH1_P1
 9

	)

19 
	#ISPC_SIGMA_THRESH2_P1
 18

	)

20 
	#ISPC_SIGMA_THRESH1_P2
 9

	)

21 
	#ISPC_SIGMA_THRESH2_P2
 18

	)

22 
	#ISPC_SIGMA_THRESH1_P3
 9

	)

23 
	#ISPC_SIGMA_THRESH2_P3
 18

	)

25 
	#SIGMA_DNS_PASSTHRU_BIT
 
DISABLED


	)

31 
	#ISPC_LSC_GAIN_MAP_W
 60

	)

32 
	#ISPC_LSC_GAIN_MAP_H
 44

	)

34 
uöt16_t
 
i•cLscMesh
[
ISPC_LSC_GAIN_MAP_W
 * 
ISPC_LSC_GAIN_MAP_H
];

40 
	#ISPC_BAD_PIX_ALPHA_G_HOT
 0x5

41 
	#ISPC_BAD_PIX_ALPHA_RB_HOT
 0x2

42 
	#ISPC_BAD_PIX_ALPHA_G_COLD
 0x5

43 
	#ISPC_BAD_PIX_ALPHA_RB_COLD
 0x5

44 
	#ISPC_BAD_PIX_NOISE_LEVEL
 0x00a3

45 

	)

47 
	#ISPC_GRGB_IMBAL_PLAT_DARK
 150

	)

48 
	#ISPC_GRGB_IMBAL_DECAY_DARK
 200

	)

49 
	#ISPC_GRGB_IMBAL_PLAT_BRIGHT
 400

	)

50 
	#ISPC_GRGB_IMBAL_DECAY_BRIGHT
 500

	)

51 
	#ISPC_GRGB_IMBAL_THRESHOLD
 16

52 

	)

53 
	#ISPC_RAW_GAIN_R
 1148

54 
	#ISPC_RAW_GAIN_GR
 988

55 
	#ISPC_RAW_GAIN_GB
 988

56 
	#ISPC_RAW_GAIN_B
 2273

57 

	)

58 
	#ISPC_RAW_CLAMP_0
 1023

59 
	#ISPC_RAW_CLAMP_1
 1023

60 
	#ISPC_RAW_CLAMP_2
 1023

61 
	#ISPC_RAW_CLAMP_3
 1023

62 

	)

63 
	#ISPC_RAW_OUTPUT_BITS
 10

	)

66 
	#GRGB_IMBAL_EN
 
ENABLED


	)

67 
	#AE_PATCH_STATS_EN
 
DISABLED


	)

68 
	#AF_PATCH_STATS_EN
 
DISABLED


	)

69 
	#AE_Y_HIST_STATS_EN
 
DISABLED


	)

70 
	#AE_RGB_HIST_STATS_EN
 
DISABLED


	)

71 
	#HOT_COLD_PIX_SUPPRESS_EN
 
ENABLED


	)

72 
	#BAYER_2x2_MODE
 1

	)

77 
	#ISPC_DEBAYER_BITS
 12

	)

78 
	#RGB_EN
 1

	)

79 
	#FORCE_RB_ZERO
 0

	)

80 
	#IMAGE_ORDER_OUT
 
P_RGB


	)

81 
	#OUTPUT_PLANE_NO
 3

	)

83 
	#ISPC_DEMOSAIC_MIX_SLOPE
 0

	)

84 
	#ISPC_DEMOSAIC_MIX_OFFSET
 0

	)

85 
	#ISPC_DEMOSAIC_MIX_GRADIENT_MUL
 0

	)

86 
	#ISPC_DEMOSAIC_LUMA_WEIGHT_RED
 77

	)

87 
	#ISPC_DEMOSAIC_LUMA_WEIGHT_GREEN
 150

	)

88 
	#ISPC_DEMOSAIC_LUMA_WEIGHT_BLUE
 29

	)

93 
	#MODE_DOG_ONLY
 0x0

	)

94 
	#MODE_LTM_ONLY
 0x1

	)

95 
	#MODE_DOG_DENOISE
 0x2

	)

96 
	#MODE_DOG_LTM
 0x3

	)

97 
	#DOG_LTM_MODE
 
MODE_DOG_LTM


	)

99 
	#DOG_OUTPUT_CLAMP
 
DISABLED


	)

100 
	#DOG_HEIGHT
 15

	)

102 
i•cLtmCurves
[16*8];

105 
	#ISPC_LTM_FILTER_TH1
 35

	)

108 
	#ISPC_DOG_THR
 4

	)

109 
	#ISPC_DOG_STRENGTH
 191

	)

111 
uöt8_t
 
dogC€ffs11
[6];

112 
uöt8_t
 
dogC€ffs15
[8];

113 
u16
 
…m_curves
[16*8];

115 
	#DSMODE_CARRY
 0x0

	)

116 
	#DSMODE_DOWN
 0x1

	)

117 
	#DSMODE_UPDN
 0x2

	)

118 
	#DS_MODE
 
DSMODE_DOWN


	)

127 
	#ISPC_LUMA_DNS_F2
 0xØØa9a4

	)

128 
	#ISPC_LUMA_DNS_BITPOS
 7

	)

130 
uöt8_t
 
i•cLumaDnsLut
[32];

132 
uöt8_t
 
i•cYDnsDi°Lut
[256];

134 
uöt8_t
 
i•cGammaLut0_32
[9];

135 
uöt8_t
 
i•cGammaLut32_255
[9];

137 
	#ISPC_LUMA_DNS_REF_SHIFT
 15

	)

138 
	#X_OFFSET
 0

	)

139 
	#Y_OFFSET
 0

	)

141 
u32
 
gaussLut
[4];

142 
u32
 
gammaLut
[5];

144 
	#ISPC_LUMA_DNS_STRENGTH
 150.000000

	)

145 
	#ISPC_LUMA_DNS_ALPHA
 128

146 

	)

150 
	#SHARPEN_KERNEL_SIZE
 7

	)

152 
	#SHARPEN_STRENGTH_DARKEN
 0x0000

153 
	#SHARPEN_STRENGTH_LIGHTEN
 0x0000

154 
	#SHARPEN_CLIPPING_ALPHA
 0x0000

155 
	#SHARPEN_RANGE_STOP0
 0x0000

	)

156 
	#SHARPEN_RANGE_STOP1
 0x0000

	)

157 
	#SHARPEN_RANGE_STOP2
 0x0000

	)

158 
	#SHARPEN_RANGE_STOP3
 0x0000

	)

159 
	#SHARPENING
 0

	)

160 
	#BLURRING
 1

	)

161 
	#SHARPEN_MODE
 
SHARPENING


	)

162 
	#OUTPUT_DELTAS
 0

	)

163 
	#THR
 0x0

	)

164 
	#OUTPUT_CLAMP
 1

	)

167 
	#ISPC_SHARP_SIGMA
 2.000000

	)

170 
	#ISPC_SHARP_ALPHA
 0.700000

	)

171 
	#ISPC_SHARP_OVERSHOOT
 1.050000

	)

172 
	#ISPC_SHARP_UNDERSHOOT
 1.000000

	)

173 
	#ISPC_SHARP_RANGE_STOP_0
 0.003922

	)

174 
	#ISPC_SHARP_RANGE_STOP_1
 0.019608

	)

175 
	#ISPC_SHARP_RANGE_STOP_2
 0.980392

	)

176 
	#ISPC_SHARP_RANGE_STOP_3
 1.000000

	)

177 
	#ISPC_SHARP_MIN_THR
 0.000000

	)

178 
	#ISPC_SHARP_COEF0
 0.070159

	)

179 
	#ISPC_SHARP_COEF1
 0.131075

	)

180 
	#ISPC_SHARP_COEF2
 0.190713

	)

181 
	#ISPC_SHARP_COEF3
 0.216106

	)

187 
	#ISPC_CGEN_EPSILON
 1

	)

188 
	#ISPC_CGEN_KR
 106

	)

189 
	#ISPC_CGEN_KG
 191

	)

190 
	#ISPC_CGEN_KB
 149

	)

191 
	#ISPC_CGEN_LUMA_COEFF_R
 76

	)

192 
	#ISPC_CGEN_LUMA_COEFF_G
 150

	)

193 
	#ISPC_CGEN_LUMA_COEFF_B
 29

	)

194 
	#ISPC_CGEN_PFR_STRENGTH
 80

	)

195 
	#ISPC_CGEN_DESAT_OFFSET
 4

	)

196 
	#ISPC_CGEN_DESAT_SLOPE
 43

	)

198 
	#BYPASS_PF_DAD
 
DISABLED


	)

199 
	#DSMODE_CARRY
 0x0

	)

200 
	#DSMODE_DOWN
 0x1

	)

201 
	#DSMODE_UPDN
 0x2

	)

202 
	#DS_MODE
 
DSMODE_DOWN


	)

207 
	#MEDIAN_KERNEL_SIZE
 0x7

208 
	#MEDIAN_THRESHOLD
 0x1FF

	)

209 
	#MEDIAN_OUT_SEL
 ((
MEDIAN_KERNEL_SIZE
 >> 1Ë* (MEDIAN_KERNEL_SIZEË+ (MEDIAN_KERNEL_SIZE >> 1))

	)

210 
	#MEDIAN_LUMA_ABLEND_EN
 
ENABLED


	)

211 
	#MEDIAN_LUMA_SAMPLE_EN
 
ENABLED


	)

213 
	#ISPC_CHROMA_MEDIAN_MIX_SLOPE
 10

	)

214 
	#ISPC_CHROMA_MEDIAN_MIX_OFFSET
 -26

	)

219 
	#ISPC_CHROMA_DNS_TH_R
 20

	)

220 
	#ISPC_CHROMA_DNS_TH_G
 15

	)

221 
	#ISPC_CHROMA_DNS_TH_B
 38

	)

222 
	#ISPC_CHROMA_DNS_LIMIT
 100

	)

223 
	#ISPC_CHROMA_DNS_H_ENAB
 7

	)

224 
	#PLANES_PER_CYCLE
 3

	)

225 
	#FORCE_WT_H
 0

	)

226 
	#FORCE_WT_V
 0

	)

229 
	#ISPC_GREY_DESAT_OFFSET
 -35

	)

230 
	#ISPC_GREY_DESAT_SLOPE
 7

	)

231 
	#ISPC_GREY_POINT_R
 106

	)

232 
	#ISPC_GREY_POINT_G
 137

	)

233 
	#ISPC_GREY_POINT_B
 75

	)

234 
	#GREY_PT_EN
 
DISABLED


	)

236 
uöt8_t
 
i•cLow∑ssKî√l
[9];

238 
	#ISPC_CHROMA_DNS_TH_R
 20

	)

239 
	#ISPC_CHROMA_DNS_TH_G
 15

	)

240 
	#ISPC_CHROMA_DNS_TH_B
 38

	)

242 
	#CHROMA_DNS_THRESH0
 (
ISPC_CHROMA_DNS_TH_R
 | (ISPC_CHROMA_DNS_TH_R << 16Ë| (
ISPC_CHROMA_DNS_TH_G
 << 8Ë| (ISPC_CHROMA_DNS_TH_G << 24))

	)

243 
	#CHROMA_DNS_THRESH1
 (
ISPC_CHROMA_DNS_TH_B
 | (ISPC_CHROMA_DNS_TH_B << 16))

	)

247 
i•cCCM
[9];

248 
i•cCCMOff
[3];

250 
	#FORCE_LUMA_ONE
 
DISABLED


	)

251 
	#LUT_3D_BYPASS
 
ENABLED


	)

252 
	#LUT_3D_LOAD
 
DISABLED


	)

253 
	#U12F_OUTPUT
 
DISABLED


	)

254 
	#MUL
 255

	)

255 
	#CC_OUTPUT_PLANE
 3

	)

257 
	#T1
 2

	)

259 
	#ISPC_CC_KR
 618

	)

260 
	#ISPC_CC_KG
 343

	)

261 
	#ISPC_CC_KB
 440

	)

263 
u16
 
ccm_lut_c€ffs
[9];

264 
u16
 
ccm_lut_off£ts
[3];

269 
	#INTERP_MODE
 
ENABLED


	)

270 
	#CHANNEL_MODE
 
ENABLED


	)

271 
	#INT_WIDTH
 12

	)

272 
	#LUTS_NO
 2

	)

273 
	#LUT_LOAD
 
ENABLED


	)

274 
	#APB_ACCESS
 
DISABLED


	)

275 
	#CSC_ENABLE
 
ENABLED


	)

276 
	#CHANNELS_NO
 3

	)

278 
i•cGammaTabÀ
[8192];

279 
uöt16_t
 
gammaLutFp16
[512*4];

280 
i•cCSC
[9];

281 
i•cCSCOff
[3];

283 
uöt16_t
 
lut3d
[16*16*16*4];

285 
u16
 
csc_lut_c€ffs
[9];

286 
u16
 
csc_lut_off£ts
[3];

288 
	#LUT_LD_FORMAT
 0

	)

290 
	#LUT_MAT_11
 
csc_lut_c€ffs
[0]

	)

291 
	#LUT_MAT_12
 
csc_lut_c€ffs
[1]

	)

292 
	#LUT_MAT_13
 
csc_lut_c€ffs
[2]

	)

293 
	#LUT_MAT_21
 
csc_lut_c€ffs
[3]

	)

294 
	#LUT_MAT_22
 
csc_lut_c€ffs
[4]

	)

295 
	#LUT_MAT_23
 
csc_lut_c€ffs
[5]

	)

296 
	#LUT_MAT_31
 
csc_lut_c€ffs
[6]

	)

297 
	#LUT_MAT_32
 
csc_lut_c€ffs
[7]

	)

298 
	#LUT_MAT_33
 
csc_lut_c€ffs
[8]

	)

299 
	#LUT_OFF_1
 
csc_lut_off£ts
[0]

	)

300 
	#LUT_OFF_2
 
csc_lut_off£ts
[1]

	)

301 
	#LUT_OFF_3
 
csc_lut_off£ts
[2]

	)

303 
	#LUT_REGION0_SIZE_I
 5

	)

304 
	#LUT_REGION1_SIZE_I
 5

	)

305 
	#LUT_REGION2_SIZE_I
 5

	)

306 
	#LUT_REGION3_SIZE_I
 5

	)

307 
	#LUT_REGION4_SIZE_I
 5

	)

308 
	#LUT_REGION5_SIZE_I
 5

	)

309 
	#LUT_REGION6_SIZE_I
 5

	)

310 
	#LUT_REGION7_SIZE_I
 5

	)

312 
	#LUT_REGION8_SIZE_I
 5

	)

313 
	#LUT_REGION9_SIZE_I
 5

	)

314 
	#LUT_REGION10_SIZE_I
 5

	)

315 
	#LUT_REGION11_SIZE_I
 5

	)

316 
	#LUT_REGION12_SIZE_I
 5

	)

317 
	#LUT_REGION13_SIZE_I
 5

	)

318 
	#LUT_REGION14_SIZE_I
 5

	)

319 
	#LUT_REGION15_SIZE_I
 5

	)

324 
	#POLYFIR_Y_H_NUM
 1

	)

325 
	#POLYFIR_Y_H_DEN
 1

	)

326 
	#POLYFIR_Y_V_NUM
 1

	)

327 
	#POLYFIR_Y_V_DEN
 1

	)

328 
	#POLYFIR_U_H_NUM
 1

	)

329 
	#POLYFIR_U_H_DEN
 2

	)

330 
	#POLYFIR_U_V_NUM
 1

	)

331 
	#POLYFIR_U_V_DEN
 2

	)

332 
	#POLYFIR_V_H_NUM
 1

	)

333 
	#POLYFIR_V_H_DEN
 2

	)

334 
	#POLYFIR_V_V_NUM
 1

	)

335 
	#POLYFIR_V_V_DEN
 2

	)

337 
uöt8_t
 
hC€fs
[];

338 
uöt8_t
 
vC€fs
[];

	@Sipp/SippFw/Runtimes/MultiStream/leon/app_config.c

13 
	~<ªgi°îsMyrüd.h
>

14 
	~<DrvC¥.h
>

19 #i‚de‡
IPIPE_CLK_CONFIG_SEL


20 
	#ùùeClockC⁄fig
 
ùùeClkC⁄figMV182


	)

22 
	#ùùeClockC⁄fig
 
IPIPE_CLK_CONFIG_SEL


	)

35 
tyAuxClkDividîCfg
 
	gauxClkAŒOn
[] =

38 {(0x0FFFFFFF & (~
AUX_CLK_MASK_DDR_CORE_CTRL
)), 
CLK_SRC_REFCLK0
, 1, 1},

43 
tySocClockC⁄fig
 
	gùùeClkC⁄figMV182
 =

45 .
ªfClk0I≈utKhz
 = 12000,

46 .
	gªfClk1I≈utKhz
 = 0,

47 .
	gèrgëPŒ0FªqKhz
 = 504000,

48 .
	gèrgëPŒ1FªqKhz
 = 0,

49 .
	g˛kSrcPŒ1
 = 
CLK_SRC_REFCLK0
,

50 .
	gma°îClkDivNumî©‹
 = 
DONT_TOUCH_MASTER_DIVIDER
,

51 .
	gma°îClkDivDíomö©‹
 = 
DONT_TOUCH_MASTER_DIVIDER
,

52 .
	gcssDssClockE«bÀMask
 = 0xFFFFFFFFFFFFFFFFULL,

53 .
	gmssClockE«bÀMask
 = 0xFFFFFFFF,

54 .
	gsùpClockE«bÀMask
 = 0xFFFFFFFF,

55 .
	gu∑ClockE«bÀMask
 = 0xFFFFFFFF,

56 .
	gpAuxClkCfg
 = 
auxClkAŒOn
,

68 
	$öôClocksAndMem‹y
()

70 
	`DrvC¥Inô
();

71 
	`DrvC¥SëupClocks
(&
ùùeClockC⁄fig
);

74 
	}
}

	@Sipp/SippFw/Runtimes/MultiStream/leon/app_config.h

13 #i‚de‡
APP_CONFIG_H


14 
	#APP_CONFIG_H


	)

18 
	~"mv_ty≥s.h
"

29 
öôClocksAndMem‹y
();

	@Sipp/SippFw/Runtimes/MultiStream/leon/main.c

9 
	~<sùp.h
>

10 
	~<sùpTe°Comm⁄.h
>

11 
	~<ö˛ude/sùpHwDefs.h
>

12 
	~<¨ch/ma2x5x/ö˛ude/sùpHwDefs_ma2x5x.h
>

13 #i‡
deföed
(
SIPP_VCS
)

14 
	~<UnôTe°Api.h
>

15 
	~<DrvTimî.h
>

16 
	~<DrvDdr.h
>

19 
	~"ISPPùeSëtögs.h
"

25 
	#SIPP_NUM_PIPELINES
 2

	)

26 
	#SIPP_TEST_NUM_FRAMES
 3

	)

27 
	#CC_APP_EVENT_HISTORY_SIZE
 8

	)

30 
	#SIPP_ISP_PIPE_BUFFER_WIDTH
 512

	)

31 
	#SIPP_ISP_PIPE_BUFFER_HEIGHT
 128

	)

32 
	#ISPC_BAYER_BITS
 10

	)

33 
	#BAYER_PATTERN
 
RGGB


	)

34 
	#FORMAT
 
BAYER


	)

35 
	#ISPC_CHROMA_PIPE_WIDTH
 (
SIPP_ISP_PIPE_BUFFER_WIDTH
 >> 0x1)

	)

36 
	#ISPC_CHROMA_PIPE_HEIGHT
 (
SIPP_ISP_PIPE_BUFFER_HEIGHT
 >> 0x1)

	)

38 
	#POLY_Y_IMAGE_WIDTH
 ((((
SIPP_ISP_PIPE_BUFFER_WIDTH
 * 
POLYFIR_Y_H_NUM
Ë- 1Ë/ 
POLYFIR_Y_H_DEN
Ë+ 1)

	)

39 
	#POLY_Y_IMAGE_HEIGHT
 ((((
SIPP_ISP_PIPE_BUFFER_HEIGHT
 * 
POLYFIR_Y_V_NUM
Ë- 1Ë/ 
POLYFIR_Y_V_DEN
Ë+ 1)

	)

40 
	#POLY_UV_IMAGE_WIDTH
 ((((
SIPP_ISP_PIPE_BUFFER_WIDTH
 * 
POLYFIR_U_H_NUM
Ë- 1Ë/ 
POLYFIR_U_H_DEN
Ë+ 1)

	)

41 
	#POLY_UV_IMAGE_HEIGHT
 ((((
SIPP_ISP_PIPE_BUFFER_HEIGHT
 * 
POLYFIR_U_V_NUM
Ë- 1Ë/ 
POLYFIR_U_V_DEN
Ë+ 1)

	)

44 
	#SIPP_CONV_PIPE_BUFFER_WIDTH
 512

	)

45 
	#SIPP_CONV_PIPE_BUFFER_HEIGHT
 512

	)

51 vﬁ©ûê
u32
 
	gã°Com∂ëe
 = 0;

52 
u32
 
	gsùpEº‹Log
[
SIPP_ERROR_HISTORY_SIZE
];

57 
	mCC_APP_PIPE_STATE_UNINIT
 = 0x00,

58 
	mCC_APP_PIPE_STATE_IDLE
 = 0x01,

59 
	mCC_APP_PIPE_STATE_RUNNING
 = 0x02,

60 
	mCC_APP_PIPE_STATE_COMPLETE
 = 0x03

62 } 
	tCC_APP_PIPE_STATE
;

67 
	mCC_APP_PIPE_EVENT_NONE
 = 0x00,

68 
	mCC_APP_PIPE_EVENT_FRAME_DONE
 = 0x01

70 } 
	tCC_APP_PIPE_EVENT
;

74 
CC_APP_PIPE_STATE
 
	meSèã
;

75 
CC_APP_PIPE_EVENT
 
	mevítLi°
[
CC_APP_EVENT_HISTORY_SIZE
];

76 
u32
 
	m‰amesCom∂ëe
;

77 
u32
 
	mevítLi°WrPå
;

78 
u32
 
	mevítLi°RdPå
;

80 
SùpPùñöe
 * 
	msùpFwH™dÀ
;

82 
SùpFûãr
 * 
	mdmaIn
;

83 
SùpFûãr
 * 
	mdmaOut
;

85 
SùpFûãr
 * 
	mc⁄vMa2x5x0
;

87 
SùpFûãr
 * 
	msigmaDnsMa2x5x0
;

88 
SùpFûãr
 * 
	mlscMa2x5x0
;

89 
SùpFûãr
 * 
	møwMa2x5x0
;

90 
SùpFûãr
 * 
	mdebayîMa2x5x0
;

91 
SùpFûãr
 * 
	mdogLtmMa2x5x0
;

92 
SùpFûãr
 * 
	mydnsMa2x5x0
;

93 
SùpFûãr
 * 
	msh¨≥nMa2x5x0
;

94 
SùpFûãr
 * 
	mchromaGíMa2x5x0
;

95 
SùpFûãr
 * 
	mmedünMa2x5x0
;

96 
SùpFûãr
 * 
	mchromadnsMa2x5x0
;

97 
SùpFûãr
 * 
	mcﬁ‹combMa2x5x0
;

98 
SùpFûãr
 * 
	mlutMa2x5x0
;

99 
SùpFûãr
 * 
	mPﬁyFúY
;

100 
SùpFûãr
 * 
	mPﬁyFúUV
;

101 
SùpFûãr
 * 
	mdmaOutY
;

102 
SùpFûãr
 * 
	mdmaOutUV
;

104 } 
	tC⁄cuºícyAµPùe
, * 
	tpC⁄cuºícyAµPùe
;

106 
C⁄cuºícyAµPùe
 
	gc⁄cuºícyPùeLi°
[
SIPP_NUM_PIPELINES
];

108 
UI¡16
 
DDR_DATA
 
	giBufA
[
SIPP_ISP_PIPE_BUFFER_WIDTH
 * 
SIPP_ISP_PIPE_BUFFER_HEIGHT
] 
ALIGNED
(8);

109 
UI¡8
 
DDR_DATA
 
	goBufA
[
SIPP_ISP_PIPE_BUFFER_WIDTH
 * 
SIPP_ISP_PIPE_BUFFER_HEIGHT
 + (2 * 
POLY_UV_IMAGE_WIDTH
Ë* 
POLY_UV_IMAGE_HEIGHT
] 
ALIGNED
(8);

110 
UI¡8
 
DDR_DATA
 
	giBufB
[
SIPP_CONV_PIPE_BUFFER_WIDTH
 * 
SIPP_CONV_PIPE_BUFFER_HEIGHT
] 
ALIGNED
(8);

111 
UI¡8
 
DDR_DATA
 
	goBufB
[
SIPP_CONV_PIPE_BUFFER_WIDTH
 * 
SIPP_CONV_PIPE_BUFFER_HEIGHT
] 
ALIGNED
(8);

116 
≠pSùpCÆlback
 (
SùpPùñöe
 * 
pPùñöe
,

117 
eSIPP_PIPELINE_EVENT
 
eEvít
,

118 
SIPP_PIPELINE_EVENT_DATA
 * 
±EvítD©a
);

126 
	$buûdISPPùe
 ( )

129 
C⁄cuºícyAµPùe
 * 
∂A
 = &
c⁄cuºícyPùeLi°
[0];

130 
∂A
->
sùpFwH™dÀ
 = 
	`sùpCª©ePùñöe
(0, 4, 
	`SIPP_MBIN
(
mböImgSùp
));

133 
∂A
->
dmaIn
 = 
	`sùpCª©eFûãr
’lA->
sùpFwH™dÀ
, 0x0, 
SIPP_ISP_PIPE_BUFFER_WIDTH
, 
SIPP_ISP_PIPE_BUFFER_HEIGHT
, 
	`N_PL
(1), 
	`SZ
(
UI¡16
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

134 
∂A
->
sigmaDnsMa2x5x0
 = 
	`sùpCª©eFûãr
’lA->
sùpFwH™dÀ
, 0x0, 
SIPP_ISP_PIPE_BUFFER_WIDTH
, 
SIPP_ISP_PIPE_BUFFER_HEIGHT
, 
	`N_PL
(1), 
	`SZ
(
UI¡16
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_SIGMA_ID
, 0);

135 
∂A
->
lscMa2x5x0
 = 
	`sùpCª©eFûãr
’lA->
sùpFwH™dÀ
, 0x0, 
SIPP_ISP_PIPE_BUFFER_WIDTH
, 
SIPP_ISP_PIPE_BUFFER_HEIGHT
, 
	`N_PL
(1), 
	`SZ
(
UI¡16
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_LSC_ID
, 0);

136 
∂A
->
øwMa2x5x0
 = 
	`sùpCª©eFûãr
’lA->
sùpFwH™dÀ
, 0x0, 
SIPP_ISP_PIPE_BUFFER_WIDTH
, 
SIPP_ISP_PIPE_BUFFER_HEIGHT
, 
	`N_PL
(1), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_RAW_ID
, 0);

137 
∂A
->
debayîMa2x5x0
 = 
	`sùpCª©eFûãr
’lA->
sùpFwH™dÀ
, 0x0, 
SIPP_ISP_PIPE_BUFFER_WIDTH
, 
SIPP_ISP_PIPE_BUFFER_HEIGHT
, 
	`N_PL
(3), 
	`SZ
(
UI¡16
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DBYR_ID
, 0);

138 
	`sùpFûãrAddOBuf
(
∂A
->
debayîMa2x5x0
, 1, (
Â16
));

139 
∂A
->
dogLtmMa2x5x0
 = 
	`sùpCª©eFûãr
’lA->
sùpFwH™dÀ
, 0x0, 
SIPP_ISP_PIPE_BUFFER_WIDTH
, 
SIPP_ISP_PIPE_BUFFER_HEIGHT
, 
	`N_PL
(1), 
	`SZ
(
Â16
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DOGL_ID
, 0);

140 
∂A
->
ydnsMa2x5x0
 = 
	`sùpCª©eFûãr
’lA->
sùpFwH™dÀ
, 0x0, 
SIPP_ISP_PIPE_BUFFER_WIDTH
, 
SIPP_ISP_PIPE_BUFFER_HEIGHT
, 
	`N_PL
(1), 
	`SZ
(
Â16
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_LUMA_ID
, 0);

141 
∂A
->
sh¨≥nMa2x5x0
 = 
	`sùpCª©eFûãr
’lA->
sùpFwH™dÀ
, 0x0, 
SIPP_ISP_PIPE_BUFFER_WIDTH
, 
SIPP_ISP_PIPE_BUFFER_HEIGHT
, 
	`N_PL
(1), 
	`SZ
(
Â16
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_SHARPEN_ID
,0);

142 
∂A
->
chromaGíMa2x5x0
 = 
	`sùpCª©eFûãr
’lA->
sùpFwH™dÀ
, 
SIPP_RESIZE
, 
ISPC_CHROMA_PIPE_WIDTH
, 
ISPC_CHROMA_PIPE_HEIGHT
, 
	`N_PL
(3), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_CGEN_ID
, 0);

143 
∂A
->
medünMa2x5x0
 = 
	`sùpCª©eFûãr
’lA->
sùpFwH™dÀ
, 0x0, 
ISPC_CHROMA_PIPE_WIDTH
, 
ISPC_CHROMA_PIPE_HEIGHT
, 
	`N_PL
(3), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_MED_ID
, 0);

144 
∂A
->
chromadnsMa2x5x0
 = 
	`sùpCª©eFûãr
’lA->
sùpFwH™dÀ
, 0x0, 
ISPC_CHROMA_PIPE_WIDTH
, 
ISPC_CHROMA_PIPE_HEIGHT
, 
	`N_PL
(3), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_CHROMA_ID
, 0);

145 
∂A
->
cﬁ‹combMa2x5x0
 = 
	`sùpCª©eFûãr
’lA->
sùpFwH™dÀ
, 0x0, 
SIPP_ISP_PIPE_BUFFER_WIDTH
, 
SIPP_ISP_PIPE_BUFFER_HEIGHT
, 
	`N_PL
(3), 
	`SZ
(
UI¡16
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_CC_ID
, 0);

146 
∂A
->
lutMa2x5x0
 = 
	`sùpCª©eFûãr
’lA->
sùpFwH™dÀ
, 0x0, 
SIPP_ISP_PIPE_BUFFER_WIDTH
, 
SIPP_ISP_PIPE_BUFFER_HEIGHT
, 
	`N_PL
(3), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_LUT_ID
, 0);

147 
∂A
->
PﬁyFúY
 = 
	`sùpCª©eFûãr
’lA->
sùpFwH™dÀ
, 
SIPP_RESIZE
, 
POLY_Y_IMAGE_WIDTH
, 
POLY_Y_IMAGE_HEIGHT
, 
	`N_PL
(1), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_UPFIRDN0_ID
, 0);

148 
∂A
->
PﬁyFúUV
 = 
	`sùpCª©eFûãr
’lA->
sùpFwH™dÀ
, 
SIPP_RESIZE
, 
POLY_UV_IMAGE_WIDTH
, 
POLY_UV_IMAGE_HEIGHT
, 
	`N_PL
(2), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_UPFIRDN1_ID
, 0);

149 
∂A
->
dmaOutY
 = 
	`sùpCª©eFûãr
’lA->
sùpFwH™dÀ
, 0x00, 
POLY_Y_IMAGE_WIDTH
, 
POLY_Y_IMAGE_HEIGHT
, 
	`N_PL
(1), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

150 
∂A
->
dmaOutUV
 = 
	`sùpCª©eFûãr
’lA->
sùpFwH™dÀ
, 0x00, 
POLY_UV_IMAGE_WIDTH
, 
POLY_UV_IMAGE_HEIGHT
, 
	`N_PL
(2), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

153 
	`sùpLökFûãr
(
∂A
->
sigmaDnsMa2x5x0
,ÖlA->
dmaIn
 , 5,5);

154 
	`sùpLökFûãr
(
∂A
->
lscMa2x5x0
,ÖlA->
sigmaDnsMa2x5x0
, 1,1);

155 
	`sùpLökFûãr
(
∂A
->
øwMa2x5x0
,ÖlA->
lscMa2x5x0
, 5,5);

156 
	`sùpLökFûãr
(
∂A
->
debayîMa2x5x0
,ÖlA->
øwMa2x5x0
, 11,11);

157 
	`sùpLökFûãr
(
∂A
->
dogLtmMa2x5x0
,ÖlA->
debayîMa2x5x0
, 15,15);

158 
	`sùpLökFûãrSëOBuf
(
∂A
->
dogLtmMa2x5x0
,ÖlA->
debayîMa2x5x0
, 1);

159 
	`sùpLökFûãr
(
∂A
->
ydnsMa2x5x0
,ÖlA->
dogLtmMa2x5x0
, 11,11);

160 
	`sùpLökFûãr
(
∂A
->
sh¨≥nMa2x5x0
,ÖlA->
ydnsMa2x5x0
, 7,7);

161 
	`sùpLökFûãr
(
∂A
->
chromaGíMa2x5x0
,ÖlA->
debayîMa2x5x0
, 6,6);

162 
	`sùpLökFûãr
(
∂A
->
medünMa2x5x0
,ÖlA->
chromaGíMa2x5x0
, 7,7);

163 
	`sùpLökFûãr
(
∂A
->
medünMa2x5x0
,ÖlA->
debayîMa2x5x0
, 1,0);

164 
	`sùpLökFûãrSëOBuf
(
∂A
->
medünMa2x5x0
,ÖlA->
debayîMa2x5x0
, 1);

165 
	`sùpLökFûãr
(
∂A
->
chromadnsMa2x5x0
,ÖlA->
medünMa2x5x0
, 3,3);

166 
	`sùpLökFûãr
(
∂A
->
cﬁ‹combMa2x5x0
,ÖlA->
sh¨≥nMa2x5x0
, 1,1);

167 
	`sùpLökFûãr
(
∂A
->
cﬁ‹combMa2x5x0
,ÖlA->
chromadnsMa2x5x0
, 5,5);

168 
	`sùpLökFûãr
(
∂A
->
lutMa2x5x0
,ÖlA->
cﬁ‹combMa2x5x0
, 1,1);

169 
	`sùpLökFûãr
(
∂A
->
PﬁyFúY
,ÖlA->
lutMa2x5x0
, 7,7);

170 
	`sùpLökFûãr
(
∂A
->
PﬁyFúUV
,ÖlA->
lutMa2x5x0
, 7,7);

171 
	`sùpLökFûãr
(
∂A
->
dmaOutY
,ÖlA->
PﬁyFúY
, 1,1);

172 
	`sùpLökFûãr
(
∂A
->
dmaOutUV
,ÖlA->
PﬁyFúUV
, 1,1);

174 i‡(
	`sùpPùeGëEº‹Sètus
 (
∂A
->
sùpFwH™dÀ
))

176 
u32
 
îrNum
;

177 
	`¥ötf
 ("Pipeline-A creationÉrror\nError codes:\n");

178 
îrNum
 = 
	`sùpGëEº‹Hi°‹y
 (
sùpEº‹Log
);

179 
îrNum
)

181 
	`¥ötf
 ("%08lx\n", 
sùpEº‹Log
[
îrNum
 - 0x1]);

182 
îrNum
--;

187 
	`sùpRegi°îEvítCÆlback
 (
∂A
->
sùpFwH™dÀ
, 
≠pSùpCÆlback
);

190 
∂A
->
sùpFwH™dÀ
->
Êags
 |
PLF_CONSIDER_OPIPE_RT
;

191 
	}
}

193 
ISPPùeCª©eP¨ams
 ();

195 
	$c⁄figISPPùe
 ( )

197 
C⁄cuºícyAµPùe
 * 
∂A
 = &
c⁄cuºícyPùeLi°
[0];

198 
DmaP¨am
 *
dmaInCfg
 = (DmaP¨am *)
∂A
->
dmaIn
->
∑øms
;

199 
SigmaP¨am
 *
sigmaDnsMa2x5x0Cfg
 = (SigmaP¨am *)
∂A
->
sigmaDnsMa2x5x0
->
∑øms
;

200 
LscP¨am
 *
lscMa2x5x0Cfg
 = (LscP¨am *)
∂A
->
lscMa2x5x0
->
∑øms
;

201 
RawP¨am
 *
øwMa2x5x0Cfg
 = (RawP¨am *)
∂A
->
øwMa2x5x0
->
∑øms
;

202 
DbyrP¨am
 *
debayîMa2x5x0Cfg
 = (DbyrP¨am *)
∂A
->
debayîMa2x5x0
->
∑øms
;

203 
DogLtmP¨am
 *
dogLtmMa2x5x0Cfg
 = (DogLtmP¨am *)
∂A
->
dogLtmMa2x5x0
->
∑øms
;

204 
YDnsP¨am
 *
ydnsMa2x5x0Cfg
 = (YDnsP¨am *)
∂A
->
ydnsMa2x5x0
->
∑øms
;

205 
UsmP¨am
 *
sh¨≥nMa2x5x0Cfg
 = (UsmP¨am *)
∂A
->
sh¨≥nMa2x5x0
->
∑øms
;

206 
GíChrP¨am
 *
chromaGíMa2x5x0Cfg
 = (GíChrP¨am *)
∂A
->
chromaGíMa2x5x0
->
∑øms
;

207 
MedP¨am
 *
medünMa2x5x0Cfg
 = (MedP¨am *)
∂A
->
medünMa2x5x0
->
∑øms
;

208 
ChrDnsP¨am
 *
chromadnsMa2x5x0Cfg
 = (ChrDnsP¨am *)
∂A
->
chromadnsMa2x5x0
->
∑øms
;

209 
CﬁCombP¨am
 *
cﬁ‹combMa2x5x0Cfg
 = (CﬁCombP¨am *)
∂A
->
cﬁ‹combMa2x5x0
->
∑øms
;

210 
LutP¨am
 *
lutMa2x5x0Cfg
 = (LutP¨am *)
∂A
->
lutMa2x5x0
->
∑øms
;

211 
PﬁyFúP¨am
 *
pﬁyFúYCfg
 = (PﬁyFúP¨am *)
∂A
->
PﬁyFúY
->
∑øms
;

212 
PﬁyFúP¨am
 *
pﬁyFúUVCfg
 = (PﬁyFúP¨am *)
∂A
->
PﬁyFúUV
->
∑øms
;

213 
DmaP¨am
 *
dmaOutYCfg
 = (DmaP¨am *)
∂A
->
dmaOutY
->
∑øms
;

214 
DmaP¨am
 *
dmaOutUVCfg
 = (DmaP¨am *)
∂A
->
dmaOutUV
->
∑øms
;

219 
sigmaDnsMa2x5x0Cfg
->
thªsh
[0]=(
ISPC_SIGMA_THRESH1_P0
 << 0 | 
ISPC_SIGMA_THRESH2_P0
 << 8 | 
ISPC_SIGMA_THRESH1_P1
 << 16 | 
ISPC_SIGMA_THRESH2_P1
 << 24);

220 
sigmaDnsMa2x5x0Cfg
->
thªsh
[1]=(
ISPC_SIGMA_THRESH1_P2
 << 0 | 
ISPC_SIGMA_THRESH2_P2
 << 8 | 
ISPC_SIGMA_THRESH1_P3
 << 16 | 
ISPC_SIGMA_THRESH2_P3
 << 24);

221 
sigmaDnsMa2x5x0Cfg
->
cfg

	`SIGMA_DNS_CFG
(
ISPC_SIGMA_NOISE_FLOOR
, (
ISPC_BAYER_BITS
 - 1), 
SIGMA_DNS_PASSTHRU_BIT
,
FORMAT
);

222 
sigmaDnsMa2x5x0Cfg
->
bayîP©ã∫
=
GRBG
;

223 
sigmaDnsMa2x5x0Cfg
->
blcGR
=16;

224 
sigmaDnsMa2x5x0Cfg
->
blcR
=16;

225 
sigmaDnsMa2x5x0Cfg
->
blcB
=16;

226 
sigmaDnsMa2x5x0Cfg
->
blcGB
=16;

227 
lscMa2x5x0Cfg
->
gmBa£

i•cLscMesh
;

228 
lscMa2x5x0Cfg
->
gmWidth

ISPC_LSC_GAIN_MAP_W
;

229 
lscMa2x5x0Cfg
->
gmHeight

ISPC_LSC_GAIN_MAP_H
;

230 
lscMa2x5x0Cfg
->
d©aF‹m©
=
	`SIPP_LSC_CFG_FORMAT
(
BAYER
);

231 
lscMa2x5x0Cfg
->
d©aWidth
=
ISPC_BAYER_BITS
;

232 
øwMa2x5x0Cfg
->
grgbPœt

	`RAW_GRGB_PLATO
(
ISPC_GRGB_IMBAL_PLAT_DARK
,
ISPC_GRGB_IMBAL_PLAT_BRIGHT
);

233 
øwMa2x5x0Cfg
->
grgbDeˇy
=
	`RAW_GRGB_DECAY
(
ISPC_GRGB_IMBAL_DECAY_BRIGHT
, 
ISPC_GRGB_IMBAL_DECAY_DARK
);

234 
øwMa2x5x0Cfg
->
badPixCfg
=
	`RAW_BAD_PIX_CFG
(
ISPC_BAD_PIX_NOISE_LEVEL
, 
ISPC_BAD_PIX_ALPHA_G_HOT
, 
ISPC_BAD_PIX_ALPHA_G_COLD
, 
ISPC_BAD_PIX_ALPHA_RB_HOT
, 
ISPC_BAD_PIX_ALPHA_RB_COLD
);

235 
øwMa2x5x0Cfg
->
cfg

	`RAW_CFG
(
BAYER
,
BAYER_PATTERN
,
GRGB_IMBAL_EN
,0,
AE_PATCH_STATS_EN
,
AE_RGB_HIST_STATS_EN
,(
ISPC_BAYER_BITS
 - 1),
ISPC_GRGB_IMBAL_THRESHOLD
,0,
AF_PATCH_STATS_EN
,
BAYER_2x2_MODE
,
AE_Y_HIST_STATS_EN
,
HOT_COLD_PIX_SUPPRESS_EN
);

236 
øwMa2x5x0Cfg
->
gaöS©
[0]=((
ISPC_RAW_CLAMP_0
<<16Ë| 
ISPC_RAW_GAIN_GR
 );

237 
øwMa2x5x0Cfg
->
gaöS©
[1]((
ISPC_RAW_CLAMP_1
<<16Ë| 
ISPC_RAW_GAIN_R
 );

238 
øwMa2x5x0Cfg
->
gaöS©
[2]((
ISPC_RAW_CLAMP_2
<<16Ë| 
ISPC_RAW_GAIN_B
 );

239 
øwMa2x5x0Cfg
->
gaöS©
[3]((
ISPC_RAW_CLAMP_3
<<16Ë| 
ISPC_RAW_GAIN_GB
 );

240 
øwMa2x5x0Cfg
->
°©sBa£
=0;

241 
øwMa2x5x0Cfg
->
°©sPœ√s
=0;

242 
øwMa2x5x0Cfg
->
°©sP©chCfg
=0;

243 
øwMa2x5x0Cfg
->
°©sP©chSèπ
=0;

244 
øwMa2x5x0Cfg
->
°©sP©chSkù
=0;

245 
øwMa2x5x0Cfg
->
°©sThªsh
=0;

246 
øwMa2x5x0Cfg
->
afF1c€fs
[0]=0;

247 
øwMa2x5x0Cfg
->
afF1c€fs
[1]=0;

248 
øwMa2x5x0Cfg
->
afF1c€fs
[2]=0;

249 
øwMa2x5x0Cfg
->
afF1c€fs
[3]=0;

250 
øwMa2x5x0Cfg
->
afF1c€fs
[4]=0;

251 
øwMa2x5x0Cfg
->
afF1c€fs
[5]=0;

252 
øwMa2x5x0Cfg
->
afF1c€fs
[6]=0;

253 
øwMa2x5x0Cfg
->
afF1c€fs
[7]=0;

254 
øwMa2x5x0Cfg
->
afF1c€fs
[8]=0;

255 
øwMa2x5x0Cfg
->
afF1c€fs
[9]=0;

256 
øwMa2x5x0Cfg
->
afF1c€fs
[10]=0;

257 
øwMa2x5x0Cfg
->
afF2c€fs
[0]=0;

258 
øwMa2x5x0Cfg
->
afF2c€fs
[1]=0;

259 
øwMa2x5x0Cfg
->
afF2c€fs
[2]=0;

260 
øwMa2x5x0Cfg
->
afF2c€fs
[3]=0;

261 
øwMa2x5x0Cfg
->
afF2c€fs
[4]=0;

262 
øwMa2x5x0Cfg
->
afF2c€fs
[5]=0;

263 
øwMa2x5x0Cfg
->
afF2c€fs
[6]=0;

264 
øwMa2x5x0Cfg
->
afF2c€fs
[7]=0;

265 
øwMa2x5x0Cfg
->
afF2c€fs
[8]=0;

266 
øwMa2x5x0Cfg
->
afF2c€fs
[9]=0;

267 
øwMa2x5x0Cfg
->
afF2c€fs
[10]=0;

268 
øwMa2x5x0Cfg
->
afMöThªsh
=0;

269 
øwMa2x5x0Cfg
->
afSubåa˘
=0;

270 
øwMa2x5x0Cfg
->
afP©chCfg
=0;

271 
øwMa2x5x0Cfg
->
afP©chSèπ
=0;

272 
øwMa2x5x0Cfg
->
afSètsBa£
=0;

273 
øwMa2x5x0Cfg
->
hi°LumaBa£
=0;

274 
øwMa2x5x0Cfg
->
hi°RgbBa£
=0;

275 
debayîMa2x5x0Cfg
->
cfg

	`DEBAYER_CFG
(
BAYER_PATTERN
,0,0,
ISPC_BAYER_BITS
,
ISPC_DEBAYER_BITS
,
IMAGE_ORDER_OUT
, 
OUTPUT_PLANE_NO
,0);

276 
debayîMa2x5x0Cfg
->
thªsh
=
	`DEBAYER_THRESH
(0,0,1,1,1,0) ;

277 
debayîMa2x5x0Cfg
->
dew‹mCfg
=
	`DEBAYER_DEWORM
(
ISPC_DEMOSAIC_MIX_OFFSET
,
ISPC_DEMOSAIC_MIX_SLOPE
);

278 
debayîMa2x5x0Cfg
->
lumaWeight
=
	`DEBAYER_LUMA_COEFS_CFG
(
ISPC_DEMOSAIC_LUMA_WEIGHT_RED
 , 
ISPC_DEMOSAIC_LUMA_WEIGHT_GREEN
, 
ISPC_DEMOSAIC_LUMA_WEIGHT_BLUE
);

279 
dogLtmMa2x5x0Cfg
->
cfg

	`DOGL_CFG_SET
(
DOG_LTM_MODE
,
ISPC_DOG_THR
,
DOG_OUTPUT_CLAMP
,
DS_MODE
,
ISPC_LTM_FILTER_TH1
,0,
DOG_HEIGHT
);;

280 
dogLtmMa2x5x0Cfg
->
dogC€ffs11
=dogCoeffs11;

281 
dogLtmMa2x5x0Cfg
->
dogC€ffs15
=dogCoeffs15;

282 
dogLtmMa2x5x0Cfg
->
dogSåígth
=
ISPC_DOG_STRENGTH
;

283 
dogLtmMa2x5x0Cfg
->
…mCurves
=(
u16
 *)
…m_curves
;

284 
ydnsMa2x5x0Cfg
->
cfg

	`LUMA_DNS_CFG
(0x1, 
ISPC_LUMA_DNS_REF_SHIFT
, 
ISPC_LUMA_DNS_ALPHA
, 
ISPC_LUMA_DNS_BITPOS
);

285 
ydnsMa2x5x0Cfg
->
gaussLut
[0]=gaussLut[0];

286 
ydnsMa2x5x0Cfg
->
gaussLut
[1]=gaussLut[1];

287 
ydnsMa2x5x0Cfg
->
gaussLut
[2]=gaussLut[2];

288 
ydnsMa2x5x0Cfg
->
gaussLut
[3]=gaussLut[3];

289 
ydnsMa2x5x0Cfg
->
f2

ISPC_LUMA_DNS_F2
;

290 
ydnsMa2x5x0Cfg
->
gammaLut
[0]=gammaLut[0];

291 
ydnsMa2x5x0Cfg
->
gammaLut
[1]=gammaLut[1];

292 
ydnsMa2x5x0Cfg
->
gammaLut
[2]=gammaLut[2];

293 
ydnsMa2x5x0Cfg
->
gammaLut
[3]=gammaLut[3];

294 
ydnsMa2x5x0Cfg
->
gammaLut
[4]=gammaLut[4];

295 
ydnsMa2x5x0Cfg
->
di°Cfg
(
u32
)
i•cYDnsDi°Lut
;

296 
ydnsMa2x5x0Cfg
->
di°Off£ts
=
X_OFFSET
 | (
Y_OFFSET
 << 16);

297 
ydnsMa2x5x0Cfg
->
fuŒFrmDim
=(
SIPP_ISP_PIPE_BUFFER_WIDTH
 << 16 ) | 
SIPP_ISP_PIPE_BUFFER_HEIGHT
;

298 
sh¨≥nMa2x5x0Cfg
->
cfg

	`SHARPEN_CFG
–
THR
, 
SHARPEN_KERNEL_SIZE
,
OUTPUT_CLAMP
 ,
SHARPEN_MODE
,
OUTPUT_DELTAS
);

299 
sh¨≥nMa2x5x0Cfg
->
°ªngth
=
	`SHARPEN_STRENGTH_CFG
(
SHARPEN_STRENGTH_LIGHTEN
, 
SHARPEN_STRENGTH_DARKEN
 );

300 
sh¨≥nMa2x5x0Cfg
->
˛ù

SHARPEN_CLIPPING_ALPHA
;

301 
sh¨≥nMa2x5x0Cfg
->
limô

	`SHARPEN_LIMITS_CFG
(0x0,0x4000);

302 
sh¨≥nMa2x5x0Cfg
->
rgnSt›01
=
	`SHARPEN_RANGESTOP01_CFG
(
SHARPEN_RANGE_STOP0
, 
SHARPEN_RANGE_STOP1
);

303 
sh¨≥nMa2x5x0Cfg
->
rgnSt›23

	`SHARPEN_RANGESTOP01_CFG
(
SHARPEN_RANGE_STOP2
, 
SHARPEN_RANGE_STOP3
);

304 
sh¨≥nMa2x5x0Cfg
->
c€f01
=
	`SHARPEN_COEFS01_CFG
(0x0,0x0);

305 
sh¨≥nMa2x5x0Cfg
->
c€f23
=
	`SHARPEN_COEFS23_CFG
(0x0,0x0);

306 
chromaGíMa2x5x0Cfg
->
cfg
=
	`CGEN_CFG_SET
(
ISPC_CGEN_PFR_STRENGTH
,
ISPC_CGEN_DESAT_OFFSET
,
ISPC_CGEN_DESAT_SLOPE
,
ISPC_DEBAYER_BITS
,
BYPASS_PF_DAD
,
DS_MODE
);

307 
chromaGíMa2x5x0Cfg
->
yC€fs
=
	`CGEN_LUMA_COEFF_SET
(
ISPC_CGEN_LUMA_COEFF_R
,
ISPC_CGEN_LUMA_COEFF_G
,
ISPC_CGEN_LUMA_COEFF_B
) ;

308 
chromaGíMa2x5x0Cfg
->
chrC€fs
=
	`CGEN_CHROMA_COEFF_SET
(
ISPC_CGEN_EPSILON
,
ISPC_CGEN_KR
,
ISPC_CGEN_KG
,
ISPC_CGEN_KB
);

309 
medünMa2x5x0Cfg
->
cfg

	`MED_CFG
(
MEDIAN_KERNEL_SIZE
,
MEDIAN_OUT_SEL
,
MEDIAN_THRESHOLD
,
MEDIAN_LUMA_ABLEND_EN
,
MEDIAN_LUMA_SAMPLE_EN
,0);

310 
medünMa2x5x0Cfg
->
lumaAÕha
=
	`MED_LUMA_ALPHA
(
ISPC_CHROMA_MEDIAN_MIX_SLOPE
,
ISPC_CHROMA_MEDIAN_MIX_OFFSET
);

311 
chromadnsMa2x5x0Cfg
->
cfg
=
	`CHROMA_DNS_CFG
(
ISPC_CHROMA_DNS_H_ENAB
,
ISPC_CHROMA_DNS_LIMIT
,
FORCE_WT_H
,
FORCE_WT_V
,(
PLANES_PER_CYCLE
-1),
ISPC_GREY_DESAT_OFFSET
,
ISPC_GREY_DESAT_SLOPE
);

312 
chromadnsMa2x5x0Cfg
->
thr
[0]=
CHROMA_DNS_THRESH0
;

313 
chromadnsMa2x5x0Cfg
->
thr
[1]=
CHROMA_DNS_THRESH1
;

314 
chromadnsMa2x5x0Cfg
->
gªyPt
=
	`CHORMA_GREY_PT_SET
(
ISPC_GREY_POINT_B
,
ISPC_GREY_POINT_G
,
ISPC_GREY_POINT_R
,
GREY_PT_EN
);

315 
chromadnsMa2x5x0Cfg
->
chrC€fs
=
	`CHROMA_DNS_COEFFS_SET
(
i•cLow∑ssKî√l
[4],ispcLowpassKernel[1],ispcLowpassKernel[0]);

316 
cﬁ‹combMa2x5x0Cfg
->
cfg
=
	`CC_CFG
(
FORCE_LUMA_ONE
,0,
LUT_3D_BYPASS
,
LUT_3D_LOAD
,
U12F_OUTPUT
,
CC_OUTPUT_PLANE
);

317 
cﬁ‹combMa2x5x0Cfg
->
krgb
[0]=
ISPC_CC_KR
 | (
ISPC_CC_KG
 << 16);

318 
cﬁ‹combMa2x5x0Cfg
->
krgb
[1]=(
ISPC_CC_KB
 | (
ISPC_CGEN_EPSILON
 << 16));

319 
cﬁ‹combMa2x5x0Cfg
->
ccm
[0]=(
ccm_lut_c€ffs
[0] | (ccm_lut_coeffs[3] << 16));

320 
cﬁ‹combMa2x5x0Cfg
->
ccm
[1]=(
ccm_lut_c€ffs
[6] | (ccm_lut_coeffs[1] << 16));

321 
cﬁ‹combMa2x5x0Cfg
->
ccm
[2]=(
ccm_lut_c€ffs
[4] | (ccm_lut_coeffs[7] << 16));

322 
cﬁ‹combMa2x5x0Cfg
->
ccm
[3]=(
ccm_lut_c€ffs
[2] | (ccm_lut_coeffs[5] << 16));

323 
cﬁ‹combMa2x5x0Cfg
->
ccm
[4]=(
ccm_lut_c€ffs
[8] | (
ccm_lut_off£ts
[0] << 16));

324 
cﬁ‹combMa2x5x0Cfg
->
ccOffs
=(
ccm_lut_off£ts
[1] | (ccm_lut_offsets[2] << 16));

325 
cﬁ‹combMa2x5x0Cfg
->
thªeDLut
=0x0;

326 
cﬁ‹combMa2x5x0Cfg
->
lutF‹m©
=0x0;

327 
lutMa2x5x0Cfg
->
cfg

INTERP_MODE
 | 
CHANNEL_MODE
<< 1 | (
CHANNELS_NO
 - 1Ë<< 12 | 
LUT_LOAD
 << 14 | 
CSC_ENABLE
<< 16;

328 
lutMa2x5x0Cfg
->
sizeA

LUT_REGION0_SIZE_I
 | (
LUT_REGION1_SIZE_I
 << 4Ë| (
LUT_REGION2_SIZE_I
 << 8Ë| (
LUT_REGION3_SIZE_I
 << 12Ë| (
LUT_REGION4_SIZE_I
 << 16Ë| (
LUT_REGION5_SIZE_I
 << 20Ë| (
LUT_REGION6_SIZE_I
 << 24Ë| (
LUT_REGION7_SIZE_I
 << 28);

329 
lutMa2x5x0Cfg
->
sizeB

LUT_REGION8_SIZE_I
 | (
LUT_REGION9_SIZE_I
 << 4Ë| (
LUT_REGION10_SIZE_I
 << 8Ë| (
LUT_REGION11_SIZE_I
 << 12Ë| (
LUT_REGION12_SIZE_I
 << 16Ë| (
LUT_REGION13_SIZE_I
 << 20Ë| (
LUT_REGION14_SIZE_I
 << 24Ë| (
LUT_REGION15_SIZE_I
 << 28);

330 
lutMa2x5x0Cfg
->
lut
(*)
gammaLutFp16
;

331 
lutMa2x5x0Cfg
->
lutF‹m©
=
LUT_LD_FORMAT
;

332 
lutMa2x5x0Cfg
->
m©
[0]
LUT_MAT_11
;

333 
lutMa2x5x0Cfg
->
m©
[1]
LUT_MAT_12
;

334 
lutMa2x5x0Cfg
->
m©
[2]
LUT_MAT_13
;

335 
lutMa2x5x0Cfg
->
m©
[3]
LUT_MAT_21
;

336 
lutMa2x5x0Cfg
->
m©
[4]
LUT_MAT_22
;

337 
lutMa2x5x0Cfg
->
m©
[5]
LUT_MAT_23
;

338 
lutMa2x5x0Cfg
->
m©
[6]
LUT_MAT_31
;

339 
lutMa2x5x0Cfg
->
m©
[7]
LUT_MAT_32
;

340 
lutMa2x5x0Cfg
->
m©
[8]
LUT_MAT_33
;

341 
lutMa2x5x0Cfg
->
off£t
[0]=
LUT_OFF_1
;

342 
lutMa2x5x0Cfg
->
off£t
[1]=
LUT_OFF_2
;

343 
lutMa2x5x0Cfg
->
off£t
[2]=
LUT_OFF_3
;

344 
pﬁyFúYCfg
->
∂™eMode
=
POLY_PLANE_Y
;

345 
pﬁyFúYCfg
->
˛amp
 =0;

346 
pﬁyFúYCfg
->
h‹zD
 =
POLYFIR_Y_H_DEN
;

347 
pﬁyFúYCfg
->
h‹zN
 =
POLYFIR_Y_H_NUM
;

348 
pﬁyFúYCfg
->
vîtD
 =
POLYFIR_Y_V_DEN
;

349 
pﬁyFúYCfg
->
vîtN
 =
POLYFIR_Y_V_NUM
;

350 
pﬁyFúYCfg
->
h‹zC€fs
=(
UI¡8
*)
hC€fs
;

351 
pﬁyFúYCfg
->
vîtC€fs
=(
UI¡8
*)
vC€fs
;

352 
pﬁyFúUVCfg
->
∂™eMode
=
POLY_PLANE_UV
;

353 
pﬁyFúUVCfg
->
˛amp
 =0;

354 
pﬁyFúUVCfg
->
h‹zD
 =
POLYFIR_U_H_DEN
;

355 
pﬁyFúUVCfg
->
h‹zN
 =
POLYFIR_U_H_NUM
;

356 
pﬁyFúUVCfg
->
vîtD
 =
POLYFIR_U_V_DEN
;

357 
pﬁyFúUVCfg
->
vîtN
 =
POLYFIR_U_V_NUM
;

358 
pﬁyFúUVCfg
->
h‹zC€fs
=(
UI¡8
*)
hC€fs
;

359 
pﬁyFúUVCfg
->
vîtC€fs
=(
UI¡8
*)
vC€fs
;

360 
dmaInCfg
->
ddrAddr
 = (
UI¡32
)&
iBufA
;

361 
dmaOutYCfg
->
ddrAddr
 = (
UI¡32
)&
oBufA
;

362 
dmaOutUVCfg
->
ddrAddr
 = (
UI¡32
)&
oBufA
[
POLY_Y_IMAGE_WIDTH
 * 
POLY_Y_IMAGE_HEIGHT
];

364 
	`sùpFöÆizePùñöe
 (
∂A
->
sùpFwH™dÀ
);

366 i‡(
	`sùpPùeGëEº‹Sètus
 (
∂A
->
sùpFwH™dÀ
))

368 
u32
 
îrNum
;

369 
	`¥ötf
 ("Pipeline-A finalization failed\nError codes:\n");

370 
îrNum
 = 
	`sùpGëEº‹Hi°‹y
 (
sùpEº‹Log
);

371 
îrNum
)

373 
	`¥ötf
 ("%08lx\n", 
sùpEº‹Log
[
îrNum
 - 0x1]);

374 
îrNum
--;

377 
	}
}

381 
	$buûdC⁄vPùe
 ( )

384 
C⁄cuºícyAµPùe
 * 
∂B
 = &
c⁄cuºícyPùeLi°
[1];

385 
∂B
->
sùpFwH™dÀ
 = 
	`sùpCª©ePùñöe
(5, 6, 
	`SIPP_MBIN
(
mböImgSùp
));

388 
∂B
->
dmaIn
 = 
	`sùpCª©eFûãr
’lB->
sùpFwH™dÀ
, 0x00, 
SIPP_CONV_PIPE_BUFFER_WIDTH
, 
SIPP_CONV_PIPE_BUFFER_HEIGHT
, 
	`N_PL
(1), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

389 
∂B
->
c⁄vMa2x5x0
 = 
	`sùpCª©eFûãr
’lB->
sùpFwH™dÀ
, 0x0, 
SIPP_CONV_PIPE_BUFFER_WIDTH
, 
SIPP_CONV_PIPE_BUFFER_HEIGHT
, 
	`N_PL
(1), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_CONV_ID
, 0);

390 
∂B
->
dmaOut
 = 
	`sùpCª©eFûãr
’lB->
sùpFwH™dÀ
, 0x00, 
SIPP_CONV_PIPE_BUFFER_WIDTH
, 
SIPP_CONV_PIPE_BUFFER_HEIGHT
, 
	`N_PL
(1), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

393 
	`sùpLökFûãr
(
∂B
->
c⁄vMa2x5x0
,ÖlB->
dmaIn
, 3,3);

394 
	`sùpLökFûãr
(
∂B
->
dmaOut
,ÖlB->
c⁄vMa2x5x0
, 1,1);

396 i‡(
	`sùpPùeGëEº‹Sètus
 (
∂B
->
sùpFwH™dÀ
))

398 
u32
 
îrNum
;

399 
	`¥ötf
 ("Pipeline-B creationÉrror\nError codes:\n");

400 
îrNum
 = 
	`sùpGëEº‹Hi°‹y
 (
sùpEº‹Log
);

401 
îrNum
)

403 
	`¥ötf
 ("%08lx\n", 
sùpEº‹Log
[
îrNum
 - 0x1]);

404 
îrNum
--;

409 
	`sùpRegi°îEvítCÆlback
 (
∂B
->
sùpFwH™dÀ
, 
≠pSùpCÆlback
);

412 
∂B
->
sùpFwH™dÀ
->
Êags
 |
PLF_CONSIDER_OPIPE_RT
;

413 
	}
}

415 
	$c⁄figC⁄vPùe
 ( )

417 
C⁄cuºícyAµPùe
 * 
∂B
 = &
c⁄cuºícyPùeLi°
[1];

418 
DmaP¨am
 *
dmaIn0Cfg
 = (DmaP¨am *)
∂B
->
dmaIn
->
∑øms
;

419 
C⁄vP¨am
 *
c⁄vMa2x5x0Cfg
 = (C⁄vP¨am *)
∂B
->
c⁄vMa2x5x0
->
∑øms
;

420 
DmaP¨am
 *
dmaOut0Cfg
 = (DmaP¨am *)
∂B
->
dmaOut
->
∑øms
;

425 
c⁄vMa2x5x0Cfg
->
cfg
=
	`CONV_CFG
(3, 1, 1, 0,1, 0, 0x3646, 1, 0);

426 
c⁄vMa2x5x0Cfg
->
kî√l
[0]=0x0;

427 
c⁄vMa2x5x0Cfg
->
kî√l
[1]= 0x0;

428 
c⁄vMa2x5x0Cfg
->
kî√l
[2]= 0x0;

429 
c⁄vMa2x5x0Cfg
->
kî√l
[3]= 0x0;

430 
c⁄vMa2x5x0Cfg
->
kî√l
[4]= 0x00003000;

431 
c⁄vMa2x5x0Cfg
->
kî√l
[5]= 0x0;

432 
c⁄vMa2x5x0Cfg
->
kî√l
[6]= 0x30000000;

433 
c⁄vMa2x5x0Cfg
->
kî√l
[7]= 0x30003800;

434 
c⁄vMa2x5x0Cfg
->
kî√l
[8]= 0x0;

435 
c⁄vMa2x5x0Cfg
->
kî√l
[9]= 0x0;

436 
c⁄vMa2x5x0Cfg
->
kî√l
[10]= 0x00003000;

437 
c⁄vMa2x5x0Cfg
->
kî√l
[11]= 0x0;

438 
c⁄vMa2x5x0Cfg
->
kî√l
[12]= 0x0;

439 
c⁄vMa2x5x0Cfg
->
kî√l
[13]= 0x0;

440 
c⁄vMa2x5x0Cfg
->
kî√l
[14]= 0x0;

441 
c⁄vMa2x5x0Cfg
->
shadowKî√l
[0]=0x0;

442 
c⁄vMa2x5x0Cfg
->
shadowKî√l
[1]= 0x0;

443 
c⁄vMa2x5x0Cfg
->
shadowKî√l
[2]= 0x0;

444 
c⁄vMa2x5x0Cfg
->
shadowKî√l
[3]= 0x0;

445 
c⁄vMa2x5x0Cfg
->
shadowKî√l
[4]= 0x00003000;

446 
c⁄vMa2x5x0Cfg
->
shadowKî√l
[5]= 0x0;

447 
c⁄vMa2x5x0Cfg
->
shadowKî√l
[6]= 0x30000000;

448 
c⁄vMa2x5x0Cfg
->
shadowKî√l
[7]= 0x30003800;

449 
c⁄vMa2x5x0Cfg
->
shadowKî√l
[8]= 0x0;

450 
c⁄vMa2x5x0Cfg
->
shadowKî√l
[9]= 0x0;

451 
c⁄vMa2x5x0Cfg
->
shadowKî√l
[10]= 0x00003000;

452 
c⁄vMa2x5x0Cfg
->
shadowKî√l
[11]= 0x0;

453 
c⁄vMa2x5x0Cfg
->
shadowKî√l
[12]= 0x0;

454 
c⁄vMa2x5x0Cfg
->
shadowKî√l
[13]= 0x0;

455 
c⁄vMa2x5x0Cfg
->
shadowKî√l
[14]= 0x0;

456 
dmaIn0Cfg
->
ddrAddr
 = (
UI¡32
)&
iBufB
;

457 
dmaOut0Cfg
->
ddrAddr
 = (
UI¡32
)&
oBufB
;

459 
	`sùpFöÆizePùñöe
 (
∂B
->
sùpFwH™dÀ
);

461 i‡(
	`sùpPùeGëEº‹Sètus
 (
∂B
->
sùpFwH™dÀ
))

463 
u32
 
îrNum
;

464 
	`¥ötf
 ("Pipeline-B finalization failed\nError codes:\n");

465 
îrNum
 = 
	`sùpGëEº‹Hi°‹y
 (
sùpEº‹Log
);

466 
îrNum
)

468 
	`¥ötf
 ("%08lx\n", 
sùpEº‹Log
[
îrNum
 - 0x1]);

469 
îrNum
--;

472 
	}
}

474 
	$≠pLogEvít
 (
C⁄cuºícyAµPùe
 * 
pùe
,

475 
CC_APP_PIPE_EVENT
 
evít
)

477 #i‚de‡
SIPP_PC


479 
u32
 
°‹edIL
 = 
	`swcLe⁄GëPIL
 ();

480 
	`swcLe⁄SëPIL
 (15);

483 
pùe
->
evítLi°
[pùe->
evítLi°WrPå
++] = 
evít
;

484 i‡(
pùe
->
evítLi°WrPå
 =
CC_APP_EVENT_HISTORY_SIZE
)Öipe->eventListWrPtr = 0;

486 #i‚de‡
SIPP_PC


487 
	`swcLe⁄SëPIL
 (
°‹edIL
);

489 
	}
}

491 
CC_APP_PIPE_EVENT
 
	$≠pPro˚ssEvít
 (
C⁄cuºícyAµPùe
 * 
pùe
)

493 
CC_APP_PIPE_EVENT
 
ªtVÆ
 = 
CC_APP_PIPE_EVENT_NONE
;

495 i‡(
pùe
->
evítLi°WrPå
 !pùe->
evítLi°RdPå
 )

497 
ªtVÆ
 = 
pùe
->
evítLi°
[pùe->
evítLi°RdPå
++];

498 i‡(
pùe
->
evítLi°RdPå
 =
CC_APP_EVENT_HISTORY_SIZE
)Öipe->eventListRdPtr = 0;

502  
ªtVÆ
;

503 
	}
}

505 
u32
 
	$≠pLookupH™dÀ
 (
SùpPùñöe
 * 
pPùñöe
)

507 
u32
 
idx
;

509 
idx
 = 0; idx < 
SIPP_NUM_PIPELINES
; idx++)

511 
C⁄cuºícyAµPùe
 * 
pùe
 = &
c⁄cuºícyPùeLi°
[
idx
];

513 i‡(
pùe
->
sùpFwH™dÀ
 =
pPùñöe
)

515  
idx
;

520 
	}
}

522 
	$≠pSùpCÆlback
 (
SùpPùñöe
 * 
pPùñöe
,

523 
eSIPP_PIPELINE_EVENT
 
eEvít
,

524 
SIPP_PIPELINE_EVENT_DATA
 * 
±EvítD©a
)

527 
u32
 
pùeIdx
 = 
	`≠pLookupH™dÀ
 (
pPùñöe
);

528 
C⁄cuºícyAµPùe
 * 
pùe
 = &
c⁄cuºícyPùeLi°
[
pùeIdx
];

530 
	`UNUSED
(
±EvítD©a
);

532 i‡(
eEvít
 =
eSIPP_PIPELINE_FRAME_DONE
)

534 
	`¥ötf
 ("Pùê%lu com∂ëe†‰ame\n", 
pùeIdx
);

535 
	`≠pLogEvít
 (
pùe
,

536 
CC_APP_PIPE_EVENT_FRAME_DONE
);

539 
	}
}

541 
u32
 
	$≠pCheckCom∂ëe
 ( )

543 
u32
 
ªtVÆ
 = 0x1;

544 
u32
 
idx
;

546 
idx
 = 0; idx < 
SIPP_NUM_PIPELINES
; idx++ )

548 
C⁄cuºícyAµPùe
 * 
pùe
 = &
c⁄cuºícyPùeLi°
[
idx
];

549 i‡(
pùe
->
eSèã
 !
CC_APP_PIPE_STATE_COMPLETE
)

551 
ªtVÆ
 = 0x0;

556  
ªtVÆ
;

557 
	}
}

559 
	$≠pTask
 ()

561 
u32
 
pùeIdx
;

563 
ã°Com∂ëe
 == 0)

565 
pùeIdx
 = 0x0;ÖùeIdx < 
SIPP_NUM_PIPELINES
;ÖipeIdx++)

567 
C⁄cuºícyAµPùe
 * 
pùe
 = &
c⁄cuºícyPùeLi°
[
pùeIdx
];

569 
pùe
->
eSèã
)

571 
CC_APP_PIPE_STATE_UNINIT
 : {

572 
pùe
->
eSèã
 = 
CC_APP_PIPE_STATE_IDLE
;

574 
CC_APP_PIPE_STATE_IDLE
 : {

575 i‡(
pùe
->
‰amesCom∂ëe
 < 
SIPP_TEST_NUM_FRAMES
)

577 
	`¥ötf
("Pùê%lu cÆ»¥o˚s†‰amêasync\n", 
pùeIdx
);

578 
	`sùpPro˚ssFømeNB
 (
pùe
->
sùpFwH™dÀ
);

579 
pùe
->
eSèã
 = 
CC_APP_PIPE_STATE_RUNNING
;

584 
	`¥ötf
 ("Pùê%lu com∂ëedÑu¿o‡%lu images\n", 
pùeIdx
, 
pùe
->
‰amesCom∂ëe
);

585 
	`sùpFømew‹kRun
 ();

586 
pùe
->
eSèã
 = 
CC_APP_PIPE_STATE_COMPLETE
;

590 
CC_APP_PIPE_STATE_RUNNING
 : {

591 
CC_APP_PIPE_EVENT
 
evít
;

592 (
evít
 = 
	`≠pPro˚ssEvít
 (
pùe
)Ë!
CC_APP_PIPE_EVENT_NONE
)

594 
evít
)

596 
CC_APP_PIPE_EVENT_FRAME_DONE
 : {

597 
pùe
->
‰amesCom∂ëe
++;

598 
pùe
->
eSèã
 = 
CC_APP_PIPE_STATE_IDLE
;

604 
CC_APP_PIPE_STATE_COMPLETE
 : {

605 i‡(
	`≠pCheckCom∂ëe
())

607 
ã°Com∂ëe
 = 1;

611 
	`¥ötf
 ("Unknow¿°©ê⁄Öùê%lu - Tîmö©ögÉ¨ly\n", 
pùeIdx
);

612 
	`exô
 (0x0);

617 
	}
}

619 
	$maö
 (
¨gc
, *
¨gv
[])

621 
	`UNUSED
 (
¨gc
);

622 
	`UNUSED
 (
¨gv
);

624 
	`sùpPœtf‹mInô
();

625 
	`sùpPœtf‹mInôAsync
 ();

627 
	`unôTe°Inô
 ();

628 
	`DrvTimîInô
 ();

629 
	`DrvDdrInôüli£
 (
NULL
);

631 
	`buûdISPPùe
 ( );

632 
	`sùpRdFûeU8
((
UI¡8
*)
iBufA
, 
SIPP_ISP_PIPE_BUFFER_WIDTH
 * 
SIPP_ISP_PIPE_BUFFER_HEIGHT
 * (
UI¡16
), "../../../../../../../resources/lowLight_512x128.raw");

633 
	`ISPPùeCª©eP¨ams
 ();

634 
	`c⁄figISPPùe
 ( );

636 
	`buûdC⁄vPùe
 ( );

637 
	`sùpRdFûeU8
(
iBufB
, 
SIPP_CONV_PIPE_BUFFER_WIDTH
 * 
SIPP_CONV_PIPE_BUFFER_HEIGHT
, "../../../../../../../resources/lena_512x512_luma.raw");

638 
	`c⁄figC⁄vPùe
 ( );

640 
	`≠pTask
 ();

642 
	`sùpWrFûeU8
(
oBufA
, 
SIPP_ISP_PIPE_BUFFER_WIDTH
 * 
SIPP_ISP_PIPE_BUFFER_HEIGHT
 * 3, "outA_512x128_P420.yuv");

643 
	`sùpWrFûeU8
(
oBufB
, 
SIPP_CONV_PIPE_BUFFER_WIDTH
 * 
SIPP_CONV_PIPE_BUFFER_HEIGHT
, "outB_512x512.raw");

645 #i‡
	`deföed
(
MA2450
)

646 
	`sùpRdFûeU8
 ((
UI¡8
*)
iBufA
, 
SIPP_ISP_PIPE_BUFFER_WIDTH
 * 
SIPP_ISP_PIPE_BUFFER_HEIGHT
 * 3/2, "../../../../../../../resources/refA_multiStream_ma2450_512x128_P420.yuv");

647 
	`sùpDbgCom∑ªU8
((
UI¡8
*)
iBufA
, 
oBufA
, 
SIPP_ISP_PIPE_BUFFER_WIDTH
 * 
SIPP_ISP_PIPE_BUFFER_HEIGHT
 * 3/2);

650 
	`sùpRdFûeU8
 (
iBufB
, 
SIPP_CONV_PIPE_BUFFER_WIDTH
 * 
SIPP_CONV_PIPE_BUFFER_HEIGHT
, "../../../../../../../resources/refB_multiStream_512x512.raw");

651 
	`sùpDbgCom∑ªU8
(
iBufB
, 
oBufB
, 
SIPP_CONV_PIPE_BUFFER_WIDTH
 * 
SIPP_CONV_PIPE_BUFFER_HEIGHT
);

653 
	`unôTe°FöÆRï‹t
();

655 
	}
}

	@Sipp/SippFw/Tutorials/SippTutA0/leon/app_config.c

13 
	~<ªgi°îsMyrüd.h
>

14 
	~<DrvC¥.h
>

19 #i‚de‡
IPIPE_CLK_CONFIG_SEL


20 
	#ùùeClockC⁄fig
 
ùùeClkC⁄figMV182


	)

22 
	#ùùeClockC⁄fig
 
IPIPE_CLK_CONFIG_SEL


	)

35 
tyAuxClkDividîCfg
 
	gauxClkAŒOn
[] =

37 {0x0FFFFFFF & (~(1<<
CSS_AUX_DDR_CORE
)Ë, 
CLK_SRC_REFCLK0
, 1, 1},

42 
tySocClockC⁄fig
 
	gùùeClkC⁄figMV182
 =

44 .
ªfClk0I≈utKhz
 = 12000,

45 .
	gªfClk1I≈utKhz
 = 0,

46 .
	gèrgëPŒ0FªqKhz
 = 264000,

47 .
	gèrgëPŒ1FªqKhz
 = 0,

48 .
	g˛kSrcPŒ1
 = 
CLK_SRC_REFCLK0
,

49 .
	gma°îClkDivNumî©‹
 = 
DONT_TOUCH_MASTER_DIVIDER
,

50 .
	gma°îClkDivDíomö©‹
 = 
DONT_TOUCH_MASTER_DIVIDER
,

51 .
	gcssDssClockE«bÀMask
 = 0xFFFFFFFFFFFFFFFFULL,

52 .
	gmssClockE«bÀMask
 = 0xFFFFFFFF,

53 .
	gsùpClockE«bÀMask
 = 0xFFFFFFFF,

54 .
	gu∑ClockE«bÀMask
 = 0xFFFFFFFF,

55 .
	gpAuxClkCfg
 = 
auxClkAŒOn
,

67 
	$öôClocksAndMem‹y
()

69 
s32
 
sc
;

71 
sc
 = 
	`DrvC¥Inô
();

72 if(
sc
)

73  
sc
;

74 
sc
 = 
	`DrvC¥SëupClocks
(&
ùùeClockC⁄fig
);

75 if(
sc
)

76  
sc
;

78 
	}
}

	@Sipp/SippFw/Tutorials/SippTutA0/leon/app_config.h

9 #i‚de‡
_APP_CONFIG_H_


10 
	#_APP_CONFIG_H_


	)

16 
öôClocksAndMem‹y
();

	@Sipp/SippFw/Tutorials/SippTutA0/leon/main.c

9 #i‡
deföed
(
SIPP_VCS
)

10 
	~<DrvTimî.h
>

11 
	~<DrvDdr.h
>

14 
	~"≠p_c⁄fig.h
"

15 
	~"sùpTutA0Modñ.h
"

17 
SùpTutA0Modñ
 
	gmyPl
;

19 
	$maö
(
¨gc
, *
¨gv
[])

21 
	`UNUSED
 (
¨gc
);

22 
	`UNUSED
 (
¨gv
);

23 
u32
 
sùpEº‹Log
[
SIPP_ERROR_HISTORY_SIZE
];

25 
	`sùpPœtf‹mInô
();

27 #i‡
	`deföed
(
SIPP_VCS
)

28 
s32
 
sc
;

29 
sc
 = 
	`öôClocksAndMem‹y
();

30 if(
sc
)

31 
	`exô
(
sc
);

33 
	`unôTe°Inô
();

34 
	`DrvTimîInô
();

35 
	`DrvDdrInôüli£
(
NULL
);

36 
	`unôTe°Inô
();

39 
	`buûdSùpTutA0Modñ
(&
myPl
);

41 i‡(
	`sùpPùeGëEº‹Sètus
 (
myPl
.
∂
))

43 
u32
 
îrNum
;

44 
	`¥ötf
 ("Pipeline creationÉrror\nError codes:\n");

45 
îrNum
 = 
	`sùpGëEº‹Hi°‹y
 (
sùpEº‹Log
);

46 
îrNum
)

48 
	`¥ötf
 ("%08lx\n", 
sùpEº‹Log
[
îrNum
 - 0x1]);

49 
îrNum
--;

53 
	`c⁄figSùpTutA0Modñ
(&
myPl
);

58 
	`ªadSùpTutA0ModñI≈ut
(&
myPl
);

59 
	`sùpPro˚ssFøme
(
myPl
.
∂
);

61 i‡(
	`sùpPùeGëEº‹Sètus
 (
myPl
.
∂
))

63 
u32
 
îrNum
;

64 
	`¥ötf
 ("PipelineÑuntimeÉrror\nError codes:\n");

65 
îrNum
 = 
	`sùpGëEº‹Hi°‹y
 (
sùpEº‹Log
);

66 
îrNum
)

68 
	`¥ötf
 ("%08lx\n", 
sùpEº‹Log
[
îrNum
 - 0x1]);

69 
îrNum
--;

73 
	`wrôeSùpTutA0ModñOuçut
(&
myPl
);

74 #i‡
	`deföed
(
SIPP_VCS
)

75 
	`unôTe°MemCom∑ª
(
SùpTutA0Modñ_dmaIn0_buf„r
, 
SùpTutA0Modñ_dmaOut0_buf„r
, 512*512);

77 
	`unôTe°FöÆRï‹t
();

80 
	}
}

	@Sipp/SippFw/Tutorials/SippTutA0/leon/sippTutA0Model.c

13 
	~"sùpTutA0Modñ.h
"

15 
	~<ö˛ude/sùpHwDefs.h
>

19 
UI¡8
 
DDR_DATA
 
	gSùpTutA0Modñ_dmaIn0_buf„r
[512 * 512 * 1 ]
ALIGNED
(8);

20 
UI¡8
 
DDR_DATA
 
	gSùpTutA0Modñ_dmaOut0_buf„r
[512 * 512 * 1 ]
ALIGNED
(8);

23 
	$ªadSùpTutA0ModñI≈ut
(
SùpTutA0Modñ
 *
pPl
)

25 
	`sùpRdFûeU8
((
UI¡8
*)
SùpTutA0Modñ_dmaIn0_buf„r
,512 * 512 * 1 * (UInt8),"../../../../../../../resources/lena_512x512_luma.raw");

27 ()(
pPl
);

29 
	}
}

31 
	$wrôeSùpTutA0ModñOuçut
(
SùpTutA0Modñ
 *
pPl
)

33 
	`sùpWrFûeU8
((
UI¡8
*)
SùpTutA0Modñ_dmaOut0_buf„r
,512 * 512 * 1 * (UInt8),"output.raw");

35 ()(
pPl
);

37 
	}
}

39 
	$buûdSùpTutA0Modñ
(
SùpTutA0Modñ
 *
pPl
)

42 
pPl
->
∂
 = 
	`sùpCª©ePùñöe
(0, 7, 
	`SIPP_MBIN
(
mböImgSùp
));

45 
pPl
->
dmaIn0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x00, 512, 512, 
	`N_PL
(1), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

46 
pPl
->
dmaOut0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x00, 512, 512, 
	`N_PL
(1), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

49 
	`sùpLökFûãr
(
pPl
->
dmaOut0
,ÖPl->
dmaIn0
, 1,1 );

51 
	}
}

54 
	$c⁄figSùpTutA0Modñ
(
SùpTutA0Modñ
 *
pPl
)

56 
DmaP¨am
 *
dmaIn0Cfg
 = (DmaP¨am *)
pPl
->
dmaIn0
->
∑øms
;

57 
DmaP¨am
 *
dmaOut0Cfg
 = (DmaP¨am *)
pPl
->
dmaOut0
->
∑øms
;

62 
dmaIn0Cfg
->
ddrAddr
 = (
UI¡32
)&
SùpTutA0Modñ_dmaIn0_buf„r
;

63 
dmaOut0Cfg
->
ddrAddr
 = (
UI¡32
)&
SùpTutA0Modñ_dmaOut0_buf„r
;

66 
	}
}

	@Sipp/SippFw/Tutorials/SippTutA0/leon/sippTutA0Model.h

13 #i‚de‡
__SIPPTUTA0MODEL_H__


14 
	#__SIPPTUTA0MODEL_H__


	)

16 
	~<sùp.h
>

17 
	~<sùpTe°Comm⁄.h
>

22 
UI¡8
 
DDR_DATA
 
SùpTutA0Modñ_dmaIn0_buf„r
[ 512 * 512 * 1 ]
ALIGNED
(8);

23 
UI¡8
 
DDR_DATA
 
SùpTutA0Modñ_dmaOut0_buf„r
[ 512 * 512 * 1 ]
ALIGNED
(8);

27 
	sSùpTutA0Modñ


30 
SùpPùñöe
 *
	m∂
;

33 
SùpFûãr
 *
	mdmaIn0
;

34 
SùpFûãr
 *
	mdmaOut0
;

36 } 
	tSùpTutA0Modñ
;

38 
ªadSùpTutA0ModñI≈ut
(
SùpTutA0Modñ
 *
pPl
);

39 
wrôeSùpTutA0ModñOuçut
(
SùpTutA0Modñ
 *
pPl
);

41 
buûdSùpTutA0Modñ
(
SùpTutA0Modñ
 *
pPl
);

42 
c⁄figSùpTutA0Modñ
(
SùpTutA0Modñ
 *
pPl
);

	@Sipp/SippFw/Tutorials/SippTutA1/leon/app_config.c

13 
	~<ªgi°îsMyrüd.h
>

14 
	~<DrvC¥.h
>

19 #i‚de‡
IPIPE_CLK_CONFIG_SEL


20 
	#ùùeClockC⁄fig
 
ùùeClkC⁄figMV182


	)

22 
	#ùùeClockC⁄fig
 
IPIPE_CLK_CONFIG_SEL


	)

35 
tyAuxClkDividîCfg
 
	gauxClkAŒOn
[] =

37 {0x0FFFFFFF & (~(1<<
CSS_AUX_DDR_CORE
)Ë, 
CLK_SRC_REFCLK0
, 1, 1},

42 
tySocClockC⁄fig
 
	gùùeClkC⁄figMV182
 =

44 .
ªfClk0I≈utKhz
 = 12000,

45 .
	gªfClk1I≈utKhz
 = 0,

46 .
	gèrgëPŒ0FªqKhz
 = 264000,

47 .
	gèrgëPŒ1FªqKhz
 = 0,

48 .
	g˛kSrcPŒ1
 = 
CLK_SRC_REFCLK0
,

49 .
	gma°îClkDivNumî©‹
 = 
DONT_TOUCH_MASTER_DIVIDER
,

50 .
	gma°îClkDivDíomö©‹
 = 
DONT_TOUCH_MASTER_DIVIDER
,

51 .
	gcssDssClockE«bÀMask
 = 0xFFFFFFFFFFFFFFFFULL,

52 .
	gmssClockE«bÀMask
 = 0xFFFFFFFF,

53 .
	gsùpClockE«bÀMask
 = 0xFFFFFFFF,

54 .
	gu∑ClockE«bÀMask
 = 0xFFFFFFFF,

55 .
	gpAuxClkCfg
 = 
auxClkAŒOn
,

67 
	$öôClocksAndMem‹y
()

69 
s32
 
sc
;

71 
sc
 = 
	`DrvC¥Inô
();

72 if(
sc
)

73  
sc
;

74 
sc
 = 
	`DrvC¥SëupClocks
(&
ùùeClockC⁄fig
);

75 if(
sc
)

76  
sc
;

78 
	}
}

	@Sipp/SippFw/Tutorials/SippTutA1/leon/app_config.h

9 #i‚de‡
_APP_CONFIG_H_


10 
	#_APP_CONFIG_H_


	)

16 
öôClocksAndMem‹y
();

	@Sipp/SippFw/Tutorials/SippTutA1/leon/main.c

9 #i‡
deföed
(
SIPP_VCS
)

10 
	~<DrvTimî.h
>

11 
	~<DrvDdr.h
>

12 
	~<swcCrc.h
>

13 
	#EXP_CRC_VALUE
 0xe1d868f9

	)

17 
	~"sùpTutA1Modñ.h
"

18 
	~"≠p_c⁄fig.h
"

22 
SùpTutA1Modñ
 
	gmyPl
;

24 
	$maö
(
¨gc
, *
¨gv
[])

26 
	`UNUSED
 (
¨gc
);

27 
	`UNUSED
 (
¨gv
);

28 
u32
 
sùpEº‹Log
[
SIPP_ERROR_HISTORY_SIZE
];

30 #i‡
	`deföed
(
SIPP_VCS
)

31 
¸c
 = 0;

34 
	`sùpPœtf‹mInô
();

36 #i‡
	`deföed
(
SIPP_VCS
)

37 
s32
 
sc
;

38 
sc
 = 
	`öôClocksAndMem‹y
();

39 if(
sc
)

40 
	`exô
(
sc
);

41 
	`unôTe°Inô
();

42 
	`DrvTimîInô
();

43 
	`DrvDdrInôüli£
(
NULL
);

46 
	`buûdSùpTutA1Modñ
(&
myPl
);

48 i‡(
	`sùpPùeGëEº‹Sètus
 (
myPl
.
∂
))

50 
u32
 
îrNum
;

51 
	`¥ötf
 ("Pipeline creationÉrror\nError codes:\n");

52 
îrNum
 = 
	`sùpGëEº‹Hi°‹y
 (
sùpEº‹Log
);

53 
îrNum
)

55 
	`¥ötf
 ("%08lx\n", 
sùpEº‹Log
[
îrNum
 - 0x1]);

56 
îrNum
--;

60 
	`c⁄figSùpTutA1Modñ
(&
myPl
);

65 
	`ªadSùpTutA1ModñI≈ut
(&
myPl
);

66 
	`sùpPro˚ssFøme
(
myPl
.
∂
);

68 i‡(
	`sùpPùeGëEº‹Sètus
 (
myPl
.
∂
))

70 
u32
 
îrNum
;

71 
	`¥ötf
 ("PipelineÑuntimeÉrror\nError codes:\n");

72 
îrNum
 = 
	`sùpGëEº‹Hi°‹y
 (
sùpEº‹Log
);

73 
îrNum
)

75 
	`¥ötf
 ("%08lx\n", 
sùpEº‹Log
[
îrNum
 - 0x1]);

76 
îrNum
--;

80 
	`sùpSt›Svus
(
myPl
.
∂
);

81 
	`wrôeSùpTutA1ModñOuçut
(&
myPl
);

83 #i‡
	`deföed
(
SIPP_VCS
)

84 
¸c
 = 
	`swcCÆcCrc32
(
SùpTutA1Modñ_dmaOut0_buf„r
, 512 * 512, 0);

86 
	`unôTe°Com∑ª
(
¸c
, 
EXP_CRC_VALUE
);

88 
	`unôTe°FöÆRï‹t
();

92 
	}
}

	@Sipp/SippFw/Tutorials/SippTutA1/leon/sippTutA1Model.c

13 
	~"sùpTutA1Modñ.h
"

15 
	~<ö˛ude/sùpHwDefs.h
>

16 
	~<fûãrs/c⁄v5x5/c⁄v5x5.h
>

20 
UI¡8
 
DDR_DATA
 
	gSùpTutA1Modñ_dmaIn0_buf„r
[512 * 512 * 1 ]
ALIGNED
(8);

21 
UI¡8
 
DDR_DATA
 
	gSùpTutA1Modñ_dmaOut0_buf„r
[512 * 512 * 1 ]
ALIGNED
(8);

24 
	$ªadSùpTutA1ModñI≈ut
(
SùpTutA1Modñ
 *
pPl
)

26 
	`sùpRdFûeU8
((
UI¡8
*)
SùpTutA1Modñ_dmaIn0_buf„r
,512 * 512 * 1 * (UInt8),"../../../../../../../resources/lena_512x512_luma.raw");

28 ()(
pPl
);

30 
	}
}

32 
	$wrôeSùpTutA1ModñOuçut
(
SùpTutA1Modñ
 *
pPl
)

34 
	`sùpWrFûeU8
((
UI¡8
*)
SùpTutA1Modñ_dmaOut0_buf„r
,512 * 512 * 1 * (UInt8),"output.raw");

36 ()(
pPl
);

38 
	}
}

40 
	$buûdSùpTutA1Modñ
(
SùpTutA1Modñ
 *
pPl
)

43 
pPl
->
∂
 = 
	`sùpCª©ePùñöe
(0, 7, 
	`SIPP_MBIN
(
mböImgSùp
));

46 
pPl
->
dmaIn0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x00, 512, 512, 
	`N_PL
(1), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

47 
pPl
->
c⁄v5x50
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x0, 512, 512, 
	`N_PL
(1), 
	`SZ
(
UI¡8
), SZ(
C⁄v5x5P¨am
), 
	`SVU_SYM
(
svuC⁄v5x5
), 0);

48 
pPl
->
dmaOut0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x00, 512, 512, 
	`N_PL
(1), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

51 
	`sùpLökFûãr
(
pPl
->
c⁄v5x50
,ÖPl->
dmaIn0
, 5,5 );

52 
	`sùpLökFûãr
(
pPl
->
dmaOut0
,ÖPl->
c⁄v5x50
, 1,1 );

54 
	}
}

56 
UI¡16
 
	gc⁄v5x50Cfg_cM©
[25];

58 
	$c⁄figSùpTutA1Modñ
(
SùpTutA1Modñ
 *
pPl
)

60 
DmaP¨am
 *
dmaIn0Cfg
 = (DmaP¨am *)
pPl
->
dmaIn0
->
∑øms
;

61 
C⁄v5x5P¨am
 *
c⁄v5x50Cfg
 = (C⁄v5x5P¨am *)
pPl
->
c⁄v5x50
->
∑øms
;

62 
DmaP¨am
 *
dmaOut0Cfg
 = (DmaP¨am *)
pPl
->
dmaOut0
->
∑øms
;

67 
c⁄v5x50Cfg
->
cM©

c⁄v5x50Cfg_cM©
;

68 
c⁄v5x50Cfg
->
cM©
[0]= 0x291f;

69 
c⁄v5x50Cfg
->
cM©
[1]= 0x291f;

70 
c⁄v5x50Cfg
->
cM©
[2]= 0x291f;

71 
c⁄v5x50Cfg
->
cM©
[3]= 0x291f;

72 
c⁄v5x50Cfg
->
cM©
[4]= 0x291f;

73 
c⁄v5x50Cfg
->
cM©
[5]= 0x291f;

74 
c⁄v5x50Cfg
->
cM©
[6]= 0x291f;

75 
c⁄v5x50Cfg
->
cM©
[7]= 0x291f;

76 
c⁄v5x50Cfg
->
cM©
[8]= 0x291f;

77 
c⁄v5x50Cfg
->
cM©
[9]= 0x291f;

78 
c⁄v5x50Cfg
->
cM©
[10]= 0x291f;

79 
c⁄v5x50Cfg
->
cM©
[11]= 0x291f;

80 
c⁄v5x50Cfg
->
cM©
[12]= 0x291f;

81 
c⁄v5x50Cfg
->
cM©
[13]= 0x291f;

82 
c⁄v5x50Cfg
->
cM©
[14]= 0x291f;

83 
c⁄v5x50Cfg
->
cM©
[15]= 0x291f;

84 
c⁄v5x50Cfg
->
cM©
[16]= 0x291f;

85 
c⁄v5x50Cfg
->
cM©
[17]= 0x291f;

86 
c⁄v5x50Cfg
->
cM©
[18]= 0x291f;

87 
c⁄v5x50Cfg
->
cM©
[19]= 0x291f;

88 
c⁄v5x50Cfg
->
cM©
[20]= 0x291f;

89 
c⁄v5x50Cfg
->
cM©
[21]= 0x291f;

90 
c⁄v5x50Cfg
->
cM©
[22]= 0x291f;

91 
c⁄v5x50Cfg
->
cM©
[23]= 0x291f;

92 
c⁄v5x50Cfg
->
cM©
[24]= 0x291f;

93 
dmaIn0Cfg
->
ddrAddr
 = (
UI¡32
)&
SùpTutA1Modñ_dmaIn0_buf„r
;

94 
dmaOut0Cfg
->
ddrAddr
 = (
UI¡32
)&
SùpTutA1Modñ_dmaOut0_buf„r
;

97 
	}
}

	@Sipp/SippFw/Tutorials/SippTutA1/leon/sippTutA1Model.h

13 #i‚de‡
__SIPPTUTA1MODEL_H__


14 
	#__SIPPTUTA1MODEL_H__


	)

16 
	~<sùp.h
>

17 
	~<sùpTe°Comm⁄.h
>

22 
UI¡8
 
DDR_DATA
 
SùpTutA1Modñ_dmaIn0_buf„r
[ 512 * 512 * 1 ]
ALIGNED
(8);

23 
UI¡8
 
DDR_DATA
 
SùpTutA1Modñ_dmaOut0_buf„r
[ 512 * 512 * 1 ]
ALIGNED
(8);

27 
	sSùpTutA1Modñ


30 
SùpPùñöe
 *
	m∂
;

33 
SùpFûãr
 *
	mdmaIn0
;

34 
SùpFûãr
 *
	mc⁄v5x50
;

35 
SùpFûãr
 *
	mdmaOut0
;

37 } 
	tSùpTutA1Modñ
;

39 
ªadSùpTutA1ModñI≈ut
(
SùpTutA1Modñ
 *
pPl
);

40 
wrôeSùpTutA1ModñOuçut
(
SùpTutA1Modñ
 *
pPl
);

42 
buûdSùpTutA1Modñ
(
SùpTutA1Modñ
 *
pPl
);

43 
c⁄figSùpTutA1Modñ
(
SùpTutA1Modñ
 *
pPl
);

	@Sipp/SippFw/Tutorials/SippTutA2/leon/app_config.c

13 
	~<ªgi°îsMyrüd.h
>

14 
	~<DrvC¥.h
>

19 #i‚de‡
IPIPE_CLK_CONFIG_SEL


20 
	#ùùeClockC⁄fig
 
ùùeClkC⁄figMV182


	)

22 
	#ùùeClockC⁄fig
 
IPIPE_CLK_CONFIG_SEL


	)

35 
tyAuxClkDividîCfg
 
	gauxClkAŒOn
[] =

37 {0x0FFFFFFF & (~(1<<
CSS_AUX_DDR_CORE
)Ë, 
CLK_SRC_REFCLK0
, 1, 1},

42 
tySocClockC⁄fig
 
	gùùeClkC⁄figMV182
 =

44 .
ªfClk0I≈utKhz
 = 12000,

45 .
	gªfClk1I≈utKhz
 = 0,

46 .
	gèrgëPŒ0FªqKhz
 = 264000,

47 .
	gèrgëPŒ1FªqKhz
 = 0,

48 .
	g˛kSrcPŒ1
 = 
CLK_SRC_REFCLK0
,

49 .
	gma°îClkDivNumî©‹
 = 
DONT_TOUCH_MASTER_DIVIDER
,

50 .
	gma°îClkDivDíomö©‹
 = 
DONT_TOUCH_MASTER_DIVIDER
,

51 .
	gcssDssClockE«bÀMask
 = 0xFFFFFFFFFFFFFFFFULL,

52 .
	gmssClockE«bÀMask
 = 0xFFFFFFFF,

53 .
	gsùpClockE«bÀMask
 = 0xFFFFFFFF,

54 .
	gu∑ClockE«bÀMask
 = 0xFFFFFFFF,

55 .
	gpAuxClkCfg
 = 
auxClkAŒOn
,

67 
	$öôClocksAndMem‹y
()

69 
s32
 
sc
;

70 
sc
 = 
	`DrvC¥Inô
();

71 if(
sc
)

72  
sc
;

73 
sc
 = 
	`DrvC¥SëupClocks
(&
ùùeClockC⁄fig
);

74 if(
sc
)

75  
sc
;

77 
	}
}

	@Sipp/SippFw/Tutorials/SippTutA2/leon/app_config.h

9 #i‚de‡
_APP_CONFIG_H_


10 
	#_APP_CONFIG_H_


	)

16 
öôClocksAndMem‹y
();

	@Sipp/SippFw/Tutorials/SippTutA2/leon/main.c

10 #i‡
deföed
(
SIPP_VCS
)

11 
	~<DrvTimî.h
>

12 
	~<DrvDdr.h
>

13 
	~<swcCrc.h
>

14 
	#EXP_CRC_VALUE
 0x2D5053B6

	)

18 
	~"sùpTutA2Modñ.h
"

19 
	~"≠p_c⁄fig.h
"

21 
SùpTutA2Modñ
 
	gmyPl
;

23 
	$maö
(
¨gc
, *
¨gv
[])

25 
	`UNUSED
 (
¨gc
);

26 
	`UNUSED
 (
¨gv
);

27 
u32
 
sùpEº‹Log
[
SIPP_ERROR_HISTORY_SIZE
];

29 #i‡
	`deföed
(
SIPP_VCS
)

30 
¸c
 = 0;

33 
	`sùpPœtf‹mInô
();

35 #i‡
	`deföed
(
SIPP_VCS
)

36 
s32
 
sc
;

37 
sc
 = 
	`öôClocksAndMem‹y
();

38 if(
sc
)

39  
sc
;

40 
	`unôTe°Inô
();

41 
	`DrvTimîInô
();

42 
	`DrvDdrInôüli£
(
NULL
);

45 
	`ªadSùpTutA2ModñI≈ut
(&
myPl
);

47 
	`buûdSùpTutA2Modñ
(&
myPl
);

49 i‡(
	`sùpPùeGëEº‹Sètus
 (
myPl
.
∂
))

51 
u32
 
îrNum
;

52 
	`¥ötf
 ("Pipeline creationÉrror\nError codes:\n");

53 
îrNum
 = 
	`sùpGëEº‹Hi°‹y
 (
sùpEº‹Log
);

54 
îrNum
)

56 
	`¥ötf
 ("%08lx\n", 
sùpEº‹Log
[
îrNum
 - 0x1]);

57 
îrNum
--;

60 
	`c⁄figSùpTutA2Modñ
(&
myPl
);

66 
	`sùpPro˚ssFøme
(
myPl
.
∂
);

68 i‡(
	`sùpPùeGëEº‹Sètus
 (
myPl
.
∂
))

70 
u32
 
îrNum
;

71 
	`¥ötf
 ("PipelineÑuntimeÉrror\nError codes:\n");

72 
îrNum
 = 
	`sùpGëEº‹Hi°‹y
 (
sùpEº‹Log
);

73 
îrNum
)

75 
	`¥ötf
 ("%08lx\n", 
sùpEº‹Log
[
îrNum
 - 0x1]);

76 
îrNum
--;

80 
	`sùpSt›Svus
(
myPl
.
∂
);

81 
	`wrôeSùpTutA2ModñOuçut
(&
myPl
);

83 #i‡
	`deföed
(
SIPP_VCS
)

85 
¸c
 = 
	`swcCÆcCrc32
(
SùpTutA2Modñ_dmaOut1_buf„r
, 512 * 512, 0);

86 
	`unôTe°Com∑ª
(
¸c
, 
EXP_CRC_VALUE
);

87 
	`unôTe°FöÆRï‹t
();

91 
	}
}

	@Sipp/SippFw/Tutorials/SippTutA2/leon/sippTutA2Model.c

13 
	~"sùpTutA2Modñ.h
"

15 
	~<ö˛ude/sùpHwDefs.h
>

16 
	~<fûãrs/c⁄v5x5/c⁄v5x5.h
>

20 
UI¡8
 
DDR_DATA
 
	gSùpTutA2Modñ_dmaIn0_buf„r
[512 * 512 * 1 ]
ALIGNED
(8);

21 
UI¡8
 
DDR_DATA
 
	gSùpTutA2Modñ_dmaOut1_buf„r
[512 * 512 * 1 ]
ALIGNED
(8);

24 
	$ªadSùpTutA2ModñI≈ut
(
SùpTutA2Modñ
 *
pPl
)

26 
	`sùpRdFûeU8
((
UI¡8
*)
SùpTutA2Modñ_dmaIn0_buf„r
,512 * 512 * 1 * (UInt8),"../../../../../../../resources/lena_512x512_luma.raw");

28 ()(
pPl
);

30 
	}
}

32 
	$wrôeSùpTutA2ModñOuçut
(
SùpTutA2Modñ
 *
pPl
)

34 
	`sùpWrFûeU8
((
UI¡8
*)
SùpTutA2Modñ_dmaOut1_buf„r
,512 * 512 * 1 * (UInt8),"output.raw");

36 ()(
pPl
);

38 
	}
}

40 
	$buûdSùpTutA2Modñ
(
SùpTutA2Modñ
 *
pPl
)

43 
pPl
->
∂
 = 
	`sùpCª©ePùñöe
(0, 7, 
	`SIPP_MBIN
(
mböImgSùp
));

46 
pPl
->
dmaIn0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x00, 512, 512, 
	`N_PL
(1), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

47 
pPl
->
c⁄v5x52
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x00, 512, 512, 
	`N_PL
(1), 
	`SZ
(
UI¡8
), SZ(
C⁄v5x5P¨am
), 
	`SVU_SYM
(
svuC⁄v5x5
), 0);

48 
pPl
->
c⁄v5x53
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x00, 512, 512, 
	`N_PL
(1), 
	`SZ
(
UI¡8
), SZ(
C⁄v5x5P¨am
), 
	`SVU_SYM
(
svuC⁄v5x5
), 0);

49 
pPl
->
dmaOut1
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x00, 512, 512, 
	`N_PL
(1), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

52 
	`sùpLökFûãr
(
pPl
->
c⁄v5x52
,ÖPl->
dmaIn0
, 5,5 );

53 
	`sùpLökFûãr
(
pPl
->
c⁄v5x53
,ÖPl->
c⁄v5x52
, 5,5 );

54 
	`sùpLökFûãr
(
pPl
->
dmaOut1
,ÖPl->
c⁄v5x53
, 1,1 );

56 
	}
}

58 
UI¡16
 
	gc⁄v5x52Cfg_cM©
[25];

59 
UI¡16
 
	gc⁄v5x53Cfg_cM©
[25];

61 
	$c⁄figSùpTutA2Modñ
(
SùpTutA2Modñ
 *
pPl
)

63 
DmaP¨am
 *
dmaIn0Cfg
 = (DmaP¨am *)
pPl
->
dmaIn0
->
∑øms
;

64 
C⁄v5x5P¨am
 *
c⁄v5x52Cfg
 = (C⁄v5x5P¨am *)
pPl
->
c⁄v5x52
->
∑øms
;

65 
C⁄v5x5P¨am
 *
c⁄v5x53Cfg
 = (C⁄v5x5P¨am *)
pPl
->
c⁄v5x53
->
∑øms
;

66 
DmaP¨am
 *
dmaOut1Cfg
 = (DmaP¨am *)
pPl
->
dmaOut1
->
∑øms
;

71 
c⁄v5x52Cfg
->
cM©

c⁄v5x52Cfg_cM©
;

72 
c⁄v5x52Cfg
->
cM©
[0]= 0x291f;

73 
c⁄v5x52Cfg
->
cM©
[1]= 0x291f;

74 
c⁄v5x52Cfg
->
cM©
[2]= 0x291f;

75 
c⁄v5x52Cfg
->
cM©
[3]= 0x291f;

76 
c⁄v5x52Cfg
->
cM©
[4]= 0x291f;

77 
c⁄v5x52Cfg
->
cM©
[5]= 0x291f;

78 
c⁄v5x52Cfg
->
cM©
[6]= 0x291f;

79 
c⁄v5x52Cfg
->
cM©
[7]= 0x291f;

80 
c⁄v5x52Cfg
->
cM©
[8]= 0x291f;

81 
c⁄v5x52Cfg
->
cM©
[9]= 0x291f;

82 
c⁄v5x52Cfg
->
cM©
[10]= 0x291f;

83 
c⁄v5x52Cfg
->
cM©
[11]= 0x291f;

84 
c⁄v5x52Cfg
->
cM©
[12]= 0x291f;

85 
c⁄v5x52Cfg
->
cM©
[13]= 0x291f;

86 
c⁄v5x52Cfg
->
cM©
[14]= 0x291f;

87 
c⁄v5x52Cfg
->
cM©
[15]= 0x291f;

88 
c⁄v5x52Cfg
->
cM©
[16]= 0x291f;

89 
c⁄v5x52Cfg
->
cM©
[17]= 0x291f;

90 
c⁄v5x52Cfg
->
cM©
[18]= 0x291f;

91 
c⁄v5x52Cfg
->
cM©
[19]= 0x291f;

92 
c⁄v5x52Cfg
->
cM©
[20]= 0x291f;

93 
c⁄v5x52Cfg
->
cM©
[21]= 0x291f;

94 
c⁄v5x52Cfg
->
cM©
[22]= 0x291f;

95 
c⁄v5x52Cfg
->
cM©
[23]= 0x291f;

96 
c⁄v5x52Cfg
->
cM©
[24]= 0x291f;

97 
c⁄v5x53Cfg
->
cM©

c⁄v5x53Cfg_cM©
;

98 
c⁄v5x53Cfg
->
cM©
[0]= 0x291f;

99 
c⁄v5x53Cfg
->
cM©
[1]= 0x291f;

100 
c⁄v5x53Cfg
->
cM©
[2]= 0x291f;

101 
c⁄v5x53Cfg
->
cM©
[3]= 0x291f;

102 
c⁄v5x53Cfg
->
cM©
[4]= 0x291f;

103 
c⁄v5x53Cfg
->
cM©
[5]= 0x291f;

104 
c⁄v5x53Cfg
->
cM©
[6]= 0x291f;

105 
c⁄v5x53Cfg
->
cM©
[7]= 0x291f;

106 
c⁄v5x53Cfg
->
cM©
[8]= 0x291f;

107 
c⁄v5x53Cfg
->
cM©
[9]= 0x291f;

108 
c⁄v5x53Cfg
->
cM©
[10]= 0x291f;

109 
c⁄v5x53Cfg
->
cM©
[11]= 0x291f;

110 
c⁄v5x53Cfg
->
cM©
[12]= 0x291f;

111 
c⁄v5x53Cfg
->
cM©
[13]= 0x291f;

112 
c⁄v5x53Cfg
->
cM©
[14]= 0x291f;

113 
c⁄v5x53Cfg
->
cM©
[15]= 0x291f;

114 
c⁄v5x53Cfg
->
cM©
[16]= 0x291f;

115 
c⁄v5x53Cfg
->
cM©
[17]= 0x291f;

116 
c⁄v5x53Cfg
->
cM©
[18]= 0x291f;

117 
c⁄v5x53Cfg
->
cM©
[19]= 0x291f;

118 
c⁄v5x53Cfg
->
cM©
[20]= 0x291f;

119 
c⁄v5x53Cfg
->
cM©
[21]= 0x291f;

120 
c⁄v5x53Cfg
->
cM©
[22]= 0x291f;

121 
c⁄v5x53Cfg
->
cM©
[23]= 0x291f;

122 
c⁄v5x53Cfg
->
cM©
[24]= 0x291f;

123 
dmaIn0Cfg
->
ddrAddr
 = (
UI¡32
)&
SùpTutA2Modñ_dmaIn0_buf„r
;

124 
dmaOut1Cfg
->
ddrAddr
 = (
UI¡32
)&
SùpTutA2Modñ_dmaOut1_buf„r
;

127 
	}
}

	@Sipp/SippFw/Tutorials/SippTutA2/leon/sippTutA2Model.h

13 #i‚de‡
__SIPPTUTA2MODEL_H__


14 
	#__SIPPTUTA2MODEL_H__


	)

16 
	~<sùp.h
>

17 
	~<sùpTe°Comm⁄.h
>

22 
UI¡8
 
DDR_DATA
 
SùpTutA2Modñ_dmaIn0_buf„r
[ 512 * 512 * 1 ]
ALIGNED
(8);

23 
UI¡8
 
DDR_DATA
 
SùpTutA2Modñ_dmaOut1_buf„r
[ 512 * 512 * 1 ]
ALIGNED
(8);

27 
	sSùpTutA2Modñ


30 
SùpPùñöe
 *
	m∂
;

33 
SùpFûãr
 *
	mdmaIn0
;

34 
SùpFûãr
 *
	mdmaOut1
;

35 
SùpFûãr
 *
	mc⁄v5x52
;

36 
SùpFûãr
 *
	mc⁄v5x53
;

38 } 
	tSùpTutA2Modñ
;

40 
ªadSùpTutA2ModñI≈ut
(
SùpTutA2Modñ
 *
pPl
);

41 
wrôeSùpTutA2ModñOuçut
(
SùpTutA2Modñ
 *
pPl
);

43 
buûdSùpTutA2Modñ
(
SùpTutA2Modñ
 *
pPl
);

44 
c⁄figSùpTutA2Modñ
(
SùpTutA2Modñ
 *
pPl
);

	@Sipp/SippFw/Tutorials/SippTutA3/leon/app_config.c

13 
	~<ªgi°îsMyrüd.h
>

14 
	~<DrvC¥.h
>

19 #i‚de‡
IPIPE_CLK_CONFIG_SEL


20 
	#ùùeClockC⁄fig
 
ùùeClkC⁄figMV182


	)

22 
	#ùùeClockC⁄fig
 
IPIPE_CLK_CONFIG_SEL


	)

35 
tyAuxClkDividîCfg
 
	gauxClkAŒOn
[] =

37 {0x0FFFFFFF & (~(1<<
CSS_AUX_DDR_CORE
)Ë, 
CLK_SRC_REFCLK0
, 1, 1},

42 
tySocClockC⁄fig
 
	gùùeClkC⁄figMV182
 =

44 .
ªfClk0I≈utKhz
 = 12000,

45 .
	gªfClk1I≈utKhz
 = 0,

46 .
	gèrgëPŒ0FªqKhz
 = 264000,

47 .
	gèrgëPŒ1FªqKhz
 = 0,

48 .
	g˛kSrcPŒ1
 = 
CLK_SRC_REFCLK0
,

49 .
	gma°îClkDivNumî©‹
 = 
DONT_TOUCH_MASTER_DIVIDER
,

50 .
	gma°îClkDivDíomö©‹
 = 
DONT_TOUCH_MASTER_DIVIDER
,

51 .
	gcssDssClockE«bÀMask
 = 0xFFFFFFFFFFFFFFFFULL,

52 .
	gmssClockE«bÀMask
 = 0xFFFFFFFF,

53 .
	gsùpClockE«bÀMask
 = 0xFFFFFFFF,

54 .
	gu∑ClockE«bÀMask
 = 0xFFFFFFFF,

55 .
	gpAuxClkCfg
 = 
auxClkAŒOn
,

67 
	$öôClocksAndMem‹y
()

69 
s32
 
sc
;

70 
sc
 = 
	`DrvC¥Inô
();

71 if(
sc
)

72  
sc
;

73 
sc
 = 
	`DrvC¥SëupClocks
(&
ùùeClockC⁄fig
);

74 if(
sc
)

75  
sc
;

77 
	}
}

	@Sipp/SippFw/Tutorials/SippTutA3/leon/app_config.h

9 #i‚de‡
_APP_CONFIG_H_


10 
	#_APP_CONFIG_H_


	)

16 
öôClocksAndMem‹y
();

	@Sipp/SippFw/Tutorials/SippTutA3/leon/main.c

9 #i‡
deföed
(
SIPP_VCS
)

10 
	~<DrvTimî.h
>

11 
	~<DrvDdr.h
>

12 
	~"swcCrc.h
"

13 
	#EXP_CRC_VALUE
 0x1FA4B29C

	)

17 
	~"sùpTutA3Modñ.h
"

18 
	~"≠p_c⁄fig.h
"

20 
SùpTutA3Modñ
 
	gmyPl
;

22 
	$maö
(
¨gc
, *
¨gv
[])

24 
	`UNUSED
 (
¨gc
);

25 
	`UNUSED
 (
¨gv
);

26 
u32
 
sùpEº‹Log
[
SIPP_ERROR_HISTORY_SIZE
];

28 #i‡
	`deföed
(
SIPP_VCS
)

29 
¸c
 = 0;

32 
	`sùpPœtf‹mInô
();

35 #i‡
	`deföed
(
SIPP_VCS
)

36 
	`öôClocksAndMem‹y
();

37 
	`unôTe°Inô
();

38 
	`DrvTimîInô
();

39 
	`DrvDdrInôüli£
(
NULL
);

42 
	`ªadSùpTutA3ModñI≈ut
(&
myPl
);

44 
	`buûdSùpTutA3Modñ
(&
myPl
);

46 i‡(
	`sùpPùeGëEº‹Sètus
 (
myPl
.
∂
))

48 
u32
 
îrNum
;

49 
	`¥ötf
 ("Pipeline creationÉrror\nError codes:\n");

50 
îrNum
 = 
	`sùpGëEº‹Hi°‹y
 (
sùpEº‹Log
);

51 
îrNum
)

53 
	`¥ötf
 ("%08lx\n", 
sùpEº‹Log
[
îrNum
 - 0x1]);

54 
îrNum
--;

58 
	`c⁄figSùpTutA3Modñ
(&
myPl
);

61 
	`sùpPro˚ssFøme
(
myPl
.
∂
);

63 i‡(
	`sùpPùeGëEº‹Sètus
 (
myPl
.
∂
))

65 
u32
 
îrNum
;

66 
	`¥ötf
 ("PipelineÑuntimeÉrror\nError codes:\n");

67 
îrNum
 = 
	`sùpGëEº‹Hi°‹y
 (
sùpEº‹Log
);

68 
îrNum
)

70 
	`¥ötf
 ("%08lx\n", 
sùpEº‹Log
[
îrNum
 - 0x1]);

71 
îrNum
--;

75 
	`sùpSt›Svus
(
myPl
.
∂
);

76 
	`wrôeSùpTutA3ModñOuçut
(&
myPl
);

77 #i‡
	`deföed
(
SIPP_VCS
)

78 
¸c
 = 
	`swcCÆcCrc32
(
SùpTutA3Modñ_dmaOut1_buf„r
, 512 * 512, 0);

80 
	`unôTe°Com∑ª
(
¸c
, 
EXP_CRC_VALUE
);

81 
	`unôTe°FöÆRï‹t
();

84 
	}
}

	@Sipp/SippFw/Tutorials/SippTutA3/leon/sippTutA3Model.c

13 
	~"sùpTutA3Modñ.h
"

15 
	~<ö˛ude/sùpHwDefs.h
>

16 
	~<fûãrs/c⁄v5x5/c⁄v5x5.h
>

20 
UI¡8
 
DDR_DATA
 
	gSùpTutA3Modñ_dmaIn0_buf„r
[512 * 512 * 1 ]
ALIGNED
(8);

21 
UI¡8
 
DDR_DATA
 
	gSùpTutA3Modñ_dmaOut1_buf„r
[512 * 512 * 1 ]
ALIGNED
(8);

24 
	$ªadSùpTutA3ModñI≈ut
(
SùpTutA3Modñ
 *
pPl
)

26 
	`sùpRdFûeU8
((
UI¡8
*)
SùpTutA3Modñ_dmaIn0_buf„r
,512 * 512 * 1 * (UInt8),"../../../../../../../resources/lena_512x512_luma.raw");

28 ()(
pPl
);

30 
	}
}

32 
	$wrôeSùpTutA3ModñOuçut
(
SùpTutA3Modñ
 *
pPl
)

34 
	`sùpWrFûeU8
((
UI¡8
*)
SùpTutA3Modñ_dmaOut1_buf„r
,512 * 512 * 1 * (UInt8),"output.raw");

36 ()(
pPl
);

38 
	}
}

40 
	$buûdSùpTutA3Modñ
(
SùpTutA3Modñ
 *
pPl
)

43 
pPl
->
∂
 = 
	`sùpCª©ePùñöe
(0, 7, 
	`SIPP_MBIN
(
mböImgSùp
));

46 
pPl
->
dmaIn0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x00, 512, 512, 
	`N_PL
(1), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

47 
pPl
->
c⁄v5x52
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x00, 512, 512, 
	`N_PL
(1), 
	`SZ
(
UI¡8
), SZ(
C⁄v5x5P¨am
), 
	`SVU_SYM
(
svuC⁄v5x5
), 0);

48 
pPl
->
dmaOut1
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x00, 512, 512, 
	`N_PL
(1), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

51 
	`sùpLökFûãr
(
pPl
->
c⁄v5x52
,ÖPl->
dmaIn0
, 5,5 );

52 
	`sùpLökFûãr
(
pPl
->
dmaOut1
,ÖPl->
c⁄v5x52
, 1,1 );

54 
	}
}

56 
UI¡16
 
	gc⁄v5x52Cfg_cM©
[25];

58 
	$c⁄figSùpTutA3Modñ
(
SùpTutA3Modñ
 *
pPl
)

60 
DmaP¨am
 *
dmaIn0Cfg
 = (DmaP¨am *)
pPl
->
dmaIn0
->
∑øms
;

61 
C⁄v5x5P¨am
 *
c⁄v5x52Cfg
 = (C⁄v5x5P¨am *)
pPl
->
c⁄v5x52
->
∑øms
;

62 
DmaP¨am
 *
dmaOut1Cfg
 = (DmaP¨am *)
pPl
->
dmaOut1
->
∑øms
;

67 
c⁄v5x52Cfg
->
cM©

c⁄v5x52Cfg_cM©
;

68 
c⁄v5x52Cfg
->
cM©
[0]= 0x0000;

69 
c⁄v5x52Cfg
->
cM©
[1]= 0x0000;

70 
c⁄v5x52Cfg
->
cM©
[2]= 0x0000;

71 
c⁄v5x52Cfg
->
cM©
[3]= 0x0000;

72 
c⁄v5x52Cfg
->
cM©
[4]= 0x0000;

73 
c⁄v5x52Cfg
->
cM©
[5]= 0x0000;

74 
c⁄v5x52Cfg
->
cM©
[6]= 0x0000;

75 
c⁄v5x52Cfg
->
cM©
[7]= 0x3C00;

76 
c⁄v5x52Cfg
->
cM©
[8]= 0x0000;

77 
c⁄v5x52Cfg
->
cM©
[9]= 0x0000;

78 
c⁄v5x52Cfg
->
cM©
[10]= 0x0000;

79 
c⁄v5x52Cfg
->
cM©
[11]= 0x3C00;

80 
c⁄v5x52Cfg
->
cM©
[12]= 0xC400;

81 
c⁄v5x52Cfg
->
cM©
[13]= 0x3C00;

82 
c⁄v5x52Cfg
->
cM©
[14]= 0x0000;

83 
c⁄v5x52Cfg
->
cM©
[15]= 0x0000;

84 
c⁄v5x52Cfg
->
cM©
[16]= 0x0000;

85 
c⁄v5x52Cfg
->
cM©
[17]= 0x3C00;

86 
c⁄v5x52Cfg
->
cM©
[18]= 0x0000;

87 
c⁄v5x52Cfg
->
cM©
[19]= 0x0000;

88 
c⁄v5x52Cfg
->
cM©
[20]= 0x0000;

89 
c⁄v5x52Cfg
->
cM©
[21]= 0x0000;

90 
c⁄v5x52Cfg
->
cM©
[22]= 0x0000;

91 
c⁄v5x52Cfg
->
cM©
[23]= 0x0000;

92 
c⁄v5x52Cfg
->
cM©
[24]= 0x0000 ;

93 
dmaIn0Cfg
->
ddrAddr
 = (
UI¡32
)&
SùpTutA3Modñ_dmaIn0_buf„r
;

94 
dmaOut1Cfg
->
ddrAddr
 = (
UI¡32
)&
SùpTutA3Modñ_dmaOut1_buf„r
;

97 
	}
}

	@Sipp/SippFw/Tutorials/SippTutA3/leon/sippTutA3Model.h

13 #i‚de‡
__SIPPTUTA3MODEL_H__


14 
	#__SIPPTUTA3MODEL_H__


	)

16 
	~<sùp.h
>

17 
	~<sùpTe°Comm⁄.h
>

22 
UI¡8
 
DDR_DATA
 
SùpTutA3Modñ_dmaIn0_buf„r
[ 512 * 512 * 1 ]
ALIGNED
(8);

23 
UI¡8
 
DDR_DATA
 
SùpTutA3Modñ_dmaOut1_buf„r
[ 512 * 512 * 1 ]
ALIGNED
(8);

27 
	sSùpTutA3Modñ


30 
SùpPùñöe
 *
	m∂
;

33 
SùpFûãr
 *
	mdmaIn0
;

34 
SùpFûãr
 *
	mdmaOut1
;

35 
SùpFûãr
 *
	mc⁄v5x52
;

37 } 
	tSùpTutA3Modñ
;

39 
ªadSùpTutA3ModñI≈ut
(
SùpTutA3Modñ
 *
pPl
);

40 
wrôeSùpTutA3ModñOuçut
(
SùpTutA3Modñ
 *
pPl
);

42 
buûdSùpTutA3Modñ
(
SùpTutA3Modñ
 *
pPl
);

43 
c⁄figSùpTutA3Modñ
(
SùpTutA3Modñ
 *
pPl
);

	@Sipp/SippFw/Tutorials/SippTutA4/leon/app_config.c

13 
	~<ªgi°îsMyrüd.h
>

14 
	~<DrvC¥.h
>

19 #i‚de‡
IPIPE_CLK_CONFIG_SEL


20 
	#ùùeClockC⁄fig
 
ùùeClkC⁄figMV182


	)

22 
	#ùùeClockC⁄fig
 
IPIPE_CLK_CONFIG_SEL


	)

35 
tyAuxClkDividîCfg
 
	gauxClkAŒOn
[] =

37 {0x0FFFFFFF & (~(1<<
CSS_AUX_DDR_CORE
)Ë, 
CLK_SRC_REFCLK0
, 1, 1},

42 
tySocClockC⁄fig
 
	gùùeClkC⁄figMV182
 =

44 .
ªfClk0I≈utKhz
 = 12000,

45 .
	gªfClk1I≈utKhz
 = 0,

46 .
	gèrgëPŒ0FªqKhz
 = 264000,

47 .
	gèrgëPŒ1FªqKhz
 = 0,

48 .
	g˛kSrcPŒ1
 = 
CLK_SRC_REFCLK0
,

49 .
	gma°îClkDivNumî©‹
 = 
DONT_TOUCH_MASTER_DIVIDER
,

50 .
	gma°îClkDivDíomö©‹
 = 
DONT_TOUCH_MASTER_DIVIDER
,

51 .
	gcssDssClockE«bÀMask
 = 0xFFFFFFFFFFFFFFFFULL,

52 .
	gmssClockE«bÀMask
 = 0xFFFFFFFF,

53 .
	gsùpClockE«bÀMask
 = 0xFFFFFFFF,

54 .
	gu∑ClockE«bÀMask
 = 0xFFFFFFFF,

55 .
	gpAuxClkCfg
 = 
auxClkAŒOn
,

67 
	$öôClocksAndMem‹y
()

69 
s32
 
sc
;

70 
sc
 = 
	`DrvC¥Inô
();

71 if(
sc
)

72  
sc
;

73 
sc
 = 
	`DrvC¥SëupClocks
(&
ùùeClockC⁄fig
);

74 if(
sc
)

75  
sc
;

77 
	}
}

	@Sipp/SippFw/Tutorials/SippTutA4/leon/app_config.h

9 #i‚de‡
_APP_CONFIG_H_


10 
	#_APP_CONFIG_H_


	)

16 
öôClocksAndMem‹y
();

	@Sipp/SippFw/Tutorials/SippTutA4/leon/main.c

9 #i‡
deföed
(
SIPP_VCS
)

10 
	~<DrvTimî.h
>

11 
	~<DrvDdr.h
>

12 
	~"swcCrc.h
"

13 
	#EXP_CRC_VALUE0
 0xE1D868F9

	)

14 
	#EXP_CRC_VALUE1
 0x2D5053B6

	)

18 
	~"sùpTutA4Modñ.h
"

19 
	~"≠p_c⁄fig.h
"

21 
SùpTutA4Modñ
 
	gmyPl
;

23 
	$maö
(
¨gc
, *
¨gv
[])

25 
	`UNUSED
 (
¨gc
);

26 
	`UNUSED
 (
¨gv
);

27 
u32
 
sùpEº‹Log
[
SIPP_ERROR_HISTORY_SIZE
];

29 #i‡
	`deföed
(
SIPP_VCS
)

30 
¸c0
, 
¸c1
;

33 
	`sùpPœtf‹mInô
();

35 #i‡
	`deföed
(
SIPP_VCS
)

36 
s32
 
sc
;

37 
sc
 = 
	`öôClocksAndMem‹y
();

38 if(
sc
)

39  
sc
;

40 
	`unôTe°Inô
();

41 
	`DrvTimîInô
();

42 
	`DrvDdrInôüli£
(
NULL
);

45 
	`ªadSùpTutA4ModñI≈ut
(&
myPl
);

47 
	`buûdSùpTutA4Modñ
(&
myPl
);

49 i‡(
	`sùpPùeGëEº‹Sètus
 (
myPl
.
∂
))

51 
u32
 
îrNum
;

52 
	`¥ötf
 ("Pipeline creationÉrror\nError codes:\n");

53 
îrNum
 = 
	`sùpGëEº‹Hi°‹y
 (
sùpEº‹Log
);

54 
îrNum
)

56 
	`¥ötf
 ("%08lx\n", 
sùpEº‹Log
[
îrNum
 - 0x1]);

57 
îrNum
--;

61 
	`c⁄figSùpTutA4Modñ
(&
myPl
);

63 
	`sùpPro˚ssFøme
(
myPl
.
∂
);

65 i‡(
	`sùpPùeGëEº‹Sètus
 (
myPl
.
∂
))

67 
u32
 
îrNum
;

68 
	`¥ötf
 ("PipelineÑuntimeÉrror\nError codes:\n");

69 
îrNum
 = 
	`sùpGëEº‹Hi°‹y
 (
sùpEº‹Log
);

70 
îrNum
)

72 
	`¥ötf
 ("%08lx\n", 
sùpEº‹Log
[
îrNum
 - 0x1]);

73 
îrNum
--;

77 
	`sùpSt›Svus
(
myPl
.
∂
);

78 
	`wrôeSùpTutA4ModñOuçut
(&
myPl
);

80 #i‡
	`deföed
(
SIPP_VCS
)

81 
¸c0
 = 
	`swcCÆcCrc32
(
SùpTutA4Modñ_dmaOut1_buf„r
, 512 * 512, 0);

82 
¸c1
 = 
	`swcCÆcCrc32
(
SùpTutA4Modñ_dmaOut4_buf„r
, 512 * 512, 0);

84 
	`unôTe°Com∑ª
(
¸c0
, 
EXP_CRC_VALUE0
);

85 
	`unôTe°Com∑ª
(
¸c1
, 
EXP_CRC_VALUE1
);

87 
	`unôTe°FöÆRï‹t
();

90 
	}
}

	@Sipp/SippFw/Tutorials/SippTutA4/leon/sippTutA4Model.c

13 
	~"sùpTutA4Modñ.h
"

15 
	~<ö˛ude/sùpHwDefs.h
>

16 
	~<fûãrs/c⁄v5x5/c⁄v5x5.h
>

20 
UI¡8
 
DDR_DATA
 
	gSùpTutA4Modñ_dmaIn0_buf„r
[512 * 512 * 1 ]
ALIGNED
(8);

21 
UI¡8
 
DDR_DATA
 
	gSùpTutA4Modñ_dmaOut1_buf„r
[512 * 512 * 1 ]
ALIGNED
(8);

22 
UI¡8
 
DDR_DATA
 
	gSùpTutA4Modñ_dmaOut4_buf„r
[512 * 512 * 1 ]
ALIGNED
(8);

25 
	$ªadSùpTutA4ModñI≈ut
(
SùpTutA4Modñ
 *
pPl
)

27 
	`sùpRdFûeU8
((
UI¡8
*)
SùpTutA4Modñ_dmaIn0_buf„r
,512 * 512 * 1 * (UInt8),"../../../../../../../resources/lena_512x512_luma.raw");

29 ()(
pPl
);

31 
	}
}

33 
	$wrôeSùpTutA4ModñOuçut
(
SùpTutA4Modñ
 *
pPl
)

35 
	`sùpWrFûeU8
((
UI¡8
*)
SùpTutA4Modñ_dmaOut1_buf„r
,512 * 512 * 1 * (UInt8),"output.raw");

36 
	`sùpWrFûeU8
((
UI¡8
*)
SùpTutA4Modñ_dmaOut4_buf„r
,512 * 512 * 1 * (UInt8),"output1.raw");

38 ()(
pPl
);

40 
	}
}

42 
	$buûdSùpTutA4Modñ
(
SùpTutA4Modñ
 *
pPl
)

45 
pPl
->
∂
 = 
	`sùpCª©ePùñöe
(0, 7, 
	`SIPP_MBIN
(
mböImgSùp
));

48 
pPl
->
dmaIn0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x00, 512, 512, 
	`N_PL
(1), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

49 
pPl
->
c⁄v5x52
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x00, 512, 512, 
	`N_PL
(1), 
	`SZ
(
UI¡8
), SZ(
C⁄v5x5P¨am
), 
	`SVU_SYM
(
svuC⁄v5x5
), 0);

50 
pPl
->
dmaOut1
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x00, 512, 512, 
	`N_PL
(1), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

51 
pPl
->
c⁄v5x53
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x00, 512, 512, 
	`N_PL
(1), 
	`SZ
(
UI¡8
), SZ(
C⁄v5x5P¨am
), 
	`SVU_SYM
(
svuC⁄v5x5
), 0);

52 
pPl
->
dmaOut4
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x00, 512, 512, 
	`N_PL
(1), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

55 
	`sùpLökFûãr
(
pPl
->
c⁄v5x52
,ÖPl->
dmaIn0
, 5,5 );

56 
	`sùpLökFûãr
(
pPl
->
dmaOut1
,ÖPl->
c⁄v5x52
, 1,1 );

57 
	`sùpLökFûãr
(
pPl
->
c⁄v5x53
,ÖPl->
c⁄v5x52
, 5,5 );

58 
	`sùpLökFûãr
(
pPl
->
dmaOut4
,ÖPl->
c⁄v5x53
, 1,1 );

60 
	}
}

62 
UI¡16
 
	gc⁄v5x52Cfg_cM©
[25];

63 
UI¡16
 
	gc⁄v5x53Cfg_cM©
[25];

65 
	$c⁄figSùpTutA4Modñ
(
SùpTutA4Modñ
 *
pPl
)

67 
DmaP¨am
 *
dmaIn0Cfg
 = (DmaP¨am *)
pPl
->
dmaIn0
->
∑øms
;

68 
C⁄v5x5P¨am
 *
c⁄v5x52Cfg
 = (C⁄v5x5P¨am *)
pPl
->
c⁄v5x52
->
∑øms
;

69 
DmaP¨am
 *
dmaOut1Cfg
 = (DmaP¨am *)
pPl
->
dmaOut1
->
∑øms
;

70 
C⁄v5x5P¨am
 *
c⁄v5x53Cfg
 = (C⁄v5x5P¨am *)
pPl
->
c⁄v5x53
->
∑øms
;

71 
DmaP¨am
 *
dmaOut4Cfg
 = (DmaP¨am *)
pPl
->
dmaOut4
->
∑øms
;

76 
c⁄v5x52Cfg
->
cM©

c⁄v5x52Cfg_cM©
;

77 
c⁄v5x52Cfg
->
cM©
[0]= 0x291f;

78 
c⁄v5x52Cfg
->
cM©
[1]= 0x291f;

79 
c⁄v5x52Cfg
->
cM©
[2]= 0x291f;

80 
c⁄v5x52Cfg
->
cM©
[3]= 0x291f;

81 
c⁄v5x52Cfg
->
cM©
[4]= 0x291f;

82 
c⁄v5x52Cfg
->
cM©
[5]= 0x291f;

83 
c⁄v5x52Cfg
->
cM©
[6]= 0x291f;

84 
c⁄v5x52Cfg
->
cM©
[7]= 0x291f;

85 
c⁄v5x52Cfg
->
cM©
[8]= 0x291f;

86 
c⁄v5x52Cfg
->
cM©
[9]= 0x291f;

87 
c⁄v5x52Cfg
->
cM©
[10]= 0x291f;

88 
c⁄v5x52Cfg
->
cM©
[11]= 0x291f;

89 
c⁄v5x52Cfg
->
cM©
[12]= 0x291f;

90 
c⁄v5x52Cfg
->
cM©
[13]= 0x291f;

91 
c⁄v5x52Cfg
->
cM©
[14]= 0x291f;

92 
c⁄v5x52Cfg
->
cM©
[15]= 0x291f;

93 
c⁄v5x52Cfg
->
cM©
[16]= 0x291f;

94 
c⁄v5x52Cfg
->
cM©
[17]= 0x291f;

95 
c⁄v5x52Cfg
->
cM©
[18]= 0x291f;

96 
c⁄v5x52Cfg
->
cM©
[19]= 0x291f;

97 
c⁄v5x52Cfg
->
cM©
[20]= 0x291f;

98 
c⁄v5x52Cfg
->
cM©
[21]= 0x291f;

99 
c⁄v5x52Cfg
->
cM©
[22]= 0x291f;

100 
c⁄v5x52Cfg
->
cM©
[23]= 0x291f;

101 
c⁄v5x52Cfg
->
cM©
[24]= 0x291f;

102 
c⁄v5x53Cfg
->
cM©

c⁄v5x53Cfg_cM©
;

103 
c⁄v5x53Cfg
->
cM©
[0]= 0x291f;

104 
c⁄v5x53Cfg
->
cM©
[1]= 0x291f;

105 
c⁄v5x53Cfg
->
cM©
[2]= 0x291f;

106 
c⁄v5x53Cfg
->
cM©
[3]= 0x291f;

107 
c⁄v5x53Cfg
->
cM©
[4]= 0x291f;

108 
c⁄v5x53Cfg
->
cM©
[5]= 0x291f;

109 
c⁄v5x53Cfg
->
cM©
[6]= 0x291f;

110 
c⁄v5x53Cfg
->
cM©
[7]= 0x291f;

111 
c⁄v5x53Cfg
->
cM©
[8]= 0x291f;

112 
c⁄v5x53Cfg
->
cM©
[9]= 0x291f;

113 
c⁄v5x53Cfg
->
cM©
[10]= 0x291f;

114 
c⁄v5x53Cfg
->
cM©
[11]= 0x291f;

115 
c⁄v5x53Cfg
->
cM©
[12]= 0x291f;

116 
c⁄v5x53Cfg
->
cM©
[13]= 0x291f;

117 
c⁄v5x53Cfg
->
cM©
[14]= 0x291f;

118 
c⁄v5x53Cfg
->
cM©
[15]= 0x291f;

119 
c⁄v5x53Cfg
->
cM©
[16]= 0x291f;

120 
c⁄v5x53Cfg
->
cM©
[17]= 0x291f;

121 
c⁄v5x53Cfg
->
cM©
[18]= 0x291f;

122 
c⁄v5x53Cfg
->
cM©
[19]= 0x291f;

123 
c⁄v5x53Cfg
->
cM©
[20]= 0x291f;

124 
c⁄v5x53Cfg
->
cM©
[21]= 0x291f;

125 
c⁄v5x53Cfg
->
cM©
[22]= 0x291f;

126 
c⁄v5x53Cfg
->
cM©
[23]= 0x291f;

127 
c⁄v5x53Cfg
->
cM©
[24]= 0x291f;

128 
dmaIn0Cfg
->
ddrAddr
 = (
UI¡32
)&
SùpTutA4Modñ_dmaIn0_buf„r
;

129 
dmaOut1Cfg
->
ddrAddr
 = (
UI¡32
)&
SùpTutA4Modñ_dmaOut1_buf„r
;

130 
dmaOut4Cfg
->
ddrAddr
 = (
UI¡32
)&
SùpTutA4Modñ_dmaOut4_buf„r
;

133 
	}
}

	@Sipp/SippFw/Tutorials/SippTutA4/leon/sippTutA4Model.h

13 #i‚de‡
__SIPPTUTA4MODEL_H__


14 
	#__SIPPTUTA4MODEL_H__


	)

16 
	~<sùp.h
>

17 
	~<sùpTe°Comm⁄.h
>

22 
UI¡8
 
DDR_DATA
 
SùpTutA4Modñ_dmaIn0_buf„r
[ 512 * 512 * 1 ]
ALIGNED
(8);

23 
UI¡8
 
DDR_DATA
 
SùpTutA4Modñ_dmaOut1_buf„r
[ 512 * 512 * 1 ]
ALIGNED
(8);

24 
UI¡8
 
DDR_DATA
 
SùpTutA4Modñ_dmaOut4_buf„r
[ 512 * 512 * 1 ]
ALIGNED
(8);

28 
	sSùpTutA4Modñ


31 
SùpPùñöe
 *
	m∂
;

34 
SùpFûãr
 *
	mdmaIn0
;

35 
SùpFûãr
 *
	mdmaOut1
;

36 
SùpFûãr
 *
	mc⁄v5x52
;

37 
SùpFûãr
 *
	mc⁄v5x53
;

38 
SùpFûãr
 *
	mdmaOut4
;

40 } 
	tSùpTutA4Modñ
;

42 
ªadSùpTutA4ModñI≈ut
(
SùpTutA4Modñ
 *
pPl
);

43 
wrôeSùpTutA4ModñOuçut
(
SùpTutA4Modñ
 *
pPl
);

45 
buûdSùpTutA4Modñ
(
SùpTutA4Modñ
 *
pPl
);

46 
c⁄figSùpTutA4Modñ
(
SùpTutA4Modñ
 *
pPl
);

	@Sipp/SippFw/Tutorials/SippTutB0/leon/app_config.c

13 
	~<ªgi°îsMyrüd.h
>

14 
	~<DrvC¥.h
>

19 #i‚de‡
IPIPE_CLK_CONFIG_SEL


20 
	#ùùeClockC⁄fig
 
ùùeClkC⁄figMV182


	)

22 
	#ùùeClockC⁄fig
 
IPIPE_CLK_CONFIG_SEL


	)

35 
tyAuxClkDividîCfg
 
	gauxClkAŒOn
[] =

37 {0x0FFFFFFF & (~(1<<
CSS_AUX_DDR_CORE
)Ë, 
CLK_SRC_REFCLK0
, 1, 1},

42 
tySocClockC⁄fig
 
	gùùeClkC⁄figMV182
 =

44 .
ªfClk0I≈utKhz
 = 12000,

45 .
	gªfClk1I≈utKhz
 = 0,

46 .
	gèrgëPŒ0FªqKhz
 = 264000,

47 .
	gèrgëPŒ1FªqKhz
 = 0,

48 .
	g˛kSrcPŒ1
 = 
CLK_SRC_REFCLK0
,

49 .
	gma°îClkDivNumî©‹
 = 
DONT_TOUCH_MASTER_DIVIDER
,

50 .
	gma°îClkDivDíomö©‹
 = 
DONT_TOUCH_MASTER_DIVIDER
,

51 .
	gcssDssClockE«bÀMask
 = 0xFFFFFFFFFFFFFFFFULL,

52 .
	gmssClockE«bÀMask
 = 0xFFFFFFFF,

53 .
	gsùpClockE«bÀMask
 = 0xFFFFFFFF,

54 .
	gu∑ClockE«bÀMask
 = 0xFFFFFFFF,

55 .
	gpAuxClkCfg
 = 
auxClkAŒOn
,

67 
	$öôClocksAndMem‹y
()

69 
s32
 
sc
;

70 
sc
 = 
	`DrvC¥Inô
();

71 if(
sc
)

72  
sc
;

73 
sc
 = 
	`DrvC¥SëupClocks
(&
ùùeClockC⁄fig
);

74 if(
sc
)

75  
sc
;

77 
	}
}

	@Sipp/SippFw/Tutorials/SippTutB0/leon/app_config.h

9 #i‚de‡
_APP_CONFIG_H_


10 
	#_APP_CONFIG_H_


	)

16 
öôClocksAndMem‹y
();

	@Sipp/SippFw/Tutorials/SippTutB0/leon/main.c

9 #i‡
deföed
(
SIPP_VCS
)

10 
	~<DrvTimî.h
>

11 
	~<DrvDdr.h
>

12 
	~"swcCrc.h
"

13 
	#EXP_CRC_VALUE
 0xE5AA79D8

	)

17 
	~"sùpTutB0Modñ.h
"

18 
	~"≠p_c⁄fig.h
"

20 
SùpTutB0Modñ
 
	gmyPl
;

22 
	$maö
(
¨gc
, *
¨gv
[])

24 
	`UNUSED
 (
¨gc
);

25 
	`UNUSED
 (
¨gv
);

26 
u32
 
sùpEº‹Log
[
SIPP_ERROR_HISTORY_SIZE
];

28 #i‡
	`deföed
(
SIPP_VCS
)

29 
¸c
 = 0;

32 
	`sùpPœtf‹mInô
();

34 #i‡
	`deföed
(
SIPP_VCS
)

35 
s32
 
sc
;

36 
sc
 = 
	`öôClocksAndMem‹y
();

37 if(
sc
)

38  
sc
;

39 
	`unôTe°Inô
();

40 
	`DrvTimîInô
();

41 
	`DrvDdrInôüli£
(
NULL
);

44 
	`buûdSùpTutB0Modñ
(&
myPl
);

46 i‡(
	`sùpPùeGëEº‹Sètus
 (
myPl
.
∂
))

48 
u32
 
îrNum
;

49 
	`¥ötf
 ("Pipeline creationÉrror\nError codes:\n");

50 
îrNum
 = 
	`sùpGëEº‹Hi°‹y
 (
sùpEº‹Log
);

51 
îrNum
)

53 
	`¥ötf
 ("%08lx\n", 
sùpEº‹Log
[
îrNum
 - 0x1]);

54 
îrNum
--;

58 
	`c⁄figSùpTutB0Modñ
(&
myPl
);

60 
	`ªadSùpTutB0ModñI≈ut
(&
myPl
);

61 
	`sùpPro˚ssFøme
(
myPl
.
∂
);

63 i‡(
	`sùpPùeGëEº‹Sètus
 (
myPl
.
∂
))

65 
u32
 
îrNum
;

66 
	`¥ötf
 ("PipelineÑuntimeÉrror\nError codes:\n");

67 
îrNum
 = 
	`sùpGëEº‹Hi°‹y
 (
sùpEº‹Log
);

68 
îrNum
)

70 
	`¥ötf
 ("%08lx\n", 
sùpEº‹Log
[
îrNum
 - 0x1]);

71 
îrNum
--;

75 
	`wrôeSùpTutB0ModñOuçut
(&
myPl
);

77 #i‡
	`deföed
(
SIPP_VCS
)

79 
¸c
 = 
	`swcCÆcCrc32
(
SùpTutB0Modñ_dmaOut3_buf„r
, 512 * 512, 0);

80 
	`unôTe°Com∑ª
(
¸c
, 
EXP_CRC_VALUE
);

81 
	`unôTe°FöÆRï‹t
();

86 
	}
}

	@Sipp/SippFw/Tutorials/SippTutB0/leon/sippTutB0Model.c

13 
	~"sùpTutB0Modñ.h
"

15 
	~<ö˛ude/sùpHwDefs.h
>

16 
	~<fûãrs/avg/avg.h
>

20 
UI¡8
 
DDR_DATA
 
	gSùpTutB0Modñ_dmaIn0_buf„r
[512 * 512 * 1 ]
ALIGNED
(8);

21 
UI¡8
 
DDR_DATA
 
	gSùpTutB0Modñ_dmaIn1_buf„r
[512 * 512 * 1 ]
ALIGNED
(8);

22 
UI¡8
 
DDR_DATA
 
	gSùpTutB0Modñ_dmaOut3_buf„r
[512 * 512 * 1 ]
ALIGNED
(8);

25 
	$ªadSùpTutB0ModñI≈ut
(
SùpTutB0Modñ
 *
pPl
)

27 
	`sùpRdFûeU8
((
UI¡8
*)
SùpTutB0Modñ_dmaIn0_buf„r
,512 * 512 * 1 * (UInt8),"../../../../../../../resources/lena_512x512_luma.raw");

28 
	`sùpRdFûeU8
((
UI¡8
*)
SùpTutB0Modñ_dmaIn1_buf„r
,512 * 512 * 1 * (UInt8),"../../../../../../../resources/Baywatch_512x512_P422.yuv");

30 ()(
pPl
);

32 
	}
}

34 
	$wrôeSùpTutB0ModñOuçut
(
SùpTutB0Modñ
 *
pPl
)

36 
	`sùpWrFûeU8
((
UI¡8
*)
SùpTutB0Modñ_dmaOut3_buf„r
,512 * 512 * 1 * (UInt8),"gui_tut_B0_512x512_luma.raw");

38 ()(
pPl
);

40 
	}
}

42 
	$buûdSùpTutB0Modñ
(
SùpTutB0Modñ
 *
pPl
)

45 
pPl
->
∂
 = 
	`sùpCª©ePùñöe
(0, 7, 
	`SIPP_MBIN
(
mböImgSùp
));

48 
pPl
->
dmaIn0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x00, 512, 512, 
	`N_PL
(1), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

49 
pPl
->
dmaIn1
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x00, 512, 512, 
	`N_PL
(1), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

50 
pPl
->
avg2
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x00, 512, 512, 
	`N_PL
(1), 
	`SZ
(
UI¡8
), 0, 
	`SVU_SYM
(
svuAvg
), 0);

51 
pPl
->
dmaOut3
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x00, 512, 512, 
	`N_PL
(1), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

54 
	`sùpLökFûãr
(
pPl
->
avg2
,ÖPl->
dmaIn0
, 1,1 );

55 
	`sùpLökFûãr
(
pPl
->
avg2
,ÖPl->
dmaIn1
, 1,1 );

56 
	`sùpLökFûãr
(
pPl
->
dmaOut3
,ÖPl->
avg2
, 1,1 );

58 
	}
}

61 
	$c⁄figSùpTutB0Modñ
(
SùpTutB0Modñ
 *
pPl
)

63 
DmaP¨am
 *
dmaIn0Cfg
 = (DmaP¨am *)
pPl
->
dmaIn0
->
∑øms
;

64 
DmaP¨am
 *
dmaIn1Cfg
 = (DmaP¨am *)
pPl
->
dmaIn1
->
∑øms
;

65 
DmaP¨am
 *
dmaOut3Cfg
 = (DmaP¨am *)
pPl
->
dmaOut3
->
∑øms
;

70 
dmaIn0Cfg
->
ddrAddr
 = (
UI¡32
)&
SùpTutB0Modñ_dmaIn0_buf„r
;

71 
dmaIn1Cfg
->
ddrAddr
 = (
UI¡32
)&
SùpTutB0Modñ_dmaIn1_buf„r
;

72 
dmaOut3Cfg
->
ddrAddr
 = (
UI¡32
)&
SùpTutB0Modñ_dmaOut3_buf„r
;

75 
	}
}

	@Sipp/SippFw/Tutorials/SippTutB0/leon/sippTutB0Model.h

13 #i‚de‡
__SIPPTUTB0MODEL_H__


14 
	#__SIPPTUTB0MODEL_H__


	)

16 
	~<sùp.h
>

17 
	~<sùpTe°Comm⁄.h
>

22 
UI¡8
 
DDR_DATA
 
SùpTutB0Modñ_dmaIn0_buf„r
[ 512 * 512 * 1 ]
ALIGNED
(8);

23 
UI¡8
 
DDR_DATA
 
SùpTutB0Modñ_dmaIn1_buf„r
[ 512 * 512 * 1 ]
ALIGNED
(8);

24 
UI¡8
 
DDR_DATA
 
SùpTutB0Modñ_dmaOut3_buf„r
[ 512 * 512 * 1 ]
ALIGNED
(8);

28 
	sSùpTutB0Modñ


31 
SùpPùñöe
 *
	m∂
;

34 
SùpFûãr
 *
	mdmaIn0
;

35 
SùpFûãr
 *
	mdmaIn1
;

36 
SùpFûãr
 *
	mavg2
;

37 
SùpFûãr
 *
	mdmaOut3
;

39 } 
	tSùpTutB0Modñ
;

41 
ªadSùpTutB0ModñI≈ut
(
SùpTutB0Modñ
 *
pPl
);

42 
wrôeSùpTutB0ModñOuçut
(
SùpTutB0Modñ
 *
pPl
);

44 
buûdSùpTutB0Modñ
(
SùpTutB0Modñ
 *
pPl
);

45 
c⁄figSùpTutB0Modñ
(
SùpTutB0Modñ
 *
pPl
);

	@Sipp/SippFw/Tutorials/SippTutB1/leon/app_config.c

13 
	~<ªgi°îsMyrüd.h
>

14 
	~<DrvC¥.h
>

19 #i‚de‡
IPIPE_CLK_CONFIG_SEL


20 
	#ùùeClockC⁄fig
 
ùùeClkC⁄figMV182


	)

22 
	#ùùeClockC⁄fig
 
IPIPE_CLK_CONFIG_SEL


	)

35 
tyAuxClkDividîCfg
 
	gauxClkAŒOn
[] =

37 {0x0FFFFFFF & (~(1<<
CSS_AUX_DDR_CORE
)Ë, 
CLK_SRC_REFCLK0
, 1, 1},

42 
tySocClockC⁄fig
 
	gùùeClkC⁄figMV182
 =

44 .
ªfClk0I≈utKhz
 = 12000,

45 .
	gªfClk1I≈utKhz
 = 0,

46 .
	gèrgëPŒ0FªqKhz
 = 264000,

47 .
	gèrgëPŒ1FªqKhz
 = 0,

48 .
	g˛kSrcPŒ1
 = 
CLK_SRC_REFCLK0
,

49 .
	gma°îClkDivNumî©‹
 = 
DONT_TOUCH_MASTER_DIVIDER
,

50 .
	gma°îClkDivDíomö©‹
 = 
DONT_TOUCH_MASTER_DIVIDER
,

51 .
	gcssDssClockE«bÀMask
 = 0xFFFFFFFFFFFFFFFFULL,

52 .
	gmssClockE«bÀMask
 = 0xFFFFFFFF,

53 .
	gsùpClockE«bÀMask
 = 0xFFFFFFFF,

54 .
	gu∑ClockE«bÀMask
 = 0xFFFFFFFF,

55 .
	gpAuxClkCfg
 = 
auxClkAŒOn
,

67 
	$öôClocksAndMem‹y
()

69 
s32
 
sc
;

70 
sc
 = 
	`DrvC¥Inô
();

71 if(
sc
)

72  
sc
;

73 
sc
 = 
	`DrvC¥SëupClocks
(&
ùùeClockC⁄fig
);

74 if(
sc
)

75  
sc
;

77 
	}
}

	@Sipp/SippFw/Tutorials/SippTutB1/leon/app_config.h

9 #i‚de‡
_APP_CONFIG_H_


10 
	#_APP_CONFIG_H_


	)

16 
öôClocksAndMem‹y
();

	@Sipp/SippFw/Tutorials/SippTutB1/leon/main.c

9 #i‡
deföed
(
SIPP_VCS
)

10 
	~<DrvTimî.h
>

11 
	~<DrvDdr.h
>

12 
	~"swcCrc.h
"

13 
	#EXP_CRC_VALUE
 0x62A6BD7E

	)

17 
	~"sùpTutB1Modñ.h
"

18 
	~"≠p_c⁄fig.h
"

20 
SùpTutB1Modñ
 
	gmyPl
;

22 
	$maö
(
¨gc
, *
¨gv
[])

24 
	`UNUSED
 (
¨gc
);

25 
	`UNUSED
 (
¨gv
);

26 
u32
 
sùpEº‹Log
[
SIPP_ERROR_HISTORY_SIZE
];

28 #i‡
	`deföed
(
SIPP_VCS
)

29 
¸c
 = 0;

32 
	`sùpPœtf‹mInô
();

34 #i‡
	`deföed
(
SIPP_VCS
)

35 
s32
 
sc
;

36 
sc
 = 
	`öôClocksAndMem‹y
();

37 if(
sc
)

38  
sc
;

39 
	`unôTe°Inô
();

40 
	`DrvTimîInô
();

41 
	`DrvDdrInôüli£
(
NULL
);

44 
	`buûdSùpTutB1Modñ
(&
myPl
);

46 i‡(
	`sùpPùeGëEº‹Sètus
 (
myPl
.
∂
))

48 
u32
 
îrNum
;

49 
	`¥ötf
 ("Pipeline creationÉrror\nError codes:\n");

50 
îrNum
 = 
	`sùpGëEº‹Hi°‹y
 (
sùpEº‹Log
);

51 
îrNum
)

53 
	`¥ötf
 ("%08lx\n", 
sùpEº‹Log
[
îrNum
 - 0x1]);

54 
îrNum
--;

58 
	`c⁄figSùpTutB1Modñ
(&
myPl
);

63 
	`ªadSùpTutB1ModñI≈ut
(&
myPl
);

64 
	`sùpPro˚ssFøme
(
myPl
.
∂
);

66 i‡(
	`sùpPùeGëEº‹Sètus
 (
myPl
.
∂
))

68 
u32
 
îrNum
;

69 
	`¥ötf
 ("PipelineÑuntimeÉrror\nError codes:\n");

70 
îrNum
 = 
	`sùpGëEº‹Hi°‹y
 (
sùpEº‹Log
);

71 
îrNum
)

73 
	`¥ötf
 ("%08lx\n", 
sùpEº‹Log
[
îrNum
 - 0x1]);

74 
îrNum
--;

78 
	`wrôeSùpTutB1ModñOuçut
(&
myPl
);

80 #i‡
	`deföed
(
SIPP_VCS
)

81 
¸c
 = 
	`swcCÆcCrc32
(
SùpTutB1Modñ_dmaOut3_buf„r
, 512 * 512, 0);

82 
	`unôTe°Com∑ª
(
¸c
, 
EXP_CRC_VALUE
);

83 
	`unôTe°FöÆRï‹t
();

87 
	}
}

	@Sipp/SippFw/Tutorials/SippTutB1/leon/sippTutB1Model.c

13 
	~"sùpTutB1Modñ.h
"

15 
	~<ö˛ude/sùpHwDefs.h
>

16 
	~<fûãrs/√g©ive/√g©ive.h
>

17 
	~<fûãrs/avg/avg.h
>

21 
UI¡8
 
DDR_DATA
 
	gSùpTutB1Modñ_dmaIn0_buf„r
[512 * 512 * 1 ]
ALIGNED
(8);

22 
UI¡8
 
DDR_DATA
 
	gSùpTutB1Modñ_dmaIn1_buf„r
[512 * 512 * 1 ]
ALIGNED
(8);

23 
UI¡8
 
DDR_DATA
 
	gSùpTutB1Modñ_dmaOut3_buf„r
[512 * 512 * 1 ]
ALIGNED
(8);

26 
	$ªadSùpTutB1ModñI≈ut
(
SùpTutB1Modñ
 *
pPl
)

28 
	`sùpRdFûeU8
((
UI¡8
*)
SùpTutB1Modñ_dmaIn0_buf„r
,512 * 512 * 1 * (UInt8),"../../../../../../../resources/lena_512x512_luma.raw");

29 
	`sùpRdFûeU8
((
UI¡8
*)
SùpTutB1Modñ_dmaIn1_buf„r
,512 * 512 * 1 * (UInt8),"../../../../../../../resources/Baywatch_512x512_P422.yuv");

31 ()(
pPl
);

33 
	}
}

35 
	$wrôeSùpTutB1ModñOuçut
(
SùpTutB1Modñ
 *
pPl
)

37 
	`sùpWrFûeU8
((
UI¡8
*)
SùpTutB1Modñ_dmaOut3_buf„r
,512 * 512 * 1 * (UInt8),"output.raw");

39 ()(
pPl
);

41 
	}
}

43 
	$buûdSùpTutB1Modñ
(
SùpTutB1Modñ
 *
pPl
)

46 
pPl
->
∂
 = 
	`sùpCª©ePùñöe
(0, 7, 
	`SIPP_MBIN
(
mböImgSùp
));

49 
pPl
->
dmaIn0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x00, 512, 512, 
	`N_PL
(1), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

50 
pPl
->
dmaIn1
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x00, 512, 512, 
	`N_PL
(1), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

51 
pPl
->
√g©ive4
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x00, 512, 512, 
	`N_PL
(1), 
	`SZ
(
UI¡8
), 0, 
	`SVU_SYM
(
svuNeg©ive
), 0);

52 
pPl
->
avg2
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x00, 512, 512, 
	`N_PL
(1), 
	`SZ
(
UI¡8
), 0, 
	`SVU_SYM
(
svuAvg
), 0);

53 
pPl
->
dmaOut3
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x00, 512, 512, 
	`N_PL
(1), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

56 
	`sùpLökFûãr
(
pPl
->
√g©ive4
,ÖPl->
dmaIn1
, 1,1 );

57 
	`sùpLökFûãr
(
pPl
->
avg2
,ÖPl->
dmaIn0
, 1,1 );

58 
	`sùpLökFûãr
(
pPl
->
avg2
,ÖPl->
√g©ive4
, 1,1 );

59 
	`sùpLökFûãr
(
pPl
->
dmaOut3
,ÖPl->
avg2
, 1,1 );

61 
	}
}

64 
	$c⁄figSùpTutB1Modñ
(
SùpTutB1Modñ
 *
pPl
)

66 
DmaP¨am
 *
dmaIn0Cfg
 = (DmaP¨am *)
pPl
->
dmaIn0
->
∑øms
;

67 
DmaP¨am
 *
dmaIn1Cfg
 = (DmaP¨am *)
pPl
->
dmaIn1
->
∑øms
;

68 
DmaP¨am
 *
dmaOut3Cfg
 = (DmaP¨am *)
pPl
->
dmaOut3
->
∑øms
;

73 
dmaIn0Cfg
->
ddrAddr
 = (
UI¡32
)&
SùpTutB1Modñ_dmaIn0_buf„r
;

74 
dmaIn1Cfg
->
ddrAddr
 = (
UI¡32
)&
SùpTutB1Modñ_dmaIn1_buf„r
;

75 
dmaOut3Cfg
->
ddrAddr
 = (
UI¡32
)&
SùpTutB1Modñ_dmaOut3_buf„r
;

78 
	}
}

	@Sipp/SippFw/Tutorials/SippTutB1/leon/sippTutB1Model.h

13 #i‚de‡
__SIPPTUTB1MODEL_H__


14 
	#__SIPPTUTB1MODEL_H__


	)

16 
	~<sùp.h
>

17 
	~<sùpTe°Comm⁄.h
>

22 
UI¡8
 
DDR_DATA
 
SùpTutB1Modñ_dmaIn0_buf„r
[ 512 * 512 * 1 ]
ALIGNED
(8);

23 
UI¡8
 
DDR_DATA
 
SùpTutB1Modñ_dmaIn1_buf„r
[ 512 * 512 * 1 ]
ALIGNED
(8);

24 
UI¡8
 
DDR_DATA
 
SùpTutB1Modñ_dmaOut3_buf„r
[ 512 * 512 * 1 ]
ALIGNED
(8);

28 
	sSùpTutB1Modñ


31 
SùpPùñöe
 *
	m∂
;

34 
SùpFûãr
 *
	mdmaIn0
;

35 
SùpFûãr
 *
	mavg2
;

36 
SùpFûãr
 *
	mdmaOut3
;

37 
SùpFûãr
 *
	m√g©ive4
;

38 
SùpFûãr
 *
	mdmaIn1
;

40 } 
	tSùpTutB1Modñ
;

42 
ªadSùpTutB1ModñI≈ut
(
SùpTutB1Modñ
 *
pPl
);

43 
wrôeSùpTutB1ModñOuçut
(
SùpTutB1Modñ
 *
pPl
);

45 
buûdSùpTutB1Modñ
(
SùpTutB1Modñ
 *
pPl
);

46 
c⁄figSùpTutB1Modñ
(
SùpTutB1Modñ
 *
pPl
);

	@Sipp/SippFw/Tutorials/SippTutC0/leon/app_config.c

13 
	~<ªgi°îsMyrüd.h
>

14 
	~<DrvC¥.h
>

19 #i‚de‡
IPIPE_CLK_CONFIG_SEL


20 
	#ùùeClockC⁄fig
 
ùùeClkC⁄figMV182


	)

22 
	#ùùeClockC⁄fig
 
IPIPE_CLK_CONFIG_SEL


	)

35 
tyAuxClkDividîCfg
 
	gauxClkAŒOn
[] =

37 {0x0FFFFFFF & (~(1<<
CSS_AUX_DDR_CORE
)Ë, 
CLK_SRC_REFCLK0
, 1, 1},

42 
tySocClockC⁄fig
 
	gùùeClkC⁄figMV182
 =

44 .
ªfClk0I≈utKhz
 = 12000,

45 .
	gªfClk1I≈utKhz
 = 0,

46 .
	gèrgëPŒ0FªqKhz
 = 264000,

47 .
	gèrgëPŒ1FªqKhz
 = 0,

48 .
	g˛kSrcPŒ1
 = 
CLK_SRC_REFCLK0
,

49 .
	gma°îClkDivNumî©‹
 = 
DONT_TOUCH_MASTER_DIVIDER
,

50 .
	gma°îClkDivDíomö©‹
 = 
DONT_TOUCH_MASTER_DIVIDER
,

51 .
	gcssDssClockE«bÀMask
 = 0xFFFFFFFFFFFFFFFFULL,

52 .
	gmssClockE«bÀMask
 = 0xFFFFFFFF,

53 .
	gsùpClockE«bÀMask
 = 0xFFFFFFFF,

54 .
	gu∑ClockE«bÀMask
 = 0xFFFFFFFF,

55 .
	gpAuxClkCfg
 = 
auxClkAŒOn
,

67 
	$öôClocksAndMem‹y
()

69 
s32
 
sc
;

70 
sc
 = 
	`DrvC¥Inô
();

71 if(
sc
)

72  
sc
;

73 
sc
 = 
	`DrvC¥SëupClocks
(&
ùùeClockC⁄fig
);

74 if(
sc
)

75  
sc
;

77 
	}
}

	@Sipp/SippFw/Tutorials/SippTutC0/leon/app_config.h

9 #i‚de‡
_APP_CONFIG_H_


10 
	#_APP_CONFIG_H_


	)

16 
öôClocksAndMem‹y
();

	@Sipp/SippFw/Tutorials/SippTutC0/leon/main.c

9 #i‡
deföed
(
SIPP_VCS
)

10 
	~<DrvTimî.h
>

11 
	~<DrvDdr.h
>

12 
	~"swcCrc.h
"

13 
	#EXP_CRC_VALUE
 0x753881DD

	)

16 
	~"sùpTutC0Modñ.h
"

17 
	~"≠p_c⁄fig.h
"

19 
SùpTutC0Modñ
 
	gmyPl
;

21 
UI¡32
 
	gdM©
[10] = {

29 
	$maö
(
¨gc
, *
¨gv
[])

31 
	`UNUSED
 (
¨gc
);

32 
	`UNUSED
 (
¨gv
);

33 
u32
 
sùpEº‹Log
[
SIPP_ERROR_HISTORY_SIZE
];

36 #i‡
	`deföed
(
SIPP_VCS
)

37 
¸c
 = 0;

40 
	`sùpPœtf‹mInô
();

42 #i‡
	`deföed
(
SIPP_VCS
)

43 
s32
 
sc
;

44 
sc
 = 
	`öôClocksAndMem‹y
();

45 if(
sc
)

46  
sc
;

47 
	`unôTe°Inô
();

48 
	`DrvTimîInô
();

49 
	`DrvDdrInôüli£
(
NULL
);

52 
	`buûdSùpTutC0Modñ
(&
myPl
);

54 i‡(
	`sùpPùeGëEº‹Sètus
 (
myPl
.
∂
))

56 
u32
 
îrNum
;

57 
	`¥ötf
 ("Pipeline creationÉrror\nError codes:\n");

58 
îrNum
 = 
	`sùpGëEº‹Hi°‹y
 (
sùpEº‹Log
);

59 
îrNum
)

61 
	`¥ötf
 ("%08lx\n", 
sùpEº‹Log
[
îrNum
 - 0x1]);

62 
îrNum
--;

66 
	`c⁄figSùpTutC0Modñ
(&
myPl
);

71 
	`ªadSùpTutC0ModñI≈ut
(&
myPl
);

72 
	`sùpPro˚ssFøme
(
myPl
.
∂
);

74 i‡(
	`sùpPùeGëEº‹Sètus
 (
myPl
.
∂
))

76 
u32
 
îrNum
;

77 
	`¥ötf
 ("PipelineÑuntimeÉrror\nError codes:\n");

78 
îrNum
 = 
	`sùpGëEº‹Hi°‹y
 (
sùpEº‹Log
);

79 
îrNum
)

81 
	`¥ötf
 ("%08lx\n", 
sùpEº‹Log
[
îrNum
 - 0x1]);

82 
îrNum
--;

86 
	`wrôeSùpTutC0ModñOuçut
(&
myPl
);

88 #i‡
	`deföed
(
SIPP_VCS
)

89 
¸c
 = 
	`swcCÆcCrc32
(
SùpTutC0Modñ_dmaOut3_buf„r
, 512 * 512, 0);

90 
	`unôTe°Com∑ª
(
¸c
, 
EXP_CRC_VALUE
);

91 
	`unôTe°FöÆRï‹t
();

95 
	}
}

	@Sipp/SippFw/Tutorials/SippTutC0/leon/sippMat.h

7 #i‚de‡
SIPPMAT_H_


8 
	#SIPPMAT_H_


	)

10 
UI¡32
 
dM©
[10];

	@Sipp/SippFw/Tutorials/SippTutC0/leon/sippTutC0Model.c

13 
	~"sùpTutC0Modñ.h
"

15 
	~<ö˛ude/sùpHwDefs.h
>

16 
	~<fûãrs/dû©e5x5/dû©e5x5.h
>

20 
UI¡8
 
DDR_DATA
 
	gSùpTutC0Modñ_dmaIn0_buf„r
[512 * 512 * 1 ]
ALIGNED
(8);

21 
UI¡8
 
DDR_DATA
 
	gSùpTutC0Modñ_dmaOut3_buf„r
[512 * 512 * 1 ]
ALIGNED
(8);

24 
	$ªadSùpTutC0ModñI≈ut
(
SùpTutC0Modñ
 *
pPl
)

26 
	`sùpRdFûeU8
((
UI¡8
*)
SùpTutC0Modñ_dmaIn0_buf„r
,512 * 512 * 1 * (UInt8),"../../../../../../../resources/lena_512x512_luma.raw");

28 ()(
pPl
);

30 
	}
}

32 
	$wrôeSùpTutC0ModñOuçut
(
SùpTutC0Modñ
 *
pPl
)

34 
	`sùpWrFûeU8
((
UI¡8
*)
SùpTutC0Modñ_dmaOut3_buf„r
,512 * 512 * 1 * (UInt8),"gui_tut_C0_512x512_luma.raw");

36 ()(
pPl
);

38 
	}
}

40 
	$buûdSùpTutC0Modñ
(
SùpTutC0Modñ
 *
pPl
)

43 
pPl
->
∂
 = 
	`sùpCª©ePùñöe
(0, 7, 
	`SIPP_MBIN
(
mböImgSùp
));

46 
pPl
->
dmaIn0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x00, 512, 512, 
	`N_PL
(1), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

47 
pPl
->
dû©e5x52
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x00, 512, 512, 
	`N_PL
(1), 
	`SZ
(
UI¡8
), SZ(
Dû©e5x5P¨am
), 
	`SVU_SYM
(
svuDû©e5x5
), 0);

48 
pPl
->
dmaOut3
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x00, 512, 512, 
	`N_PL
(1), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

51 
	`sùpLökFûãr
(
pPl
->
dû©e5x52
,ÖPl->
dmaIn0
, 5,5 );

52 
	`sùpLökFûãr
(
pPl
->
dmaOut3
,ÖPl->
dû©e5x52
, 1,1 );

54 
	}
}

57 
	$c⁄figSùpTutC0Modñ
(
SùpTutC0Modñ
 *
pPl
)

59 
DmaP¨am
 *
dmaIn0Cfg
 = (DmaP¨am *)
pPl
->
dmaIn0
->
∑øms
;

60 
Dû©e5x5P¨am
 *
dû©e5x52Cfg
 = (Dû©e5x5P¨am *)
pPl
->
dû©e5x52
->
∑øms
;

61 
DmaP¨am
 *
dmaOut3Cfg
 = (DmaP¨am *)
pPl
->
dmaOut3
->
∑øms
;

66 
dû©e5x52Cfg
->
dM©
[0](
UI¡8
*)&dMat[0];

67 
dû©e5x52Cfg
->
dM©
[1](
UI¡8
*)&dMat[2];

68 
dû©e5x52Cfg
->
dM©
[2](
UI¡8
*)&dMat[4];

69 
dû©e5x52Cfg
->
dM©
[3](
UI¡8
*)&dMat[6];

70 
dû©e5x52Cfg
->
dM©
[4](
UI¡8
*)&dMat[8];

71 
dmaIn0Cfg
->
ddrAddr
 = (
UI¡32
)&
SùpTutC0Modñ_dmaIn0_buf„r
;

72 
dmaOut3Cfg
->
ddrAddr
 = (
UI¡32
)&
SùpTutC0Modñ_dmaOut3_buf„r
;

75 
	}
}

	@Sipp/SippFw/Tutorials/SippTutC0/leon/sippTutC0Model.h

13 #i‚de‡
__SIPPTUTC0MODEL_H__


14 
	#__SIPPTUTC0MODEL_H__


	)

16 
	~<sùp.h
>

17 
	~<sùpTe°Comm⁄.h
>

19 
	~"sùpM©.h
"

23 
UI¡8
 
DDR_DATA
 
SùpTutC0Modñ_dmaIn0_buf„r
[ 512 * 512 * 1 ]
ALIGNED
(8);

24 
UI¡8
 
DDR_DATA
 
SùpTutC0Modñ_dmaOut3_buf„r
[ 512 * 512 * 1 ]
ALIGNED
(8);

28 
	sSùpTutC0Modñ


31 
SùpPùñöe
 *
	m∂
;

34 
SùpFûãr
 *
	mdmaIn0
;

35 
SùpFûãr
 *
	mdmaOut3
;

36 
SùpFûãr
 *
	mdû©e5x52
;

38 } 
	tSùpTutC0Modñ
;

40 
ªadSùpTutC0ModñI≈ut
(
SùpTutC0Modñ
 *
pPl
);

41 
wrôeSùpTutC0ModñOuçut
(
SùpTutC0Modñ
 *
pPl
);

43 
buûdSùpTutC0Modñ
(
SùpTutC0Modñ
 *
pPl
);

44 
c⁄figSùpTutC0Modñ
(
SùpTutC0Modñ
 *
pPl
);

	@Sipp/SippFw/Tutorials/SippTutC1/leon/app_config.c

13 
	~<ªgi°îsMyrüd.h
>

14 
	~<DrvC¥.h
>

19 #i‚de‡
IPIPE_CLK_CONFIG_SEL


20 
	#ùùeClockC⁄fig
 
ùùeClkC⁄figMV182


	)

22 
	#ùùeClockC⁄fig
 
IPIPE_CLK_CONFIG_SEL


	)

35 
tyAuxClkDividîCfg
 
	gauxClkAŒOn
[] =

37 {0x0FFFFFFF & (~(1<<
CSS_AUX_DDR_CORE
)Ë, 
CLK_SRC_REFCLK0
, 1, 1},

42 
tySocClockC⁄fig
 
	gùùeClkC⁄figMV182
 =

44 .
ªfClk0I≈utKhz
 = 12000,

45 .
	gªfClk1I≈utKhz
 = 0,

46 .
	gèrgëPŒ0FªqKhz
 = 264000,

47 .
	gèrgëPŒ1FªqKhz
 = 0,

48 .
	g˛kSrcPŒ1
 = 
CLK_SRC_REFCLK0
,

49 .
	gma°îClkDivNumî©‹
 = 
DONT_TOUCH_MASTER_DIVIDER
,

50 .
	gma°îClkDivDíomö©‹
 = 
DONT_TOUCH_MASTER_DIVIDER
,

51 .
	gcssDssClockE«bÀMask
 = 0xFFFFFFFFFFFFFFFFULL,

52 .
	gmssClockE«bÀMask
 = 0xFFFFFFFF,

53 .
	gsùpClockE«bÀMask
 = 0xFFFFFFFF,

54 .
	gu∑ClockE«bÀMask
 = 0xFFFFFFFF,

55 .
	gpAuxClkCfg
 = 
auxClkAŒOn
,

67 
	$öôClocksAndMem‹y
()

69 
s32
 
sc
;

70 
sc
 = 
	`DrvC¥Inô
();

71 if(
sc
)

72  
sc
;

73 
sc
 = 
	`DrvC¥SëupClocks
(&
ùùeClockC⁄fig
);

74 if(
sc
)

75  
sc
;

77 
	}
}

	@Sipp/SippFw/Tutorials/SippTutC1/leon/app_config.h

9 #i‚de‡
_APP_CONFIG_H_


10 
	#_APP_CONFIG_H_


	)

16 
öôClocksAndMem‹y
();

	@Sipp/SippFw/Tutorials/SippTutC1/leon/main.c

9 #i‡
deföed
(
SIPP_VCS
)

10 
	~<DrvTimî.h
>

11 
	~<DrvDdr.h
>

12 
	~"swcCrc.h
"

13 
	#EXP_CRC_VALUE
 0x0ABC6CE0

	)

16 
	~"sùpTutC1Modñ.h
"

17 
	~"≠p_c⁄fig.h
"

19 
SùpTutC1Modñ
 
	gmyPl
;

20 
UI¡32
 
	gdM©
[10] = {

28 
	$maö
(
¨gc
, *
¨gv
[])

30 
	`UNUSED
 (
¨gc
);

31 
	`UNUSED
 (
¨gv
);

32 
u32
 
sùpEº‹Log
[
SIPP_ERROR_HISTORY_SIZE
];

34 #i‡
	`deföed
(
SIPP_VCS
)

35 
¸c
 = 0;

38 
	`sùpPœtf‹mInô
();

40 #i‡
	`deföed
(
SIPP_VCS
)

41 
s32
 
sc
;

42 
sc
 = 
	`öôClocksAndMem‹y
();

43 if(
sc
)

44  
sc
;

45 
	`unôTe°Inô
();

46 
	`DrvTimîInô
();

47 
	`DrvDdrInôüli£
(
NULL
);

50 
	`buûdSùpTutC1Modñ
(&
myPl
);

52 i‡(
	`sùpPùeGëEº‹Sètus
 (
myPl
.
∂
))

54 
u32
 
îrNum
;

55 
	`¥ötf
 ("Pipeline creationÉrror\nError codes:\n");

56 
îrNum
 = 
	`sùpGëEº‹Hi°‹y
 (
sùpEº‹Log
);

57 
îrNum
)

59 
	`¥ötf
 ("%08lx\n", 
sùpEº‹Log
[
îrNum
 - 0x1]);

60 
îrNum
--;

64 
	`c⁄figSùpTutC1Modñ
(&
myPl
);

69 
	`ªadSùpTutC1ModñI≈ut
(&
myPl
);

70 
	`sùpPro˚ssFøme
(
myPl
.
∂
);

72 i‡(
	`sùpPùeGëEº‹Sètus
 (
myPl
.
∂
))

74 
u32
 
îrNum
;

75 
	`¥ötf
 ("PipelineÑuntimeÉrror\nError codes:\n");

76 
îrNum
 = 
	`sùpGëEº‹Hi°‹y
 (
sùpEº‹Log
);

77 
îrNum
)

79 
	`¥ötf
 ("%08lx\n", 
sùpEº‹Log
[
îrNum
 - 0x1]);

80 
îrNum
--;

84 
	`wrôeSùpTutC1ModñOuçut
(&
myPl
);

86 #i‡
	`deföed
(
SIPP_VCS
)

87 
¸c
 = 
	`swcCÆcCrc32
(
SùpTutC1Modñ_dmaOut1_buf„r
, 512 * 512, 0);

88 
	`unôTe°Com∑ª
(
¸c
, 
EXP_CRC_VALUE
);

89 
	`unôTe°FöÆRï‹t
();

93 
	}
}

	@Sipp/SippFw/Tutorials/SippTutC1/leon/sippMat.h

7 #i‚de‡
SIPPMAT_H_


8 
	#SIPPMAT_H_


	)

11 
UI¡32
 
dM©
[10];

	@Sipp/SippFw/Tutorials/SippTutC1/leon/sippTutC1Model.c

13 
	~"sùpTutC1Modñ.h
"

15 
	~<ö˛ude/sùpHwDefs.h
>

16 
	~<fûãrs/îode5x5/îode5x5.h
>

20 
UI¡8
 
DDR_DATA
 
	gSùpTutC1Modñ_dmaIn0_buf„r
[512 * 512 * 1 ]
ALIGNED
(8);

21 
UI¡8
 
DDR_DATA
 
	gSùpTutC1Modñ_dmaOut1_buf„r
[512 * 512 * 1 ]
ALIGNED
(8);

24 
	$ªadSùpTutC1ModñI≈ut
(
SùpTutC1Modñ
 *
pPl
)

26 
	`sùpRdFûeU8
((
UI¡8
*)
SùpTutC1Modñ_dmaIn0_buf„r
,512 * 512 * 1 * (UInt8),"../../../../../../../resources/lena_512x512_luma.raw");

28 ()(
pPl
);

30 
	}
}

32 
	$wrôeSùpTutC1ModñOuçut
(
SùpTutC1Modñ
 *
pPl
)

34 
	`sùpWrFûeU8
((
UI¡8
*)
SùpTutC1Modñ_dmaOut1_buf„r
,512 * 512 * 1 * (UInt8),"output.raw");

36 ()(
pPl
);

38 
	}
}

40 
	$buûdSùpTutC1Modñ
(
SùpTutC1Modñ
 *
pPl
)

43 
pPl
->
∂
 = 
	`sùpCª©ePùñöe
(0, 7, 
	`SIPP_MBIN
(
mböImgSùp
));

46 
pPl
->
dmaIn0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x00, 512, 512, 
	`N_PL
(1), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

47 
pPl
->
îode5x52
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x00, 512, 512, 
	`N_PL
(1), 
	`SZ
(
UI¡8
), SZ(
Erode5x5P¨am
), 
	`SVU_SYM
(
svuErode5x5
), 0);

48 
pPl
->
dmaOut1
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x00, 512, 512, 
	`N_PL
(1), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

51 
	`sùpLökFûãr
(
pPl
->
îode5x52
,ÖPl->
dmaIn0
, 5,5 );

52 
	`sùpLökFûãr
(
pPl
->
dmaOut1
,ÖPl->
îode5x52
, 1,1 );

54 
	}
}

57 
	$c⁄figSùpTutC1Modñ
(
SùpTutC1Modñ
 *
pPl
)

59 
DmaP¨am
 *
dmaIn0Cfg
 = (DmaP¨am *)
pPl
->
dmaIn0
->
∑øms
;

60 
Erode5x5P¨am
 *
îode5x52Cfg
 = (Erode5x5P¨am *)
pPl
->
îode5x52
->
∑øms
;

61 
DmaP¨am
 *
dmaOut1Cfg
 = (DmaP¨am *)
pPl
->
dmaOut1
->
∑øms
;

66 
îode5x52Cfg
->
eM©
[0](
UI¡8
*)&
dM©
[0];

67 
îode5x52Cfg
->
eM©
[1](
UI¡8
*)&
dM©
[2];

68 
îode5x52Cfg
->
eM©
[2](
UI¡8
*)&
dM©
[4];

69 
îode5x52Cfg
->
eM©
[3](
UI¡8
*)&
dM©
[6];

70 
îode5x52Cfg
->
eM©
[4](
UI¡8
*)&
dM©
[8];

71 
dmaIn0Cfg
->
ddrAddr
 = (
UI¡32
)&
SùpTutC1Modñ_dmaIn0_buf„r
;

72 
dmaOut1Cfg
->
ddrAddr
 = (
UI¡32
)&
SùpTutC1Modñ_dmaOut1_buf„r
;

75 
	}
}

	@Sipp/SippFw/Tutorials/SippTutC1/leon/sippTutC1Model.h

13 #i‚de‡
__SIPPTUTC1MODEL_H__


14 
	#__SIPPTUTC1MODEL_H__


	)

16 
	~<sùp.h
>

17 
	~<sùpTe°Comm⁄.h
>

19 
	~"sùpM©.h
"

23 
UI¡8
 
DDR_DATA
 
SùpTutC1Modñ_dmaIn0_buf„r
[ 512 * 512 * 1 ]
ALIGNED
(8);

24 
UI¡8
 
DDR_DATA
 
SùpTutC1Modñ_dmaOut1_buf„r
[ 512 * 512 * 1 ]
ALIGNED
(8);

28 
	sSùpTutC1Modñ


31 
SùpPùñöe
 *
	m∂
;

34 
SùpFûãr
 *
	mdmaIn0
;

35 
SùpFûãr
 *
	mdmaOut1
;

36 
SùpFûãr
 *
	mîode5x52
;

38 } 
	tSùpTutC1Modñ
;

40 
ªadSùpTutC1ModñI≈ut
(
SùpTutC1Modñ
 *
pPl
);

41 
wrôeSùpTutC1ModñOuçut
(
SùpTutC1Modñ
 *
pPl
);

43 
buûdSùpTutC1Modñ
(
SùpTutC1Modñ
 *
pPl
);

44 
c⁄figSùpTutC1Modñ
(
SùpTutC1Modñ
 *
pPl
);

	@Sipp/SippFw/Tutorials/SippTutC2/leon/app_config.c

13 
	~<ªgi°îsMyrüd.h
>

14 
	~<DrvC¥.h
>

19 #i‚de‡
IPIPE_CLK_CONFIG_SEL


20 
	#ùùeClockC⁄fig
 
ùùeClkC⁄figMV182


	)

22 
	#ùùeClockC⁄fig
 
IPIPE_CLK_CONFIG_SEL


	)

35 
tyAuxClkDividîCfg
 
	gauxClkAŒOn
[] =

37 {0x0FFFFFFF & (~(1<<
CSS_AUX_DDR_CORE
)Ë, 
CLK_SRC_REFCLK0
, 1, 1},

42 
tySocClockC⁄fig
 
	gùùeClkC⁄figMV182
 =

44 .
ªfClk0I≈utKhz
 = 12000,

45 .
	gªfClk1I≈utKhz
 = 0,

46 .
	gèrgëPŒ0FªqKhz
 = 264000,

47 .
	gèrgëPŒ1FªqKhz
 = 0,

48 .
	g˛kSrcPŒ1
 = 
CLK_SRC_REFCLK0
,

49 .
	gma°îClkDivNumî©‹
 = 
DONT_TOUCH_MASTER_DIVIDER
,

50 .
	gma°îClkDivDíomö©‹
 = 
DONT_TOUCH_MASTER_DIVIDER
,

51 .
	gcssDssClockE«bÀMask
 = 0xFFFFFFFFFFFFFFFFULL,

52 .
	gmssClockE«bÀMask
 = 0xFFFFFFFF,

53 .
	gsùpClockE«bÀMask
 = 0xFFFFFFFF,

54 .
	gu∑ClockE«bÀMask
 = 0xFFFFFFFF,

55 .
	gpAuxClkCfg
 = 
auxClkAŒOn
,

67 
	$öôClocksAndMem‹y
()

69 
s32
 
sc
;

70 
sc
 = 
	`DrvC¥Inô
();

71 if(
sc
)

72  
sc
;

73 
sc
 = 
	`DrvC¥SëupClocks
(&
ùùeClockC⁄fig
);

74 if(
sc
)

75  
sc
;

77 
	}
}

	@Sipp/SippFw/Tutorials/SippTutC2/leon/app_config.h

9 #i‚de‡
_APP_CONFIG_H_


10 
	#_APP_CONFIG_H_


	)

16 
öôClocksAndMem‹y
();

	@Sipp/SippFw/Tutorials/SippTutC2/leon/main.c

9 #i‡
deföed
(
SIPP_VCS
)

10 
	~<DrvTimî.h
>

11 
	~<DrvDdr.h
>

12 
	~"swcCrc.h
"

13 
	#EXP_CRC_VALUE
 0x0825CF94

	)

16 
	~"≠p_c⁄fig.h
"

17 
	~"sùpTutC2Modñ.h
"

19 
SùpTutC2Modñ
 
	gmyPl
;

20 
UI¡32
 
	gdM©
[10] = {

28 
	$maö
(
¨gc
, *
¨gv
[])

30 
	`UNUSED
 (
¨gc
);

31 
	`UNUSED
 (
¨gv
);

32 
u32
 
sùpEº‹Log
[
SIPP_ERROR_HISTORY_SIZE
];

34 #i‡
	`deföed
(
SIPP_VCS
)

35 
¸c
 = 0;

38 
	`sùpPœtf‹mInô
();

40 #i‡
	`deföed
(
SIPP_VCS
)

41 
s32
 
sc
;

42 
sc
 = 
	`öôClocksAndMem‹y
();

43 if(
sc
)

44  
sc
;

45 
	`unôTe°Inô
();

46 
	`DrvTimîInô
();

47 
	`DrvDdrInôüli£
(
NULL
);

50 
	`buûdSùpTutC2Modñ
(&
myPl
);

52 i‡(
	`sùpPùeGëEº‹Sètus
 (
myPl
.
∂
))

54 
u32
 
îrNum
;

55 
	`¥ötf
 ("Pipeline creationÉrror\nError codes:\n");

56 
îrNum
 = 
	`sùpGëEº‹Hi°‹y
 (
sùpEº‹Log
);

57 
îrNum
)

59 
	`¥ötf
 ("%08lx\n", 
sùpEº‹Log
[
îrNum
 - 0x1]);

60 
îrNum
--;

64 
	`c⁄figSùpTutC2Modñ
(&
myPl
);

69 
	`ªadSùpTutC2ModñI≈ut
(&
myPl
);

70 
	`sùpPro˚ssFøme
(
myPl
.
∂
);

72 i‡(
	`sùpPùeGëEº‹Sètus
 (
myPl
.
∂
))

74 
u32
 
îrNum
;

75 
	`¥ötf
 ("PipelineÑuntimeÉrror\nError codes:\n");

76 
îrNum
 = 
	`sùpGëEº‹Hi°‹y
 (
sùpEº‹Log
);

77 
îrNum
)

79 
	`¥ötf
 ("%08lx\n", 
sùpEº‹Log
[
îrNum
 - 0x1]);

80 
îrNum
--;

84 
	`wrôeSùpTutC2ModñOuçut
(&
myPl
);

86 #i‡
	`deföed
(
SIPP_VCS
)

87 
¸c
 = 
	`swcCÆcCrc32
(
SùpTutC2Modñ_dmaOut1_buf„r
, 512 * 512, 0);

88 
	`unôTe°Com∑ª
(
¸c
, 
EXP_CRC_VALUE
);

89 
	`unôTe°FöÆRï‹t
();

93 
	}
}

	@Sipp/SippFw/Tutorials/SippTutC2/leon/sippMat.h

7 #i‚de‡
SIPPMAT_H_


8 
	#SIPPMAT_H_


	)

11 
UI¡32
 
dM©
[10];

	@Sipp/SippFw/Tutorials/SippTutC2/leon/sippTutC2Model.c

13 
	~"sùpTutC2Modñ.h
"

15 
	~<ö˛ude/sùpHwDefs.h
>

16 
	~<fûãrs/dû©e5x5/dû©e5x5.h
>

17 
	~<fûãrs/îode5x5/îode5x5.h
>

21 
UI¡8
 
DDR_DATA
 
	gSùpTutC2Modñ_dmaIn0_buf„r
[512 * 512 * 1 ]
ALIGNED
(8);

22 
UI¡8
 
DDR_DATA
 
	gSùpTutC2Modñ_dmaOut1_buf„r
[512 * 512 * 1 ]
ALIGNED
(8);

25 
	$ªadSùpTutC2ModñI≈ut
(
SùpTutC2Modñ
 *
pPl
)

27 
	`sùpRdFûeU8
((
UI¡8
*)
SùpTutC2Modñ_dmaIn0_buf„r
,512 * 512 * 1 * (UInt8),"../../../../../../../resources/lena_512x512_luma.raw");

29 ()(
pPl
);

31 
	}
}

33 
	$wrôeSùpTutC2ModñOuçut
(
SùpTutC2Modñ
 *
pPl
)

35 
	`sùpWrFûeU8
((
UI¡8
*)
SùpTutC2Modñ_dmaOut1_buf„r
,512 * 512 * 1 * (UInt8),"output.raw");

37 ()(
pPl
);

39 
	}
}

41 
	$buûdSùpTutC2Modñ
(
SùpTutC2Modñ
 *
pPl
)

44 
pPl
->
∂
 = 
	`sùpCª©ePùñöe
(0, 7, 
	`SIPP_MBIN
(
mböImgSùp
));

47 
pPl
->
dmaIn0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x00, 512, 512, 
	`N_PL
(1), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

48 
pPl
->
dû©e5x53
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x00, 512, 512, 
	`N_PL
(1), 
	`SZ
(
UI¡8
), SZ(
Dû©e5x5P¨am
), 
	`SVU_SYM
(
svuDû©e5x5
), 0);

49 
pPl
->
îode5x52
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x00, 512, 512, 
	`N_PL
(1), 
	`SZ
(
UI¡8
), SZ(
Erode5x5P¨am
), 
	`SVU_SYM
(
svuErode5x5
), 0);

50 
pPl
->
dmaOut1
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x00, 512, 512, 
	`N_PL
(1), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

53 
	`sùpLökFûãr
(
pPl
->
dû©e5x53
,ÖPl->
dmaIn0
, 5,5 );

54 
	`sùpLökFûãr
(
pPl
->
îode5x52
,ÖPl->
dû©e5x53
, 5,5 );

55 
	`sùpLökFûãr
(
pPl
->
dmaOut1
,ÖPl->
îode5x52
, 1,1 );

57 
	}
}

60 
	$c⁄figSùpTutC2Modñ
(
SùpTutC2Modñ
 *
pPl
)

62 
DmaP¨am
 *
dmaIn0Cfg
 = (DmaP¨am *)
pPl
->
dmaIn0
->
∑øms
;

63 
Dû©e5x5P¨am
 *
dû©e5x53Cfg
 = (Dû©e5x5P¨am *)
pPl
->
dû©e5x53
->
∑øms
;

64 
Erode5x5P¨am
 *
îode5x52Cfg
 = (Erode5x5P¨am *)
pPl
->
îode5x52
->
∑øms
;

65 
DmaP¨am
 *
dmaOut1Cfg
 = (DmaP¨am *)
pPl
->
dmaOut1
->
∑øms
;

70 
dû©e5x53Cfg
->
dM©
[0](
UI¡8
*)&dMat[0];

71 
dû©e5x53Cfg
->
dM©
[1](
UI¡8
*)&dMat[2];

72 
dû©e5x53Cfg
->
dM©
[2](
UI¡8
*)&dMat[4];

73 
dû©e5x53Cfg
->
dM©
[3](
UI¡8
*)&dMat[6];

74 
dû©e5x53Cfg
->
dM©
[4](
UI¡8
*)&dMat[8];

75 
îode5x52Cfg
->
eM©
[0](
UI¡8
*)&
dM©
[0];

76 
îode5x52Cfg
->
eM©
[1](
UI¡8
*)&
dM©
[2];

77 
îode5x52Cfg
->
eM©
[2](
UI¡8
*)&
dM©
[4];

78 
îode5x52Cfg
->
eM©
[3](
UI¡8
*)&
dM©
[6];

79 
îode5x52Cfg
->
eM©
[4](
UI¡8
*)&
dM©
[8];

80 
dmaIn0Cfg
->
ddrAddr
 = (
UI¡32
)&
SùpTutC2Modñ_dmaIn0_buf„r
;

81 
dmaOut1Cfg
->
ddrAddr
 = (
UI¡32
)&
SùpTutC2Modñ_dmaOut1_buf„r
;

84 
	}
}

	@Sipp/SippFw/Tutorials/SippTutC2/leon/sippTutC2Model.h

13 #i‚de‡
__SIPPTUTC2MODEL_H__


14 
	#__SIPPTUTC2MODEL_H__


	)

16 
	~<sùp.h
>

17 
	~<sùpTe°Comm⁄.h
>

19 
	~"sùpM©.h
"

23 
UI¡8
 
DDR_DATA
 
SùpTutC2Modñ_dmaIn0_buf„r
[ 512 * 512 * 1 ]
ALIGNED
(8);

24 
UI¡8
 
DDR_DATA
 
SùpTutC2Modñ_dmaOut1_buf„r
[ 512 * 512 * 1 ]
ALIGNED
(8);

28 
	sSùpTutC2Modñ


31 
SùpPùñöe
 *
	m∂
;

34 
SùpFûãr
 *
	mdmaIn0
;

35 
SùpFûãr
 *
	mdmaOut1
;

36 
SùpFûãr
 *
	mîode5x52
;

37 
SùpFûãr
 *
	mdû©e5x53
;

39 } 
	tSùpTutC2Modñ
;

41 
ªadSùpTutC2ModñI≈ut
(
SùpTutC2Modñ
 *
pPl
);

42 
wrôeSùpTutC2ModñOuçut
(
SùpTutC2Modñ
 *
pPl
);

44 
buûdSùpTutC2Modñ
(
SùpTutC2Modñ
 *
pPl
);

45 
c⁄figSùpTutC2Modñ
(
SùpTutC2Modñ
 *
pPl
);

	@Sipp/SippFw/Tutorials/SippTutC3/leon/app_config.c

13 
	~<ªgi°îsMyrüd.h
>

14 
	~<DrvC¥.h
>

19 #i‚de‡
IPIPE_CLK_CONFIG_SEL


20 
	#ùùeClockC⁄fig
 
ùùeClkC⁄figMV182


	)

22 
	#ùùeClockC⁄fig
 
IPIPE_CLK_CONFIG_SEL


	)

35 
tyAuxClkDividîCfg
 
	gauxClkAŒOn
[] =

37 {0x0FFFFFFF & (~(1<<
CSS_AUX_DDR_CORE
)Ë, 
CLK_SRC_REFCLK0
, 1, 1},

42 
tySocClockC⁄fig
 
	gùùeClkC⁄figMV182
 =

44 .
ªfClk0I≈utKhz
 = 12000,

45 .
	gªfClk1I≈utKhz
 = 0,

46 .
	gèrgëPŒ0FªqKhz
 = 264000,

47 .
	gèrgëPŒ1FªqKhz
 = 0,

48 .
	g˛kSrcPŒ1
 = 
CLK_SRC_REFCLK0
,

49 .
	gma°îClkDivNumî©‹
 = 
DONT_TOUCH_MASTER_DIVIDER
,

50 .
	gma°îClkDivDíomö©‹
 = 
DONT_TOUCH_MASTER_DIVIDER
,

51 .
	gcssDssClockE«bÀMask
 = 0xFFFFFFFFFFFFFFFFULL,

52 .
	gmssClockE«bÀMask
 = 0xFFFFFFFF,

53 .
	gsùpClockE«bÀMask
 = 0xFFFFFFFF,

54 .
	gu∑ClockE«bÀMask
 = 0xFFFFFFFF,

55 .
	gpAuxClkCfg
 = 
auxClkAŒOn
,

67 
	$öôClocksAndMem‹y
()

69 
s32
 
sc
;

70 
sc
 = 
	`DrvC¥Inô
();

71 if(
sc
)

72  
sc
;

73 
sc
 = 
	`DrvC¥SëupClocks
(&
ùùeClockC⁄fig
);

74 if(
sc
)

75  
sc
;

77 
	}
}

	@Sipp/SippFw/Tutorials/SippTutC3/leon/app_config.h

9 #i‚de‡
_APP_CONFIG_H_


10 
	#_APP_CONFIG_H_


	)

16 
öôClocksAndMem‹y
();

	@Sipp/SippFw/Tutorials/SippTutC3/leon/main.c

9 #i‡
deföed
(
SIPP_VCS
)

10 
	~<DrvTimî.h
>

11 
	~<DrvDdr.h
>

12 
	~"swcCrc.h
"

13 
	#EXP_CRC_VALUE
 0x44785535

	)

16 
	~"≠p_c⁄fig.h
"

17 
	~"sùpTutC3Modñ.h
"

19 
SùpTutC3Modñ
 
	gmyPl
;

20 
UI¡32
 
	gdM©
[10] = {

28 
	$maö
(
¨gc
, *
¨gv
[])

30 
	`UNUSED
 (
¨gc
);

31 
	`UNUSED
 (
¨gv
);

32 
u32
 
sùpEº‹Log
[
SIPP_ERROR_HISTORY_SIZE
];

34 #i‡
	`deföed
(
SIPP_VCS
)

35 
¸c
 = 0;

38 
	`sùpPœtf‹mInô
();

40 #i‡
	`deföed
(
SIPP_VCS
)

41 
s32
 
sc
;

42 
sc
 = 
	`öôClocksAndMem‹y
();

43 if(
sc
)

44  
sc
;

45 
	`unôTe°Inô
();

46 
	`DrvTimîInô
();

47 
	`DrvDdrInôüli£
(
NULL
);

50 
	`buûdSùpTutC3Modñ
(&
myPl
);

52 i‡(
	`sùpPùeGëEº‹Sètus
 (
myPl
.
∂
))

54 
u32
 
îrNum
;

55 
	`¥ötf
 ("Pipeline creationÉrror\nError codes:\n");

56 
îrNum
 = 
	`sùpGëEº‹Hi°‹y
 (
sùpEº‹Log
);

57 
îrNum
)

59 
	`¥ötf
 ("%08lx\n", 
sùpEº‹Log
[
îrNum
 - 0x1]);

60 
îrNum
--;

64 
	`c⁄figSùpTutC3Modñ
(&
myPl
);

69 
	`ªadSùpTutC3ModñI≈ut
(&
myPl
);

70 
	`sùpPro˚ssFøme
(
myPl
.
∂
);

72 i‡(
	`sùpPùeGëEº‹Sètus
 (
myPl
.
∂
))

74 
u32
 
îrNum
;

75 
	`¥ötf
 ("PipelineÑuntimeÉrror\nError codes:\n");

76 
îrNum
 = 
	`sùpGëEº‹Hi°‹y
 (
sùpEº‹Log
);

77 
îrNum
)

79 
	`¥ötf
 ("%08lx\n", 
sùpEº‹Log
[
îrNum
 - 0x1]);

80 
îrNum
--;

84 
	`wrôeSùpTutC3ModñOuçut
(&
myPl
);

86 #i‡
	`deföed
(
SIPP_VCS
)

87 
¸c
 = 
	`swcCÆcCrc32
(
SùpTutC3Modñ_dmaOut1_buf„r
, 512 * 512, 0);

88 
	`unôTe°Com∑ª
(
¸c
, 
EXP_CRC_VALUE
);

89 
	`unôTe°FöÆRï‹t
();

93 
	}
}

	@Sipp/SippFw/Tutorials/SippTutC3/leon/sippMat.h

7 #i‚de‡
SIPPMAT_H_


8 
	#SIPPMAT_H_


	)

11 
UI¡32
 
dM©
[10];

	@Sipp/SippFw/Tutorials/SippTutC3/leon/sippTutC3Model.c

13 
	~"sùpTutC3Modñ.h
"

15 
	~<ö˛ude/sùpHwDefs.h
>

16 
	~<fûãrs/îode5x5/îode5x5.h
>

17 
	~<fûãrs/dû©e5x5/dû©e5x5.h
>

21 
UI¡8
 
DDR_DATA
 
	gSùpTutC3Modñ_dmaIn0_buf„r
[512 * 512 * 1 ]
ALIGNED
(8);

22 
UI¡8
 
DDR_DATA
 
	gSùpTutC3Modñ_dmaOut1_buf„r
[512 * 512 * 1 ]
ALIGNED
(8);

25 
	$ªadSùpTutC3ModñI≈ut
(
SùpTutC3Modñ
 *
pPl
)

27 
	`sùpRdFûeU8
((
UI¡8
*)
SùpTutC3Modñ_dmaIn0_buf„r
,512 * 512 * 1 * (UInt8),"../../../../../../../resources/lena_512x512_luma.raw");

29 ()(
pPl
);

31 
	}
}

33 
	$wrôeSùpTutC3ModñOuçut
(
SùpTutC3Modñ
 *
pPl
)

35 
	`sùpWrFûeU8
((
UI¡8
*)
SùpTutC3Modñ_dmaOut1_buf„r
,512 * 512 * 1 * (UInt8),"output.raw");

37 ()(
pPl
);

39 
	}
}

41 
	$buûdSùpTutC3Modñ
(
SùpTutC3Modñ
 *
pPl
)

44 
pPl
->
∂
 = 
	`sùpCª©ePùñöe
(0, 7, 
	`SIPP_MBIN
(
mböImgSùp
));

47 
pPl
->
dmaIn0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x00, 512, 512, 
	`N_PL
(1), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

48 
pPl
->
îode5x52
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x00, 512, 512, 
	`N_PL
(1), 
	`SZ
(
UI¡8
), SZ(
Erode5x5P¨am
), 
	`SVU_SYM
(
svuErode5x5
), 0);

49 
pPl
->
dû©e5x53
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x00, 512, 512, 
	`N_PL
(1), 
	`SZ
(
UI¡8
), SZ(
Dû©e5x5P¨am
), 
	`SVU_SYM
(
svuDû©e5x5
), 0);

50 
pPl
->
dmaOut1
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x00, 512, 512, 
	`N_PL
(1), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

53 
	`sùpLökFûãr
(
pPl
->
îode5x52
,ÖPl->
dmaIn0
, 5,5 );

54 
	`sùpLökFûãr
(
pPl
->
dû©e5x53
,ÖPl->
îode5x52
, 5,5 );

55 
	`sùpLökFûãr
(
pPl
->
dmaOut1
,ÖPl->
dû©e5x53
, 1,1 );

57 
	}
}

60 
	$c⁄figSùpTutC3Modñ
(
SùpTutC3Modñ
 *
pPl
)

62 
DmaP¨am
 *
dmaIn0Cfg
 = (DmaP¨am *)
pPl
->
dmaIn0
->
∑øms
;

63 
Erode5x5P¨am
 *
îode5x52Cfg
 = (Erode5x5P¨am *)
pPl
->
îode5x52
->
∑øms
;

64 
Dû©e5x5P¨am
 *
dû©e5x53Cfg
 = (Dû©e5x5P¨am *)
pPl
->
dû©e5x53
->
∑øms
;

65 
DmaP¨am
 *
dmaOut1Cfg
 = (DmaP¨am *)
pPl
->
dmaOut1
->
∑øms
;

70 
îode5x52Cfg
->
eM©
[0](
UI¡8
*)&
dM©
[0];

71 
îode5x52Cfg
->
eM©
[1](
UI¡8
*)&
dM©
[2];

72 
îode5x52Cfg
->
eM©
[2](
UI¡8
*)&
dM©
[4];

73 
îode5x52Cfg
->
eM©
[3](
UI¡8
*)&
dM©
[6];

74 
îode5x52Cfg
->
eM©
[4](
UI¡8
*)&
dM©
[8];

75 
dû©e5x53Cfg
->
dM©
[0](
UI¡8
*)&dMat[0];

76 
dû©e5x53Cfg
->
dM©
[1](
UI¡8
*)&dMat[2];

77 
dû©e5x53Cfg
->
dM©
[2](
UI¡8
*)&dMat[4];

78 
dû©e5x53Cfg
->
dM©
[3](
UI¡8
*)&dMat[6];

79 
dû©e5x53Cfg
->
dM©
[4](
UI¡8
*)&dMat[8];

80 
dmaIn0Cfg
->
ddrAddr
 = (
UI¡32
)&
SùpTutC3Modñ_dmaIn0_buf„r
;

81 
dmaOut1Cfg
->
ddrAddr
 = (
UI¡32
)&
SùpTutC3Modñ_dmaOut1_buf„r
;

84 
	}
}

	@Sipp/SippFw/Tutorials/SippTutC3/leon/sippTutC3Model.h

13 #i‚de‡
__SIPPTUTC3MODEL_H__


14 
	#__SIPPTUTC3MODEL_H__


	)

16 
	~<sùp.h
>

17 
	~<sùpTe°Comm⁄.h
>

19 
	~"sùpM©.h
"

23 
UI¡8
 
DDR_DATA
 
SùpTutC3Modñ_dmaIn0_buf„r
[ 512 * 512 * 1 ]
ALIGNED
(8);

24 
UI¡8
 
DDR_DATA
 
SùpTutC3Modñ_dmaOut1_buf„r
[ 512 * 512 * 1 ]
ALIGNED
(8);

28 
	sSùpTutC3Modñ


31 
SùpPùñöe
 *
	m∂
;

34 
SùpFûãr
 *
	mdmaIn0
;

35 
SùpFûãr
 *
	mdmaOut1
;

36 
SùpFûãr
 *
	mîode5x52
;

37 
SùpFûãr
 *
	mdû©e5x53
;

39 } 
	tSùpTutC3Modñ
;

41 
ªadSùpTutC3ModñI≈ut
(
SùpTutC3Modñ
 *
pPl
);

42 
wrôeSùpTutC3ModñOuçut
(
SùpTutC3Modñ
 *
pPl
);

44 
buûdSùpTutC3Modñ
(
SùpTutC3Modñ
 *
pPl
);

45 
c⁄figSùpTutC3Modñ
(
SùpTutC3Modñ
 *
pPl
);

	@Sipp/SippFw/Tutorials/SippTutD0/leon/app_config.c

13 
	~<ªgi°îsMyrüd.h
>

14 
	~<DrvC¥.h
>

19 #i‚de‡
IPIPE_CLK_CONFIG_SEL


20 
	#ùùeClockC⁄fig
 
ùùeClkC⁄figMV182


	)

22 
	#ùùeClockC⁄fig
 
IPIPE_CLK_CONFIG_SEL


	)

35 
tyAuxClkDividîCfg
 
	gauxClkAŒOn
[] =

37 {0x0FFFFFFF & (~(1<<
CSS_AUX_DDR_CORE
)Ë, 
CLK_SRC_REFCLK0
, 1, 1},

42 
tySocClockC⁄fig
 
	gùùeClkC⁄figMV182
 =

44 .
ªfClk0I≈utKhz
 = 12000,

45 .
	gªfClk1I≈utKhz
 = 0,

46 .
	gèrgëPŒ0FªqKhz
 = 264000,

47 .
	gèrgëPŒ1FªqKhz
 = 0,

48 .
	g˛kSrcPŒ1
 = 
CLK_SRC_REFCLK0
,

49 .
	gma°îClkDivNumî©‹
 = 
DONT_TOUCH_MASTER_DIVIDER
,

50 .
	gma°îClkDivDíomö©‹
 = 
DONT_TOUCH_MASTER_DIVIDER
,

51 .
	gcssDssClockE«bÀMask
 = 0xFFFFFFFFFFFFFFFFULL,

52 .
	gmssClockE«bÀMask
 = 0xFFFFFFFF,

53 .
	gsùpClockE«bÀMask
 = 0xFFFFFFFF,

54 .
	gu∑ClockE«bÀMask
 = 0xFFFFFFFF,

55 .
	gpAuxClkCfg
 = 
auxClkAŒOn
,

67 
	$öôClocksAndMem‹y
()

69 
s32
 
sc
;

70 
sc
 = 
	`DrvC¥Inô
();

71 if(
sc
)

72  
sc
;

73 
sc
 = 
	`DrvC¥SëupClocks
(&
ùùeClockC⁄fig
);

74 if(
sc
)

75  
sc
;

77 
	}
}

	@Sipp/SippFw/Tutorials/SippTutD0/leon/app_config.h

9 #i‚de‡
_APP_CONFIG_H_


10 
	#_APP_CONFIG_H_


	)

16 
öôClocksAndMem‹y
();

	@Sipp/SippFw/Tutorials/SippTutD0/leon/main.c

9 #i‡
deföed
(
SIPP_VCS
)

10 
	~<DrvTimî.h
>

11 
	~<DrvDdr.h
>

12 
	~"swcCrc.h
"

13 
	#EXP_CRC_VALUE
 0x9AAAA35F

	)

16 
	~"≠p_c⁄fig.h
"

17 
	~"sùpTutD0Modñ.h
"

19 
SùpTutD0Modñ
 
	gmyPl
;

21 
	$maö
(
¨gc
, *
¨gv
[])

23 
	`UNUSED
 (
¨gc
);

24 
	`UNUSED
 (
¨gv
);

25 
u32
 
sùpEº‹Log
[
SIPP_ERROR_HISTORY_SIZE
];

27 #i‡
	`deföed
(
SIPP_VCS
)

28 
¸c
 = 0;

31 
	`sùpPœtf‹mInô
();

33 #i‡
	`deföed
(
SIPP_VCS
)

34 
s32
 
sc
;

35 
sc
 = 
	`öôClocksAndMem‹y
();

36 if(
sc
)

37  
sc
;

38 
	`unôTe°Inô
();

39 
	`DrvTimîInô
();

40 
	`DrvDdrInôüli£
(
NULL
);

43 
	`buûdSùpTutD0Modñ
(&
myPl
);

45 i‡(
	`sùpPùeGëEº‹Sètus
 (
myPl
.
∂
))

47 
u32
 
îrNum
;

48 
	`¥ötf
 ("Pipeline creationÉrror\nError codes:\n");

49 
îrNum
 = 
	`sùpGëEº‹Hi°‹y
 (
sùpEº‹Log
);

50 
îrNum
)

52 
	`¥ötf
 ("%08lx\n", 
sùpEº‹Log
[
îrNum
 - 0x1]);

53 
îrNum
--;

57 
	`c⁄figSùpTutD0Modñ
(&
myPl
);

62 
	`ªadSùpTutD0ModñI≈ut
(&
myPl
);

63 
	`sùpPro˚ssFøme
(
myPl
.
∂
);

65 i‡(
	`sùpPùeGëEº‹Sètus
 (
myPl
.
∂
))

67 
u32
 
îrNum
;

68 
	`¥ötf
 ("PipelineÑuntimeÉrror\nError codes:\n");

69 
îrNum
 = 
	`sùpGëEº‹Hi°‹y
 (
sùpEº‹Log
);

70 
îrNum
)

72 
	`¥ötf
 ("%08lx\n", 
sùpEº‹Log
[
îrNum
 - 0x1]);

73 
îrNum
--;

77 
	`wrôeSùpTutD0ModñOuçut
(&
myPl
);

79 #i‡
	`deföed
(
SIPP_VCS
)

80 
¸c
 = 
	`swcCÆcCrc32
(
SùpTutD0Modñ_dmaOut1_buf„r
, 512 * 512, 0);

81 
	`unôTe°Com∑ª
(
¸c
, 
EXP_CRC_VALUE
);

82 
	`unôTe°FöÆRï‹t
();

86 
	}
}

	@Sipp/SippFw/Tutorials/SippTutD0/leon/sippTutD0Model.c

13 
	~"sùpTutD0Modñ.h
"

15 
	~<ö˛ude/sùpHwDefs.h
>

16 
	~<fûãrs/c⁄v5x5/c⁄v5x5.h
>

17 
	~<fûãrs/absdiff/absdiff.h
>

18 
	~<fûãrs/¨ôhmëicAdd/¨ôhmëicAdd.h
>

22 
UI¡8
 
DDR_DATA
 
	gSùpTutD0Modñ_dmaIn0_buf„r
[512 * 512 * 1 ]
ALIGNED
(8);

23 
UI¡8
 
DDR_DATA
 
	gSùpTutD0Modñ_dmaOut1_buf„r
[512 * 512 * 1 ]
ALIGNED
(8);

26 
	$ªadSùpTutD0ModñI≈ut
(
SùpTutD0Modñ
 *
pPl
)

28 
	`sùpRdFûeU8
((
UI¡8
*)
SùpTutD0Modñ_dmaIn0_buf„r
,512 * 512 * 1 * (UInt8),"../../../../../../../resources/lena_512x512_luma.raw");

30 ()(
pPl
);

32 
	}
}

34 
	$wrôeSùpTutD0ModñOuçut
(
SùpTutD0Modñ
 *
pPl
)

36 
	`sùpWrFûeU8
((
UI¡8
*)
SùpTutD0Modñ_dmaOut1_buf„r
,512 * 512 * 1 * (UInt8),"output.raw");

38 ()(
pPl
);

40 
	}
}

42 
	$buûdSùpTutD0Modñ
(
SùpTutD0Modñ
 *
pPl
)

45 
pPl
->
∂
 = 
	`sùpCª©ePùñöe
(0, 7, 
	`SIPP_MBIN
(
mböImgSùp
));

48 
pPl
->
dmaIn0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x00, 512, 512, 
	`N_PL
(1), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

49 
pPl
->
c⁄v5x54
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x00, 512, 512, 
	`N_PL
(1), 
	`SZ
(
UI¡8
), SZ(
C⁄v5x5P¨am
), 
	`SVU_SYM
(
svuC⁄v5x5
), 0);

50 
pPl
->
absdiff0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x0, 512, 512, 
	`N_PL
(1), 
	`SZ
(
UI¡8
), 0, 
	`SVU_SYM
(
svuAbsdiff
), 0);

51 
pPl
->
¨ôhmëicAdd4
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x00, 512, 512, 
	`N_PL
(1), 
	`SZ
(
UI¡8
), 0, 
	`SVU_SYM
(
svuArôhmëicAdd
), 0);

52 
pPl
->
dmaOut1
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x00, 512, 512, 
	`N_PL
(1), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

55 
	`sùpLökFûãr
(
pPl
->
c⁄v5x54
,ÖPl->
dmaIn0
, 5,5 );

56 
	`sùpLökFûãr
(
pPl
->
absdiff0
,ÖPl->
dmaIn0
, 1,1 );

57 
	`sùpLökFûãr
(
pPl
->
absdiff0
,ÖPl->
c⁄v5x54
, 1,1 );

58 
	`sùpLökFûãr
(
pPl
->
¨ôhmëicAdd4
,ÖPl->
dmaIn0
, 1,1 );

59 
	`sùpLökFûãr
(
pPl
->
¨ôhmëicAdd4
,ÖPl->
absdiff0
, 1,1 );

60 
	`sùpLökFûãr
(
pPl
->
dmaOut1
,ÖPl->
¨ôhmëicAdd4
, 1,1 );

62 
	}
}

64 
UI¡16
 
	gc⁄v5x54Cfg_cM©
[25];

66 
	$c⁄figSùpTutD0Modñ
(
SùpTutD0Modñ
 *
pPl
)

68 
DmaP¨am
 *
dmaIn0Cfg
 = (DmaP¨am *)
pPl
->
dmaIn0
->
∑øms
;

69 
C⁄v5x5P¨am
 *
c⁄v5x54Cfg
 = (C⁄v5x5P¨am *)
pPl
->
c⁄v5x54
->
∑øms
;

70 
DmaP¨am
 *
dmaOut1Cfg
 = (DmaP¨am *)
pPl
->
dmaOut1
->
∑øms
;

75 
c⁄v5x54Cfg
->
cM©

c⁄v5x54Cfg_cM©
;

76 
c⁄v5x54Cfg
->
cM©
[0]= 0x291f;

77 
c⁄v5x54Cfg
->
cM©
[1]= 0x291f;

78 
c⁄v5x54Cfg
->
cM©
[2]= 0x291f;

79 
c⁄v5x54Cfg
->
cM©
[3]= 0x291f;

80 
c⁄v5x54Cfg
->
cM©
[4]= 0x291f;

81 
c⁄v5x54Cfg
->
cM©
[5]= 0x291f;

82 
c⁄v5x54Cfg
->
cM©
[6]= 0x291f;

83 
c⁄v5x54Cfg
->
cM©
[7]= 0x291f;

84 
c⁄v5x54Cfg
->
cM©
[8]= 0x291f;

85 
c⁄v5x54Cfg
->
cM©
[9]= 0x291f;

86 
c⁄v5x54Cfg
->
cM©
[10]= 0x291f;

87 
c⁄v5x54Cfg
->
cM©
[11]= 0x291f;

88 
c⁄v5x54Cfg
->
cM©
[12]= 0x291f;

89 
c⁄v5x54Cfg
->
cM©
[13]= 0x291f;

90 
c⁄v5x54Cfg
->
cM©
[14]= 0x291f;

91 
c⁄v5x54Cfg
->
cM©
[15]= 0x291f;

92 
c⁄v5x54Cfg
->
cM©
[16]= 0x291f;

93 
c⁄v5x54Cfg
->
cM©
[17]= 0x291f;

94 
c⁄v5x54Cfg
->
cM©
[18]= 0x291f;

95 
c⁄v5x54Cfg
->
cM©
[19]= 0x291f;

96 
c⁄v5x54Cfg
->
cM©
[20]= 0x291f;

97 
c⁄v5x54Cfg
->
cM©
[21]= 0x291f;

98 
c⁄v5x54Cfg
->
cM©
[22]= 0x291f;

99 
c⁄v5x54Cfg
->
cM©
[23]= 0x291f;

100 
c⁄v5x54Cfg
->
cM©
[24]= 0x291f;

101 
dmaIn0Cfg
->
ddrAddr
 = (
UI¡32
)&
SùpTutD0Modñ_dmaIn0_buf„r
;

102 
dmaOut1Cfg
->
ddrAddr
 = (
UI¡32
)&
SùpTutD0Modñ_dmaOut1_buf„r
;

105 
	}
}

	@Sipp/SippFw/Tutorials/SippTutD0/leon/sippTutD0Model.h

13 #i‚de‡
__SIPPTUTD0MODEL_H__


14 
	#__SIPPTUTD0MODEL_H__


	)

16 
	~<sùp.h
>

17 
	~<sùpTe°Comm⁄.h
>

22 
UI¡8
 
DDR_DATA
 
SùpTutD0Modñ_dmaIn0_buf„r
[ 512 * 512 * 1 ]
ALIGNED
(8);

23 
UI¡8
 
DDR_DATA
 
SùpTutD0Modñ_dmaOut1_buf„r
[ 512 * 512 * 1 ]
ALIGNED
(8);

27 
	sSùpTutD0Modñ


30 
SùpPùñöe
 *
	m∂
;

33 
SùpFûãr
 *
	mdmaIn0
;

34 
SùpFûãr
 *
	mdmaOut1
;

35 
SùpFûãr
 *
	m¨ôhmëicAdd4
;

36 
SùpFûãr
 *
	mc⁄v5x54
;

37 
SùpFûãr
 *
	mabsdiff0
;

39 } 
	tSùpTutD0Modñ
;

41 
ªadSùpTutD0ModñI≈ut
(
SùpTutD0Modñ
 *
pPl
);

42 
wrôeSùpTutD0ModñOuçut
(
SùpTutD0Modñ
 *
pPl
);

44 
buûdSùpTutD0Modñ
(
SùpTutD0Modñ
 *
pPl
);

45 
c⁄figSùpTutD0Modñ
(
SùpTutD0Modñ
 *
pPl
);

	@Sipp/SippFw/Tutorials/SippTutD1/leon/app_config.c

13 
	~<ªgi°îsMyrüd.h
>

14 
	~<DrvC¥.h
>

19 #i‚de‡
IPIPE_CLK_CONFIG_SEL


20 
	#ùùeClockC⁄fig
 
ùùeClkC⁄figMV182


	)

22 
	#ùùeClockC⁄fig
 
IPIPE_CLK_CONFIG_SEL


	)

35 
tyAuxClkDividîCfg
 
	gauxClkAŒOn
[] =

37 {0x0FFFFFFF & (~(1<<
CSS_AUX_DDR_CORE
)Ë, 
CLK_SRC_REFCLK0
, 1, 1},

42 
tySocClockC⁄fig
 
	gùùeClkC⁄figMV182
 =

44 .
ªfClk0I≈utKhz
 = 12000,

45 .
	gªfClk1I≈utKhz
 = 0,

46 .
	gèrgëPŒ0FªqKhz
 = 264000,

47 .
	gèrgëPŒ1FªqKhz
 = 0,

48 .
	g˛kSrcPŒ1
 = 
CLK_SRC_REFCLK0
,

49 .
	gma°îClkDivNumî©‹
 = 
DONT_TOUCH_MASTER_DIVIDER
,

50 .
	gma°îClkDivDíomö©‹
 = 
DONT_TOUCH_MASTER_DIVIDER
,

51 .
	gcssDssClockE«bÀMask
 = 0xFFFFFFFFFFFFFFFFULL,

52 .
	gmssClockE«bÀMask
 = 0xFFFFFFFF,

53 .
	gsùpClockE«bÀMask
 = 0xFFFFFFFF,

54 .
	gu∑ClockE«bÀMask
 = 0xFFFFFFFF,

55 .
	gpAuxClkCfg
 = 
auxClkAŒOn
,

67 
	$öôClocksAndMem‹y
()

69 
s32
 
sc
;

70 
sc
 = 
	`DrvC¥Inô
();

71 if(
sc
)

72  
sc
;

73 
sc
 = 
	`DrvC¥SëupClocks
(&
ùùeClockC⁄fig
);

74 if(
sc
)

75  
sc
;

77 
	}
}

	@Sipp/SippFw/Tutorials/SippTutD1/leon/app_config.h

9 #i‚de‡
_APP_CONFIG_H_


10 
	#_APP_CONFIG_H_


	)

16 
öôClocksAndMem‹y
();

	@Sipp/SippFw/Tutorials/SippTutD1/leon/main.c

9 #i‡
deföed
(
SIPP_VCS
)

10 
	~<DrvTimî.h
>

11 
	~<DrvDdr.h
>

12 
	~"swcCrc.h
"

13 
	#EXP_CRC_VALUE
 0xE3B141BB

	)

16 
	~"≠p_c⁄fig.h
"

17 
	~"sùpTutD1Modñ.h
"

19 
SùpTutD1Modñ
 
	gmyPl
;

21 
	$maö
(
¨gc
, *
¨gv
[])

23 
	`UNUSED
 (
¨gc
);

24 
	`UNUSED
 (
¨gv
);

25 
u32
 
sùpEº‹Log
[
SIPP_ERROR_HISTORY_SIZE
];

27 #i‡
	`deföed
(
SIPP_VCS
)

28 
¸c
 = 0;

31 
	`sùpPœtf‹mInô
();

33 #i‡
	`deföed
(
SIPP_VCS
)

34 
s32
 
sc
;

35 
sc
 = 
	`öôClocksAndMem‹y
();

36 if(
sc
)

37  
sc
;

38 
	`unôTe°Inô
();

39 
	`DrvTimîInô
();

40 
	`DrvDdrInôüli£
(
NULL
);

43 
	`buûdSùpTutD1Modñ
(&
myPl
);

45 i‡(
	`sùpPùeGëEº‹Sètus
 (
myPl
.
∂
))

47 
u32
 
îrNum
;

48 
	`¥ötf
 ("Pipeline creationÉrror\nError codes:\n");

49 
îrNum
 = 
	`sùpGëEº‹Hi°‹y
 (
sùpEº‹Log
);

50 
îrNum
)

52 
	`¥ötf
 ("%08lx\n", 
sùpEº‹Log
[
îrNum
 - 0x1]);

53 
îrNum
--;

57 
	`c⁄figSùpTutD1Modñ
(&
myPl
);

62 
	`ªadSùpTutD1ModñI≈ut
(&
myPl
);

63 
	`sùpPro˚ssFøme
(
myPl
.
∂
);

65 i‡(
	`sùpPùeGëEº‹Sètus
 (
myPl
.
∂
))

67 
u32
 
îrNum
;

68 
	`¥ötf
 ("PipelineÑuntimeÉrror\nError codes:\n");

69 
îrNum
 = 
	`sùpGëEº‹Hi°‹y
 (
sùpEº‹Log
);

70 
îrNum
)

72 
	`¥ötf
 ("%08lx\n", 
sùpEº‹Log
[
îrNum
 - 0x1]);

73 
îrNum
--;

77 
	`wrôeSùpTutD1ModñOuçut
(&
myPl
);

79 #i‡
	`deföed
(
SIPP_VCS
)

80 
¸c
 = 
	`swcCÆcCrc32
(
SùpTutD1Modñ_dmaOut1_buf„r
, 256 * 256, 0);

81 
	`unôTe°Com∑ª
(
¸c
, 
EXP_CRC_VALUE
);

82 
	`unôTe°FöÆRï‹t
();

86 
	}
}

	@Sipp/SippFw/Tutorials/SippTutD1/leon/sippTutD1Model.c

13 
	~"sùpTutD1Modñ.h
"

15 
	~<ö˛ude/sùpHwDefs.h
>

16 
	~<fûãrs/sˇÀ05bûöHV/sˇÀ05BûöHV.h
>

20 
UI¡8
 
DDR_DATA
 
	gSùpTutD1Modñ_dmaIn0_buf„r
[512 * 512 * 1 ]
ALIGNED
(8);

21 
UI¡8
 
DDR_DATA
 
	gSùpTutD1Modñ_dmaOut1_buf„r
[256 * 256 * 1 ]
ALIGNED
(8);

24 
	$ªadSùpTutD1ModñI≈ut
(
SùpTutD1Modñ
 *
pPl
)

26 
	`sùpRdFûeU8
((
UI¡8
*)
SùpTutD1Modñ_dmaIn0_buf„r
,512 * 512 * 1 * (UInt8),"../../../../../../../resources/lena_512x512_luma.raw");

28 ()(
pPl
);

30 
	}
}

32 
	$wrôeSùpTutD1ModñOuçut
(
SùpTutD1Modñ
 *
pPl
)

34 
	`sùpWrFûeU8
((
UI¡8
*)
SùpTutD1Modñ_dmaOut1_buf„r
,256 * 256 * 1 * (UInt8),"output.raw");

36 ()(
pPl
);

38 
	}
}

40 
	$buûdSùpTutD1Modñ
(
SùpTutD1Modñ
 *
pPl
)

43 
pPl
->
∂
 = 
	`sùpCª©ePùñöe
(0, 7, 
	`SIPP_MBIN
(
mböImgSùp
));

46 
pPl
->
dmaIn0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x00, 512, 512, 
	`N_PL
(1), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

47 
pPl
->
sˇÀ05BûöHV2
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 
SIPP_RESIZE
, 256, 256, 
	`N_PL
(1), 
	`SZ
(
UI¡8
), 0, 
	`SVU_SYM
(
svuS˛05BûöHV
), 0);

48 
pPl
->
dmaOut1
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x00, 256, 256, 
	`N_PL
(1), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

51 
	`sùpLökFûãr
(
pPl
->
sˇÀ05BûöHV2
,ÖPl->
dmaIn0
, 2,2 );

52 
	`sùpLökFûãr
(
pPl
->
dmaOut1
,ÖPl->
sˇÀ05BûöHV2
, 1,1 );

54 
	}
}

57 
	$c⁄figSùpTutD1Modñ
(
SùpTutD1Modñ
 *
pPl
)

59 
DmaP¨am
 *
dmaIn0Cfg
 = (DmaP¨am *)
pPl
->
dmaIn0
->
∑øms
;

60 
DmaP¨am
 *
dmaOut1Cfg
 = (DmaP¨am *)
pPl
->
dmaOut1
->
∑øms
;

65 
dmaIn0Cfg
->
ddrAddr
 = (
UI¡32
)&
SùpTutD1Modñ_dmaIn0_buf„r
;

66 
dmaOut1Cfg
->
ddrAddr
 = (
UI¡32
)&
SùpTutD1Modñ_dmaOut1_buf„r
;

69 
	}
}

	@Sipp/SippFw/Tutorials/SippTutD1/leon/sippTutD1Model.h

13 #i‚de‡
__SIPPTUTD1MODEL_H__


14 
	#__SIPPTUTD1MODEL_H__


	)

16 
	~<sùp.h
>

17 
	~<sùpTe°Comm⁄.h
>

22 
UI¡8
 
DDR_DATA
 
SùpTutD1Modñ_dmaIn0_buf„r
[ 512 * 512 * 1 ]
ALIGNED
(8);

23 
UI¡8
 
DDR_DATA
 
SùpTutD1Modñ_dmaOut1_buf„r
[ 256 * 256 * 1 ]
ALIGNED
(8);

27 
	sSùpTutD1Modñ


30 
SùpPùñöe
 *
	m∂
;

33 
SùpFûãr
 *
	mdmaIn0
;

34 
SùpFûãr
 *
	mdmaOut1
;

35 
SùpFûãr
 *
	msˇÀ05BûöHV2
;

37 } 
	tSùpTutD1Modñ
;

39 
ªadSùpTutD1ModñI≈ut
(
SùpTutD1Modñ
 *
pPl
);

40 
wrôeSùpTutD1ModñOuçut
(
SùpTutD1Modñ
 *
pPl
);

42 
buûdSùpTutD1Modñ
(
SùpTutD1Modñ
 *
pPl
);

43 
c⁄figSùpTutD1Modñ
(
SùpTutD1Modñ
 *
pPl
);

	@Sipp/SippFw/Tutorials/SippTutD2/leon/app_config.c

13 
	~<ªgi°îsMyrüd.h
>

14 
	~<DrvC¥.h
>

19 #i‚de‡
IPIPE_CLK_CONFIG_SEL


20 
	#ùùeClockC⁄fig
 
ùùeClkC⁄figMV182


	)

22 
	#ùùeClockC⁄fig
 
IPIPE_CLK_CONFIG_SEL


	)

35 
tyAuxClkDividîCfg
 
	gauxClkAŒOn
[] =

37 {0x0FFFFFFF & (~(1<<
CSS_AUX_DDR_CORE
)Ë, 
CLK_SRC_REFCLK0
, 1, 1},

42 
tySocClockC⁄fig
 
	gùùeClkC⁄figMV182
 =

44 .
ªfClk0I≈utKhz
 = 12000,

45 .
	gªfClk1I≈utKhz
 = 0,

46 .
	gèrgëPŒ0FªqKhz
 = 264000,

47 .
	gèrgëPŒ1FªqKhz
 = 0,

48 .
	g˛kSrcPŒ1
 = 
CLK_SRC_REFCLK0
,

49 .
	gma°îClkDivNumî©‹
 = 
DONT_TOUCH_MASTER_DIVIDER
,

50 .
	gma°îClkDivDíomö©‹
 = 
DONT_TOUCH_MASTER_DIVIDER
,

51 .
	gcssDssClockE«bÀMask
 = 0xFFFFFFFFFFFFFFFFULL,

52 .
	gmssClockE«bÀMask
 = 0xFFFFFFFF,

53 .
	gsùpClockE«bÀMask
 = 0xFFFFFFFF,

54 .
	gu∑ClockE«bÀMask
 = 0xFFFFFFFF,

55 .
	gpAuxClkCfg
 = 
auxClkAŒOn
,

67 
	$öôClocksAndMem‹y
()

69 
s32
 
sc
;

70 
sc
 = 
	`DrvC¥Inô
();

71 if(
sc
)

72  
sc
;

73 
sc
 = 
	`DrvC¥SëupClocks
(&
ùùeClockC⁄fig
);

74 if(
sc
)

75  
sc
;

77 
	}
}

	@Sipp/SippFw/Tutorials/SippTutD2/leon/app_config.h

9 #i‚de‡
_APP_CONFIG_H_


10 
	#_APP_CONFIG_H_


	)

16 
öôClocksAndMem‹y
();

	@Sipp/SippFw/Tutorials/SippTutD2/leon/main.c

9 #i‡
deföed
(
SIPP_VCS
)

10 
	~<DrvTimî.h
>

11 
	~<DrvDdr.h
>

12 
	~"swcCrc.h
"

13 
	#EXP_CRC_VALUE
 0x09B34D9B

	)

16 
	~"≠p_c⁄fig.h
"

17 
	~"sùpTutD2Modñ.h
"

19 
SùpTutD2Modñ
 
	gmyPl
;

21 
	$maö
(
¨gc
, *
¨gv
[])

23 
	`UNUSED
 (
¨gc
);

24 
	`UNUSED
 (
¨gv
);

25 
u32
 
sùpEº‹Log
[
SIPP_ERROR_HISTORY_SIZE
];

27 #i‡
	`deföed
(
SIPP_VCS
)

28 
¸c
 = 0;

31 
	`sùpPœtf‹mInô
();

33 #i‡
	`deföed
(
SIPP_VCS
)

34 
s32
 
sc
;

35 
sc
 = 
	`öôClocksAndMem‹y
();

36 if(
sc
)

37  
sc
;

38 
	`unôTe°Inô
();

39 
	`DrvTimîInô
();

40 
	`DrvDdrInôüli£
(
NULL
);

43 
	`buûdSùpTutD2Modñ
(&
myPl
);

45 i‡(
	`sùpPùeGëEº‹Sètus
 (
myPl
.
∂
))

47 
u32
 
îrNum
;

48 
	`¥ötf
 ("Pipeline creationÉrror\nError codes:\n");

49 
îrNum
 = 
	`sùpGëEº‹Hi°‹y
 (
sùpEº‹Log
);

50 
îrNum
)

52 
	`¥ötf
 ("%08lx\n", 
sùpEº‹Log
[
îrNum
 - 0x1]);

53 
îrNum
--;

57 
	`c⁄figSùpTutD2Modñ
(&
myPl
);

62 
	`ªadSùpTutD2ModñI≈ut
(&
myPl
);

63 
	`sùpPro˚ssFøme
(
myPl
.
∂
);

65 i‡(
	`sùpPùeGëEº‹Sètus
 (
myPl
.
∂
))

67 
u32
 
îrNum
;

68 
	`¥ötf
 ("PipelineÑuntimeÉrror\nError codes:\n");

69 
îrNum
 = 
	`sùpGëEº‹Hi°‹y
 (
sùpEº‹Log
);

70 
îrNum
)

72 
	`¥ötf
 ("%08lx\n", 
sùpEº‹Log
[
îrNum
 - 0x1]);

73 
îrNum
--;

77 
	`wrôeSùpTutD2ModñOuçut
(&
myPl
);

79 #i‡
	`deföed
(
SIPP_VCS
)

80 
¸c
 = 
	`swcCÆcCrc32
(
SùpTutD2Modñ_dmaOut1_buf„r
, 512 * 512, 0);

81 
	`unôTe°Com∑ª
(
¸c
, 
EXP_CRC_VALUE
);

82 
	`unôTe°FöÆRï‹t
();

86 
	}
}

	@Sipp/SippFw/Tutorials/SippTutD2/leon/sippTutD2Model.c

13 
	~"sùpTutD2Modñ.h
"

15 
	~<ö˛ude/sùpHwDefs.h
>

16 
	~<fûãrs/cvtCﬁ‹RGBtoLuma/cvtCﬁ‹RGBtoLuma.h
>

20 
UI¡8
 
DDR_DATA
 
	gSùpTutD2Modñ_dmaIn0_buf„r
[512 * 512 * 3 ]
ALIGNED
(8);

21 
UI¡8
 
DDR_DATA
 
	gSùpTutD2Modñ_dmaOut1_buf„r
[512 * 512 * 1 ]
ALIGNED
(8);

24 
	$ªadSùpTutD2ModñI≈ut
(
SùpTutD2Modñ
 *
pPl
)

26 
	`sùpRdFûeU8
((
UI¡8
*)
SùpTutD2Modñ_dmaIn0_buf„r
,512 * 512 * 3 * (UInt8),"../../../../../../../resources/lena_512x512_RGB.raw");

28 ()(
pPl
);

30 
	}
}

32 
	$wrôeSùpTutD2ModñOuçut
(
SùpTutD2Modñ
 *
pPl
)

34 
	`sùpWrFûeU8
((
UI¡8
*)
SùpTutD2Modñ_dmaOut1_buf„r
,512 * 512 * 1 * (UInt8),"output.raw");

36 ()(
pPl
);

38 
	}
}

40 
	$buûdSùpTutD2Modñ
(
SùpTutD2Modñ
 *
pPl
)

43 
pPl
->
∂
 = 
	`sùpCª©ePùñöe
(0, 7, 
	`SIPP_MBIN
(
mböImgSùp
));

46 
pPl
->
dmaIn0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x00, 512, 512, 
	`N_PL
(3), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

47 
pPl
->
cvtCﬁ‹RGBtoLuma2
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x00, 512, 512, 
	`N_PL
(1), 
	`SZ
(
UI¡8
), 0, 
	`SVU_SYM
(
svuCvtCﬁ‹RGBtoLuma
), 0);

48 
pPl
->
dmaOut1
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x00, 512, 512, 
	`N_PL
(1), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

51 
	`sùpLökFûãr
(
pPl
->
cvtCﬁ‹RGBtoLuma2
,ÖPl->
dmaIn0
, 1,1 );

52 
	`sùpLökFûãr
(
pPl
->
dmaOut1
,ÖPl->
cvtCﬁ‹RGBtoLuma2
, 1,1 );

54 
	}
}

57 
	$c⁄figSùpTutD2Modñ
(
SùpTutD2Modñ
 *
pPl
)

59 
DmaP¨am
 *
dmaIn0Cfg
 = (DmaP¨am *)
pPl
->
dmaIn0
->
∑øms
;

60 
DmaP¨am
 *
dmaOut1Cfg
 = (DmaP¨am *)
pPl
->
dmaOut1
->
∑øms
;

65 
dmaIn0Cfg
->
ddrAddr
 = (
UI¡32
)&
SùpTutD2Modñ_dmaIn0_buf„r
;

66 
dmaOut1Cfg
->
ddrAddr
 = (
UI¡32
)&
SùpTutD2Modñ_dmaOut1_buf„r
;

69 
	}
}

	@Sipp/SippFw/Tutorials/SippTutD2/leon/sippTutD2Model.h

13 #i‚de‡
__SIPPTUTD2MODEL_H__


14 
	#__SIPPTUTD2MODEL_H__


	)

16 
	~<sùp.h
>

17 
	~<sùpTe°Comm⁄.h
>

22 
UI¡8
 
DDR_DATA
 
SùpTutD2Modñ_dmaIn0_buf„r
[ 512 * 512 * 3 ]
ALIGNED
(8);

23 
UI¡8
 
DDR_DATA
 
SùpTutD2Modñ_dmaOut1_buf„r
[ 512 * 512 * 1 ]
ALIGNED
(8);

27 
	sSùpTutD2Modñ


30 
SùpPùñöe
 *
	m∂
;

33 
SùpFûãr
 *
	mdmaIn0
;

34 
SùpFûãr
 *
	mdmaOut1
;

35 
SùpFûãr
 *
	mcvtCﬁ‹RGBtoLuma2
;

37 } 
	tSùpTutD2Modñ
;

39 
ªadSùpTutD2ModñI≈ut
(
SùpTutD2Modñ
 *
pPl
);

40 
wrôeSùpTutD2ModñOuçut
(
SùpTutD2Modñ
 *
pPl
);

42 
buûdSùpTutD2Modñ
(
SùpTutD2Modñ
 *
pPl
);

43 
c⁄figSùpTutD2Modñ
(
SùpTutD2Modñ
 *
pPl
);

	@Sipp/SippFw/Tutorials/SippTutE0/leon/app_config.c

13 
	~<ªgi°îsMyrüd.h
>

14 
	~<DrvC¥.h
>

19 #i‚de‡
IPIPE_CLK_CONFIG_SEL


20 
	#ùùeClockC⁄fig
 
ùùeClkC⁄figMV182


	)

22 
	#ùùeClockC⁄fig
 
IPIPE_CLK_CONFIG_SEL


	)

35 
tyAuxClkDividîCfg
 
	gauxClkAŒOn
[] =

37 {0x0FFFFFFF & (~(1<<
CSS_AUX_DDR_CORE
)Ë, 
CLK_SRC_REFCLK0
, 1, 1},

42 
tySocClockC⁄fig
 
	gùùeClkC⁄figMV182
 =

44 .
ªfClk0I≈utKhz
 = 12000,

45 .
	gªfClk1I≈utKhz
 = 0,

46 .
	gèrgëPŒ0FªqKhz
 = 264000,

47 .
	gèrgëPŒ1FªqKhz
 = 0,

48 .
	g˛kSrcPŒ1
 = 
CLK_SRC_REFCLK0
,

49 .
	gma°îClkDivNumî©‹
 = 
DONT_TOUCH_MASTER_DIVIDER
,

50 .
	gma°îClkDivDíomö©‹
 = 
DONT_TOUCH_MASTER_DIVIDER
,

51 .
	gcssDssClockE«bÀMask
 = 0xFFFFFFFFFFFFFFFFULL,

52 .
	gmssClockE«bÀMask
 = 0xFFFFFFFF,

53 .
	gsùpClockE«bÀMask
 = 0xFFFFFFFF,

54 .
	gu∑ClockE«bÀMask
 = 0xFFFFFFFF,

55 .
	gpAuxClkCfg
 = 
auxClkAŒOn
,

67 
	$öôClocksAndMem‹y
()

69 
s32
 
sc
;

70 
sc
 = 
	`DrvC¥Inô
();

71 if(
sc
)

72  
sc
;

73 
sc
 = 
	`DrvC¥SëupClocks
(&
ùùeClockC⁄fig
);

74 if(
sc
)

75  
sc
;

77 
	}
}

	@Sipp/SippFw/Tutorials/SippTutE0/leon/app_config.h

9 #i‚de‡
_APP_CONFIG_H_


10 
	#_APP_CONFIG_H_


	)

16 
öôClocksAndMem‹y
();

	@Sipp/SippFw/Tutorials/SippTutE0/leon/main.c

9 #i‡
deföed
(
SIPP_VCS
)

10 
	~<DrvTimî.h
>

11 
	~<DrvDdr.h
>

12 
	~"swcCrc.h
"

13 
	#EXP_CRC_VALUE0
 0xBABAF4D2

	)

14 
	#EXP_CRC_VALUE1
 0x4636ADC1

	)

17 
	~"≠p_c⁄fig.h
"

18 
	~"sùpTutE0Modñ.h
"

20 
SùpTutE0Modñ
 
	gmyPl
;

22 
	$maö
(
¨gc
, *
¨gv
[])

24 
	`UNUSED
 (
¨gc
);

25 
	`UNUSED
 (
¨gv
);

26 
u32
 
sùpEº‹Log
[
SIPP_ERROR_HISTORY_SIZE
];

28 #i‡
	`deföed
(
SIPP_VCS
)

29 
¸c0
, 
¸c1
;

32 
	`sùpPœtf‹mInô
();

34 #i‡
	`deföed
(
SIPP_VCS
)

35 
s32
 
sc
;

36 
sc
 = 
	`öôClocksAndMem‹y
();

37 if(
sc
)

38  
sc
;

39 
	`unôTe°Inô
();

40 
	`DrvTimîInô
();

41 
	`DrvDdrInôüli£
(
NULL
);

44 
	`buûdSùpTutE0Modñ
(&
myPl
);

46 i‡(
	`sùpPùeGëEº‹Sètus
 (
myPl
.
∂
))

48 
u32
 
îrNum
;

49 
	`¥ötf
 ("Pipeline creationÉrror\nError codes:\n");

50 
îrNum
 = 
	`sùpGëEº‹Hi°‹y
 (
sùpEº‹Log
);

51 
îrNum
)

53 
	`¥ötf
 ("%08lx\n", 
sùpEº‹Log
[
îrNum
 - 0x1]);

54 
îrNum
--;

58 
	`c⁄figSùpTutE0Modñ
(&
myPl
);

63 
	`ªadSùpTutE0ModñI≈ut
(&
myPl
);

64 
	`sùpPro˚ssFøme
(
myPl
.
∂
);

66 i‡(
	`sùpPùeGëEº‹Sètus
 (
myPl
.
∂
))

68 
u32
 
îrNum
;

69 
	`¥ötf
 ("PipelineÑuntimeÉrror\nError codes:\n");

70 
îrNum
 = 
	`sùpGëEº‹Hi°‹y
 (
sùpEº‹Log
);

71 
îrNum
)

73 
	`¥ötf
 ("%08lx\n", 
sùpEº‹Log
[
îrNum
 - 0x1]);

74 
îrNum
--;

78 
	`wrôeSùpTutE0ModñOuçut
(&
myPl
);

80 #i‡
	`deföed
(
SIPP_VCS
)

81 
¸c0
 = 
	`swcCÆcCrc32
(
SùpTutE0Modñ_dmaOut0_buf„r
, 256 * 256, 0);

82 
¸c1
 = 
	`swcCÆcCrc32
(
SùpTutE0Modñ_dmaOut1_buf„r
, 512 * 512, 0);

83 
	`unôTe°Com∑ª
(
¸c0
, 
EXP_CRC_VALUE0
);

84 
	`unôTe°Com∑ª
(
¸c1
, 
EXP_CRC_VALUE1
);

85 
	`unôTe°FöÆRï‹t
();

89 
	}
}

	@Sipp/SippFw/Tutorials/SippTutE0/leon/myDefs.c

2 
	~"myDefs.h
"

4 
UI¡32
 
	gdM©
[10] = {

12 
UI¡16
 
	gcM©
[25] =

	@Sipp/SippFw/Tutorials/SippTutE0/leon/myDefs.h

7 #i‚de‡
MYDEFS_H_


8 
	#MYDEFS_H_


	)

10 
	~<sùp.h
>

11 
	~"sùpPœtf‹m.h
"

13 
UI¡32
 
dM©
[10];

14 
UI¡16
 
cM©
[25];

	@Sipp/SippFw/Tutorials/SippTutE0/leon/sippTutE0Model.c

13 
	~"sùpTutE0Modñ.h
"

15 
	~<ö˛ude/sùpHwDefs.h
>

16 
	~<fûãrs/c⁄v3x3/c⁄v3x3.h
>

17 
	~<fûãrs/dû©e5x5/dû©e5x5.h
>

18 
	~<fûãrs/absdiff/absdiff.h
>

19 
	~<fûãrs/sˇÀ05bûöHV/sˇÀ05BûöHV.h
>

23 
UI¡8
 
DDR_DATA
 
	gSùpTutE0Modñ_dmaIn0_buf„r
[512 * 512 * 1 ]
ALIGNED
(8);

24 
UI¡8
 
DDR_DATA
 
	gSùpTutE0Modñ_dmaIn1_buf„r
[512 * 512 * 1 ]
ALIGNED
(8);

25 
UI¡8
 
DDR_DATA
 
	gSùpTutE0Modñ_dmaOut0_buf„r
[256 * 256 * 1 ]
ALIGNED
(8);

26 
UI¡8
 
DDR_DATA
 
	gSùpTutE0Modñ_dmaOut1_buf„r
[512 * 512 * 1 ]
ALIGNED
(8);

29 
	$ªadSùpTutE0ModñI≈ut
(
SùpTutE0Modñ
 *
pPl
)

31 
	`sùpRdFûeU8
((
UI¡8
*)
SùpTutE0Modñ_dmaIn0_buf„r
,512 * 512 * 1 * (UInt8),"../../../../../../../resources/lena_512x512_luma.raw");

32 
	`sùpRdFûeU8
((
UI¡8
*)
SùpTutE0Modñ_dmaIn1_buf„r
,512 * 512 * 1 * (UInt8),"../../../../../../../resources/lena_512x512_luma.raw");

34 ()(
pPl
);

36 
	}
}

38 
	$wrôeSùpTutE0ModñOuçut
(
SùpTutE0Modñ
 *
pPl
)

40 
	`sùpWrFûeU8
((
UI¡8
*)
SùpTutE0Modñ_dmaOut0_buf„r
,256 * 256 * 1 * (UInt8),"output.raw");

41 
	`sùpWrFûeU8
((
UI¡8
*)
SùpTutE0Modñ_dmaOut1_buf„r
,512 * 512 * 1 * (UInt8),"output2.raw");

43 ()(
pPl
);

45 
	}
}

47 
	$buûdSùpTutE0Modñ
(
SùpTutE0Modñ
 *
pPl
)

50 
pPl
->
∂
 = 
	`sùpCª©ePùñöe
(0, 7, 
	`SIPP_MBIN
(
mböImgSùp
));

53 
pPl
->
dmaIn0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x00, 512, 512, 
	`N_PL
(1), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

54 
pPl
->
dmaIn1
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x00, 512, 512, 
	`N_PL
(1), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

55 
pPl
->
c⁄v3x30
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x0, 512, 512, 
	`N_PL
(1), 
	`SZ
(
UI¡8
), SZ(
C⁄v3x3P¨am
), 
	`SVU_SYM
(
svuC⁄v3x3
), 0);

56 
pPl
->
dû©e5x50
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x0, 512, 512, 
	`N_PL
(1), 
	`SZ
(
UI¡8
), SZ(
Dû©e5x5P¨am
), 
	`SVU_SYM
(
svuDû©e5x5
), 0);

57 
pPl
->
absdiff0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x0, 512, 512, 
	`N_PL
(1), 
	`SZ
(
UI¡8
), 0, 
	`SVU_SYM
(
svuAbsdiff
), 0);

58 
pPl
->
sˇÀ05BûöHV0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 
SIPP_RESIZE
, 256, 256, 
	`N_PL
(1), 
	`SZ
(
UI¡8
), 0, 
	`SVU_SYM
(
svuS˛05BûöHV
), 0);

59 
pPl
->
dmaOut0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x00, 256, 256, 
	`N_PL
(1), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

60 
pPl
->
dmaOut1
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x00, 512, 512, 
	`N_PL
(1), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

63 
	`sùpLökFûãr
(
pPl
->
c⁄v3x30
,ÖPl->
dmaIn0
, 3,3 );

64 
	`sùpLökFûãr
(
pPl
->
dû©e5x50
,ÖPl->
dmaIn1
, 5,5 );

65 
	`sùpLökFûãr
(
pPl
->
absdiff0
,ÖPl->
c⁄v3x30
, 1,1 );

66 
	`sùpLökFûãr
(
pPl
->
absdiff0
,ÖPl->
dû©e5x50
, 1,1 );

67 
	`sùpLökFûãr
(
pPl
->
sˇÀ05BûöHV0
,ÖPl->
dû©e5x50
, 2,2 );

68 
	`sùpLökFûãr
(
pPl
->
dmaOut0
,ÖPl->
sˇÀ05BûöHV0
, 1,1 );

69 
	`sùpLökFûãr
(
pPl
->
dmaOut1
,ÖPl->
absdiff0
, 1,1 );

71 
	}
}

73 
UI¡16
 
	gc⁄v3x30Cfg_cM©
[9];

75 
	$c⁄figSùpTutE0Modñ
(
SùpTutE0Modñ
 *
pPl
)

77 
DmaP¨am
 *
dmaIn0Cfg
 = (DmaP¨am *)
pPl
->
dmaIn0
->
∑øms
;

78 
DmaP¨am
 *
dmaIn1Cfg
 = (DmaP¨am *)
pPl
->
dmaIn1
->
∑øms
;

79 
C⁄v3x3P¨am
 *
c⁄v3x30Cfg
 = (C⁄v3x3P¨am *)
pPl
->
c⁄v3x30
->
∑øms
;

80 
Dû©e5x5P¨am
 *
dû©e5x50Cfg
 = (Dû©e5x5P¨am *)
pPl
->
dû©e5x50
->
∑øms
;

81 
DmaP¨am
 *
dmaOut0Cfg
 = (DmaP¨am *)
pPl
->
dmaOut0
->
∑øms
;

82 
DmaP¨am
 *
dmaOut1Cfg
 = (DmaP¨am *)
pPl
->
dmaOut1
->
∑øms
;

87 
c⁄v3x30Cfg
->
cM©

c⁄v3x30Cfg_cM©
;

88 
c⁄v3x30Cfg
->
cM©
[0]= 0x2C00;

89 
c⁄v3x30Cfg
->
cM©
[1]= 0x3000;

90 
c⁄v3x30Cfg
->
cM©
[2]= 0x2C00;

91 
c⁄v3x30Cfg
->
cM©
[3]= 0x3000;

92 
c⁄v3x30Cfg
->
cM©
[4]= 0x3400;

93 
c⁄v3x30Cfg
->
cM©
[5]= 0x3000;

94 
c⁄v3x30Cfg
->
cM©
[6]= 0x2C00;

95 
c⁄v3x30Cfg
->
cM©
[7]= 0x3000;

96 
c⁄v3x30Cfg
->
cM©
[8]= 0x2C00;

97 
dû©e5x50Cfg
->
dM©
[0](
UI¡8
*)&dMat[0];

98 
dû©e5x50Cfg
->
dM©
[1](
UI¡8
*)&dMat[2];

99 
dû©e5x50Cfg
->
dM©
[2](
UI¡8
*)&dMat[4];

100 
dû©e5x50Cfg
->
dM©
[3](
UI¡8
*)&dMat[6];

101 
dû©e5x50Cfg
->
dM©
[4](
UI¡8
*)&dMat[8];

102 
dmaIn0Cfg
->
ddrAddr
 = (
UI¡32
)&
SùpTutE0Modñ_dmaIn0_buf„r
;

103 
dmaIn1Cfg
->
ddrAddr
 = (
UI¡32
)&
SùpTutE0Modñ_dmaIn1_buf„r
;

104 
dmaOut0Cfg
->
ddrAddr
 = (
UI¡32
)&
SùpTutE0Modñ_dmaOut0_buf„r
;

105 
dmaOut1Cfg
->
ddrAddr
 = (
UI¡32
)&
SùpTutE0Modñ_dmaOut1_buf„r
;

108 
	}
}

	@Sipp/SippFw/Tutorials/SippTutE0/leon/sippTutE0Model.h

13 #i‚de‡
__SIPPTUTE0MODEL_H__


14 
	#__SIPPTUTE0MODEL_H__


	)

16 
	~<sùp.h
>

17 
	~<sùpTe°Comm⁄.h
>

19 
	~"myDefs.h
"

23 
UI¡8
 
DDR_DATA
 
SùpTutE0Modñ_dmaIn0_buf„r
[ 512 * 512 * 1 ]
ALIGNED
(8);

24 
UI¡8
 
DDR_DATA
 
SùpTutE0Modñ_dmaIn1_buf„r
[ 512 * 512 * 1 ]
ALIGNED
(8);

25 
UI¡8
 
DDR_DATA
 
SùpTutE0Modñ_dmaOut0_buf„r
[ 256 * 256 * 1 ]
ALIGNED
(8);

26 
UI¡8
 
DDR_DATA
 
SùpTutE0Modñ_dmaOut1_buf„r
[ 512 * 512 * 1 ]
ALIGNED
(8);

30 
	sSùpTutE0Modñ


33 
SùpPùñöe
 *
	m∂
;

36 
SùpFûãr
 *
	mdmaIn0
;

37 
SùpFûãr
 *
	mabsdiff0
;

38 
SùpFûãr
 *
	mdmaIn1
;

39 
SùpFûãr
 *
	mc⁄v3x30
;

40 
SùpFûãr
 *
	mdû©e5x50
;

41 
SùpFûãr
 *
	msˇÀ05BûöHV0
;

42 
SùpFûãr
 *
	mdmaOut0
;

43 
SùpFûãr
 *
	mdmaOut1
;

45 } 
	tSùpTutE0Modñ
;

47 
ªadSùpTutE0ModñI≈ut
(
SùpTutE0Modñ
 *
pPl
);

48 
wrôeSùpTutE0ModñOuçut
(
SùpTutE0Modñ
 *
pPl
);

50 
buûdSùpTutE0Modñ
(
SùpTutE0Modñ
 *
pPl
);

51 
c⁄figSùpTutE0Modñ
(
SùpTutE0Modñ
 *
pPl
);

	@Sipp/SippFw/common/leon/octaveBayerIspParams.h

4 
	#SZ_IN_IMG
 "cﬁos˚√_f6400k_3264x2448_12ms_1x.øw"

	)

11 
	#BAYER_W
 3264

	)

12 
	#BAYER_H
 2448

	)

13 
	#IMG_W
 3248

	)

14 
	#IMG_H
 2438

	)

16 
	#BAYER_BITS
 10

	)

20 
	#BLACK_LEVEL
 0.015625

21 

	)

23 
	#LSC_GAIN_MAP_W
 56

	)

24 
	#LSC_GAIN_MAP_H
 44

	)

27 
UI¡16
 
	glscMesh
[44 * 56] 
ALIGNED
(8)=

76 
	#BAD_PIX_ALPHA_G_HOT
 0x6

77 
	#BAD_PIX_ALPHA_RB_HOT
 0x6

78 
	#BAD_PIX_ALPHA_G_COLD
 0x6

79 
	#BAD_PIX_ALPHA_RB_COLD
 0x6

80 
	#BAD_PIX_NOISE_LEVEL
 0x0000

81 

	)

84 
	#GRGB_IMBAL_PLAT_DARK
 576

	)

85 
	#GRGB_IMBAL_DECAY_DARK
 640

	)

86 
	#GRGB_IMBAL_PLAT_BRIGHT
 800

	)

87 
	#GRGB_IMBAL_DECAY_BRIGHT
 960

	)

88 
	#GRGB_IMBAL_THRESHOLD
 1000

89 

	)

91 
	#CHROMA_GEN_EPSILON
 0.000978

	)

92 
	#CHROMA_MEDIAN_SIZE
 3

	)

95 
	#DIGI_GAIN_GR
 0x0104>>2

96 
	#DIGI_GAIN_GB
 0x0104>>2

97 
	#DIGI_GAIN_R
 0x01ab>>2

98 
	#DIGI_GAIN_B
 0x01ac>>2

99 

	)

100 
	#DIGI_SAT_GR
 255

101 
	#DIGI_SAT_GB
 255

102 
	#DIGI_SAT_R
 255

103 
	#DIGI_SAT_B
 255

104 

	)

107 
	#SHARP_SIGMA
 1.300000

	)

108 
	#SHARP_STRENGTH
 0x3e00

109 
	#SHARP_ALPHA
 0x3666

110 
	#SHARP_OVERSHOOT
 0x3c9a

111 
	#SHARP_UNDERSHOOT
 0x3af5

112 

	)

113 
	#SHARP_RANGE_STOP_0
 0x1c04

114 
	#SHARP_RANGE_STOP_1
 0x2d05

115 
	#SHARP_RANGE_STOP_2
 0x3ae7

116 
	#SHARP_RANGE_STOP_3
 0x3bd8

117 

	)

118 
	#SHARP_MIN_THR
 0x1a25

119 

	)

122 
	#LUMA_DNS_STRENGTH
 12.000000

	)

123 
	#LUMA_DNS_ALPHA
 96

124 

	)

128 
	#LUMA_DNS_F2
 0x55555555

	)

131 
UI¡8
 
	gyDnsRefLut
[256] = {

166 
UI¡8
 
	gyDnsGammaLut
[256] = {

200 
	#LUMA_DNS_REF_SHIFT
 14

	)

201 
	#LUMA_DNS_REF_GAMMA
 0.800000

	)

205 
	#LUMA_RAND_NOISE_STRENGTH
 0.080000

	)

209 
	#CHROMA_DNS_T1
 4

	)

210 
	#CHROMA_DNS_T2
 5

	)

211 
	#CHROMA_DNS_LIMIT
 4

	)

212 
	#CHROMA_DNS_H_ENAB
 1

	)

216 
	gccm
[9] = {

222 
	#DESAT_T1
 0.007843

	)

223 
	#DESAT_MUL
 19.615385

	)

227 
	#GAMMA_DARK
 1.700000

	)

228 
	#GAMMA_BRIGHT
 2.200000

	)

229 
	#GAMMA_ACE_SUB
 0.047059

	)

230 
	#GAMMA_ACE_MUL
 1.053719

	)

	@Sipp/SippFw/memRegionApi/leon/MemRegionApi.c

13 
	~"MemRegi⁄Api.h
"

15 
	~<ö˛ude/sùpHwDefs.h
>

16 
	~<¨ch/ma2x5x/ö˛ude/sùpHwDefs_ma2x5x.h
>

20 
UI¡16
 
DDR_DATA
 
	gMemRegi⁄Api_dmaIn0_buf„r
[
MEM_API_TEST_BAYER_WIDTH
* 
MEM_API_TEST_BAYER_HEIGHT
* 1 ]
ALIGNED
(8);

21 
UI¡8
 
DDR_DATA
 
	gMemRegi⁄Api_dmaOut0_buf„r
[
MEM_API_TEST_BAYER_WIDTH
* 
MEM_API_TEST_BAYER_HEIGHT
* 3 ]
ALIGNED
(8);

22 
UI¡16
 
DDR_DATA
 
	gMemRegi⁄Api_dmaOut1_buf„r
[
MEM_API_TEST_BAYER_WIDTH
* 
MEM_API_TEST_BAYER_HEIGHT
* 1 ]
ALIGNED
(8);

25 
	$ªadMemRegi⁄ApiI≈ut
(
MemRegi⁄Api
 *
pPl
)

27 
	`sùpRdFûeU8
((
UI¡8
*)
MemRegi⁄Api_dmaIn0_buf„r
,
MEM_API_TEST_BAYER_WIDTH
 * 
MEM_API_TEST_BAYER_HEIGHT
 * 1 * (
UI¡16
),"../../../../../../resources/test_522x128.raw");

29 ()(
pPl
);

31 
	}
}

33 
	$wrôeMemRegi⁄ApiOuçut
(
MemRegi⁄Api
 *
pPl
)

35 
	`sùpWrFûeU8
((
UI¡8
*)
MemRegi⁄Api_dmaOut0_buf„r
,
MEM_API_TEST_BAYER_WIDTH
 * 
MEM_API_TEST_BAYER_HEIGHT
 * 3 * (UInt8),"output0.raw");

36 
	`sùpWrFûeU8
((
UI¡8
*)
MemRegi⁄Api_dmaOut1_buf„r
,
MEM_API_TEST_BAYER_WIDTH
 * 
MEM_API_TEST_BAYER_HEIGHT
 * 1 * (
UI¡16
),"output1.raw");

38 ()(
pPl
);

40 
	}
}

42 
	$buûdMemRegi⁄Api
(
MemRegi⁄Api
 *
pPl
)

45 
pPl
->
∂
 = 
	`sùpCª©ePùñöe
(0, 3, 
	`SIPP_MBIN
(
mböImgSùp
));

48 
pPl
->
dmaIn0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x00, 
MEM_API_TEST_BAYER_WIDTH
, 
MEM_API_TEST_BAYER_HEIGHT
, 
	`N_PL
(1), 
	`SZ
(
UI¡16
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

49 
pPl
->
lscMa2x5x0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x0, 
MEM_API_TEST_BAYER_WIDTH
, 
MEM_API_TEST_BAYER_HEIGHT
, 
	`N_PL
(1), 
	`SZ
(
UI¡16
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_LSC_ID
, 0);

50 
pPl
->
øwMa2x5x0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x0, 
MEM_API_TEST_BAYER_WIDTH
, 
MEM_API_TEST_BAYER_HEIGHT
, 
	`N_PL
(1), 
	`SZ
(
UI¡16
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_RAW_ID
, 0);

51 
pPl
->
debayîMa2x5x0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x0, 
MEM_API_TEST_BAYER_WIDTH
, 
MEM_API_TEST_BAYER_HEIGHT
, 
	`N_PL
(3), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DBYR_ID
, 0);

52 
	`sùpFûãrAddOBuf
(
pPl
->
debayîMa2x5x0
, 1, (
UI¡8
));

53 
pPl
->
dmaOut0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x00, 
MEM_API_TEST_BAYER_WIDTH
, 
MEM_API_TEST_BAYER_HEIGHT
, 
	`N_PL
(3), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

54 
pPl
->
dmaOut1
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x00, 
MEM_API_TEST_BAYER_WIDTH
, 
MEM_API_TEST_BAYER_HEIGHT
, 
	`N_PL
(1), 
	`SZ
(
UI¡16
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

57 
	`sùpLökFûãr
(
pPl
->
lscMa2x5x0
,ÖPl->
dmaIn0
, 1,0 );

58 
	`sùpLökFûãr
(
pPl
->
øwMa2x5x0
,ÖPl->
lscMa2x5x0
, 5,5 );

59 
	`sùpLökFûãr
(
pPl
->
debayîMa2x5x0
,ÖPl->
øwMa2x5x0
, 11,11 );

60 
	`sùpLökFûãr
(
pPl
->
dmaOut0
,ÖPl->
debayîMa2x5x0
, 1,1 );

61 
	`sùpLökFûãr
(
pPl
->
dmaOut1
,ÖPl->
debayîMa2x5x0
, 1,1 );

62 
	`sùpLökFûãrSëOBuf
(
pPl
->
dmaOut1
,ÖPl->
debayîMa2x5x0
, 1);

64 
	}
}

67 
	$c⁄figMemRegi⁄Api
(
MemRegi⁄Api
 *
pPl
)

69 
DmaP¨am
 *
dmaIn0Cfg
 = (DmaP¨am *)
pPl
->
dmaIn0
->
∑øms
;

70 
LscP¨am
 *
lscMa2x5x0Cfg
 = (LscP¨am *)
pPl
->
lscMa2x5x0
->
∑øms
;

71 
RawP¨am
 *
øwMa2x5x0Cfg
 = (RawP¨am *)
pPl
->
øwMa2x5x0
->
∑øms
;

72 
DbyrP¨am
 *
debayîMa2x5x0Cfg
 = (DbyrP¨am *)
pPl
->
debayîMa2x5x0
->
∑øms
;

73 
DmaP¨am
 *
dmaOut0Cfg
 = (DmaP¨am *)
pPl
->
dmaOut0
->
∑øms
;

74 
DmaP¨am
 *
dmaOut1Cfg
 = (DmaP¨am *)
pPl
->
dmaOut1
->
∑øms
;

79 
lscMa2x5x0Cfg
->
gmBa£

lscMesh
;

80 
lscMa2x5x0Cfg
->
gmWidth

LSC_GAIN_MAP_W
;

81 
lscMa2x5x0Cfg
->
gmHeight

LSC_GAIN_MAP_H
;

82 
lscMa2x5x0Cfg
->
d©aF‹m©
=
	`SIPP_LSC_CFG_FORMAT
(
BAYER
);

83 
lscMa2x5x0Cfg
->
d©aWidth
=
BAYER_BITS
;

84 
øwMa2x5x0Cfg
->
grgbPœt

	`RAW_GRGB_PLATO
(
GRGB_IMBAL_PLAT_DARK
,
GRGB_IMBAL_PLAT_BRIGHT
);

85 
øwMa2x5x0Cfg
->
grgbDeˇy
=
	`RAW_GRGB_DECAY
(
GRGB_IMBAL_DECAY_BRIGHT
,
GRGB_IMBAL_DECAY_DARK
);

86 
øwMa2x5x0Cfg
->
badPixCfg
=
	`RAW_BAD_PIX_CFG
(
BAD_PIX_NOISE_LEVEL
,
BAD_PIX_ALPHA_G_HOT
,
BAD_PIX_ALPHA_G_COLD
,
BAD_PIX_ALPHA_RB_HOT
,
BAD_PIX_ALPHA_RB_COLD
);

87 
øwMa2x5x0Cfg
->
cfg

	`RAW_CFG
(
BAYER
,
BAYER_PATTERN
,1,0,0,0,(
BAYER_BITS
-1),
GRGB_IMBAL_THRESHOLD
,0,0,1,0,1);

88 
øwMa2x5x0Cfg
->
gaöS©
[0]=((
DIGI_SAT_GR
 << 16Ë| 
DIGI_GAIN_GR
);

89 
øwMa2x5x0Cfg
->
gaöS©
[1]=((
DIGI_SAT_GB
 << 16Ë| 
DIGI_GAIN_GB
);

90 
øwMa2x5x0Cfg
->
gaöS©
[2]=((
DIGI_SAT_R
 << 16Ë| 
DIGI_GAIN_R
);

91 
øwMa2x5x0Cfg
->
gaöS©
[3]=((
DIGI_SAT_B
 << 16Ë| 
DIGI_GAIN_B
);

92 
øwMa2x5x0Cfg
->
°©sBa£
=0;

93 
øwMa2x5x0Cfg
->
°©sPœ√s
=
	`RAW_STATS_PLANES
(0,0,0,0,0,0);

94 
øwMa2x5x0Cfg
->
°©sP©chCfg
=
	`RAW_PATCH_CFG
(0,0,0,0);

95 
øwMa2x5x0Cfg
->
°©sP©chSèπ
=
	`RAW_PATCH_START
(0,0);

96 
øwMa2x5x0Cfg
->
°©sP©chSkù
=
	`RAW_PATCH_START
(0,0);

97 
øwMa2x5x0Cfg
->
°©sThªsh
=0;

98 
øwMa2x5x0Cfg
->
afF1c€fs
[0]=0;

99 
øwMa2x5x0Cfg
->
afF1c€fs
[1]=0;

100 
øwMa2x5x0Cfg
->
afF1c€fs
[2]=0;

101 
øwMa2x5x0Cfg
->
afF1c€fs
[3]=0;

102 
øwMa2x5x0Cfg
->
afF1c€fs
[4]=0;

103 
øwMa2x5x0Cfg
->
afF1c€fs
[5]=0;

104 
øwMa2x5x0Cfg
->
afF1c€fs
[6]=0;

105 
øwMa2x5x0Cfg
->
afF1c€fs
[7]=0;

106 
øwMa2x5x0Cfg
->
afF1c€fs
[8]=0;

107 
øwMa2x5x0Cfg
->
afF1c€fs
[9]=0;

108 
øwMa2x5x0Cfg
->
afF1c€fs
[10]=0;

109 
øwMa2x5x0Cfg
->
afF2c€fs
[0]=0;

110 
øwMa2x5x0Cfg
->
afF2c€fs
[1]=0;

111 
øwMa2x5x0Cfg
->
afF2c€fs
[2]=0;

112 
øwMa2x5x0Cfg
->
afF2c€fs
[3]=0;

113 
øwMa2x5x0Cfg
->
afF2c€fs
[4]=0;

114 
øwMa2x5x0Cfg
->
afF2c€fs
[5]=0;

115 
øwMa2x5x0Cfg
->
afF2c€fs
[6]=0;

116 
øwMa2x5x0Cfg
->
afF2c€fs
[7]=0;

117 
øwMa2x5x0Cfg
->
afF2c€fs
[8]=0;

118 
øwMa2x5x0Cfg
->
afF2c€fs
[9]=0;

119 
øwMa2x5x0Cfg
->
afF2c€fs
[10]=0;

120 
øwMa2x5x0Cfg
->
afMöThªsh
=0;

121 
øwMa2x5x0Cfg
->
afSubåa˘
=0;

122 
øwMa2x5x0Cfg
->
afP©chCfg
=0;

123 
øwMa2x5x0Cfg
->
afP©chSèπ
=0;

124 
øwMa2x5x0Cfg
->
afSètsBa£
=0;

125 
øwMa2x5x0Cfg
->
hi°LumaBa£
=0;

126 
øwMa2x5x0Cfg
->
hi°RgbBa£
=0;

127 
debayîMa2x5x0Cfg
->
cfg

	`DEBAYER_CFG
(
BAYER_PATTERN
,0,0,
BAYER_BITS
,8,
P_RGB
,3,0);

128 
debayîMa2x5x0Cfg
->
thªsh
=
	`DEBAYER_THRESH
(0,0,1,1,0,0);

129 
debayîMa2x5x0Cfg
->
dew‹mCfg
=
	`DEBAYER_DEWORM
(0,0);

130 
debayîMa2x5x0Cfg
->
lumaWeight
=0;

131 
dmaIn0Cfg
->
ddrAddr
 = (
UI¡32
)&
MemRegi⁄Api_dmaIn0_buf„r
;

132 
dmaOut0Cfg
->
ddrAddr
 = (
UI¡32
)&
MemRegi⁄Api_dmaOut0_buf„r
;

133 
dmaOut1Cfg
->
ddrAddr
 = (
UI¡32
)&
MemRegi⁄Api_dmaOut1_buf„r
;

136 
	}
}

	@Sipp/SippFw/memRegionApi/leon/MemRegionApi.h

13 #i‚de‡
__MEMREGIONAPI_H__


14 
	#__MEMREGIONAPI_H__


	)

16 
	~<sùp.h
>

17 
	~<sùpTe°Comm⁄.h
>

19 
	~"MemRegi⁄ApiP¨ams.h
"

23 
UI¡16
 
DDR_DATA
 
MemRegi⁄Api_dmaIn0_buf„r
[ 
MEM_API_TEST_BAYER_WIDTH
 * 
MEM_API_TEST_BAYER_HEIGHT
 * 1 ]
ALIGNED
(8);

24 
UI¡8
 
DDR_DATA
 
MemRegi⁄Api_dmaOut0_buf„r
[ 
MEM_API_TEST_BAYER_WIDTH
 * 
MEM_API_TEST_BAYER_HEIGHT
 * 3 ]
ALIGNED
(8);

25 
UI¡16
 
DDR_DATA
 
MemRegi⁄Api_dmaOut1_buf„r
[ 
MEM_API_TEST_BAYER_WIDTH
 * 
MEM_API_TEST_BAYER_HEIGHT
 * 1 ]
ALIGNED
(8);

29 
	sMemRegi⁄Api


32 
SùpPùñöe
 *
	m∂
;

35 
SùpFûãr
 *
	mdmaIn0
;

36 
SùpFûãr
 *
	mdmaOut0
;

37 
SùpFûãr
 *
	mdebayîMa2x5x0
;

38 
SùpFûãr
 *
	mdmaOut1
;

39 
SùpFûãr
 *
	mlscMa2x5x0
;

40 
SùpFûãr
 *
	møwMa2x5x0
;

42 } 
	tMemRegi⁄Api
;

44 
ªadMemRegi⁄ApiI≈ut
(
MemRegi⁄Api
 *
pPl
);

45 
wrôeMemRegi⁄ApiOuçut
(
MemRegi⁄Api
 *
pPl
);

47 
buûdMemRegi⁄Api
(
MemRegi⁄Api
 *
pPl
);

48 
c⁄figMemRegi⁄Api
(
MemRegi⁄Api
 *
pPl
);

	@Sipp/SippFw/memRegionApi/leon/MemRegionApiParams.h

7 
	#MEM_API_TEST_BAYER_WIDTH
 522

	)

8 
	#MEM_API_TEST_BAYER_HEIGHT
 128

	)

10 
	#BAYER_BITS
 10

	)

13 
	#LSC_GAIN_MAP_W
 58

	)

14 
	#LSC_GAIN_MAP_H
 44

	)

17 
UI¡16
 
lscMesh
[44 * 58];

23 
	#BAD_PIX_ALPHA_G_HOT
 0x6

24 
	#BAD_PIX_ALPHA_RB_HOT
 0x6

25 
	#BAD_PIX_ALPHA_G_COLD
 0x6

26 
	#BAD_PIX_ALPHA_RB_COLD
 0x6

27 
	#BAD_PIX_NOISE_LEVEL
 0x00a3

28 

	)

31 
	#GRGB_IMBAL_PLAT_DARK
 576

	)

32 
	#GRGB_IMBAL_DECAY_DARK
 640

	)

33 
	#GRGB_IMBAL_PLAT_BRIGHT
 800

	)

34 
	#GRGB_IMBAL_DECAY_BRIGHT
 960

	)

35 
	#GRGB_IMBAL_THRESHOLD
 1000

36 

	)

37 
	#BAYER_PATTERN
 
GRBG


	)

40 
	#DIGI_GAIN_GR
 0x0104

41 
	#DIGI_GAIN_GB
 0x0104

42 
	#DIGI_GAIN_R
 0x0104

43 
	#DIGI_GAIN_B
 0x0104

44 

	)

45 
	#DIGI_SAT_GR
 1023

46 
	#DIGI_SAT_GB
 1023

47 
	#DIGI_SAT_R
 1023

48 
	#DIGI_SAT_B
 1023

49 

	)

	@Sipp/SippFw/memRegionApi/leon/main.c

11 
	~<sùp.h
>

12 
	~<sùpTe°Comm⁄.h
>

14 #i‡
deföed
(
SIPP_VCS
)

15 
	~<UnôTe°Api.h
>

16 
	~<DrvTimî.h
>

17 
	~<DrvDdr.h
>

20 
	~"MemRegi⁄Api.h
"

21 
	~"MemRegi⁄ApiP¨ams.h
"

23 
	#DISABLE_OPIPE_CONNECTIONS


	)

24 
MemRegi⁄Api
 
	gmyPl
;

26 
	#USE_MEM_LINE_BUFFER_API


	)

27 
UI¡8
 
DDR_DATA
 
	gMemRegi⁄Api_dmaTe°_buf„r
[
MEM_API_TEST_BAYER_WIDTH
* 
MEM_API_TEST_BAYER_HEIGHT
* 3 ]
ALIGNED
(8);

29 
UI¡16
 
	$ALIGNED
(8Ë
lscMesh
[44 * 58] =

75 
	}
};

77 #ifde‡
SIPP_VCS


78 
u64
 
	gcy˛es_ñ≠£d
;

79 
tyTimeSèmp
 
	gtimî_d©a
;

81 #ifde‡
USE_MEM_LINE_BUFFER_API


82 
SùpMemRegi⁄
 
	gCmxMemRegi⁄s
[] =

85 .
ªgi⁄Off£t
 = 0x80000,

86 .
	gªgi⁄Size
 = 0x10000,

87 .
	gªgi⁄U£d
 = 0x0,

90 .
	gªgi⁄Off£t
 = 0xA0000,

91 .
	gªgi⁄Size
 = 0x10000,

92 .
	gªgi⁄U£d
 = 0x0,

95 .
	gªgi⁄Off£t
 = 0xC0000,

96 .
	gªgi⁄Size
 = 0x10000,

97 .
	gªgi⁄U£d
 = 0x0,

100 .
	gªgi⁄Off£t
 = 0xE0000,

101 .
	gªgi⁄Size
 = 0x10000,

102 .
	gªgi⁄U£d
 = 0x0,

110 
	$maö
 (
¨gc
, *
¨gv
[])

112 
	`UNUSED
 (
¨gc
);

113 
	`UNUSED
 (
¨gv
);

114 
u32
 
sùpEº‹Log
[
SIPP_ERROR_HISTORY_SIZE
];

116 
	`sùpPœtf‹mInô
 ();

118 #i‡
	`deföed
(
SIPP_VCS
)

119 
	`unôTe°Inô
 ();

120 
	`DrvTimîInô
 ();

121 
	`DrvC¥Inô
 ();

122 
	`DrvC¥C⁄figuªSy°emClk
 (246000, 1, 1);

123 
	`DrvDdrInôüli£
 (
NULL
);

126 
	`buûdMemRegi⁄Api
 (&
myPl
);

128 i‡(
	`sùpPùeGëEº‹Sètus
 (
myPl
.
∂
))

130 
u32
 
îrNum
;

131 
	`¥ötf
 ("Pipeline creationÉrror\nError codes:\n");

132 
îrNum
 = 
	`sùpGëEº‹Hi°‹y
 (
sùpEº‹Log
);

133 
îrNum
)

135 
	`¥ötf
 ("%08lx\n", 
sùpEº‹Log
[
îrNum
 - 0x1]);

136 
îrNum
--;

140 
	`c⁄figMemRegi⁄Api
 (&
myPl
);

142 #i‡
	`deföed
(
SIPP_VCS
)

147 #ifde‡
DISABLE_OPIPE_CONNECTIONS


148 
myPl
.
∂
->
Êags
 |(
PLF_DISABLE_OPIPE_CONS
);

151 #ifde‡
USE_MEM_LINE_BUFFER_API


152 
	`sùpAŒocCmxMemRegi⁄
 (
myPl
.
∂
,

153 
CmxMemRegi⁄s
);

156 
	`sùpFöÆizePùñöe
 (
myPl
.
∂
);

159 
	`ªadMemRegi⁄ApiI≈ut
 (&
myPl
);

161 #i‡
	`deföed
(
SIPP_VCS
)

162 
	`DrvTimîSèπTicksCou¡
 (&
timî_d©a
);

163 
	`DrvTimîGëEœp£dTicks
 (&
timî_d©a
, &
cy˛es_ñ≠£d
);

166 
	`sùpPro˚ssFøme
 (
myPl
.
∂
);

168 i‡(
	`sùpPùeGëEº‹Sètus
 (
myPl
.
∂
))

170 
u32
 
îrNum
;

171 
	`¥ötf
 ("PipelineÑuntimeÉrror\nError codes:\n");

172 
îrNum
 = 
	`sùpGëEº‹Hi°‹y
 (
sùpEº‹Log
);

173 
îrNum
)

175 
	`¥ötf
 ("%08lx\n", 
sùpEº‹Log
[
îrNum
 - 0x1]);

176 
îrNum
--;

180 #i‡
	`deföed
(
SIPP_VCS
)

182 
	`DrvTimîGëEœp£dTicks
 (&
timî_d©a
, &
cy˛es_ñ≠£d
);

183 
	`¥ötf
 ("Cy˛es: %Œu\n", 
cy˛es_ñ≠£d
);

186 
	`wrôeMemRegi⁄ApiOuçut
 (&
myPl
);

188 
	`sùpRdFûeU8
(
MemRegi⁄Api_dmaTe°_buf„r
, 
MEM_API_TEST_BAYER_WIDTH
* 
MEM_API_TEST_BAYER_HEIGHT
* 3, "../../../../../../resources/test_522x128_RGB.raw");

189 
	`sùpDbgCom∑ªU8
(
MemRegi⁄Api_dmaTe°_buf„r
, 
MemRegi⁄Api_dmaOut0_buf„r
, 
MEM_API_TEST_BAYER_WIDTH
* 
MEM_API_TEST_BAYER_HEIGHT
* 3);

191 
	`¥ötf
 ("Verification check complete\n");

193 
	`unôTe°FöÆRï‹t
 ();

195 
	}
}

	@Sipp/SippFw/memRegionApi/leon/pcDumpSchedule.hh

9 
SchedInfo
 
	gsùpDum≥dSched
[134] =

	@Sipp/SippFw/memRegionApi_01/leon/MemRegionApi.c

13 
	~"MemRegi⁄Api.h
"

15 
	~<ö˛ude/sùpHwDefs.h
>

16 
	~<¨ch/ma2x5x/ö˛ude/sùpHwDefs_ma2x5x.h
>

20 
UI¡16
 
DDR_DATA
 
	gMemRegi⁄Api_dmaIn0_buf„r
[
MEM_API_TEST_BAYER_WIDTH
* 
MEM_API_TEST_BAYER_HEIGHT
* 1 ]
ALIGNED
(8);

21 
UI¡8
 
DDR_DATA
 
	gMemRegi⁄Api_dmaOut0_buf„r
[
MEM_API_TEST_BAYER_WIDTH
* 
MEM_API_TEST_BAYER_HEIGHT
* 3 ]
ALIGNED
(8);

22 
UI¡16
 
DDR_DATA
 
	gMemRegi⁄Api_dmaOut1_buf„r
[
MEM_API_TEST_BAYER_WIDTH
* 
MEM_API_TEST_BAYER_HEIGHT
* 1 ]
ALIGNED
(8);

25 
	$ªadMemRegi⁄ApiI≈ut
(
MemRegi⁄Api
 *
pPl
)

27 
	`sùpRdFûeU8
((
UI¡8
*)
MemRegi⁄Api_dmaIn0_buf„r
,
MEM_API_TEST_BAYER_WIDTH
 * 
MEM_API_TEST_BAYER_HEIGHT
 * 1 * (
UI¡16
),"../../../../../../resources/test_522x128.raw");

29 ()(
pPl
);

31 
	}
}

33 
	$wrôeMemRegi⁄ApiOuçut
(
MemRegi⁄Api
 *
pPl
)

35 
	`sùpWrFûeU8
((
UI¡8
*)
MemRegi⁄Api_dmaOut0_buf„r
,
MEM_API_TEST_BAYER_WIDTH
 * 
MEM_API_TEST_BAYER_HEIGHT
 * 3 * (UInt8),"output0.raw");

36 
	`sùpWrFûeU8
((
UI¡8
*)
MemRegi⁄Api_dmaOut1_buf„r
,
MEM_API_TEST_BAYER_WIDTH
 * 
MEM_API_TEST_BAYER_HEIGHT
 * 1 * (
UI¡16
),"output1.raw");

38 ()(
pPl
);

40 
	}
}

42 
	$buûdMemRegi⁄Api
(
MemRegi⁄Api
 *
pPl
)

45 
pPl
->
∂
 = 
	`sùpCª©ePùñöe
(
SIPP_PIPE_START_SLICE
, 
SIPP_PIPE_END_SLICE
, 
	`SIPP_MBIN
(
mböImgSùp
));

48 
pPl
->
dmaIn0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x00, 
MEM_API_TEST_BAYER_WIDTH
, 
MEM_API_TEST_BAYER_HEIGHT
, 
	`N_PL
(1), 
	`SZ
(
UI¡16
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

49 
pPl
->
lscMa2x5x0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x0, 
MEM_API_TEST_BAYER_WIDTH
, 
MEM_API_TEST_BAYER_HEIGHT
, 
	`N_PL
(1), 
	`SZ
(
UI¡16
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_LSC_ID
, 0);

50 
pPl
->
øwMa2x5x0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x0, 
MEM_API_TEST_BAYER_WIDTH
, 
MEM_API_TEST_BAYER_HEIGHT
, 
	`N_PL
(1), 
	`SZ
(
UI¡16
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_RAW_ID
, 0);

51 
pPl
->
debayîMa2x5x0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x0, 
MEM_API_TEST_BAYER_WIDTH
, 
MEM_API_TEST_BAYER_HEIGHT
, 
	`N_PL
(3), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DBYR_ID
, 0);

52 
	`sùpFûãrAddOBuf
(
pPl
->
debayîMa2x5x0
, 1, (
UI¡8
));

53 
pPl
->
dmaOut0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x00, 
MEM_API_TEST_BAYER_WIDTH
, 
MEM_API_TEST_BAYER_HEIGHT
, 
	`N_PL
(3), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

54 
pPl
->
dmaOut1
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x00, 
MEM_API_TEST_BAYER_WIDTH
, 
MEM_API_TEST_BAYER_HEIGHT
, 
	`N_PL
(1), 
	`SZ
(
UI¡16
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

57 
	`sùpLökFûãr
(
pPl
->
lscMa2x5x0
,ÖPl->
dmaIn0
, 1,0 );

58 
	`sùpLökFûãr
(
pPl
->
øwMa2x5x0
,ÖPl->
lscMa2x5x0
, 5,5 );

59 
	`sùpLökFûãr
(
pPl
->
debayîMa2x5x0
,ÖPl->
øwMa2x5x0
, 11,11 );

60 
	`sùpLökFûãr
(
pPl
->
dmaOut0
,ÖPl->
debayîMa2x5x0
, 1,1 );

61 
	`sùpLökFûãr
(
pPl
->
dmaOut1
,ÖPl->
debayîMa2x5x0
, 1,1 );

62 
	`sùpLökFûãrSëOBuf
(
pPl
->
dmaOut1
,ÖPl->
debayîMa2x5x0
, 1);

64 
	}
}

67 
	$c⁄figMemRegi⁄Api
(
MemRegi⁄Api
 *
pPl
)

69 
DmaP¨am
 *
dmaIn0Cfg
 = (DmaP¨am *)
pPl
->
dmaIn0
->
∑øms
;

70 
LscP¨am
 *
lscMa2x5x0Cfg
 = (LscP¨am *)
pPl
->
lscMa2x5x0
->
∑øms
;

71 
RawP¨am
 *
øwMa2x5x0Cfg
 = (RawP¨am *)
pPl
->
øwMa2x5x0
->
∑øms
;

72 
DbyrP¨am
 *
debayîMa2x5x0Cfg
 = (DbyrP¨am *)
pPl
->
debayîMa2x5x0
->
∑øms
;

73 
DmaP¨am
 *
dmaOut0Cfg
 = (DmaP¨am *)
pPl
->
dmaOut0
->
∑øms
;

74 
DmaP¨am
 *
dmaOut1Cfg
 = (DmaP¨am *)
pPl
->
dmaOut1
->
∑øms
;

79 
lscMa2x5x0Cfg
->
gmBa£

lscMesh
;

80 
lscMa2x5x0Cfg
->
gmWidth

LSC_GAIN_MAP_W
;

81 
lscMa2x5x0Cfg
->
gmHeight

LSC_GAIN_MAP_H
;

82 
lscMa2x5x0Cfg
->
d©aF‹m©
=
	`SIPP_LSC_CFG_FORMAT
(
BAYER
);

83 
lscMa2x5x0Cfg
->
d©aWidth
=
BAYER_BITS
;

84 
øwMa2x5x0Cfg
->
grgbPœt

	`RAW_GRGB_PLATO
(
GRGB_IMBAL_PLAT_DARK
,
GRGB_IMBAL_PLAT_BRIGHT
);

85 
øwMa2x5x0Cfg
->
grgbDeˇy
=
	`RAW_GRGB_DECAY
(
GRGB_IMBAL_DECAY_BRIGHT
,
GRGB_IMBAL_DECAY_DARK
);

86 
øwMa2x5x0Cfg
->
badPixCfg
=
	`RAW_BAD_PIX_CFG
(
BAD_PIX_NOISE_LEVEL
,
BAD_PIX_ALPHA_G_HOT
,
BAD_PIX_ALPHA_G_COLD
,
BAD_PIX_ALPHA_RB_HOT
,
BAD_PIX_ALPHA_RB_COLD
);

87 
øwMa2x5x0Cfg
->
cfg

	`RAW_CFG
(
BAYER
,
BAYER_PATTERN
,1,0,0,0,(
BAYER_BITS
-1),
GRGB_IMBAL_THRESHOLD
,0,0,1,0,1);

88 
øwMa2x5x0Cfg
->
gaöS©
[0]=((
DIGI_SAT_GR
 << 16Ë| 
DIGI_GAIN_GR
);

89 
øwMa2x5x0Cfg
->
gaöS©
[1]=((
DIGI_SAT_GB
 << 16Ë| 
DIGI_GAIN_GB
);

90 
øwMa2x5x0Cfg
->
gaöS©
[2]=((
DIGI_SAT_R
 << 16Ë| 
DIGI_GAIN_R
);

91 
øwMa2x5x0Cfg
->
gaöS©
[3]=((
DIGI_SAT_B
 << 16Ë| 
DIGI_GAIN_B
);

92 
øwMa2x5x0Cfg
->
°©sBa£
=0;

93 
øwMa2x5x0Cfg
->
°©sPœ√s
=
	`RAW_STATS_PLANES
(0,0,0,0,0,0);

94 
øwMa2x5x0Cfg
->
°©sP©chCfg
=
	`RAW_PATCH_CFG
(0,0,0,0);

95 
øwMa2x5x0Cfg
->
°©sP©chSèπ
=
	`RAW_PATCH_START
(0,0);

96 
øwMa2x5x0Cfg
->
°©sP©chSkù
=
	`RAW_PATCH_START
(0,0);

97 
øwMa2x5x0Cfg
->
°©sThªsh
=0;

98 
øwMa2x5x0Cfg
->
afF1c€fs
[0]=0;

99 
øwMa2x5x0Cfg
->
afF1c€fs
[1]=0;

100 
øwMa2x5x0Cfg
->
afF1c€fs
[2]=0;

101 
øwMa2x5x0Cfg
->
afF1c€fs
[3]=0;

102 
øwMa2x5x0Cfg
->
afF1c€fs
[4]=0;

103 
øwMa2x5x0Cfg
->
afF1c€fs
[5]=0;

104 
øwMa2x5x0Cfg
->
afF1c€fs
[6]=0;

105 
øwMa2x5x0Cfg
->
afF1c€fs
[7]=0;

106 
øwMa2x5x0Cfg
->
afF1c€fs
[8]=0;

107 
øwMa2x5x0Cfg
->
afF1c€fs
[9]=0;

108 
øwMa2x5x0Cfg
->
afF1c€fs
[10]=0;

109 
øwMa2x5x0Cfg
->
afF2c€fs
[0]=0;

110 
øwMa2x5x0Cfg
->
afF2c€fs
[1]=0;

111 
øwMa2x5x0Cfg
->
afF2c€fs
[2]=0;

112 
øwMa2x5x0Cfg
->
afF2c€fs
[3]=0;

113 
øwMa2x5x0Cfg
->
afF2c€fs
[4]=0;

114 
øwMa2x5x0Cfg
->
afF2c€fs
[5]=0;

115 
øwMa2x5x0Cfg
->
afF2c€fs
[6]=0;

116 
øwMa2x5x0Cfg
->
afF2c€fs
[7]=0;

117 
øwMa2x5x0Cfg
->
afF2c€fs
[8]=0;

118 
øwMa2x5x0Cfg
->
afF2c€fs
[9]=0;

119 
øwMa2x5x0Cfg
->
afF2c€fs
[10]=0;

120 
øwMa2x5x0Cfg
->
afMöThªsh
=0;

121 
øwMa2x5x0Cfg
->
afSubåa˘
=0;

122 
øwMa2x5x0Cfg
->
afP©chCfg
=0;

123 
øwMa2x5x0Cfg
->
afP©chSèπ
=0;

124 
øwMa2x5x0Cfg
->
afSètsBa£
=0;

125 
øwMa2x5x0Cfg
->
hi°LumaBa£
=0;

126 
øwMa2x5x0Cfg
->
hi°RgbBa£
=0;

127 
debayîMa2x5x0Cfg
->
cfg

	`DEBAYER_CFG
(
BAYER_PATTERN
,0,0,
BAYER_BITS
,8,
P_RGB
,3,0);

128 
debayîMa2x5x0Cfg
->
thªsh
=
	`DEBAYER_THRESH
(0,0,1,1,0,0);

129 
debayîMa2x5x0Cfg
->
dew‹mCfg
=
	`DEBAYER_DEWORM
(0,0);

130 
debayîMa2x5x0Cfg
->
lumaWeight
=0;

131 
dmaIn0Cfg
->
ddrAddr
 = (
UI¡32
)&
MemRegi⁄Api_dmaIn0_buf„r
;

132 
dmaOut0Cfg
->
ddrAddr
 = (
UI¡32
)&
MemRegi⁄Api_dmaOut0_buf„r
;

133 
dmaOut1Cfg
->
ddrAddr
 = (
UI¡32
)&
MemRegi⁄Api_dmaOut1_buf„r
;

136 
	}
}

	@Sipp/SippFw/memRegionApi_01/leon/MemRegionApi.h

13 #i‚de‡
__MEMREGIONAPI_H__


14 
	#__MEMREGIONAPI_H__


	)

16 
	~<sùp.h
>

17 
	~<sùpTe°Comm⁄.h
>

19 
	~"MemRegi⁄ApiP¨ams.h
"

23 
UI¡16
 
DDR_DATA
 
MemRegi⁄Api_dmaIn0_buf„r
[ 
MEM_API_TEST_BAYER_WIDTH
 * 
MEM_API_TEST_BAYER_HEIGHT
 * 1 ]
ALIGNED
(8);

24 
UI¡8
 
DDR_DATA
 
MemRegi⁄Api_dmaOut0_buf„r
[ 
MEM_API_TEST_BAYER_WIDTH
 * 
MEM_API_TEST_BAYER_HEIGHT
 * 3 ]
ALIGNED
(8);

25 
UI¡16
 
DDR_DATA
 
MemRegi⁄Api_dmaOut1_buf„r
[ 
MEM_API_TEST_BAYER_WIDTH
 * 
MEM_API_TEST_BAYER_HEIGHT
 * 1 ]
ALIGNED
(8);

29 
	sMemRegi⁄Api


32 
SùpPùñöe
 *
	m∂
;

35 
SùpFûãr
 *
	mdmaIn0
;

36 
SùpFûãr
 *
	mdmaOut0
;

37 
SùpFûãr
 *
	mdebayîMa2x5x0
;

38 
SùpFûãr
 *
	mdmaOut1
;

39 
SùpFûãr
 *
	mlscMa2x5x0
;

40 
SùpFûãr
 *
	møwMa2x5x0
;

42 } 
	tMemRegi⁄Api
;

44 
ªadMemRegi⁄ApiI≈ut
(
MemRegi⁄Api
 *
pPl
);

45 
wrôeMemRegi⁄ApiOuçut
(
MemRegi⁄Api
 *
pPl
);

47 
buûdMemRegi⁄Api
(
MemRegi⁄Api
 *
pPl
);

48 
c⁄figMemRegi⁄Api
(
MemRegi⁄Api
 *
pPl
);

	@Sipp/SippFw/memRegionApi_01/leon/MemRegionApiParams.h

3 
	#SIPP_TEST_FIRST_SLICE
 4

	)

4 
	#SIPP_TEST_LAST_SLICE
 11

	)

5 
	#SIPP_PIPE_START_SLICE
 8

	)

6 
	#SIPP_PIPE_END_SLICE
 11

	)

8 
	#SLICE_SIZE
 128 * 1024

	)

9 
	#SLICE_INC
 32 * 1024

	)

10 
	#BASE_ADDRESS
 0x78000000

	)

16 
	#MEM_API_TEST_BAYER_WIDTH
 522

	)

17 
	#MEM_API_TEST_BAYER_HEIGHT
 128

	)

19 
	#BAYER_BITS
 10

	)

22 
	#LSC_GAIN_MAP_W
 58

	)

23 
	#LSC_GAIN_MAP_H
 44

	)

26 
UI¡16
 
lscMesh
[44 * 58];

32 
	#BAD_PIX_ALPHA_G_HOT
 0x6

33 
	#BAD_PIX_ALPHA_RB_HOT
 0x6

34 
	#BAD_PIX_ALPHA_G_COLD
 0x6

35 
	#BAD_PIX_ALPHA_RB_COLD
 0x6

36 
	#BAD_PIX_NOISE_LEVEL
 0x00a3

37 

	)

40 
	#GRGB_IMBAL_PLAT_DARK
 576

	)

41 
	#GRGB_IMBAL_DECAY_DARK
 640

	)

42 
	#GRGB_IMBAL_PLAT_BRIGHT
 800

	)

43 
	#GRGB_IMBAL_DECAY_BRIGHT
 960

	)

44 
	#GRGB_IMBAL_THRESHOLD
 1000

45 

	)

46 
	#BAYER_PATTERN
 
GRBG


	)

49 
	#DIGI_GAIN_GR
 0x0104

50 
	#DIGI_GAIN_GB
 0x0104

51 
	#DIGI_GAIN_R
 0x0104

52 
	#DIGI_GAIN_B
 0x0104

53 

	)

54 
	#DIGI_SAT_GR
 1023

55 
	#DIGI_SAT_GB
 1023

56 
	#DIGI_SAT_R
 1023

57 
	#DIGI_SAT_B
 1023

58 

	)

	@Sipp/SippFw/memRegionApi_01/leon/main.c

11 
	~<sùp.h
>

12 
	~<sùpTe°Comm⁄.h
>

14 #i‡
deföed
(
SIPP_VCS
)

15 
	~<UnôTe°Api.h
>

16 
	~<DrvTimî.h
>

17 
	~<DrvDdr.h
>

18 
	~<DrvLe⁄L2C.h
>

19 
	~<swcLe⁄Utûs.h
>

22 
	~"MemRegi⁄Api.h
"

23 
	~"MemRegi⁄ApiP¨ams.h
"

29 
MemRegi⁄Api
 
	gmyPl
;

31 c⁄° 
u32
 
	gex≥˘edCRC
 = 0x6de21d21;

33 
	#USE_MEM_LINE_BUFFER_API


	)

34 
UI¡8
 
DDR_DATA
 
	gMemRegi⁄Api_dmaTe°_buf„r
[
MEM_API_TEST_BAYER_WIDTH
* 
MEM_API_TEST_BAYER_HEIGHT
* 3 ]
ALIGNED
(8);

36 
UI¡16
 
	$ALIGNED
(8Ë
lscMesh
[44 * 58] =

82 
	}
};

84 #ifde‡
SIPP_VCS


85 
u64
 
	gcy˛es_ñ≠£d
;

86 
tyTimeSèmp
 
	gtimî_d©a
;

88 #ifde‡
USE_MEM_LINE_BUFFER_API


89 
SùpMemRegi⁄
 
	gCmxMemRegi⁄s
[] =

92 .
ªgi⁄Off£t
 = 0x80000,

93 .
	gªgi⁄Size
 = 0x10000,

94 .
	gªgi⁄U£d
 = 0x0,

97 .
	gªgi⁄Off£t
 = 0xA0000,

98 .
	gªgi⁄Size
 = 0x10000,

99 .
	gªgi⁄U£d
 = 0x0,

102 .
	gªgi⁄Off£t
 = 0xC0000,

103 .
	gªgi⁄Size
 = 0x10000,

104 .
	gªgi⁄U£d
 = 0x0,

107 .
	gªgi⁄Off£t
 = 0xE0000,

108 .
	gªgi⁄Size
 = 0x10000,

109 .
	gªgi⁄U£d
 = 0x0,

116 #i‚de‡
SIPP_TEST_SYNC_API


117 vﬁ©ûê
u32
 
	gã°Com∂ëe
 = 0;

121 #i‚de‡
SIPP_TEST_SYNC_API


122 
	$≠pSùpCÆlback
 (
SùpPùñöe
 * 
pPùñöe
,

123 
eSIPP_PIPELINE_EVENT
 
eEvít
,

124 
SIPP_PIPELINE_EVENT_DATA
 * 
±EvítD©a
)

126 
	`UNUSED
 (
pPùñöe
);

127 
	`UNUSED
 (
±EvítD©a
);

129 i‡(
eEvít
 =
eSIPP_PIPELINE_FRAME_DONE
)

131 
ã°Com∂ëe
 = 1;

134 
	}
}

137 
	$maö
 (
¨gc
, *
¨gv
[])

139 
	`UNUSED
 (
¨gc
);

140 
	`UNUSED
 (
¨gv
);

141 
u32
 
sùpEº‹Log
[
SIPP_ERROR_HISTORY_SIZE
];

143 #i‡
	`deföed
(
SIPP_VCS
)

144 
	`unôTe°Inô
 ();

145 
	`DrvC¥SèπAŒClocks
 ();

146 
	`DrvC¥Inô
 ();

147 
	`DrvTimîInô
 ();

148 
	`DrvLL2CInôWrôeThrough
 ();

150 
	`DrvDdrInôüli£
 (
NULL
);

153 #ifde‡
USE_CMX_DMA_NEW_DRIVER


154 
	`DrvCmxDmaInôülize
 ((
DrvCmxDmaSëupSåu˘
 *)
NULL
);

156 
	`DrvCmxDmaInôDeÁu…
 ();

161 
	`sùpSëInôMask
 (0x0);

163 i‡(
	`sùpInôülize
 (Ë=
FALSE
)

166 
	`exô
 (0x0);

169 i‡(
PROCESS_LEON_OS
 =
	`swcWhoAmI
())

171 
	`¥ötf
 ("App Starting on LEON OS\n");

172 
	`¥ötf
 ("Please make sure IRQ sources for dynamicallyÑoute between LeonOSánd LeonRTáre set\n");

176 
	`¥ötf
 ("App Starting on LEON RT\n");

179 #i‚de‡
SIPP_TEST_SYNC_API


181 
	`swcLe⁄SëPIL
 (0);

185 
uöt32_t
 vﬁ©ûê* 
i
 = (uöt32_àvﬁ©ûê*)(
BASE_ADDRESS
 + 
SLICE_SIZE
 * 
SIPP_TEST_FIRST_SLICE
); i < (uöt32_àvﬁ©ûê*)(BASE_ADDRESS + SLICE_SIZE * (
SIPP_TEST_LAST_SLICE
 + 0x1)); i++)

187 *
i
 = 0x1337beef;

190 
	`buûdMemRegi⁄Api
 (&
myPl
);

192 i‡(
	`sùpPùeGëEº‹Sètus
 (
myPl
.
∂
))

194 
u32
 
îrNum
;

195 
	`¥ötf
 ("Pipeline creationÉrror\nError codes:\n");

196 
îrNum
 = 
	`sùpGëEº‹Hi°‹y
 (
sùpEº‹Log
);

197 
îrNum
)

199 
	`¥ötf
 ("%08lx\n", 
sùpEº‹Log
[
îrNum
 - 0x1]);

200 
îrNum
--;

204 #i‚de‡
SIPP_TEST_SYNC_API


206 
	`sùpRegi°îEvítCÆlback
 (
myPl
.
∂
,

207 
≠pSùpCÆlback
);

211 
	`c⁄figMemRegi⁄Api
 (&
myPl
);

213 #ifde‡
DISABLE_OPIPE_CONNECTIONS


214 
myPl
.
∂
->
Êags
 |(
PLF_DISABLE_OPIPE_CONS
);

218 
myPl
.
∂
->
Êags
 |
PLF_CONSIDER_OPIPE_RT
;

220 
	`sùpChoo£MemPoﬁ
 (&
myPl
.
∂
->
tHópMCB
,

221 
vPoﬁScheduÀTemp
, 1);

223 #ifde‡
USE_MEM_LINE_BUFFER_API


224 
	`sùpAŒocCmxMemRegi⁄
 (
myPl
.
∂
,

225 
CmxMemRegi⁄s
);

228 
	`sùpFöÆizePùñöe
 (
myPl
.
∂
);

231 
	`ªadMemRegi⁄ApiI≈ut
 (&
myPl
);

233 #i‡
	`deföed
(
SIPP_VCS
)

234 
	`DrvTimîSèπTicksCou¡
 (&
timî_d©a
);

235 
	`DrvTimîGëEœp£dTicks
 (&
timî_d©a
, &
cy˛es_ñ≠£d
);

238 #ifde‡
SIPP_TEST_SYNC_API


239 
	`sùpPro˚ssFøme
 (
myPl
.
∂
);

241 
	`sùpPro˚ssFømeNB
(
myPl
.
∂
);

242  
ã°Com∂ëe
 == 0x0 )

249 i‡(
	`sùpPùeGëEº‹Sètus
 (
myPl
.
∂
))

251 
u32
 
îrNum
;

252 
	`¥ötf
 ("PipelineÑuntimeÉrror\nError codes:\n");

253 
îrNum
 = 
	`sùpGëEº‹Hi°‹y
 (
sùpEº‹Log
);

254 
îrNum
)

256 
	`¥ötf
 ("%08lx\n", 
sùpEº‹Log
[
îrNum
 - 0x1]);

257 
îrNum
--;

261 #i‡
	`deföed
(
SIPP_VCS
)

263 
	`DrvTimîGëEœp£dTicks
 (&
timî_d©a
, &
cy˛es_ñ≠£d
);

264 
	`¥ötf
 ("Cy˛es: %Œu\n", 
cy˛es_ñ≠£d
);

267 
	`wrôeMemRegi⁄ApiOuçut
 (&
myPl
);

269 
	`sùpRdFûeU8
(
MemRegi⁄Api_dmaTe°_buf„r
, 
MEM_API_TEST_BAYER_WIDTH
* 
MEM_API_TEST_BAYER_HEIGHT
* 3, "../../../../../../resources/test_522x128_RGB.raw");

270 
	`sùpDbgCom∑ªU8
(
MemRegi⁄Api_dmaTe°_buf„r
, 
MemRegi⁄Api_dmaOut0_buf„r
, 
MEM_API_TEST_BAYER_WIDTH
* 
MEM_API_TEST_BAYER_HEIGHT
* 3);

272 #ifde‡
CHECK_TOUCHED_REGION


273 
⁄_åack
 = 1;

274 
uöt32_t
 vﬁ©ûê* 
j
;

275 
j
 = (
uöt32_t
 vﬁ©ûê*Ë(
BASE_ADDRESS
 + 
SLICE_SIZE
 * 
SIPP_TEST_FIRST_SLICE
);

276 
j
 < (
uöt32_t
 vﬁ©ûê*Ë(
BASE_ADDRESS
 + 
SLICE_SIZE
 * (
SIPP_TEST_LAST_SLICE
 + 0x1)); j++)

278 i‡(*
j
 != 0x1337beef)

280 i‡(
⁄_åack
)

282 
	`¥ötf
("%∞tÿ", 
j
);

283 
⁄_åack
 = 0;

288 i‡(!
⁄_åack
)

290 
	`¥ötf
("%p\n", 
j
 - 1);

291 
⁄_åack
 = 1;

296 i‡(!
⁄_åack
)

298 
	`¥ötf
("%p\n", 
j
 - 1);

303 
uöt32_t
 vﬁ©ûê* 
¶i˚
;

304 
¶i˚
 = (
uöt32_t
 vﬁ©ûê*Ë(
BASE_ADDRESS
 + 
SLICE_SIZE
 * 
SIPP_PIPE_START_SLICE
);

305 
¶i˚
 < (
uöt32_t
 vﬁ©ûê*Ë(
BASE_ADDRESS
 + 
SLICE_SIZE
 * (
SIPP_PIPE_END_SLICE
 + 0x1)); sli˚ +
SLICE_INC
)

307 
	`unôTe°CrcCheck
((*)
¶i˚
, 
SLICE_SIZE
, 
ex≥˘edCRC
);

310 
	`unôTe°FöÆRï‹t
 ();

312 
	}
}

	@Sipp/SippFw/sippPerfTestBed/leon/appParams.h

8 
	#KERNEL_SIZE
 5

	)

10 
u16
 
	gc⁄vM©rix
[
KERNEL_SIZE
 * KERNEL_SIZE] =

19 
u16
 
	ghwKî
[
KERNEL_SIZE
 * KERNEL_SIZE] =

	@Sipp/SippFw/sippPerfTestBed/leon/app_config.c

11 
	~<sùp.h
>

12 
	~"≠p_c⁄fig.h
"

13 
	~<°dio.h
>

14 
	~<°rög.h
>

15 
	~<DrvC¥.h
>

16 
	~<DrvDdr.h
>

17 
	~<DrvLe⁄L2C.h
>

18 
	~"swcLe⁄Utûs.h
"

19 
	~"UnôTe°Api.h
"

23 
	#MSS_CLOCKS_APP
 (
DEV_MSS_APB_SLV
 | \

	)

24 
	gDEV_MSS_APB2_CTRL
 | \

25 
	gDEV_MSS_RTBRIDGE
 | \

26 
	gDEV_MSS_RTAHB_CTRL
 | \

27 
	gDEV_MSS_LRT
 | \

28 
	gDEV_MSS_LRT_DSU
 | \

29 
	gDEV_MSS_LRT_L2C
 | \

30 
	gDEV_MSS_LRT_ICB
 | \

31 
	gDEV_MSS_AXI_BRIDGE
 | \

32 
	gDEV_MSS_MXI_CTRL
 | \

33 
	gDEV_MSS_MXI_DEFSLV
 | \

34 
	gDEV_MSS_AXI_MON
 | \

35 
	gDEV_MSS_AMC
 | \

36 
	gDEV_MSS_SIPP
 | \

37 
	gDEV_MSS_TIM
 )

39 
	#OPIPE_CLOCKS
 (
DEV_SIPP_SIGMA
 | \

	)

40 
	gDEV_SIPP_LSC
 | \

41 
	gDEV_SIPP_RAW
 | \

42 
	gDEV_SIPP_DBYR
 | \

43 
	gDEV_SIPP_DOGL
 | \

44 
	gDEV_SIPP_LUMA
 | \

45 
	gDEV_SIPP_SHARPEN
 | \

46 
	gDEV_SIPP_CGEN
 | \

47 
	gDEV_SIPP_MED
 | \

48 
	gDEV_SIPP_CHROMA
 | \

49 
	gDEV_SIPP_CC
 | \

50 
	gDEV_SIPP_LUT
 | \

51 
	gDEV_SIPP_EDGE_OP
 | \

52 
	gDEV_SIPP_CONV
 | \

53 
	gDEV_SIPP_HARRIS
 | \

54 
	gDEV_SIPP_UPFIRDN0
 | \

55 
	gDEV_SIPP_UPFIRDN1
 | \

56 
	gDEV_SIPP_UPFIRDN2
 | \

57 
	gDEV_SIPP_MIPI_RX0
 | \

58 
	gDEV_MSS_SIPP_CLK_GATES
 | \

59 
	gDEV_SIPP_MIPI
 | \

60 
	gDEV_SIPP_SIPP_ABPSLV
 | \

61 
	gDEV_SIPP_APB_SLV
)

65 
	$ªdu˚Ba£löePowî
()

67 
	`DrvC¥PowîTu∫OffI¶™d
(
POWER_ISLAND_USB
);

69 
u32
 
u∑ClocksToTu∫Off
 = ~(0

70 | 
DEV_UPA_SH0


71 | 
DEV_UPA_SH1


72 | 
DEV_UPA_SH2


73 | 
DEV_UPA_SH3


74 | 
DEV_UPA_SH4


75 | 
DEV_UPA_SH5


76 | 
DEV_UPA_SH6


77 | 
DEV_UPA_SH7


78 | 
DEV_UPA_SH8


79 | 
DEV_UPA_SH9


80 | 
DEV_UPA_SH10


81 | 
DEV_UPA_SH11


82 | 
DEV_UPA_SHAVE_L2


83 | 
DEV_UPA_CDMA


84 | 
DEV_UPA_CTRL


85 | (1 << 
UPA_MTX
)

87 
u32
 
auxClocksToTu∫Off
 = ~(0

88 | 
AUX_CLK_MASK_DDR_REF


89 | 
AUX_CLK_MASK_DDR_CORE_CTRL


90 | 
AUX_CLK_MASK_DDR_CORE_PHY


91 | 
AUX_CLK_MASK_UART


92 | (1<< 
CSS_AUX_TSENS
)

94 
u32
 
mssClocksToTu∫Off
 = 0

95 | 
DEV_MSS_AXI_BRIDGE


96 | 
DEV_MSS_MXI_DEFSLV


97 | 
DEV_MSS_AXI_MON


98 | 
DEV_MSS_NAL


99 | 
DEV_MSS_CIF0


100 | 
DEV_MSS_CIF1


101 | 
DEV_MSS_LCD


103 
u64
 
cssClocksToTu∫Off
 = ~(0

104 | 
DEV_CSS_AON


105 | 
DEV_CSS_DSS_BUS


106 | 
DEV_CSS_DSS_BUS_AAXI


107 | 
DEV_CSS_LAHB2SHB


108 | 
DEV_CSS_SAHB2MAHB


109 | 
DEV_CSS_LAHB_CTRL


110 | 
DEV_CSS_APB4_CTRL


111 | 
DEV_CSS_MAHB_CTRL


112 | 
DEV_CSS_APB1_CTRL


113 | 
DEV_CSS_APB3_CTRL


114 | 
DEV_CSS_SAHB_CTRL


115 | 
DEV_CSS_UART


116 | 
DEV_CSS_JTAG


117 | 
DEV_CSS_LOS_L2C


118 | 
DEV_CSS_MSS_MAS


119 | 
DEV_CSS_UPA_MAS


120 | 
DEV_CSS_I2C2


121 | 
DEV_CSS_GPIO


125 
	`DrvC¥SysDevi˚A˘i⁄
(
UPA_DOMAIN
, 
DISABLE_CLKS
, 
u∑ClocksToTu∫Off
);

126 
	`DrvC¥SysDevi˚A˘i⁄
(
UPA_DOMAIN
, 
ASSERT_RESET
, 
u∑ClocksToTu∫Off
);

127 
	`DrvC¥SysDevi˚A˘i⁄
(
MSS_DOMAIN
, 
DISABLE_CLKS
, 
mssClocksToTu∫Off
);

128 
	`DrvC¥SysDevi˚A˘i⁄
(
MSS_DOMAIN
, 
ASSERT_RESET
, 
mssClocksToTu∫Off
);

129 
	`DrvC¥SysDevi˚A˘i⁄
(
CSS_AUX_DOMAIN
, 
DISABLE_CLKS
, 
auxClocksToTu∫Off
);

130 
	`DrvC¥SysDevi˚A˘i⁄
(
CSS_AUX_DOMAIN
, 
ASSERT_RESET
, 
auxClocksToTu∫Off
);

131 
	`DrvC¥SysDevi˚A˘i⁄
(
CSS_DOMAIN
, 
DISABLE_CLKS
, 
cssClocksToTu∫Off
);

135 
	}
}

138 
s32
 
	$öôClocksAndMem‹y
()

140 
s32
 
sc
;

142 
tyAuxClkDividîCfg
 
auxClkCfg
[] =

144 .
auxClockE«bÀMask
 = (
u32
)(1 << 
CSS_AUX_TSENS
),

145 .
auxClockSour˚
 = 
CLK_SRC_REFCLK0
,

146 .
auxClockDivNumî©‹
 = 1,

147 .
auxClockDivDíomö©‹
 = 10,

149 {
AUX_CLK_MASK_UART
, 
CLK_SRC_REFCLK0
, 96, 625},

153 
tySocClockC⁄fig
 
˛ockC⁄fig
 =

155 .
ªfClk0I≈utKhz
 = 12000,

156 .
ªfClk1I≈utKhz
 = 0,

157 .
èrgëPŒ0FªqKhz
 = 600000,

158 .
èrgëPŒ1FªqKhz
 = 0,

159 .
˛kSrcPŒ1
 = 
CLK_SRC_REFCLK0
,

160 .
ma°îClkDivNumî©‹
 = 1,

161 .
ma°îClkDivDíomö©‹
 = 1,

162 .
cssDssClockE«bÀMask
 = 
DEFAULT_CORE_CSS_DSS_CLOCKS
,

163 .
mssClockE«bÀMask
 = 
MSS_CLOCKS_APP
,

164 .
sùpClockE«bÀMask
 = 
OPIPE_CLOCKS
,

165 .
u∑ClockE«bÀMask
 = 
DEFAULT_UPA_CLOCKS
,

166 .
pAuxClkCfg
 = 
auxClkCfg
,

169 
	`DrvC¥SèπAŒClocks
();

170 
	`DrvLL2CInôWrôeThrough
();

171 
	`swcLe⁄SëPIL
(0);

173 
sc
 = 
	`DrvC¥Inô
();

174 if(
sc
)

175  
sc
;

176 
sc
 = 
	`DrvC¥SëupClocks
(&
˛ockC⁄fig
);

177 if(
sc
)

178  
sc
;

180 
	`DrvDdrInôüli£
(
NULL
);

184 
	}
}

	@Sipp/SippFw/sippPerfTestBed/leon/app_config.h

9 #i‚de‡
_APP_CONFIG_H_


10 
	#_APP_CONFIG_H_


	)

12 
s32
 
öôClocksAndMem‹y
 ();

13 
ªdu˚Ba£löePowî
 ();

	@Sipp/SippFw/sippPerfTestBed/leon/main.c

12 
	~<sùp.h
>

13 
	~<sùpTe°Comm⁄.h
>

14 
	~<°rög.h
>

16 #i‚de‡
SIPP_PC


17 
	~"≠p_c⁄fig.h
"

18 
	~<UnôTe°Api.h
>

19 
	~<DrvTimî.h
>

20 
	~<DrvDdr.h
>

21 
	~<DrvLe⁄L2C.h
>

24 
	~"≥rfTe°bed.h
"

30 
	#TESTBED_LOG_FILE
 "≥rfTe°BedLog.txt"

	)

36 vﬁ©ûê
u32
 
	gã°Com∂ëe
 = 0;

37 
PîfTe°Evít
 
	gtAµEvíts
[
PERF_TESTBED_EVENT_HISTORY_SIZE
];

38 
u32
 
	g≠pEvítIdx
 = 0;

39 
u8
 
	gnumPùesRunCål
[
PERF_TESTBED_NUM_PIPELINES
 + 1] = {0};

40 
u8
 
	gnumPùesRu¬ög
 = 0;

42 #i‚de‡
SIPP_PC


43 
u64
 
	g°¨tT
[
PERF_TESTBED_NUM_PIPELINES
], 
	gídT
[PERF_TESTBED_NUM_PIPELINES], 
	g‰ameT
[PERF_TESTBED_NUM_PIPELINES];

44 
u64
 
	gã°Sèπ
, 
	gã°End
;

47 
u8
 
	g≥rfTe°bedFûeDumpBuf„r
[
FILE_DUMP_BUFFER_MAX_SIZE
] 
SECTION
(".ddr.bss"Ë
ALIGNED
(8);

53 
≠pSùpCÆlback
 (
SùpPùñöe
 * 
pPùñöe
,

54 
eSIPP_PIPELINE_EVENT
 
eEvít
,

55 
SIPP_PIPELINE_EVENT_DATA
 * 
±EvítD©a
);

57 
≠pC⁄figuªPùñöes
 ( );

78 
	$≠pInô
 ()

80 
	`mem£t
 (
≥rfTe°bedPùeLi°
, 0x0, (perfTestbedPipeList));

81 
	}
}

98 
u32
 
	$≠pLookupH™dÀ
 (
SùpPùñöe
 * 
pPùñöe
)

100 
u32
 
idx
;

102 
idx
 = 0; idx < 
PERF_TESTBED_NUM_PIPELINES
; idx++)

104 
PîfTe°bedPùe
 * 
pùe
 = &
≥rfTe°bedPùeLi°
[
idx
];

106 i‡(
pùe
->
sùpFwH™dÀ
 =
pPùñöe
)

108  
idx
;

113 
	}
}

130 
	$≠pCª©ePùñöes
 ( )

132 
u32
 
idx
;

133 
idx
 = 0; idx < 
PERF_TESTBED_NUM_PIPELINES
; idx++ )

135 
PîfTe°bedPùe
 * 
pùe
 = &
≥rfTe°bedPùeLi°
[
idx
];

137 
pùe
->
sùpFwH™dÀ
 = 
	`sùpCª©ePùñöe
 (
¶i˚Fú°
[
idx
],

138 
¶i˚La°
[
idx
],

139 
	`SIPP_MBIN
(
mböImgSùp
));

141 i‡(
pùe
->
sùpFwH™dÀ
 =(
SùpPùñöe
 *)
NULL
)

143 
	`¥ötf
 ("*** Pipeline creation failure\n*** Test willÅerminateÉarly\n");

144 
	`exô
 (0x0);

148 
	`sùpRegi°îEvítCÆlback
 (
pùe
->
sùpFwH™dÀ
,

149 
≠pSùpCÆlback
);

151 
	}
}

168 
	$≠pPùeLogEvít
 (
PîfTe°bedPùe
 * 
pùe
,

169 
PERF_TB_PIPE_EVENT
 
evít
,

170 
u64
 
d©a
)

172 
	`UNUSED
(
d©a
);

174 
pùe
->
evítLi°
[pùe->
evítLi°WrPå
++] = 
evít
;

175 i‡(
pùe
->
evítLi°WrPå
 =
PERF_TESTBED_EVENT_PIPE_HISTORY_SIZE
)Öipe->eventListWrPtr = 0;

177 
	}
}

194 
PERF_TB_PIPE_EVENT
 
	$≠pPro˚ssEvít
 (
PîfTe°bedPùe
 * 
pùe
)

196 
PERF_TB_PIPE_EVENT
 
ªtVÆ
 = 
PERF_TB_PIPE_EVENT_NONE
;

198 i‡(
pùe
->
evítLi°WrPå
 !pùe->
evítLi°RdPå
 )

200 
ªtVÆ
 = 
pùe
->
evítLi°
[pùe->
evítLi°RdPå
++];

201 i‡(
pùe
->
evítLi°RdPå
 =
PERF_TESTBED_EVENT_PIPE_HISTORY_SIZE
)Öipe->eventListRdPtr = 0;

205  
ªtVÆ
;

206 
	}
}

223 
	$≠pSùpCÆlback
 (
SùpPùñöe
 * 
pPùñöe
,

224 
eSIPP_PIPELINE_EVENT
 
eEvít
,

225 
SIPP_PIPELINE_EVENT_DATA
 * 
±EvítD©a
)

227 #i‚de‡
SIPP_PC


229 
u32
 
pùeIdx
 = 
	`≠pLookupH™dÀ
 (
pPùñöe
);

230 
PîfTe°bedPùe
 * 
pùe
 = &
≥rfTe°bedPùeLi°
[
pùeIdx
];

233 
u32
 
°‹edIL
 = 
	`swcLe⁄GëPIL
 ();

234 
	`swcLe⁄SëPIL
 (15);

237 
	`UNUSED
(
±EvítD©a
);

239 i‡(
eEvít
 =
eSIPP_PIPELINE_FRAME_DONE
)

241 #ifde‡
SIPP_PERF_TB_DBG_PRINT


242 
	`¥ötf
 ("Pùê%u com∂ëe†‰ame\n", ()
pùeIdx
);

245 #i‚de‡
SIPP_PC


246 
	`DrvTimîGëSy°emTicks64
 (&
ídT
[
pùeIdx
]);

247 
tAµEvíts
[
≠pEvítIdx
].
pùeIdx
 = (
u8
)pipeIdx;

248 
tAµEvíts
[
≠pEvítIdx
].
evít
 = 
PERF_TB_PIPE_EVENT_FRAME_DONE
;

249 
tAµEvíts
[
≠pEvítIdx
++].
evítD©a
 = 
ídT
[
pùeIdx
];

251 i‡(
≠pEvítIdx
 =
PERF_TESTBED_EVENT_HISTORY_SIZE
)

253 
	`¥ötf
 ("Error : ExtendÖipe history size -ÉarlyÅermination\n");

254 
	`exô
 (0x0);

257 
	`≠pPùeLogEvít
 (
pùe
,

258 
PERF_TB_PIPE_EVENT_FRAME_DONE
,

259 
ídT
[
pùeIdx
]);

263 i‡(
eEvít
 =
eSIPP_PIPELINE_STARTED
)

265 #i‚de‡
SIPP_PC


267 
	`DrvTimîGëSy°emTicks64
 (&
°¨tT
[
pùeIdx
]);

268 
tAµEvíts
[
≠pEvítIdx
].
pùeIdx
 = (
u8
)pipeIdx;

269 
tAµEvíts
[
≠pEvítIdx
].
evít
 = 
PERF_TB_PIPE_EVENT_FRAME_STARTED
;

270 
tAµEvíts
[
≠pEvítIdx
++].
evítD©a
 = 
°¨tT
[
pùeIdx
];

272 i‡(
≠pEvítIdx
 =
PERF_TESTBED_EVENT_HISTORY_SIZE
)

274 
	`¥ötf
 ("Error : ExtendÖipe history size -ÉarlyÅermination\n");

275 
	`exô
 (0x0);

281 #i‚de‡
SIPP_PC


282 
	`swcLe⁄SëPIL
 (
°‹edIL
);

285 
	}
}

302 
u32
 
	$≠pCheckCom∂ëe
 ( )

304 
u32
 
ªtVÆ
 = 0x1;

305 
u32
 
idx
;

307 
idx
 = 0; idx < 
PERF_TESTBED_NUM_PIPELINES
; idx++ )

309 
PîfTe°bedPùe
 * 
pùe
 = &
≥rfTe°bedPùeLi°
[
idx
];

310 i‡(
pùe
->
eSèã
 !
PERF_TB_PIPE_STATE_COMPLETE
)

312 
ªtVÆ
 = 0x0;

317  
ªtVÆ
;

318 
	}
}

336 
	$≠pTask
 ()

338 
u32
 
pùeIdx
;

340 #i‚de‡
SIPP_PC


341 
	`DrvTimîGëSy°emTicks64
 (&
ã°Sèπ
);

344 
ã°Com∂ëe
 == 0)

346 
pùeIdx
 = 0x0;ÖùeIdx < 
PERF_TESTBED_NUM_PIPELINES
;ÖipeIdx++)

348 
PîfTe°bedPùe
 * 
pùe
 = &
≥rfTe°bedPùeLi°
[
pùeIdx
];

350 
pùe
->
eSèã
)

352 
PERF_TB_PIPE_STATE_UNINIT
 : {

353 
pùe
->
eSèã
 = 
PERF_TB_PIPE_STATE_IDLE
;

355 
PERF_TB_PIPE_STATE_IDLE
 : {

356 i‡(
pùe
->
‰amesCom∂ëe
 < 
PERF_TESTBED_FRAMES_PER_PIPE
)

358 #ifde‡
SIPP_RUN_ASYNC


360 
	`sùpPro˚ssFømeNB
 (
pùe
->
sùpFwH™dÀ
);

361 
pùe
->
eSèã
 = 
PERF_TB_PIPE_STATE_RUNNING
;

362 
numPùesRu¬ög
++;

363 i‡(
numPùesRu¬ög
 > 2Ë
	`¥ötf
("I shouldÇot be!!!\n");

366 
u32
 
îrCode
 = (u32)
E_BLOCK_CALL_REJECTED
;

367 
u32
 
îrMaskIdx
 = 
îrCode
 >> 5;

368 
u32
 
îrMaskE¡ry
 = 0x1 << (
îrCode
 & 0x1F);

371 
	`sùpPro˚ssFøme
 (
pùe
->
sùpFwH™dÀ
);

375 i‡(
pùe
->
sùpFwH™dÀ
->
îr‹Sètus
[
îrMaskIdx
] & 
îrMaskE¡ry
)

377 
	`¥ötf
 ("Pùê%lu faûed i¿ˇŒÅÿblockög API sùpPro˚ssFømêduêtÿa˘ivê™d/‹Öídög o≥øti⁄s\n", 
pùeIdx
);

379 
pùe
->
sùpFwH™dÀ
->
îr‹Sètus
[
îrMaskIdx
] &(~
îrMaskE¡ry
);

383 
	`¥ötf
 ("Pùê%lu suc˚ssfuŒy cÆÀd blockög API sùpPro˚ssFøme\n", 
pùeIdx
);

384 
pùe
->
‰amesCom∂ëe
++;

385 
pùe
->
eSèã
 = 
PERF_TB_PIPE_STATE_IDLE
;

392 #ifde‡
SIPP_PERF_TB_DBG_PRINT


393 
	`¥ötf
 ("Pùê%u com∂ëedÑu¿o‡%u images\n", ()
pùeIdx
, ()
pùe
->
‰amesCom∂ëe
);

396 
	`sùpFømew‹kRun
 ();

397 
pùe
->
eSèã
 = 
PERF_TB_PIPE_STATE_COMPLETE
;

401 
PERF_TB_PIPE_STATE_RUNNING
 : {

402 
PERF_TB_PIPE_EVENT
 
evít
;

403 (
evít
 = 
	`≠pPro˚ssEvít
 (
pùe
)Ë!
PERF_TB_PIPE_EVENT_NONE
)

405 
evít
)

407 
PERF_TB_PIPE_EVENT_FRAME_DONE
 : {

408 
pùe
->
‰amesCom∂ëe
++;

409 
numPùesRu¬ög
--;

410 
pùe
->
eSèã
 = 
PERF_TB_PIPE_STATE_IDLE
;

416 
PERF_TB_PIPE_STATE_COMPLETE
 : {

417 i‡(
	`≠pCheckCom∂ëe
())

419 
ã°Com∂ëe
 = 1;

423 
	`¥ötf
 ("Unknow¿°©ê⁄Öùê%u - Tîmö©ögÉ¨ly\n", ()
pùeIdx
);

424 
	`exô
 (0x0);

430 #i‚de‡
SIPP_PC


431 
	`DrvTimîGëSy°emTicks64
 (&
ã°End
);

432 
	`¥ötf
("Te°Cy˛e†%Œx\n\n", 
ã°End
 - 
ã°Sèπ
);

434 #ifde‡
SIPP_RUNTIME_PROFILING


435 
pùeIdx
 = 0x0;ÖùeIdx < 
PERF_TESTBED_NUM_PIPELINES
;ÖipeIdx++)

437 
PîfTe°bedPùe
 * 
pùe
 = &
≥rfTe°bedPùeLi°
[
pùeIdx
];

439 
	`¥ötf
("Ru¿l⁄g-pﬁêidítifiˇti⁄álgÿ⁄ Pùê%lu\n-----------------------------------------------\n\n", 
pùeIdx
);

441 
	`sùpDbgP¨£RTSèts
 (
pùe
->
sùpFwH™dÀ
, 
SIPP_RT_STATS_PRINT_CTRL
);

446 
	}
}

463 
	$≠pCª©eLog
 ()

465 #i‚de‡
SIPP_PC


466 
löeBuf„r
 [
MAX_LINE_LENGTH
];

467 
u32
 
idx
, 
idx2
;

468 
u32
 
pùeIdx
;

469 
PERF_TB_PIPE_EVENT
 
evít
;

470 
u64
 
evítD©a
;

471 
u64
 
°¨tCy˛e
[
PERF_TESTBED_NUM_PIPELINES
] = {0};

472 
u8
 
runSètus
[
PERF_TESTBED_NUM_PIPELINES
];

473 
u8
 
runTÆly
[
PERF_TESTBED_NUM_PIPELINES
];

474 
u64
 
cy˛eTime
;

475 
u32
 
¥tFømeTime
;

477 
	`≥rfTe°bedSëFûeBuf„r
 (
≥rfTe°bedFûeDumpBuf„r
);

479 
	`PERF_TB_DUMP_LINE
(
löeBuf„r
, "Te° Log : TŸÆÅe° cy˛e†%Œu LPI %d\n", 
ã°End
 - 
ã°Sèπ
, 
PERF_TESTBED_PIPE0_LINES_PER_ITER
);

480 
	`PERF_TB_DUMP_LINE
(
löeBuf„r
, "< Time >|");

482 
idx
 = 0; idx < 
PERF_TESTBED_NUM_PIPELINES
; idx++)

484 
	`PERF_TB_DUMP_LINE
(
löeBuf„r
, "< Så %lu >|", 
idx
);

485 
runSètus
[
idx
] = 0;

486 
runTÆly
[
idx
] = 0;

488 
	`PERF_TB_DUMP_LINE
(
löeBuf„r
, "\n------------|");

489 
idx
 = 0; idx < 
PERF_TESTBED_NUM_PIPELINES
; idx++)

491 
	`PERF_TB_DUMP_LINE
(
löeBuf„r
, "------------|");

493 
	`PERF_TB_DUMP_LINE
(
löeBuf„r
, "\n");

495 
idx
 = 0; idx < 
≠pEvítIdx
; idx++)

497 
pùeIdx
 = 
tAµEvíts
[
idx
].pipeIdx;

498 
evít
 = 
tAµEvíts
[
idx
].event;

499 
evítD©a
 = 
tAµEvíts
[
idx
].eventData;

501 
¥tFømeTime
 = 0x0;

502 
cy˛eTime
 = 
evítD©a
 - 
ã°Sèπ
;

503 
	`PERF_TB_DUMP_LINE
(
löeBuf„r
, "%11Œu |", 
cy˛eTime
);

505 
idx2
 = 0;

506 
idx2
 < 
pùeIdx
)

508 i‡(
runSètus
[
idx2
])

510 
	`PERF_TB_DUMP_LINE
(
löeBuf„r
, " V |");

514 
	`PERF_TB_DUMP_LINE
(
löeBuf„r
, " |");

516 
idx2
++;

519 i‡(
evít
 =
PERF_TB_PIPE_EVENT_FRAME_DONE
)

521 
	`PERF_TB_DUMP_LINE
(
löeBuf„r
, " F %4d C |", 
runTÆly
[
pùeIdx
]);

522 
runTÆly
[
pùeIdx
]++;

523 
runSètus
[
pùeIdx
] = 0x0;

524 
¥tFømeTime
 = 0x1;

526 i‡(
evít
 =
PERF_TB_PIPE_EVENT_FRAME_STARTED
)

528 
	`PERF_TB_DUMP_LINE
(
löeBuf„r
, " F %4d S |", 
runTÆly
[
pùeIdx
]);

529 
runSètus
[
pùeIdx
] = 0x1;

530 
°¨tCy˛e
[
pùeIdx
] = 
cy˛eTime
;

532 i‡(
evít
 =
PERF_TB_PIPE_POWER_MEAS_STARTED
)

534 
	`PERF_TB_DUMP_LINE
(
löeBuf„r
, " StartÖower measurement");

536 i‡(
evít
 =
PERF_TB_PIPE_POWER_MEAS_DONE
)

538 
	`PERF_TB_DUMP_LINE
(
löeBuf„r
, " Power measurement done");

541 
idx2
 = 
pùeIdx
 + 1;

542 
idx2
 < 
PERF_TESTBED_NUM_PIPELINES
)

544 i‡(
runSètus
[
idx2
])

546 
	`PERF_TB_DUMP_LINE
(
löeBuf„r
, " V |");

550 
	`PERF_TB_DUMP_LINE
(
löeBuf„r
, " |");

552 
idx2
++;

555 i‡(
¥tFømeTime
)

557 
	`PERF_TB_DUMP_LINE
(
löeBuf„r
, " Så %luÜa° fømêcy˛êcou¡ : %11Œu", 
pùeIdx
, 
cy˛eTime
 - 
°¨tCy˛e
[pipeIdx]);

559 
	`PERF_TB_DUMP_LINE
(
löeBuf„r
, "\n");

562 
	`≥rfTe°bedDumpFûe
 (
TESTBED_LOG_FILE
);

565 
	}
}

585 
	$maö
 (
¨gc
, *
¨gv
[])

587 
	`UNUSED
(
¨gc
);

588 
	`UNUSED
(
¨gv
);

590 #i‚de‡
SIPP_PC


591 
	`unôTe°Inô
 ();

592 
	`öôClocksAndMem‹y
 ();

594 
u32
 
‰eq
 = 
	`DrvC¥GëClockFªqKhz
(
SYS_CLK
, 
NULL
) / 1000;

596 
	`¥ötf
("\nBenchmark scenario\n");

597 
	`¥ötf
("===============================================================\n");

598 
	`¥ötf
("Fªquícy: %luMHz\n\n", 
‰eq
);

602 
	`sùpInôülize
 ();

604 #i‚de‡
SIPP_PC


605 
	`DrvTimîInô
 ();

608 #i‚de‡
SIPP_PC


609 #ifde‡
SIPP_RUN_ASYNC


610 i‡(
PROCESS_LEON_OS
 =
	`swcWhoAmI
())

612 
	`¥ötf
 ("App Starting on LEON OS\n");

613 
	`¥ötf
 ("Please make sure IRQ sources for dynamicallyÑoute between LeonOSánd LeonRTáre set\n");

617 
	`¥ötf
 ("App Starting on LEON RT\n");

622 #ifde‡
SIPP_RUN_ASYNC


623 
	`sùpPœtf‹mInôAsync
 ();

626 
	`≠pInô
 ();

627 
	`≠pCª©ePùñöes
 ();

628 
	`≠pC⁄figuªPùñöes
 ();

631 
	`≠pTask
 ();

634 #i‚de‡
SIPP_PC


635 
	`unôTe°FöÆRï‹t
();

636 
	`≠pCª©eLog
 ();

640 
	}
}

	@Sipp/SippFw/sippPerfTestBed/leon/perfTestbed.h

9 #i‚de‡
__PERF_TESTBED_H__


10 
	#__PERF_TESTBED_H__


	)

15 
	~"sùp.h
"

16 
	~"≥rfTe°bedTy≥s.h
"

17 
	~"≥rfTe°bedCfg.h
"

21 
	#PERF_TB_DUMP_LINE
(
s_
, 
f_
, ...) { \

22 
u32
 
u32NbCh¨s
 = 
	`•rötf
 ((
s_
), (
f_
), ## 
__VA_ARGS__
); \

23 
	`≥rfTe°bedAddToFûe
 (&
u32NbCh¨s
, 
s_
); \

24 }

	)

29 
≥rfTe°bedSëFûeBuf„r
 (
u8
 * 
pFûeBuf„r
);

30 
≥rfTe°bedAddToFûe
 (
u32
 * 
pu32NbCh¨s
, * 
pLöeBuf„r
);

31 
≥rfTe°bedDumpFûe
 (* 
fûeDumpName
);

35 
PîfTe°bedPùe
 
≥rfTe°bedPùeLi°
[
PERF_TESTBED_NUM_PIPELINES
];

37 
u32
 
¶i˚Fú°
[
PERF_TESTBED_NUM_PIPELINES
];

38 
u32
 
¶i˚La°
[
PERF_TESTBED_NUM_PIPELINES
];

	@Sipp/SippFw/sippPerfTestBed/leon/perfTestbedCfg.h

12 #i‚de‡
_PERF_TESTBED_CFG_H_


13 
	#_PERF_TESTBED_CFG_H_


	)

21 
	#SIPP_PERF_TEST_CFG_D


	)

23 
	#MAX_LINE_LENGTH
 100

	)

24 
	#FILE_DUMP_BUFFER_MAX_SIZE
 50 * 1024

	)

26 #ifde‡
SIPP_PERF_TEST_CFG_A


27 
	~"≥rfTe°bedCfg_A.h
"

28 #ñi‡
deföed
 
SIPP_PERF_TEST_CFG_B


29 
	~"≥rfTe°bedCfg_B.h
"

30 #ñi‡
deföed
 
SIPP_PERF_TEST_CFG_C


31 
	~"≥rfTe°bedCfg_C.h
"

32 #ñi‡
deföed
 
SIPP_PERF_TEST_CFG_D


33 
	~"≥rfTe°bedCfg_D.h
"

	@Sipp/SippFw/sippPerfTestBed/leon/perfTestbedCfg_A.h

12 #i‚de‡
_PERF_TESTBED_CFG_A_H_


13 
	#_PERF_TESTBED_CFG_A_H_


	)

15 
	#SIPP_RUN_ASYNC


	)

18 
	#SIPP_RT_STATS_PRINT_CTRL
 1

	)

20 #i‚de‡
SIPP_RUN_ASYNC


21 
	#PERF_TESTBED_NUM_PIPELINES
 0x1

22 #ñ£

	)

23 
	#PERF_TESTBED_NUM_PIPELINES
 0x1

	)

26 
	#PERF_TESTBED_FRAMES_PER_PIPE
 0x10

	)

29 
	#PERF_TESTBED_PIPE0_WIDTH
 1280

	)

30 
	#PERF_TESTBED_PIPE0_HEIGHT
 720

	)

31 
	#PERF_TESTBED_PIPE0_NUM_PLANES
 1

	)

32 
	#PERF_TESTBED_PIPE0_LINES_PER_ITER
 1

	)

33 
u8
 
	tt_Pùe0
;

36 
	#PERF_TESTBED_PIPE1_WIDTH
 1280

	)

37 
	#PERF_TESTBED_PIPE1_HEIGHT
 720

	)

38 
	#PERF_TESTBED_PIPE1_NUM_PLANES
 1

	)

39 
	#PERF_TESTBED_PIPE1_LINES_PER_ITER
 1

	)

40 
u8
 
	tt_Pùe1
;

43 
	#PERF_TESTBED_PIPE2_WIDTH
 1280

	)

44 
	#PERF_TESTBED_PIPE2_HEIGHT
 720

	)

45 
	#PERF_TESTBED_PIPE2_NUM_PLANES
 1

	)

46 
	#PERF_TESTBED_PIPE2_LINES_PER_ITER
 4

	)

47 
u8
 
	tt_Pùe2
;

50 
	#PERF_TESTBED_PIPE3_WIDTH
 1280

	)

51 
	#PERF_TESTBED_PIPE3_HEIGHT
 720

	)

52 
	#PERF_TESTBED_PIPE3_NUM_PLANES
 1

	)

53 
	#PERF_TESTBED_PIPE3_LINES_PER_ITER
 4

	)

54 
u8
 
	tt_Pùe3
;

	@Sipp/SippFw/sippPerfTestBed/leon/perfTestbedCfg_B.h

12 #i‚de‡
_PERF_TESTBED_CFG_B_H_


13 
	#_PERF_TESTBED_CFG_B_H_


	)

15 
	#SIPP_RUN_ASYNC


	)

18 
	#SIPP_RT_STATS_PRINT_CTRL
 1

	)

20 #i‚de‡
SIPP_RUN_ASYNC


21 
	#PERF_TESTBED_NUM_PIPELINES
 0x1

22 #ñ£

	)

23 
	#PERF_TESTBED_NUM_PIPELINES
 0x1

	)

26 
	#PERF_TESTBED_FRAMES_PER_PIPE
 0x10

	)

29 
	#PERF_TESTBED_PIPE0_WIDTH
 1280

	)

30 
	#PERF_TESTBED_PIPE0_HEIGHT
 720

	)

31 
	#PERF_TESTBED_PIPE0_NUM_PLANES
 1

	)

32 
	#PERF_TESTBED_PIPE0_LINES_PER_ITER
 16

	)

33 
u8
 
	tt_Pùe0
;

36 
	#PERF_TESTBED_PIPE1_WIDTH
 1280

	)

37 
	#PERF_TESTBED_PIPE1_HEIGHT
 720

	)

38 
	#PERF_TESTBED_PIPE1_NUM_PLANES
 1

	)

39 
	#PERF_TESTBED_PIPE1_LINES_PER_ITER
 16

	)

40 
u8
 
	tt_Pùe1
;

43 
	#PERF_TESTBED_PIPE2_WIDTH
 1280

	)

44 
	#PERF_TESTBED_PIPE2_HEIGHT
 720

	)

45 
	#PERF_TESTBED_PIPE2_NUM_PLANES
 1

	)

46 
	#PERF_TESTBED_PIPE2_LINES_PER_ITER
 4

	)

47 
u8
 
	tt_Pùe2
;

50 
	#PERF_TESTBED_PIPE3_WIDTH
 1280

	)

51 
	#PERF_TESTBED_PIPE3_HEIGHT
 720

	)

52 
	#PERF_TESTBED_PIPE3_NUM_PLANES
 1

	)

53 
	#PERF_TESTBED_PIPE3_LINES_PER_ITER
 4

	)

54 
u8
 
	tt_Pùe3
;

	@Sipp/SippFw/sippPerfTestBed/leon/perfTestbedCfg_C.h

12 #i‚de‡
_PERF_TESTBED_CFG_C_H_


13 
	#_PERF_TESTBED_CFG_C_H_


	)

15 
	#SIPP_RUN_ASYNC


	)

18 
	#SIPP_RT_STATS_PRINT_CTRL
 0

	)

21 #i‚de‡
SIPP_RUN_ASYNC


22 
	#PERF_TESTBED_NUM_PIPELINES
 0x1

23 #ñ£

	)

24 
	#PERF_TESTBED_NUM_PIPELINES
 0x2

	)

27 
	#PERF_TESTBED_FRAMES_PER_PIPE
 0x10

	)

30 
	#PERF_TESTBED_PIPE0_WIDTH
 1280

	)

31 
	#PERF_TESTBED_PIPE0_HEIGHT
 720

	)

32 
	#PERF_TESTBED_PIPE0_NUM_PLANES
 1

	)

33 
	#PERF_TESTBED_PIPE0_LINES_PER_ITER
 1

	)

34 
u8
 
	tt_Pùe0
;

37 
	#PERF_TESTBED_PIPE1_WIDTH
 1280

	)

38 
	#PERF_TESTBED_PIPE1_HEIGHT
 720

	)

39 
	#PERF_TESTBED_PIPE1_NUM_PLANES
 1

	)

40 
	#PERF_TESTBED_PIPE1_LINES_PER_ITER
 1

	)

41 
u8
 
	tt_Pùe1
;

44 
	#PERF_TESTBED_PIPE2_WIDTH
 1280

	)

45 
	#PERF_TESTBED_PIPE2_HEIGHT
 720

	)

46 
	#PERF_TESTBED_PIPE2_NUM_PLANES
 1

	)

47 
	#PERF_TESTBED_PIPE2_LINES_PER_ITER
 4

	)

48 
u8
 
	tt_Pùe2
;

51 
	#PERF_TESTBED_PIPE3_WIDTH
 1280

	)

52 
	#PERF_TESTBED_PIPE3_HEIGHT
 720

	)

53 
	#PERF_TESTBED_PIPE3_NUM_PLANES
 1

	)

54 
	#PERF_TESTBED_PIPE3_LINES_PER_ITER
 4

	)

55 
u8
 
	tt_Pùe3
;

	@Sipp/SippFw/sippPerfTestBed/leon/perfTestbedCfg_D.h

12 #i‚de‡
_PERF_TESTBED_CFG_D_H_


13 
	#_PERF_TESTBED_CFG_D_H_


	)

15 
	#SIPP_RUN_ASYNC


	)

18 
	#SIPP_RT_STATS_PRINT_CTRL
 0

	)

20 #i‚de‡
SIPP_RUN_ASYNC


21 
	#PERF_TESTBED_NUM_PIPELINES
 0x1

22 #ñ£

	)

23 
	#PERF_TESTBED_NUM_PIPELINES
 0x2

	)

26 
	#PERF_TESTBED_FRAMES_PER_PIPE
 0x10

	)

29 
	#PERF_TESTBED_PIPE0_WIDTH
 1280

	)

30 
	#PERF_TESTBED_PIPE0_HEIGHT
 720

	)

31 
	#PERF_TESTBED_PIPE0_NUM_PLANES
 1

	)

32 
	#PERF_TESTBED_PIPE0_LINES_PER_ITER
 16

	)

33 
u8
 
	tt_Pùe0
;

36 
	#PERF_TESTBED_PIPE1_WIDTH
 1280

	)

37 
	#PERF_TESTBED_PIPE1_HEIGHT
 720

	)

38 
	#PERF_TESTBED_PIPE1_NUM_PLANES
 1

	)

39 
	#PERF_TESTBED_PIPE1_LINES_PER_ITER
 16

	)

40 
u8
 
	tt_Pùe1
;

43 
	#PERF_TESTBED_PIPE2_WIDTH
 1280

	)

44 
	#PERF_TESTBED_PIPE2_HEIGHT
 720

	)

45 
	#PERF_TESTBED_PIPE2_NUM_PLANES
 1

	)

46 
	#PERF_TESTBED_PIPE2_LINES_PER_ITER
 4

	)

47 
u8
 
	tt_Pùe2
;

50 
	#PERF_TESTBED_PIPE3_WIDTH
 1280

	)

51 
	#PERF_TESTBED_PIPE3_HEIGHT
 720

	)

52 
	#PERF_TESTBED_PIPE3_NUM_PLANES
 1

	)

53 
	#PERF_TESTBED_PIPE3_LINES_PER_ITER
 4

	)

54 
u8
 
	tt_Pùe3
;

	@Sipp/SippFw/sippPerfTestBed/leon/perfTestbedPipes.c

8 
	~"≥rfTe°bed.h
"

9 
	~<fûãrs/c⁄v5x5/c⁄v5x5.h
>

10 
	~<fûãrs/boxFûãr5x5/boxFûãr5x5.h
>

16 
	~"≠pP¨ams.h
"

18 
u32
 
	gsùpEº‹Log
[
SIPP_ERROR_HISTORY_SIZE
];

21 
UI¡8
 
ã°_image
;

23 
PîfTe°bedPùe
 
	g≥rfTe°bedPùeLi°
[
PERF_TESTBED_NUM_PIPELINES
];

25 #i‡
PERF_TESTBED_NUM_PIPELINES
 > 0x3

26 
u32
 
	g¶i˚Fú°
[
PERF_TESTBED_NUM_PIPELINES
] = {0,3,6,9};

27 
u32
 
	g¶i˚La°
[
PERF_TESTBED_NUM_PIPELINES
] = {2,5,8,11};

28 #ñi‡
PERF_TESTBED_NUM_PIPELINES
 > 0x2

29 
u32
 
	g¶i˚Fú°
[
PERF_TESTBED_NUM_PIPELINES
] = {0,4,8};

30 
u32
 
	g¶i˚La°
[
PERF_TESTBED_NUM_PIPELINES
] = {3,7,11};

31 #ñi‡
PERF_TESTBED_NUM_PIPELINES
 > 0x1

32 
u32
 
	g¶i˚Fú°
[
PERF_TESTBED_NUM_PIPELINES
] = {0,6};

33 
u32
 
	g¶i˚La°
[
PERF_TESTBED_NUM_PIPELINES
] = {5,11};

35 
u32
 
	g¶i˚Fú°
[
PERF_TESTBED_NUM_PIPELINES
] = {0};

36 
u32
 
	g¶i˚La°
[
PERF_TESTBED_NUM_PIPELINES
] = {11};

39 
u8
 * 
	gpmBöImg
[
PERF_TESTBED_NUM_PIPELINES
];

42 
t_Pùe0
 
DDR_DATA
 
	gDMA0_I≈utBuf„r
[
PERF_TESTBED_PIPE0_WIDTH
 * 
PERF_TESTBED_PIPE0_HEIGHT
 * 
PERF_TESTBED_PIPE0_NUM_PLANES
] 
ALIGNED
(8);

43 #i‡
PERF_TESTBED_NUM_PIPELINES
 > 0x1

44 
t_Pùe1
 
DDR_DATA
 
	gDMA1_I≈utBuf„r
[
PERF_TESTBED_PIPE1_WIDTH
 * 
PERF_TESTBED_PIPE1_HEIGHT
 * 
PERF_TESTBED_PIPE1_NUM_PLANES
] 
ALIGNED
(8);

46 #i‡
PERF_TESTBED_NUM_PIPELINES
 > 0x2

47 
t_Pùe2
 
DDR_DATA
 
	gDMA2_I≈utBuf„r
[
PERF_TESTBED_PIPE2_WIDTH
 * 
PERF_TESTBED_PIPE2_HEIGHT
 * 
PERF_TESTBED_PIPE2_NUM_PLANES
] 
ALIGNED
(8);

49 #i‡
PERF_TESTBED_NUM_PIPELINES
 > 0x3

50 
t_Pùe3
 
DDR_DATA
 
	gDMA3_I≈utBuf„r
[
PERF_TESTBED_PIPE3_WIDTH
 * 
PERF_TESTBED_PIPE3_HEIGHT
 * 
PERF_TESTBED_PIPE3_NUM_PLANES
] 
ALIGNED
(8);

53 
t_Pùe0
 
DDR_DATA
 
	gDMA0_OuçutBuf„r
[
PERF_TESTBED_PIPE0_WIDTH
 * 
PERF_TESTBED_PIPE0_HEIGHT
 * 
PERF_TESTBED_PIPE0_NUM_PLANES
] 
ALIGNED
(8);

54 #i‡
PERF_TESTBED_NUM_PIPELINES
 > 0x1

55 
t_Pùe1
 
DDR_DATA
 
	gDMA1_OuçutBuf„r
[
PERF_TESTBED_PIPE1_WIDTH
 * 
PERF_TESTBED_PIPE1_HEIGHT
 * 
PERF_TESTBED_PIPE1_NUM_PLANES
] 
ALIGNED
(8);

57 #i‡
PERF_TESTBED_NUM_PIPELINES
 > 0x2

58 
t_Pùe2
 
DDR_DATA
 
	gDMA2_OuçutBuf„r
[
PERF_TESTBED_PIPE2_WIDTH
 * 
PERF_TESTBED_PIPE2_HEIGHT
 * 
PERF_TESTBED_PIPE2_NUM_PLANES
] 
ALIGNED
(8);

60 #i‡
PERF_TESTBED_NUM_PIPELINES
 > 0x3

61 
t_Pùe3
 
DDR_DATA
 
	gDMA3_OuçutBuf„r
[
PERF_TESTBED_PIPE3_WIDTH
 * 
PERF_TESTBED_PIPE3_HEIGHT
 * 
PERF_TESTBED_PIPE3_NUM_PLANES
] 
ALIGNED
(8);

64 
u16
 
	gc⁄v5x50Cfg_cM©
[
PERF_TESTBED_NUM_PIPELINES
][25];

70 
öôC⁄vM©
 (
SùpFûãr
 * 
c⁄v5x5
, 
u32
 
pùeId
, u32 
ks
);

91 
	$≠pC⁄figuªPùñöes
 ( )

93 
PîfTe°bedPùe
 * 
pùe
;

94 
DmaP¨am
 * 
dmaInCfg
;

95 
DmaP¨am
 * 
dmaOutCfg
;

98 
pùe
 = &
≥rfTe°bedPùeLi°
[0];

100 
pùe
->
dmaIn
 = 
	`sùpCª©eFûãr
 (pùe->
sùpFwH™dÀ
, 0x0, 
PERF_TESTBED_PIPE0_WIDTH
, 
PERF_TESTBED_PIPE0_HEIGHT
, 
	`N_PL
(
PERF_TESTBED_PIPE0_NUM_PLANES
), 
	`SZ
(
t_Pùe0
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

101 
pùe
->
HWFûãr
 = 
	`sùpCª©eFûãr
 (pùe->
sùpFwH™dÀ
, 0x0, 
PERF_TESTBED_PIPE0_WIDTH
, 
PERF_TESTBED_PIPE0_HEIGHT
, 
	`N_PL
(
PERF_TESTBED_PIPE0_NUM_PLANES
), 
	`SZ
(
t_Pùe0
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_CONV_ID
, 0);

102 
pùe
->
SWFûãr
 = 
	`sùpCª©eFûãr
 (pùe->
sùpFwH™dÀ
, 0x0, 
PERF_TESTBED_PIPE0_WIDTH
, 
PERF_TESTBED_PIPE0_HEIGHT
, 
	`N_PL
(
PERF_TESTBED_PIPE0_NUM_PLANES
), 
	`SZ
(
t_Pùe0
), SZ(
BoxFûãr5x5P¨am
), 
	`SVU_SYM
(
svuBoxFûãr5x5
), 0);

103 
pùe
->
dmaOut
 = 
	`sùpCª©eFûãr
 (pùe->
sùpFwH™dÀ
, 0x0, 
PERF_TESTBED_PIPE0_WIDTH
, 
PERF_TESTBED_PIPE0_HEIGHT
, 
	`N_PL
(
PERF_TESTBED_PIPE0_NUM_PLANES
), 
	`SZ
(
t_Pùe0
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

105 #ifde‡
DISABLE_OPIPE_CONNECTIONS


106 
pùe
->
sùpFwH™dÀ
->
Êags
 |(
PLF_DISABLE_OPIPE_CONS
);

108 #i‚de‡
DISABLE_SIPP_SW_QU


109 
pùe
->
sùpFwH™dÀ
->
Êags
 |(
PLF_ENABLE_SW_QU_USE
);

111 #ifde‡
SIPP_RUNTIME_PROFILING


112 
pùe
->
sùpFwH™dÀ
->
Êags
 |(
PLF_PROVIDE_RT_STATS
);

115 
	`sùpLökFûãr
 (
pùe
->
HWFûãr
,Öùe->
dmaIn
, 5, 5 );

116 
	`sùpLökFûãr
 (
pùe
->
SWFûãr
,Öùe->
HWFûãr
, 5, 5 );

117 
	`sùpLökFûãr
 (
pùe
->
dmaOut
,Öùe->
SWFûãr
, 1, 0 );

119 i‡(
	`sùpPùeGëEº‹Sètus
 (
pùe
->
sùpFwH™dÀ
))

121 
u32
 
îrNum
;

122 
	`¥ötf
 ("Pipeline 0 creationÉrror\nError codes:\n");

123 
îrNum
 = 
	`sùpGëEº‹Hi°‹y
 (
sùpEº‹Log
);

124 
îrNum
)

126 
	`¥ötf
 ("%08lx\n", 
sùpEº‹Log
[
îrNum
 - 0x1]);

127 
îrNum
--;

129 
	`exô
 (0x0);

132 
dmaInCfg
 = (
DmaP¨am
 *)
pùe
->
dmaIn
->
∑øms
;

133 
dmaOutCfg
 = (
DmaP¨am
 *)
pùe
->
dmaOut
->
∑øms
;

134 
dmaInCfg
->
ddrAddr
 = (
UI¡32
)
DMA0_I≈utBuf„r
;

135 
dmaOutCfg
->
ddrAddr
 = (
UI¡32
)
DMA0_OuçutBuf„r
;

137 
C⁄vP¨am
 * 
HWFûãrCfg
 = (C⁄vP¨am *)
pùe
->
HWFûãr
->
∑øms
;

138 
HWFûãrCfg
->
cfg
 = 
KERNEL_SIZE
 |

147 
	`∑ckC⁄v5x5CCM
 (
HWFûãrCfg
, 
hwKî
);

149 
BoxFûãr5x5P¨am
 * 
SWFûãrCfg
 = (BoxFûãr5x5P¨am *)
pùe
->
SWFûãr
->
∑øms
;

151 
SWFûãrCfg
->
n‹mÆize
 = 0;

153 
	`sùpPùeSëLöesPîIãr
 (
pùe
->
sùpFwH™dÀ
,

154 
PERF_TESTBED_PIPE0_LINES_PER_ITER
);

156 
	`sùpFöÆizePùñöe
 (
pùe
->
sùpFwH™dÀ
);

158 i‡(
	`sùpPùeGëEº‹Sètus
 (
pùe
->
sùpFwH™dÀ
))

160 
u32
 
îrNum
;

161 
	`¥ötf
 ("Pipeline 0 finalization failed\nError codes:\n");

162 
îrNum
 = 
	`sùpGëEº‹Hi°‹y
 (
sùpEº‹Log
);

163 
îrNum
)

165 
	`¥ötf
 ("%08lx\n", 
sùpEº‹Log
[
îrNum
 - 0x1]);

166 
îrNum
--;

170 #i‡
PERF_TESTBED_NUM_PIPELINES
 > 1

173 
pùe
 = &
≥rfTe°bedPùeLi°
[1];

174 
pùe
->
dmaIn
 = 
	`sùpCª©eFûãr
 (pùe->
sùpFwH™dÀ
, 0x0, 
PERF_TESTBED_PIPE0_WIDTH
, 
PERF_TESTBED_PIPE0_HEIGHT
, 
	`N_PL
(
PERF_TESTBED_PIPE0_NUM_PLANES
), 
	`SZ
(
t_Pùe1
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

175 
pùe
->
SWFûãr
 = 
	`sùpCª©eFûãr
 (pùe->
sùpFwH™dÀ
, 0x0, 
PERF_TESTBED_PIPE0_WIDTH
, 
PERF_TESTBED_PIPE0_HEIGHT
, 
	`N_PL
(
PERF_TESTBED_PIPE0_NUM_PLANES
), 
	`SZ
(
t_Pùe1
), SZ(
C⁄v5x5P¨am
), 
	`SVU_SYM
(
svuC⁄v5x5
), 0);

176 
pùe
->
HWFûãr
 = 
	`sùpCª©eFûãr
 (pùe->
sùpFwH™dÀ
, 0x0, 
PERF_TESTBED_PIPE0_WIDTH
, 
PERF_TESTBED_PIPE0_HEIGHT
, 
	`N_PL
(
PERF_TESTBED_PIPE0_NUM_PLANES
), 
	`SZ
(
t_Pùe1
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_MED_ID
, 0);

177 
pùe
->
dmaOut
 = 
	`sùpCª©eFûãr
 (pùe->
sùpFwH™dÀ
, 0x0, 
PERF_TESTBED_PIPE0_WIDTH
, 
PERF_TESTBED_PIPE0_HEIGHT
, 
	`N_PL
(
PERF_TESTBED_PIPE0_NUM_PLANES
), 
	`SZ
(
t_Pùe1
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

179 #ifde‡
DISABLE_OPIPE_CONNECTIONS


180 
pùe
->
sùpFwH™dÀ
->
Êags
 |(
PLF_DISABLE_OPIPE_CONS
);

182 #i‚de‡
DISABLE_SIPP_SW_QU


183 
pùe
->
sùpFwH™dÀ
->
Êags
 |(
PLF_ENABLE_SW_QU_USE
);

185 #ifde‡
SIPP_RUNTIME_PROFILING


186 
pùe
->
sùpFwH™dÀ
->
Êags
 |(
PLF_PROVIDE_RT_STATS
);

189 
	`sùpLökFûãr
 (
pùe
->
SWFûãr
,Öùe->
dmaIn
, 5, 5 );

190 
	`sùpLökFûãr
 (
pùe
->
HWFûãr
,Öùe->
SWFûãr
, 5, 5 );

191 
	`sùpLökFûãr
 (
pùe
->
dmaOut
,Öùe->
HWFûãr
, 1, 0 );

193 i‡(
	`sùpPùeGëEº‹Sètus
 (
pùe
->
sùpFwH™dÀ
))

195 
u32
 
îrNum
;

196 
	`¥ötf
 ("Pipeline 1 creationÉrror\nError codes:\n");

197 
îrNum
 = 
	`sùpGëEº‹Hi°‹y
 (
sùpEº‹Log
);

198 
îrNum
)

200 
	`¥ötf
 ("%08lx\n", 
sùpEº‹Log
[
îrNum
 - 0x1]);

201 
îrNum
--;

203 
	`exô
 (0x0);

206 
dmaInCfg
 = (
DmaP¨am
 *)
pùe
->
dmaIn
->
∑øms
;

207 
dmaOutCfg
 = (
DmaP¨am
 *)
pùe
->
dmaOut
->
∑øms
;

208 
dmaInCfg
->
ddrAddr
 = (
UI¡32
)
DMA1_I≈utBuf„r
;

209 
dmaOutCfg
->
ddrAddr
 = (
UI¡32
)
DMA1_OuçutBuf„r
;

211 
	`öôC⁄vM©
 (
pùe
->
SWFûãr
, 0x1, 
KERNEL_SIZE
);

212 
MedP¨am
 * 
MedHWFûãrCfg
 = (MedP¨am *)
pùe
->
HWFûãr
->
∑øms
;

213 
MedHWFûãrCfg
->
cfg
 = 
KERNEL_SIZE
 |

214 (((
KERNEL_SIZE
 * KERNEL_SIZE)>>1) << 8) |

217 
	`sùpPùeSëLöesPîIãr
 (
pùe
->
sùpFwH™dÀ
,

218 
PERF_TESTBED_PIPE1_LINES_PER_ITER
);

220 
	`sùpFöÆizePùñöe
 (
pùe
->
sùpFwH™dÀ
);

222 i‡(
	`sùpPùeGëEº‹Sètus
 (
pùe
->
sùpFwH™dÀ
))

224 
u32
 
îrNum
;

225 
	`¥ötf
 ("Pipeline 1 finalization failed\nError codes:\n");

226 
îrNum
 = 
	`sùpGëEº‹Hi°‹y
 (
sùpEº‹Log
);

227 
îrNum
)

229 
	`¥ötf
 ("%08lx\n", 
sùpEº‹Log
[
îrNum
 - 0x1]);

230 
îrNum
--;

236 #i‡
PERF_TESTBED_NUM_PIPELINES
 > 2

238 
pùe
 = &
≥rfTe°bedPùeLi°
[2];

242 #i‡
PERF_TESTBED_NUM_PIPELINES
 > 3

244 
pùe
 = &
≥rfTe°bedPùeLi°
[3];

248 
	}
}

	@Sipp/SippFw/sippPerfTestBed/leon/perfTestbedTypes.h

10 #i‚de‡
__PERF_TESTBED_TYPES_H__


11 
	#__PERF_TESTBED_TYPES_H__


	)

17 
	~"sùp.h
"

18 #i‚de‡
SIPP_PC


19 
	~"brdMv0198.h
"

25 
	#PERF_TESTBED_EVENT_HISTORY_SIZE
 0x400

	)

26 
	#PERF_TESTBED_EVENT_PIPE_HISTORY_SIZE
 0x8

	)

37 
	mPERF_TB_PIPE_STATE_UNINIT
 = 0x00,

38 
	mPERF_TB_PIPE_STATE_IDLE
 = 0x01,

39 
	mPERF_TB_PIPE_STATE_RUNNING
 = 0x02,

40 
	mPERF_TB_PIPE_STATE_COMPLETE
 = 0x03

42 } 
	tPERF_TB_PIPE_STATE
;

49 
	mPERF_TB_PIPE_EVENT_NONE
 = 0x00,

50 
	mPERF_TB_PIPE_EVENT_FRAME_DONE
 = 0x01,

51 
	mPERF_TB_PIPE_EVENT_FRAME_STARTED
 = 0x02,

52 
	mPERF_TB_PIPE_POWER_MEAS_STARTED
 = 0x03,

53 
	mPERF_TB_PIPE_POWER_MEAS_DONE
 = 0x04

55 } 
	tPERF_TB_PIPE_EVENT
;

63 
PERF_TB_PIPE_STATE
 
	meSèã
;

64 
SùpPùñöe
 * 
	msùpFwH™dÀ
;

66 
SùpFûãr
 * 
	mdmaIn
;

67 
SùpFûãr
 * 
	mdmaOut
;

68 
SùpFûãr
 * 
	mHWFûãr
;

69 
SùpFûãr
 * 
	mSWFûãr
;

71 
u32
 
	m‰amesCom∂ëe
;

73 
PERF_TB_PIPE_EVENT
 
	mevítLi°
[
PERF_TESTBED_EVENT_PIPE_HISTORY_SIZE
];

74 
u32
 
	mevítLi°WrPå
;

75 
u32
 
	mevítLi°RdPå
;

77 } 
	tPîfTe°bedPùe
, * 
	tpPîfTe°bedPùe
;

85 
u8
 
	mpùeIdx
;

86 
PERF_TB_PIPE_EVENT
 
	mevít
;

87 
u64
 
	mevítD©a
;

89 } 
	tPîfTe°Evít
;

91 #i‚de‡
SIPP_PC


94 
tyAdcResu…AŒRaûs
 
	mpowî
;

95 
Â32
 
	mavgmW
;

96 
Â32
 
	mavgmA
;

98 } 
	tPîfTe°PowîSèt
;

102 
Â32
 
	mãm≥øtuª
;

103 
Â32
 
	mC‹emW
;

104 
Â32
 
	mDDRmW
;

106 } 
	tPîfTe°PowîS«pShŸ
;

	@Sipp/SippFw/sippPerfTestBed/leon/utils.c

8 
	~<sùp.h
>

9 
	~<sùpTe°Comm⁄.h
>

10 
	~<fûãrs/c⁄v5x5/c⁄v5x5.h
>

12 
	~"≥rfTe°bed.h
"

14 
	~<°dio.h
>

15 
	~<°rög.h
>

16 
	~<as£π.h
>

18 #i‚de‡
SIPP_PC


19 
	~<VcsHooksApi.h
>

22 
u16
 
c⁄vM©rix
[5 * 5];

23 
u16
 
c⁄v5x50Cfg_cM©
[][5 * 5];

25 * 
	ggFûeDumpBuf„r
;

26 * 
	ggFûeDumpBuf„rSèπ
;

27 
u32
 
	ggu32Size
 = 0;

32 
	$≥rfTe°bedSëFûeBuf„r
 (
u8
 * 
pFûeBuf„r
)

34 
gFûeDumpBuf„r
 = 
gFûeDumpBuf„rSèπ
 = (*)
pFûeBuf„r
;

35 
	}
}

37 #ifde‡
SIPP_VCS


38 
	$≥rfTe°bedAddToFûe
 (
u32
 * 
pu32NbCh¨s
, * 
pLöeBuf„r
)

40 
	`as£π
(*
pu32NbCh¨s
 < 
MAX_LINE_LENGTH
);

41 
	`as£π
((
gu32Size
 + *
pu32NbCh¨s
Ë< 
FILE_DUMP_BUFFER_MAX_SIZE
);

42 
	`memmove
(
gFûeDumpBuf„r
, 
pLöeBuf„r
, *
pu32NbCh¨s
);

43 
gFûeDumpBuf„r
 +*
pu32NbCh¨s
;

44 
gu32Size
 +*
pu32NbCh¨s
;

45 
	}
}

47 
	$≥rfTe°bedDumpFûe
 (* 
fûeDumpName
)

49 
	`ßveMem‹yToFûe
((
u32
)
gFûeDumpBuf„rSèπ
, 
gu32Size
, 
fûeDumpName
);

50 
	}
}

56 
	$öôC⁄vM©
 (
SùpFûãr
 * 
c⁄v5x5
, 
u32
 
pùeId
, u32 
ks
)

58 
u32
 
i
;

59 
C⁄v5x5P¨am
 *
c⁄vCfg
 = (C⁄v5x5P¨am*)
c⁄v5x5
->
∑øms
;

61 
c⁄vCfg
->
cM©
 = 
c⁄v5x50Cfg_cM©
[
pùeId
];

63 
i
 = 0; i < 
ks
 * ks; i++)

65 
c⁄vCfg
->
cM©
[
i
] = 
c⁄vM©rix
[i];

67 
	}
}

	@Sipp/SippFw/testHwConvUpperSlices/leon/app_config.c

13 
	~<ªgi°îsMyrüd.h
>

14 
	~<DrvC¥.h
>

19 #i‚de‡
IPIPE_CLK_CONFIG_SEL


20 
	#ùùeClockC⁄fig
 
ùùeClkC⁄figMV182


	)

22 
	#ùùeClockC⁄fig
 
IPIPE_CLK_CONFIG_SEL


	)

35 
tyAuxClkDividîCfg
 
	gauxClkAŒOn
[] =

38 {(0x0FFFFFFF & (~
AUX_CLK_MASK_DDR_CORE_CTRL
)), 
CLK_SRC_REFCLK0
, 1, 1},

43 
tySocClockC⁄fig
 
	gùùeClkC⁄figMV182
 =

45 .
ªfClk0I≈utKhz
 = 12000,

46 .
	gªfClk1I≈utKhz
 = 0,

47 .
	gèrgëPŒ0FªqKhz
 = 264000,

48 .
	gèrgëPŒ1FªqKhz
 = 0,

49 .
	g˛kSrcPŒ1
 = 
CLK_SRC_REFCLK0
,

50 .
	gma°îClkDivNumî©‹
 = 
DONT_TOUCH_MASTER_DIVIDER
,

51 .
	gma°îClkDivDíomö©‹
 = 
DONT_TOUCH_MASTER_DIVIDER
,

52 .
	gcssDssClockE«bÀMask
 = 0xFFFFFFFFFFFFFFFFULL,

53 .
	gmssClockE«bÀMask
 = 0xFFFFFFFF,

54 .
	gsùpClockE«bÀMask
 = 0xFFFFFFFF,

55 .
	gu∑ClockE«bÀMask
 = 0xFFFFFFFF,

56 .
	gpAuxClkCfg
 = 
auxClkAŒOn
,

68 
	$öôClocksAndMem‹y
()

70 
	`DrvC¥Inô
();

71 
	`DrvC¥SëupClocks
(&
ùùeClockC⁄fig
);

74 
	}
}

	@Sipp/SippFw/testHwConvUpperSlices/leon/app_config.h

9 #i‚de‡
_APP_CONFIG_H_


10 
	#_APP_CONFIG_H_


	)

16 
öôClocksAndMem‹y
();

	@Sipp/SippFw/testHwConvUpperSlices/leon/main.c

9 #i‡
deföed
(
SIPP_VCS
)

10 
	~<DrvTimî.h
>

11 
	~<DrvDdr.h
>

14 
	~"≠p_c⁄fig.h
"

15 
	~"sùpHwC⁄v.h
"

16 
	~"sùpHwC⁄vDefs.h
"

18 
SùpHwC⁄v
 
	gmyPl
;

19 
C⁄vP¨am
 * 
	g±C⁄v
;

20 
UI¡8
 
SùpHwC⁄v_dmaIn0_buf„r
[
SIPP_HW_CONVOLUTION_BUFFER_SIZE
];

21 
UI¡8
 
SùpHwC⁄v_dmaOut0_buf„r
[
SIPP_HW_CONVOLUTION_BUFFER_SIZE
];

24 
UI¡16
 
	gkî
[5*5] =

33 
UI¡8
 
DDR_DATA
 
	giBuf
[
SIPP_HW_CONVOLUTION_BUFFER_SIZE
] 
ALIGNED
(8) =

61 
	$maö
(
¨gc
, *
¨gv
[])

63 
	`UNUSED
 (
¨gc
);

64 
	`UNUSED
 (
¨gv
);

65 
u32
 
sùpEº‹Log
[
SIPP_ERROR_HISTORY_SIZE
];

67 
u32
 
uFûãrIdx
;

68 
	`sùpPœtf‹mInô
();

70 #i‡
	`deföed
(
SIPP_VCS
)

71 
	`öôClocksAndMem‹y
();

72 
	`unôTe°Inô
();

73 
	`DrvTimîInô
();

74 
	`DrvDdrInôüli£
(
NULL
);

77 
	`buûdSùpHwC⁄v
(&
myPl
);

79 i‡(
	`sùpPùeGëEº‹Sètus
 (
myPl
.
∂
))

81 
u32
 
îrNum
;

82 
	`¥ötf
 ("Pipeline creationÉrror\nError codes:\n");

83 
îrNum
 = 
	`sùpGëEº‹Hi°‹y
 (
sùpEº‹Log
);

84 
îrNum
)

86 
	`¥ötf
 ("%08lx\n", 
sùpEº‹Log
[
îrNum
 - 0x1]);

87 
îrNum
--;

91 
	`c⁄figSùpHwC⁄v
(&
myPl
);

95 
uFûãrIdx
 = 0x0; uFûãrIdx < 
myPl
.
∂
->
nFûãrs
; uFilterIdx++ )

97 i‡(
myPl
.
∂
->
fûãrs
[
uFûãrIdx
]->
unô
 =
SIPP_CONV_ID
)

99 
±C⁄v
 = (
C⁄vP¨am
 *)
myPl
.
∂
->
fûãrs
[
uFûãrIdx
]->
∑øms
;

104 #i‡
	`deföed
(
MA2150
Ë|| deföed(
MA2155
Ë|| deföed(
MA2450
Ë|| deföed(
MA2455
)

105 
±C⁄v
->
cfg
=
	`CONV_CFG
(3, 1, 1, 0, 1, 0, 0x3646, 0, 0);

107 
±C⁄v
->
cfg
=
	`CONV_CFG
(3, 1, 0, 0, 0, 0, 0);

111 
	`∑ckC⁄v5x5CCM
(
±C⁄v
, 
kî
);

113 
	`ªadSùpHwC⁄vI≈ut
(&
myPl
);

114 
	`sùpPro˚ssFøme
(
myPl
.
∂
);

116 i‡(
	`sùpPùeGëEº‹Sètus
 (
myPl
.
∂
))

118 
u32
 
îrNum
;

119 
	`¥ötf
 ("PipelineÑuntimeÉrror\nError codes:\n");

120 
îrNum
 = 
	`sùpGëEº‹Hi°‹y
 (
sùpEº‹Log
);

121 
îrNum
)

123 
	`¥ötf
 ("%08lx\n", 
sùpEº‹Log
[
îrNum
 - 0x1]);

124 
îrNum
--;

128 
	`wrôeSùpHwC⁄vOuçut
(&
myPl
);

132 
	`sùpDbgCom∑ªU8
(
iBuf
, 
SùpHwC⁄v_dmaOut0_buf„r
, 
SIPP_HW_CONVOLUTION_BUFFER_SIZE
);

133 #ifde‡
SIPP_VCS


134 
	`unôTe°FöÆRï‹t
();

138 
	}
}

	@Sipp/SippFw/testHwConvUpperSlices/leon/sippHwConv.c

13 
	~"sùpHwC⁄v.h
"

15 
	~<ö˛ude/sùpHwDefs.h
>

19 
UI¡8
 
DDR_DATA
 
	gSùpHwC⁄v_dmaOut0_buf„r
[
SIPP_HW_CONVOLUTION_BUFFER_WIDTH
* 
SIPP_HW_CONVOLUTION_BUFFER_HEIGHT
* 
SIPP_HW_CONVOLUTION_BUFFER_NUM_PLANES
]
ALIGNED
(8);

22 
	$ªadSùpHwC⁄vI≈ut
(
SùpHwC⁄v
 *
pPl
)

25 ()(
pPl
);

27 
	}
}

29 
	$wrôeSùpHwC⁄vOuçut
(
SùpHwC⁄v
 *
pPl
)

31 
	`sùpWrFûeU8
((
UI¡8
*)
SùpHwC⁄v_dmaOut0_buf„r
,
SIPP_HW_CONVOLUTION_BUFFER_WIDTH
 * 
SIPP_HW_CONVOLUTION_BUFFER_HEIGHT
 * 
SIPP_HW_CONVOLUTION_BUFFER_NUM_PLANES
* (UInt8),"out_1280x4_HwConv.raw");

33 ()(
pPl
);

35 
	}
}

37 
	$buûdSùpHwC⁄v
(
SùpHwC⁄v
 *
pPl
)

40 
pPl
->
∂
 = 
	`sùpCª©ePùñöe
(13, 13, 
	`SIPP_MBIN
(
mböImgSùp
));

43 
pPl
->
dmaIn0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x00, 
SIPP_HW_CONVOLUTION_BUFFER_WIDTH
, 
SIPP_HW_CONVOLUTION_BUFFER_HEIGHT
, 
	`N_PL
(
SIPP_HW_CONVOLUTION_BUFFER_NUM_PLANES
), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

44 
pPl
->
c⁄vﬁuti⁄0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x0, 
SIPP_HW_CONVOLUTION_BUFFER_WIDTH
, 
SIPP_HW_CONVOLUTION_BUFFER_HEIGHT
, 
	`N_PL
(
SIPP_HW_CONVOLUTION_BUFFER_NUM_PLANES
), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_CONV_ID
, 0);

45 
pPl
->
dmaOut0
 = 
	`sùpCª©eFûãr
’Pl->
∂
, 0x00, 
SIPP_HW_CONVOLUTION_BUFFER_WIDTH
, 
SIPP_HW_CONVOLUTION_BUFFER_HEIGHT
, 
	`N_PL
(
SIPP_HW_CONVOLUTION_BUFFER_NUM_PLANES
), 
	`SZ
(
UI¡8
), 
SIPP_AUTO
, (
FnSvuRun
)
SIPP_DMA_ID
, 0);

48 
	`sùpLökFûãr
(
pPl
->
c⁄vﬁuti⁄0
,ÖPl->
dmaIn0
, 3,3 );

49 
	`sùpLökFûãr
(
pPl
->
dmaOut0
,ÖPl->
c⁄vﬁuti⁄0
, 1,1 );

51 
	}
}

54 
	$c⁄figSùpHwC⁄v
(
SùpHwC⁄v
 *
pPl
)

56 
DmaP¨am
 *
dmaIn0Cfg
 = (DmaP¨am *)
pPl
->
dmaIn0
->
∑øms
;

57 
C⁄vP¨am
 *
c⁄vﬁuti⁄0Cfg
 = (C⁄vP¨am *)
pPl
->
c⁄vﬁuti⁄0
->
∑øms
;

58 
DmaP¨am
 *
dmaOut0Cfg
 = (DmaP¨am *)
pPl
->
dmaOut0
->
∑øms
;

63 
c⁄vﬁuti⁄0Cfg
->
cfg
= 0;

64 
dmaIn0Cfg
->
ddrAddr
 = (
UI¡32
)
iBuf
;

65 
dmaOut0Cfg
->
ddrAddr
 = (
UI¡32
)&
SùpHwC⁄v_dmaOut0_buf„r
;

68 
	}
}

	@Sipp/SippFw/testHwConvUpperSlices/leon/sippHwConv.h

13 #i‚de‡
__SIPPHWCONV_H__


14 
	#__SIPPHWCONV_H__


	)

16 
	~<sùp.h
>

17 
	~<sùpTe°Comm⁄.h
>

19 
	~"sùpHwC⁄vDefs.h
"

23 
UI¡8
 
DDR_DATA
 
SùpHwC⁄v_dmaOut0_buf„r
[ 
SIPP_HW_CONVOLUTION_BUFFER_WIDTH
 * 
SIPP_HW_CONVOLUTION_BUFFER_HEIGHT
 * 
SIPP_HW_CONVOLUTION_BUFFER_NUM_PLANES
 ]
ALIGNED
(8);

27 
	sSùpHwC⁄v


30 
SùpPùñöe
 *
	m∂
;

33 
SùpFûãr
 *
	mdmaIn0
;

34 
SùpFûãr
 *
	mdmaOut0
;

35 
SùpFûãr
 *
	mc⁄vﬁuti⁄0
;

37 } 
	tSùpHwC⁄v
;

39 
ªadSùpHwC⁄vI≈ut
(
SùpHwC⁄v
 *
pPl
);

40 
wrôeSùpHwC⁄vOuçut
(
SùpHwC⁄v
 *
pPl
);

42 
buûdSùpHwC⁄v
(
SùpHwC⁄v
 *
pPl
);

43 
c⁄figSùpHwC⁄v
(
SùpHwC⁄v
 *
pPl
);

	@Sipp/SippFw/testHwConvUpperSlices/leon/sippHwConvDefs.h

7 
	~"sùpPœtf‹m.h
"

9 #i‚de‡
_SIPPHWCONVOLUTIONDEFS_H_


10 
	#_SIPPHWCONVOLUTIONDEFS_H_


	)

14 
	#SIPP_HW_CONVOLUTION_BUFFER_WIDTH
 1280

	)

15 
	#SIPP_HW_CONVOLUTION_BUFFER_HEIGHT
 4

	)

16 
	#SIPP_HW_CONVOLUTION_BUFFER_NUM_PLANES
 1

	)

17 
	#SIPP_HW_CONVOLUTION_BUFFER_SIZE
 (
SIPP_HW_CONVOLUTION_BUFFER_WIDTH
 * 
SIPP_HW_CONVOLUTION_BUFFER_HEIGHT
 * 
SIPP_HW_CONVOLUTION_BUFFER_NUM_PLANES
)

	)

21 
UI¡8
 
iBuf
[
SIPP_HW_CONVOLUTION_BUFFER_SIZE
];

	@cdk/apps/arch/ma2x5x/cdk_FLIC_1xIMX214/leon/AppSpecInterface.h

8 #i‚de‡
APPS_GUZZISPI_MV182_A208M_B208M_C208M_MA2150_LEON_APPSPECINTERFACE_H_


9 
	#APPS_GUZZISPI_MV182_A208M_B208M_C208M_MA2150_LEON_APPSPECINTERFACE_H_


	)

11 
	~"hÆ/hÆ_ˇmîa_moduÀ/h©_cm_drivî.h
"

14 
	~<utûs/mms_debug.h
>

15 
	~<utûs/¥ofûe/¥ofûe.h
>

16 
	~<oßl/oßl_°dlib.h
>

17 
	~<oßl/oßl_muãx.h
>

18 
	~<oßl/oßl_time.h
>

19 
	~<oßl/oßl_°rög.h
>

21 
	~"£ndOutApi.h
"

22 
	~"PùeI•3Cams.h
"

24 #i‚de‡
PIPE_CREATE


25 
	#PIPE_CREATE
 
pùe3CamsCª©e


	)

27 #i‚de‡
PIPE_DESTROY


28 
	#PIPE_DESTROY
 
pùe3CamsDe°roy


	)

31 
	#APP_SPEC_DEFS01
 
	`mmsdbg_deföe_v¨übÀ
(
vdl_ic
, 
DL_DEFAULT
, 0, "vdl_ic", "GuzzòIC.");

	)

34 #i‚de‡
MMSDEBUGLEVEL


35 
	#MMSDEBUGLEVEL
 
	`mmsdbg_u£_v¨übÀ
(
vdl_ic
)

	)

38 
	#INSTANCES_COUNT_MAX
 
MAX_NR_OF_CAMS


	)

40 
	#APP_DBG_ERROR
 
mmsdbg


	)

43 
ölöe
 
	$gëSrcLimôs
(
uöt32_t
 
§cId
, 
icSour˚Sëup
* 
§cSë
) {

44 
h©_ˇmîa_limôs_t
 
limôs
;

45 i‡–0 =
	`hai_cm_drivî_gë_ˇmîa_limôs
(
§cId
, &
limôs
)) {

46 
§cSë
->
maxWidth
 = 
limôs
.maxWidth;

47 
§cSë
->
maxHeight
 = 
limôs
.maxHeight;

48 
§cSë
->
maxPixñs
 = 
limôs
.maxPixels;

49 
§cSë
->
maxBµ
 = 
limôs
.maxBpp;

53 
	}
}

55 
	#UPDATE_SRC_LIMITS
(
SRC_ID
,
RETERN_VAL
Ë
	`gëSrcLimôs
(SRC_ID,RETERN_VAL)

	)

57 
ölöe
 
	$doPröt
(
a
, 
b
, 
c
) {

58 
	`¥ötf
("lg: %d, %d, %d \n", 
a
, 
b
, 
c
);

60 
	}
}

61 
	#_PROFILE_ADD
(
ID
, 
V1
, 
V2
Ë
	`PROFILE_ADD
(ID, V1, V2)

	)

	@cdk/apps/arch/ma2x5x/cdk_FLIC_1xIMX214/leon/PipeIsp3Cams.cpp

1 
	~<Opùe.h
>

3 
	~<Flic.h
>

4 
	~<MemAŒoˇt‹.h
>

6 
	~"PlgSour˚.h
"

7 
	~"PlgI•Cål.h
"

8 
	~"PlgI•Proc.h
"

9 
	~"PlgOutItf.h
"

11 
	~"PùeI•3Cams.h
"

12 
	~"sched.h
"

14 
PlgSour˚
 
	g∂gSrc
 [
APP_NR_OF_CAMS
] 
SECTION
(".cmx_direct.data");

15 
PlgI•Cål
 *
∂gI•Cål
 
SECTION
(".cmx_direct.data");

16 
PlgI•Proc
 
	g∂gI•
 [
APP_NR_OF_CAMS
] 
SECTION
(".cmx_direct.data");

17 
	gPlgPoﬁ
<
	gImgFøme
> 
	g∂gPoﬁSrc
[
APP_NR_OF_CAMS
] 
SECTION
(".cmx_direct.data");

18 
	gPlgPoﬁ
<
	gImgFøme
> 
	g∂gPoﬁI•
[
APP_NR_OF_CAMS
] 
SECTION
(".cmx_direct.data");

19 
PlgOutItf
 
∂gOut
 
SECTION
(".cmx_direct.data");

21 
PlgI•Proc
 
	g∂gI•Sé
 [
APP_NR_OF_CAMS
] 
SECTION
(".cmx_direct.data");

22 
	gPlgPoﬁ
<
	gImgFøme
> 
	g∂gPoﬁI•Sé
[
APP_NR_OF_CAMS
] 
SECTION
(".cmx_direct.data");

24 
Pùñöe
 
p
 
SECTION
(".cmx_direct.data");

27 
	$pùe3CamsCª©e
(
GëSrcSzLimôs
 
gëSrcSzLimôs
)

29 
uöt32_t
 
c
 = 0;

30 
	`OpùeRe£t
();

32 
RgnAŒoc
.
	`Cª©e
(
RgnBuff
, 
DEF_POOL_SZ
);

33 
∂gI•Cål
 = 
PlgI•Cål
::
	`ö°™˚
();

34 
∂gI•Cål
->
	`Cª©e
();

35 
∂gI•Cål
->
schP¨am
.
sched_¥i‹ôy
 = 
CUSTOM_FLIC_PRIORITY
;

36 
∂gOut
 .
	`Cª©e
();

37 
∂gOut
.
schP¨am
.
sched_¥i‹ôy
 = 
CUSTOM_FLIC_PRIORITY
;

38 
c
 = (
uöt32_t
)
IC_SOURCE_0
; c < 
APP_NR_OF_CAMS
; c++) {

39 
∂gSrc
[
c
] .
	`Cª©e
((
icSour˚In°™˚
)c);ÖlgSrc[c].
schP¨am
.
sched_¥i‹ôy
 = 
CUSTOM_FLIC_PRIORITY
;

40 
∂gSrc
[
c
] .
outFmt
 = 
SIPP_FMT_16BIT
;

41 
icSour˚Sëup
 
§cSë
;

42 if(0 =
	`gëSrcSzLimôs
(
c
, &
§cSë
)) {

43 
icSour˚Sëup
* 
§cLimôs
 = &
§cSë
;

44 
§cLimôs
->
maxBµ
 = 16;

45 
∂gPoﬁSrc
[
c
].
	`Cª©e
(&
RgnAŒoc
, 
N_POOL_FRMS_SRC
, ((
§cLimôs
->
maxPixñs
 * srcLimôs->
maxBµ
)) >> 3);

46 
∂gPoﬁI•
[
c
].
	`Cª©e
(&
RgnAŒoc
, 
N_POOL_FRMS
, (
§cLimôs
->
maxPixñs
 * 3)>>1);

47 
∂gPoﬁI•Sé
[
c
].
	`Cª©e
(&
RgnAŒoc
, 
N_POOL_FRMS_STL
, (
§cLimôs
->
maxPixñs
 * 3)>>1);

51 
	`as£π
(0);

54 
∂gI•
[
c
].
	`Cª©e
(c, 
§cSë
.
≠pS≥cificInfo
);

55 
∂gI•
[
c
].
schP¨am
.
sched_¥i‹ôy
 = 
CUSTOM_FLIC_PRIORITY
;

57 
∂gI•Sé
[
c
].
	`Cª©e
(c+
APP_NR_OF_CAMS
, 0);

58 
∂gI•Sé
[
c
].
schP¨am
.
sched_¥i‹ôy
 = 
CUSTOM_FLIC_PRIORITY
;

62 
p
.
	`Add
(
∂gI•Cål
);

63 
p
.
	`Add
(&
∂gOut
);

64 
c
 = 0; c < 
APP_NR_OF_CAMS
; c++) {

65 
p
.
	`Add
(&
∂gSrc
 [
c
]);

66 
p
.
	`Add
(&
∂gI•
 [
c
]);

67 
p
.
	`Add
(&
∂gI•Sé
 [
c
]);

68 
p
.
	`Add
(&
∂gPoﬁSrc
 [
c
]);

69 
p
.
	`Add
(&
∂gPoﬁI•
 [
c
]);

70 
p
.
	`Add
(&
∂gPoﬁI•Sé
[
c
]);

75 
c
 = 0; c < 
APP_NR_OF_CAMS
; c++) {

76 
∂gPoﬁSrc
[
c
].
out
 .
	`Lök
(&
∂gSrc
[c].
öO
);

77 
∂gSrc
[
c
] .
outComm™d
 .
	`Lök
(&
∂gI•Cål
->
öCålRe•⁄£
);

78 
∂gI•Cål
 -> 
outSrcComm™d
[
c
].
	`Lök
(&
∂gSrc
[c].
öComm™d
);

79 
∂gPoﬁI•
[
c
].
out
 .
	`Lök
(&
∂gI•
[c].
öO
);

80 
∂gSrc
[
c
] .
out
 .
	`Lök
(&
∂gI•
[c].
öI
);

81 
∂gI•
[
c
] .
outF
 .
	`Lök
(&
∂gOut
.
ö
 );

82 
∂gI•
[
c
] .
outE
 .
	`Lök
(&
∂gI•Cål
->
öCålRe•⁄£
);

84 
∂gPoﬁI•Sé
[
c
].
out
 .
	`Lök
(&
∂gI•Sé
[c].
öO
);

85 
∂gSrc
[
c
] .
outSé
 .
	`Lök
(&
∂gI•Sé
[c].
öI
);

86 
∂gI•Sé
[
c
] .
outF
 .
	`Lök
(&
∂gOut
.
ö
 );

87 
∂gI•Sé
[
c
] .
outE
 .
	`Lök
(&
∂gI•Cål
->
öCålRe•⁄£
);

90 
∂gOut
.
outCmd
.
	`Lök
(&
∂gI•Cål
->
öCålRe•⁄£
);

91 
∂gI•Cål
->
outOutCmd
.
	`Lök
(&
∂gOut
.
öCmd
);

93 
p
.
	`Sèπ
();

94 
	}
}

96 
	$pùe3CamsDe°roy
() {

97 
p
.
	`St›
();

98 
p
.
	`Waô
();

99 
p
.
	`Dñëe
();

100 
RgnAŒoc
.
	`Dñëe
();

101 
	}
}

	@cdk/apps/arch/ma2x5x/cdk_FLIC_1xIMX214/leon/PipeIsp3Cams.h

12 #i‚de‡
_PIPE_ISP_3CAMS_H


13 
	#_PIPE_ISP_3CAMS_H


	)

15 #ifde‡
__˝lu•lus


19 #i‚de‡
CUSTOM_FLIC_PRIORITY


20 
	#CUSTOM_FLIC_PRIORITY
 211

	)

23 #i‚de‡
N_POOL_FRMS


24 
	#N_POOL_FRMS
 3

	)

27 #i‚de‡
N_POOL_FRMS_SRC


28 
	#N_POOL_FRMS_SRC
 4

	)

31 #i‚de‡
N_POOL_FRMS_STL


32 
	#N_POOL_FRMS_STL
 1

	)

37 #i‚de‡
APP_NR_OF_CAMS


38 
	#APP_NR_OF_CAMS
 1

	)

41 (*
GëSrcSzLimôs
)(
	tuöt32_t
 
	t§cId
, 
	ticSour˚Sëup
* 
	t§cSë
);

44 
pùe3CamsCª©e
(
GëSrcSzLimôs
 
gëSrcSzLimôs
);

47 
pùe3CamsDe°roy
();

50 #ifde‡
__˝lu•lus


	@cdk/apps/arch/ma2x5x/cdk_FLIC_1xIMX214/leon/app_guzzi_command.h

35 #i‚de‡
_APP_GUZZI_COMMAND_H


36 
	#_APP_GUZZI_COMMAND_H


	)

38 #ifde‡
__˝lu•lus


42 
	~<°döt.h
>

44 
	#MAX_DYNAMIC_DTP_PAYLOAD_SIZE
 (64)

	)

47 
APP_GUZZI_COMMAND__NOP
,

48 
APP_GUZZI_COMMAND__CAM_START
,

49 
APP_GUZZI_COMMAND__CAM_STOP
,

50 
APP_GUZZI_COMMAND__CAM_CAPTURE
,

51 
APP_GUZZI_COMMAND__CAM_LENS_MOVE
,

52 
APP_GUZZI_COMMAND__CAM_AF_TRIGGER
,

53 
APP_GUZZI_COMMAND__CAM_AE_MANUAL
,

54 
APP_GUZZI_COMMAND__CAM_AE_AUTO
,

55 
APP_GUZZI_COMMAND__CAM_AWB_MODE
,

56 
APP_GUZZI_COMMAND__CAM_SCENE_MODE
,

57 
APP_GUZZI_COMMAND__CAM_ANTIBANDING_MODE
,

58 
APP_GUZZI_COMMAND__CAM_AE_EXPOSURE_COMPENSATION
,

59 
°h_ñ£2
,

60 
APP_GUZZI_COMMAND__CAM_AE_LOCK
,

61 
APP_GUZZI_COMMAND__CAM_AE_TARGET_FPS_RANGE
,

62 
°h_ñ£3
,

63 
APP_GUZZI_COMMAND__CAM_AWB_LOCK
,

64 
APP_GUZZI_COMMAND__CAM_CAPTURE_INTRENT
,

65 
APP_GUZZI_COMMAND__CAM_CONTROL_MODE
,

66 
°h_ñ£4
,

67 
°h_ñ£5
,

68 
APP_GUZZI_COMMAND__CAM_FRAME_DURATION
,

69 
°h_ñ£7
,

70 
APP_GUZZI_COMMAND__CAM_SENSITIVITY
,

71 
APP_GUZZI_COMMAND__CAM_EFFECT_MODE
,

72 
°h_ñ£8
,

73 
APP_GUZZI_COMMAND__CAM_AF_MODE
,

74 
APP_GUZZI_COMMAND__CAM_NOISE_REDUCTION_STRENGTH
,

75 
APP_GUZZI_COMMAND__CAM_SATURATION
,

76 
°h_ñ£9
,

77 
°h_ñ£10
,

78 
APP_GUZZI_COMMAND__CAM_BRIGHTNESS
,

79 
°h_ñ£11
,

80 
APP_GUZZI_COMMAND__CAM_FORMAT
,

81 
APP_GUZZI_COMMAND__CAM_RESOLUTION
,

82 
APP_GUZZI_COMMAND__CAM_SHARPNESS
,

83 
APP_GUZZI_COMMAND__LIVE_TUNING_UNLOCK
,

84 
APP_GUZZI_COMMAND__LIVE_TUNING_APPLY
,

85 
APP_GUZZI_COMMAND__OUTPUT_CONTROL
,

86 
APP_GUZZI_COMMAND__MAX


87 } 
	t≠p_guzzi_comm™d_id_t
;

90 
≠p_guzzi_comm™d_id_t
 
id
;

93 
uöt32_t
 
id
;

96 
uöt32_t
 
pos
;

97 } 
Àns_move
;

99 
uöt32_t
 
exp_us
;

100 
uöt32_t
 
£nsôivôy_iso
;

101 
uöt32_t
 
‰ame_duøti⁄_us
;

102 } 
´_m™uÆ
;

104 
uöt32_t
 
mode
;

105 } 
awb_mode
;

107 
uöt32_t
 
ty≥
;

108 } 
s˚√_mode
;

110 
uöt32_t
 
ty≥
;

111 } 
™tib™dög_mode
;

113 
uöt32_t
 
ty≥
;

114 } 
´_lock_mode
;

116 
uöt32_t
 
mö_Âs
;

117 
uöt32_t
 
max_Âs
;

118 } 
´_èrgë_Âs_ønge
;

120 
uöt32_t
 
ty≥
;

121 } 
awb_lock_c⁄åﬁ
;

123 
uöt32_t
 
mode
;

124 } 
ˇ±uª_öã¡
;

126 
uöt32_t
 
ty≥
;

127 } 
c⁄åﬁ_mode
;

129 
uöt64_t
 
vÆ
;

130 } 
‰ame_duøti⁄
;

132 
uöt32_t
 
vÆ
;

133 } 
exposuª_com≥nßti⁄
;

135 
uöt32_t
 
iso_vÆ
;

136 } 
£nsôivôy
;

138 
uöt32_t
 
ty≥
;

139 } 
ef„˘_mode
;

141 
uöt32_t
 
ty≥
;

142 } 
af_mode
;

144 
uöt32_t
 
vÆ
;

145 } 
noi£_ªdu˘i⁄_°ªngth
;

147 
uöt32_t
 
vÆ
;

148 } 
ßtuøti⁄
;

150 
uöt32_t
 
vÆ
;

151 } 
brighäess
;

153 
uöt32_t
 
vÆ
;

154 } 
f‹m©
;

156 
uöt32_t
 
width
;

157 
uöt32_t
 
height
;

158 } 
ªsﬁuti⁄
;

160 
uöt32_t
 
vÆ
;

161 } 
sh¨≤ess
;

163 } 
ˇm
;

165 
uöt32_t
 
size
;

166 
uöt32_t
 
off£t
;

167 
uöt8_t
 
d©a
[
MAX_DYNAMIC_DTP_PAYLOAD_SIZE
];

168 } 
live_tunög
;

170 
uöt32_t
 
ˇmîa_í_bô_mask
;

171 
uöt32_t
 
‰ame_ty≥_í_bô_mask
;

172 
uöt32_t
 
‰ame_f‹m©_í_bô_mask
;

173 } 
ouçut_c⁄åﬁ
;

175 } 
	t≠p_guzzi_comm™d_t
;

177 
	t≠p_guzzi_comm™d_ˇŒback_t
(

178 *
	t≠p_¥iv©e
,

179 
	t≠p_guzzi_comm™d_t
 *
	tcomm™d


182 
≠p_guzzi_comm™d_≥ek
(

183 *
≠p_¥iv©e
,

184 
≠p_guzzi_comm™d_ˇŒback_t
 *
ˇŒback


186 
≠p_guzzi_comm™d_waô
(

187 *
≠p_¥iv©e
,

188 
≠p_guzzi_comm™d_ˇŒback_t
 *
ˇŒback


190 
≠p_guzzi_comm™d_waô_timeout
(

191 *
≠p_¥iv©e
,

192 
≠p_guzzi_comm™d_ˇŒback_t
 *
ˇŒback
,

193 
uöt32_t
 
timeout_ms


196 #ifde‡
__˝lu•lus


	@cdk/apps/arch/ma2x5x/cdk_FLIC_1xIMX214/leon/app_guzzi_command_dbg.c

35 
	~<oßl/oßl_time.h
>

36 
	~<swcLe⁄Utûs.h
>

37 
	~<≠p_guzzi_comm™d.h
>

38 
	~"≠p_guzzi_comm™d_dbg.h
"

40 #i‚de‡
APP_GUZZI_COMMAND_DBG_PROBE_INTERVAL_MS


41 
	#APP_GUZZI_COMMAND_DBG_PROBE_INTERVAL_MS
 10

	)

44 
uöt32_t
 
	g≠p_guzzi_comm™d_dbg_id
 = (uöt32_t)
APP_GUZZI_COMMAND__NOP
;

45 
uöt32_t
 
	g≠p_guzzi_comm™d_dbg_ˇm_id
 = 0;

46 
uöt32_t
 
	g≠p_guzzi_comm™d_dbg_ˇm_Àns_move_pos
 = 0;

47 
uöt32_t
 
	g≠p_guzzi_comm™d_dbg_ˇm_´_m™uÆ_exp_us
 = 0;

48 
uöt32_t
 
	g≠p_guzzi_comm™d_dbg_ˇm_´_m™uÆ_£nsôivôy_iso
 = 0;

49 
uöt32_t
 
	g≠p_guzzi_comm™d_dbg_ˇm_´_m™uÆ_‰ame_duøti⁄_us
 = 0;

50 
uöt32_t
 
	g≠p_guzzi_comm™d_dbg_ˇm_awb_mode
 = 0;

51 
uöt32_t
 
	g≠p_guzzi_comm™d_dbg_ˇm_™tib™dög_mode
 = 0;

52 
uöt32_t
 
	g≠p_guzzi_comm™d_dbg_ˇm_´_lock_c⁄åﬁ
 = 0;

53 
uöt32_t
 
	g≠p_guzzi_comm™d_dbg_ˇm_´_èrgë_Âs_mö
 = 0;

54 
uöt32_t
 
	g≠p_guzzi_comm™d_dbg_ˇm_´_èrgë_Âs_max
 = 0;

55 
uöt32_t
 
	g≠p_guzzi_comm™d_dbg_ˇm_awb_lock_c⁄åﬁ
 = 0;

56 
uöt32_t
 
	g≠p_guzzi_comm™d_dbg_ˇm_ˇ±uª_öã¡
 = 0;

57 
uöt32_t
 
	g≠p_guzzi_comm™d_dbg_ˇm_c⁄åﬁ
 = 0;

58 
uöt32_t
 
	g≠p_guzzi_comm™d_dbg_ˇm_exp_com≥nßti⁄
 = 0;

59 
uöt32_t
 
	g≠p_guzzi_comm™d_dbg_ˇm_iso
 = 0;

60 
uöt32_t
 
	g≠p_guzzi_comm™d_dbg_ˇm_ef„˘_mode
 = 0;

61 
uöt64_t
 
	g≠p_guzzi_comm™d_dbg_ˇm_‰ame_duøti⁄
 = 0;

63 
	~<utûs/mms_debug.h
>

65 
mmsdbg_deföe_v¨übÀ
(

66 
vdl_≠p_guzzi_comm™d_dbg
,

67 
DL_DEFAULT
,

72 
	#MMSDEBUGLEVEL
 
	`mmsdbg_u£_v¨übÀ
(
vdl_≠p_guzzi_comm™d_dbg
)

	)

74 
	#U
(
V
Ë
	`swcLe⁄RódNoCacheU32
(
	`unˇched
((
uöt32_t
)&(V)))

	)

75 
ölöe
 
uöt32_t
 
	$unˇched
(
uöt32_t
 
v
)

77 i‡((0x70000000 <
v
) && (v <= 0x70200000)) {

78  
v
 | 0x80000000;

79 } i‡((0x80000000 <
v
) && (v <= 0x88000000)) {

80  
v
 | 0x40000000;

82  
v
;

83 
	}
}

85 
≠p_guzzi_comm™d_t
 *
	$≠p_guzzi_comm™d_dbg_fûl
(

86 
≠p_guzzi_comm™d_t
 *
comm™d


89 (
≠p_guzzi_comm™d_id_t
)
	`U
(
≠p_guzzi_comm™d_dbg_id
)) {

90 
APP_GUZZI_COMMAND__CAM_START
:

91 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_START
;

93 
APP_GUZZI_COMMAND__CAM_STOP
:

94 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_STOP
;

96 
APP_GUZZI_COMMAND__CAM_CAPTURE
:

97 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_CAPTURE
;

99 
APP_GUZZI_COMMAND__CAM_LENS_MOVE
:

100 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_LENS_MOVE
;

101 
comm™d
->
ˇm
.
Àns_move
.
pos
 =

102 
	`U
(
≠p_guzzi_comm™d_dbg_ˇm_Àns_move_pos
);

104 
APP_GUZZI_COMMAND__CAM_AF_TRIGGER
:

105 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_AF_TRIGGER
;

107 
APP_GUZZI_COMMAND__CAM_AE_MANUAL
:

108 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_AE_MANUAL
;

109 
comm™d
->
ˇm
.
´_m™uÆ
.
exp_us
 =

110 
	`U
(
≠p_guzzi_comm™d_dbg_ˇm_´_m™uÆ_exp_us
);

111 
comm™d
->
ˇm
.
´_m™uÆ
.
£nsôivôy_iso
 =

112 
	`U
(
≠p_guzzi_comm™d_dbg_ˇm_´_m™uÆ_£nsôivôy_iso
);

113 
comm™d
->
ˇm
.
´_m™uÆ
.
‰ame_duøti⁄_us
 =

114 
	`U
(
≠p_guzzi_comm™d_dbg_ˇm_´_m™uÆ_‰ame_duøti⁄_us
);

116 
APP_GUZZI_COMMAND__CAM_AE_AUTO
:

117 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_AE_AUTO
;

119 
APP_GUZZI_COMMAND__CAM_AWB_MODE
:

120 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_AWB_MODE
;

121 
comm™d
->
ˇm
.
awb_mode
.
mode
 =

122 
	`U
(
≠p_guzzi_comm™d_dbg_ˇm_awb_mode
);

124 
APP_GUZZI_COMMAND__CAM_ANTIBANDING_MODE
:

125 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_ANTIBANDING_MODE
;

126 
comm™d
->
ˇm
.
™tib™dög_mode
.
ty≥
 =

127 
	`U
(
≠p_guzzi_comm™d_dbg_ˇm_™tib™dög_mode
);

129 
APP_GUZZI_COMMAND__CAM_AE_LOCK
:

130 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_AE_LOCK
;

131 
comm™d
->
ˇm
.
´_lock_mode
.
ty≥
 =

132 
	`U
(
≠p_guzzi_comm™d_dbg_ˇm_´_lock_c⁄åﬁ
);

134 
APP_GUZZI_COMMAND__CAM_AE_TARGET_FPS_RANGE
:

135 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_AE_TARGET_FPS_RANGE
;

136 
comm™d
->
ˇm
.
´_èrgë_Âs_ønge
.
mö_Âs
 =

137 
	`U
(
≠p_guzzi_comm™d_dbg_ˇm_´_èrgë_Âs_mö
);

138 
comm™d
->
ˇm
.
´_èrgë_Âs_ønge
.
max_Âs
 =

139 
	`U
(
≠p_guzzi_comm™d_dbg_ˇm_´_èrgë_Âs_max
);

141 
APP_GUZZI_COMMAND__CAM_AWB_LOCK
:

142 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_AWB_LOCK
;

143 
comm™d
->
ˇm
.
awb_lock_c⁄åﬁ
.
ty≥
 =

144 
	`U
(
≠p_guzzi_comm™d_dbg_ˇm_awb_lock_c⁄åﬁ
);

146 
APP_GUZZI_COMMAND__CAM_CAPTURE_INTRENT
:

147 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_CAPTURE_INTRENT
;

148 
comm™d
->
ˇm
.
ˇ±uª_öã¡
.
mode
 =

149 
	`U
(
≠p_guzzi_comm™d_dbg_ˇm_ˇ±uª_öã¡
);

151 
APP_GUZZI_COMMAND__CAM_CONTROL_MODE
:

152 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_CONTROL_MODE
;

153 
comm™d
->
ˇm
.
c⁄åﬁ_mode
.
ty≥
 =

154 
	`U
(
≠p_guzzi_comm™d_dbg_ˇm_c⁄åﬁ
);

156 
APP_GUZZI_COMMAND__CAM_FRAME_DURATION
:

157 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_FRAME_DURATION
;

158 
comm™d
->
ˇm
.
‰ame_duøti⁄
.
vÆ
 =

159 
	`U
(
≠p_guzzi_comm™d_dbg_ˇm_c⁄åﬁ
);

161 
APP_GUZZI_COMMAND__CAM_AE_EXPOSURE_COMPENSATION
:

162 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_AE_EXPOSURE_COMPENSATION
;

163 
comm™d
->
ˇm
.
exposuª_com≥nßti⁄
.
vÆ
 =

164 
	`U
(
≠p_guzzi_comm™d_dbg_ˇm_exp_com≥nßti⁄
);

166 
APP_GUZZI_COMMAND__CAM_SENSITIVITY
:

167 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_SENSITIVITY
;

168 
comm™d
->
ˇm
.
£nsôivôy
.
iso_vÆ
 =

169 
	`U
(
≠p_guzzi_comm™d_dbg_ˇm_iso
);

171 
APP_GUZZI_COMMAND__CAM_EFFECT_MODE
:

172 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_EFFECT_MODE
;

173 
comm™d
->
ˇm
.
ef„˘_mode
.
ty≥
 =

174 
	`U
(
≠p_guzzi_comm™d_dbg_ˇm_ef„˘_mode
);

177 
	`mmsdbg
(

178 
DL_ERROR
,

180 
	`U
(
≠p_guzzi_comm™d_dbg_id
)

182 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__NOP
;

184 
comm™d
->
ˇm
.
id
 = 
	`U
(
≠p_guzzi_comm™d_dbg_ˇm_id
);

186  
comm™d
;

187 
	}
}

189 
	$≠p_guzzi_comm™d_dbg_≥ek
(

190 *
≠p_¥iv©e
,

191 
≠p_guzzi_comm™d_ˇŒback_t
 *
ˇŒback


194 
≠p_guzzi_comm™d_t
 
comm™d
;

196 i‡(
	`U
(
≠p_guzzi_comm™d_dbg_id
Ë!(
uöt32_t
)
APP_GUZZI_COMMAND__NOP
) {

197 
	`ˇŒback
(

198 
≠p_¥iv©e
,

199 
	`≠p_guzzi_comm™d_dbg_fûl
(

200 &
comm™d


204 
≠p_guzzi_comm™d_dbg_id
 = (
uöt32_t
)
APP_GUZZI_COMMAND__NOP
;

209 
	}
}

211 
	$≠p_guzzi_comm™d_dbg_waô
(

212 *
≠p_¥iv©e
,

213 
≠p_guzzi_comm™d_ˇŒback_t
 *
ˇŒback


216 !
	`≠p_guzzi_comm™d_dbg_≥ek
(
≠p_¥iv©e
, 
ˇŒback
)) {

217 
	`oßl_u¶ìp
(
APP_GUZZI_COMMAND_DBG_PROBE_INTERVAL_MS
*1000);

219 
	}
}

221 
	$≠p_guzzi_comm™d_dbg_waô_timeout
(

222 *
≠p_¥iv©e
,

223 
≠p_guzzi_comm™d_ˇŒback_t
 *
ˇŒback
,

224 
uöt32_t
 
timeout_ms


227 
uöt32_t
 
À·
, 
m¶ìp
;

228 
ˇŒed
;

230 
À·
 = 
timeout_ms
;

232 !(
ˇŒed
 = 
	`≠p_guzzi_comm™d_dbg_≥ek
(
≠p_¥iv©e
, 
ˇŒback
)Ë&& 
À·
) {

233 
m¶ìp
 = 
APP_GUZZI_COMMAND_DBG_PROBE_INTERVAL_MS
 < 
À·


234 ? 
APP_GUZZI_COMMAND_DBG_PROBE_INTERVAL_MS


235 : 
À·
;

236 
	`oßl_u¶ìp
(
m¶ìp
*1000);

237 
À·
 -
m¶ìp
;

240  
ˇŒed
;

241 
	}
}

	@cdk/apps/arch/ma2x5x/cdk_FLIC_1xIMX214/leon/app_guzzi_command_dbg.h

35 #i‚de‡
_APP_GUZZI_COMMAND_DBG_H


36 
	#_APP_GUZZI_COMMAND_DBG_H


	)

38 #ifde‡
__˝lu•lus


42 
	~<≠p_guzzi_comm™d.h
>

44 
≠p_guzzi_comm™d_dbg_≥ek
(

45 *
≠p_¥iv©e
,

46 
≠p_guzzi_comm™d_ˇŒback_t
 *
ˇŒback


48 
≠p_guzzi_comm™d_dbg_waô
(

49 *
≠p_¥iv©e
,

50 
≠p_guzzi_comm™d_ˇŒback_t
 *
ˇŒback


52 
≠p_guzzi_comm™d_dbg_waô_timeout
(

53 *
≠p_¥iv©e
,

54 
≠p_guzzi_comm™d_ˇŒback_t
 *
ˇŒback
,

55 
uöt32_t
 
timeout_ms


59 #ifde‡
__˝lu•lus


	@cdk/apps/arch/ma2x5x/cdk_FLIC_1xIMX214/leon/app_guzzi_command_spi.c

35 
	~<°dio.h
>

36 
	~<°dlib.h
>

37 
	~<°rög.h
>

38 
	~<as£π.h
>

40 
	~<πems/libio.h
>

41 
	~<utûs/mms_debug.h
>

43 
	~<DrvGpio.h
>

45 
	~<OsDrvSpiSœveCP.h
>

46 
	~<OsMesßgePrŸocﬁ.h
>

48 
	~"≠p_guzzi_comm™d_•i.h
"

49 
	~"≠p_guzzi_•i_comm™ds.h
"

51 #i‚de‡
APP_GUZZI_CAMMAND_SPI_HOST_NOTIFY_GPIO


52 
	#APP_GUZZI_CAMMAND_SPI_HOST_NOTIFY_GPIO
 22

	)

54 #i‚de‡
APP_GUZZI_CAMMAND_SPI_CH_ID


55 
	#APP_GUZZI_CAMMAND_SPI_CH_ID
 
SPI1


	)

57 #i‚de‡
APP_GUZZI_CAMMAND_SPI_VC_ID


58 
	#APP_GUZZI_CAMMAND_SPI_VC_ID
 1

	)

60 #i‚de‡
APP_GUZZI_CAMMAND_SPI_VC_PRIO


61 
	#APP_GUZZI_CAMMAND_SPI_VC_PRIO
 150

	)

64 
	#RTEMS_DRIVER_AUTO_MAJOR
 0

	)

65 
	#SPI_COMMAND_BUFFER_SIZE
 1024

	)

67 
mmsdbg_deföe_v¨übÀ
(

68 
vdl_≠p_guzzi_comm™d_•i
,

69 
DL_DEFAULT
,

74 
	#MMSDEBUGLEVEL
 
	`mmsdbg_u£_v¨übÀ
(
vdl_≠p_guzzi_comm™d_•i
)

	)

76 
DRVSPI_CONFIGURATION
(

77 
APP_GUZZI_CAMMAND_SPI_CH_ID
,

82 
APP_GUZZI_CAMMAND_SPI_HOST_NOTIFY_GPIO
,

85 
DECLARE_COMMUNICATION_PROTOCOL_DRIVER_TABLE
(

86 
comm_¥Ÿocﬁ_dúvî_èbÀ


88 
DECLARE_OS_MESSAGING_VIRTUAL_CHANNEL
(

89 
comm_¥Ÿocﬁ_vc
,

91 
APP_GUZZI_CAMMAND_SPI_VC_ID
,

92 
APP_GUZZI_CAMMAND_SPI_VC_PRIO
,

93 
SPI_COMMAND_BUFFER_SIZE
,

94 
SPI_COMMAND_BUFFER_SIZE
,

98 
πems_devi˚_maj‹_numbî
 
	gcomm_¥Ÿocﬁ_maj‹
;

99 
	g•i_comm™d_buf„r
[
SPI_COMMAND_BUFFER_SIZE
] 
__©åibuã__
((

100 
£˘i⁄
(".ddr.bss"),

101 
Æig√d
(8)

104 
uöt32_t
 
	$gë_dy«mic_tunög
 (
≠p_guzzi_comm™d_t
 *
comm™d
, * 
d©a
)

106 *
√xt
;

107 
uöt32
 
i
;

108 
uöt8_t
 *
dç_∑ylﬂd
 = 
comm™d
->
live_tunög
.
d©a
;

110 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__NOP
;

111 
comm™d
->
live_tunög
.
size
 = 
	`°πoul
(
d©a
, &
√xt
, 0);

113 i‡(
comm™d
->
live_tunög
.
size
 > (comm™d->live_tunög.
d©a
)) {

114 
	`mmsdbg
(
DL_ERROR
, "Dynamic dtp size: %dÉxceeded: %d",

115 ()
comm™d
->
live_tunög
.
size
,

116 (
comm™d
->
live_tunög
.
d©a
)

118 
EXIT_1
;

121 
comm™d
->
live_tunög
.
off£t
 = 
	`°πoul
(
√xt
, &next, 0);

122 
i
0; i < 
comm™d
->
live_tunög
.
size
; i ++) {

123 *
dç_∑ylﬂd
 = 
	`°πoul
(
√xt
, &next, 0);

124 
dç_∑ylﬂd
 ++;

127 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__LIVE_TUNING_APPLY
;

130 
EXIT_1
:

132 
	}
}

134 
uöt32_t
 
	$gë_tunög_id
 (
≠p_guzzi_comm™d_t
 *
comm™d
, *
d©a
)

137 ' ' =*
d©a
) {

138 
d©a
++;

141 
	`°∫˝y
((*)
comm™d
->
live_tunög
.
d©a
,

142 
d©a
,

143 
MAX_DYNAMIC_DTP_PAYLOAD_SIZE
);

145 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__LIVE_TUNING_UNLOCK
;

147 
	}
}

150 
uöt32_t
 
	$gë_ouçut_c⁄åﬁ
 (
≠p_guzzi_comm™d_t
 *
comm™d
, *
d©a
)

154 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__OUTPUT_CONTROL
;

155 
comm™d
->
ouçut_c⁄åﬁ
.
ˇmîa_í_bô_mask
 = 
	`°πoul
(

156 
d©a
,

157 &
d©a
,

160 
comm™d
->
ouçut_c⁄åﬁ
.
‰ame_ty≥_í_bô_mask
 = 
	`°πoul
(

161 
d©a
,

162 &
d©a
,

165 
comm™d
->
ouçut_c⁄åﬁ
.
‰ame_f‹m©_í_bô_mask
 = 
	`°πoul
(

166 
d©a
,

167 &
d©a
,

171 
	}
}

173 
≠p_guzzi_comm™d_t
 *
	$•i_comm™d_to_≠p_guzzi_comm™d
(

174 
≠p_guzzi_comm™d_t
 *
comm™d
,

175 *
comm™d_•i


178 
uöt32_t
 
comm™d_•i_id
;

180 *
comm™d_•i_∑øms
;

182 
comm™d_•i_id
 = 
	`°πoul
(

183 
comm™d_•i
,

184 &
comm™d_•i_∑øms
,

189 
comm™d
->
ˇm
.
id
 = 0;

190 
comm™d_•i_id
) {

191 
APP_GUZZI_SPI_CMD_START_STREAM
:

192 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_START
;

193 
comm™d
->
ˇm
.
id
 = 
	`°πoul
(

194 
comm™d_•i_∑øms
,

195 &
comm™d_•i_∑øms
,

200 
APP_GUZZI_SPI_CMD_STOP_STREAM
:

201 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_STOP
;

202 
comm™d
->
ˇm
.
id
 = 
	`°πoul
(

203 
comm™d_•i_∑øms
,

204 &
comm™d_•i_∑øms
,

208 
APP_GUZZI_SPI_CMD_REQ_STILL
:

209 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_CAPTURE
;

210 
comm™d
->
ˇm
.
id
 = 
	`°πoul
(

211 
comm™d_•i_∑øms
,

212 &
comm™d_•i_∑øms
,

216 
APP_GUZZI_SPI_CMD_MOV_LENS
:

217 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_LENS_MOVE
;

218 
comm™d
->
ˇm
.
id
 = 
	`°πoul
(

219 
comm™d_•i_∑øms
,

220 &
comm™d_•i_∑øms
,

223 
comm™d
->
ˇm
.
Àns_move
.
pos
 = 
	`°πoul
(

224 
comm™d_•i_∑øms
,

225 &
comm™d_•i_∑øms
,

229 
APP_GUZZI_SPI_CMD_FOCUS_TRIGGER
:

230 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_AF_TRIGGER
;

231 
comm™d
->
ˇm
.
id
 = 
	`°πoul
(

232 
comm™d_•i_∑øms
,

233 &
comm™d_•i_∑øms
,

237 
APP_GUZZI_SPI_CMD_AE_MANUAL
:

238 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_AE_MANUAL
;

239 
comm™d
->
ˇm
.
id
 = 
	`°πoul
(

240 
comm™d_•i_∑øms
,

241 &
comm™d_•i_∑øms
,

244 
comm™d
->
ˇm
.
´_m™uÆ
.
exp_us
 = 
	`°πoul
(

245 
comm™d_•i_∑øms
,

246 &
comm™d_•i_∑øms
,

249 
comm™d
->
ˇm
.
´_m™uÆ
.
£nsôivôy_iso
 = 
	`°πoul
(

250 
comm™d_•i_∑øms
,

251 &
comm™d_•i_∑øms
,

254 
comm™d
->
ˇm
.
´_m™uÆ
.
‰ame_duøti⁄_us
 = 
	`°πoul
(

255 
comm™d_•i_∑øms
,

256 &
comm™d_•i_∑øms
,

260 
APP_GUZZI_SPI_CMD_AE_AUTO
:

261 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_AE_AUTO
;

262 
comm™d
->
ˇm
.
id
 = 
	`°πoul
(

263 
comm™d_•i_∑øms
,

264 &
comm™d_•i_∑øms
,

268 
APP_GUZZI_SPI_CMD_SET_AWB_MODE
:

269 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_AWB_MODE
;

270 
comm™d
->
ˇm
.
id
 = 
	`°πoul
(

271 
comm™d_•i_∑øms
,

272 &
comm™d_•i_∑øms
,

275 
comm™d
->
ˇm
.
awb_mode
.
mode
 = 
	`°πoul
(

276 
comm™d_•i_∑øms
,

277 &
comm™d_•i_∑øms
,

281 
APP_GUZZI_SPI_CMD_SCENE_MODES
:

282 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_SCENE_MODE
;

283 
comm™d
->
ˇm
.
id
 = 
	`°πoul
(

284 
comm™d_•i_∑øms
,

285 &
comm™d_•i_∑øms
,

288 
comm™d
->
ˇm
.
s˚√_mode
.
ty≥
 = 
	`°πoul
(

289 
comm™d_•i_∑øms
,

290 &
comm™d_•i_∑øms
,

294 
APP_GUZZI_SPI_CMD_ANTIBANDING_MODES
:

295 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_ANTIBANDING_MODE
;

296 
comm™d
->
ˇm
.
id
 = 
	`°πoul
(

297 
comm™d_•i_∑øms
,

298 &
comm™d_•i_∑øms
,

301 
comm™d
->
ˇm
.
™tib™dög_mode
.
ty≥
 = 
	`°πoul
(

302 
comm™d_•i_∑øms
,

303 &
comm™d_•i_∑øms
,

307 
APP_GUZZI_SPI_CMD_AE_LOCK
:

308 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_AE_LOCK
;

309 
comm™d
->
ˇm
.
id
 = 
	`°πoul
(

310 
comm™d_•i_∑øms
,

311 &
comm™d_•i_∑øms
,

314 
comm™d
->
ˇm
.
´_lock_mode
.
ty≥
 = 
	`°πoul
(

315 
comm™d_•i_∑øms
,

316 &
comm™d_•i_∑øms
,

320 
APP_GUZZI_SPI_CMD_AE_TARGET_FPS_RANGE
:

321 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_AE_TARGET_FPS_RANGE
;

322 
comm™d
->
ˇm
.
id
 = 
	`°πoul
(

323 
comm™d_•i_∑øms
,

324 &
comm™d_•i_∑øms
,

327 
comm™d
->
ˇm
.
´_èrgë_Âs_ønge
.
mö_Âs
 = 
	`°πoul
(

328 
comm™d_•i_∑øms
,

329 &
comm™d_•i_∑øms
,

332 
comm™d
->
ˇm
.
´_èrgë_Âs_ønge
.
max_Âs
 = 
	`°πoul
(

333 
comm™d_•i_∑øms
,

334 &
comm™d_•i_∑øms
,

338 
APP_GUZZI_SPI_CMD_AWB_LOCK
:

339 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_AWB_LOCK
;

340 
comm™d
->
ˇm
.
id
 = 
	`°πoul
(

341 
comm™d_•i_∑øms
,

342 &
comm™d_•i_∑øms
,

345 
comm™d
->
ˇm
.
awb_lock_c⁄åﬁ
.
ty≥
 = 
	`°πoul
(

346 
comm™d_•i_∑øms
,

347 &
comm™d_•i_∑øms
,

351 
APP_GUZZI_SPI_CMD_CAPTURE_INTENT
:

352 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_CAPTURE_INTRENT
;

353 
comm™d
->
ˇm
.
id
 = 
	`°πoul
(

354 
comm™d_•i_∑øms
,

355 &
comm™d_•i_∑øms
,

358 
comm™d
->
ˇm
.
ˇ±uª_öã¡
.
mode
 = 
	`°πoul
(

359 
comm™d_•i_∑øms
,

360 &
comm™d_•i_∑øms
,

364 
APP_GUZZI_SPI_CMD_CONTROL_MODE
:

365 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_CONTROL_MODE
;

366 
comm™d
->
ˇm
.
id
 = 
	`°πoul
(

367 
comm™d_•i_∑øms
,

368 &
comm™d_•i_∑øms
,

371 
comm™d
->
ˇm
.
c⁄åﬁ_mode
.
ty≥
 = 
	`°πoul
(

372 
comm™d_•i_∑øms
,

373 &
comm™d_•i_∑øms
,

377 
APP_GUZZI_SPI_CMD_FRAME_DURATION
:

378 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_FRAME_DURATION
;

379 
comm™d
->
ˇm
.
id
 = 
	`°πoul
(

380 
comm™d_•i_∑øms
,

381 &
comm™d_•i_∑øms
,

384 
comm™d
->
ˇm
.
‰ame_duøti⁄
.
vÆ
 = 
	`°πoul
(

385 
comm™d_•i_∑øms
,

386 &
comm™d_•i_∑øms
,

390 
APP_GUZZI_SPI_CMD_EXPOSURE_COMPENSATION
:

391 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_AE_EXPOSURE_COMPENSATION
;

392 
comm™d
->
ˇm
.
id
 = 
	`°πoul
(

393 
comm™d_•i_∑øms
,

394 &
comm™d_•i_∑øms
,

397 
comm™d
->
ˇm
.
exposuª_com≥nßti⁄
.
vÆ
 = 
	`°πoul
(

398 
comm™d_•i_∑øms
,

399 &
comm™d_•i_∑øms
,

403 
APP_GUZZI_SPI_CMD_SENSITIVITY
:

404 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_SENSITIVITY
;

405 
comm™d
->
ˇm
.
id
 = 
	`°πoul
(

406 
comm™d_•i_∑øms
,

407 &
comm™d_•i_∑øms
,

410 
comm™d
->
ˇm
.
£nsôivôy
.
iso_vÆ
 = 
	`°πoul
(

411 
comm™d_•i_∑øms
,

412 &
comm™d_•i_∑øms
,

416 
APP_GUZZI_SPI_CMD_EFFECT_MODE
:

417 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_EFFECT_MODE
;

418 
comm™d
->
ˇm
.
id
 = 
	`°πoul
(

419 
comm™d_•i_∑øms
,

420 &
comm™d_•i_∑øms
,

423 
comm™d
->
ˇm
.
ef„˘_mode
.
ty≥
 = 
	`°πoul
(

424 
comm™d_•i_∑øms
,

425 &
comm™d_•i_∑øms
,

429 
APP_GUZZI_SPI_CMD_AF_MODE
:

430 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_AF_MODE
;

431 
comm™d
->
ˇm
.
id
 = 
	`°πoul
(

432 
comm™d_•i_∑øms
,

433 &
comm™d_•i_∑øms
,

436 
comm™d
->
ˇm
.
af_mode
.
ty≥
 = 
	`°πoul
(

437 
comm™d_•i_∑øms
,

438 &
comm™d_•i_∑øms
,

442 
APP_GUZZI_SPI_CMD_NOISE_REDUCTION_STRENGTH
:

443 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_NOISE_REDUCTION_STRENGTH
;

444 
comm™d
->
ˇm
.
id
 = 
	`°πoul
(

445 
comm™d_•i_∑øms
,

446 &
comm™d_•i_∑øms
,

449 
comm™d
->
ˇm
.
noi£_ªdu˘i⁄_°ªngth
.
vÆ
 = 
	`°πoul
(

450 
comm™d_•i_∑øms
,

451 &
comm™d_•i_∑øms
,

455 
APP_GUZZI_SPI_CMD_SATURATION
:

456 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_SATURATION
;

457 
comm™d
->
ˇm
.
id
 = 
	`°πoul
(

458 
comm™d_•i_∑øms
,

459 &
comm™d_•i_∑øms
,

462 
comm™d
->
ˇm
.
ßtuøti⁄
.
vÆ
 = 
	`°πoul
(

463 
comm™d_•i_∑øms
,

464 &
comm™d_•i_∑øms
,

468 
APP_GUZZI_SPI_CMD_BRIGHTNESS
:

469 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_BRIGHTNESS
;

470 
comm™d
->
ˇm
.
id
 = 
	`°πoul
(

471 
comm™d_•i_∑øms
,

472 &
comm™d_•i_∑øms
,

475 
comm™d
->
ˇm
.
brighäess
.
vÆ
 = 
	`°πoul
(

476 
comm™d_•i_∑øms
,

477 &
comm™d_•i_∑øms
,

481 
APP_GUZZI_SPI_CMD_STREAM_FORMAT
:

482 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_FORMAT
;

483 
comm™d
->
ˇm
.
id
 = 
	`°πoul
(

484 
comm™d_•i_∑øms
,

485 &
comm™d_•i_∑øms
,

488 
comm™d
->
ˇm
.
f‹m©
.
vÆ
 = 
	`°πoul
(

489 
comm™d_•i_∑øms
,

490 &
comm™d_•i_∑øms
,

494 
APP_GUZZI_SPI_CMD_CAM_RESOLUTION
:

495 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_RESOLUTION
;

496 
comm™d
->
ˇm
.
id
 = 
	`°πoul
(

497 
comm™d_•i_∑øms
,

498 &
comm™d_•i_∑øms
,

501 
comm™d
->
ˇm
.
ªsﬁuti⁄
.
width
 = 
	`°πoul
(

502 
comm™d_•i_∑øms
,

503 &
comm™d_•i_∑øms
,

506 
comm™d
->
ˇm
.
ªsﬁuti⁄
.
height
 = 
	`°πoul
(

507 
comm™d_•i_∑øms
,

508 &
comm™d_•i_∑øms
,

512 
APP_GUZZI_SPI_CMD_SHARPNESS
:

513 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_SHARPNESS
;

514 
comm™d
->
ˇm
.
id
 = 
	`°πoul
(

515 
comm™d_•i_∑øms
,

516 &
comm™d_•i_∑øms
,

519 
comm™d
->
ˇm
.
sh¨≤ess
.
vÆ
 = 
	`°πoul
(

520 
comm™d_•i_∑øms
,

521 &
comm™d_•i_∑øms
,

525 
APP_GUZZI_SPI_LIVE_TUNING_UNLOCK
:

526 
	`gë_tunög_id
(
comm™d
, 
comm™d_•i_∑øms
);

528 
APP_GUZZI_SPI_LIVE_TUNING_APPLY
:

529 
	`gë_dy«mic_tunög
(
comm™d
, 
comm™d_•i_∑øms
);

531 
APP_GUZZI_SPI_CMD_OUT_CTRL
:

532 
	`gë_ouçut_c⁄åﬁ
(
comm™d
, 
comm™d_•i_∑øms
);

535 
	`mmsdbg
(

536 
DL_ERROR
,

538 ()
comm™d_•i_id


540 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__NOP
;

543  
comm™d
;

544 
	}
}

546 
	$nŸify_boŸ_ªady
()

548 
	`DrvGpioSëPöLo
(
APP_GUZZI_CAMMAND_SPI_HOST_NOTIFY_GPIO
);

549 
	`DrvGpioSëPöHi
(
APP_GUZZI_CAMMAND_SPI_HOST_NOTIFY_GPIO
);

550 
	}
}

553 
	$≠p_guzzi_comm™d_•i_≥ek
(

554 *
≠p_¥iv©e
,

555 
≠p_guzzi_comm™d_ˇŒback_t
 *
ˇŒback


558 
≠p_guzzi_comm™d_t
 
comm™d
;

559 *
comm™d_•i
;

560 
n
;

562 
comm™d_•i
 = 
•i_comm™d_buf„r
;

564 
n
 = 
	`MesßgePassögRód
(

565 
APP_GUZZI_CAMMAND_SPI_VC_ID
,

566 
comm™d_•i
,

567 
SPI_COMMAND_BUFFER_SIZE
-1

569 i‡(
n
) {

570 
comm™d_•i
[
n
] = '\000';

571 
	`ˇŒback
(

572 
≠p_¥iv©e
,

573 
	`•i_comm™d_to_≠p_guzzi_comm™d
(

574 &
comm™d
,

575 
comm™d_•i


582 
	}
}

584 
	$≠p_guzzi_comm™d_•i_waô
(

585 *
≠p_¥iv©e
,

586 
≠p_guzzi_comm™d_ˇŒback_t
 *
ˇŒback


589 
≠p_guzzi_comm™d_t
 
comm™d
;

590 *
comm™d_•i
;

591 
πems_libio_rw_¨gs_t
 
å
;

593 
comm™d_•i
 = 
•i_comm™d_buf„r
;

594 
å
.
buf„r
 = 
comm™d_•i
;

596 
	`πems_io_ªad
(

597 
comm_¥Ÿocﬁ_maj‹
,

598 
APP_GUZZI_CAMMAND_SPI_VC_ID
,

599 &
å


601 i‡(
å
.
byãs_moved
) {

602 
comm™d_•i
[
å
.
byãs_moved
] = '\000';

603 
	`ˇŒback
(

604 
≠p_¥iv©e
,

605 
	`•i_comm™d_to_≠p_guzzi_comm™d
(

606 &
comm™d
,

607 
comm™d_•i


611 
	}
}

614 
	$≠p_guzzi_comm™d_•i_waô_timeout
(

615 *
≠p_¥iv©e
,

616 
≠p_guzzi_comm™d_ˇŒback_t
 *
ˇŒback
,

617 
uöt32_t
 
timeout_ms


620 
OsVútuÆCh™√l
 *
vc
;

621 
≠p_guzzi_comm™d_t
 
comm™d
;

622 *
comm™d_•i
;

623 
πems_°©us_code
 
rc
;

624 
πems_evít_£t
 
evíts
;

625 
n
;

627 
comm™d_•i
 = 
•i_comm™d_buf„r
;

630 
	`as£π
(
vc
 = (
OsVútuÆCh™√l
 *)
	`MesßgePassögGëVútuÆCh™√l
(

631 
APP_GUZZI_CAMMAND_SPI_VC_ID


634 
n
 = 
	`Ba£MesßgePassögRód
(

635 (
VútuÆCh™√l
 *)
vc
,

636 
comm™d_•i
,

637 
SPI_COMMAND_BUFFER_SIZE
-1

640 i‡(!
n
) {

641 
vc
->
rxWaôTaskId
 = 
	`πems_èsk_£lf
();

642 
rc
 = 
	`πems_evít_ª˚ive
(

643 
RTEMS_EVENT_0
,

644 
RTEMS_EVENT_ALL
,

645 (
	`πems_˛ock_gë_ticks_≥r_£c⁄d
(Ë/ 1000Ë* 
timeout_ms
,

646 &
evíts


648 i‡(
rc
 =
RTEMS_TIMEOUT
) {

651 
	`as£π
(!
rc
);

652 
n
 = 
	`Ba£MesßgePassögRód
(

653 (
VútuÆCh™√l
 *)
vc
,

654 
comm™d_•i
,

655 
SPI_COMMAND_BUFFER_SIZE
-1

659 i‡(
n
) {

660 
comm™d_•i
[
n
] = '\000';

661 
	`ˇŒback
(

662 
≠p_¥iv©e
,

663 
	`•i_comm™d_to_≠p_guzzi_comm™d
(

664 &
comm™d
,

665 
comm™d_•i


670  
n
 ? 1 : 0;

671 
	}
}

673 
	$≠p_guzzi_comm™d_•i_öô
()

677 
	`as£π
(
RTEMS_SUCCESSFUL
 =
	`πems_io_ªgi°î_drivî
(

678 
RTEMS_DRIVER_AUTO_MAJOR
,

679 &
comm_¥Ÿocﬁ_dúvî_èbÀ
,

680 &
comm_¥Ÿocﬁ_maj‹


683 
	`as£π
(
RTEMS_SUCCESSFUL
 =
	`πems_io_öôülize
(

684 
comm_¥Ÿocﬁ_maj‹
,

686 &
comm_¥Ÿocﬁ_vc


688 
	`as£π
(
RTEMS_SUCCESSFUL
 =
	`πems_io_›í
(

689 
comm_¥Ÿocﬁ_maj‹
,

690 
APP_GUZZI_CAMMAND_SPI_VC_ID
,

691 
NULL


694 
	`nŸify_boŸ_ªady
();

695 
	}
}

	@cdk/apps/arch/ma2x5x/cdk_FLIC_1xIMX214/leon/app_guzzi_command_spi.h

35 #i‚de‡
_APP_GUZZI_COMMAND_SPI_H


36 
	#_APP_GUZZI_COMMAND_SPI_H


	)

38 #ifde‡
__˝lu•lus


42 
	~<≠p_guzzi_comm™d.h
>

44 
≠p_guzzi_comm™d_•i_öô
();

45 
≠p_guzzi_comm™d_•i_≥ek
(

46 *
≠p_¥iv©e
,

47 
≠p_guzzi_comm™d_ˇŒback_t
 *
ˇŒback


49 
≠p_guzzi_comm™d_•i_waô
(

50 *
≠p_¥iv©e
,

51 
≠p_guzzi_comm™d_ˇŒback_t
 *
ˇŒback


53 
≠p_guzzi_comm™d_•i_waô_timeout
(

54 *
≠p_¥iv©e
,

55 
≠p_guzzi_comm™d_ˇŒback_t
 *
ˇŒback
,

56 
uöt32_t
 
timeout_ms


59 #ifde‡
__˝lu•lus


	@cdk/apps/arch/ma2x5x/cdk_FLIC_1xIMX214/leon/app_guzzi_spi_commands.h

35 #i‚de‡
_APP_GUZZI_SPI_COMMANDS_H


36 
	#_APP_GUZZI_SPI_COMMANDS_H


	)

38 #ifde‡
__˝lu•lus


48 
	#APP_GUZZI_SPI_CMD_START_STREAM
 0

	)

49 
	#APP_GUZZI_SPI_CMD_STOP_STREAM
 1

	)

50 
	#APP_GUZZI_SPI_CMD_REQ_STILL
 2

	)

51 
	#APP_GUZZI_SPI_CMD_MOV_LENS
 3

	)

54 
	#APP_GUZZI_SPI_CMD_FOCUS_TRIGGER
 4

	)

55 
	#APP_GUZZI_SPI_CMD_AE_MANUAL
 5

	)

60 
	#APP_GUZZI_SPI_CMD_AE_AUTO
 6

	)

61 
	#APP_GUZZI_SPI_CMD_SET_AWB_MODE
 7

	)

63 
	#APP_GUZZI_SPI_CMD_SCENE_MODES
 8

	)

66 
	#APP_GUZZI_SPI_CMD_ANTIBANDING_MODES
 9

	)

69 
	#APP_GUZZI_SPI_CMD_EXPOSURE_COMPENSATION
 10

	)

72 
	#APP_GUZZI_SPI_CMD_AE_LOCK
 12

	)

75 
	#APP_GUZZI_SPI_CMD_AE_TARGET_FPS_RANGE
 13

	)

79 
	#APP_GUZZI_SPI_CMD_AWB_LOCK
 15

	)

82 
	#APP_GUZZI_SPI_CMD_CAPTURE_INTENT
 16

	)

85 
	#APP_GUZZI_SPI_CMD_CONTROL_MODE
 17

	)

88 
	#APP_GUZZI_SPI_CMD_FRAME_DURATION
 20

	)

91 
	#APP_GUZZI_SPI_CMD_SENSITIVITY
 22

	)

94 
	#APP_GUZZI_SPI_CMD_EFFECT_MODE
 23

	)

97 
	#APP_GUZZI_SPI_CMD_AF_MODE
 25

	)

100 
	#APP_GUZZI_SPI_CMD_NOISE_REDUCTION_STRENGTH
 26

	)

103 
	#APP_GUZZI_SPI_CMD_SATURATION
 27

	)

106 
	#APP_GUZZI_SPI_CMD_BRIGHTNESS
 30

	)

109 
	#APP_GUZZI_SPI_CMD_STREAM_FORMAT
 32

	)

112 
	#APP_GUZZI_SPI_CMD_CAM_RESOLUTION
 33

	)

116 
	#APP_GUZZI_SPI_CMD_SHARPNESS
 34

	)

119 
	#APP_GUZZI_SPI_LIVE_TUNING_UNLOCK
 35

	)

121 
	#APP_GUZZI_SPI_LIVE_TUNING_APPLY
 36

	)

126 
	#APP_GUZZI_SPI_CMD_AE_MERGER
 37

	)

130 
	#APP_GUZZI_SPI_CMD_AWB_MERGER
 38

	)

134 
	#APP_GUZZI_SPI_CMD_CUST_USECASE
 39

	)

137 
	#APP_GUZZI_SPI_CMD_CUST_CAPT_MODE
 40

	)

140 
	#APP_GUZZI_SPI_CMD_CUST_EXP_BRACKETS
 41

	)

145 
	#APP_GUZZI_SPI_CMD_CUST_CAPTURE
 42

	)

149 
	#APP_GUZZI_SPI_CMD_CONTRAST
 43

	)

152 
	#APP_GUZZI_SPI_CMD_AE_REGION
 44

	)

160 
	#APP_GUZZI_SPI_CMD_OUT_CTRL
 45

	)

165 #ifde‡
__˝lu•lus


	@cdk/apps/arch/ma2x5x/cdk_FLIC_1xIMX214/leon/brdDefines.h

1 #i‚de‡
BRD_DEFINES_H


2 
	#BRD_DEFINES_H


	)

4 #ifde‡
MV0182


5 
	#BOARD_REF_CLOCK_KHZ
 (12000)

	)

8 #ifde‡
MV0212


9 
	#BOARD_REF_CLOCK_KHZ
 (12000)

	)

12 #i‚de‡
BOARD_REF_CLOCK_KHZ


13 #îr‹ 
PÀa£
 
£À˘
 
¥›î
 
BOARD
 
ty≥


	@cdk/apps/arch/ma2x5x/cdk_FLIC_1xIMX214/leon/camera_control.c

35 
	~<oßl/oßl_°dty≥s.h
>

36 
	~<oßl/oßl_°dlib.h
>

37 
	~<oßl/oßl_muãx.h
>

38 
	~<utûs/mms_debug.h
>

40 
	~<ˇmîa.h
>

41 
	~<ˇmîa_c⁄fig_ödex.h
>

42 
	~<ˇmîa_c⁄fig_°ru˘.h
>

44 
	~"ˇmîa_c⁄åﬁ.h
"

46 
mmsdbg_deföe_v¨übÀ
(

47 
vdl_ˇmîa_c⁄åﬁ
,

48 
DL_DEFAULT
,

53 
	#MMSDEBUGLEVEL
 
	`mmsdbg_u£_v¨übÀ
(
vdl_ˇmîa_c⁄åﬁ
)

	)

55 #i‚de‡
GUZZI_INSTANCES_MAX


56 
	#GUZZI_INSTANCES_MAX
 3

	)

60 
ˇmîa_t
 *
	mˇmîa
;

61 
oßl_£m
 *
	mcmd_£m
;

62 
oßl_muãx
 *
	mc⁄fig_muãx
;

63 
	mc⁄figs_to_skù
;

64 
	m°›
;

65 
	m°¨t_îr
;

66 
guzzi_ˇmîa3_c⁄åﬁs_ˇ±uª_ªque°_guzzi_‰_id_t
 
	mguzzi_‰_id
;

67 } 
	tˇmîa_c⁄åﬁ_t
;

69 
ˇmîa_c⁄åﬁ_t
 
	gg_ˇmîa_c⁄åﬁ
[
GUZZI_INSTANCES_MAX
];

71 
	$ˇŒback
(

72 
ˇmîa_t
 *
ˇmîa
,

73 *
≠p_¥v_void
,

74 
ˇmîa_evít_t
 
evít
,

75 
d©™
,

76 *
d©≠


79 
ˇmîa_c⁄åﬁ_t
 *
ˇmîa_c⁄åﬁ
;

81 
ˇmîa_c⁄åﬁ
 = 
≠p_¥v_void
;

83 
	`UNUSED
(
ˇmîa
);

84 
	`UNUSED
(
d©≠
);

86 
evít
.
ty≥
) {

87 
CAMERA_EVENT_ERROR
:

88 
	`mmsdbg
(
DL_ERROR
, "Camera CB ERRORÉvent.");

90 
CAMERA_EVENT_ERROR_START
:

91 
	`mmsdbg
(
DL_ERROR
, "Camera CB ERROR_STARTÉvent.");

92 
ˇmîa_c⁄åﬁ
->
°¨t_îr
 = -1;

93 
	`oßl_£m_po°
(
ˇmîa_c⁄åﬁ
->
cmd_£m
);

95 
CAMERA_EVENT_START_DONE
:

96 
	`mmsdbg
(
DL_ERROR
, "Camera CB START_DONEÉvent.");

97 
	`oßl_£m_po°
(
ˇmîa_c⁄åﬁ
->
cmd_£m
);

99 
CAMERA_EVENT_STOP_DONE
:

100 
	`mmsdbg
(
DL_MESSAGE
, "Camera CB STOP_DONEÉvent.");

101 
	`oßl_£m_po°
(
ˇmîa_c⁄åﬁ
->
cmd_£m
);

103 
CAMERA_EVENT_FLUSH_DONE
:

104 
	`mmsdbg
(
DL_MESSAGE
, "Camera CB FLUSH_DONEÉvent.");

105 
	`oßl_£m_po°
(
ˇmîa_c⁄åﬁ
->
cmd_£m
);

107 
CAMERA_EVENT_PROCESS_DONE
:

108 
	`mmsdbg
(
DL_MESSAGE
, "Camera CB PROCESS_DONEÉvent.");

110 
CAMERA_EVENT_BUFFER_FLUSH
:

111 
	`mmsdbg
(
DL_MESSAGE
, "Camera CB BUFFER_FLUSHÉvent.");

113 
CAMERA_EVENT_GENERIC
:

114 
	`mmsdbg
(
DL_MESSAGE
, "Camî®CB GENERICÉvít: sub_ty≥=%d,Çum=%d.", 
evít
.
sub_ty≥
, 
d©™
);

116 
	`oßl_muãx_lock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

117 i‡(
ˇmîa_c⁄åﬁ
->
°›
 == 0)

119 i‡(!
ˇmîa_c⁄åﬁ
->
c⁄figs_to_skù
) {

120 
ˇmîa_c⁄åﬁ
->
guzzi_‰_id
.
v
++;

121 
	`ˇmîa_c⁄fig_£t_begö
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

122 
	`ˇmîa_c⁄fig_£t
(

123 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

124 
GUZZI_CAMERA3_INDEX_CONTROLS_CAPTURE_REQUEST_GUZZI_FR_ID
,

125 &
ˇmîa_c⁄åﬁ
->
guzzi_‰_id


127 
	`ˇmîa_c⁄fig_£t_íd
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

129 
ˇmîa_c⁄åﬁ
->
c⁄figs_to_skù
--;

132 
	`oßl_muãx_u∆ock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

135 
	`mmsdbg
(
DL_ERROR
, "Unk⁄w camî®evíà(%d)!", 
evít
.
v
);

137 
	}
}

139 
uöt32_t
 
	$ˇmîa_c⁄åﬁ_is_a˘ive
(
ˇm_id
)

141  (
g_ˇmîa_c⁄åﬁ
[
ˇm_id
].
ˇmîa
 !
NULL
);

142 
	}
}

145 
	$ˇmîa_c⁄åﬁ_°¨t
(
ˇm_id
)

147 
ˇmîa_c⁄åﬁ_t
 *
ˇmîa_c⁄åﬁ
;

148 
ˇmîa_¸óã_∑øms_t
 
¸óã_∑øms
;

149 
guzzi_ˇmîa3_dy«mic_c⁄åﬁ_af_mode_t
 
af_mode
;

150 
îr
;

152 
ˇmîa_c⁄åﬁ
 = &
g_ˇmîa_c⁄åﬁ
[
ˇm_id
];

154 
ˇmîa_c⁄åﬁ
->
cmd_£m
 = 
	`oßl_£m_¸óã
(0);

155 i‡(!
ˇmîa_c⁄åﬁ
->
cmd_£m
) {

156 
	`mmsdbg
(
DL_ERROR
, "FailedÅo create camera control command semphore!");

157 
exô1
;

159 
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
 = 
	`oßl_muãx_¸óã
();

160 i‡(!
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
) {

161 
	`mmsdbg
(
DL_ERROR
, "FailedÅo create camera control config mutex!");

162 
exô2
;

165 
¸óã_∑øms
.
ˇmîa_id
 = 
ˇm_id
;

166 
¸óã_∑øms
.
mode
 = 
CAMERA_MODE_MOV_CONFIG_DRIVEN
;

167 
¸óã_∑øms
.
dç_£rvî
 = 
NULL
;

168 
¸óã_∑øms
.
ˇŒback
 = callback;

169 
¸óã_∑øms
.
≠p_¥v
 = 
ˇmîa_c⁄åﬁ
;

170 
ˇmîa_c⁄åﬁ
->
ˇmîa
 = 
	`ˇmîa_¸óã
(&
¸óã_∑øms
);

171 i‡(!
ˇmîa_c⁄åﬁ
->
ˇmîa
) {

172 
	`mmsdbg
(
DL_ERROR
, "FailedÅo create camera!");

173 
exô3
;

176 #i‡
FULL_30FPS
 == 1

178 
guzzi_ˇmîa3_c⁄åﬁs_c⁄åﬁ_´_èrgë_Âs_ønge_t
 
èrgë_Âs_ønge
;

179 
èrgë_Âs_ønge
.
dim_size_1
 =

180 
GUZZI_CAMERA3_STATIC_CONTROL_AE_AVAILABLE_TARGET_FPS_RANGES_DIM_MAX_SIZE_1
;

181 
èrgë_Âs_ønge
.
v
[0] = 10;

182 
èrgë_Âs_ønge
.
v
[1] = 30;

184 
	`ˇmîa_c⁄fig_£t_begö
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

186 
îr
 +
	`ˇmîa_c⁄fig_£t
(

187 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

188 
GUZZI_CAMERA3_INDEX_CONTROLS_CAPTURE_REQUEST_GUZZI_FR_ID
,

189 &
ˇmîa_c⁄åﬁ
->
guzzi_‰_id


191 
îr
 +
	`ˇmîa_c⁄fig_£t
(

192 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

193 
GUZZI_CAMERA3_INDEX_CONTROLS_CONTROL_AE_TARGET_FPS_RANGE
,

194 &
èrgë_Âs_ønge


197 
	`ˇmîa_c⁄fig_£t_íd
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

200 
îr
 = 
	`ˇmîa_°¨t
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

201 i‡(
îr
) {

202 
	`mmsdbg
(
DL_ERROR
, "FailedÅo start camera!");

203 
exô3
;

205 
	`mmsdbg
(
DL_ERROR
, "Camîa_id = %d sèπed.\n", 
ˇm_id
);

206 
	`oßl_£m_waô
(
ˇmîa_c⁄åﬁ
->
cmd_£m
);

207 i‡(
ˇmîa_c⁄åﬁ
->
°¨t_îr
) {

208 
	`mmsdbg
(
DL_ERROR
, "FailedÅo start camera!");

209 
exô3
;

212 
ˇmîa_c⁄åﬁ
->
guzzi_‰_id
.
v
 = 0;

214 
	`oßl_muãx_lock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

216 
ˇmîa_c⁄åﬁ
->
guzzi_‰_id
.
v
++;

217 
af_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AF_MODE_OFF
;

218 
	`ˇmîa_c⁄fig_£t_begö
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

219 
	`ˇmîa_c⁄fig_£t
(

220 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

221 
GUZZI_CAMERA3_INDEX_CONTROLS_CAPTURE_REQUEST_GUZZI_FR_ID
,

222 &
ˇmîa_c⁄åﬁ
->
guzzi_‰_id


224 
	`ˇmîa_c⁄fig_£t
(

225 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

226 
GUZZI_CAMERA3_INDEX_CONTROLS_CONTROL_AF_MODE
,

227 &
af_mode


229 
	`ˇmîa_c⁄fig_£t_íd
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

231 
ˇmîa_c⁄åﬁ
->
guzzi_‰_id
.
v
++;

232 
	`ˇmîa_c⁄fig_£t_begö
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

233 
	`ˇmîa_c⁄fig_£t
(

234 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

235 
GUZZI_CAMERA3_INDEX_CONTROLS_CAPTURE_REQUEST_GUZZI_FR_ID
,

236 &
ˇmîa_c⁄åﬁ
->
guzzi_‰_id


238 
	`ˇmîa_c⁄fig_£t_íd
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

240 
ˇmîa_c⁄åﬁ
->
guzzi_‰_id
.
v
++;

241 
	`ˇmîa_c⁄fig_£t_begö
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

242 
	`ˇmîa_c⁄fig_£t
(

243 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

244 
GUZZI_CAMERA3_INDEX_CONTROLS_CAPTURE_REQUEST_GUZZI_FR_ID
,

245 &
ˇmîa_c⁄åﬁ
->
guzzi_‰_id


247 
	`ˇmîa_c⁄fig_£t_íd
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

249 
ˇmîa_c⁄åﬁ
->
c⁄figs_to_skù
 = 0;

251 
	`oßl_muãx_u∆ock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

256 
exô3
:

257 
	`oßl_muãx_de°roy
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

258 
exô2
:

259 
	`oßl_£m_de°roy
(
ˇmîa_c⁄åﬁ
->
cmd_£m
);

260 
exô1
:

261 
ˇmîa_c⁄åﬁ
->
ˇmîa
 = 
NULL
;

263 
	}
}

265 
	$ˇmîa_c⁄åﬁ_°›
(
ˇm_id
)

267 
ˇmîa_c⁄åﬁ_t
 *
ˇmîa_c⁄åﬁ
;

269 
ˇmîa_c⁄åﬁ
 = &
g_ˇmîa_c⁄åﬁ
[
ˇm_id
];

270 
îr
;

272 i‡(!
ˇmîa_c⁄åﬁ
->
ˇmîa
) {

275 
	`oßl_muãx_lock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

276 
ˇmîa_c⁄åﬁ
->
°›
 = 1;

277 
	`oßl_muãx_u∆ock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

279 
	`ˇmîa_Êush
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

280 
	`oßl_£m_waô
(
ˇmîa_c⁄åﬁ
->
cmd_£m
);

282 
îr
 = 
	`ˇmîa_°›
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

283 i‡(
îr
) {

284 
	`mmsdbg
(
DL_ERROR
, "FailedÅo stop camera!");

286 
	`oßl_£m_waô
(
ˇmîa_c⁄åﬁ
->
cmd_£m
);

287 
	`mmsdbg
(
DL_ERROR
, "Camî®id = %d st›≥d.\n", 
ˇm_id
);

289 
	`ˇmîa_de°roy
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

290 
	`oßl_muãx_de°roy
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

291 
	`oßl_£m_de°roy
(
ˇmîa_c⁄åﬁ
->
cmd_£m
);

293 
ˇmîa_c⁄åﬁ
->
ˇmîa
 = 
NULL
;

294 
ˇmîa_c⁄åﬁ
->
°›
 = 0;

295 
	}
}

297 
	$ˇmîa_c⁄åﬁ_ˇ±uª
(
ˇm_id
)

299 
ˇmîa_c⁄åﬁ_t
 *
ˇmîa_c⁄åﬁ
;

300 
guzzi_ˇmîa3_c⁄åﬁs_c⁄åﬁ_ˇ±uª_öã¡_t
 
öã¡_ªq
;

301 
îr
;

303 
ˇmîa_c⁄åﬁ
 = &
g_ˇmîa_c⁄åﬁ
[
ˇm_id
];

305 
	`oßl_muãx_lock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

307 
ˇmîa_c⁄åﬁ
->
guzzi_‰_id
.
v
++;

308 
öã¡_ªq
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_CAPTURE_INTENT_ZERO_SHUTTER_LAG
;

309 
	`ˇmîa_c⁄fig_£t_begö
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

310 
îr
 = 
	`ˇmîa_c⁄fig_£t
(

311 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

312 
GUZZI_CAMERA3_INDEX_CONTROLS_CAPTURE_REQUEST_GUZZI_FR_ID
,

313 &
ˇmîa_c⁄åﬁ
->
guzzi_‰_id


315 
îr
 +
	`ˇmîa_c⁄fig_£t
(

316 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

317 
GUZZI_CAMERA3_INDEX_CONTROLS_CONTROL_CAPTURE_INTENT
,

318 &
öã¡_ªq


320 
	`ˇmîa_c⁄fig_£t_íd
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

322 
ˇmîa_c⁄åﬁ
->
guzzi_‰_id
.
v
++;

323 
öã¡_ªq
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_CAPTURE_INTENT_PREVIEW
;

324 
	`ˇmîa_c⁄fig_£t_begö
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

325 
îr
 +
	`ˇmîa_c⁄fig_£t
(

326 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

327 
GUZZI_CAMERA3_INDEX_CONTROLS_CAPTURE_REQUEST_GUZZI_FR_ID
,

328 &
ˇmîa_c⁄åﬁ
->
guzzi_‰_id


330 
îr
 +
	`ˇmîa_c⁄fig_£t
(

331 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

332 
GUZZI_CAMERA3_INDEX_CONTROLS_CONTROL_CAPTURE_INTENT
,

333 &
öã¡_ªq


335 
	`ˇmîa_c⁄fig_£t_íd
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

337 i‡(
îr
) {

338 
	`mmsdbg
(
DL_ERROR
, "Capture failed.\n");

340 
	`mmsdbg
(
DL_ERROR
, "Camî®id = %d c≠tuª suc˚eded.\n", 
ˇm_id
);

343 
ˇmîa_c⁄åﬁ
->
c⁄figs_to_skù
 = 1;

345 
	`oßl_muãx_u∆ock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

346 
	}
}

348 
	$ˇmîa_c⁄åﬁ_Àns_move
(
ˇm_id
, 
Àns_posôi⁄
)

350 
ˇmîa_c⁄åﬁ_t
 *
ˇmîa_c⁄åﬁ
;

351 
guzzi_ˇmîa3_c⁄åﬁs_Àns_foˇl_Àngth_t
 
foc_Àn
;

352 
guzzi_ˇmîa3_dy«mic_c⁄åﬁ_af_mode_t
 
af_mode
;

353 
îr
;

355 
ˇmîa_c⁄åﬁ
 = &
g_ˇmîa_c⁄åﬁ
[
ˇm_id
];

357 i‡(
Àns_posôi⁄
 > 255) {

358 
Àns_posôi⁄
 = 255;

361 i‡(
Àns_posôi⁄
 < 0) {

362 
Àns_posôi⁄
 = 0;

365 
foc_Àn
.
v
 = (Ë
Àns_posôi⁄
 / 255.0;

366 
af_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AF_MODE_OFF
;

368 
	`oßl_muãx_lock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

370 
ˇmîa_c⁄åﬁ
->
guzzi_‰_id
.
v
++;

372 
	`ˇmîa_c⁄fig_£t_begö
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

373 
îr
 = 
	`ˇmîa_c⁄fig_£t
(

374 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

375 
GUZZI_CAMERA3_INDEX_CONTROLS_CAPTURE_REQUEST_GUZZI_FR_ID
,

376 &
ˇmîa_c⁄åﬁ
->
guzzi_‰_id


378 
îr
 +
	`ˇmîa_c⁄fig_£t
(

379 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

380 
GUZZI_CAMERA3_INDEX_CONTROLS_CONTROL_AF_MODE
,

381 &
af_mode


383 
îr
 +
	`ˇmîa_c⁄fig_£t
(

384 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

385 
GUZZI_CAMERA3_INDEX_CONTROLS_LENS_FOCAL_LENGTH
,

386 &
foc_Àn


388 
	`ˇmîa_c⁄fig_£t_íd
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

389 i‡(
îr
) {

390 
	`mmsdbg
(
DL_ERROR
, "Lens move failed.\n");

392 
	`mmsdbg
(
DL_ERROR
, "Lí†movêsuc˚eded camîa_id = %d,Üís_posôi⁄ = %d.\n", 
ˇm_id
, 
Àns_posôi⁄
);

395 
ˇmîa_c⁄åﬁ
->
c⁄figs_to_skù
 = 1;

397 
	`oßl_muãx_u∆ock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

398 
	}
}

400 
	$ˇmîa_c⁄åﬁ_focus_åiggî
(
ˇm_id
)

402 
ˇmîa_c⁄åﬁ_t
 *
ˇmîa_c⁄åﬁ
;

403 
guzzi_ˇmîa3_dy«mic_c⁄åﬁ_af_mode_t
 
af_mode
;

404 
guzzi_ˇmîa3_dy«mic_c⁄åﬁ_af_åiggî_id_t
 
af_åiggî
;

405 
îr
;

407 
ˇmîa_c⁄åﬁ
 = &
g_ˇmîa_c⁄åﬁ
[
ˇm_id
];

409 
af_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AF_MODE_AUTO
;

410 
af_åiggî
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AF_TRIGGER_START
;

412 
	`oßl_muãx_lock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

414 
ˇmîa_c⁄åﬁ
->
guzzi_‰_id
.
v
++;

415 
	`ˇmîa_c⁄fig_£t_begö
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

416 
îr
 = 
	`ˇmîa_c⁄fig_£t
(

417 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

418 
GUZZI_CAMERA3_INDEX_CONTROLS_CAPTURE_REQUEST_GUZZI_FR_ID
,

419 &
ˇmîa_c⁄åﬁ
->
guzzi_‰_id


421 
îr
 +
	`ˇmîa_c⁄fig_£t
(

422 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

423 
GUZZI_CAMERA3_INDEX_CONTROLS_CONTROL_AF_MODE
,

424 &
af_mode


426 
îr
 +
	`ˇmîa_c⁄fig_£t
(

427 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

428 
GUZZI_CAMERA3_INDEX_CONTROLS_CONTROL_AF_TRIGGER
,

429 &
af_åiggî


431 
	`ˇmîa_c⁄fig_£t_íd
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

432 i‡(
îr
) {

433 
	`mmsdbg
(
DL_ERROR
, "FocusÅrigger failed.\n");

435 
	`mmsdbg
(
DL_ERROR
,

436 "Focu†åiggî suc˚eded camîa_id = %d.\n", 
ˇm_id
);

438 
ˇmîa_c⁄åﬁ
->
c⁄figs_to_skù
 = 1;

439 
	`oßl_muãx_u∆ock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

440 
	}
}

442 
	$ˇmîa_c⁄åﬁ_´_m™uÆ
(

443 
ˇm_id
,

444 
uöt32_t
 
time_us
,

445 
uöt32_t
 
£nsôivôy_iso
,

446 
uöt32_t
 
‰ame_duøti⁄_us


449 
ˇmîa_c⁄åﬁ_t
 *
ˇmîa_c⁄åﬁ
;

450 
guzzi_ˇmîa3_dy«mic_£ns‹_exposuª_time_t
 
£ns‹_exposuª_time
;

451 
guzzi_ˇmîa3_dy«mic_£ns‹_£nsôivôy_t
 
£ns‹_£nsôivôy
;

452 
guzzi_ˇmîa3_dy«mic_£ns‹_‰ame_duøti⁄_t
 
£ns‹_‰ame_duøti⁄
;

453 
guzzi_ˇmîa3_c⁄åﬁs_c⁄åﬁ_´_mode_t
 
´_mode
;

454 
îr
;

456 
ˇmîa_c⁄åﬁ
 = &
g_ˇmîa_c⁄åﬁ
[
ˇm_id
];

458 
£ns‹_exposuª_time
.
v
 = 1000 * 
time_us
;

459 
£ns‹_£nsôivôy
.
v
 = 
£nsôivôy_iso
;

460 
£ns‹_‰ame_duøti⁄
.
v
 = 1000 * 
‰ame_duøti⁄_us
;

461 
´_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AE_MODE_OFF
;

463 
	`oßl_muãx_lock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

465 
ˇmîa_c⁄åﬁ
->
guzzi_‰_id
.
v
++;

466 
	`ˇmîa_c⁄fig_£t_begö
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

467 
îr
 = 
	`ˇmîa_c⁄fig_£t
(

468 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

469 
GUZZI_CAMERA3_INDEX_CONTROLS_CAPTURE_REQUEST_GUZZI_FR_ID
,

470 &
ˇmîa_c⁄åﬁ
->
guzzi_‰_id


472 
îr
 +
	`ˇmîa_c⁄fig_£t
(

473 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

474 
GUZZI_CAMERA3_INDEX_CONTROLS_SENSOR_EXPOSURE_TIME
,

475 &
£ns‹_exposuª_time


477 
îr
 +
	`ˇmîa_c⁄fig_£t
(

478 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

479 
GUZZI_CAMERA3_INDEX_CONTROLS_SENSOR_SENSITIVITY
,

480 &
£ns‹_£nsôivôy


482 
îr
 +
	`ˇmîa_c⁄fig_£t
(

483 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

484 
GUZZI_CAMERA3_INDEX_CONTROLS_SENSOR_FRAME_DURATION
,

485 &
£ns‹_‰ame_duøti⁄


487 
îr
 +
	`ˇmîa_c⁄fig_£t
(

488 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

489 
GUZZI_CAMERA3_INDEX_CONTROLS_CONTROL_AE_MODE
,

490 &
´_mode


492 
	`ˇmîa_c⁄fig_£t_íd
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

493 i‡(
îr
) {

494 
	`mmsdbg
(
DL_ERROR
, "Manualáe failed.\n");

496 
	`mmsdbg
(
DL_ERROR
,

499 
ˇm_id
, ()
time_us
, ()
£nsôivôy_iso
, ()
‰ame_duøti⁄_us
);

501 
ˇmîa_c⁄åﬁ
->
c⁄figs_to_skù
 = 1;

502 
	`oßl_muãx_u∆ock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

503 
	}
}

505 
	$ˇmîa_c⁄åﬁ_´_auto
(
ˇm_id
, 
uöt32_t
 
Êash_mode
)

507 
ˇmîa_c⁄åﬁ_t
 *
ˇmîa_c⁄åﬁ
;

508 
guzzi_ˇmîa3_c⁄åﬁs_c⁄åﬁ_´_mode_t
 
´_mode
;

509 
îr
;

511 
ˇmîa_c⁄åﬁ
 = &
g_ˇmîa_c⁄åﬁ
[
ˇm_id
];

513 
Êash_mode
) {

514 
CAMERA_CONTROL__AE_AUTO__FLASH_MODE__OFF
:

515 
´_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AE_MODE_ON
;

517 
CAMERA_CONTROL__AE_AUTO__FLASH_MODE__AUTO
:

518 
´_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AE_MODE_ON_AUTO_FLASH
;

520 
CAMERA_CONTROL__AE_AUTO__FLASH_MODE__ALWAYS
:

521 
´_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AE_MODE_ON_ALWAYS_FLASH
;

523 
CAMERA_CONTROL__AE_AUTO__FLASH_MODE__AUTO_REDEYE
:

524 
´_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AE_MODE_ON_AUTO_FLASH_REDEYE
;

527 
	`mmsdbg
(
DL_ERROR
, "Unknow¿Êash mode: %d!", ()
Êash_mode
);

531 
	`oßl_muãx_lock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

533 
ˇmîa_c⁄åﬁ
->
guzzi_‰_id
.
v
++;

534 
	`ˇmîa_c⁄fig_£t_begö
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

535 
îr
 = 
	`ˇmîa_c⁄fig_£t
(

536 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

537 
GUZZI_CAMERA3_INDEX_CONTROLS_CAPTURE_REQUEST_GUZZI_FR_ID
,

538 &
ˇmîa_c⁄åﬁ
->
guzzi_‰_id


540 
îr
 +
	`ˇmîa_c⁄fig_£t
(

541 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

542 
GUZZI_CAMERA3_INDEX_CONTROLS_CONTROL_AE_MODE
,

543 &
´_mode


545 
	`ˇmîa_c⁄fig_£t_íd
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

546 i‡(
îr
) {

547 
	`mmsdbg
(
DL_ERROR
, "Autoáe failed.\n");

549 
	`mmsdbg
(
DL_ERROR
,

550 "Autÿ´ suc˚eded camîa_id = %d.\n", 
ˇm_id
);

552 
ˇmîa_c⁄åﬁ
->
c⁄figs_to_skù
 = 1;

553 
	`oßl_muãx_u∆ock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

554 
	}
}

556 
	$ˇmîa_c⁄åﬁ_awb_mode
(
ˇm_id
, 
uöt32_t
 
mode
)

558 
ˇmîa_c⁄åﬁ_t
 *
ˇmîa_c⁄åﬁ
;

559 
guzzi_ˇmîa3_c⁄åﬁs_c⁄åﬁ_awb_mode_t
 
awb_mode
;

560 
guzzi_ˇmîa3_c⁄åﬁs_c⁄åﬁ_mode_t
 
˘æ_mode
;

561 
îr
;

563 
ˇmîa_c⁄åﬁ
 = &
g_ˇmîa_c⁄åﬁ
[
ˇm_id
];

564 
˘æ_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_MODE_AUTO
;

566 
mode
) {

567 
CAMERA_CONTROL__AWB_MODE__OFF
:

568 
awb_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AWB_MODE_OFF
;

570 
CAMERA_CONTROL__AWB_MODE__AUTO
:

571 
awb_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AWB_MODE_AUTO
;

573 
CAMERA_CONTROL__AWB_MODE__INCANDESCENT
:

574 
awb_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AWB_MODE_INCANDESCENT
;

576 
CAMERA_CONTROL__AWB_MODE__FLUORESCENT
:

577 
awb_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AWB_MODE_FLUORESCENT
;

579 
CAMERA_CONTROL__AWB_MODE__WARM_FLUORESCENT
:

580 
awb_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AWB_MODE_WARM_FLUORESCENT
;

582 
CAMERA_CONTROL__AWB_MODE__DAYLIGHT
:

583 
awb_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AWB_MODE_DAYLIGHT
;

585 
CAMERA_CONTROL__AWB_MODE__CLOUDY_DAYLIGHT
:

586 
awb_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AWB_MODE_CLOUDY_DAYLIGHT
;

588 
CAMERA_CONTROL__AWB_MODE__TWILIGHT
:

589 
awb_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AWB_MODE_TWILIGHT
;

591 
CAMERA_CONTROL__AWB_MODE__SHADE
:

592 
awb_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AWB_MODE_SHADE
;

595 
	`mmsdbg
(
DL_ERROR
, "Unknow¿awb mode: %d!", ()
mode
);

599 
	`oßl_muãx_lock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

601 
ˇmîa_c⁄åﬁ
->
guzzi_‰_id
.
v
++;

602 
	`ˇmîa_c⁄fig_£t_begö
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

603 
îr
 = 
	`ˇmîa_c⁄fig_£t
(

604 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

605 
GUZZI_CAMERA3_INDEX_CONTROLS_CAPTURE_REQUEST_GUZZI_FR_ID
,

606 &
ˇmîa_c⁄åﬁ
->
guzzi_‰_id


609 
îr
 +
	`ˇmîa_c⁄fig_£t
(

610 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

611 
GUZZI_CAMERA3_INDEX_CONTROLS_CONTROL_MODE
,

612 &
˘æ_mode


614 
îr
 +
	`ˇmîa_c⁄fig_£t
(

615 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

616 
GUZZI_CAMERA3_INDEX_CONTROLS_CONTROL_AWB_MODE
,

617 &
awb_mode


619 
	`ˇmîa_c⁄fig_£t_íd
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

620 i‡(
îr
) {

621 
	`mmsdbg
(
DL_ERROR
, "Setáwb mode failed.\n");

623 
	`mmsdbg
(
DL_ERROR
,

624 "Awb modê£àsuc˚eded camîa_id = %d, modê%d.\n", 
ˇm_id
, ()
mode
);

626 
ˇmîa_c⁄åﬁ
->
c⁄figs_to_skù
 = 1;

627 
	`oßl_muãx_u∆ock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

628 
	}
}

630 
	$ˇmîa_c⁄åﬁ_s˚√_mode
(
ˇm_id
, 
uöt32_t
 
mode
)

632 
ˇmîa_c⁄åﬁ_t
 *
ˇmîa_c⁄åﬁ
;

633 
guzzi_ˇmîa3_c⁄åﬁs_c⁄åﬁ_s˚√_mode_t
 
s˚√_mode
;

634 
îr
;

636 
ˇmîa_c⁄åﬁ
 = &
g_ˇmîa_c⁄åﬁ
[
ˇm_id
];

638 
mode
) {

639 
CAMERA_CONTROL__SCENE_MODE__UNSUPPORTED
:

640 
s˚√_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_SCENE_MODE_UNSUPPORTED
;

642 
CAMERA_CONTROL__SCENE_MODE__FACE_PRIORITY
:

643 
s˚√_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_SCENE_MODE_FACE_PRIORITY
;

645 
CAMERA_CONTROL__SCENE_MODE__ACTION
:

646 
s˚√_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_SCENE_MODE_ACTION
;

648 
CAMERA_CONTROL__SCENE_MODE__PORTRAIT
:

649 
s˚√_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_SCENE_MODE_PORTRAIT
;

651 
CAMERA_CONTROL__SCENE_MODE__LANDSCAPE
:

652 
s˚√_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_SCENE_MODE_LANDSCAPE
;

654 
CAMERA_CONTROL__SCENE_MODE__NIGHT
:

655 
s˚√_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_SCENE_MODE_NIGHT
;

657 
CAMERA_CONTROL__SCENE_MODE__NIGHT_PORTRAIT
:

658 
s˚√_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_SCENE_MODE_NIGHT_PORTRAIT
;

660 
CAMERA_CONTROL__SCENE_MODE__THEATRE
:

661 
s˚√_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_SCENE_MODE_THEATRE
;

663 
CAMERA_CONTROL__SCENE_MODE__BEACH
:

664 
s˚√_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_SCENE_MODE_BEACH
;

666 
CAMERA_CONTROL__SCENE_MODE__SNOW
:

667 
s˚√_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_SCENE_MODE_SNOW
;

669 
CAMERA_CONTROL__SCENE_MODE__SUNSET
:

670 
s˚√_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_SCENE_MODE_SUNSET
;

672 
CAMERA_CONTROL__SCENE_MODE__STEADYPHOTO
:

673 
s˚√_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_SCENE_MODE_STEADYPHOTO
;

675 
CAMERA_CONTROL__SCENE_MODE__FIREWORKS
:

676 
s˚√_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_SCENE_MODE_FIREWORKS
;

678 
CAMERA_CONTROL__SCENE_MODE__SPORTS
:

679 
s˚√_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_SCENE_MODE_SPORTS
;

681 
CAMERA_CONTROL__SCENE_MODE__PARTY
:

682 
s˚√_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_SCENE_MODE_PARTY
;

684 
CAMERA_CONTROL__SCENE_MODE__CANDLELIGHT
:

685 
s˚√_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_SCENE_MODE_CANDLELIGHT
;

687 
CAMERA_CONTROL__SCENE_MODE__BARCODE
:

688 
s˚√_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_SCENE_MODE_BARCODE
;

691 
	`mmsdbg
(
DL_ERROR
, "Unknow¿awb mode: %d!", ()
mode
);

695 
	`oßl_muãx_lock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

697 
ˇmîa_c⁄åﬁ
->
guzzi_‰_id
.
v
++;

698 
	`ˇmîa_c⁄fig_£t_begö
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

699 
îr
 = 
	`ˇmîa_c⁄fig_£t
(

700 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

701 
GUZZI_CAMERA3_INDEX_CONTROLS_CAPTURE_REQUEST_GUZZI_FR_ID
,

702 &
ˇmîa_c⁄åﬁ
->
guzzi_‰_id


706 
îr
 +
	`ˇmîa_c⁄fig_£t
(

707 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

708 
GUZZI_CAMERA3_INDEX_CONTROLS_CONTROL_SCENE_MODE
,

709 &
s˚√_mode


711 
	`ˇmîa_c⁄fig_£t_íd
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

712 i‡(
îr
) {

713 
	`mmsdbg
(
DL_ERROR
, "Set scene mode failed.\n");

715 
	`mmsdbg
(
DL_ERROR
,

716 "S˚√ modê£àsuc˚eded camîa_id = %d, modê%d.\n", 
ˇm_id
, ()
mode
);

718 
ˇmîa_c⁄åﬁ
->
c⁄figs_to_skù
 = 1;

719 
	`oßl_muãx_u∆ock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

720 
	}
}

722 
	$ˇmîa_c⁄åﬁ_™tib™dög_mode
(
ˇm_id
, 
uöt32_t
 
mode
)

724 
ˇmîa_c⁄åﬁ_t
 *
ˇmîa_c⁄åﬁ
;

725 
guzzi_ˇmîa3_c⁄åﬁs_c⁄åﬁ_´_™tib™dög_mode_t
 
™tib™dög_mode
;

726 
îr
;

728 
ˇmîa_c⁄åﬁ
 = &
g_ˇmîa_c⁄åﬁ
[
ˇm_id
];

730 
mode
) {

731 
CAMERA_CONTROL__AE_ANTIBANDING_MODE__OFF
:

732 
™tib™dög_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AE_ANTIBANDING_MODE_OFF
;

734 
CAMERA_CONTROL__AE_ANTIBANDING_MODE__50HZ
:

735 
™tib™dög_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AE_ANTIBANDING_MODE_50HZ
;

737 
CAMERA_CONTROL__AE_ANTIBANDING_MODE__60HZ
:

738 
™tib™dög_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AE_ANTIBANDING_MODE_60HZ
;

740 
CAMERA_CONTROL__AE_ANTIBANDING_MODE__AUTO
:

741 
™tib™dög_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AE_ANTIBANDING_MODE_AUTO
;

744 
	`mmsdbg
(
DL_ERROR
, "Unknow¿™tib™dög mode: %d!", ()
mode
);

748 
	`oßl_muãx_lock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

750 
ˇmîa_c⁄åﬁ
->
guzzi_‰_id
.
v
++;

751 
	`ˇmîa_c⁄fig_£t_begö
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

752 
îr
 = 
	`ˇmîa_c⁄fig_£t
(

753 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

754 
GUZZI_CAMERA3_INDEX_CONTROLS_CAPTURE_REQUEST_GUZZI_FR_ID
,

755 &
ˇmîa_c⁄åﬁ
->
guzzi_‰_id


757 
îr
 +
	`ˇmîa_c⁄fig_£t
(

758 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

759 
GUZZI_CAMERA3_INDEX_CONTROLS_CONTROL_AE_ANTIBANDING_MODE
,

760 &
™tib™dög_mode


762 
	`ˇmîa_c⁄fig_£t_íd
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

763 i‡(
îr
) {

764 
	`mmsdbg
(
DL_ERROR
, "Setántibanding mode failed.\n");

766 
	`mmsdbg
(
DL_ERROR
,

767 "A¡ib™dög modê£àsuc˚eded camîa_id = %d, modê%d.\n", 
ˇm_id
, ()
mode
);

769 
ˇmîa_c⁄åﬁ
->
c⁄figs_to_skù
 = 1;

770 
	`oßl_muãx_u∆ock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

771 
	}
}

773 
	$ˇmîa_c⁄åﬁ_´_lock_mode
(
ˇm_id
, 
uöt32_t
 
mode
)

775 
ˇmîa_c⁄åﬁ_t
 *
ˇmîa_c⁄åﬁ
;

776 
guzzi_ˇmîa3_c⁄åﬁs_c⁄åﬁ_´_lock_t
 
´_lock_mode
;

777 
îr
;

779 
ˇmîa_c⁄åﬁ
 = &
g_ˇmîa_c⁄åﬁ
[
ˇm_id
];

781 
mode
) {

782 
CAMERA_CONTROL__AE_LOCK__OFF
:

783 
´_lock_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AE_LOCK_OFF
;

785 
CAMERA_CONTROL__AE_LOCK__ON
:

786 
´_lock_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AE_LOCK_ON
;

789 
	`mmsdbg
(
DL_ERROR
, "Unknow¿´_lock comm™d: %d!", ()
mode
);

793 
	`oßl_muãx_lock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

795 
ˇmîa_c⁄åﬁ
->
guzzi_‰_id
.
v
++;

796 
	`ˇmîa_c⁄fig_£t_begö
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

797 
îr
 = 
	`ˇmîa_c⁄fig_£t
(

798 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

799 
GUZZI_CAMERA3_INDEX_CONTROLS_CAPTURE_REQUEST_GUZZI_FR_ID
,

800 &
ˇmîa_c⁄åﬁ
->
guzzi_‰_id


802 
îr
 +
	`ˇmîa_c⁄fig_£t
(

803 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

804 
GUZZI_CAMERA3_INDEX_CONTROLS_CONTROL_AE_LOCK
,

805 &
´_lock_mode


807 
	`ˇmîa_c⁄fig_£t_íd
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

808 i‡(
îr
) {

809 
	`mmsdbg
(
DL_ERROR
, "Setáe_lock control mode failed.\n");

811 
	`mmsdbg
(
DL_ERROR
,

812 "Ae_lock c⁄åﬁ suc˚eded: camîa_id = %d, modê%d.\n", 
ˇm_id
, ()
mode
);

814 
ˇmîa_c⁄åﬁ
->
c⁄figs_to_skù
 = 1;

815 
	`oßl_muãx_u∆ock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

816 
	}
}

818 
	$ˇmîa_c⁄åﬁ_´_èrgë_Âs_ønge
(
ˇm_id
, 
uöt32_t
 
mö_Âs
, uöt32_à
max_Âs
)

820 
ˇmîa_c⁄åﬁ_t
 *
ˇmîa_c⁄åﬁ
;

821 
guzzi_ˇmîa3_c⁄åﬁs_c⁄åﬁ_´_èrgë_Âs_ønge_t
 
èrgë_Âs_ønge
;

822 
guzzi_ˇmîa3_°©ic_c⁄åﬁ_´_avaûabÀ_èrgë_Âs_ønges_t
 
check
;

823 
îr
;

825 
ˇmîa_c⁄åﬁ
 = &
g_ˇmîa_c⁄åﬁ
[
ˇm_id
];

826 
èrgë_Âs_ønge
.
dim_size_1
 =

827 
GUZZI_CAMERA3_STATIC_CONTROL_AE_AVAILABLE_TARGET_FPS_RANGES_DIM_MAX_SIZE_1
;

828 
èrgë_Âs_ønge
.
v
[0] = 
mö_Âs
;

829 
èrgë_Âs_ønge
.
v
[1] = 
max_Âs
;

831 
	`ˇmîa_c⁄fig_gë
(

832 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

833 
GUZZI_CAMERA3_INDEX_STATIC_CONTROL_AE_AVAILABLE_TARGET_FPS_RANGES
,

834 &
check


836 
	`mmsdbg
(
DL_ERROR
, "AvailableÑanges: dim1:%d, dim2:%d\n",

837 
check
.
dim_size_1
, check.
dim_size_2
);

839 
	`oßl_muãx_lock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

841 
ˇmîa_c⁄åﬁ
->
guzzi_‰_id
.
v
++;

842 
	`ˇmîa_c⁄fig_£t_begö
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

843 
îr
 = 
	`ˇmîa_c⁄fig_£t
(

844 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

845 
GUZZI_CAMERA3_INDEX_CONTROLS_CAPTURE_REQUEST_GUZZI_FR_ID
,

846 &
ˇmîa_c⁄åﬁ
->
guzzi_‰_id


848 
îr
 +
	`ˇmîa_c⁄fig_£t
(

849 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

850 
GUZZI_CAMERA3_INDEX_CONTROLS_CONTROL_AE_TARGET_FPS_RANGE
,

851 &
èrgë_Âs_ønge


853 
	`ˇmîa_c⁄fig_£t_íd
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

854 i‡(
îr
) {

855 
	`mmsdbg
(
DL_ERROR
, "SetÅarget_fps control mode failed.\n");

857 
	`mmsdbg
(
DL_ERROR
,

859 
ˇm_id
, ()
mö_Âs
, ()
max_Âs
);

861 
ˇmîa_c⁄åﬁ
->
c⁄figs_to_skù
 = 1;

862 
	`oßl_muãx_u∆ock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

863 
	}
}

865 
	$ˇmîa_c⁄åﬁ_awb_lock_mode
(
ˇm_id
, 
uöt32_t
 
ty≥
)

867 
ˇmîa_c⁄åﬁ_t
 *
ˇmîa_c⁄åﬁ
;

868 
guzzi_ˇmîa3_c⁄åﬁs_c⁄åﬁ_awb_lock_t
 
awb_lock_c⁄åﬁ
;

869 
guzzi_ˇmîa3_c⁄åﬁs_c⁄åﬁ_awb_mode_t
 
awb_mode
;

870 
îr
;

872 
ˇmîa_c⁄åﬁ
 = &
g_ˇmîa_c⁄åﬁ
[
ˇm_id
];

873 
awb_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AWB_MODE_AUTO
;

875 
ty≥
) {

876 
CAMERA_CONTROL__AWB_LOCK__OFF
:

877 
awb_lock_c⁄åﬁ
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AWB_LOCK_OFF
;

879 
CAMERA_CONTROL__AWB_LOCK__ON
:

880 
awb_lock_c⁄åﬁ
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AWB_LOCK_ON
;

883 
	`mmsdbg
(
DL_ERROR
, "Unknow¿awb_lock comm™d: %d!", ()
ty≥
);

887 
	`oßl_muãx_lock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

889 
ˇmîa_c⁄åﬁ
->
guzzi_‰_id
.
v
++;

890 
	`ˇmîa_c⁄fig_£t_begö
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

891 
îr
 = 
	`ˇmîa_c⁄fig_£t
(

892 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

893 
GUZZI_CAMERA3_INDEX_CONTROLS_CAPTURE_REQUEST_GUZZI_FR_ID
,

894 &
ˇmîa_c⁄åﬁ
->
guzzi_‰_id


896 
îr
 +
	`ˇmîa_c⁄fig_£t
(

897 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

898 
GUZZI_CAMERA3_INDEX_CONTROLS_CONTROL_AWB_MODE
,

899 &
awb_mode


901 
îr
 +
	`ˇmîa_c⁄fig_£t
(

902 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

903 
GUZZI_CAMERA3_INDEX_CONTROLS_CONTROL_AWB_LOCK
,

904 &
awb_lock_c⁄åﬁ


906 
	`ˇmîa_c⁄fig_£t_íd
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

907 i‡(
îr
) {

908 
	`mmsdbg
(
DL_ERROR
, "Setáwb_lock control mode failed.\n");

910 
	`mmsdbg
(
DL_ERROR
,

911 "Awb_lock c⁄åﬁ suc˚eded: camîa_id = %d, modê%d.\n", 
ˇm_id
, ()
ty≥
);

913 
ˇmîa_c⁄åﬁ
->
c⁄figs_to_skù
 = 1;

914 
	`oßl_muãx_u∆ock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

915 
	}
}

917 
	$ˇmîa_c⁄åﬁ_ˇ±uª_öã¡
(
ˇm_id
, 
uöt32_t
 
mode
)

919 
ˇmîa_c⁄åﬁ_t
 *
ˇmîa_c⁄åﬁ
;

920 
guzzi_ˇmîa3_c⁄åﬁs_c⁄åﬁ_ˇ±uª_öã¡_t
 
ˇ±uª_öã¡
;

921 
guzzi_ˇmîa3_c⁄åﬁs_c⁄åﬁ_mode_t
 
˘æ_mode
;

922 
îr
;

924 
ˇmîa_c⁄åﬁ
 = &
g_ˇmîa_c⁄åﬁ
[
ˇm_id
];

925 
˘æ_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_MODE_AUTO
;

927 
mode
) {

928 
CAMERA_CONTROL__CAPTURE_INTENT__CUSTOM
:

929 
ˇ±uª_öã¡
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_CAPTURE_INTENT_CUSTOM
;

931 
CAMERA_CONTROL__CAPTURE_INTENT__PREVIEW
:

932 
ˇ±uª_öã¡
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_CAPTURE_INTENT_PREVIEW
;

934 
CAMERA_CONTROL__CAPTURE_INTENT__STILL_CAPTURE
:

935 
ˇ±uª_öã¡
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_CAPTURE_INTENT_STILL_CAPTURE
;

937 
CAMERA_CONTROL__CAPTURE_INTENT__VIDEO_RECORD
:

938 
ˇ±uª_öã¡
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_CAPTURE_INTENT_VIDEO_RECORD
;

940 
CAMERA_CONTROL__CAPTURE_INTENT__VIDEO_SNAPSHOT
:

941 
ˇ±uª_öã¡
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_CAPTURE_INTENT_VIDEO_SNAPSHOT
;

943 
CAMERA_CONTROL__CAPTURE_INTENT__ZERO_SHUTTER_LAG
:

944 
ˇ±uª_öã¡
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_CAPTURE_INTENT_ZERO_SHUTTER_LAG
;

947 
	`mmsdbg
(
DL_ERROR
, "Unknow¿ˇ±uª_öã¡ comm™d: %d!", ()
mode
);

951 
	`oßl_muãx_lock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

953 
ˇmîa_c⁄åﬁ
->
guzzi_‰_id
.
v
++;

954 
	`ˇmîa_c⁄fig_£t_begö
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

955 
îr
 = 
	`ˇmîa_c⁄fig_£t
(

956 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

957 
GUZZI_CAMERA3_INDEX_CONTROLS_CAPTURE_REQUEST_GUZZI_FR_ID
,

958 &
ˇmîa_c⁄åﬁ
->
guzzi_‰_id


960 
îr
 +
	`ˇmîa_c⁄fig_£t
(

961 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

962 
GUZZI_CAMERA3_INDEX_CONTROLS_CONTROL_MODE
,

963 &
˘æ_mode


965 
îr
 +
	`ˇmîa_c⁄fig_£t
(

966 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

967 
GUZZI_CAMERA3_INDEX_CONTROLS_CONTROL_CAPTURE_INTENT
,

968 &
ˇ±uª_öã¡


970 
	`ˇmîa_c⁄fig_£t_íd
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

971 i‡(
îr
) {

972 
	`mmsdbg
(
DL_ERROR
, "Set capture_intent control mode failed.\n");

974 
	`mmsdbg
(
DL_ERROR
,

975 "C≠tuª_öã¡ c⁄åﬁ suc˚eded: camîa_id = %d, modê%d.\n", 
ˇm_id
, ()
mode
);

977 
ˇmîa_c⁄åﬁ
->
c⁄figs_to_skù
 = 1;

978 
	`oßl_muãx_u∆ock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

979 
	}
}

981 
	$ˇmîa_c⁄åﬁ_mode
(
ˇm_id
, 
uöt32_t
 
mode
)

983 
ˇmîa_c⁄åﬁ_t
 *
ˇmîa_c⁄åﬁ
;

984 
guzzi_ˇmîa3_c⁄åﬁs_c⁄åﬁ_mode_t
 
˘æ_mode
;

985 
îr
;

987 
ˇmîa_c⁄åﬁ
 = &
g_ˇmîa_c⁄åﬁ
[
ˇm_id
];

989 
mode
) {

990 
CAMERA_CONTROL__MODE__OFF
:

991 
˘æ_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_MODE_OFF
;

993 
CAMERA_CONTROL__MODE__AUTO
:

994 
˘æ_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_MODE_AUTO
;

996 
CAMERA_CONTROL__MODE__USE_SCENE_MODE
:

997 
˘æ_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_MODE_USE_SCENE_MODE
;

1000 
	`mmsdbg
(
DL_ERROR
, "Unknow¿˘æ_modêcomm™d: %d!", ()
mode
);

1004 
	`oßl_muãx_lock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

1006 
ˇmîa_c⁄åﬁ
->
guzzi_‰_id
.
v
++;

1007 
	`ˇmîa_c⁄fig_£t_begö
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

1008 
îr
 = 
	`ˇmîa_c⁄fig_£t
(

1009 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

1010 
GUZZI_CAMERA3_INDEX_CONTROLS_CAPTURE_REQUEST_GUZZI_FR_ID
,

1011 &
ˇmîa_c⁄åﬁ
->
guzzi_‰_id


1013 
îr
 +
	`ˇmîa_c⁄fig_£t
(

1014 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

1015 
GUZZI_CAMERA3_INDEX_CONTROLS_CONTROL_MODE
,

1016 &
˘æ_mode


1018 
	`ˇmîa_c⁄fig_£t_íd
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

1019 i‡(
îr
) {

1020 
	`mmsdbg
(
DL_ERROR
, "Set control mode failed.\n");

1022 
	`mmsdbg
(
DL_ERROR
,

1023 "C⁄åﬁ modê£àsuc˚eded: camîa_id = %d, modê%d.\n", 
ˇm_id
, ()
mode
);

1025 
ˇmîa_c⁄åﬁ
->
c⁄figs_to_skù
 = 1;

1026 
	`oßl_muãx_u∆ock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

1027 
	}
}

1029 
	$ˇmîa_c⁄åﬁ_‰ame_duøti⁄
(
ˇm_id
, 
uöt64_t
 
vÆ
)

1031 
ˇmîa_c⁄åﬁ_t
 *
ˇmîa_c⁄åﬁ
;

1032 
guzzi_ˇmîa3_c⁄åﬁs_£ns‹_‰ame_duøti⁄_t
 
‰ame_duøti⁄
;

1033 
îr
;

1035 
ˇmîa_c⁄åﬁ
 = &
g_ˇmîa_c⁄åﬁ
[
ˇm_id
];

1036 
‰ame_duøti⁄
.
v
 = 
vÆ
;

1038 
	`oßl_muãx_lock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

1040 
ˇmîa_c⁄åﬁ
->
guzzi_‰_id
.
v
++;

1041 
	`ˇmîa_c⁄fig_£t_begö
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

1042 
îr
 = 
	`ˇmîa_c⁄fig_£t
(

1043 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

1044 
GUZZI_CAMERA3_INDEX_CONTROLS_CAPTURE_REQUEST_GUZZI_FR_ID
,

1045 &
ˇmîa_c⁄åﬁ
->
guzzi_‰_id


1047 
îr
 +
	`ˇmîa_c⁄fig_£t
(

1048 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

1049 
GUZZI_CAMERA3_INDEX_CONTROLS_SENSOR_FRAME_DURATION
,

1050 &
‰ame_duøti⁄


1052 
	`ˇmîa_c⁄fig_£t_íd
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

1053 i‡(
îr
) {

1054 
	`mmsdbg
(
DL_ERROR
, "Set sensor frame duration failed.\n");

1056 
	`mmsdbg
(
DL_ERROR
,

1057 "Sís‹ fømêduøti⁄ së suc˚eded: camîa_id = %d, duøti⁄ = %d.\n", 
ˇm_id
, ()
vÆ
);

1059 
ˇmîa_c⁄åﬁ
->
c⁄figs_to_skù
 = 1;

1060 
	`oßl_muãx_u∆ock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

1061 
	}
}

1064 
	$ˇmîa_c⁄åﬁ_exp_com≥nßti⁄
(
ˇm_id
, 
uöt32_t
 
vÆ
)

1066 
ˇmîa_c⁄åﬁ_t
 *
ˇmîa_c⁄åﬁ
;

1067 
guzzi_ˇmîa3_c⁄åﬁs_c⁄åﬁ_´_exposuª_com≥nßti⁄_t
 
exp_com≥nßti⁄
;

1068 
îr
;

1070 
ˇmîa_c⁄åﬁ
 = &
g_ˇmîa_c⁄åﬁ
[
ˇm_id
];

1071 
exp_com≥nßti⁄
.
v
 = 
vÆ
;

1073 
	`oßl_muãx_lock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

1075 
ˇmîa_c⁄åﬁ
->
guzzi_‰_id
.
v
++;

1076 
	`ˇmîa_c⁄fig_£t_begö
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

1077 
îr
 = 
	`ˇmîa_c⁄fig_£t
(

1078 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

1079 
GUZZI_CAMERA3_INDEX_CONTROLS_CAPTURE_REQUEST_GUZZI_FR_ID
,

1080 &
ˇmîa_c⁄åﬁ
->
guzzi_‰_id


1082 
îr
 +
	`ˇmîa_c⁄fig_£t
(

1083 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

1084 
GUZZI_CAMERA3_INDEX_CONTROLS_CONTROL_AE_EXPOSURE_COMPENSATION
,

1085 &
exp_com≥nßti⁄


1087 
	`ˇmîa_c⁄fig_£t_íd
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

1088 i‡(
îr
) {

1089 
	`mmsdbg
(
DL_ERROR
, "SetÉxposure compensation failed.\n");

1091 
	`mmsdbg
(
DL_ERROR
,

1092 "Exposuª com≥nßti⁄ së suc˚eded: camîa_id = %d, vÆ = %d.\n", 
ˇm_id
, ()
vÆ
);

1094 
ˇmîa_c⁄åﬁ
->
c⁄figs_to_skù
 = 1;

1095 
	`oßl_muãx_u∆ock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

1096 
	}
}

1098 
	$ˇmîa_c⁄åﬁ_£nsôivôy
(
ˇm_id
, 
uöt32_t
 
iso_vÆ
)

1100 
ˇmîa_c⁄åﬁ_t
 *
ˇmîa_c⁄åﬁ
;

1101 
guzzi_ˇmîa3_c⁄åﬁs_£ns‹_£nsôivôy_t
 
£nsôivôy
;

1103 
guzzi_ˇmîa3_c⁄åﬁs_c⁄åﬁ_´_mode_t
 
´_mode
;

1104 
îr
;

1106 
ˇmîa_c⁄åﬁ
 = &
g_ˇmîa_c⁄åﬁ
[
ˇm_id
];

1107 
£nsôivôy
.
v
 = 
iso_vÆ
;

1108 
´_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AE_MODE_OFF
;

1110 
	`oßl_muãx_lock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

1112 
ˇmîa_c⁄åﬁ
->
guzzi_‰_id
.
v
++;

1113 
	`ˇmîa_c⁄fig_£t_begö
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

1114 
îr
 = 
	`ˇmîa_c⁄fig_£t
(

1115 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

1116 
GUZZI_CAMERA3_INDEX_CONTROLS_CAPTURE_REQUEST_GUZZI_FR_ID
,

1117 &
ˇmîa_c⁄åﬁ
->
guzzi_‰_id


1119 
îr
 +
	`ˇmîa_c⁄fig_£t
(

1120 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

1121 
GUZZI_CAMERA3_INDEX_CONTROLS_SENSOR_SENSITIVITY
,

1122 &
£nsôivôy


1124 
îr
 +
	`ˇmîa_c⁄fig_£t
(

1125 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

1126 
GUZZI_CAMERA3_INDEX_CONTROLS_CONTROL_AE_MODE
,

1127 &
´_mode


1129 
	`ˇmîa_c⁄fig_£t_íd
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

1130 i‡(
îr
) {

1131 
	`mmsdbg
(
DL_ERROR
, "Set ISO failed.\n");

1133 
	`mmsdbg
(
DL_ERROR
,

1134 "ISO së suc˚eded: camîa_id = %d, vÆ = %d.\n", 
ˇm_id
, ()
iso_vÆ
);

1136 
ˇmîa_c⁄åﬁ
->
c⁄figs_to_skù
 = 1;

1137 
	`oßl_muãx_u∆ock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

1138 
	}
}

1140 
	$ˇmîa_c⁄åﬁ_ef„˘_mode
(
ˇm_id
, 
uöt32_t
 
mode
)

1142 
ˇmîa_c⁄åﬁ_t
 *
ˇmîa_c⁄åﬁ
;

1143 
guzzi_ˇmîa3_c⁄åﬁs_c⁄åﬁ_ef„˘_mode_t
 
ef„˘_mode
;

1144 
îr
;

1146 
ˇmîa_c⁄åﬁ
 = &
g_ˇmîa_c⁄åﬁ
[
ˇm_id
];

1148 
mode
) {

1149 
CAMERA_CONTROL__EFFECT_MODE__OFF
:

1150 
ef„˘_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_EFFECT_MODE_OFF
;

1152 
CAMERA_CONTROL__EFFECT_MODE__MONO
:

1153 
ef„˘_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_EFFECT_MODE_MONO
;

1155 
CAMERA_CONTROL__EFFECT_MODE__NEGATIVE
:

1156 
ef„˘_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_EFFECT_MODE_NEGATIVE
;

1158 
CAMERA_CONTROL__EFFECT_MODE__SOLARIZE
:

1159 
ef„˘_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_EFFECT_MODE_SOLARIZE
;

1161 
CAMERA_CONTROL__EFFECT_MODE__SEPIA
:

1162 
ef„˘_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_EFFECT_MODE_SEPIA
;

1164 
CAMERA_CONTROL__EFFECT_MODE__POSTERIZE
:

1165 
ef„˘_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_EFFECT_MODE_POSTERIZE
;

1167 
CAMERA_CONTROL__EFFECT_MODE__WHITEBOARD
:

1168 
ef„˘_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_EFFECT_MODE_WHITEBOARD
;

1170 
CAMERA_CONTROL__EFFECT_MODE__BLACKBOARD
:

1171 
ef„˘_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_EFFECT_MODE_BLACKBOARD
;

1173 
CAMERA_CONTROL__EFFECT_MODE__AQUA
:

1174 
ef„˘_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_EFFECT_MODE_AQUA
;

1177 
	`mmsdbg
(
DL_ERROR
, "Unknow¿awb mode: %d!", ()
mode
);

1181 
	`oßl_muãx_lock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

1183 
ˇmîa_c⁄åﬁ
->
guzzi_‰_id
.
v
++;

1184 
	`ˇmîa_c⁄fig_£t_begö
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

1185 
îr
 = 
	`ˇmîa_c⁄fig_£t
(

1186 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

1187 
GUZZI_CAMERA3_INDEX_CONTROLS_CAPTURE_REQUEST_GUZZI_FR_ID
,

1188 &
ˇmîa_c⁄åﬁ
->
guzzi_‰_id


1191 
îr
 +
	`ˇmîa_c⁄fig_£t
(

1192 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

1193 
GUZZI_CAMERA3_INDEX_CONTROLS_CONTROL_EFFECT_MODE
,

1194 &
ef„˘_mode


1196 
	`ˇmîa_c⁄fig_£t_íd
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

1197 i‡(
îr
) {

1198 
	`mmsdbg
(
DL_ERROR
, "SetÉffect mode failed.\n");

1200 
	`mmsdbg
(
DL_ERROR
,

1201 "Ef„˘ modê£àsuc˚eded camîa_id = %d, modê%d.\n", 
ˇm_id
, ()
mode
);

1203 
ˇmîa_c⁄åﬁ
->
c⁄figs_to_skù
 = 1;

1204 
	`oßl_muãx_u∆ock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

1205 
	}
}

1207 
	$ˇmîa_c⁄åﬁ_af_mode
(
ˇm_id
, 
uöt32_t
 
mode
)

1209 
ˇmîa_c⁄åﬁ_t
 *
ˇmîa_c⁄åﬁ
;

1210 
guzzi_ˇmîa3_c⁄åﬁs_c⁄åﬁ_af_mode_t
 
af_mode
;

1211 
îr
;

1213 
ˇmîa_c⁄åﬁ
 = &
g_ˇmîa_c⁄åﬁ
[
ˇm_id
];

1215 
mode
) {

1216 
CAMERA_CONTROL__AF_MODE_OFF
:

1217 
af_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AF_MODE_OFF
;

1219 
CAMERA_CONTROL__AF_MODE_AUTO
:

1220 
af_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AF_MODE_AUTO
;

1222 
CAMERA_CONTROL__AF_MODE_MACRO
:

1223 
af_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AF_MODE_MACRO
;

1225 
CAMERA_CONTROL__AF_MODE_CONTINUOUS_VIDEO
:

1226 
af_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AF_MODE_CONTINUOUS_VIDEO
;

1228 
CAMERA_CONTROL__AF_MODE_CONTINUOUS_PICTURE
:

1229 
af_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AF_MODE_CONTINUOUS_PICTURE
;

1231 
CAMERA_CONTROL__AF_MODE_EDOF
:

1232 
af_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AF_MODE_EDOF
;

1235 
	`mmsdbg
(
DL_ERROR
, "Unknow¿a‡mode: %d!", ()
mode
);

1239 
	`oßl_muãx_lock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

1241 
ˇmîa_c⁄åﬁ
->
guzzi_‰_id
.
v
++;

1242 
	`ˇmîa_c⁄fig_£t_begö
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

1243 
îr
 = 
	`ˇmîa_c⁄fig_£t
(

1244 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

1245 
GUZZI_CAMERA3_INDEX_CONTROLS_CAPTURE_REQUEST_GUZZI_FR_ID
,

1246 &
ˇmîa_c⁄åﬁ
->
guzzi_‰_id


1248 
îr
 +
	`ˇmîa_c⁄fig_£t
(

1249 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

1250 
GUZZI_CAMERA3_INDEX_CONTROLS_CONTROL_AF_MODE
,

1251 &
af_mode


1253 
	`ˇmîa_c⁄fig_£t_íd
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

1254 i‡(
îr
) {

1255 
	`mmsdbg
(
DL_ERROR
, "Setáf mode failed.\n");

1257 
	`mmsdbg
(
DL_ERROR
,

1258 "A‡modê£àsuc˚eded camîa_id = %d, modê%d.\n", 
ˇm_id
, ()
mode
);

1260 
ˇmîa_c⁄åﬁ
->
c⁄figs_to_skù
 = 1;

1261 
	`oßl_muãx_u∆ock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

1262 
	}
}

1264 
	$ˇmîa_c⁄åﬁ_noi£_ªdu˘i⁄_°ªngth
(
ˇm_id
, 
uöt32_t
 
°ªngth_vÆ
)

1266 
ˇmîa_c⁄åﬁ_t
 *
ˇmîa_c⁄åﬁ
;

1267 
guzzi_ˇmîa3_c⁄åﬁs_noi£_ªdu˘i⁄_°ªngth_t
 
°ªngth
;

1268 
guzzi_ˇmîa3_c⁄åﬁs_noi£_ªdu˘i⁄_mode_t
 
mode
;

1269 
îr
;

1271 
ˇmîa_c⁄åﬁ
 = &
g_ˇmîa_c⁄åﬁ
[
ˇm_id
];

1272 
°ªngth
.
v
 = 
°ªngth_vÆ
;

1273 
mode
.
v
 = 
GUZZI_CAMERA3_ENUM_NOISE_REDUCTION_MODE_FAST
;

1275 
	`oßl_muãx_lock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

1277 
ˇmîa_c⁄åﬁ
->
guzzi_‰_id
.
v
++;

1278 
	`ˇmîa_c⁄fig_£t_begö
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

1279 
îr
 = 
	`ˇmîa_c⁄fig_£t
(

1280 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

1281 
GUZZI_CAMERA3_INDEX_CONTROLS_CAPTURE_REQUEST_GUZZI_FR_ID
,

1282 &
ˇmîa_c⁄åﬁ
->
guzzi_‰_id


1284 
îr
 +
	`ˇmîa_c⁄fig_£t
(

1285 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

1286 
GUZZI_CAMERA3_INDEX_CONTROLS_NOISE_REDUCTION_STRENGTH
,

1287 &
°ªngth


1289 
îr
 +
	`ˇmîa_c⁄fig_£t
(

1290 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

1291 
GUZZI_CAMERA3_INDEX_CONTROLS_NOISE_REDUCTION_MODE
,

1292 &
mode


1294 
	`ˇmîa_c⁄fig_£t_íd
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

1295 i‡(
îr
) {

1296 
	`mmsdbg
(
DL_ERROR
, "SetÇoiseÑeduction strength failed.\n");

1298 
	`mmsdbg
(
DL_ERROR
,

1300 
ˇm_id
, ()
°ªngth_vÆ
);

1302 
ˇmîa_c⁄åﬁ
->
c⁄figs_to_skù
 = 1;

1303 
	`oßl_muãx_u∆ock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

1304 
	}
}

1306 
	$ˇmîa_c⁄åﬁ_ßtuøti⁄
(
ˇm_id
, 
uöt32_t
 
ßtuøti⁄_vÆ
)

1308 
ˇmîa_c⁄åﬁ_t
 *
ˇmîa_c⁄åﬁ
;

1310 
îr
;

1312 
ˇmîa_c⁄åﬁ
 = &
g_ˇmîa_c⁄åﬁ
[
ˇm_id
];

1315 
	`oßl_muãx_lock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

1317 
ˇmîa_c⁄åﬁ
->
guzzi_‰_id
.
v
++;

1318 
	`ˇmîa_c⁄fig_£t_begö
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

1319 
îr
 = 
	`ˇmîa_c⁄fig_£t
(

1320 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

1321 
GUZZI_CAMERA3_INDEX_CONTROLS_CAPTURE_REQUEST_GUZZI_FR_ID
,

1322 &
ˇmîa_c⁄åﬁ
->
guzzi_‰_id


1329 
	`ˇmîa_c⁄fig_£t_íd
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

1330 i‡(
îr
) {

1331 
	`mmsdbg
(
DL_ERROR
, "Set saturation failed.\n");

1333 
	`mmsdbg
(
DL_ERROR
,

1335 
ˇm_id
, ()
ßtuøti⁄_vÆ
);

1337 
ˇmîa_c⁄åﬁ
->
c⁄figs_to_skù
 = 1;

1338 
	`oßl_muãx_u∆ock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

1339 
	}
}

1341 
	$ˇmîa_c⁄åﬁ_brighäess
(
ˇm_id
, 
uöt32_t
 
brighäess_vÆ
)

1343 
ˇmîa_c⁄åﬁ_t
 *
ˇmîa_c⁄åﬁ
;

1345 
îr
;

1347 
ˇmîa_c⁄åﬁ
 = &
g_ˇmîa_c⁄åﬁ
[
ˇm_id
];

1350 
	`oßl_muãx_lock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

1352 
ˇmîa_c⁄åﬁ
->
guzzi_‰_id
.
v
++;

1353 
	`ˇmîa_c⁄fig_£t_begö
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

1354 
îr
 = 
	`ˇmîa_c⁄fig_£t
(

1355 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

1356 
GUZZI_CAMERA3_INDEX_CONTROLS_CAPTURE_REQUEST_GUZZI_FR_ID
,

1357 &
ˇmîa_c⁄åﬁ
->
guzzi_‰_id


1364 
	`ˇmîa_c⁄fig_£t_íd
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

1365 i‡(
îr
) {

1366 
	`mmsdbg
(
DL_ERROR
, "Set brightness failed.\n");

1368 
	`mmsdbg
(
DL_ERROR
,

1370 
ˇm_id
, ()
brighäess_vÆ
);

1372 
ˇmîa_c⁄åﬁ
->
c⁄figs_to_skù
 = 1;

1373 
	`oßl_muãx_u∆ock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

1374 
	}
}

1376 
	$ˇmîa_c⁄åﬁ_f‹m©
(
ˇm_id
, 
uöt32_t
 
f‹m©_ty≥
)

1386 
	`mmsdbg
(
DL_ERROR
,

1388 
ˇm_id
, ()
f‹m©_ty≥
);

1407 
	}
}

1409 
	$ˇmîa_c⁄åﬁ_ªsﬁuti⁄
(
ˇm_id
, 
uöt32_t
 
w
, uöt32_à
h
)

1422 
	`mmsdbg
(
DL_ERROR
,

1424 
ˇm_id
, ()
w
, ()
h
);

1443 
	}
}

1445 
	$ˇmîa_c⁄åﬁ_sh¨≤ess
(
ˇm_id
, 
uöt32_t
 
sh¨≤ess_vÆ
)

1447 
ˇmîa_c⁄åﬁ_t
 *
ˇmîa_c⁄åﬁ
;

1448 
guzzi_ˇmîa3_c⁄åﬁs_edge_°ªngth_t
 
sh¨≤ess
;

1449 
îr
;

1451 
ˇmîa_c⁄åﬁ
 = &
g_ˇmîa_c⁄åﬁ
[
ˇm_id
];

1452 
sh¨≤ess
.
v
 = 
sh¨≤ess_vÆ
;

1454 
	`oßl_muãx_lock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

1456 
ˇmîa_c⁄åﬁ
->
guzzi_‰_id
.
v
++;

1457 
	`ˇmîa_c⁄fig_£t_begö
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

1458 
îr
 = 
	`ˇmîa_c⁄fig_£t
(

1459 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

1460 
GUZZI_CAMERA3_INDEX_CONTROLS_CAPTURE_REQUEST_GUZZI_FR_ID
,

1461 &
ˇmîa_c⁄åﬁ
->
guzzi_‰_id


1463 
îr
 +
	`ˇmîa_c⁄fig_£t
(

1464 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

1465 
GUZZI_CAMERA3_INDEX_CONTROLS_EDGE_STRENGTH
,

1466 &
sh¨≤ess


1468 
	`ˇmîa_c⁄fig_£t_íd
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

1469 i‡(
îr
) {

1470 
	`mmsdbg
(
DL_ERROR
, "Set sharpness failed.\n");

1472 
	`mmsdbg
(
DL_ERROR
,

1474 
ˇm_id
, ()
sh¨≤ess_vÆ
);

1476 
ˇmîa_c⁄åﬁ
->
c⁄figs_to_skù
 = 1;

1477 
	`oßl_muãx_u∆ock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

1478 
	}
}

	@cdk/apps/arch/ma2x5x/cdk_FLIC_1xIMX214/leon/camera_control.h

35 #i‚de‡
_CAMERA_CONTROL_H


36 
	#_CAMERA_CONTROL_H


	)

38 
	~<°döt.h
>

41 
	mCAMERA_CONTROL__AE_AUTO__FLASH_MODE__OFF
,

42 
	mCAMERA_CONTROL__AE_AUTO__FLASH_MODE__AUTO
,

43 
	mCAMERA_CONTROL__AE_AUTO__FLASH_MODE__ALWAYS
,

44 
	mCAMERA_CONTROL__AE_AUTO__FLASH_MODE__AUTO_REDEYE
,

48 
	mCAMERA_CONTROL__AWB_MODE__OFF
,

49 
	mCAMERA_CONTROL__AWB_MODE__AUTO
,

50 
	mCAMERA_CONTROL__AWB_MODE__INCANDESCENT
,

51 
	mCAMERA_CONTROL__AWB_MODE__FLUORESCENT
,

52 
	mCAMERA_CONTROL__AWB_MODE__WARM_FLUORESCENT
,

53 
	mCAMERA_CONTROL__AWB_MODE__DAYLIGHT
,

54 
	mCAMERA_CONTROL__AWB_MODE__CLOUDY_DAYLIGHT
,

55 
	mCAMERA_CONTROL__AWB_MODE__TWILIGHT
,

56 
	mCAMERA_CONTROL__AWB_MODE__SHADE
,

60 
	mCAMERA_CONTROL__SCENE_MODE__UNSUPPORTED
,

61 
	mCAMERA_CONTROL__SCENE_MODE__FACE_PRIORITY
,

62 
	mCAMERA_CONTROL__SCENE_MODE__ACTION
,

63 
	mCAMERA_CONTROL__SCENE_MODE__PORTRAIT
,

64 
	mCAMERA_CONTROL__SCENE_MODE__LANDSCAPE
,

65 
	mCAMERA_CONTROL__SCENE_MODE__NIGHT
,

66 
	mCAMERA_CONTROL__SCENE_MODE__NIGHT_PORTRAIT
,

67 
	mCAMERA_CONTROL__SCENE_MODE__THEATRE
,

68 
	mCAMERA_CONTROL__SCENE_MODE__BEACH
,

69 
	mCAMERA_CONTROL__SCENE_MODE__SNOW
,

70 
	mCAMERA_CONTROL__SCENE_MODE__SUNSET
,

71 
	mCAMERA_CONTROL__SCENE_MODE__STEADYPHOTO
,

72 
	mCAMERA_CONTROL__SCENE_MODE__FIREWORKS
,

73 
	mCAMERA_CONTROL__SCENE_MODE__SPORTS
,

74 
	mCAMERA_CONTROL__SCENE_MODE__PARTY
,

75 
	mCAMERA_CONTROL__SCENE_MODE__CANDLELIGHT
,

76 
	mCAMERA_CONTROL__SCENE_MODE__BARCODE
,

80 
	mCAMERA_CONTROL__AE_ANTIBANDING_MODE__OFF
,

81 
	mCAMERA_CONTROL__AE_ANTIBANDING_MODE__50HZ
,

82 
	mCAMERA_CONTROL__AE_ANTIBANDING_MODE__60HZ
,

83 
	mCAMERA_CONTROL__AE_ANTIBANDING_MODE__AUTO
,

87 
	mCAMERA_CONTROL__AE_LOCK__OFF
,

88 
	mCAMERA_CONTROL__AE_LOCK__ON
,

92 
	mCAMERA_CONTROL__AWB_LOCK__OFF
,

93 
	mCAMERA_CONTROL__AWB_LOCK__ON
,

97 
	mCAMERA_CONTROL__CAPTURE_INTENT__CUSTOM
,

98 
	mCAMERA_CONTROL__CAPTURE_INTENT__PREVIEW
,

99 
	mCAMERA_CONTROL__CAPTURE_INTENT__STILL_CAPTURE
,

100 
	mCAMERA_CONTROL__CAPTURE_INTENT__VIDEO_RECORD
,

101 
	mCAMERA_CONTROL__CAPTURE_INTENT__VIDEO_SNAPSHOT
,

102 
	mCAMERA_CONTROL__CAPTURE_INTENT__ZERO_SHUTTER_LAG
,

106 
	mCAMERA_CONTROL__MODE__OFF
,

107 
	mCAMERA_CONTROL__MODE__AUTO
,

108 
	mCAMERA_CONTROL__MODE__USE_SCENE_MODE
,

112 
	mCAMERA_CONTROL__EFFECT_MODE__OFF
,

113 
	mCAMERA_CONTROL__EFFECT_MODE__MONO
,

114 
	mCAMERA_CONTROL__EFFECT_MODE__NEGATIVE
,

115 
	mCAMERA_CONTROL__EFFECT_MODE__SOLARIZE
,

116 
	mCAMERA_CONTROL__EFFECT_MODE__SEPIA
,

117 
	mCAMERA_CONTROL__EFFECT_MODE__POSTERIZE
,

118 
	mCAMERA_CONTROL__EFFECT_MODE__WHITEBOARD
,

119 
	mCAMERA_CONTROL__EFFECT_MODE__BLACKBOARD
,

120 
	mCAMERA_CONTROL__EFFECT_MODE__AQUA
,

124 
	mCAMERA_CONTROL__AF_MODE_OFF
,

125 
	mCAMERA_CONTROL__AF_MODE_AUTO
,

126 
	mCAMERA_CONTROL__AF_MODE_MACRO
,

127 
	mCAMERA_CONTROL__AF_MODE_CONTINUOUS_VIDEO
,

128 
	mCAMERA_CONTROL__AF_MODE_CONTINUOUS_PICTURE
,

129 
	mCAMERA_CONTROL__AF_MODE_EDOF
,

133 
uöt32_t
 
ˇmîa_c⁄åﬁ_is_a˘ive
(
ˇm_id
);

134 
ˇmîa_c⁄åﬁ_°¨t
(
ˇm_id
);

135 
ˇmîa_c⁄åﬁ_°›
(
ˇm_id
);

136 
ˇmîa_c⁄åﬁ_ˇ±uª
(
ˇm_id
);

137 
ˇmîa_c⁄åﬁ_Àns_move
(
ˇm_id
, 
Àns_posôi⁄
);

138 
ˇmîa_c⁄åﬁ_focus_åiggî
(
ˇm_id
);

139 
ˇmîa_c⁄åﬁ_´_m™uÆ
(

140 
ˇm_id
,

141 
uöt32_t
 
time_us
,

142 
uöt32_t
 
£nsôivôy_iso
,

143 
uöt32_t
 
‰ame_duøti⁄_us


145 
ˇmîa_c⁄åﬁ_´_auto
(
ˇm_id
, 
uöt32_t
 
Êash_mode
);

146 
ˇmîa_c⁄åﬁ_awb_mode
(
ˇm_id
, 
uöt32_t
 
awb_mode
);

147 
ˇmîa_c⁄åﬁ_s˚√_mode
(
ˇm_id
, 
uöt32_t
 
s˚√_mode
);

148 
ˇmîa_c⁄åﬁ_™tib™dög_mode
(
ˇm_id
, 
uöt32_t
 
™tib™dög_mode
);

149 
ˇmîa_c⁄åﬁ_´_lock_mode
(
ˇm_id
, 
uöt32_t
 
´_lock_mode
);

150 
ˇmîa_c⁄åﬁ_´_èrgë_Âs_ønge
(
ˇm_id
, 
uöt32_t
 
mö_Âs
, uöt32_à
max_Âs
);

151 
ˇmîa_c⁄åﬁ_awb_lock_mode
(
ˇm_id
, 
uöt32_t
 
awb_lock_c⁄åﬁ
);

152 
ˇmîa_c⁄åﬁ_ˇ±uª_öã¡
(
ˇm_id
, 
uöt32_t
 
ˇ±uª_öã¡_mode
);

153 
ˇmîa_c⁄åﬁ_mode
(
ˇm_id
, 
uöt32_t
 
c⁄åﬁ_mode
);

154 
ˇmîa_c⁄åﬁ_‰ame_duøti⁄
(
ˇm_id
, 
uöt64_t
 
‰ame_duøti⁄
);

155 
ˇmîa_c⁄åﬁ_exp_com≥nßti⁄
(
ˇm_id
, 
uöt32_t
 
exp_com≥nßti⁄
);

156 
ˇmîa_c⁄åﬁ_£nsôivôy
(
ˇm_id
, 
uöt32_t
 
iso_vÆ
);

157 
ˇmîa_c⁄åﬁ_ef„˘_mode
(
ˇm_id
, 
uöt32_t
 
ef„˘_mode
);

158 
ˇmîa_c⁄åﬁ_af_mode
(
ˇm_id
, 
uöt32_t
 
af_mode
);

159 
ˇmîa_c⁄åﬁ_noi£_ªdu˘i⁄_°ªngth
(
ˇm_id
, 
uöt32_t
 
°ªngth_vÆ
);

160 
ˇmîa_c⁄åﬁ_ßtuøti⁄
(
ˇm_id
, 
uöt32_t
 
ßtuøti⁄_vÆ
);

161 
ˇmîa_c⁄åﬁ_brighäess
(
ˇm_id
, 
uöt32_t
 
brighäess_vÆ
);

162 
ˇmîa_c⁄åﬁ_f‹m©
(
ˇm_id
, 
uöt32_t
 
f‹m©_ty≥
);

163 
ˇmîa_c⁄åﬁ_ªsﬁuti⁄
(
ˇm_id
, 
uöt32_t
 
width
, uöt32_à
height
);

164 
ˇmîa_c⁄åﬁ_sh¨≤ess
(
ˇm_id
, 
uöt32_t
 
sh¨≤ess_vÆ
);

	@cdk/apps/arch/ma2x5x/cdk_FLIC_1xIMX214/leon/init.c

1 
	~<°dlib.h
>

2 
	~<°dio.h
>

3 
	~<°rög.h
>

4 
	~<î∫o.h
>

5 
	~<πems.h
>

6 
	~<b•.h
>

8 
	~<πems/b•Io.h
>

10 
	~<£m≠h‹e.h
>

11 
	~<±hªad.h
>

12 
	~<sched.h
>

13 
	~<f˙é.h
>

14 
	~<mv_ty≥s.h
>

15 
	~<πems/˝uu£.h
>

16 
	~<DrvLe⁄.h
>

17 
	~<öôSy°em.h
>

28 
maö
(
¨gc
, **
¨gv
);

30 * 
	$POSIX_Inô
 (*
¨gs
)

32 
	`UNUSED
(
¨gs
);

34 
	`maö
(0, 
NULL
);

35  
NULL
;

36 
	}
}

38 #i‡!
deföed
 (
__CONFIG__
)

39 
	#__CONFIG__


	)

42 
	#CONFIGURE_INIT


	)

44 
	#CONFIGURE_MICROSECONDS_PER_TICK
 1000

	)

46 
	#CONFIGURE_TICKS_PER_TIMESLICE
 10

	)

48 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

50 
	#CONFIGURE_APPLICATION_NEEDS_CLOCK_DRIVER


	)

52 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

56 
	#CONFIGURE_MINIMUM_TASK_STACK_SIZE
 (8*1024)

	)

58 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 80

	)

60 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 600

	)

62 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 50

	)

64 
	#CONFIGURE_MAXIMUM_POSIX_SEMAPHORES
 600

	)

66 
	#CONFIGURE_MAXIMUM_POSIX_CONDITION_VARIABLES
 16

	)

68 
	#CONFIGURE_MAXIMUM_POSIX_TIMERS
 4

	)

70 
	#CONFIGURE_MAXIMUM_TIMERS
 4

	)

72 
	#CONFIGURE_MAXIMUM_MESSAGE_QUEUES
 8

	)

73 
	#CONFIGURE_MAXIMUM_TASKS
 4

	)

75 
	#CONFIGURE_MAXIMUM_REGIONS
 1

	)

76 
	#CONFIGURE_LIBIO_MAXIMUM_FILE_DESCRIPTORS
 32

	)

77 
	#CONFIGURE_MAXIMUM_DRIVERS
 10

	)

78 
	#CONFIGURE_MAXIMUM_SEMAPHORES
 16

	)

79 
	#CONFIGURE_MAXIMUM_DEVICES
 8

	)

80 
	#CONFIGURE_APPLICATION_NEEDS_ZERO_DRIVER


	)

81 
	#CONFIGURE_APPLICATION_NEEDS_NULL_DRIVER


	)

82 
	#CONFIGURE_APPLICATION_NEEDS_STUB_DRIVER


	)

85 
	$F©Æ_exãnsi⁄
(

86 
I¡î«l_îr‹s_Sour˚
 
the_sour˚
,

87 
boﬁ
 
is_öã∫Æ
,

88 
I¡î«l_îr‹s_t
 
the_îr‹


91 
the_sour˚
)

93 
RTEMS_FATAL_SOURCE_EXIT
:

94 if(
the_îr‹
)

95 
	`¥ötk
("Exôed wôhÉº‹ codê%d\n", 
the_îr‹
);

97 
RTEMS_FATAL_SOURCE_ASSERT
:

98 
	`¥ötk
("%s : %d in %s \n",

99 ((
πems_as£π_c⁄ãxt
 *)
the_îr‹
)->
fûe
,

100 ((
πems_as£π_c⁄ãxt
 *)
the_îr‹
)->
löe
,

101 ((
πems_as£π_c⁄ãxt
 *)
the_îr‹
)->
fun˘i⁄
);

103 
RTEMS_FATAL_SOURCE_EXCEPTION
:

104 
	`πems_ex˚±i⁄_‰ame_¥öt
((c⁄° 
πems_ex˚±i⁄_‰ame
 *Ë
the_îr‹
);

107 
	`¥ötk
 ("\nSource %d Internal %d Error %d 0x%X:\n",

108 
the_sour˚
, 
is_öã∫Æ
, 
the_îr‹
,Åhe_error);

111 
	}
}

113 
	#CONFIGURE_MAXIMUM_USER_EXTENSIONS
 1

	)

114 
	#CONFIGURE_INITIAL_EXTENSIONS
 { .
Áèl
 = &
F©Æ_exãnsi⁄
 }

	)

116 
	~<πems/c⁄fdefs.h
>

117 
	#MSS_CLOCKS
 0xFFFFFFFF

	)

142 
BSP_SET_CLOCK
(
DEFAULT_OSC_CLOCK_KHZ
, 
DEFAULT_APP_CLOCK_KHZ
, 1, 1, 
APP_CSS_CLOCKS
, 
APP_MSS_CLOCKS
, 
APP_UPA_CLOCKS
, 
APP_SIPP_CLOCKS
,0);

144 
BSP_SET_L2C_CONFIG
(0, 
DEFAULT_RTEMS_L2C_REPLACEMENT_POLICY
, 
DEFAULT_RTEMS_L2C_LOCKED_WAYS
,
DEFAULT_RTEMS_L2C_MODE
, 0, 0);

	@cdk/apps/arch/ma2x5x/cdk_FLIC_1xIMX214/leon/initSystem.c

19 
	~<OsDrvC¥.h
>

20 
	~<DrvGpio.h
>

21 
	~<OsDrvTimî.h
>

22 
	~<DrvShaveL2Cache.h
>

23 
	~"öôSy°em.h
"

24 
	~<brdDeföes.h
>

25 
	~"brdGpioCfgs/brdMv0182GpioDeÁu…s.h
"

31 
	#L2CACHE_CFG
 (
SHAVE_L2CACHE_NORMAL_MODE
)

	)

33 
	#CLOCKS_MIPICFG
 (
AUX_CLK_MASK_MIPI_ECFG
 | 
AUX_CLK_MASK_MIPI_CFG
)

	)

34 
	#REM_CLOCKS
 ( 
AUX_CLK_MASK_I2S0
 | \

35 
AUX_CLK_MASK_I2S1
 | \

36 
AUX_CLK_MASK_I2S2
 )

	)

38 
	#DESIRED_USB_FREQ_KHZ
 (20000)

	)

39 #i‡(
DEFAULT_APP_CLOCK_KHZ
%
DESIRED_USB_FREQ_KHZ
)

50 
tyAuxClkDividîCfg
 
	gauxClkAŒOn
[] =

52 {
AUX_CLK_MASK_UART
, 
CLK_SRC_REFCLK0
, 96, 625},

54 .
auxClockE«bÀMask
 = 
REM_CLOCKS
,

55 .
	gauxClockSour˚
 = 
CLK_SRC_SYS_CLK
,

56 .
	gauxClockDivNumî©‹
 = 1,

57 .
	gauxClockDivDíomö©‹
 = 1,

60 .
	gauxClockE«bÀMask
 = 
AUX_CLK_MASK_LCD
 ,

61 .
	gauxClockSour˚
 = 
CLK_SRC_SYS_CLK_DIV2
,

62 .
	gauxClockDivNumî©‹
 = 1,

63 .
	gauxClockDivDíomö©‹
 = 1

66 .
	gauxClockE«bÀMask
 = 
AUX_CLK_MASK_MEDIA
,

67 .
	gauxClockSour˚
 = 
CLK_SRC_SYS_CLK
 ,

68 .
	gauxClockDivNumî©‹
 = 1,

69 .
	gauxClockDivDíomö©‹
 = 1,

73 .
	gauxClockE«bÀMask
 = (
AUX_CLK_MASK_CIF0
 | 
AUX_CLK_MASK_CIF1
),

74 .
	gauxClockSour˚
 = 
CLK_SRC_SYS_CLK
,

75 .
	gauxClockDivNumî©‹
 = 1,

76 .
	gauxClockDivDíomö©‹
 = 1,

79 .
	gauxClockE«bÀMask
 = 
CLOCKS_MIPICFG
,

80 .
	gauxClockSour˚
 = 
CLK_SRC_SYS_CLK
 ,

81 .
	gauxClockDivNumî©‹
 = 1,

82 .
	gauxClockDivDíomö©‹
 = (
uöt32_t
)(
DEFAULT_APP_CLOCK_KHZ
/24000),

85 .
	gauxClockE«bÀMask
 = 
AUX_CLK_MASK_MIPI_TX0
 | 
AUX_CLK_MASK_MIPI_TX1
,

86 .
	gauxClockSour˚
 = 
CLK_SRC_REFCLK0
,

87 .
	gauxClockDivNumî©‹
 = 1,

88 .
	gauxClockDivDíomö©‹
 = 1

91 .
	gauxClockE«bÀMask
 = (
u32
)(1 << 
CSS_AUX_TSENS
),

92 .
	gauxClockSour˚
 = 
CLK_SRC_REFCLK0
,

93 .
	gauxClockDivNumî©‹
 = 1,

94 .
	gauxClockDivDíomö©‹
 = 10,

97 .
	gauxClockE«bÀMask
 = 
AUX_CLK_MASK_USB_PHY_EXTREFCLK
,

98 .
	gauxClockSour˚
 = 
CLK_SRC_PLL0
,

99 .
	gauxClockDivNumî©‹
 = 1,

100 .
	gauxClockDivDíomö©‹
 = (
uöt32_t
)(
DEFAULT_APP_CLOCK_KHZ
/
DESIRED_USB_FREQ_KHZ
)

103 .
	gauxClockE«bÀMask
 = 
AUX_CLK_MASK_USB_PHY_REF_ALT_CLK
,

104 .
	gauxClockSour˚
 = 
CLK_SRC_PLL0
,

105 .
	gauxClockDivNumî©‹
 = 1,

106 .
	gauxClockDivDíomö©‹
 = (
uöt32_t
)(
DEFAULT_APP_CLOCK_KHZ
/
DESIRED_USB_FREQ_KHZ
)

109 .
	gauxClockE«bÀMask
 = 
AUX_CLK_MASK_USB_CTRL_REF_CLK
,

110 .
	gauxClockSour˚
 = 
CLK_SRC_PLL0
,

111 .
	gauxClockDivNumî©‹
 = 1,

112 .
	gauxClockDivDíomö©‹
 = (
uöt32_t
)(
DEFAULT_APP_CLOCK_KHZ
/
DESIRED_USB_FREQ_KHZ
)

115 .
	gauxClockE«bÀMask
 = 
AUX_CLK_MASK_USB_CTRL_SUSPEND_CLK
,

116 .
	gauxClockSour˚
 = 
CLK_SRC_PLL0
,

117 .
	gauxClockDivNumî©‹
 = 1,

118 .
	gauxClockDivDíomö©‹
 = (
uöt32_t
)(
DEFAULT_APP_CLOCK_KHZ
/
DESIRED_USB_FREQ_KHZ
)

125 
	~<DrvLe⁄L2C.h
>

126 
	$À⁄L2CacheInôWrThrough
()

128 
LL2CC⁄fig_t
 
Œ2C⁄fig
;

131 
	`DrvLL2CFlushOpOnAŒLöes
(
LL2C_OPERATION_INVALIDATE
, 0);

133 
Œ2C⁄fig
.
LL2CE«bÀ
 = 1;

134 
Œ2C⁄fig
.
LL2CLockedWaysNo
 = 0;

135 
Œ2C⁄fig
.
LL2CWayToRïœ˚
 = 0;

136 
Œ2C⁄fig
.
busUßge
 = 
BUS_WRAPPING_MODE
;

137 
Œ2C⁄fig
.
hôR©e
 = 
HIT_WRAPPING_MODE
;

138 
Œ2C⁄fig
.
ª∂a˚Pﬁicy
 = 
LRU
;

139 
Œ2C⁄fig
.
wrôePﬁicy
 = 
WRITE_THROUGH
;

141 
	`DrvLL2CInôülize
(&
Œ2C⁄fig
);

142 
	}
}

148 
	$öôClocksAndMem‹y
()

154 
	`OsDrvC¥Inô
();

155 
	`OsDrvC¥O≥n
();

156 
	`OsDrvTimîInô
();

157 
	`OsDrvC¥AuxClockAºayC⁄fig
(
auxClkAŒOn
);

158 
	`À⁄L2CacheInôWrThrough
();

160 
	`DrvShaveL2CacheSëMode
(
L2CACHE_CFG
);

163 
	`SET_REG_WORD
 (
CMX_RSTN_CTRL
,0x00000000);

164 
	`SET_REG_WORD
 (
CMX_CLK_CTRL
, 0xffffffff);

165 
	`SET_REG_WORD
 (
CMX_RSTN_CTRL
,0xffffffff);

167 
	`SET_REG_WORD
(
MSS_CLK_CTRL_ADR
, 0xffffffff);

168 
	`SET_REG_WORD
(
MSS_RSTN_CTRL_ADR
, 0xffffffff);

170 
	`DrvC¥SysDevi˚A˘i⁄
(
MSS_DOMAIN
, 
ASSERT_RESET
, 
DEV_MSS_LCD
 | 
DEV_MSS_CIF0
 | 
DEV_MSS_CIF1
 | 
DEV_MSS_SIPP
);

171 
	`DrvC¥SysDevi˚A˘i⁄
(
MSS_DOMAIN
, 
DEASSERT_RESET
, -1);

172 
	`DrvC¥SysDevi˚A˘i⁄
(
CSS_DOMAIN
, 
DEASSERT_RESET
, -1);

173 
	`DrvC¥SysDevi˚A˘i⁄
(
UPA_DOMAIN
, 
DEASSERT_RESET
, -1);

175 
	`DrvC¥SèπAŒClocks
();

176 
	`SET_REG_WORD
(
MSS_SIPP_RSTN_CTRL_ADR
, 0);

177 
	`SET_REG_WORD
(
MSS_SIPP_RSTN_CTRL_ADR
, 0x3ffffff);

178 
	`SET_REG_WORD
(
MSS_SIPP_CLK_SET_ADR
, 0x3ffffff);

181 
	}
}

185 
	$öôSy°em
()

187 
	#IRQ_SRC_0
 0

	)

188 
	#IRQ_SRC_1
 1

	)

189 
	#IRQ_SRC_2
 2

	)

190 
	#IRQ_SRC_3
 3

	)

192 
	`öôClocksAndMem‹y
();

193 
	`DrvGpioIrqSrcDißbÀ
(
IRQ_SRC_0
);

194 
	`DrvGpioIrqSrcDißbÀ
(
IRQ_SRC_1
);

195 
	`DrvGpioIrqSrcDißbÀ
(
IRQ_SRC_2
);

196 
	`DrvGpioIrqSrcDißbÀ
(
IRQ_SRC_3
);

197 
	`DrvGpioInôüli£R™ge
(
brdMV0182GpioCfgDeÁu…
);

198 
	}
}

	@cdk/apps/arch/ma2x5x/cdk_FLIC_1xIMX214/leon/initSystem.h

15 #i‚de‡
INITSYSTEM_LOS_H


16 
	#INITSYSTEM_LOS_H


	)

21 
	~<brdDeföes.h
>

22 
	~<DrvC¥.h
>

27 #i‚de‡
DEFAULT_APP_CLOCK_KHZ


28 
	#DEFAULT_APP_CLOCK_KHZ
 480000

	)

31 #i‚de‡
DEFAULT_OSC_CLOCK_KHZ


32 
	#DEFAULT_OSC_CLOCK_KHZ
 
BOARD_REF_CLOCK_KHZ


	)

35 
	#BIGENDIANMODE
 (0x01000786)

	)

37 
	#APP_CSS_CLOCKS
 (–
DEV_CSS_LOS
 ) | \

38 –
DEV_CSS_LAHB_CTRL
 ) | \

39 –
DEV_CSS_APB4_CTRL
 ) | \

40 –
DEV_CSS_CPR
 ) | \

41 –
DEV_CSS_ROM
 ) | \

42 –
DEV_CSS_LOS_L2C
 ) | \

43 –
DEV_CSS_MAHB_CTRL
 ) | \

44 –
DEV_CSS_LOS_ICB
 ) | \

45 –
DEV_CSS_LOS_DSU
 ) | \

46 –
DEV_CSS_LOS_TIM
 ) | \

47 –
DEV_CSS_GPIO
 ) | \

48 –
DEV_CSS_JTAG
 ) | \

49 –
DEV_CSS_APB1_CTRL
 ) | \

50 –
DEV_CSS_AHB_DMA
 ) | \

51 –
DEV_CSS_APB3_CTRL
 ) | \

52 –
DEV_CSS_I2C0
 ) | \

53 –
DEV_CSS_I2C1
 ) | \

54 –
DEV_CSS_I2C2
 ) | \

55 –
DEV_CSS_UART
 ) | \

56 –
DEV_CSS_SPI0
 ) | \

57 –
DEV_CSS_SPI1
 ) | \

58 –
DEV_CSS_SPI2
 ) | \

59 –
DEV_CSS_SAHB_CTRL
 ) | \

60 –
DEV_CSS_MSS_MAS
 ) | \

61 –
DEV_CSS_UPA_MAS
 ) | \

62 –
DEV_CSS_DSS_APB
 ) | \

63 –
DEV_CSS_DSS_BUS
 ) | \

64 –
DEV_CSS_DSS_BUS_DXI
 ) | \

65 –
DEV_CSS_DSS_BUS_AAXI
 ) | \

66 –
DEV_CSS_DSS_BUS_MXI
 ) | \

67 –
DEV_CSS_LAHB2SHB
 ) | \

68 –
DEV_CSS_SAHB2MAHB
 ) | \

69 –
DEV_CSS_USB
 ) | \

70 –
DEV_CSS_USB_APBSLV
 ) | \

71 –
DEV_CSS_AON
 ))

	)

73 
	#APP_UPA_CLOCKS
 (–
DEV_UPA_SHAVE_L2
 ) | \

74 –
DEV_UPA_CDMA
 ) | \

75 –
DEV_UPA_BIC
 ) | \

76 –
DEV_UPA_CTRL
 ) | \

77 –
DEV_UPA_SH0
 ) | \

78 –
DEV_UPA_SH1
 ) | \

79 –
DEV_UPA_SH2
 ) | \

80 –
DEV_UPA_SH3
 ) | \

81 –
DEV_UPA_SH4
 ) | \

82 –
DEV_UPA_SH5
 ) | \

83 –
DEV_UPA_SH6
 ) | \

84 –
DEV_UPA_SH7
 ))

	)

86 
	#APP_MSS_CLOCKS
 (–
DEV_MSS_APB_SLV
 ) | \

87 –
DEV_MSS_APB2_CTRL
 ) | \

88 –
DEV_MSS_RTBRIDGE
 ) | \

89 –
DEV_MSS_RTAHB_CTRL
 ) | \

90 –
DEV_MSS_LRT
 ) | \

91 –
DEV_MSS_LRT_DSU
 ) | \

92 –
DEV_MSS_LRT_L2C
 ) | \

93 –
DEV_MSS_LRT_ICB
 ) | \

94 –
DEV_MSS_AXI_BRIDGE
 ) | \

95 –
DEV_MSS_MXI_CTRL
 ) | \

96 –
DEV_MSS_MXI_DEFSLV
 ) | \

97 –
DEV_MSS_AXI_MON
 ) | \

98 –
DEV_MSS_LCD
 ) | \

99 –
DEV_MSS_TIM
 ) | \

100 –
DEV_MSS_AMC
 ) | \

101 –
DEV_MSS_SIPP
 ))

	)

103 
	#APP_SIPP_CLOCKS
 (–
DEV_SIPP_SIGMA
 ) | \

104 –
DEV_SIPP_LSC
 ) | \

105 –
DEV_SIPP_RAW
 ) | \

106 –
DEV_SIPP_DBYR
 ) | \

107 –
DEV_SIPP_DOGL
 ) | \

108 –
DEV_SIPP_LUMA
 ) | \

109 –
DEV_SIPP_SHARPEN
 ) | \

110 –
DEV_SIPP_CGEN
 ) | \

111 –
DEV_SIPP_MED
 ) | \

112 –
DEV_SIPP_CHROMA
 ) | \

113 –
DEV_SIPP_CC
 ) | \

114 –
DEV_SIPP_LUT
 ) | \

115 –
DEV_SIPP_UPFIRDN0
 ) | \

116 –
DEV_SIPP_UPFIRDN1
 ) | \

117 –
DEV_SIPP_UPFIRDN2
 ) | \

118 –
DEV_SIPP_MIPI_RX0
 ) | \

119 –
DEV_SIPP_MIPI_RX1
 ) | \

120 –
DEV_SIPP_MIPI_RX2
 ) | \

121 –
DEV_SIPP_MIPI
 ) | \

122 –
DEV_SIPP_SIPP_ABPSLV
 ))

	)

132 
öôClocksAndMem‹y
();

134 
öôSy°em
();

	@cdk/apps/arch/ma2x5x/cdk_FLIC_1xIMX214/leon/main.c

35 
	~<°döt.h
>

36 
	~<oßl/oßl_°dlib.h
>

37 
	~<oßl/oßl_°rög.h
>

38 
	~<oßl/oßl_time.h
>

39 
	~<utûs/mms_debug.h
>

41 
	~<vîsi⁄_öfo.h
>

43 
	~"πems.h
"

44 #ifde‡
_REPORT_CPU_USAGE


45 
	~"πems/˝uu£.h
"

49 
	~<∂©f‹m/öc/∂©f‹m.h
>

51 
	~<guzzi_evít/ö˛ude/guzzi_evít.h
>

52 
	~<guzzi_evít_globÆ/ö˛ude/guzzi_evít_globÆ.h
>

54 
	~<dç/dç_£rvî_defs.h
>

56 
	~<comp⁄íts/ˇmîa/vˇmîa_iÁ˚/vút_cm/öc/vút_cm.h
>

58 
	~"öôSy°em.h
"

59 
	~"ˇmîa_c⁄åﬁ.h
"

60 
	~"≠p_guzzi_comm™d_•i.h
"

61 
	~"≠p_guzzi_comm™d_dbg.h
"

63 
	~"£ndOutApi.h
"

65 
	gdo_nŸ_u£_i2c_ch_0
 = 0;

67 
dç_£rvî_hndl_t
 
	gdç_§v_hndl
;

68 
uöt8_t
 
ext_dç_d©aba£
[];

69 
uöt8_t
 
ext_dç_d©aba£_íd
[];

70 
uöt8_t
 
	gdç_dtb_checked
 = 0;

72 
mmsdbg_deföe_v¨übÀ
(

73 
vdl_guzzi_i2c
,

74 
DL_DEFAULT
,

79 
	#MMSDEBUGLEVEL
 
	`mmsdbg_u£_v¨übÀ
(
vdl_guzzi_i2c
)

	)

81 #i‡
INPUT_UNIT_IS_USB


82 
	#APP_GUZZI_COMMAND_WAIT_TIMEOUT
 
≠p_guzzi_comm™d_waô_timeout_usb


	)

84 
	#APP_GUZZI_COMMAND_WAIT_TIMEOUT
 
≠p_guzzi_comm™d_waô_timeout_•i


	)

92 
∂©f‹m_drv_powî_öô
();

93 
∂©f‹m_drv_powî_deöô
();

94 
∂©f‹m_ˇm_Àd_1
(
a˘i⁄
);

96 
	$guzzi_ˇmîa3_ˇ±uª_ªsu…__x11_c⁄figuª_°ªams
(

97 
ˇmîa_id
,

98 *
°ªams


101 
	`UNUSED
(
ˇmîa_id
);

102 
	`UNUSED
(
°ªams
);

103 
	}
}

105 
	$guzzi_ˇmîa3_ˇ±uª_ªsu…
(

106 
ˇmîa_id
,

107 
°ªam_id
,

108 
‰ame_numbî
,

109 *
d©a
,

110 
d©a_size


113 
	`UNUSED
(
ˇmîa_id
);

114 
	`UNUSED
(
°ªam_id
);

115 
	`UNUSED
(
‰ame_numbî
);

116 
	`UNUSED
(
d©a
);

117 
	`UNUSED
(
d©a_size
);

118 
	}
}

125 
	$live_tunög_≠∂y
 (
≠p_guzzi_comm™d_t
 *
comm™d
)

127 
uöt8_t
 *
de°
 = 
ext_dç_d©aba£
 + 
comm™d
->
live_tunög
.
off£t
;

128 
uöt8_t
 *
§c
 = 
comm™d
->
live_tunög
.
d©a
;

130 i‡((
de°
 + 
comm™d
->
live_tunög
.
size
Ë> 
ext_dç_d©aba£_íd
) {

131 
	`mmsdbg
(
DL_ERROR
, "DTP offset: %d + size: %dÉxceeded: %d",

132 ()
comm™d
->
live_tunög
.
size
,

133 ()
comm™d
->
live_tunög
.
off£t
,

134 ()(
ext_dç_d©aba£_íd
 - 
ext_dç_d©aba£
)

139 i‡(!
dç_dtb_checked
) {

140 
	`mmsdbg
(
DL_ERROR
, "DTP db isÇot checked");

144 
comm™d
->
live_tunög
.
size
--) {

145 *
de°
++ = *
§c
++;

147 
	}
}

155 
	$live_tunög_u∆ock
 (
≠p_guzzi_comm™d_t
 *
comm™d
)

157 
dç_hndl_t
 
hdç
;

158 
dç_Àaf_d©a_t
 
Àaf
;

159 
dçdb_°©ic_comm⁄_t
 
°©ic_comm⁄
;

160 
dçdb_°©ic_¥iv©e_t
 
°©ic_¥iv©e
;

161 
dçdb_dy«mic_comm⁄_t
 
dcomm
;

162 
dçdb_dy«mic_¥iv©e_t
 
d¥v
;

163 
dç_out_d©a_t
 *
dç_d©a
;

165 
	`oßl_mem£t
(&
°©ic_comm⁄
, 0x00, (static_common));

166 
	`oßl_mem£t
(&
°©ic_¥iv©e
, 0x00, (static_private));

167 
	`oßl_mem£t
(&
dcomm
, 0x00, (dcomm));

168 
	`oßl_mem£t
(&
d¥v
, 0x00, (dprv));

170 if(
	`dç§v_gë_hndl
(
dç_§v_hndl
,

171 
DTP_DB_ID_CHECK_SUM
,

174 
dç_∑øm_‹dî
,

175 &
hdç
, &
Àaf
))

177 
	`mmsdbg
(
DL_ERROR
, "DTP_DB_ID_CHECK_ID - can't get DTP client handle");

178 
EXIT_1
;

181 
	`dç§v_¥e_¥o˚ss
(
hdç
, &
°©ic_comm⁄
, &
°©ic_¥iv©e
);

182 i‡(
	`dç§v_¥o˚ss
(
hdç
, &
dcomm
, &
d¥v
, (**)&
dç_d©a
))

184 
	`mmsdbg
(
DL_ERROR
, "DTP_DB_ID_CHECK_SUM -ÖrocessÉrror");

185 
EXIT_2
;

188 i‡(
DTP_DAT_TYPE_FIXED
 !
dç_d©a
->
d©a_ty≥_id
)

190 
	`mmsdbg
(
DL_ERROR
, "DTP_DB_ID_CHECK_SUM - wrong dataÅype");

191 
EXIT_2
;

194 i‡(
	`oßl_°rcmp
(
dç_d©a
->
d_fixed
.
p_d©a0
, (c⁄° *)
comm™d
->
live_tunög
.
d©a
))

196 
	`mmsdbg
(
DL_ERROR
, "DTP_DB_ID_CHECK_SUM - mismatch");

197 
EXIT_2
;

200 
dç_dtb_checked
 = 1;

202 
EXIT_2
:

203 
	`dç§v_‰ì_hndl
(
hdç
);

204 
EXIT_1
:

206 
	}
}

213 
	$¥ofûe_ªady_cb
(

214 
¥ofûe_t
 *
¥ofûe
,

215 *
¥v
,

216 *
buf„r
,

217 
buf„r_size


220 
	`UNUSED
(
¥v
);

221 
	`UNUSED
(
buf„r
);

222 
	`UNUSED
(
buf„r_size
);

225 
	`PROFILE_RELEASE_READY
(
buf„r
);

226 
	}
}

233 
	$≠p_guzzi_comm™d_ˇŒback
(

234 *
≠p_¥iv©e
,

235 
≠p_guzzi_comm™d_t
 *
comm™d


238 
	`UNUSED
(
≠p_¥iv©e
);

240 
	`mmsdbg
(
DL_ERROR
, "comm™d->id:%d", ()
comm™d
->
id
);

242 
comm™d
->
id
) {

243 
APP_GUZZI_COMMAND__LIVE_TUNING_UNLOCK
:

244 
	`live_tunög_u∆ock
(
comm™d
);

246 
APP_GUZZI_COMMAND__LIVE_TUNING_APPLY
:

247 
	`live_tunög_≠∂y
(
comm™d
);

249 
APP_GUZZI_COMMAND__OUTPUT_CONTROL
:

258 i‡(
	`ˇmîa_c⁄åﬁ_is_a˘ive
(
comm™d
->
ˇm
.
id
))

260 i‡(
APP_GUZZI_COMMAND__CAM_START
 =
comm™d
->
id
) {

261 
	`mmsdbg
(
DL_ERROR
, "Skùpög comm™d START f‹áÃódyá˘iv©ed camî®%d", ()
comm™d
->
ˇm
.
id
);

265 i‡(
APP_GUZZI_COMMAND__CAM_START
 !
comm™d
->
id
) {

266 
	`mmsdbg
(
DL_ERROR
, "Skùpög comm™d %d f‹ N⁄á˘ivêˇmî®%d", ()
comm™d
->
id
, ()comm™d->
ˇm
.id);

270 
comm™d
->
id
) {

271 
APP_GUZZI_COMMAND__NOP
:

274 
APP_GUZZI_COMMAND__CAM_START
:

275 
	`PROFILE_ADD
(
PROFILE_ID_EXT_START_CMD
, 0, 0);

276 
	`mmsdbg
(
DL_ERROR
, "comm™d \"%d %d\" sít\n", ()
comm™d
->
id
, ()comm™d->
ˇm
.id);

277 
	`ˇmîa_c⁄åﬁ_°¨t
(
comm™d
->
ˇm
.
id
);

279 
APP_GUZZI_COMMAND__CAM_STOP
:

280 
	`PROFILE_ADD
(
PROFILE_ID_EXT_STOP_CMD
, 0, 0);

281 
	`ˇmîa_c⁄åﬁ_°›
(
comm™d
->
ˇm
.
id
);

282 
	`mmsdbg
(
DL_ERROR
, "comm™d \"%d %d\" sít\n", ()
comm™d
->
id
, ()comm™d->
ˇm
.id);

284 
APP_GUZZI_COMMAND__CAM_CAPTURE
:

285 
	`PROFILE_ADD
(
PROFILE_ID_EXT_CAPTURE_CMD
, 0, 0);

286 
	`ˇmîa_c⁄åﬁ_ˇ±uª
(
comm™d
->
ˇm
.
id
);

287 
	`mmsdbg
(
DL_ERROR
, "comm™d \"%d %d\" sít\n", ()
comm™d
->
id
, ()comm™d->
ˇm
.id);

289 
APP_GUZZI_COMMAND__CAM_LENS_MOVE
:

290 
	`PROFILE_ADD
(
PROFILE_ID_EXT_LENS_MOVE
, 0, 0);

291 
	`ˇmîa_c⁄åﬁ_Àns_move
(

292 
comm™d
->
ˇm
.
id
,

293 
comm™d
->
ˇm
.
Àns_move
.
pos


295 
	`mmsdbg
(
DL_ERROR
, "command \"%d %d %d\" sent\n",

296 ()
comm™d
->
id
, ()comm™d->
ˇm
.id, ()comm™d->ˇm.
Àns_move
.
pos
);

298 
APP_GUZZI_COMMAND__CAM_AF_TRIGGER
:

299 
	`PROFILE_ADD
(
PROFILE_ID_EXT_LENS_MOVE
, 0, 0);

300 
	`ˇmîa_c⁄åﬁ_focus_åiggî
(
comm™d
->
ˇm
.
id
);

301 
	`mmsdbg
(
DL_ERROR
, "comm™d \"%d %d\" sít\n", ()
comm™d
->
id
, ()comm™d->
ˇm
.id);

303 
APP_GUZZI_COMMAND__CAM_AE_MANUAL
:

304 
	`ˇmîa_c⁄åﬁ_´_m™uÆ
(

305 
comm™d
->
ˇm
.
id
,

306 
comm™d
->
ˇm
.
´_m™uÆ
.
exp_us
,

307 
comm™d
->
ˇm
.
´_m™uÆ
.
£nsôivôy_iso
,

308 
comm™d
->
ˇm
.
´_m™uÆ
.
‰ame_duøti⁄_us


310 
	`mmsdbg
(
DL_ERROR
, "command \"%d %d %d %d %d\" sent\n",

311 ()
comm™d
->
id
,

312 ()
comm™d
->
ˇm
.
id
,

313 ()
comm™d
->
ˇm
.
´_m™uÆ
.
exp_us
,

314 ()
comm™d
->
ˇm
.
´_m™uÆ
.
£nsôivôy_iso
,

315 ()
comm™d
->
ˇm
.
´_m™uÆ
.
‰ame_duøti⁄_us
);

317 
APP_GUZZI_COMMAND__CAM_AE_AUTO
:

318 
	`ˇmîa_c⁄åﬁ_´_auto
(

319 
comm™d
->
ˇm
.
id
,

320 
CAMERA_CONTROL__AE_AUTO__FLASH_MODE__AUTO


322 
	`mmsdbg
(
DL_ERROR
, "comm™d \"%d %d\" sít\n", ()
comm™d
->
id
, ()comm™d->
ˇm
.id);

324 
APP_GUZZI_COMMAND__CAM_AWB_MODE
:

325 
	`ˇmîa_c⁄åﬁ_awb_mode
(

326 
comm™d
->
ˇm
.
id
,

327 
comm™d
->
ˇm
.
awb_mode
.
mode


329 
	`mmsdbg
(
DL_ERROR
, "command \"%d %d %d\" sent\n",

330 ()
comm™d
->
id
, ()comm™d->
ˇm
.id, ()comm™d->ˇm.
awb_mode
.
mode
);

332 
APP_GUZZI_COMMAND__CAM_SCENE_MODE
:

333 
	`ˇmîa_c⁄åﬁ_s˚√_mode
(

334 
comm™d
->
ˇm
.
id
,

335 
comm™d
->
ˇm
.
s˚√_mode
.
ty≥


337 
	`mmsdbg
(
DL_ERROR
, "command \"%d %d %d\" sent\n",

338 ()
comm™d
->
id
, ()comm™d->
ˇm
.id, ()comm™d->ˇm.
s˚√_mode
.
ty≥
);

340 
APP_GUZZI_COMMAND__CAM_ANTIBANDING_MODE
:

341 
	`ˇmîa_c⁄åﬁ_™tib™dög_mode
(

342 
comm™d
->
ˇm
.
id
,

343 
comm™d
->
ˇm
.
™tib™dög_mode
.
ty≥


345 
	`mmsdbg
(
DL_ERROR
, "command \"%d %d %d\" sent\n",

346 ()
comm™d
->
id
, ()comm™d->
ˇm
.id, ()comm™d->ˇm.
™tib™dög_mode
.
ty≥
);

348 
APP_GUZZI_COMMAND__CAM_AE_LOCK
:

349 
	`ˇmîa_c⁄åﬁ_´_lock_mode
(

350 
comm™d
->
ˇm
.
id
,

351 
comm™d
->
ˇm
.
´_lock_mode
.
ty≥


353 
	`mmsdbg
(
DL_ERROR
, "command \"%d %d %d\" sent\n",

354 ()
comm™d
->
id
, ()comm™d->
ˇm
.id, ()comm™d->ˇm.
´_lock_mode
.
ty≥
);

356 
APP_GUZZI_COMMAND__CAM_AE_TARGET_FPS_RANGE
:

357 
	`ˇmîa_c⁄åﬁ_´_èrgë_Âs_ønge
(

358 
comm™d
->
ˇm
.
id
,

359 
comm™d
->
ˇm
.
´_èrgë_Âs_ønge
.
mö_Âs
,

360 
comm™d
->
ˇm
.
´_èrgë_Âs_ønge
.
max_Âs


362 
	`mmsdbg
(
DL_ERROR
, "comm™d \"%d %d %d %d\" sít\n", ()
comm™d
->
id
,

363 ()
comm™d
->
ˇm
.
id
, ()comm™d->ˇm.
´_èrgë_Âs_ønge
.
mö_Âs
,

364 ()
comm™d
->
ˇm
.
´_èrgë_Âs_ønge
.
max_Âs
);

366 
APP_GUZZI_COMMAND__CAM_AWB_LOCK
:

367 
	`ˇmîa_c⁄åﬁ_awb_lock_mode
(

368 
comm™d
->
ˇm
.
id
,

369 
comm™d
->
ˇm
.
awb_lock_c⁄åﬁ
.
ty≥


371 
	`mmsdbg
(
DL_ERROR
, "command \"%d %d %d\" sent\n",

372 ()
comm™d
->
id
, ()comm™d->
ˇm
.id, ()comm™d->ˇm.
awb_lock_c⁄åﬁ
.
ty≥
);

374 
APP_GUZZI_COMMAND__CAM_CAPTURE_INTRENT
:

375 
	`ˇmîa_c⁄åﬁ_ˇ±uª_öã¡
(

376 
comm™d
->
ˇm
.
id
,

377 
comm™d
->
ˇm
.
ˇ±uª_öã¡
.
mode


379 
	`mmsdbg
(
DL_ERROR
, "command \"%d %d %d\" sent\n",

380 ()
comm™d
->
id
, ()comm™d->
ˇm
.id, ()comm™d->ˇm.
ˇ±uª_öã¡
.
mode
);

382 
APP_GUZZI_COMMAND__CAM_CONTROL_MODE
:

383 
	`ˇmîa_c⁄åﬁ_mode
(

384 
comm™d
->
ˇm
.
id
,

385 
comm™d
->
ˇm
.
c⁄åﬁ_mode
.
ty≥


387 
	`mmsdbg
(
DL_ERROR
, "command \"%d %d %d\" sent\n",

388 ()
comm™d
->
id
, ()comm™d->
ˇm
.id, ()comm™d->ˇm.
c⁄åﬁ_mode
.
ty≥
);

390 
APP_GUZZI_COMMAND__CAM_FRAME_DURATION
:

391 
	`ˇmîa_c⁄åﬁ_‰ame_duøti⁄
(

392 
comm™d
->
ˇm
.
id
,

393 
comm™d
->
ˇm
.
‰ame_duøti⁄
.
vÆ


395 
	`mmsdbg
(
DL_ERROR
, "command \"%d %d %d\" sent\n",

396 ()
comm™d
->
id
, ()comm™d->
ˇm
.id, ()comm™d->ˇm.
‰ame_duøti⁄
.
vÆ
);

398 
APP_GUZZI_COMMAND__CAM_AE_EXPOSURE_COMPENSATION
:

399 
	`ˇmîa_c⁄åﬁ_exp_com≥nßti⁄
(

400 
comm™d
->
ˇm
.
id
,

401 
comm™d
->
ˇm
.
exposuª_com≥nßti⁄
.
vÆ


403 
	`mmsdbg
(
DL_ERROR
, "command \"%d %d %d\" sent\n",

404 ()
comm™d
->
id
, ()comm™d->
ˇm
.id, ()comm™d->ˇm.
exposuª_com≥nßti⁄
.
vÆ
);

406 
APP_GUZZI_COMMAND__CAM_SENSITIVITY
:

407 
	`ˇmîa_c⁄åﬁ_£nsôivôy
(

408 
comm™d
->
ˇm
.
id
,

409 
comm™d
->
ˇm
.
£nsôivôy
.
iso_vÆ


411 
	`mmsdbg
(
DL_ERROR
, "command \"%d %d %d\" sent\n",

412 ()
comm™d
->
id
, ()comm™d->
ˇm
.id, ()comm™d->ˇm.
£nsôivôy
.
iso_vÆ
);

414 
APP_GUZZI_COMMAND__CAM_EFFECT_MODE
:

415 
	`ˇmîa_c⁄åﬁ_ef„˘_mode
(

416 
comm™d
->
ˇm
.
id
,

417 
comm™d
->
ˇm
.
ef„˘_mode
.
ty≥


419 
	`mmsdbg
(
DL_ERROR
, "command \"%d %d %d\" sent\n",

420 ()
comm™d
->
id
, ()comm™d->
ˇm
.id, ()comm™d->ˇm.
ef„˘_mode
.
ty≥
);

422 
APP_GUZZI_COMMAND__CAM_AF_MODE
:

423 
	`ˇmîa_c⁄åﬁ_af_mode
(

424 
comm™d
->
ˇm
.
id
,

425 
comm™d
->
ˇm
.
af_mode
.
ty≥


427 
	`mmsdbg
(
DL_ERROR
, "command \"%d %d %d\" sent\n",

428 ()
comm™d
->
id
, ()comm™d->
ˇm
.id, ()comm™d->ˇm.
af_mode
.
ty≥
);

430 
APP_GUZZI_COMMAND__CAM_NOISE_REDUCTION_STRENGTH
:

431 
	`ˇmîa_c⁄åﬁ_noi£_ªdu˘i⁄_°ªngth
(

432 
comm™d
->
ˇm
.
id
,

433 
comm™d
->
ˇm
.
noi£_ªdu˘i⁄_°ªngth
.
vÆ


435 
	`mmsdbg
(
DL_ERROR
, "command \"%d %d %d\" sent\n",

436 ()
comm™d
->
id
, ()comm™d->
ˇm
.id, ()comm™d->ˇm.
noi£_ªdu˘i⁄_°ªngth
.
vÆ
);

438 
APP_GUZZI_COMMAND__CAM_SATURATION
:

439 
	`ˇmîa_c⁄åﬁ_ßtuøti⁄
(

440 
comm™d
->
ˇm
.
id
,

441 
comm™d
->
ˇm
.
ßtuøti⁄
.
vÆ


443 
	`mmsdbg
(
DL_ERROR
, "command \"%d %d %d\" sent\n",

444 ()
comm™d
->
id
, ()comm™d->
ˇm
.id, ()comm™d->ˇm.
ßtuøti⁄
.
vÆ
);

446 
APP_GUZZI_COMMAND__CAM_BRIGHTNESS
:

447 
	`ˇmîa_c⁄åﬁ_brighäess
(

448 
comm™d
->
ˇm
.
id
,

449 
comm™d
->
ˇm
.
brighäess
.
vÆ


451 
	`mmsdbg
(
DL_ERROR
, "command \"%d %d %d\" sent\n",

452 ()
comm™d
->
id
, ()comm™d->
ˇm
.id, ()comm™d->ˇm.
brighäess
.
vÆ
);

454 
APP_GUZZI_COMMAND__CAM_FORMAT
:

455 
	`ˇmîa_c⁄åﬁ_f‹m©
(

456 
comm™d
->
ˇm
.
id
,

457 
comm™d
->
ˇm
.
f‹m©
.
vÆ


459 
	`mmsdbg
(
DL_ERROR
, "command \"%d %d %d\" sent\n",

460 ()
comm™d
->
id
, ()comm™d->
ˇm
.id, ()comm™d->ˇm.
f‹m©
.
vÆ
);

462 
APP_GUZZI_COMMAND__CAM_RESOLUTION
:

463 
	`ˇmîa_c⁄åﬁ_ªsﬁuti⁄
(

464 
comm™d
->
ˇm
.
id
,

465 
comm™d
->
ˇm
.
ªsﬁuti⁄
.
width
,

466 
comm™d
->
ˇm
.
ªsﬁuti⁄
.
height


468 
	`mmsdbg
(
DL_ERROR
, "comm™d \"%d %d %d %d\" sít\n", ()
comm™d
->
id
,

469 ()
comm™d
->
ˇm
.
id
, ()comm™d->ˇm.
ªsﬁuti⁄
.
width
,

470 ()
comm™d
->
ˇm
.
ªsﬁuti⁄
.
height
);

472 
APP_GUZZI_COMMAND__CAM_SHARPNESS
:

473 
	`ˇmîa_c⁄åﬁ_sh¨≤ess
(

474 
comm™d
->
ˇm
.
id
,

475 
comm™d
->
ˇm
.
sh¨≤ess
.
vÆ


477 
	`mmsdbg
(
DL_ERROR
, "command \"%d %d %d\" sent\n",

478 ()
comm™d
->
id
, ()comm™d->
ˇm
.id, ()comm™d->ˇm.
sh¨≤ess
.
vÆ
);

481 
	`mmsdbg
(
DL_ERROR
, "Unknow¿Aµ GUZZI Comm™d: %d", ()
comm™d
->
id
);

483 
	}
}

491 
	$≠p_guzzi_comm™d_waô_timeout_•i
 (*
≠p_¥iv©e
,

492 
≠p_guzzi_comm™d_ˇŒback_t
 *
ˇŒback
,

493 
uöt32_t
 
timeout_ms
)

495  
	`≠p_guzzi_comm™d_•i_waô_timeout
(
≠p_¥iv©e
, 
ˇŒback
, 
timeout_ms
)

496 + 
	`≠p_guzzi_comm™d_dbg_≥ek
(
≠p_¥iv©e
, 
ˇŒback
);

497 
	}
}

500 
oßl_£m
 *
	g≠p_guzzi_comm™d_£m
;

502 
≠p_guzzi_comm™d_t
 *
•i_comm™d_to_≠p_guzzi_comm™d
◊µ_guzzi_comm™d_à*
comm™d
, *
comm™d_•i
);

504 
	#MAX_APP_GUZZI_COMMANDS
 8

	)

505 
≠p_guzzi_comm™d_t
 
	g≠p_guzzi_comm™ds
[
MAX_APP_GUZZI_COMMANDS
];

506 
	g≠p_guzzi_comm™d_rd
 = 0, 
	g≠p_guzzi_comm™d_wr
 = 0;

508 
	$≠p_guzzi_comm™d_gë_wr_idx
()

510 
idx
 = 
≠p_guzzi_comm™d_wr
 + 1;

511 i‡(
idx
 >
MAX_APP_GUZZI_COMMANDS
)

512 
idx
 = 0;

513 i‡(
≠p_guzzi_comm™d_rd
 =
idx
)

515 
	`mmsdbg
(
DL_ERROR
, "Error: command queue overflow\n");

518  
idx
;

519 
	}
}

521 
	$≠p_guzzi_comm™d_commô_wr_idx
(
idx
)

523 
≠p_guzzi_comm™d_wr
 = 
idx
;

524 
	}
}

527 
	$≠p_guzzi_comm™d_gë_rd_idx
()

529 
idx
 = 
≠p_guzzi_comm™d_rd
;

531 i‡(
≠p_guzzi_comm™d_wr
 =
idx
)

533 
	`mmsdbg
(
DL_ERROR
, "Error: command queue overflow\n");

536 
idx
++;

537 i‡(
idx
 =
MAX_APP_GUZZI_COMMANDS
)

538 
idx
 = 0;

540  
idx
;

541 
	}
}

543 
	$≠p_guzzi_comm™d_commô_rd_idx
(
idx
)

545 
≠p_guzzi_comm™d_rd
 = 
idx
;

546 
	}
}

549 
	$≠p_guzzi_comm™d_execuã
(
uöt8_t
 *
ö_comm™d
)

551 
idx
;

552 
idx
 = 
	`≠p_guzzi_comm™d_gë_wr_idx
();

553 i‡(
idx
 < 0)

556 
	`•i_comm™d_to_≠p_guzzi_comm™d
(&
≠p_guzzi_comm™ds
[
idx
], (*)
ö_comm™d
);

557 
	`≠p_guzzi_comm™d_commô_wr_idx
(
idx
);

558 
	`oßl_£m_po°
(
≠p_guzzi_comm™d_£m
);

559 
	}
}

562 
	$≠p_guzzi_comm™d_waô_timeout_usb
(*
≠p_¥iv©e
,

563 
≠p_guzzi_comm™d_ˇŒback_t
 *
ˇŒback
,

564 
uöt32_t
 
timeout_ms
)

566 
rd_idx
;

567 
îr
;

569 
	`≠p_guzzi_comm™d_dbg_≥ek
(
≠p_¥iv©e
, 
ˇŒback
);

571 
îr
 = 
	`oßl_£m_waô_timeout
(
≠p_guzzi_comm™d_£m
, 
timeout_ms
);

572 i‡(
îr
)

578 
rd_idx
 = 
	`≠p_guzzi_comm™d_gë_rd_idx
();

580 i‡(
rd_idx
 < 0)

583 
	`ˇŒback
(
≠p_¥iv©e
, &
≠p_guzzi_comm™ds
[
rd_idx
]);

585 
	`≠p_guzzi_comm™d_commô_rd_idx
(
rd_idx
);

587  
îr
;

588 
	}
}

595 
	$maö
(
¨gc
, **
¨gv
)

597 
	`UNUSED
(
¨gc
);

598 
	`UNUSED
(
¨gv
);

600 
	`vîsi⁄_öfo_öô
();

601 
	`πems_obje˘_£t_«me
(
RTEMS_SELF
, "main");

602 
	`öôSy°em
();

604 
	`oßl_öô
();

607 
	`dç§v_¸óã
(&
dç_§v_hndl
);

608 
	`dç§v_imp‹t_db
(

609 
dç_§v_hndl
,

610 
ext_dç_d©aba£
,

611 
ext_dç_d©aba£_íd
 - 
ext_dç_d©aba£


613 
	`PROFILE_INIT
(4096, 2, 
¥ofûe_ªady_cb
, 
NULL
);

615 
	`guzzi_∂©f‹m_öô
();

616 
	`guzzi_evít_globÆ_˘ª©e
();

618 
	`£ndOutCª©e
(&
£ndOut_öôCfg
);

620 
	`vút_cm_dëe˘
();

623 
	`≠p_guzzi_comm™d_•i_öô
();

625 
≠p_guzzi_comm™d_£m
 = 
	`oßl_£m_¸óã
(0);

627 
	`∂©f‹m_drv_powî_öô
();

628 
	`∂©f‹m_ˇm_Àd_1
(0);

631 
	`APP_GUZZI_COMMAND_WAIT_TIMEOUT
(

632 
NULL
,

633 
≠p_guzzi_comm™d_ˇŒback
,

636 #ifde‡
_REPORT_CPU_USAGE


637 
	`¶ìp
(3);

638 
	`πems_˝u_ußge_ªp‹t
();

639 
	`πems_˝u_ußge_ª£t
 ();

643 
	`∂©f‹m_ˇm_Àd_1
(1);

644 
	`∂©f‹m_drv_powî_deöô
();

646 
	`oßl_£m_de°roy
(
≠p_guzzi_comm™d_£m
);

648 
	}
}

	@cdk/apps/arch/ma2x5x/cdk_FLIC_1xIMX214/leon/sendout_config.c

20 
	~"mv_ty≥s.h
"

22 
	~"£ndOutApi.h
"

23 #ifde‡
OUTPUT_UNIT_IS_HDMI


24 
	~"LcdCEA1080p60.h
"

29 #ifde‡
OUTPUT_UNIT_IS_MIPI


30 
	#MIPI_TX_NUM_LANES
 2

	)

31 
	#MIPI_TX_CLOCK
 400

	)

32 
	#MIPI_TX_USE_IRQ
 1

	)

35 #ifde‡
OUTPUT_UNIT_IS_USB


36 #i‚de‡
DISABLE_LEON_DCACHE


37 
	#USBPUMP_MDK_CACHE_ENABLE
 1

	)

39 
	#USBPUMP_MDK_CACHE_ENABLE
 0

	)

45 
HdmiCfg_t
 
	ghdmiInôCfg
 =

47 #ifde‡
OUTPUT_UNIT_IS_HDMI


48 
NULL
,

49 
NULL
,

50 &
lcdS≥c1080p60


52 
NULL


56 
MùiCfg_t
 
	gmùiInôCfg
 =

58 #ifde‡
OUTPUT_UNIT_IS_MIPI


59 .
˘æNo
 = 
MIPI_CTRL_5
,

60 .
	gmss_devi˚
 = 
DRV_MSS_LCD
,

61 .
	gnum_œ√s
 = 
MIPI_TX_NUM_LANES
,

62 .
	gtx_˛ock
 = 
MIPI_TX_CLOCK
,

63 .
	gªf_˛ock_kHz
 = 12000,

64 .
	gu£_úq
 = 
MIPI_TX_USE_IRQ


66 
NULL


70 #ifde‡
OUTPUT_UNIT_IS_USB


71 
osDrvUsbPhyP¨am_t
 
	göôP¨am
 =

73 .
íabÀOtgBlock
 = 
USB_PHY_OTG_DISABLED
,

74 .
	gu£Exã∫ÆClock
 = 0,

75 .
	gfSñ
 = 
USB_REFCLK_MHZ
,

76 .
	gªfClkSñ0
 = 
USB_SUPER_SPEED_CLK_CONFIG
,

77 .
	gf‹˚HsO∆y
 = 
USB_PHY_HS_ONLY_OFF


80 
USBPUMP_APPLICATION_RTEMS_CONFIGURATION
 
	gsg_D©aPump_AµC⁄fig
 =

81 
USBPUMP_APPLICATION_RTEMS_CONFIGURATION_INIT_V1
(

83  
NULL
,

88  
NULL
,

89  
NULL
,

90  
USBPUMP_MDK_CACHE_ENABLE
,

91  
UDMASK_ANY
 | 
UDMASK_ERRORS
 );

93 
≠p_guzzi_comm™d_execuã
(
uöt8_t
 *
ö_comm™d
);

97 
UsbCfg_t
 
	gusbInôCfg
 =

99 #ifde‡
OUTPUT_UNIT_IS_USB


100 &
öôP¨am
,

101 &
sg_D©aPump_AµC⁄fig
,

102 &
≠p_guzzi_comm™d_execuã


104 
NULL


108 
SídOutInôCfg_t
 
	g£ndOut_öôCfg
 =

110 &
hdmiInôCfg
,

111 &
mùiInôCfg
,

112 &
usbInôCfg


	@cdk/apps/arch/ma2x5x/cdk_FLIC_1xIMX214/leon/sendout_config.h

16 #i‚de‡
SENDOUT_CONFIG_H


17 
	#SENDOUT_CONFIG_H


	)

22 
	~"mv_ty≥s.h
"

24 #ifde‡
OUTPUT_UNIT_IS_HDMI


25 #ifde‡
MV0212


26 
	~"MV0212.h
"

28 
	~"Bﬂrd182Api.h
"

30 
	~"LcdApi.h
"

31 
	~"DrvI2cMa°î.h
"

32 
	~"DrvADV7513.h
"

35 #ifde‡
OUTPUT_UNIT_IS_MIPI


36 
	~<DrvMùiDeföes.h
>

37 
	~"DrvMss.h
"

40 #ifde‡
OUTPUT_UNIT_IS_USB


41 
	~"OsDrvUsbPhy.h
"

42 
	~"usbpumpdebug.h
"

43 
	~"usbpump_≠∂iˇti⁄_πems_≠i.h
"

50 #i‚de‡
APP_CONFIGURATION


51 #w¨nög 
SEND
 
OUT
: 
USE
 
DEFAULT
 
DEFINITIONS


53 #ifde‡
OUTPUT_UNIT_IS_HDMI


55 
	#SEND_OUT_MAX_WIDTH
 (4300)

	)

56 
	#SEND_OUT_MAX_HEIGHT
 (3200)

	)

60 #i‡
deföed
(
OUTPUT_UNIT_IS_USB
Ë|| deföed(
OUTPUT_UNIT_IS_MIPI
)

63 
	#SEND_OUT_MAX_WIDTH
 (4300)

	)

64 
	#SEND_OUT_MAX_HEIGHT
 (3200)

	)

66 
	#USE_STATIC_HEADER


	)

67 
	#SEND_OUT_HEADER_HEIGHT
 (2)

	)

71 #ifde‡
OUTPUT_UNIT_IS_HDMI


72 
	#SEND_OUT_MAX_WIDTH
 (3842)

	)

73 
	#SEND_OUT_MAX_HEIGHT
 (2200)

	)

76 #i‡
deföed
(
OUTPUT_UNIT_IS_USB
Ë|| deföed(
OUTPUT_UNIT_IS_MIPI
)

79 
	#SEND_OUT_MAX_WIDTH
 (4300)

	)

80 
	#SEND_OUT_MAX_HEIGHT
 (3200)

	)

82 
	#USE_STATIC_HEADER


	)

83 
	#SEND_OUT_HEADER_HEIGHT
 (2)

	)

90 #ifde‡
OUTPUT_UNIT_IS_HDMI


91 
ADV7513C⁄tfigMode_t
 
	madvCfgMode
;

92 
I2CM_Devi˚
 **
	mi2c_dev_hndl
;

93 
LCDDi•œyCfg
 *
	mlcdCfg
;

95 *
	mdummy
;

97 } 
	tHdmiCfg_t
;

101 #ifde‡
OUTPUT_UNIT_IS_MIPI


102 
eDrvMùiCålNo
 
	m˘æNo
;

103 
drvMssDevi˚Ty≥
 
	mmss_devi˚
;

104 
	mnum_œ√s
;

105 
	mtx_˛ock
;

106 
u32
 
	mªf_˛ock_kHz
;

107 
	mu£_úq
;

109 *
	mdummy
;

111 } 
	tMùiCfg_t
;

114 (*
	tUsbSíd_I≈utCålCÆlback_Ty≥
)(
	tuöt8_t
 *);

118 #ifde‡
OUTPUT_UNIT_IS_USB


119 
osDrvUsbPhyP¨am_t
 *
phyP¨amInô
;

120 
USBPUMP_APPLICATION_RTEMS_CONFIGURATION
 *
d©aPumpCfgInô
;

121 
UsbSíd_I≈utCålCÆlback_Ty≥
 
cb_fun˘i⁄
;

123 *
dummy
;

125 } 
	tUsbCfg_t
;

	@cdk/apps/arch/ma2x5x/cdk_FLIC_1xIMX214_2xIMX208/leon/AppSpecInterface.h

8 #i‚de‡
APPS_GUZZISPI_MV182_A208M_B208M_C208M_MA2150_LEON_APPSPECINTERFACE_H_


9 
	#APPS_GUZZISPI_MV182_A208M_B208M_C208M_MA2150_LEON_APPSPECINTERFACE_H_


	)

11 
	~"hÆ/hÆ_ˇmîa_moduÀ/h©_cm_drivî.h
"

14 
	~<utûs/mms_debug.h
>

15 
	~<utûs/¥ofûe/¥ofûe.h
>

16 
	~<oßl/oßl_°dlib.h
>

17 
	~<oßl/oßl_muãx.h
>

18 
	~<oßl/oßl_time.h
>

19 
	~<oßl/oßl_°rög.h
>

21 
	~"£ndOutApi.h
"

22 
	~"PùeI•3Cams.h
"

24 #i‚de‡
PIPE_CREATE


25 
	#PIPE_CREATE
 
pùe3CamsCª©e


	)

27 #i‚de‡
PIPE_DESTROY


28 
	#PIPE_DESTROY
 
pùe3CamsDe°roy


	)

31 
	#APP_SPEC_DEFS01
 
	`mmsdbg_deföe_v¨übÀ
(
vdl_ic
, 
DL_DEFAULT
, 0, "vdl_ic", "GuzzòIC.");

	)

34 #i‚de‡
MMSDEBUGLEVEL


35 
	#MMSDEBUGLEVEL
 
	`mmsdbg_u£_v¨übÀ
(
vdl_ic
)

	)

38 
	#INSTANCES_COUNT_MAX
 
MAX_NR_OF_CAMS


	)

40 
	#APP_DBG_ERROR
 
mmsdbg


	)

43 
ölöe
 
	$gëSrcLimôs
(
uöt32_t
 
§cId
, 
icSour˚Sëup
* 
§cSë
) {

44 
h©_ˇmîa_limôs_t
 
limôs
;

45 i‡–0 =
	`hai_cm_drivî_gë_ˇmîa_limôs
(
§cId
, &
limôs
)) {

46 
§cSë
->
maxWidth
 = 
limôs
.maxWidth;

47 
§cSë
->
maxHeight
 = 
limôs
.maxHeight;

48 
§cSë
->
maxPixñs
 = 
limôs
.maxPixels;

49 
§cSë
->
maxBµ
 = 
limôs
.maxBpp;

53 
	}
}

55 
	#UPDATE_SRC_LIMITS
(
SRC_ID
,
RETERN_VAL
Ë
	`gëSrcLimôs
(SRC_ID,RETERN_VAL)

	)

57 
ölöe
 
	$doPröt
(
a
, 
b
, 
c
) {

58 
	`¥ötf
("lg: %d, %d, %d \n", 
a
, 
b
, 
c
);

60 
	}
}

61 
	#_PROFILE_ADD
(
ID
, 
V1
, 
V2
Ë
	`PROFILE_ADD
(ID, V1, V2)

	)

	@cdk/apps/arch/ma2x5x/cdk_FLIC_1xIMX214_2xIMX208/leon/PipeIsp3Cams.cpp

1 
	~<Opùe.h
>

3 
	~<Flic.h
>

4 
	~<MemAŒoˇt‹.h
>

6 
	~"PlgSour˚.h
"

7 
	~"PlgI•Cål.h
"

8 
	~"PlgI•Proc.h
"

9 
	~"PlgI•M⁄o.h
"

10 
	~"PlgOutItf.h
"

12 
	~"PùeI•3Cams.h
"

13 
	~"sched.h
"

15 
PlgSour˚
 
	g∂gSrc
 [
APP_NR_OF_CAMS
] 
SECTION
(".cmx_direct.data");

16 
PlgI•Cål
 *
∂gI•Cål
 
SECTION
(".cmx_direct.data");

18 
PlgI•Proc
 
	g∂gI•C
 [
APP_NR_OF_CAMS_COLOR
] 
SECTION
(".cmx_direct.data");

19 
PlgI•M⁄o
 
	g∂gI•M
 [
APP_NR_OF_CAMS_MONO
] 
SECTION
(".cmx_direct.data");

22 
	gPlgPoﬁ
<
	gImgFøme
> 
	g∂gPoﬁSrc
[
APP_NR_OF_CAMS
] 
SECTION
(".cmx_direct.data");

23 
	gPlgPoﬁ
<
	gImgFøme
> 
	g∂gPoﬁI•O
[
APP_NR_OF_CAMS
] 
SECTION
(".cmx_direct.data");

26 
PlgOutItf
 
∂gOut
 
SECTION
(".cmx_direct.data");

28 
PlgI•Proc
 
	g∂gI•Sé
 [
APP_NR_OF_CAMS_COLOR
] 
SECTION
(".cmx_direct.data");

29 
	gPlgPoﬁ
<
	gImgFøme
> 
	g∂gPoﬁI•Sé
[
APP_NR_OF_CAMS_COLOR
] 
SECTION
(".cmx_direct.data");

31 
Pùñöe
 
SECTION
(".cmx_dúe˘.d©a"Ë
p
(20);

38 
	$pùe3CamsCª©e
(
GëSrcSzLimôs
 
gëSrcSzLimôs
)

40 
uöt32_t
 
c
 = 0;

42 
	`OpùeRe£t
();

44 
RgnAŒoc
.
	`Cª©e
(
RgnBuff
, 
DEF_POOL_SZ
);

45 
∂gI•Cål
 = 
PlgI•Cål
::
	`ö°™˚
();

46 
∂gI•Cål
->
	`Cª©e
();

47 
∂gI•Cål
->
schP¨am
.
sched_¥i‹ôy
 = 
CUSTOM_FLIC_PRIORITY
;

48 
∂gOut
 .
	`Cª©e
();

49 
∂gOut
.
schP¨am
.
sched_¥i‹ôy
 = 
CUSTOM_FLIC_PRIORITY
;

52 
c
 = (
uöt32_t
)
IC_SOURCE_0
; c < 
APP_NR_OF_CAMS_COLOR
; c++) {

53 
∂gSrc
[
c
] .
	`Cª©e
((
icSour˚In°™˚
)c);

54 
∂gSrc
[
c
].
schP¨am
.
sched_¥i‹ôy
 = 
CUSTOM_FLIC_PRIORITY
;

55 
∂gSrc
[
c
] .
outFmt
 = 
SIPP_FMT_16BIT
;

56 
icSour˚Sëup
 
§cSë
;

57 
	`as£π
((0 =
	`gëSrcSzLimôs
(
c
, &
§cSë
)) && "CameraÇot connected, AppÉxpect 3 cams");

58 
icSour˚Sëup
* 
§cLimôs
 = &
§cSë
;

59 
§cLimôs
->
maxBµ
 = 16;

60 
∂gPoﬁSrc
[
c
].
	`Cª©e
(&
RgnAŒoc
, 
N_POOL_FRMS
, ((
§cLimôs
->
maxPixñs
 * srcLimôs->
maxBµ
)) >> 3);

61 
∂gPoﬁI•O
[
c
].
	`Cª©e
(&
RgnAŒoc
, 
N_POOL_FRMS
, (
§cLimôs
->
maxPixñs
 * 3)>>1);

62 
∂gPoﬁI•Sé
[
c
].
	`Cª©e
(&
RgnAŒoc
, 
N_POOL_FRMS_STL
, (
§cLimôs
->
maxPixñs
 * 3)>>1);

64 
∂gI•C
[
c
].
	`Cª©e
(c, 
§cSë
.
≠pS≥cificInfo
);

65 
∂gI•C
[
c
].
schP¨am
.
sched_¥i‹ôy
 = 
CUSTOM_FLIC_PRIORITY
;

66 
∂gI•Sé
[
c
].
	`Cª©e
(c+
APP_NR_OF_CAMS
, 0);

67 
∂gI•Sé
[
c
].
schP¨am
.
sched_¥i‹ôy
 = 
CUSTOM_FLIC_PRIORITY
;

71 
c
 = (
uöt32_t
)
APP_NR_OF_CAMS_COLOR
; c < (APP_NR_OF_CAMS_COLOR+
APP_NR_OF_CAMS_MONO
); c++) {

72 
∂gSrc
[
c
] .
	`Cª©e
((
icSour˚In°™˚
)c);

73 
∂gSrc
[
c
].
schP¨am
.
sched_¥i‹ôy
 = 
CUSTOM_FLIC_PRIORITY
;

74 
∂gSrc
[
c
] .
outFmt
 = 
SIPP_FMT_16BIT
;

75 
icSour˚Sëup
 
§cSë
;

76 
	`as£π
((0 =
	`gëSrcSzLimôs
(
c
, &
§cSë
)) && "CameraÇot connected, AppÉxpect 3 cams");

77 
icSour˚Sëup
* 
§cLimôs
 = &
§cSë
;

78 
§cLimôs
->
maxBµ
 = 16;

79 
∂gPoﬁSrc
[
c
].
	`Cª©e
(&
RgnAŒoc
, 
N_POOL_FRMS
, ((
§cLimôs
->
maxPixñs
 * srcLimôs->
maxBµ
)) >> 3);

80 
∂gPoﬁI•O
[
c
].
	`Cª©e
(&
RgnAŒoc
, 
N_POOL_FRMS
, (
§cLimôs
->
maxPixñs
 * 3)>>1);

81 
∂gI•M
[
c
-
APP_NR_OF_CAMS_COLOR
].
	`Cª©e
(c, 0);

82 
∂gI•M
[
c
-
APP_NR_OF_CAMS_COLOR
].
schP¨am
.
sched_¥i‹ôy
 = 
CUSTOM_FLIC_PRIORITY
;

86 
p
.
	`Add
(
∂gI•Cål
);

87 
p
.
	`Add
(&
∂gOut
);

91 
c
 = (
uöt32_t
)
IC_SOURCE_0
; c < 
APP_NR_OF_CAMS_COLOR
; c++) {

92 
p
.
	`Add
(&
∂gSrc
 [
c
]);

93 
p
.
	`Add
(&
∂gI•C
 [
c
]);

94 
p
.
	`Add
(&
∂gI•Sé
 [
c
]);

95 
p
.
	`Add
(&
∂gPoﬁSrc
 [
c
]);

96 
p
.
	`Add
(&
∂gPoﬁI•O
 [
c
]);

97 
p
.
	`Add
(&
∂gPoﬁI•Sé
[
c
]);

101 
c
 = (
uöt32_t
)
APP_NR_OF_CAMS_COLOR
; c < (APP_NR_OF_CAMS_COLOR+
APP_NR_OF_CAMS_MONO
); c++) {

102 
p
.
	`Add
(&
∂gSrc
 [
c
]);

103 
p
.
	`Add
(&
∂gI•M
 [
c
-
APP_NR_OF_CAMS_COLOR
]);

104 
p
.
	`Add
(&
∂gPoﬁSrc
 [
c
]);

105 
p
.
	`Add
(&
∂gPoﬁI•O
 [
c
]);

109 
c
 = 0; c < 
APP_NR_OF_CAMS_COLOR
; c++) {

110 
∂gPoﬁSrc
[
c
].
out
 .
	`Lök
(&
∂gSrc
[c].
öO
);

111 
∂gSrc
[
c
] .
outComm™d
 .
	`Lök
(&
∂gI•Cål
->
öCålRe•⁄£
);

112 
∂gI•Cål
 -> 
outSrcComm™d
[
c
].
	`Lök
(&
∂gSrc
[c].
öComm™d
);

113 
∂gPoﬁI•O
[
c
].
out
 .
	`Lök
(&
∂gI•C
[c].
öO
);

114 
∂gSrc
[
c
] .
out
 .
	`Lök
(&
∂gI•C
[c].
öI
);

115 
∂gI•C
[
c
] .
outF
 .
	`Lök
(&
∂gOut
.
ö
 );

116 
∂gI•C
[
c
] .
outE
 .
	`Lök
(&
∂gI•Cål
->
öCålRe•⁄£
);

118 
∂gPoﬁI•Sé
[
c
].
out
 .
	`Lök
(&
∂gI•Sé
[c].
öO
);

119 
∂gSrc
[
c
] .
outSé
 .
	`Lök
(&
∂gI•Sé
[c].
öI
);

120 
∂gI•Sé
[
c
] .
outF
 .
	`Lök
(&
∂gOut
.
ö
 );

121 
∂gI•Sé
[
c
] .
outE
 .
	`Lök
(&
∂gI•Cål
->
öCålRe•⁄£
);

126 
c
 = (
uöt32_t
)
APP_NR_OF_CAMS_COLOR
; c < (APP_NR_OF_CAMS_COLOR+
APP_NR_OF_CAMS_MONO
); c++) {

127 
∂gPoﬁSrc
[
c
].
out
 .
	`Lök
(&
∂gSrc
[c].
öO
);

128 
∂gSrc
[
c
] .
outComm™d
 .
	`Lök
(&
∂gI•Cål
->
öCålRe•⁄£
);

129 
∂gI•Cål
 -> 
outSrcComm™d
[
c
].
	`Lök
(&
∂gSrc
[c].
öComm™d
);

130 
∂gPoﬁI•O
[
c
].
out
 .
	`Lök
(&
∂gI•M
[c-
APP_NR_OF_CAMS_COLOR
].
öO
);

131 
∂gSrc
[
c
] .
out
 .
	`Lök
(&
∂gI•M
[c-
APP_NR_OF_CAMS_COLOR
].
öI
);

132 
∂gI•M
[
c
-
APP_NR_OF_CAMS_COLOR
] .
outF
 .
	`Lök
(&
∂gOut
.
ö
 );

133 
∂gI•M
[
c
-
APP_NR_OF_CAMS_COLOR
] .
outE
 .
	`Lök
(&
∂gI•Cål
->
öCålRe•⁄£
);

136 
∂gOut
.
outCmd
.
	`Lök
(&
∂gI•Cål
->
öCålRe•⁄£
);

137 
∂gI•Cål
->
outOutCmd
.
	`Lök
(&
∂gOut
.
öCmd
);

139 
p
.
	`Sèπ
();

140 
	}
}

142 
	$pùe3CamsDe°roy
() {

143 
p
.
	`St›
();

144 
p
.
	`Waô
();

145 
p
.
	`Dñëe
();

146 
RgnAŒoc
.
	`Dñëe
();

147 
	}
}

	@cdk/apps/arch/ma2x5x/cdk_FLIC_1xIMX214_2xIMX208/leon/PipeIsp3Cams.h

12 #i‚de‡
_PIPE_ISP_3CAMS_H


13 
	#_PIPE_ISP_3CAMS_H


	)

15 #ifde‡
__˝lu•lus


19 #i‚de‡
CUSTOM_FLIC_PRIORITY


20 
	#CUSTOM_FLIC_PRIORITY
 211

	)

23 #i‚de‡
N_POOL_FRMS


24 
	#N_POOL_FRMS
 3

	)

27 #i‚de‡
N_POOL_FRMS_SRC


28 
	#N_POOL_FRMS_SRC
 4

	)

31 #i‚de‡
N_POOL_FRMS_STL


32 
	#N_POOL_FRMS_STL
 1

	)

37 
	#APP_NR_OF_CAMS
 3

	)

38 
	#APP_NR_OF_CAMS_COLOR
 1

	)

39 
	#APP_NR_OF_CAMS_MONO
 (
APP_NR_OF_CAMS
 - 
APP_NR_OF_CAMS_COLOR
)

	)

42 (*
GëSrcSzLimôs
)(
	tuöt32_t
 
	t§cId
, 
	ticSour˚Sëup
* 
	t§cSë
);

45 
pùe3CamsCª©e
(
GëSrcSzLimôs
 
gëSrcSzLimôs
);

48 
pùe3CamsDe°roy
();

51 #ifde‡
__˝lu•lus


	@cdk/apps/arch/ma2x5x/cdk_FLIC_1xIMX214_2xIMX208/leon/app_guzzi_command.h

35 #i‚de‡
_APP_GUZZI_COMMAND_H


36 
	#_APP_GUZZI_COMMAND_H


	)

38 #ifde‡
__˝lu•lus


42 
	~<°döt.h
>

44 
	#MAX_DYNAMIC_DTP_PAYLOAD_SIZE
 (64)

	)

47 
APP_GUZZI_COMMAND__NOP
,

48 
APP_GUZZI_COMMAND__CAM_START
,

49 
APP_GUZZI_COMMAND__CAM_STOP
,

50 
APP_GUZZI_COMMAND__CAM_CAPTURE
,

51 
APP_GUZZI_COMMAND__CAM_LENS_MOVE
,

52 
APP_GUZZI_COMMAND__CAM_AF_TRIGGER
,

53 
APP_GUZZI_COMMAND__CAM_AE_MANUAL
,

54 
APP_GUZZI_COMMAND__CAM_AE_AUTO
,

55 
APP_GUZZI_COMMAND__CAM_AWB_MODE
,

56 
APP_GUZZI_COMMAND__CAM_SCENE_MODE
,

57 
APP_GUZZI_COMMAND__CAM_ANTIBANDING_MODE
,

58 
APP_GUZZI_COMMAND__CAM_AE_EXPOSURE_COMPENSATION
,

59 
°h_ñ£2
,

60 
APP_GUZZI_COMMAND__CAM_AE_LOCK
,

61 
APP_GUZZI_COMMAND__CAM_AE_TARGET_FPS_RANGE
,

62 
°h_ñ£3
,

63 
APP_GUZZI_COMMAND__CAM_AWB_LOCK
,

64 
APP_GUZZI_COMMAND__CAM_CAPTURE_INTRENT
,

65 
APP_GUZZI_COMMAND__CAM_CONTROL_MODE
,

66 
°h_ñ£4
,

67 
°h_ñ£5
,

68 
APP_GUZZI_COMMAND__CAM_FRAME_DURATION
,

69 
°h_ñ£7
,

70 
APP_GUZZI_COMMAND__CAM_SENSITIVITY
,

71 
APP_GUZZI_COMMAND__CAM_EFFECT_MODE
,

72 
°h_ñ£8
,

73 
APP_GUZZI_COMMAND__CAM_AF_MODE
,

74 
APP_GUZZI_COMMAND__CAM_NOISE_REDUCTION_STRENGTH
,

75 
APP_GUZZI_COMMAND__CAM_SATURATION
,

76 
°h_ñ£9
,

77 
°h_ñ£10
,

78 
APP_GUZZI_COMMAND__CAM_BRIGHTNESS
,

79 
°h_ñ£11
,

80 
APP_GUZZI_COMMAND__CAM_FORMAT
,

81 
APP_GUZZI_COMMAND__CAM_RESOLUTION
,

82 
APP_GUZZI_COMMAND__CAM_SHARPNESS
,

83 
APP_GUZZI_COMMAND__LIVE_TUNING_UNLOCK
,

84 
APP_GUZZI_COMMAND__LIVE_TUNING_APPLY
,

85 
APP_GUZZI_COMMAND__OUTPUT_CONTROL
,

86 
APP_GUZZI_COMMAND__MAX


87 } 
	t≠p_guzzi_comm™d_id_t
;

90 
≠p_guzzi_comm™d_id_t
 
id
;

93 
uöt32_t
 
id
;

96 
uöt32_t
 
pos
;

97 } 
Àns_move
;

99 
uöt32_t
 
exp_us
;

100 
uöt32_t
 
£nsôivôy_iso
;

101 
uöt32_t
 
‰ame_duøti⁄_us
;

102 } 
´_m™uÆ
;

104 
uöt32_t
 
mode
;

105 } 
awb_mode
;

107 
uöt32_t
 
ty≥
;

108 } 
s˚√_mode
;

110 
uöt32_t
 
ty≥
;

111 } 
™tib™dög_mode
;

113 
uöt32_t
 
ty≥
;

114 } 
´_lock_mode
;

116 
uöt32_t
 
mö_Âs
;

117 
uöt32_t
 
max_Âs
;

118 } 
´_èrgë_Âs_ønge
;

120 
uöt32_t
 
ty≥
;

121 } 
awb_lock_c⁄åﬁ
;

123 
uöt32_t
 
mode
;

124 } 
ˇ±uª_öã¡
;

126 
uöt32_t
 
ty≥
;

127 } 
c⁄åﬁ_mode
;

129 
uöt64_t
 
vÆ
;

130 } 
‰ame_duøti⁄
;

132 
uöt32_t
 
vÆ
;

133 } 
exposuª_com≥nßti⁄
;

135 
uöt32_t
 
iso_vÆ
;

136 } 
£nsôivôy
;

138 
uöt32_t
 
ty≥
;

139 } 
ef„˘_mode
;

141 
uöt32_t
 
ty≥
;

142 } 
af_mode
;

144 
uöt32_t
 
vÆ
;

145 } 
noi£_ªdu˘i⁄_°ªngth
;

147 
uöt32_t
 
vÆ
;

148 } 
ßtuøti⁄
;

150 
uöt32_t
 
vÆ
;

151 } 
brighäess
;

153 
uöt32_t
 
vÆ
;

154 } 
f‹m©
;

156 
uöt32_t
 
width
;

157 
uöt32_t
 
height
;

158 } 
ªsﬁuti⁄
;

160 
uöt32_t
 
vÆ
;

161 } 
sh¨≤ess
;

163 } 
ˇm
;

165 
uöt32_t
 
size
;

166 
uöt32_t
 
off£t
;

167 
uöt8_t
 
d©a
[
MAX_DYNAMIC_DTP_PAYLOAD_SIZE
];

168 } 
live_tunög
;

170 
uöt32_t
 
ˇmîa_í_bô_mask
;

171 
uöt32_t
 
‰ame_ty≥_í_bô_mask
;

172 
uöt32_t
 
‰ame_f‹m©_í_bô_mask
;

173 } 
ouçut_c⁄åﬁ
;

175 } 
	t≠p_guzzi_comm™d_t
;

177 
	t≠p_guzzi_comm™d_ˇŒback_t
(

178 *
	t≠p_¥iv©e
,

179 
	t≠p_guzzi_comm™d_t
 *
	tcomm™d


182 
≠p_guzzi_comm™d_≥ek
(

183 *
≠p_¥iv©e
,

184 
≠p_guzzi_comm™d_ˇŒback_t
 *
ˇŒback


186 
≠p_guzzi_comm™d_waô
(

187 *
≠p_¥iv©e
,

188 
≠p_guzzi_comm™d_ˇŒback_t
 *
ˇŒback


190 
≠p_guzzi_comm™d_waô_timeout
(

191 *
≠p_¥iv©e
,

192 
≠p_guzzi_comm™d_ˇŒback_t
 *
ˇŒback
,

193 
uöt32_t
 
timeout_ms


196 #ifde‡
__˝lu•lus


	@cdk/apps/arch/ma2x5x/cdk_FLIC_1xIMX214_2xIMX208/leon/app_guzzi_command_dbg.c

35 
	~<oßl/oßl_time.h
>

36 
	~<swcLe⁄Utûs.h
>

37 
	~<≠p_guzzi_comm™d.h
>

38 
	~"≠p_guzzi_comm™d_dbg.h
"

40 #i‚de‡
APP_GUZZI_COMMAND_DBG_PROBE_INTERVAL_MS


41 
	#APP_GUZZI_COMMAND_DBG_PROBE_INTERVAL_MS
 10

	)

44 
uöt32_t
 
	g≠p_guzzi_comm™d_dbg_id
 = (uöt32_t)
APP_GUZZI_COMMAND__NOP
;

45 
uöt32_t
 
	g≠p_guzzi_comm™d_dbg_ˇm_id
 = 0;

46 
uöt32_t
 
	g≠p_guzzi_comm™d_dbg_ˇm_Àns_move_pos
 = 0;

47 
uöt32_t
 
	g≠p_guzzi_comm™d_dbg_ˇm_´_m™uÆ_exp_us
 = 0;

48 
uöt32_t
 
	g≠p_guzzi_comm™d_dbg_ˇm_´_m™uÆ_£nsôivôy_iso
 = 0;

49 
uöt32_t
 
	g≠p_guzzi_comm™d_dbg_ˇm_´_m™uÆ_‰ame_duøti⁄_us
 = 0;

50 
uöt32_t
 
	g≠p_guzzi_comm™d_dbg_ˇm_awb_mode
 = 0;

51 
uöt32_t
 
	g≠p_guzzi_comm™d_dbg_ˇm_™tib™dög_mode
 = 0;

52 
uöt32_t
 
	g≠p_guzzi_comm™d_dbg_ˇm_´_lock_c⁄åﬁ
 = 0;

53 
uöt32_t
 
	g≠p_guzzi_comm™d_dbg_ˇm_´_èrgë_Âs_mö
 = 0;

54 
uöt32_t
 
	g≠p_guzzi_comm™d_dbg_ˇm_´_èrgë_Âs_max
 = 0;

55 
uöt32_t
 
	g≠p_guzzi_comm™d_dbg_ˇm_awb_lock_c⁄åﬁ
 = 0;

56 
uöt32_t
 
	g≠p_guzzi_comm™d_dbg_ˇm_ˇ±uª_öã¡
 = 0;

57 
uöt32_t
 
	g≠p_guzzi_comm™d_dbg_ˇm_c⁄åﬁ
 = 0;

58 
uöt32_t
 
	g≠p_guzzi_comm™d_dbg_ˇm_exp_com≥nßti⁄
 = 0;

59 
uöt32_t
 
	g≠p_guzzi_comm™d_dbg_ˇm_iso
 = 0;

60 
uöt32_t
 
	g≠p_guzzi_comm™d_dbg_ˇm_ef„˘_mode
 = 0;

61 
uöt64_t
 
	g≠p_guzzi_comm™d_dbg_ˇm_‰ame_duøti⁄
 = 0;

63 
	~<utûs/mms_debug.h
>

65 
mmsdbg_deföe_v¨übÀ
(

66 
vdl_≠p_guzzi_comm™d_dbg
,

67 
DL_DEFAULT
,

72 
	#MMSDEBUGLEVEL
 
	`mmsdbg_u£_v¨übÀ
(
vdl_≠p_guzzi_comm™d_dbg
)

	)

74 
	#U
(
V
Ë
	`swcLe⁄RódNoCacheU32
(
	`unˇched
((
uöt32_t
)&(V)))

	)

75 
ölöe
 
uöt32_t
 
	$unˇched
(
uöt32_t
 
v
)

77 i‡((0x70000000 <
v
) && (v <= 0x70200000)) {

78  
v
 | 0x80000000;

79 } i‡((0x80000000 <
v
) && (v <= 0x88000000)) {

80  
v
 | 0x40000000;

82  
v
;

83 
	}
}

85 
≠p_guzzi_comm™d_t
 *
	$≠p_guzzi_comm™d_dbg_fûl
(

86 
≠p_guzzi_comm™d_t
 *
comm™d


89 (
≠p_guzzi_comm™d_id_t
)
	`U
(
≠p_guzzi_comm™d_dbg_id
)) {

90 
APP_GUZZI_COMMAND__CAM_START
:

91 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_START
;

93 
APP_GUZZI_COMMAND__CAM_STOP
:

94 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_STOP
;

96 
APP_GUZZI_COMMAND__CAM_CAPTURE
:

97 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_CAPTURE
;

99 
APP_GUZZI_COMMAND__CAM_LENS_MOVE
:

100 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_LENS_MOVE
;

101 
comm™d
->
ˇm
.
Àns_move
.
pos
 =

102 
	`U
(
≠p_guzzi_comm™d_dbg_ˇm_Àns_move_pos
);

104 
APP_GUZZI_COMMAND__CAM_AF_TRIGGER
:

105 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_AF_TRIGGER
;

107 
APP_GUZZI_COMMAND__CAM_AE_MANUAL
:

108 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_AE_MANUAL
;

109 
comm™d
->
ˇm
.
´_m™uÆ
.
exp_us
 =

110 
	`U
(
≠p_guzzi_comm™d_dbg_ˇm_´_m™uÆ_exp_us
);

111 
comm™d
->
ˇm
.
´_m™uÆ
.
£nsôivôy_iso
 =

112 
	`U
(
≠p_guzzi_comm™d_dbg_ˇm_´_m™uÆ_£nsôivôy_iso
);

113 
comm™d
->
ˇm
.
´_m™uÆ
.
‰ame_duøti⁄_us
 =

114 
	`U
(
≠p_guzzi_comm™d_dbg_ˇm_´_m™uÆ_‰ame_duøti⁄_us
);

116 
APP_GUZZI_COMMAND__CAM_AE_AUTO
:

117 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_AE_AUTO
;

119 
APP_GUZZI_COMMAND__CAM_AWB_MODE
:

120 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_AWB_MODE
;

121 
comm™d
->
ˇm
.
awb_mode
.
mode
 =

122 
	`U
(
≠p_guzzi_comm™d_dbg_ˇm_awb_mode
);

124 
APP_GUZZI_COMMAND__CAM_ANTIBANDING_MODE
:

125 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_ANTIBANDING_MODE
;

126 
comm™d
->
ˇm
.
™tib™dög_mode
.
ty≥
 =

127 
	`U
(
≠p_guzzi_comm™d_dbg_ˇm_™tib™dög_mode
);

129 
APP_GUZZI_COMMAND__CAM_AE_LOCK
:

130 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_AE_LOCK
;

131 
comm™d
->
ˇm
.
´_lock_mode
.
ty≥
 =

132 
	`U
(
≠p_guzzi_comm™d_dbg_ˇm_´_lock_c⁄åﬁ
);

134 
APP_GUZZI_COMMAND__CAM_AE_TARGET_FPS_RANGE
:

135 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_AE_TARGET_FPS_RANGE
;

136 
comm™d
->
ˇm
.
´_èrgë_Âs_ønge
.
mö_Âs
 =

137 
	`U
(
≠p_guzzi_comm™d_dbg_ˇm_´_èrgë_Âs_mö
);

138 
comm™d
->
ˇm
.
´_èrgë_Âs_ønge
.
max_Âs
 =

139 
	`U
(
≠p_guzzi_comm™d_dbg_ˇm_´_èrgë_Âs_max
);

141 
APP_GUZZI_COMMAND__CAM_AWB_LOCK
:

142 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_AWB_LOCK
;

143 
comm™d
->
ˇm
.
awb_lock_c⁄åﬁ
.
ty≥
 =

144 
	`U
(
≠p_guzzi_comm™d_dbg_ˇm_awb_lock_c⁄åﬁ
);

146 
APP_GUZZI_COMMAND__CAM_CAPTURE_INTRENT
:

147 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_CAPTURE_INTRENT
;

148 
comm™d
->
ˇm
.
ˇ±uª_öã¡
.
mode
 =

149 
	`U
(
≠p_guzzi_comm™d_dbg_ˇm_ˇ±uª_öã¡
);

151 
APP_GUZZI_COMMAND__CAM_CONTROL_MODE
:

152 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_CONTROL_MODE
;

153 
comm™d
->
ˇm
.
c⁄åﬁ_mode
.
ty≥
 =

154 
	`U
(
≠p_guzzi_comm™d_dbg_ˇm_c⁄åﬁ
);

156 
APP_GUZZI_COMMAND__CAM_FRAME_DURATION
:

157 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_FRAME_DURATION
;

158 
comm™d
->
ˇm
.
‰ame_duøti⁄
.
vÆ
 =

159 
	`U
(
≠p_guzzi_comm™d_dbg_ˇm_c⁄åﬁ
);

161 
APP_GUZZI_COMMAND__CAM_AE_EXPOSURE_COMPENSATION
:

162 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_AE_EXPOSURE_COMPENSATION
;

163 
comm™d
->
ˇm
.
exposuª_com≥nßti⁄
.
vÆ
 =

164 
	`U
(
≠p_guzzi_comm™d_dbg_ˇm_exp_com≥nßti⁄
);

166 
APP_GUZZI_COMMAND__CAM_SENSITIVITY
:

167 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_SENSITIVITY
;

168 
comm™d
->
ˇm
.
£nsôivôy
.
iso_vÆ
 =

169 
	`U
(
≠p_guzzi_comm™d_dbg_ˇm_iso
);

171 
APP_GUZZI_COMMAND__CAM_EFFECT_MODE
:

172 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_EFFECT_MODE
;

173 
comm™d
->
ˇm
.
ef„˘_mode
.
ty≥
 =

174 
	`U
(
≠p_guzzi_comm™d_dbg_ˇm_ef„˘_mode
);

177 
	`mmsdbg
(

178 
DL_ERROR
,

180 
	`U
(
≠p_guzzi_comm™d_dbg_id
)

182 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__NOP
;

184 
comm™d
->
ˇm
.
id
 = 
	`U
(
≠p_guzzi_comm™d_dbg_ˇm_id
);

186  
comm™d
;

187 
	}
}

189 
	$≠p_guzzi_comm™d_dbg_≥ek
(

190 *
≠p_¥iv©e
,

191 
≠p_guzzi_comm™d_ˇŒback_t
 *
ˇŒback


194 
≠p_guzzi_comm™d_t
 
comm™d
;

196 i‡(
	`U
(
≠p_guzzi_comm™d_dbg_id
Ë!(
uöt32_t
)
APP_GUZZI_COMMAND__NOP
) {

197 
	`ˇŒback
(

198 
≠p_¥iv©e
,

199 
	`≠p_guzzi_comm™d_dbg_fûl
(

200 &
comm™d


204 
≠p_guzzi_comm™d_dbg_id
 = (
uöt32_t
)
APP_GUZZI_COMMAND__NOP
;

209 
	}
}

211 
	$≠p_guzzi_comm™d_dbg_waô
(

212 *
≠p_¥iv©e
,

213 
≠p_guzzi_comm™d_ˇŒback_t
 *
ˇŒback


216 !
	`≠p_guzzi_comm™d_dbg_≥ek
(
≠p_¥iv©e
, 
ˇŒback
)) {

217 
	`oßl_u¶ìp
(
APP_GUZZI_COMMAND_DBG_PROBE_INTERVAL_MS
*1000);

219 
	}
}

221 
	$≠p_guzzi_comm™d_dbg_waô_timeout
(

222 *
≠p_¥iv©e
,

223 
≠p_guzzi_comm™d_ˇŒback_t
 *
ˇŒback
,

224 
uöt32_t
 
timeout_ms


227 
uöt32_t
 
À·
, 
m¶ìp
;

228 
ˇŒed
;

230 
À·
 = 
timeout_ms
;

232 !(
ˇŒed
 = 
	`≠p_guzzi_comm™d_dbg_≥ek
(
≠p_¥iv©e
, 
ˇŒback
)Ë&& 
À·
) {

233 
m¶ìp
 = 
APP_GUZZI_COMMAND_DBG_PROBE_INTERVAL_MS
 < 
À·


234 ? 
APP_GUZZI_COMMAND_DBG_PROBE_INTERVAL_MS


235 : 
À·
;

236 
	`oßl_u¶ìp
(
m¶ìp
*1000);

237 
À·
 -
m¶ìp
;

240  
ˇŒed
;

241 
	}
}

	@cdk/apps/arch/ma2x5x/cdk_FLIC_1xIMX214_2xIMX208/leon/app_guzzi_command_dbg.h

35 #i‚de‡
_APP_GUZZI_COMMAND_DBG_H


36 
	#_APP_GUZZI_COMMAND_DBG_H


	)

38 #ifde‡
__˝lu•lus


42 
	~<≠p_guzzi_comm™d.h
>

44 
≠p_guzzi_comm™d_dbg_≥ek
(

45 *
≠p_¥iv©e
,

46 
≠p_guzzi_comm™d_ˇŒback_t
 *
ˇŒback


48 
≠p_guzzi_comm™d_dbg_waô
(

49 *
≠p_¥iv©e
,

50 
≠p_guzzi_comm™d_ˇŒback_t
 *
ˇŒback


52 
≠p_guzzi_comm™d_dbg_waô_timeout
(

53 *
≠p_¥iv©e
,

54 
≠p_guzzi_comm™d_ˇŒback_t
 *
ˇŒback
,

55 
uöt32_t
 
timeout_ms


59 #ifde‡
__˝lu•lus


	@cdk/apps/arch/ma2x5x/cdk_FLIC_1xIMX214_2xIMX208/leon/app_guzzi_command_spi.c

35 
	~<°dio.h
>

36 
	~<°dlib.h
>

37 
	~<°rög.h
>

38 
	~<as£π.h
>

40 
	~<πems/libio.h
>

41 
	~<utûs/mms_debug.h
>

43 
	~<DrvGpio.h
>

45 
	~<OsDrvSpiSœveCP.h
>

46 
	~<OsMesßgePrŸocﬁ.h
>

48 
	~"≠p_guzzi_comm™d_•i.h
"

49 
	~"≠p_guzzi_•i_comm™ds.h
"

51 #i‚de‡
APP_GUZZI_CAMMAND_SPI_HOST_NOTIFY_GPIO


52 
	#APP_GUZZI_CAMMAND_SPI_HOST_NOTIFY_GPIO
 22

	)

54 #i‚de‡
APP_GUZZI_CAMMAND_SPI_CH_ID


55 
	#APP_GUZZI_CAMMAND_SPI_CH_ID
 
SPI1


	)

57 #i‚de‡
APP_GUZZI_CAMMAND_SPI_VC_ID


58 
	#APP_GUZZI_CAMMAND_SPI_VC_ID
 1

	)

60 #i‚de‡
APP_GUZZI_CAMMAND_SPI_VC_PRIO


61 
	#APP_GUZZI_CAMMAND_SPI_VC_PRIO
 150

	)

64 
	#RTEMS_DRIVER_AUTO_MAJOR
 0

	)

65 
	#SPI_COMMAND_BUFFER_SIZE
 1024

	)

67 
mmsdbg_deföe_v¨übÀ
(

68 
vdl_≠p_guzzi_comm™d_•i
,

69 
DL_DEFAULT
,

74 
	#MMSDEBUGLEVEL
 
	`mmsdbg_u£_v¨übÀ
(
vdl_≠p_guzzi_comm™d_•i
)

	)

76 
DRVSPI_CONFIGURATION
(

77 
APP_GUZZI_CAMMAND_SPI_CH_ID
,

82 
APP_GUZZI_CAMMAND_SPI_HOST_NOTIFY_GPIO
,

85 
DECLARE_COMMUNICATION_PROTOCOL_DRIVER_TABLE
(

86 
comm_¥Ÿocﬁ_dúvî_èbÀ


88 
DECLARE_OS_MESSAGING_VIRTUAL_CHANNEL
(

89 
comm_¥Ÿocﬁ_vc
,

91 
APP_GUZZI_CAMMAND_SPI_VC_ID
,

92 
APP_GUZZI_CAMMAND_SPI_VC_PRIO
,

93 
SPI_COMMAND_BUFFER_SIZE
,

94 
SPI_COMMAND_BUFFER_SIZE
,

98 
πems_devi˚_maj‹_numbî
 
	gcomm_¥Ÿocﬁ_maj‹
;

99 
	g•i_comm™d_buf„r
[
SPI_COMMAND_BUFFER_SIZE
] 
__©åibuã__
((

100 
£˘i⁄
(".ddr.bss"),

101 
Æig√d
(8)

104 
uöt32_t
 
	$gë_dy«mic_tunög
 (
≠p_guzzi_comm™d_t
 *
comm™d
, * 
d©a
)

106 *
√xt
;

107 
uöt32
 
i
;

108 
uöt8_t
 *
dç_∑ylﬂd
 = 
comm™d
->
live_tunög
.
d©a
;

110 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__NOP
;

111 
comm™d
->
live_tunög
.
size
 = 
	`°πoul
(
d©a
, &
√xt
, 0);

113 i‡(
comm™d
->
live_tunög
.
size
 > (comm™d->live_tunög.
d©a
)) {

114 
	`mmsdbg
(
DL_ERROR
, "Dynamic dtp size: %dÉxceeded: %d",

115 ()
comm™d
->
live_tunög
.
size
,

116 (
comm™d
->
live_tunög
.
d©a
)

118 
EXIT_1
;

121 
comm™d
->
live_tunög
.
off£t
 = 
	`°πoul
(
√xt
, &next, 0);

122 
i
0; i < 
comm™d
->
live_tunög
.
size
; i ++) {

123 *
dç_∑ylﬂd
 = 
	`°πoul
(
√xt
, &next, 0);

124 
dç_∑ylﬂd
 ++;

127 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__LIVE_TUNING_APPLY
;

130 
EXIT_1
:

132 
	}
}

134 
uöt32_t
 
	$gë_tunög_id
 (
≠p_guzzi_comm™d_t
 *
comm™d
, *
d©a
)

137 ' ' =*
d©a
) {

138 
d©a
++;

141 
	`°∫˝y
((*)
comm™d
->
live_tunög
.
d©a
,

142 
d©a
,

143 
MAX_DYNAMIC_DTP_PAYLOAD_SIZE
);

145 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__LIVE_TUNING_UNLOCK
;

147 
	}
}

150 
uöt32_t
 
	$gë_ouçut_c⁄åﬁ
 (
≠p_guzzi_comm™d_t
 *
comm™d
, *
d©a
)

154 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__OUTPUT_CONTROL
;

155 
comm™d
->
ouçut_c⁄åﬁ
.
ˇmîa_í_bô_mask
 = 
	`°πoul
(

156 
d©a
,

157 &
d©a
,

160 
comm™d
->
ouçut_c⁄åﬁ
.
‰ame_ty≥_í_bô_mask
 = 
	`°πoul
(

161 
d©a
,

162 &
d©a
,

165 
comm™d
->
ouçut_c⁄åﬁ
.
‰ame_f‹m©_í_bô_mask
 = 
	`°πoul
(

166 
d©a
,

167 &
d©a
,

171 
	}
}

173 
≠p_guzzi_comm™d_t
 *
	$•i_comm™d_to_≠p_guzzi_comm™d
(

174 
≠p_guzzi_comm™d_t
 *
comm™d
,

175 *
comm™d_•i


178 
uöt32_t
 
comm™d_•i_id
;

180 *
comm™d_•i_∑øms
;

182 
comm™d_•i_id
 = 
	`°πoul
(

183 
comm™d_•i
,

184 &
comm™d_•i_∑øms
,

189 
comm™d
->
ˇm
.
id
 = 0;

190 
comm™d_•i_id
) {

191 
APP_GUZZI_SPI_CMD_START_STREAM
:

192 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_START
;

193 
comm™d
->
ˇm
.
id
 = 
	`°πoul
(

194 
comm™d_•i_∑øms
,

195 &
comm™d_•i_∑øms
,

200 
APP_GUZZI_SPI_CMD_STOP_STREAM
:

201 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_STOP
;

202 
comm™d
->
ˇm
.
id
 = 
	`°πoul
(

203 
comm™d_•i_∑øms
,

204 &
comm™d_•i_∑øms
,

208 
APP_GUZZI_SPI_CMD_REQ_STILL
:

209 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_CAPTURE
;

210 
comm™d
->
ˇm
.
id
 = 
	`°πoul
(

211 
comm™d_•i_∑øms
,

212 &
comm™d_•i_∑øms
,

216 
APP_GUZZI_SPI_CMD_MOV_LENS
:

217 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_LENS_MOVE
;

218 
comm™d
->
ˇm
.
id
 = 
	`°πoul
(

219 
comm™d_•i_∑øms
,

220 &
comm™d_•i_∑øms
,

223 
comm™d
->
ˇm
.
Àns_move
.
pos
 = 
	`°πoul
(

224 
comm™d_•i_∑øms
,

225 &
comm™d_•i_∑øms
,

229 
APP_GUZZI_SPI_CMD_FOCUS_TRIGGER
:

230 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_AF_TRIGGER
;

231 
comm™d
->
ˇm
.
id
 = 
	`°πoul
(

232 
comm™d_•i_∑øms
,

233 &
comm™d_•i_∑øms
,

237 
APP_GUZZI_SPI_CMD_AE_MANUAL
:

238 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_AE_MANUAL
;

239 
comm™d
->
ˇm
.
id
 = 
	`°πoul
(

240 
comm™d_•i_∑øms
,

241 &
comm™d_•i_∑øms
,

244 
comm™d
->
ˇm
.
´_m™uÆ
.
exp_us
 = 
	`°πoul
(

245 
comm™d_•i_∑øms
,

246 &
comm™d_•i_∑øms
,

249 
comm™d
->
ˇm
.
´_m™uÆ
.
£nsôivôy_iso
 = 
	`°πoul
(

250 
comm™d_•i_∑øms
,

251 &
comm™d_•i_∑øms
,

254 
comm™d
->
ˇm
.
´_m™uÆ
.
‰ame_duøti⁄_us
 = 
	`°πoul
(

255 
comm™d_•i_∑øms
,

256 &
comm™d_•i_∑øms
,

260 
APP_GUZZI_SPI_CMD_AE_AUTO
:

261 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_AE_AUTO
;

262 
comm™d
->
ˇm
.
id
 = 
	`°πoul
(

263 
comm™d_•i_∑øms
,

264 &
comm™d_•i_∑øms
,

268 
APP_GUZZI_SPI_CMD_SET_AWB_MODE
:

269 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_AWB_MODE
;

270 
comm™d
->
ˇm
.
id
 = 
	`°πoul
(

271 
comm™d_•i_∑øms
,

272 &
comm™d_•i_∑øms
,

275 
comm™d
->
ˇm
.
awb_mode
.
mode
 = 
	`°πoul
(

276 
comm™d_•i_∑øms
,

277 &
comm™d_•i_∑øms
,

281 
APP_GUZZI_SPI_CMD_SCENE_MODES
:

282 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_SCENE_MODE
;

283 
comm™d
->
ˇm
.
id
 = 
	`°πoul
(

284 
comm™d_•i_∑øms
,

285 &
comm™d_•i_∑øms
,

288 
comm™d
->
ˇm
.
s˚√_mode
.
ty≥
 = 
	`°πoul
(

289 
comm™d_•i_∑øms
,

290 &
comm™d_•i_∑øms
,

294 
APP_GUZZI_SPI_CMD_ANTIBANDING_MODES
:

295 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_ANTIBANDING_MODE
;

296 
comm™d
->
ˇm
.
id
 = 
	`°πoul
(

297 
comm™d_•i_∑øms
,

298 &
comm™d_•i_∑øms
,

301 
comm™d
->
ˇm
.
™tib™dög_mode
.
ty≥
 = 
	`°πoul
(

302 
comm™d_•i_∑øms
,

303 &
comm™d_•i_∑øms
,

307 
APP_GUZZI_SPI_CMD_AE_LOCK
:

308 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_AE_LOCK
;

309 
comm™d
->
ˇm
.
id
 = 
	`°πoul
(

310 
comm™d_•i_∑øms
,

311 &
comm™d_•i_∑øms
,

314 
comm™d
->
ˇm
.
´_lock_mode
.
ty≥
 = 
	`°πoul
(

315 
comm™d_•i_∑øms
,

316 &
comm™d_•i_∑øms
,

320 
APP_GUZZI_SPI_CMD_AE_TARGET_FPS_RANGE
:

321 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_AE_TARGET_FPS_RANGE
;

322 
comm™d
->
ˇm
.
id
 = 
	`°πoul
(

323 
comm™d_•i_∑øms
,

324 &
comm™d_•i_∑øms
,

327 
comm™d
->
ˇm
.
´_èrgë_Âs_ønge
.
mö_Âs
 = 
	`°πoul
(

328 
comm™d_•i_∑øms
,

329 &
comm™d_•i_∑øms
,

332 
comm™d
->
ˇm
.
´_èrgë_Âs_ønge
.
max_Âs
 = 
	`°πoul
(

333 
comm™d_•i_∑øms
,

334 &
comm™d_•i_∑øms
,

338 
APP_GUZZI_SPI_CMD_AWB_LOCK
:

339 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_AWB_LOCK
;

340 
comm™d
->
ˇm
.
id
 = 
	`°πoul
(

341 
comm™d_•i_∑øms
,

342 &
comm™d_•i_∑øms
,

345 
comm™d
->
ˇm
.
awb_lock_c⁄åﬁ
.
ty≥
 = 
	`°πoul
(

346 
comm™d_•i_∑øms
,

347 &
comm™d_•i_∑øms
,

351 
APP_GUZZI_SPI_CMD_CAPTURE_INTENT
:

352 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_CAPTURE_INTRENT
;

353 
comm™d
->
ˇm
.
id
 = 
	`°πoul
(

354 
comm™d_•i_∑øms
,

355 &
comm™d_•i_∑øms
,

358 
comm™d
->
ˇm
.
ˇ±uª_öã¡
.
mode
 = 
	`°πoul
(

359 
comm™d_•i_∑øms
,

360 &
comm™d_•i_∑øms
,

364 
APP_GUZZI_SPI_CMD_CONTROL_MODE
:

365 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_CONTROL_MODE
;

366 
comm™d
->
ˇm
.
id
 = 
	`°πoul
(

367 
comm™d_•i_∑øms
,

368 &
comm™d_•i_∑øms
,

371 
comm™d
->
ˇm
.
c⁄åﬁ_mode
.
ty≥
 = 
	`°πoul
(

372 
comm™d_•i_∑øms
,

373 &
comm™d_•i_∑øms
,

377 
APP_GUZZI_SPI_CMD_FRAME_DURATION
:

378 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_FRAME_DURATION
;

379 
comm™d
->
ˇm
.
id
 = 
	`°πoul
(

380 
comm™d_•i_∑øms
,

381 &
comm™d_•i_∑øms
,

384 
comm™d
->
ˇm
.
‰ame_duøti⁄
.
vÆ
 = 
	`°πoul
(

385 
comm™d_•i_∑øms
,

386 &
comm™d_•i_∑øms
,

390 
APP_GUZZI_SPI_CMD_EXPOSURE_COMPENSATION
:

391 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_AE_EXPOSURE_COMPENSATION
;

392 
comm™d
->
ˇm
.
id
 = 
	`°πoul
(

393 
comm™d_•i_∑øms
,

394 &
comm™d_•i_∑øms
,

397 
comm™d
->
ˇm
.
exposuª_com≥nßti⁄
.
vÆ
 = 
	`°πoul
(

398 
comm™d_•i_∑øms
,

399 &
comm™d_•i_∑øms
,

403 
APP_GUZZI_SPI_CMD_SENSITIVITY
:

404 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_SENSITIVITY
;

405 
comm™d
->
ˇm
.
id
 = 
	`°πoul
(

406 
comm™d_•i_∑øms
,

407 &
comm™d_•i_∑øms
,

410 
comm™d
->
ˇm
.
£nsôivôy
.
iso_vÆ
 = 
	`°πoul
(

411 
comm™d_•i_∑øms
,

412 &
comm™d_•i_∑øms
,

416 
APP_GUZZI_SPI_CMD_EFFECT_MODE
:

417 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_EFFECT_MODE
;

418 
comm™d
->
ˇm
.
id
 = 
	`°πoul
(

419 
comm™d_•i_∑øms
,

420 &
comm™d_•i_∑øms
,

423 
comm™d
->
ˇm
.
ef„˘_mode
.
ty≥
 = 
	`°πoul
(

424 
comm™d_•i_∑øms
,

425 &
comm™d_•i_∑øms
,

429 
APP_GUZZI_SPI_CMD_AF_MODE
:

430 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_AF_MODE
;

431 
comm™d
->
ˇm
.
id
 = 
	`°πoul
(

432 
comm™d_•i_∑øms
,

433 &
comm™d_•i_∑øms
,

436 
comm™d
->
ˇm
.
af_mode
.
ty≥
 = 
	`°πoul
(

437 
comm™d_•i_∑øms
,

438 &
comm™d_•i_∑øms
,

442 
APP_GUZZI_SPI_CMD_NOISE_REDUCTION_STRENGTH
:

443 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_NOISE_REDUCTION_STRENGTH
;

444 
comm™d
->
ˇm
.
id
 = 
	`°πoul
(

445 
comm™d_•i_∑øms
,

446 &
comm™d_•i_∑øms
,

449 
comm™d
->
ˇm
.
noi£_ªdu˘i⁄_°ªngth
.
vÆ
 = 
	`°πoul
(

450 
comm™d_•i_∑øms
,

451 &
comm™d_•i_∑øms
,

455 
APP_GUZZI_SPI_CMD_SATURATION
:

456 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_SATURATION
;

457 
comm™d
->
ˇm
.
id
 = 
	`°πoul
(

458 
comm™d_•i_∑øms
,

459 &
comm™d_•i_∑øms
,

462 
comm™d
->
ˇm
.
ßtuøti⁄
.
vÆ
 = 
	`°πoul
(

463 
comm™d_•i_∑øms
,

464 &
comm™d_•i_∑øms
,

468 
APP_GUZZI_SPI_CMD_BRIGHTNESS
:

469 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_BRIGHTNESS
;

470 
comm™d
->
ˇm
.
id
 = 
	`°πoul
(

471 
comm™d_•i_∑øms
,

472 &
comm™d_•i_∑øms
,

475 
comm™d
->
ˇm
.
brighäess
.
vÆ
 = 
	`°πoul
(

476 
comm™d_•i_∑øms
,

477 &
comm™d_•i_∑øms
,

481 
APP_GUZZI_SPI_CMD_STREAM_FORMAT
:

482 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_FORMAT
;

483 
comm™d
->
ˇm
.
id
 = 
	`°πoul
(

484 
comm™d_•i_∑øms
,

485 &
comm™d_•i_∑øms
,

488 
comm™d
->
ˇm
.
f‹m©
.
vÆ
 = 
	`°πoul
(

489 
comm™d_•i_∑øms
,

490 &
comm™d_•i_∑øms
,

494 
APP_GUZZI_SPI_CMD_CAM_RESOLUTION
:

495 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_RESOLUTION
;

496 
comm™d
->
ˇm
.
id
 = 
	`°πoul
(

497 
comm™d_•i_∑øms
,

498 &
comm™d_•i_∑øms
,

501 
comm™d
->
ˇm
.
ªsﬁuti⁄
.
width
 = 
	`°πoul
(

502 
comm™d_•i_∑øms
,

503 &
comm™d_•i_∑øms
,

506 
comm™d
->
ˇm
.
ªsﬁuti⁄
.
height
 = 
	`°πoul
(

507 
comm™d_•i_∑øms
,

508 &
comm™d_•i_∑øms
,

512 
APP_GUZZI_SPI_CMD_SHARPNESS
:

513 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_SHARPNESS
;

514 
comm™d
->
ˇm
.
id
 = 
	`°πoul
(

515 
comm™d_•i_∑øms
,

516 &
comm™d_•i_∑øms
,

519 
comm™d
->
ˇm
.
sh¨≤ess
.
vÆ
 = 
	`°πoul
(

520 
comm™d_•i_∑øms
,

521 &
comm™d_•i_∑øms
,

525 
APP_GUZZI_SPI_LIVE_TUNING_UNLOCK
:

526 
	`gë_tunög_id
(
comm™d
, 
comm™d_•i_∑øms
);

528 
APP_GUZZI_SPI_LIVE_TUNING_APPLY
:

529 
	`gë_dy«mic_tunög
(
comm™d
, 
comm™d_•i_∑øms
);

531 
APP_GUZZI_SPI_CMD_OUT_CTRL
:

532 
	`gë_ouçut_c⁄åﬁ
(
comm™d
, 
comm™d_•i_∑øms
);

535 
	`mmsdbg
(

536 
DL_ERROR
,

538 ()
comm™d_•i_id


540 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__NOP
;

543  
comm™d
;

544 
	}
}

546 
	$nŸify_boŸ_ªady
()

548 
	`DrvGpioSëPöLo
(
APP_GUZZI_CAMMAND_SPI_HOST_NOTIFY_GPIO
);

549 
	`DrvGpioSëPöHi
(
APP_GUZZI_CAMMAND_SPI_HOST_NOTIFY_GPIO
);

550 
	}
}

553 
	$≠p_guzzi_comm™d_•i_≥ek
(

554 *
≠p_¥iv©e
,

555 
≠p_guzzi_comm™d_ˇŒback_t
 *
ˇŒback


558 
≠p_guzzi_comm™d_t
 
comm™d
;

559 *
comm™d_•i
;

560 
n
;

562 
comm™d_•i
 = 
•i_comm™d_buf„r
;

564 
n
 = 
	`MesßgePassögRód
(

565 
APP_GUZZI_CAMMAND_SPI_VC_ID
,

566 
comm™d_•i
,

567 
SPI_COMMAND_BUFFER_SIZE
-1

569 i‡(
n
) {

570 
comm™d_•i
[
n
] = '\000';

571 
	`ˇŒback
(

572 
≠p_¥iv©e
,

573 
	`•i_comm™d_to_≠p_guzzi_comm™d
(

574 &
comm™d
,

575 
comm™d_•i


582 
	}
}

584 
	$≠p_guzzi_comm™d_•i_waô
(

585 *
≠p_¥iv©e
,

586 
≠p_guzzi_comm™d_ˇŒback_t
 *
ˇŒback


589 
≠p_guzzi_comm™d_t
 
comm™d
;

590 *
comm™d_•i
;

591 
πems_libio_rw_¨gs_t
 
å
;

593 
comm™d_•i
 = 
•i_comm™d_buf„r
;

594 
å
.
buf„r
 = 
comm™d_•i
;

596 
	`πems_io_ªad
(

597 
comm_¥Ÿocﬁ_maj‹
,

598 
APP_GUZZI_CAMMAND_SPI_VC_ID
,

599 &
å


601 i‡(
å
.
byãs_moved
) {

602 
comm™d_•i
[
å
.
byãs_moved
] = '\000';

603 
	`ˇŒback
(

604 
≠p_¥iv©e
,

605 
	`•i_comm™d_to_≠p_guzzi_comm™d
(

606 &
comm™d
,

607 
comm™d_•i


611 
	}
}

614 
	$≠p_guzzi_comm™d_•i_waô_timeout
(

615 *
≠p_¥iv©e
,

616 
≠p_guzzi_comm™d_ˇŒback_t
 *
ˇŒback
,

617 
uöt32_t
 
timeout_ms


620 
OsVútuÆCh™√l
 *
vc
;

621 
≠p_guzzi_comm™d_t
 
comm™d
;

622 *
comm™d_•i
;

623 
πems_°©us_code
 
rc
;

624 
πems_evít_£t
 
evíts
;

625 
n
;

627 
comm™d_•i
 = 
•i_comm™d_buf„r
;

630 
	`as£π
(
vc
 = (
OsVútuÆCh™√l
 *)
	`MesßgePassögGëVútuÆCh™√l
(

631 
APP_GUZZI_CAMMAND_SPI_VC_ID


634 
n
 = 
	`Ba£MesßgePassögRód
(

635 (
VútuÆCh™√l
 *)
vc
,

636 
comm™d_•i
,

637 
SPI_COMMAND_BUFFER_SIZE
-1

640 i‡(!
n
) {

641 
vc
->
rxWaôTaskId
 = 
	`πems_èsk_£lf
();

642 
rc
 = 
	`πems_evít_ª˚ive
(

643 
RTEMS_EVENT_0
,

644 
RTEMS_EVENT_ALL
,

645 (
	`πems_˛ock_gë_ticks_≥r_£c⁄d
(Ë/ 1000Ë* 
timeout_ms
,

646 &
evíts


648 i‡(
rc
 =
RTEMS_TIMEOUT
) {

651 
	`as£π
(!
rc
);

652 
n
 = 
	`Ba£MesßgePassögRód
(

653 (
VútuÆCh™√l
 *)
vc
,

654 
comm™d_•i
,

655 
SPI_COMMAND_BUFFER_SIZE
-1

659 i‡(
n
) {

660 
comm™d_•i
[
n
] = '\000';

661 
	`ˇŒback
(

662 
≠p_¥iv©e
,

663 
	`•i_comm™d_to_≠p_guzzi_comm™d
(

664 &
comm™d
,

665 
comm™d_•i


670  
n
 ? 1 : 0;

671 
	}
}

673 
	$≠p_guzzi_comm™d_•i_öô
()

677 
	`as£π
(
RTEMS_SUCCESSFUL
 =
	`πems_io_ªgi°î_drivî
(

678 
RTEMS_DRIVER_AUTO_MAJOR
,

679 &
comm_¥Ÿocﬁ_dúvî_èbÀ
,

680 &
comm_¥Ÿocﬁ_maj‹


683 
	`as£π
(
RTEMS_SUCCESSFUL
 =
	`πems_io_öôülize
(

684 
comm_¥Ÿocﬁ_maj‹
,

686 &
comm_¥Ÿocﬁ_vc


688 
	`as£π
(
RTEMS_SUCCESSFUL
 =
	`πems_io_›í
(

689 
comm_¥Ÿocﬁ_maj‹
,

690 
APP_GUZZI_CAMMAND_SPI_VC_ID
,

691 
NULL


694 
	`nŸify_boŸ_ªady
();

695 
	}
}

	@cdk/apps/arch/ma2x5x/cdk_FLIC_1xIMX214_2xIMX208/leon/app_guzzi_command_spi.h

35 #i‚de‡
_APP_GUZZI_COMMAND_SPI_H


36 
	#_APP_GUZZI_COMMAND_SPI_H


	)

38 #ifde‡
__˝lu•lus


42 
	~<≠p_guzzi_comm™d.h
>

44 
≠p_guzzi_comm™d_•i_öô
();

45 
≠p_guzzi_comm™d_•i_≥ek
(

46 *
≠p_¥iv©e
,

47 
≠p_guzzi_comm™d_ˇŒback_t
 *
ˇŒback


49 
≠p_guzzi_comm™d_•i_waô
(

50 *
≠p_¥iv©e
,

51 
≠p_guzzi_comm™d_ˇŒback_t
 *
ˇŒback


53 
≠p_guzzi_comm™d_•i_waô_timeout
(

54 *
≠p_¥iv©e
,

55 
≠p_guzzi_comm™d_ˇŒback_t
 *
ˇŒback
,

56 
uöt32_t
 
timeout_ms


59 #ifde‡
__˝lu•lus


	@cdk/apps/arch/ma2x5x/cdk_FLIC_1xIMX214_2xIMX208/leon/app_guzzi_spi_commands.h

35 #i‚de‡
_APP_GUZZI_SPI_COMMANDS_H


36 
	#_APP_GUZZI_SPI_COMMANDS_H


	)

38 #ifde‡
__˝lu•lus


48 
	#APP_GUZZI_SPI_CMD_START_STREAM
 0

	)

49 
	#APP_GUZZI_SPI_CMD_STOP_STREAM
 1

	)

50 
	#APP_GUZZI_SPI_CMD_REQ_STILL
 2

	)

51 
	#APP_GUZZI_SPI_CMD_MOV_LENS
 3

	)

54 
	#APP_GUZZI_SPI_CMD_FOCUS_TRIGGER
 4

	)

55 
	#APP_GUZZI_SPI_CMD_AE_MANUAL
 5

	)

60 
	#APP_GUZZI_SPI_CMD_AE_AUTO
 6

	)

61 
	#APP_GUZZI_SPI_CMD_SET_AWB_MODE
 7

	)

63 
	#APP_GUZZI_SPI_CMD_SCENE_MODES
 8

	)

66 
	#APP_GUZZI_SPI_CMD_ANTIBANDING_MODES
 9

	)

69 
	#APP_GUZZI_SPI_CMD_EXPOSURE_COMPENSATION
 10

	)

72 
	#APP_GUZZI_SPI_CMD_AE_LOCK
 12

	)

75 
	#APP_GUZZI_SPI_CMD_AE_TARGET_FPS_RANGE
 13

	)

79 
	#APP_GUZZI_SPI_CMD_AWB_LOCK
 15

	)

82 
	#APP_GUZZI_SPI_CMD_CAPTURE_INTENT
 16

	)

85 
	#APP_GUZZI_SPI_CMD_CONTROL_MODE
 17

	)

88 
	#APP_GUZZI_SPI_CMD_FRAME_DURATION
 20

	)

91 
	#APP_GUZZI_SPI_CMD_SENSITIVITY
 22

	)

94 
	#APP_GUZZI_SPI_CMD_EFFECT_MODE
 23

	)

97 
	#APP_GUZZI_SPI_CMD_AF_MODE
 25

	)

100 
	#APP_GUZZI_SPI_CMD_NOISE_REDUCTION_STRENGTH
 26

	)

103 
	#APP_GUZZI_SPI_CMD_SATURATION
 27

	)

106 
	#APP_GUZZI_SPI_CMD_BRIGHTNESS
 30

	)

109 
	#APP_GUZZI_SPI_CMD_STREAM_FORMAT
 32

	)

112 
	#APP_GUZZI_SPI_CMD_CAM_RESOLUTION
 33

	)

116 
	#APP_GUZZI_SPI_CMD_SHARPNESS
 34

	)

119 
	#APP_GUZZI_SPI_LIVE_TUNING_UNLOCK
 35

	)

121 
	#APP_GUZZI_SPI_LIVE_TUNING_APPLY
 36

	)

126 
	#APP_GUZZI_SPI_CMD_AE_MERGER
 37

	)

130 
	#APP_GUZZI_SPI_CMD_AWB_MERGER
 38

	)

134 
	#APP_GUZZI_SPI_CMD_CUST_USECASE
 39

	)

137 
	#APP_GUZZI_SPI_CMD_CUST_CAPT_MODE
 40

	)

140 
	#APP_GUZZI_SPI_CMD_CUST_EXP_BRACKETS
 41

	)

145 
	#APP_GUZZI_SPI_CMD_CUST_CAPTURE
 42

	)

149 
	#APP_GUZZI_SPI_CMD_CONTRAST
 43

	)

152 
	#APP_GUZZI_SPI_CMD_AE_REGION
 44

	)

160 
	#APP_GUZZI_SPI_CMD_OUT_CTRL
 45

	)

165 #ifde‡
__˝lu•lus


	@cdk/apps/arch/ma2x5x/cdk_FLIC_1xIMX214_2xIMX208/leon/brdDefines.h

1 #i‚de‡
BRD_DEFINES_H


2 
	#BRD_DEFINES_H


	)

4 #ifde‡
MV0182


5 
	#BOARD_REF_CLOCK_KHZ
 (12000)

	)

8 #ifde‡
MV0212


9 
	#BOARD_REF_CLOCK_KHZ
 (12000)

	)

12 #i‚de‡
BOARD_REF_CLOCK_KHZ


13 #îr‹ 
PÀa£
 
£À˘
 
¥›î
 
BOARD
 
ty≥


	@cdk/apps/arch/ma2x5x/cdk_FLIC_1xIMX214_2xIMX208/leon/camera_control.c

35 
	~<oßl/oßl_°dty≥s.h
>

36 
	~<oßl/oßl_°dlib.h
>

37 
	~<oßl/oßl_muãx.h
>

38 
	~<utûs/mms_debug.h
>

40 
	~<ˇmîa.h
>

41 
	~<ˇmîa_c⁄fig_ödex.h
>

42 
	~<ˇmîa_c⁄fig_°ru˘.h
>

44 
	~"ˇmîa_c⁄åﬁ.h
"

46 
mmsdbg_deföe_v¨übÀ
(

47 
vdl_ˇmîa_c⁄åﬁ
,

48 
DL_DEFAULT
,

53 
	#MMSDEBUGLEVEL
 
	`mmsdbg_u£_v¨übÀ
(
vdl_ˇmîa_c⁄åﬁ
)

	)

55 #i‚de‡
GUZZI_INSTANCES_MAX


56 
	#GUZZI_INSTANCES_MAX
 3

	)

60 
ˇmîa_t
 *
	mˇmîa
;

61 
oßl_£m
 *
	mcmd_£m
;

62 
oßl_muãx
 *
	mc⁄fig_muãx
;

63 
	mc⁄figs_to_skù
;

64 
	m°›
;

65 
	m°¨t_îr
;

66 
guzzi_ˇmîa3_c⁄åﬁs_ˇ±uª_ªque°_guzzi_‰_id_t
 
	mguzzi_‰_id
;

67 } 
	tˇmîa_c⁄åﬁ_t
;

69 
ˇmîa_c⁄åﬁ_t
 
	gg_ˇmîa_c⁄åﬁ
[
GUZZI_INSTANCES_MAX
];

71 
	$ˇŒback
(

72 
ˇmîa_t
 *
ˇmîa
,

73 *
≠p_¥v_void
,

74 
ˇmîa_evít_t
 
evít
,

75 
d©™
,

76 *
d©≠


79 
ˇmîa_c⁄åﬁ_t
 *
ˇmîa_c⁄åﬁ
;

81 
ˇmîa_c⁄åﬁ
 = 
≠p_¥v_void
;

83 
	`UNUSED
(
ˇmîa
);

84 
	`UNUSED
(
d©≠
);

86 
evít
.
ty≥
) {

87 
CAMERA_EVENT_ERROR
:

88 
	`mmsdbg
(
DL_ERROR
, "Camera CB ERRORÉvent.");

90 
CAMERA_EVENT_ERROR_START
:

91 
	`mmsdbg
(
DL_ERROR
, "Camera CB ERROR_STARTÉvent.");

92 
ˇmîa_c⁄åﬁ
->
°¨t_îr
 = -1;

93 
	`oßl_£m_po°
(
ˇmîa_c⁄åﬁ
->
cmd_£m
);

95 
CAMERA_EVENT_START_DONE
:

96 
	`mmsdbg
(
DL_ERROR
, "Camera CB START_DONEÉvent.");

97 
	`oßl_£m_po°
(
ˇmîa_c⁄åﬁ
->
cmd_£m
);

99 
CAMERA_EVENT_STOP_DONE
:

100 
	`mmsdbg
(
DL_MESSAGE
, "Camera CB STOP_DONEÉvent.");

101 
	`oßl_£m_po°
(
ˇmîa_c⁄åﬁ
->
cmd_£m
);

103 
CAMERA_EVENT_FLUSH_DONE
:

104 
	`mmsdbg
(
DL_MESSAGE
, "Camera CB FLUSH_DONEÉvent.");

105 
	`oßl_£m_po°
(
ˇmîa_c⁄åﬁ
->
cmd_£m
);

107 
CAMERA_EVENT_PROCESS_DONE
:

108 
	`mmsdbg
(
DL_MESSAGE
, "Camera CB PROCESS_DONEÉvent.");

110 
CAMERA_EVENT_BUFFER_FLUSH
:

111 
	`mmsdbg
(
DL_MESSAGE
, "Camera CB BUFFER_FLUSHÉvent.");

113 
CAMERA_EVENT_GENERIC
:

114 
	`mmsdbg
(
DL_MESSAGE
, "Camî®CB GENERICÉvít: sub_ty≥=%d,Çum=%d.", 
evít
.
sub_ty≥
, 
d©™
);

116 
	`oßl_muãx_lock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

117 i‡(
ˇmîa_c⁄åﬁ
->
°›
 == 0)

119 i‡(!
ˇmîa_c⁄åﬁ
->
c⁄figs_to_skù
) {

120 
ˇmîa_c⁄åﬁ
->
guzzi_‰_id
.
v
++;

121 
	`ˇmîa_c⁄fig_£t_begö
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

122 
	`ˇmîa_c⁄fig_£t
(

123 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

124 
GUZZI_CAMERA3_INDEX_CONTROLS_CAPTURE_REQUEST_GUZZI_FR_ID
,

125 &
ˇmîa_c⁄åﬁ
->
guzzi_‰_id


127 
	`ˇmîa_c⁄fig_£t_íd
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

129 
ˇmîa_c⁄åﬁ
->
c⁄figs_to_skù
--;

132 
	`oßl_muãx_u∆ock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

135 
	`mmsdbg
(
DL_ERROR
, "Unk⁄w camî®evíà(%d)!", 
evít
.
v
);

137 
	}
}

139 
uöt32_t
 
	$ˇmîa_c⁄åﬁ_is_a˘ive
(
ˇm_id
)

141  (
g_ˇmîa_c⁄åﬁ
[
ˇm_id
].
ˇmîa
 !
NULL
);

142 
	}
}

145 
	$ˇmîa_c⁄åﬁ_°¨t
(
ˇm_id
)

147 
ˇmîa_c⁄åﬁ_t
 *
ˇmîa_c⁄åﬁ
;

148 
ˇmîa_¸óã_∑øms_t
 
¸óã_∑øms
;

149 
guzzi_ˇmîa3_dy«mic_c⁄åﬁ_af_mode_t
 
af_mode
;

150 
îr
;

152 
ˇmîa_c⁄åﬁ
 = &
g_ˇmîa_c⁄åﬁ
[
ˇm_id
];

154 
ˇmîa_c⁄åﬁ
->
cmd_£m
 = 
	`oßl_£m_¸óã
(0);

155 i‡(!
ˇmîa_c⁄åﬁ
->
cmd_£m
) {

156 
	`mmsdbg
(
DL_ERROR
, "FailedÅo create camera control command semphore!");

157 
exô1
;

159 
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
 = 
	`oßl_muãx_¸óã
();

160 i‡(!
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
) {

161 
	`mmsdbg
(
DL_ERROR
, "FailedÅo create camera control config mutex!");

162 
exô2
;

165 
¸óã_∑øms
.
ˇmîa_id
 = 
ˇm_id
;

166 
¸óã_∑øms
.
mode
 = 
CAMERA_MODE_MOV_CONFIG_DRIVEN
;

167 
¸óã_∑øms
.
dç_£rvî
 = 
NULL
;

168 
¸óã_∑øms
.
ˇŒback
 = callback;

169 
¸óã_∑øms
.
≠p_¥v
 = 
ˇmîa_c⁄åﬁ
;

170 
ˇmîa_c⁄åﬁ
->
ˇmîa
 = 
	`ˇmîa_¸óã
(&
¸óã_∑øms
);

171 i‡(!
ˇmîa_c⁄åﬁ
->
ˇmîa
) {

172 
	`mmsdbg
(
DL_ERROR
, "FailedÅo create camera!");

173 
exô3
;

176 
îr
 = 
	`ˇmîa_°¨t
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

177 i‡(
îr
) {

178 
	`mmsdbg
(
DL_ERROR
, "FailedÅo start camera!");

179 
exô3
;

181 
	`mmsdbg
(
DL_ERROR
, "Camîa_id = %d sèπed.\n", 
ˇm_id
);

182 
	`oßl_£m_waô
(
ˇmîa_c⁄åﬁ
->
cmd_£m
);

183 i‡(
ˇmîa_c⁄åﬁ
->
°¨t_îr
) {

184 
	`mmsdbg
(
DL_ERROR
, "FailedÅo start camera!");

185 
exô3
;

188 
ˇmîa_c⁄åﬁ
->
guzzi_‰_id
.
v
 = 0;

190 
	`oßl_muãx_lock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

192 
ˇmîa_c⁄åﬁ
->
guzzi_‰_id
.
v
++;

193 
af_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AF_MODE_OFF
;

194 
	`ˇmîa_c⁄fig_£t_begö
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

195 
	`ˇmîa_c⁄fig_£t
(

196 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

197 
GUZZI_CAMERA3_INDEX_CONTROLS_CAPTURE_REQUEST_GUZZI_FR_ID
,

198 &
ˇmîa_c⁄åﬁ
->
guzzi_‰_id


200 
	`ˇmîa_c⁄fig_£t
(

201 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

202 
GUZZI_CAMERA3_INDEX_CONTROLS_CONTROL_AF_MODE
,

203 &
af_mode


205 
	`ˇmîa_c⁄fig_£t_íd
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

207 
ˇmîa_c⁄åﬁ
->
guzzi_‰_id
.
v
++;

208 
	`ˇmîa_c⁄fig_£t_begö
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

209 
	`ˇmîa_c⁄fig_£t
(

210 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

211 
GUZZI_CAMERA3_INDEX_CONTROLS_CAPTURE_REQUEST_GUZZI_FR_ID
,

212 &
ˇmîa_c⁄åﬁ
->
guzzi_‰_id


214 
	`ˇmîa_c⁄fig_£t_íd
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

216 
ˇmîa_c⁄åﬁ
->
guzzi_‰_id
.
v
++;

217 
	`ˇmîa_c⁄fig_£t_begö
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

218 
	`ˇmîa_c⁄fig_£t
(

219 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

220 
GUZZI_CAMERA3_INDEX_CONTROLS_CAPTURE_REQUEST_GUZZI_FR_ID
,

221 &
ˇmîa_c⁄åﬁ
->
guzzi_‰_id


223 
	`ˇmîa_c⁄fig_£t_íd
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

225 
ˇmîa_c⁄åﬁ
->
c⁄figs_to_skù
 = 0;

227 
	`oßl_muãx_u∆ock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

232 
exô3
:

233 
	`oßl_muãx_de°roy
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

234 
exô2
:

235 
	`oßl_£m_de°roy
(
ˇmîa_c⁄åﬁ
->
cmd_£m
);

236 
exô1
:

237 
ˇmîa_c⁄åﬁ
->
ˇmîa
 = 
NULL
;

239 
	}
}

241 
	$ˇmîa_c⁄åﬁ_°›
(
ˇm_id
)

243 
ˇmîa_c⁄åﬁ_t
 *
ˇmîa_c⁄åﬁ
;

245 
ˇmîa_c⁄åﬁ
 = &
g_ˇmîa_c⁄åﬁ
[
ˇm_id
];

246 
îr
;

248 i‡(!
ˇmîa_c⁄åﬁ
->
ˇmîa
) {

251 
	`oßl_muãx_lock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

252 
ˇmîa_c⁄åﬁ
->
°›
 = 1;

253 
	`oßl_muãx_u∆ock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

255 
	`ˇmîa_Êush
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

256 
	`oßl_£m_waô
(
ˇmîa_c⁄åﬁ
->
cmd_£m
);

258 
îr
 = 
	`ˇmîa_°›
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

259 i‡(
îr
) {

260 
	`mmsdbg
(
DL_ERROR
, "FailedÅo stop camera!");

262 
	`oßl_£m_waô
(
ˇmîa_c⁄åﬁ
->
cmd_£m
);

263 
	`mmsdbg
(
DL_ERROR
, "Camî®id = %d st›≥d.\n", 
ˇm_id
);

265 
	`ˇmîa_de°roy
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

266 
	`oßl_muãx_de°roy
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

267 
	`oßl_£m_de°roy
(
ˇmîa_c⁄åﬁ
->
cmd_£m
);

269 
ˇmîa_c⁄åﬁ
->
ˇmîa
 = 
NULL
;

270 
ˇmîa_c⁄åﬁ
->
°›
 = 0;

271 
	}
}

273 
	$ˇmîa_c⁄åﬁ_ˇ±uª
(
ˇm_id
)

275 
ˇmîa_c⁄åﬁ_t
 *
ˇmîa_c⁄åﬁ
;

276 
guzzi_ˇmîa3_c⁄åﬁs_c⁄åﬁ_ˇ±uª_öã¡_t
 
öã¡_ªq
;

277 
îr
;

279 
ˇmîa_c⁄åﬁ
 = &
g_ˇmîa_c⁄åﬁ
[
ˇm_id
];

281 
	`oßl_muãx_lock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

283 
ˇmîa_c⁄åﬁ
->
guzzi_‰_id
.
v
++;

284 
öã¡_ªq
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_CAPTURE_INTENT_ZERO_SHUTTER_LAG
;

285 
	`ˇmîa_c⁄fig_£t_begö
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

286 
îr
 = 
	`ˇmîa_c⁄fig_£t
(

287 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

288 
GUZZI_CAMERA3_INDEX_CONTROLS_CAPTURE_REQUEST_GUZZI_FR_ID
,

289 &
ˇmîa_c⁄åﬁ
->
guzzi_‰_id


291 
îr
 +
	`ˇmîa_c⁄fig_£t
(

292 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

293 
GUZZI_CAMERA3_INDEX_CONTROLS_CONTROL_CAPTURE_INTENT
,

294 &
öã¡_ªq


296 
	`ˇmîa_c⁄fig_£t_íd
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

298 
ˇmîa_c⁄åﬁ
->
guzzi_‰_id
.
v
++;

299 
öã¡_ªq
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_CAPTURE_INTENT_PREVIEW
;

300 
	`ˇmîa_c⁄fig_£t_begö
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

301 
îr
 +
	`ˇmîa_c⁄fig_£t
(

302 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

303 
GUZZI_CAMERA3_INDEX_CONTROLS_CAPTURE_REQUEST_GUZZI_FR_ID
,

304 &
ˇmîa_c⁄åﬁ
->
guzzi_‰_id


306 
îr
 +
	`ˇmîa_c⁄fig_£t
(

307 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

308 
GUZZI_CAMERA3_INDEX_CONTROLS_CONTROL_CAPTURE_INTENT
,

309 &
öã¡_ªq


311 
	`ˇmîa_c⁄fig_£t_íd
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

313 i‡(
îr
) {

314 
	`mmsdbg
(
DL_ERROR
, "Capture failed.\n");

316 
	`mmsdbg
(
DL_ERROR
, "Camî®id = %d c≠tuª suc˚eded.\n", 
ˇm_id
);

319 
ˇmîa_c⁄åﬁ
->
c⁄figs_to_skù
 = 1;

321 
	`oßl_muãx_u∆ock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

322 
	}
}

324 
	$ˇmîa_c⁄åﬁ_Àns_move
(
ˇm_id
, 
Àns_posôi⁄
)

326 
ˇmîa_c⁄åﬁ_t
 *
ˇmîa_c⁄åﬁ
;

327 
guzzi_ˇmîa3_c⁄åﬁs_Àns_foˇl_Àngth_t
 
foc_Àn
;

328 
guzzi_ˇmîa3_dy«mic_c⁄åﬁ_af_mode_t
 
af_mode
;

329 
îr
;

331 
ˇmîa_c⁄åﬁ
 = &
g_ˇmîa_c⁄åﬁ
[
ˇm_id
];

333 i‡(
Àns_posôi⁄
 > 255) {

334 
Àns_posôi⁄
 = 255;

337 i‡(
Àns_posôi⁄
 < 0) {

338 
Àns_posôi⁄
 = 0;

341 
foc_Àn
.
v
 = (Ë
Àns_posôi⁄
 / 255.0;

342 
af_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AF_MODE_OFF
;

344 
	`oßl_muãx_lock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

346 
ˇmîa_c⁄åﬁ
->
guzzi_‰_id
.
v
++;

348 
	`ˇmîa_c⁄fig_£t_begö
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

349 
îr
 = 
	`ˇmîa_c⁄fig_£t
(

350 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

351 
GUZZI_CAMERA3_INDEX_CONTROLS_CAPTURE_REQUEST_GUZZI_FR_ID
,

352 &
ˇmîa_c⁄åﬁ
->
guzzi_‰_id


354 
îr
 +
	`ˇmîa_c⁄fig_£t
(

355 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

356 
GUZZI_CAMERA3_INDEX_CONTROLS_CONTROL_AF_MODE
,

357 &
af_mode


359 
îr
 +
	`ˇmîa_c⁄fig_£t
(

360 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

361 
GUZZI_CAMERA3_INDEX_CONTROLS_LENS_FOCAL_LENGTH
,

362 &
foc_Àn


364 
	`ˇmîa_c⁄fig_£t_íd
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

365 i‡(
îr
) {

366 
	`mmsdbg
(
DL_ERROR
, "Lens move failed.\n");

368 
	`mmsdbg
(
DL_ERROR
, "Lí†movêsuc˚eded camîa_id = %d,Üís_posôi⁄ = %d.\n", 
ˇm_id
, 
Àns_posôi⁄
);

371 
ˇmîa_c⁄åﬁ
->
c⁄figs_to_skù
 = 1;

373 
	`oßl_muãx_u∆ock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

374 
	}
}

376 
	$ˇmîa_c⁄åﬁ_focus_åiggî
(
ˇm_id
)

378 
ˇmîa_c⁄åﬁ_t
 *
ˇmîa_c⁄åﬁ
;

379 
guzzi_ˇmîa3_dy«mic_c⁄åﬁ_af_mode_t
 
af_mode
;

380 
guzzi_ˇmîa3_dy«mic_c⁄åﬁ_af_åiggî_id_t
 
af_åiggî
;

381 
îr
;

383 
ˇmîa_c⁄åﬁ
 = &
g_ˇmîa_c⁄åﬁ
[
ˇm_id
];

385 
af_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AF_MODE_AUTO
;

386 
af_åiggî
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AF_TRIGGER_START
;

388 
	`oßl_muãx_lock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

390 
ˇmîa_c⁄åﬁ
->
guzzi_‰_id
.
v
++;

391 
	`ˇmîa_c⁄fig_£t_begö
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

392 
îr
 = 
	`ˇmîa_c⁄fig_£t
(

393 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

394 
GUZZI_CAMERA3_INDEX_CONTROLS_CAPTURE_REQUEST_GUZZI_FR_ID
,

395 &
ˇmîa_c⁄åﬁ
->
guzzi_‰_id


397 
îr
 +
	`ˇmîa_c⁄fig_£t
(

398 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

399 
GUZZI_CAMERA3_INDEX_CONTROLS_CONTROL_AF_MODE
,

400 &
af_mode


402 
îr
 +
	`ˇmîa_c⁄fig_£t
(

403 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

404 
GUZZI_CAMERA3_INDEX_CONTROLS_CONTROL_AF_TRIGGER
,

405 &
af_åiggî


407 
	`ˇmîa_c⁄fig_£t_íd
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

408 i‡(
îr
) {

409 
	`mmsdbg
(
DL_ERROR
, "FocusÅrigger failed.\n");

411 
	`mmsdbg
(
DL_ERROR
,

412 "Focu†åiggî suc˚eded camîa_id = %d.\n", 
ˇm_id
);

414 
ˇmîa_c⁄åﬁ
->
c⁄figs_to_skù
 = 1;

415 
	`oßl_muãx_u∆ock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

416 
	}
}

418 
	$ˇmîa_c⁄åﬁ_´_m™uÆ
(

419 
ˇm_id
,

420 
uöt32_t
 
time_us
,

421 
uöt32_t
 
£nsôivôy_iso
,

422 
uöt32_t
 
‰ame_duøti⁄_us


425 
ˇmîa_c⁄åﬁ_t
 *
ˇmîa_c⁄åﬁ
;

426 
guzzi_ˇmîa3_dy«mic_£ns‹_exposuª_time_t
 
£ns‹_exposuª_time
;

427 
guzzi_ˇmîa3_dy«mic_£ns‹_£nsôivôy_t
 
£ns‹_£nsôivôy
;

428 
guzzi_ˇmîa3_dy«mic_£ns‹_‰ame_duøti⁄_t
 
£ns‹_‰ame_duøti⁄
;

429 
guzzi_ˇmîa3_c⁄åﬁs_c⁄åﬁ_´_mode_t
 
´_mode
;

430 
îr
;

432 
ˇmîa_c⁄åﬁ
 = &
g_ˇmîa_c⁄åﬁ
[
ˇm_id
];

434 
£ns‹_exposuª_time
.
v
 = 1000 * 
time_us
;

435 
£ns‹_£nsôivôy
.
v
 = 
£nsôivôy_iso
;

436 
£ns‹_‰ame_duøti⁄
.
v
 = 1000 * 
‰ame_duøti⁄_us
;

437 
´_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AE_MODE_OFF
;

439 
	`oßl_muãx_lock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

441 
ˇmîa_c⁄åﬁ
->
guzzi_‰_id
.
v
++;

442 
	`ˇmîa_c⁄fig_£t_begö
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

443 
îr
 = 
	`ˇmîa_c⁄fig_£t
(

444 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

445 
GUZZI_CAMERA3_INDEX_CONTROLS_CAPTURE_REQUEST_GUZZI_FR_ID
,

446 &
ˇmîa_c⁄åﬁ
->
guzzi_‰_id


448 
îr
 +
	`ˇmîa_c⁄fig_£t
(

449 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

450 
GUZZI_CAMERA3_INDEX_CONTROLS_SENSOR_EXPOSURE_TIME
,

451 &
£ns‹_exposuª_time


453 
îr
 +
	`ˇmîa_c⁄fig_£t
(

454 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

455 
GUZZI_CAMERA3_INDEX_CONTROLS_SENSOR_SENSITIVITY
,

456 &
£ns‹_£nsôivôy


458 
îr
 +
	`ˇmîa_c⁄fig_£t
(

459 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

460 
GUZZI_CAMERA3_INDEX_CONTROLS_SENSOR_FRAME_DURATION
,

461 &
£ns‹_‰ame_duøti⁄


463 
îr
 +
	`ˇmîa_c⁄fig_£t
(

464 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

465 
GUZZI_CAMERA3_INDEX_CONTROLS_CONTROL_AE_MODE
,

466 &
´_mode


468 
	`ˇmîa_c⁄fig_£t_íd
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

469 i‡(
îr
) {

470 
	`mmsdbg
(
DL_ERROR
, "Manualáe failed.\n");

472 
	`mmsdbg
(
DL_ERROR
,

475 
ˇm_id
, ()
time_us
, ()
£nsôivôy_iso
, ()
‰ame_duøti⁄_us
);

477 
ˇmîa_c⁄åﬁ
->
c⁄figs_to_skù
 = 1;

478 
	`oßl_muãx_u∆ock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

479 
	}
}

481 
	$ˇmîa_c⁄åﬁ_´_auto
(
ˇm_id
, 
uöt32_t
 
Êash_mode
)

483 
ˇmîa_c⁄åﬁ_t
 *
ˇmîa_c⁄åﬁ
;

484 
guzzi_ˇmîa3_c⁄åﬁs_c⁄åﬁ_´_mode_t
 
´_mode
;

485 
îr
;

487 
ˇmîa_c⁄åﬁ
 = &
g_ˇmîa_c⁄åﬁ
[
ˇm_id
];

489 
Êash_mode
) {

490 
CAMERA_CONTROL__AE_AUTO__FLASH_MODE__OFF
:

491 
´_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AE_MODE_ON
;

493 
CAMERA_CONTROL__AE_AUTO__FLASH_MODE__AUTO
:

494 
´_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AE_MODE_ON_AUTO_FLASH
;

496 
CAMERA_CONTROL__AE_AUTO__FLASH_MODE__ALWAYS
:

497 
´_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AE_MODE_ON_ALWAYS_FLASH
;

499 
CAMERA_CONTROL__AE_AUTO__FLASH_MODE__AUTO_REDEYE
:

500 
´_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AE_MODE_ON_AUTO_FLASH_REDEYE
;

503 
	`mmsdbg
(
DL_ERROR
, "Unknow¿Êash mode: %d!", ()
Êash_mode
);

507 
	`oßl_muãx_lock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

509 
ˇmîa_c⁄åﬁ
->
guzzi_‰_id
.
v
++;

510 
	`ˇmîa_c⁄fig_£t_begö
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

511 
îr
 = 
	`ˇmîa_c⁄fig_£t
(

512 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

513 
GUZZI_CAMERA3_INDEX_CONTROLS_CAPTURE_REQUEST_GUZZI_FR_ID
,

514 &
ˇmîa_c⁄åﬁ
->
guzzi_‰_id


516 
îr
 +
	`ˇmîa_c⁄fig_£t
(

517 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

518 
GUZZI_CAMERA3_INDEX_CONTROLS_CONTROL_AE_MODE
,

519 &
´_mode


521 
	`ˇmîa_c⁄fig_£t_íd
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

522 i‡(
îr
) {

523 
	`mmsdbg
(
DL_ERROR
, "Autoáe failed.\n");

525 
	`mmsdbg
(
DL_ERROR
,

526 "Autÿ´ suc˚eded camîa_id = %d.\n", 
ˇm_id
);

528 
ˇmîa_c⁄åﬁ
->
c⁄figs_to_skù
 = 1;

529 
	`oßl_muãx_u∆ock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

530 
	}
}

532 
	$ˇmîa_c⁄åﬁ_awb_mode
(
ˇm_id
, 
uöt32_t
 
mode
)

534 
ˇmîa_c⁄åﬁ_t
 *
ˇmîa_c⁄åﬁ
;

535 
guzzi_ˇmîa3_c⁄åﬁs_c⁄åﬁ_awb_mode_t
 
awb_mode
;

536 
guzzi_ˇmîa3_c⁄åﬁs_c⁄åﬁ_mode_t
 
˘æ_mode
;

537 
îr
;

539 
ˇmîa_c⁄åﬁ
 = &
g_ˇmîa_c⁄åﬁ
[
ˇm_id
];

540 
˘æ_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_MODE_AUTO
;

542 
mode
) {

543 
CAMERA_CONTROL__AWB_MODE__OFF
:

544 
awb_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AWB_MODE_OFF
;

546 
CAMERA_CONTROL__AWB_MODE__AUTO
:

547 
awb_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AWB_MODE_AUTO
;

549 
CAMERA_CONTROL__AWB_MODE__INCANDESCENT
:

550 
awb_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AWB_MODE_INCANDESCENT
;

552 
CAMERA_CONTROL__AWB_MODE__FLUORESCENT
:

553 
awb_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AWB_MODE_FLUORESCENT
;

555 
CAMERA_CONTROL__AWB_MODE__WARM_FLUORESCENT
:

556 
awb_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AWB_MODE_WARM_FLUORESCENT
;

558 
CAMERA_CONTROL__AWB_MODE__DAYLIGHT
:

559 
awb_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AWB_MODE_DAYLIGHT
;

561 
CAMERA_CONTROL__AWB_MODE__CLOUDY_DAYLIGHT
:

562 
awb_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AWB_MODE_CLOUDY_DAYLIGHT
;

564 
CAMERA_CONTROL__AWB_MODE__TWILIGHT
:

565 
awb_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AWB_MODE_TWILIGHT
;

567 
CAMERA_CONTROL__AWB_MODE__SHADE
:

568 
awb_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AWB_MODE_SHADE
;

571 
	`mmsdbg
(
DL_ERROR
, "Unknow¿awb mode: %d!", ()
mode
);

575 
	`oßl_muãx_lock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

577 
ˇmîa_c⁄åﬁ
->
guzzi_‰_id
.
v
++;

578 
	`ˇmîa_c⁄fig_£t_begö
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

579 
îr
 = 
	`ˇmîa_c⁄fig_£t
(

580 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

581 
GUZZI_CAMERA3_INDEX_CONTROLS_CAPTURE_REQUEST_GUZZI_FR_ID
,

582 &
ˇmîa_c⁄åﬁ
->
guzzi_‰_id


585 
îr
 +
	`ˇmîa_c⁄fig_£t
(

586 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

587 
GUZZI_CAMERA3_INDEX_CONTROLS_CONTROL_MODE
,

588 &
˘æ_mode


590 
îr
 +
	`ˇmîa_c⁄fig_£t
(

591 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

592 
GUZZI_CAMERA3_INDEX_CONTROLS_CONTROL_AWB_MODE
,

593 &
awb_mode


595 
	`ˇmîa_c⁄fig_£t_íd
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

596 i‡(
îr
) {

597 
	`mmsdbg
(
DL_ERROR
, "Setáwb mode failed.\n");

599 
	`mmsdbg
(
DL_ERROR
,

600 "Awb modê£àsuc˚eded camîa_id = %d, modê%d.\n", 
ˇm_id
, ()
mode
);

602 
ˇmîa_c⁄åﬁ
->
c⁄figs_to_skù
 = 1;

603 
	`oßl_muãx_u∆ock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

604 
	}
}

606 
	$ˇmîa_c⁄åﬁ_s˚√_mode
(
ˇm_id
, 
uöt32_t
 
mode
)

608 
ˇmîa_c⁄åﬁ_t
 *
ˇmîa_c⁄åﬁ
;

609 
guzzi_ˇmîa3_c⁄åﬁs_c⁄åﬁ_s˚√_mode_t
 
s˚√_mode
;

610 
îr
;

612 
ˇmîa_c⁄åﬁ
 = &
g_ˇmîa_c⁄åﬁ
[
ˇm_id
];

614 
mode
) {

615 
CAMERA_CONTROL__SCENE_MODE__UNSUPPORTED
:

616 
s˚√_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_SCENE_MODE_UNSUPPORTED
;

618 
CAMERA_CONTROL__SCENE_MODE__FACE_PRIORITY
:

619 
s˚√_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_SCENE_MODE_FACE_PRIORITY
;

621 
CAMERA_CONTROL__SCENE_MODE__ACTION
:

622 
s˚√_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_SCENE_MODE_ACTION
;

624 
CAMERA_CONTROL__SCENE_MODE__PORTRAIT
:

625 
s˚√_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_SCENE_MODE_PORTRAIT
;

627 
CAMERA_CONTROL__SCENE_MODE__LANDSCAPE
:

628 
s˚√_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_SCENE_MODE_LANDSCAPE
;

630 
CAMERA_CONTROL__SCENE_MODE__NIGHT
:

631 
s˚√_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_SCENE_MODE_NIGHT
;

633 
CAMERA_CONTROL__SCENE_MODE__NIGHT_PORTRAIT
:

634 
s˚√_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_SCENE_MODE_NIGHT_PORTRAIT
;

636 
CAMERA_CONTROL__SCENE_MODE__THEATRE
:

637 
s˚√_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_SCENE_MODE_THEATRE
;

639 
CAMERA_CONTROL__SCENE_MODE__BEACH
:

640 
s˚√_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_SCENE_MODE_BEACH
;

642 
CAMERA_CONTROL__SCENE_MODE__SNOW
:

643 
s˚√_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_SCENE_MODE_SNOW
;

645 
CAMERA_CONTROL__SCENE_MODE__SUNSET
:

646 
s˚√_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_SCENE_MODE_SUNSET
;

648 
CAMERA_CONTROL__SCENE_MODE__STEADYPHOTO
:

649 
s˚√_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_SCENE_MODE_STEADYPHOTO
;

651 
CAMERA_CONTROL__SCENE_MODE__FIREWORKS
:

652 
s˚√_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_SCENE_MODE_FIREWORKS
;

654 
CAMERA_CONTROL__SCENE_MODE__SPORTS
:

655 
s˚√_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_SCENE_MODE_SPORTS
;

657 
CAMERA_CONTROL__SCENE_MODE__PARTY
:

658 
s˚√_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_SCENE_MODE_PARTY
;

660 
CAMERA_CONTROL__SCENE_MODE__CANDLELIGHT
:

661 
s˚√_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_SCENE_MODE_CANDLELIGHT
;

663 
CAMERA_CONTROL__SCENE_MODE__BARCODE
:

664 
s˚√_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_SCENE_MODE_BARCODE
;

667 
	`mmsdbg
(
DL_ERROR
, "Unknow¿awb mode: %d!", ()
mode
);

671 
	`oßl_muãx_lock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

673 
ˇmîa_c⁄åﬁ
->
guzzi_‰_id
.
v
++;

674 
	`ˇmîa_c⁄fig_£t_begö
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

675 
îr
 = 
	`ˇmîa_c⁄fig_£t
(

676 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

677 
GUZZI_CAMERA3_INDEX_CONTROLS_CAPTURE_REQUEST_GUZZI_FR_ID
,

678 &
ˇmîa_c⁄åﬁ
->
guzzi_‰_id


682 
îr
 +
	`ˇmîa_c⁄fig_£t
(

683 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

684 
GUZZI_CAMERA3_INDEX_CONTROLS_CONTROL_SCENE_MODE
,

685 &
s˚√_mode


687 
	`ˇmîa_c⁄fig_£t_íd
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

688 i‡(
îr
) {

689 
	`mmsdbg
(
DL_ERROR
, "Set scene mode failed.\n");

691 
	`mmsdbg
(
DL_ERROR
,

692 "S˚√ modê£àsuc˚eded camîa_id = %d, modê%d.\n", 
ˇm_id
, ()
mode
);

694 
ˇmîa_c⁄åﬁ
->
c⁄figs_to_skù
 = 1;

695 
	`oßl_muãx_u∆ock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

696 
	}
}

698 
	$ˇmîa_c⁄åﬁ_™tib™dög_mode
(
ˇm_id
, 
uöt32_t
 
mode
)

700 
ˇmîa_c⁄åﬁ_t
 *
ˇmîa_c⁄åﬁ
;

701 
guzzi_ˇmîa3_c⁄åﬁs_c⁄åﬁ_´_™tib™dög_mode_t
 
™tib™dög_mode
;

702 
îr
;

704 
ˇmîa_c⁄åﬁ
 = &
g_ˇmîa_c⁄åﬁ
[
ˇm_id
];

706 
mode
) {

707 
CAMERA_CONTROL__AE_ANTIBANDING_MODE__OFF
:

708 
™tib™dög_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AE_ANTIBANDING_MODE_OFF
;

710 
CAMERA_CONTROL__AE_ANTIBANDING_MODE__50HZ
:

711 
™tib™dög_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AE_ANTIBANDING_MODE_50HZ
;

713 
CAMERA_CONTROL__AE_ANTIBANDING_MODE__60HZ
:

714 
™tib™dög_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AE_ANTIBANDING_MODE_60HZ
;

716 
CAMERA_CONTROL__AE_ANTIBANDING_MODE__AUTO
:

717 
™tib™dög_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AE_ANTIBANDING_MODE_AUTO
;

720 
	`mmsdbg
(
DL_ERROR
, "Unknow¿™tib™dög mode: %d!", ()
mode
);

724 
	`oßl_muãx_lock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

726 
ˇmîa_c⁄åﬁ
->
guzzi_‰_id
.
v
++;

727 
	`ˇmîa_c⁄fig_£t_begö
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

728 
îr
 = 
	`ˇmîa_c⁄fig_£t
(

729 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

730 
GUZZI_CAMERA3_INDEX_CONTROLS_CAPTURE_REQUEST_GUZZI_FR_ID
,

731 &
ˇmîa_c⁄åﬁ
->
guzzi_‰_id


733 
îr
 +
	`ˇmîa_c⁄fig_£t
(

734 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

735 
GUZZI_CAMERA3_INDEX_CONTROLS_CONTROL_AE_ANTIBANDING_MODE
,

736 &
™tib™dög_mode


738 
	`ˇmîa_c⁄fig_£t_íd
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

739 i‡(
îr
) {

740 
	`mmsdbg
(
DL_ERROR
, "Setántibanding mode failed.\n");

742 
	`mmsdbg
(
DL_ERROR
,

743 "A¡ib™dög modê£àsuc˚eded camîa_id = %d, modê%d.\n", 
ˇm_id
, ()
mode
);

745 
ˇmîa_c⁄åﬁ
->
c⁄figs_to_skù
 = 1;

746 
	`oßl_muãx_u∆ock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

747 
	}
}

749 
	$ˇmîa_c⁄åﬁ_´_lock_mode
(
ˇm_id
, 
uöt32_t
 
mode
)

751 
ˇmîa_c⁄åﬁ_t
 *
ˇmîa_c⁄åﬁ
;

752 
guzzi_ˇmîa3_c⁄åﬁs_c⁄åﬁ_´_lock_t
 
´_lock_mode
;

753 
îr
;

755 
ˇmîa_c⁄åﬁ
 = &
g_ˇmîa_c⁄åﬁ
[
ˇm_id
];

757 
mode
) {

758 
CAMERA_CONTROL__AE_LOCK__OFF
:

759 
´_lock_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AE_LOCK_OFF
;

761 
CAMERA_CONTROL__AE_LOCK__ON
:

762 
´_lock_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AE_LOCK_ON
;

765 
	`mmsdbg
(
DL_ERROR
, "Unknow¿´_lock comm™d: %d!", ()
mode
);

769 
	`oßl_muãx_lock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

771 
ˇmîa_c⁄åﬁ
->
guzzi_‰_id
.
v
++;

772 
	`ˇmîa_c⁄fig_£t_begö
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

773 
îr
 = 
	`ˇmîa_c⁄fig_£t
(

774 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

775 
GUZZI_CAMERA3_INDEX_CONTROLS_CAPTURE_REQUEST_GUZZI_FR_ID
,

776 &
ˇmîa_c⁄åﬁ
->
guzzi_‰_id


778 
îr
 +
	`ˇmîa_c⁄fig_£t
(

779 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

780 
GUZZI_CAMERA3_INDEX_CONTROLS_CONTROL_AE_LOCK
,

781 &
´_lock_mode


783 
	`ˇmîa_c⁄fig_£t_íd
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

784 i‡(
îr
) {

785 
	`mmsdbg
(
DL_ERROR
, "Setáe_lock control mode failed.\n");

787 
	`mmsdbg
(
DL_ERROR
,

788 "Ae_lock c⁄åﬁ suc˚eded: camîa_id = %d, modê%d.\n", 
ˇm_id
, ()
mode
);

790 
ˇmîa_c⁄åﬁ
->
c⁄figs_to_skù
 = 1;

791 
	`oßl_muãx_u∆ock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

792 
	}
}

794 
	$ˇmîa_c⁄åﬁ_´_èrgë_Âs_ønge
(
ˇm_id
, 
uöt32_t
 
mö_Âs
, uöt32_à
max_Âs
)

796 
ˇmîa_c⁄åﬁ_t
 *
ˇmîa_c⁄åﬁ
;

797 
guzzi_ˇmîa3_c⁄åﬁs_c⁄åﬁ_´_èrgë_Âs_ønge_t
 
èrgë_Âs_ønge
;

798 
guzzi_ˇmîa3_°©ic_c⁄åﬁ_´_avaûabÀ_èrgë_Âs_ønges_t
 
check
;

799 
îr
;

801 
ˇmîa_c⁄åﬁ
 = &
g_ˇmîa_c⁄åﬁ
[
ˇm_id
];

802 
èrgë_Âs_ønge
.
dim_size_1
 =

803 
GUZZI_CAMERA3_STATIC_CONTROL_AE_AVAILABLE_TARGET_FPS_RANGES_DIM_MAX_SIZE_1
;

804 
èrgë_Âs_ønge
.
v
[0] = 
mö_Âs
;

805 
èrgë_Âs_ønge
.
v
[1] = 
max_Âs
;

807 
	`ˇmîa_c⁄fig_gë
(

808 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

809 
GUZZI_CAMERA3_INDEX_STATIC_CONTROL_AE_AVAILABLE_TARGET_FPS_RANGES
,

810 &
check


812 
	`mmsdbg
(
DL_ERROR
, "AvailableÑanges: dim1:%d, dim2:%d\n",

813 
check
.
dim_size_1
, check.
dim_size_2
);

815 
	`oßl_muãx_lock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

817 
ˇmîa_c⁄åﬁ
->
guzzi_‰_id
.
v
++;

818 
	`ˇmîa_c⁄fig_£t_begö
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

819 
îr
 = 
	`ˇmîa_c⁄fig_£t
(

820 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

821 
GUZZI_CAMERA3_INDEX_CONTROLS_CAPTURE_REQUEST_GUZZI_FR_ID
,

822 &
ˇmîa_c⁄åﬁ
->
guzzi_‰_id


824 
îr
 +
	`ˇmîa_c⁄fig_£t
(

825 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

826 
GUZZI_CAMERA3_INDEX_CONTROLS_CONTROL_AE_TARGET_FPS_RANGE
,

827 &
èrgë_Âs_ønge


829 
	`ˇmîa_c⁄fig_£t_íd
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

830 i‡(
îr
) {

831 
	`mmsdbg
(
DL_ERROR
, "SetÅarget_fps control mode failed.\n");

833 
	`mmsdbg
(
DL_ERROR
,

835 
ˇm_id
, ()
mö_Âs
, ()
max_Âs
);

837 
ˇmîa_c⁄åﬁ
->
c⁄figs_to_skù
 = 1;

838 
	`oßl_muãx_u∆ock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

839 
	}
}

841 
	$ˇmîa_c⁄åﬁ_awb_lock_mode
(
ˇm_id
, 
uöt32_t
 
ty≥
)

843 
ˇmîa_c⁄åﬁ_t
 *
ˇmîa_c⁄åﬁ
;

844 
guzzi_ˇmîa3_c⁄åﬁs_c⁄åﬁ_awb_lock_t
 
awb_lock_c⁄åﬁ
;

845 
guzzi_ˇmîa3_c⁄åﬁs_c⁄åﬁ_awb_mode_t
 
awb_mode
;

846 
îr
;

848 
ˇmîa_c⁄åﬁ
 = &
g_ˇmîa_c⁄åﬁ
[
ˇm_id
];

849 
awb_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AWB_MODE_AUTO
;

851 
ty≥
) {

852 
CAMERA_CONTROL__AWB_LOCK__OFF
:

853 
awb_lock_c⁄åﬁ
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AWB_LOCK_OFF
;

855 
CAMERA_CONTROL__AWB_LOCK__ON
:

856 
awb_lock_c⁄åﬁ
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AWB_LOCK_ON
;

859 
	`mmsdbg
(
DL_ERROR
, "Unknow¿awb_lock comm™d: %d!", ()
ty≥
);

863 
	`oßl_muãx_lock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

865 
ˇmîa_c⁄åﬁ
->
guzzi_‰_id
.
v
++;

866 
	`ˇmîa_c⁄fig_£t_begö
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

867 
îr
 = 
	`ˇmîa_c⁄fig_£t
(

868 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

869 
GUZZI_CAMERA3_INDEX_CONTROLS_CAPTURE_REQUEST_GUZZI_FR_ID
,

870 &
ˇmîa_c⁄åﬁ
->
guzzi_‰_id


872 
îr
 +
	`ˇmîa_c⁄fig_£t
(

873 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

874 
GUZZI_CAMERA3_INDEX_CONTROLS_CONTROL_AWB_MODE
,

875 &
awb_mode


877 
îr
 +
	`ˇmîa_c⁄fig_£t
(

878 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

879 
GUZZI_CAMERA3_INDEX_CONTROLS_CONTROL_AWB_LOCK
,

880 &
awb_lock_c⁄åﬁ


882 
	`ˇmîa_c⁄fig_£t_íd
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

883 i‡(
îr
) {

884 
	`mmsdbg
(
DL_ERROR
, "Setáwb_lock control mode failed.\n");

886 
	`mmsdbg
(
DL_ERROR
,

887 "Awb_lock c⁄åﬁ suc˚eded: camîa_id = %d, modê%d.\n", 
ˇm_id
, ()
ty≥
);

889 
ˇmîa_c⁄åﬁ
->
c⁄figs_to_skù
 = 1;

890 
	`oßl_muãx_u∆ock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

891 
	}
}

893 
	$ˇmîa_c⁄åﬁ_ˇ±uª_öã¡
(
ˇm_id
, 
uöt32_t
 
mode
)

895 
ˇmîa_c⁄åﬁ_t
 *
ˇmîa_c⁄åﬁ
;

896 
guzzi_ˇmîa3_c⁄åﬁs_c⁄åﬁ_ˇ±uª_öã¡_t
 
ˇ±uª_öã¡
;

897 
guzzi_ˇmîa3_c⁄åﬁs_c⁄åﬁ_mode_t
 
˘æ_mode
;

898 
îr
;

900 
ˇmîa_c⁄åﬁ
 = &
g_ˇmîa_c⁄åﬁ
[
ˇm_id
];

901 
˘æ_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_MODE_AUTO
;

903 
mode
) {

904 
CAMERA_CONTROL__CAPTURE_INTENT__CUSTOM
:

905 
ˇ±uª_öã¡
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_CAPTURE_INTENT_CUSTOM
;

907 
CAMERA_CONTROL__CAPTURE_INTENT__PREVIEW
:

908 
ˇ±uª_öã¡
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_CAPTURE_INTENT_PREVIEW
;

910 
CAMERA_CONTROL__CAPTURE_INTENT__STILL_CAPTURE
:

911 
ˇ±uª_öã¡
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_CAPTURE_INTENT_STILL_CAPTURE
;

913 
CAMERA_CONTROL__CAPTURE_INTENT__VIDEO_RECORD
:

914 
ˇ±uª_öã¡
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_CAPTURE_INTENT_VIDEO_RECORD
;

916 
CAMERA_CONTROL__CAPTURE_INTENT__VIDEO_SNAPSHOT
:

917 
ˇ±uª_öã¡
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_CAPTURE_INTENT_VIDEO_SNAPSHOT
;

919 
CAMERA_CONTROL__CAPTURE_INTENT__ZERO_SHUTTER_LAG
:

920 
ˇ±uª_öã¡
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_CAPTURE_INTENT_ZERO_SHUTTER_LAG
;

923 
	`mmsdbg
(
DL_ERROR
, "Unknow¿ˇ±uª_öã¡ comm™d: %d!", ()
mode
);

927 
	`oßl_muãx_lock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

929 
ˇmîa_c⁄åﬁ
->
guzzi_‰_id
.
v
++;

930 
	`ˇmîa_c⁄fig_£t_begö
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

931 
îr
 = 
	`ˇmîa_c⁄fig_£t
(

932 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

933 
GUZZI_CAMERA3_INDEX_CONTROLS_CAPTURE_REQUEST_GUZZI_FR_ID
,

934 &
ˇmîa_c⁄åﬁ
->
guzzi_‰_id


936 
îr
 +
	`ˇmîa_c⁄fig_£t
(

937 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

938 
GUZZI_CAMERA3_INDEX_CONTROLS_CONTROL_MODE
,

939 &
˘æ_mode


941 
îr
 +
	`ˇmîa_c⁄fig_£t
(

942 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

943 
GUZZI_CAMERA3_INDEX_CONTROLS_CONTROL_CAPTURE_INTENT
,

944 &
ˇ±uª_öã¡


946 
	`ˇmîa_c⁄fig_£t_íd
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

947 i‡(
îr
) {

948 
	`mmsdbg
(
DL_ERROR
, "Set capture_intent control mode failed.\n");

950 
	`mmsdbg
(
DL_ERROR
,

951 "C≠tuª_öã¡ c⁄åﬁ suc˚eded: camîa_id = %d, modê%d.\n", 
ˇm_id
, ()
mode
);

953 
ˇmîa_c⁄åﬁ
->
c⁄figs_to_skù
 = 1;

954 
	`oßl_muãx_u∆ock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

955 
	}
}

957 
	$ˇmîa_c⁄åﬁ_mode
(
ˇm_id
, 
uöt32_t
 
mode
)

959 
ˇmîa_c⁄åﬁ_t
 *
ˇmîa_c⁄åﬁ
;

960 
guzzi_ˇmîa3_c⁄åﬁs_c⁄åﬁ_mode_t
 
˘æ_mode
;

961 
îr
;

963 
ˇmîa_c⁄åﬁ
 = &
g_ˇmîa_c⁄åﬁ
[
ˇm_id
];

965 
mode
) {

966 
CAMERA_CONTROL__MODE__OFF
:

967 
˘æ_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_MODE_OFF
;

969 
CAMERA_CONTROL__MODE__AUTO
:

970 
˘æ_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_MODE_AUTO
;

972 
CAMERA_CONTROL__MODE__USE_SCENE_MODE
:

973 
˘æ_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_MODE_USE_SCENE_MODE
;

976 
	`mmsdbg
(
DL_ERROR
, "Unknow¿˘æ_modêcomm™d: %d!", ()
mode
);

980 
	`oßl_muãx_lock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

982 
ˇmîa_c⁄åﬁ
->
guzzi_‰_id
.
v
++;

983 
	`ˇmîa_c⁄fig_£t_begö
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

984 
îr
 = 
	`ˇmîa_c⁄fig_£t
(

985 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

986 
GUZZI_CAMERA3_INDEX_CONTROLS_CAPTURE_REQUEST_GUZZI_FR_ID
,

987 &
ˇmîa_c⁄åﬁ
->
guzzi_‰_id


989 
îr
 +
	`ˇmîa_c⁄fig_£t
(

990 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

991 
GUZZI_CAMERA3_INDEX_CONTROLS_CONTROL_MODE
,

992 &
˘æ_mode


994 
	`ˇmîa_c⁄fig_£t_íd
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

995 i‡(
îr
) {

996 
	`mmsdbg
(
DL_ERROR
, "Set control mode failed.\n");

998 
	`mmsdbg
(
DL_ERROR
,

999 "C⁄åﬁ modê£àsuc˚eded: camîa_id = %d, modê%d.\n", 
ˇm_id
, ()
mode
);

1001 
ˇmîa_c⁄åﬁ
->
c⁄figs_to_skù
 = 1;

1002 
	`oßl_muãx_u∆ock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

1003 
	}
}

1005 
	$ˇmîa_c⁄åﬁ_‰ame_duøti⁄
(
ˇm_id
, 
uöt64_t
 
vÆ
)

1007 
ˇmîa_c⁄åﬁ_t
 *
ˇmîa_c⁄åﬁ
;

1008 
guzzi_ˇmîa3_c⁄åﬁs_£ns‹_‰ame_duøti⁄_t
 
‰ame_duøti⁄
;

1009 
îr
;

1011 
ˇmîa_c⁄åﬁ
 = &
g_ˇmîa_c⁄åﬁ
[
ˇm_id
];

1012 
‰ame_duøti⁄
.
v
 = 
vÆ
;

1014 
	`oßl_muãx_lock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

1016 
ˇmîa_c⁄åﬁ
->
guzzi_‰_id
.
v
++;

1017 
	`ˇmîa_c⁄fig_£t_begö
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

1018 
îr
 = 
	`ˇmîa_c⁄fig_£t
(

1019 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

1020 
GUZZI_CAMERA3_INDEX_CONTROLS_CAPTURE_REQUEST_GUZZI_FR_ID
,

1021 &
ˇmîa_c⁄åﬁ
->
guzzi_‰_id


1023 
îr
 +
	`ˇmîa_c⁄fig_£t
(

1024 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

1025 
GUZZI_CAMERA3_INDEX_CONTROLS_SENSOR_FRAME_DURATION
,

1026 &
‰ame_duøti⁄


1028 
	`ˇmîa_c⁄fig_£t_íd
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

1029 i‡(
îr
) {

1030 
	`mmsdbg
(
DL_ERROR
, "Set sensor frame duration failed.\n");

1032 
	`mmsdbg
(
DL_ERROR
,

1033 "Sís‹ fømêduøti⁄ së suc˚eded: camîa_id = %d, duøti⁄ = %d.\n", 
ˇm_id
, ()
vÆ
);

1035 
ˇmîa_c⁄åﬁ
->
c⁄figs_to_skù
 = 1;

1036 
	`oßl_muãx_u∆ock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

1037 
	}
}

1040 
	$ˇmîa_c⁄åﬁ_exp_com≥nßti⁄
(
ˇm_id
, 
uöt32_t
 
vÆ
)

1042 
ˇmîa_c⁄åﬁ_t
 *
ˇmîa_c⁄åﬁ
;

1043 
guzzi_ˇmîa3_c⁄åﬁs_c⁄åﬁ_´_exposuª_com≥nßti⁄_t
 
exp_com≥nßti⁄
;

1044 
îr
;

1046 
ˇmîa_c⁄åﬁ
 = &
g_ˇmîa_c⁄åﬁ
[
ˇm_id
];

1047 
exp_com≥nßti⁄
.
v
 = 
vÆ
;

1049 
	`oßl_muãx_lock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

1051 
ˇmîa_c⁄åﬁ
->
guzzi_‰_id
.
v
++;

1052 
	`ˇmîa_c⁄fig_£t_begö
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

1053 
îr
 = 
	`ˇmîa_c⁄fig_£t
(

1054 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

1055 
GUZZI_CAMERA3_INDEX_CONTROLS_CAPTURE_REQUEST_GUZZI_FR_ID
,

1056 &
ˇmîa_c⁄åﬁ
->
guzzi_‰_id


1058 
îr
 +
	`ˇmîa_c⁄fig_£t
(

1059 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

1060 
GUZZI_CAMERA3_INDEX_CONTROLS_CONTROL_AE_EXPOSURE_COMPENSATION
,

1061 &
exp_com≥nßti⁄


1063 
	`ˇmîa_c⁄fig_£t_íd
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

1064 i‡(
îr
) {

1065 
	`mmsdbg
(
DL_ERROR
, "SetÉxposure compensation failed.\n");

1067 
	`mmsdbg
(
DL_ERROR
,

1068 "Exposuª com≥nßti⁄ së suc˚eded: camîa_id = %d, vÆ = %d.\n", 
ˇm_id
, ()
vÆ
);

1070 
ˇmîa_c⁄åﬁ
->
c⁄figs_to_skù
 = 1;

1071 
	`oßl_muãx_u∆ock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

1072 
	}
}

1074 
	$ˇmîa_c⁄åﬁ_£nsôivôy
(
ˇm_id
, 
uöt32_t
 
iso_vÆ
)

1076 
ˇmîa_c⁄åﬁ_t
 *
ˇmîa_c⁄åﬁ
;

1077 
guzzi_ˇmîa3_c⁄åﬁs_£ns‹_£nsôivôy_t
 
£nsôivôy
;

1079 
guzzi_ˇmîa3_c⁄åﬁs_c⁄åﬁ_´_mode_t
 
´_mode
;

1080 
îr
;

1082 
ˇmîa_c⁄åﬁ
 = &
g_ˇmîa_c⁄åﬁ
[
ˇm_id
];

1083 
£nsôivôy
.
v
 = 
iso_vÆ
;

1084 
´_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AE_MODE_OFF
;

1086 
	`oßl_muãx_lock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

1088 
ˇmîa_c⁄åﬁ
->
guzzi_‰_id
.
v
++;

1089 
	`ˇmîa_c⁄fig_£t_begö
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

1090 
îr
 = 
	`ˇmîa_c⁄fig_£t
(

1091 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

1092 
GUZZI_CAMERA3_INDEX_CONTROLS_CAPTURE_REQUEST_GUZZI_FR_ID
,

1093 &
ˇmîa_c⁄åﬁ
->
guzzi_‰_id


1095 
îr
 +
	`ˇmîa_c⁄fig_£t
(

1096 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

1097 
GUZZI_CAMERA3_INDEX_CONTROLS_SENSOR_SENSITIVITY
,

1098 &
£nsôivôy


1100 
îr
 +
	`ˇmîa_c⁄fig_£t
(

1101 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

1102 
GUZZI_CAMERA3_INDEX_CONTROLS_CONTROL_AE_MODE
,

1103 &
´_mode


1105 
	`ˇmîa_c⁄fig_£t_íd
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

1106 i‡(
îr
) {

1107 
	`mmsdbg
(
DL_ERROR
, "Set ISO failed.\n");

1109 
	`mmsdbg
(
DL_ERROR
,

1110 "ISO së suc˚eded: camîa_id = %d, vÆ = %d.\n", 
ˇm_id
, ()
iso_vÆ
);

1112 
ˇmîa_c⁄åﬁ
->
c⁄figs_to_skù
 = 1;

1113 
	`oßl_muãx_u∆ock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

1114 
	}
}

1116 
	$ˇmîa_c⁄åﬁ_ef„˘_mode
(
ˇm_id
, 
uöt32_t
 
mode
)

1118 
ˇmîa_c⁄åﬁ_t
 *
ˇmîa_c⁄åﬁ
;

1119 
guzzi_ˇmîa3_c⁄åﬁs_c⁄åﬁ_ef„˘_mode_t
 
ef„˘_mode
;

1120 
îr
;

1122 
ˇmîa_c⁄åﬁ
 = &
g_ˇmîa_c⁄åﬁ
[
ˇm_id
];

1124 
mode
) {

1125 
CAMERA_CONTROL__EFFECT_MODE__OFF
:

1126 
ef„˘_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_EFFECT_MODE_OFF
;

1128 
CAMERA_CONTROL__EFFECT_MODE__MONO
:

1129 
ef„˘_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_EFFECT_MODE_MONO
;

1131 
CAMERA_CONTROL__EFFECT_MODE__NEGATIVE
:

1132 
ef„˘_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_EFFECT_MODE_NEGATIVE
;

1134 
CAMERA_CONTROL__EFFECT_MODE__SOLARIZE
:

1135 
ef„˘_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_EFFECT_MODE_SOLARIZE
;

1137 
CAMERA_CONTROL__EFFECT_MODE__SEPIA
:

1138 
ef„˘_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_EFFECT_MODE_SEPIA
;

1140 
CAMERA_CONTROL__EFFECT_MODE__POSTERIZE
:

1141 
ef„˘_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_EFFECT_MODE_POSTERIZE
;

1143 
CAMERA_CONTROL__EFFECT_MODE__WHITEBOARD
:

1144 
ef„˘_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_EFFECT_MODE_WHITEBOARD
;

1146 
CAMERA_CONTROL__EFFECT_MODE__BLACKBOARD
:

1147 
ef„˘_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_EFFECT_MODE_BLACKBOARD
;

1149 
CAMERA_CONTROL__EFFECT_MODE__AQUA
:

1150 
ef„˘_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_EFFECT_MODE_AQUA
;

1153 
	`mmsdbg
(
DL_ERROR
, "Unknow¿awb mode: %d!", ()
mode
);

1157 
	`oßl_muãx_lock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

1159 
ˇmîa_c⁄åﬁ
->
guzzi_‰_id
.
v
++;

1160 
	`ˇmîa_c⁄fig_£t_begö
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

1161 
îr
 = 
	`ˇmîa_c⁄fig_£t
(

1162 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

1163 
GUZZI_CAMERA3_INDEX_CONTROLS_CAPTURE_REQUEST_GUZZI_FR_ID
,

1164 &
ˇmîa_c⁄åﬁ
->
guzzi_‰_id


1167 
îr
 +
	`ˇmîa_c⁄fig_£t
(

1168 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

1169 
GUZZI_CAMERA3_INDEX_CONTROLS_CONTROL_EFFECT_MODE
,

1170 &
ef„˘_mode


1172 
	`ˇmîa_c⁄fig_£t_íd
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

1173 i‡(
îr
) {

1174 
	`mmsdbg
(
DL_ERROR
, "SetÉffect mode failed.\n");

1176 
	`mmsdbg
(
DL_ERROR
,

1177 "Ef„˘ modê£àsuc˚eded camîa_id = %d, modê%d.\n", 
ˇm_id
, ()
mode
);

1179 
ˇmîa_c⁄åﬁ
->
c⁄figs_to_skù
 = 1;

1180 
	`oßl_muãx_u∆ock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

1181 
	}
}

1183 
	$ˇmîa_c⁄åﬁ_af_mode
(
ˇm_id
, 
uöt32_t
 
mode
)

1185 
ˇmîa_c⁄åﬁ_t
 *
ˇmîa_c⁄åﬁ
;

1186 
guzzi_ˇmîa3_c⁄åﬁs_c⁄åﬁ_af_mode_t
 
af_mode
;

1187 
îr
;

1189 
ˇmîa_c⁄åﬁ
 = &
g_ˇmîa_c⁄åﬁ
[
ˇm_id
];

1191 
mode
) {

1192 
CAMERA_CONTROL__AF_MODE_OFF
:

1193 
af_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AF_MODE_OFF
;

1195 
CAMERA_CONTROL__AF_MODE_AUTO
:

1196 
af_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AF_MODE_AUTO
;

1198 
CAMERA_CONTROL__AF_MODE_MACRO
:

1199 
af_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AF_MODE_MACRO
;

1201 
CAMERA_CONTROL__AF_MODE_CONTINUOUS_VIDEO
:

1202 
af_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AF_MODE_CONTINUOUS_VIDEO
;

1204 
CAMERA_CONTROL__AF_MODE_CONTINUOUS_PICTURE
:

1205 
af_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AF_MODE_CONTINUOUS_PICTURE
;

1207 
CAMERA_CONTROL__AF_MODE_EDOF
:

1208 
af_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AF_MODE_EDOF
;

1211 
	`mmsdbg
(
DL_ERROR
, "Unknow¿a‡mode: %d!", ()
mode
);

1215 
	`oßl_muãx_lock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

1217 
ˇmîa_c⁄åﬁ
->
guzzi_‰_id
.
v
++;

1218 
	`ˇmîa_c⁄fig_£t_begö
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

1219 
îr
 = 
	`ˇmîa_c⁄fig_£t
(

1220 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

1221 
GUZZI_CAMERA3_INDEX_CONTROLS_CAPTURE_REQUEST_GUZZI_FR_ID
,

1222 &
ˇmîa_c⁄åﬁ
->
guzzi_‰_id


1224 
îr
 +
	`ˇmîa_c⁄fig_£t
(

1225 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

1226 
GUZZI_CAMERA3_INDEX_CONTROLS_CONTROL_AF_MODE
,

1227 &
af_mode


1229 
	`ˇmîa_c⁄fig_£t_íd
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

1230 i‡(
îr
) {

1231 
	`mmsdbg
(
DL_ERROR
, "Setáf mode failed.\n");

1233 
	`mmsdbg
(
DL_ERROR
,

1234 "A‡modê£àsuc˚eded camîa_id = %d, modê%d.\n", 
ˇm_id
, ()
mode
);

1236 
ˇmîa_c⁄åﬁ
->
c⁄figs_to_skù
 = 1;

1237 
	`oßl_muãx_u∆ock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

1238 
	}
}

1240 
	$ˇmîa_c⁄åﬁ_noi£_ªdu˘i⁄_°ªngth
(
ˇm_id
, 
uöt32_t
 
°ªngth_vÆ
)

1242 
ˇmîa_c⁄åﬁ_t
 *
ˇmîa_c⁄åﬁ
;

1243 
guzzi_ˇmîa3_c⁄åﬁs_noi£_ªdu˘i⁄_°ªngth_t
 
°ªngth
;

1244 
guzzi_ˇmîa3_c⁄åﬁs_noi£_ªdu˘i⁄_mode_t
 
mode
;

1245 
îr
;

1247 
ˇmîa_c⁄åﬁ
 = &
g_ˇmîa_c⁄åﬁ
[
ˇm_id
];

1248 
°ªngth
.
v
 = 
°ªngth_vÆ
;

1249 
mode
.
v
 = 
GUZZI_CAMERA3_ENUM_NOISE_REDUCTION_MODE_FAST
;

1251 
	`oßl_muãx_lock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

1253 
ˇmîa_c⁄åﬁ
->
guzzi_‰_id
.
v
++;

1254 
	`ˇmîa_c⁄fig_£t_begö
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

1255 
îr
 = 
	`ˇmîa_c⁄fig_£t
(

1256 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

1257 
GUZZI_CAMERA3_INDEX_CONTROLS_CAPTURE_REQUEST_GUZZI_FR_ID
,

1258 &
ˇmîa_c⁄åﬁ
->
guzzi_‰_id


1260 
îr
 +
	`ˇmîa_c⁄fig_£t
(

1261 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

1262 
GUZZI_CAMERA3_INDEX_CONTROLS_NOISE_REDUCTION_STRENGTH
,

1263 &
°ªngth


1265 
îr
 +
	`ˇmîa_c⁄fig_£t
(

1266 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

1267 
GUZZI_CAMERA3_INDEX_CONTROLS_NOISE_REDUCTION_MODE
,

1268 &
mode


1270 
	`ˇmîa_c⁄fig_£t_íd
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

1271 i‡(
îr
) {

1272 
	`mmsdbg
(
DL_ERROR
, "SetÇoiseÑeduction strength failed.\n");

1274 
	`mmsdbg
(
DL_ERROR
,

1276 
ˇm_id
, ()
°ªngth_vÆ
);

1278 
ˇmîa_c⁄åﬁ
->
c⁄figs_to_skù
 = 1;

1279 
	`oßl_muãx_u∆ock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

1280 
	}
}

1282 
	$ˇmîa_c⁄åﬁ_ßtuøti⁄
(
ˇm_id
, 
uöt32_t
 
ßtuøti⁄_vÆ
)

1284 
ˇmîa_c⁄åﬁ_t
 *
ˇmîa_c⁄åﬁ
;

1286 
îr
;

1288 
ˇmîa_c⁄åﬁ
 = &
g_ˇmîa_c⁄åﬁ
[
ˇm_id
];

1291 
	`oßl_muãx_lock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

1293 
ˇmîa_c⁄åﬁ
->
guzzi_‰_id
.
v
++;

1294 
	`ˇmîa_c⁄fig_£t_begö
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

1295 
îr
 = 
	`ˇmîa_c⁄fig_£t
(

1296 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

1297 
GUZZI_CAMERA3_INDEX_CONTROLS_CAPTURE_REQUEST_GUZZI_FR_ID
,

1298 &
ˇmîa_c⁄åﬁ
->
guzzi_‰_id


1305 
	`ˇmîa_c⁄fig_£t_íd
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

1306 i‡(
îr
) {

1307 
	`mmsdbg
(
DL_ERROR
, "Set saturation failed.\n");

1309 
	`mmsdbg
(
DL_ERROR
,

1311 
ˇm_id
, ()
ßtuøti⁄_vÆ
);

1313 
ˇmîa_c⁄åﬁ
->
c⁄figs_to_skù
 = 1;

1314 
	`oßl_muãx_u∆ock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

1315 
	}
}

1317 
	$ˇmîa_c⁄åﬁ_brighäess
(
ˇm_id
, 
uöt32_t
 
brighäess_vÆ
)

1319 
ˇmîa_c⁄åﬁ_t
 *
ˇmîa_c⁄åﬁ
;

1321 
îr
;

1323 
ˇmîa_c⁄åﬁ
 = &
g_ˇmîa_c⁄åﬁ
[
ˇm_id
];

1326 
	`oßl_muãx_lock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

1328 
ˇmîa_c⁄åﬁ
->
guzzi_‰_id
.
v
++;

1329 
	`ˇmîa_c⁄fig_£t_begö
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

1330 
îr
 = 
	`ˇmîa_c⁄fig_£t
(

1331 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

1332 
GUZZI_CAMERA3_INDEX_CONTROLS_CAPTURE_REQUEST_GUZZI_FR_ID
,

1333 &
ˇmîa_c⁄åﬁ
->
guzzi_‰_id


1340 
	`ˇmîa_c⁄fig_£t_íd
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

1341 i‡(
îr
) {

1342 
	`mmsdbg
(
DL_ERROR
, "Set brightness failed.\n");

1344 
	`mmsdbg
(
DL_ERROR
,

1346 
ˇm_id
, ()
brighäess_vÆ
);

1348 
ˇmîa_c⁄åﬁ
->
c⁄figs_to_skù
 = 1;

1349 
	`oßl_muãx_u∆ock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

1350 
	}
}

1352 
	$ˇmîa_c⁄åﬁ_f‹m©
(
ˇm_id
, 
uöt32_t
 
f‹m©_ty≥
)

1362 
	`mmsdbg
(
DL_ERROR
,

1364 
ˇm_id
, ()
f‹m©_ty≥
);

1383 
	}
}

1385 
	$ˇmîa_c⁄åﬁ_ªsﬁuti⁄
(
ˇm_id
, 
uöt32_t
 
w
, uöt32_à
h
)

1398 
	`mmsdbg
(
DL_ERROR
,

1400 
ˇm_id
, ()
w
, ()
h
);

1419 
	}
}

1421 
	$ˇmîa_c⁄åﬁ_sh¨≤ess
(
ˇm_id
, 
uöt32_t
 
sh¨≤ess_vÆ
)

1423 
ˇmîa_c⁄åﬁ_t
 *
ˇmîa_c⁄åﬁ
;

1424 
guzzi_ˇmîa3_c⁄åﬁs_edge_°ªngth_t
 
sh¨≤ess
;

1425 
îr
;

1427 
ˇmîa_c⁄åﬁ
 = &
g_ˇmîa_c⁄åﬁ
[
ˇm_id
];

1428 
sh¨≤ess
.
v
 = 
sh¨≤ess_vÆ
;

1430 
	`oßl_muãx_lock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

1432 
ˇmîa_c⁄åﬁ
->
guzzi_‰_id
.
v
++;

1433 
	`ˇmîa_c⁄fig_£t_begö
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

1434 
îr
 = 
	`ˇmîa_c⁄fig_£t
(

1435 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

1436 
GUZZI_CAMERA3_INDEX_CONTROLS_CAPTURE_REQUEST_GUZZI_FR_ID
,

1437 &
ˇmîa_c⁄åﬁ
->
guzzi_‰_id


1439 
îr
 +
	`ˇmîa_c⁄fig_£t
(

1440 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

1441 
GUZZI_CAMERA3_INDEX_CONTROLS_EDGE_STRENGTH
,

1442 &
sh¨≤ess


1444 
	`ˇmîa_c⁄fig_£t_íd
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

1445 i‡(
îr
) {

1446 
	`mmsdbg
(
DL_ERROR
, "Set sharpness failed.\n");

1448 
	`mmsdbg
(
DL_ERROR
,

1450 
ˇm_id
, ()
sh¨≤ess_vÆ
);

1452 
ˇmîa_c⁄åﬁ
->
c⁄figs_to_skù
 = 1;

1453 
	`oßl_muãx_u∆ock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

1454 
	}
}

	@cdk/apps/arch/ma2x5x/cdk_FLIC_1xIMX214_2xIMX208/leon/camera_control.h

35 #i‚de‡
_CAMERA_CONTROL_H


36 
	#_CAMERA_CONTROL_H


	)

38 
	~<°döt.h
>

41 
	mCAMERA_CONTROL__AE_AUTO__FLASH_MODE__OFF
,

42 
	mCAMERA_CONTROL__AE_AUTO__FLASH_MODE__AUTO
,

43 
	mCAMERA_CONTROL__AE_AUTO__FLASH_MODE__ALWAYS
,

44 
	mCAMERA_CONTROL__AE_AUTO__FLASH_MODE__AUTO_REDEYE
,

48 
	mCAMERA_CONTROL__AWB_MODE__OFF
,

49 
	mCAMERA_CONTROL__AWB_MODE__AUTO
,

50 
	mCAMERA_CONTROL__AWB_MODE__INCANDESCENT
,

51 
	mCAMERA_CONTROL__AWB_MODE__FLUORESCENT
,

52 
	mCAMERA_CONTROL__AWB_MODE__WARM_FLUORESCENT
,

53 
	mCAMERA_CONTROL__AWB_MODE__DAYLIGHT
,

54 
	mCAMERA_CONTROL__AWB_MODE__CLOUDY_DAYLIGHT
,

55 
	mCAMERA_CONTROL__AWB_MODE__TWILIGHT
,

56 
	mCAMERA_CONTROL__AWB_MODE__SHADE
,

60 
	mCAMERA_CONTROL__SCENE_MODE__UNSUPPORTED
,

61 
	mCAMERA_CONTROL__SCENE_MODE__FACE_PRIORITY
,

62 
	mCAMERA_CONTROL__SCENE_MODE__ACTION
,

63 
	mCAMERA_CONTROL__SCENE_MODE__PORTRAIT
,

64 
	mCAMERA_CONTROL__SCENE_MODE__LANDSCAPE
,

65 
	mCAMERA_CONTROL__SCENE_MODE__NIGHT
,

66 
	mCAMERA_CONTROL__SCENE_MODE__NIGHT_PORTRAIT
,

67 
	mCAMERA_CONTROL__SCENE_MODE__THEATRE
,

68 
	mCAMERA_CONTROL__SCENE_MODE__BEACH
,

69 
	mCAMERA_CONTROL__SCENE_MODE__SNOW
,

70 
	mCAMERA_CONTROL__SCENE_MODE__SUNSET
,

71 
	mCAMERA_CONTROL__SCENE_MODE__STEADYPHOTO
,

72 
	mCAMERA_CONTROL__SCENE_MODE__FIREWORKS
,

73 
	mCAMERA_CONTROL__SCENE_MODE__SPORTS
,

74 
	mCAMERA_CONTROL__SCENE_MODE__PARTY
,

75 
	mCAMERA_CONTROL__SCENE_MODE__CANDLELIGHT
,

76 
	mCAMERA_CONTROL__SCENE_MODE__BARCODE
,

80 
	mCAMERA_CONTROL__AE_ANTIBANDING_MODE__OFF
,

81 
	mCAMERA_CONTROL__AE_ANTIBANDING_MODE__50HZ
,

82 
	mCAMERA_CONTROL__AE_ANTIBANDING_MODE__60HZ
,

83 
	mCAMERA_CONTROL__AE_ANTIBANDING_MODE__AUTO
,

87 
	mCAMERA_CONTROL__AE_LOCK__OFF
,

88 
	mCAMERA_CONTROL__AE_LOCK__ON
,

92 
	mCAMERA_CONTROL__AWB_LOCK__OFF
,

93 
	mCAMERA_CONTROL__AWB_LOCK__ON
,

97 
	mCAMERA_CONTROL__CAPTURE_INTENT__CUSTOM
,

98 
	mCAMERA_CONTROL__CAPTURE_INTENT__PREVIEW
,

99 
	mCAMERA_CONTROL__CAPTURE_INTENT__STILL_CAPTURE
,

100 
	mCAMERA_CONTROL__CAPTURE_INTENT__VIDEO_RECORD
,

101 
	mCAMERA_CONTROL__CAPTURE_INTENT__VIDEO_SNAPSHOT
,

102 
	mCAMERA_CONTROL__CAPTURE_INTENT__ZERO_SHUTTER_LAG
,

106 
	mCAMERA_CONTROL__MODE__OFF
,

107 
	mCAMERA_CONTROL__MODE__AUTO
,

108 
	mCAMERA_CONTROL__MODE__USE_SCENE_MODE
,

112 
	mCAMERA_CONTROL__EFFECT_MODE__OFF
,

113 
	mCAMERA_CONTROL__EFFECT_MODE__MONO
,

114 
	mCAMERA_CONTROL__EFFECT_MODE__NEGATIVE
,

115 
	mCAMERA_CONTROL__EFFECT_MODE__SOLARIZE
,

116 
	mCAMERA_CONTROL__EFFECT_MODE__SEPIA
,

117 
	mCAMERA_CONTROL__EFFECT_MODE__POSTERIZE
,

118 
	mCAMERA_CONTROL__EFFECT_MODE__WHITEBOARD
,

119 
	mCAMERA_CONTROL__EFFECT_MODE__BLACKBOARD
,

120 
	mCAMERA_CONTROL__EFFECT_MODE__AQUA
,

124 
	mCAMERA_CONTROL__AF_MODE_OFF
,

125 
	mCAMERA_CONTROL__AF_MODE_AUTO
,

126 
	mCAMERA_CONTROL__AF_MODE_MACRO
,

127 
	mCAMERA_CONTROL__AF_MODE_CONTINUOUS_VIDEO
,

128 
	mCAMERA_CONTROL__AF_MODE_CONTINUOUS_PICTURE
,

129 
	mCAMERA_CONTROL__AF_MODE_EDOF
,

133 
uöt32_t
 
ˇmîa_c⁄åﬁ_is_a˘ive
(
ˇm_id
);

134 
ˇmîa_c⁄åﬁ_°¨t
(
ˇm_id
);

135 
ˇmîa_c⁄åﬁ_°›
(
ˇm_id
);

136 
ˇmîa_c⁄åﬁ_ˇ±uª
(
ˇm_id
);

137 
ˇmîa_c⁄åﬁ_Àns_move
(
ˇm_id
, 
Àns_posôi⁄
);

138 
ˇmîa_c⁄åﬁ_focus_åiggî
(
ˇm_id
);

139 
ˇmîa_c⁄åﬁ_´_m™uÆ
(

140 
ˇm_id
,

141 
uöt32_t
 
time_us
,

142 
uöt32_t
 
£nsôivôy_iso
,

143 
uöt32_t
 
‰ame_duøti⁄_us


145 
ˇmîa_c⁄åﬁ_´_auto
(
ˇm_id
, 
uöt32_t
 
Êash_mode
);

146 
ˇmîa_c⁄åﬁ_awb_mode
(
ˇm_id
, 
uöt32_t
 
awb_mode
);

147 
ˇmîa_c⁄åﬁ_s˚√_mode
(
ˇm_id
, 
uöt32_t
 
s˚√_mode
);

148 
ˇmîa_c⁄åﬁ_™tib™dög_mode
(
ˇm_id
, 
uöt32_t
 
™tib™dög_mode
);

149 
ˇmîa_c⁄åﬁ_´_lock_mode
(
ˇm_id
, 
uöt32_t
 
´_lock_mode
);

150 
ˇmîa_c⁄åﬁ_´_èrgë_Âs_ønge
(
ˇm_id
, 
uöt32_t
 
mö_Âs
, uöt32_à
max_Âs
);

151 
ˇmîa_c⁄åﬁ_awb_lock_mode
(
ˇm_id
, 
uöt32_t
 
awb_lock_c⁄åﬁ
);

152 
ˇmîa_c⁄åﬁ_ˇ±uª_öã¡
(
ˇm_id
, 
uöt32_t
 
ˇ±uª_öã¡_mode
);

153 
ˇmîa_c⁄åﬁ_mode
(
ˇm_id
, 
uöt32_t
 
c⁄åﬁ_mode
);

154 
ˇmîa_c⁄åﬁ_‰ame_duøti⁄
(
ˇm_id
, 
uöt64_t
 
‰ame_duøti⁄
);

155 
ˇmîa_c⁄åﬁ_exp_com≥nßti⁄
(
ˇm_id
, 
uöt32_t
 
exp_com≥nßti⁄
);

156 
ˇmîa_c⁄åﬁ_£nsôivôy
(
ˇm_id
, 
uöt32_t
 
iso_vÆ
);

157 
ˇmîa_c⁄åﬁ_ef„˘_mode
(
ˇm_id
, 
uöt32_t
 
ef„˘_mode
);

158 
ˇmîa_c⁄åﬁ_af_mode
(
ˇm_id
, 
uöt32_t
 
af_mode
);

159 
ˇmîa_c⁄åﬁ_noi£_ªdu˘i⁄_°ªngth
(
ˇm_id
, 
uöt32_t
 
°ªngth_vÆ
);

160 
ˇmîa_c⁄åﬁ_ßtuøti⁄
(
ˇm_id
, 
uöt32_t
 
ßtuøti⁄_vÆ
);

161 
ˇmîa_c⁄åﬁ_brighäess
(
ˇm_id
, 
uöt32_t
 
brighäess_vÆ
);

162 
ˇmîa_c⁄åﬁ_f‹m©
(
ˇm_id
, 
uöt32_t
 
f‹m©_ty≥
);

163 
ˇmîa_c⁄åﬁ_ªsﬁuti⁄
(
ˇm_id
, 
uöt32_t
 
width
, uöt32_à
height
);

164 
ˇmîa_c⁄åﬁ_sh¨≤ess
(
ˇm_id
, 
uöt32_t
 
sh¨≤ess_vÆ
);

	@cdk/apps/arch/ma2x5x/cdk_FLIC_1xIMX214_2xIMX208/leon/init.c

1 
	~<°dlib.h
>

2 
	~<°dio.h
>

3 
	~<°rög.h
>

4 
	~<î∫o.h
>

5 
	~<πems.h
>

6 
	~<b•.h
>

8 
	~<πems/b•Io.h
>

10 
	~<£m≠h‹e.h
>

11 
	~<±hªad.h
>

12 
	~<sched.h
>

13 
	~<f˙é.h
>

14 
	~<mv_ty≥s.h
>

15 
	~<πems/˝uu£.h
>

16 
	~<DrvLe⁄.h
>

17 
	~<öôSy°em.h
>

28 
maö
(
¨gc
, **
¨gv
);

30 * 
	$POSIX_Inô
 (*
¨gs
)

32 
	`UNUSED
(
¨gs
);

34 
	`maö
(0, 
NULL
);

35  
NULL
;

36 
	}
}

38 #i‡!
deföed
 (
__CONFIG__
)

39 
	#__CONFIG__


	)

42 
	#CONFIGURE_INIT


	)

44 
	#CONFIGURE_MICROSECONDS_PER_TICK
 1000

	)

46 
	#CONFIGURE_TICKS_PER_TIMESLICE
 10

	)

48 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

50 
	#CONFIGURE_APPLICATION_NEEDS_CLOCK_DRIVER


	)

52 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

56 
	#CONFIGURE_MINIMUM_TASK_STACK_SIZE
 (8*1024)

	)

58 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 80

	)

60 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 600

	)

62 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 50

	)

64 
	#CONFIGURE_MAXIMUM_POSIX_SEMAPHORES
 600

	)

66 
	#CONFIGURE_MAXIMUM_POSIX_CONDITION_VARIABLES
 16

	)

68 
	#CONFIGURE_MAXIMUM_POSIX_TIMERS
 4

	)

70 
	#CONFIGURE_MAXIMUM_TIMERS
 4

	)

72 
	#CONFIGURE_MAXIMUM_MESSAGE_QUEUES
 8

	)

73 
	#CONFIGURE_MAXIMUM_TASKS
 4

	)

75 
	#CONFIGURE_MAXIMUM_REGIONS
 1

	)

76 
	#CONFIGURE_LIBIO_MAXIMUM_FILE_DESCRIPTORS
 32

	)

77 
	#CONFIGURE_MAXIMUM_DRIVERS
 10

	)

78 
	#CONFIGURE_MAXIMUM_SEMAPHORES
 16

	)

79 
	#CONFIGURE_MAXIMUM_DEVICES
 8

	)

80 
	#CONFIGURE_APPLICATION_NEEDS_ZERO_DRIVER


	)

81 
	#CONFIGURE_APPLICATION_NEEDS_NULL_DRIVER


	)

82 
	#CONFIGURE_APPLICATION_NEEDS_STUB_DRIVER


	)

85 
	$F©Æ_exãnsi⁄
(

86 
I¡î«l_îr‹s_Sour˚
 
the_sour˚
,

87 
boﬁ
 
is_öã∫Æ
,

88 
I¡î«l_îr‹s_t
 
the_îr‹


91 
the_sour˚
)

93 
RTEMS_FATAL_SOURCE_EXIT
:

94 if(
the_îr‹
)

95 
	`¥ötk
("Exôed wôhÉº‹ codê%d\n", 
the_îr‹
);

97 
RTEMS_FATAL_SOURCE_ASSERT
:

98 
	`¥ötk
("%s : %d in %s \n",

99 ((
πems_as£π_c⁄ãxt
 *)
the_îr‹
)->
fûe
,

100 ((
πems_as£π_c⁄ãxt
 *)
the_îr‹
)->
löe
,

101 ((
πems_as£π_c⁄ãxt
 *)
the_îr‹
)->
fun˘i⁄
);

103 
RTEMS_FATAL_SOURCE_EXCEPTION
:

104 
	`πems_ex˚±i⁄_‰ame_¥öt
((c⁄° 
πems_ex˚±i⁄_‰ame
 *Ë
the_îr‹
);

107 
	`¥ötk
 ("\nSource %d Internal %d Error %d 0x%X:\n",

108 
the_sour˚
, 
is_öã∫Æ
, 
the_îr‹
,Åhe_error);

111 
	}
}

113 
	#CONFIGURE_MAXIMUM_USER_EXTENSIONS
 1

	)

114 
	#CONFIGURE_INITIAL_EXTENSIONS
 { .
Áèl
 = &
F©Æ_exãnsi⁄
 }

	)

116 
	~<πems/c⁄fdefs.h
>

117 
	#MSS_CLOCKS
 0xFFFFFFFF

	)

142 
BSP_SET_CLOCK
(
DEFAULT_OSC_CLOCK_KHZ
, 
DEFAULT_APP_CLOCK_KHZ
, 1, 1, 
APP_CSS_CLOCKS
, 
APP_MSS_CLOCKS
, 
APP_UPA_CLOCKS
, 
APP_SIPP_CLOCKS
,0);

144 
BSP_SET_L2C_CONFIG
(0, 
DEFAULT_RTEMS_L2C_REPLACEMENT_POLICY
, 
DEFAULT_RTEMS_L2C_LOCKED_WAYS
,
DEFAULT_RTEMS_L2C_MODE
, 0, 0);

	@cdk/apps/arch/ma2x5x/cdk_FLIC_1xIMX214_2xIMX208/leon/initSystem.c

19 
	~<OsDrvC¥.h
>

20 
	~<DrvGpio.h
>

21 
	~<OsDrvTimî.h
>

22 
	~<DrvShaveL2Cache.h
>

23 
	~"öôSy°em.h
"

24 
	~<brdDeföes.h
>

25 
	~"brdGpioCfgs/brdMv0182GpioDeÁu…s.h
"

31 
	#L2CACHE_CFG
 (
SHAVE_L2CACHE_NORMAL_MODE
)

	)

33 
	#CLOCKS_MIPICFG
 (
AUX_CLK_MASK_MIPI_ECFG
 | 
AUX_CLK_MASK_MIPI_CFG
)

	)

34 
	#REM_CLOCKS
 ( 
AUX_CLK_MASK_I2S0
 | \

35 
AUX_CLK_MASK_I2S1
 | \

36 
AUX_CLK_MASK_I2S2
 )

	)

38 
	#DESIRED_USB_FREQ_KHZ
 (20000)

	)

39 #i‡(
DEFAULT_APP_CLOCK_KHZ
%
DESIRED_USB_FREQ_KHZ
)

50 
tyAuxClkDividîCfg
 
	gauxClkAŒOn
[] =

52 {
AUX_CLK_MASK_UART
, 
CLK_SRC_REFCLK0
, 96, 625},

54 .
auxClockE«bÀMask
 = 
REM_CLOCKS
,

55 .
	gauxClockSour˚
 = 
CLK_SRC_SYS_CLK
,

56 .
	gauxClockDivNumî©‹
 = 1,

57 .
	gauxClockDivDíomö©‹
 = 1,

60 .
	gauxClockE«bÀMask
 = 
AUX_CLK_MASK_LCD
 ,

61 .
	gauxClockSour˚
 = 
CLK_SRC_SYS_CLK_DIV2
,

62 .
	gauxClockDivNumî©‹
 = 1,

63 .
	gauxClockDivDíomö©‹
 = 1

66 .
	gauxClockE«bÀMask
 = 
AUX_CLK_MASK_MEDIA
,

67 .
	gauxClockSour˚
 = 
CLK_SRC_SYS_CLK
 ,

68 .
	gauxClockDivNumî©‹
 = 1,

69 .
	gauxClockDivDíomö©‹
 = 1,

73 .
	gauxClockE«bÀMask
 = (
AUX_CLK_MASK_CIF0
 | 
AUX_CLK_MASK_CIF1
),

74 .
	gauxClockSour˚
 = 
CLK_SRC_SYS_CLK
,

75 .
	gauxClockDivNumî©‹
 = 1,

76 .
	gauxClockDivDíomö©‹
 = 1,

79 .
	gauxClockE«bÀMask
 = 
CLOCKS_MIPICFG
,

80 .
	gauxClockSour˚
 = 
CLK_SRC_SYS_CLK
 ,

81 .
	gauxClockDivNumî©‹
 = 1,

82 .
	gauxClockDivDíomö©‹
 = (
uöt32_t
)(
DEFAULT_APP_CLOCK_KHZ
/24000),

85 .
	gauxClockE«bÀMask
 = 
AUX_CLK_MASK_MIPI_TX0
 | 
AUX_CLK_MASK_MIPI_TX1
,

86 .
	gauxClockSour˚
 = 
CLK_SRC_REFCLK0
,

87 .
	gauxClockDivNumî©‹
 = 1,

88 .
	gauxClockDivDíomö©‹
 = 1

91 .
	gauxClockE«bÀMask
 = (
u32
)(1 << 
CSS_AUX_TSENS
),

92 .
	gauxClockSour˚
 = 
CLK_SRC_REFCLK0
,

93 .
	gauxClockDivNumî©‹
 = 1,

94 .
	gauxClockDivDíomö©‹
 = 10,

97 .
	gauxClockE«bÀMask
 = 
AUX_CLK_MASK_USB_PHY_EXTREFCLK
,

98 .
	gauxClockSour˚
 = 
CLK_SRC_PLL0
,

99 .
	gauxClockDivNumî©‹
 = 1,

100 .
	gauxClockDivDíomö©‹
 = (
uöt32_t
)(
DEFAULT_APP_CLOCK_KHZ
/
DESIRED_USB_FREQ_KHZ
)

103 .
	gauxClockE«bÀMask
 = 
AUX_CLK_MASK_USB_PHY_REF_ALT_CLK
,

104 .
	gauxClockSour˚
 = 
CLK_SRC_PLL0
,

105 .
	gauxClockDivNumî©‹
 = 1,

106 .
	gauxClockDivDíomö©‹
 = (
uöt32_t
)(
DEFAULT_APP_CLOCK_KHZ
/
DESIRED_USB_FREQ_KHZ
)

109 .
	gauxClockE«bÀMask
 = 
AUX_CLK_MASK_USB_CTRL_REF_CLK
,

110 .
	gauxClockSour˚
 = 
CLK_SRC_PLL0
,

111 .
	gauxClockDivNumî©‹
 = 1,

112 .
	gauxClockDivDíomö©‹
 = (
uöt32_t
)(
DEFAULT_APP_CLOCK_KHZ
/
DESIRED_USB_FREQ_KHZ
)

115 .
	gauxClockE«bÀMask
 = 
AUX_CLK_MASK_USB_CTRL_SUSPEND_CLK
,

116 .
	gauxClockSour˚
 = 
CLK_SRC_PLL0
,

117 .
	gauxClockDivNumî©‹
 = 1,

118 .
	gauxClockDivDíomö©‹
 = (
uöt32_t
)(
DEFAULT_APP_CLOCK_KHZ
/
DESIRED_USB_FREQ_KHZ
)

125 
	~<DrvLe⁄L2C.h
>

126 
	$À⁄L2CacheInôWrThrough
()

128 
LL2CC⁄fig_t
 
Œ2C⁄fig
;

131 
	`DrvLL2CFlushOpOnAŒLöes
(
LL2C_OPERATION_INVALIDATE
, 0);

133 
Œ2C⁄fig
.
LL2CE«bÀ
 = 1;

134 
Œ2C⁄fig
.
LL2CLockedWaysNo
 = 0;

135 
Œ2C⁄fig
.
LL2CWayToRïœ˚
 = 0;

136 
Œ2C⁄fig
.
busUßge
 = 
BUS_WRAPPING_MODE
;

137 
Œ2C⁄fig
.
hôR©e
 = 
HIT_WRAPPING_MODE
;

138 
Œ2C⁄fig
.
ª∂a˚Pﬁicy
 = 
LRU
;

139 
Œ2C⁄fig
.
wrôePﬁicy
 = 
WRITE_THROUGH
;

141 
	`DrvLL2CInôülize
(&
Œ2C⁄fig
);

142 
	}
}

148 
	$öôClocksAndMem‹y
()

154 
	`OsDrvC¥Inô
();

155 
	`OsDrvC¥O≥n
();

156 
	`OsDrvTimîInô
();

157 
	`OsDrvC¥AuxClockAºayC⁄fig
(
auxClkAŒOn
);

158 
	`À⁄L2CacheInôWrThrough
();

160 
	`DrvShaveL2CacheSëMode
(
L2CACHE_CFG
);

163 
	`SET_REG_WORD
 (
CMX_RSTN_CTRL
,0x00000000);

164 
	`SET_REG_WORD
 (
CMX_CLK_CTRL
, 0xffffffff);

165 
	`SET_REG_WORD
 (
CMX_RSTN_CTRL
,0xffffffff);

167 
	`SET_REG_WORD
(
MSS_CLK_CTRL_ADR
, 0xffffffff);

168 
	`SET_REG_WORD
(
MSS_RSTN_CTRL_ADR
, 0xffffffff);

170 
	`DrvC¥SysDevi˚A˘i⁄
(
MSS_DOMAIN
, 
ASSERT_RESET
, 
DEV_MSS_LCD
 | 
DEV_MSS_CIF0
 | 
DEV_MSS_CIF1
 | 
DEV_MSS_SIPP
);

171 
	`DrvC¥SysDevi˚A˘i⁄
(
MSS_DOMAIN
, 
DEASSERT_RESET
, -1);

172 
	`DrvC¥SysDevi˚A˘i⁄
(
CSS_DOMAIN
, 
DEASSERT_RESET
, -1);

173 
	`DrvC¥SysDevi˚A˘i⁄
(
UPA_DOMAIN
, 
DEASSERT_RESET
, -1);

175 
	`DrvC¥SèπAŒClocks
();

176 
	`SET_REG_WORD
(
MSS_SIPP_RSTN_CTRL_ADR
, 0);

177 
	`SET_REG_WORD
(
MSS_SIPP_RSTN_CTRL_ADR
, 0x3ffffff);

178 
	`SET_REG_WORD
(
MSS_SIPP_CLK_SET_ADR
, 0x3ffffff);

181 
	}
}

185 
	$öôSy°em
()

187 
	#IRQ_SRC_0
 0

	)

188 
	#IRQ_SRC_1
 1

	)

189 
	#IRQ_SRC_2
 2

	)

190 
	#IRQ_SRC_3
 3

	)

192 
	`öôClocksAndMem‹y
();

193 
	`DrvGpioIrqSrcDißbÀ
(
IRQ_SRC_0
);

194 
	`DrvGpioIrqSrcDißbÀ
(
IRQ_SRC_1
);

195 
	`DrvGpioIrqSrcDißbÀ
(
IRQ_SRC_2
);

196 
	`DrvGpioIrqSrcDißbÀ
(
IRQ_SRC_3
);

197 
	`DrvGpioInôüli£R™ge
(
brdMV0182GpioCfgDeÁu…
);

198 
	}
}

	@cdk/apps/arch/ma2x5x/cdk_FLIC_1xIMX214_2xIMX208/leon/initSystem.h

15 #i‚de‡
INITSYSTEM_LOS_H


16 
	#INITSYSTEM_LOS_H


	)

21 
	~<brdDeföes.h
>

22 
	~<DrvC¥.h
>

27 #i‚de‡
DEFAULT_APP_CLOCK_KHZ


28 
	#DEFAULT_APP_CLOCK_KHZ
 480000

	)

31 #i‚de‡
DEFAULT_OSC_CLOCK_KHZ


32 
	#DEFAULT_OSC_CLOCK_KHZ
 
BOARD_REF_CLOCK_KHZ


	)

35 
	#BIGENDIANMODE
 (0x01000786)

	)

37 
	#APP_CSS_CLOCKS
 (–
DEV_CSS_LOS
 ) | \

38 –
DEV_CSS_LAHB_CTRL
 ) | \

39 –
DEV_CSS_APB4_CTRL
 ) | \

40 –
DEV_CSS_CPR
 ) | \

41 –
DEV_CSS_ROM
 ) | \

42 –
DEV_CSS_LOS_L2C
 ) | \

43 –
DEV_CSS_MAHB_CTRL
 ) | \

44 –
DEV_CSS_LOS_ICB
 ) | \

45 –
DEV_CSS_LOS_DSU
 ) | \

46 –
DEV_CSS_LOS_TIM
 ) | \

47 –
DEV_CSS_GPIO
 ) | \

48 –
DEV_CSS_JTAG
 ) | \

49 –
DEV_CSS_APB1_CTRL
 ) | \

50 –
DEV_CSS_AHB_DMA
 ) | \

51 –
DEV_CSS_APB3_CTRL
 ) | \

52 –
DEV_CSS_I2C0
 ) | \

53 –
DEV_CSS_I2C1
 ) | \

54 –
DEV_CSS_I2C2
 ) | \

55 –
DEV_CSS_UART
 ) | \

56 –
DEV_CSS_SPI0
 ) | \

57 –
DEV_CSS_SPI1
 ) | \

58 –
DEV_CSS_SPI2
 ) | \

59 –
DEV_CSS_SAHB_CTRL
 ) | \

60 –
DEV_CSS_MSS_MAS
 ) | \

61 –
DEV_CSS_UPA_MAS
 ) | \

62 –
DEV_CSS_DSS_APB
 ) | \

63 –
DEV_CSS_DSS_BUS
 ) | \

64 –
DEV_CSS_DSS_BUS_DXI
 ) | \

65 –
DEV_CSS_DSS_BUS_AAXI
 ) | \

66 –
DEV_CSS_DSS_BUS_MXI
 ) | \

67 –
DEV_CSS_LAHB2SHB
 ) | \

68 –
DEV_CSS_SAHB2MAHB
 ) | \

69 –
DEV_CSS_USB
 ) | \

70 –
DEV_CSS_USB_APBSLV
 ) | \

71 –
DEV_CSS_AON
 ))

	)

73 
	#APP_UPA_CLOCKS
 (–
DEV_UPA_SHAVE_L2
 ) | \

74 –
DEV_UPA_CDMA
 ) | \

75 –
DEV_UPA_BIC
 ) | \

76 –
DEV_UPA_CTRL
 ) | \

77 –
DEV_UPA_SH0
 ) | \

78 –
DEV_UPA_SH1
 ) | \

79 –
DEV_UPA_SH2
 ) | \

80 –
DEV_UPA_SH3
 ) | \

81 –
DEV_UPA_SH4
 ) | \

82 –
DEV_UPA_SH5
 ) | \

83 –
DEV_UPA_SH6
 ) | \

84 –
DEV_UPA_SH7
 ))

	)

86 
	#APP_MSS_CLOCKS
 (–
DEV_MSS_APB_SLV
 ) | \

87 –
DEV_MSS_APB2_CTRL
 ) | \

88 –
DEV_MSS_RTBRIDGE
 ) | \

89 –
DEV_MSS_RTAHB_CTRL
 ) | \

90 –
DEV_MSS_LRT
 ) | \

91 –
DEV_MSS_LRT_DSU
 ) | \

92 –
DEV_MSS_LRT_L2C
 ) | \

93 –
DEV_MSS_LRT_ICB
 ) | \

94 –
DEV_MSS_AXI_BRIDGE
 ) | \

95 –
DEV_MSS_MXI_CTRL
 ) | \

96 –
DEV_MSS_MXI_DEFSLV
 ) | \

97 –
DEV_MSS_AXI_MON
 ) | \

98 –
DEV_MSS_LCD
 ) | \

99 –
DEV_MSS_TIM
 ) | \

100 –
DEV_MSS_AMC
 ) | \

101 –
DEV_MSS_SIPP
 ))

	)

103 
	#APP_SIPP_CLOCKS
 (–
DEV_SIPP_SIGMA
 ) | \

104 –
DEV_SIPP_LSC
 ) | \

105 –
DEV_SIPP_RAW
 ) | \

106 –
DEV_SIPP_DBYR
 ) | \

107 –
DEV_SIPP_DOGL
 ) | \

108 –
DEV_SIPP_LUMA
 ) | \

109 –
DEV_SIPP_SHARPEN
 ) | \

110 –
DEV_SIPP_CGEN
 ) | \

111 –
DEV_SIPP_MED
 ) | \

112 –
DEV_SIPP_CHROMA
 ) | \

113 –
DEV_SIPP_CC
 ) | \

114 –
DEV_SIPP_LUT
 ) | \

115 –
DEV_SIPP_UPFIRDN0
 ) | \

116 –
DEV_SIPP_UPFIRDN1
 ) | \

117 –
DEV_SIPP_UPFIRDN2
 ) | \

118 –
DEV_SIPP_MIPI_RX0
 ) | \

119 –
DEV_SIPP_MIPI_RX1
 ) | \

120 –
DEV_SIPP_MIPI_RX2
 ) | \

121 –
DEV_SIPP_MIPI
 ) | \

122 –
DEV_SIPP_SIPP_ABPSLV
 ))

	)

132 
öôClocksAndMem‹y
();

134 
öôSy°em
();

	@cdk/apps/arch/ma2x5x/cdk_FLIC_1xIMX214_2xIMX208/leon/main.c

35 
	~<°döt.h
>

36 
	~<oßl/oßl_°dlib.h
>

37 
	~<oßl/oßl_°rög.h
>

38 
	~<oßl/oßl_time.h
>

39 
	~<utûs/mms_debug.h
>

41 
	~<vîsi⁄_öfo.h
>

45 
	~<∂©f‹m/öc/∂©f‹m.h
>

47 
	~<guzzi_evít/ö˛ude/guzzi_evít.h
>

48 
	~<guzzi_evít_globÆ/ö˛ude/guzzi_evít_globÆ.h
>

50 
	~<dç/dç_£rvî_defs.h
>

52 
	~<comp⁄íts/ˇmîa/vˇmîa_iÁ˚/vút_cm/öc/vút_cm.h
>

54 
	~"öôSy°em.h
"

55 
	~"ˇmîa_c⁄åﬁ.h
"

56 
	~"≠p_guzzi_comm™d_•i.h
"

57 
	~"≠p_guzzi_comm™d_dbg.h
"

59 
	~"£ndOutApi.h
"

61 
	gdo_nŸ_u£_i2c_ch_0
 = 0;

63 
dç_£rvî_hndl_t
 
	gdç_§v_hndl
;

64 
uöt8_t
 
ext_dç_d©aba£
[];

65 
uöt8_t
 
ext_dç_d©aba£_íd
[];

66 
uöt8_t
 
	gdç_dtb_checked
 = 0;

68 
mmsdbg_deföe_v¨übÀ
(

69 
vdl_guzzi_i2c
,

70 
DL_DEFAULT
,

75 
	#MMSDEBUGLEVEL
 
	`mmsdbg_u£_v¨übÀ
(
vdl_guzzi_i2c
)

	)

77 #i‡
INPUT_UNIT_IS_USB


78 
	#APP_GUZZI_COMMAND_WAIT_TIMEOUT
 
≠p_guzzi_comm™d_waô_timeout_usb


	)

80 
	#APP_GUZZI_COMMAND_WAIT_TIMEOUT
 
≠p_guzzi_comm™d_waô_timeout_•i


	)

88 
∂©f‹m_drv_powî_öô
();

89 
∂©f‹m_drv_powî_deöô
();

90 
∂©f‹m_ˇm_Àd_1
(
a˘i⁄
);

92 
	$guzzi_ˇmîa3_ˇ±uª_ªsu…__x11_c⁄figuª_°ªams
(

93 
ˇmîa_id
,

94 *
°ªams


97 
	`UNUSED
(
ˇmîa_id
);

98 
	`UNUSED
(
°ªams
);

99 
	}
}

101 
	$guzzi_ˇmîa3_ˇ±uª_ªsu…
(

102 
ˇmîa_id
,

103 
°ªam_id
,

104 
‰ame_numbî
,

105 *
d©a
,

106 
d©a_size


109 
	`UNUSED
(
ˇmîa_id
);

110 
	`UNUSED
(
°ªam_id
);

111 
	`UNUSED
(
‰ame_numbî
);

112 
	`UNUSED
(
d©a
);

113 
	`UNUSED
(
d©a_size
);

114 
	}
}

121 
	$live_tunög_≠∂y
 (
≠p_guzzi_comm™d_t
 *
comm™d
)

123 
uöt8_t
 *
de°
 = 
ext_dç_d©aba£
 + 
comm™d
->
live_tunög
.
off£t
;

124 
uöt8_t
 *
§c
 = 
comm™d
->
live_tunög
.
d©a
;

126 i‡((
de°
 + 
comm™d
->
live_tunög
.
size
Ë> 
ext_dç_d©aba£_íd
) {

127 
	`mmsdbg
(
DL_ERROR
, "DTP offset: %d + size: %dÉxceeded: %d",

128 ()
comm™d
->
live_tunög
.
size
,

129 ()
comm™d
->
live_tunög
.
off£t
,

130 ()(
ext_dç_d©aba£_íd
 - 
ext_dç_d©aba£
)

135 i‡(!
dç_dtb_checked
) {

136 
	`mmsdbg
(
DL_ERROR
, "DTP db isÇot checked");

140 
comm™d
->
live_tunög
.
size
--) {

141 *
de°
++ = *
§c
++;

143 
	}
}

151 
	$live_tunög_u∆ock
 (
≠p_guzzi_comm™d_t
 *
comm™d
)

153 
dç_hndl_t
 
hdç
;

154 
dç_Àaf_d©a_t
 
Àaf
;

155 
dçdb_°©ic_comm⁄_t
 
°©ic_comm⁄
;

156 
dçdb_°©ic_¥iv©e_t
 
°©ic_¥iv©e
;

157 
dçdb_dy«mic_comm⁄_t
 
dcomm
;

158 
dçdb_dy«mic_¥iv©e_t
 
d¥v
;

159 
dç_out_d©a_t
 *
dç_d©a
;

161 
	`oßl_mem£t
(&
°©ic_comm⁄
, 0x00, (static_common));

162 
	`oßl_mem£t
(&
°©ic_¥iv©e
, 0x00, (static_private));

163 
	`oßl_mem£t
(&
dcomm
, 0x00, (dcomm));

164 
	`oßl_mem£t
(&
d¥v
, 0x00, (dprv));

166 if(
	`dç§v_gë_hndl
(
dç_§v_hndl
,

167 
DTP_DB_ID_CHECK_SUM
,

170 
dç_∑øm_‹dî
,

171 &
hdç
, &
Àaf
))

173 
	`mmsdbg
(
DL_ERROR
, "DTP_DB_ID_CHECK_ID - can't get DTP client handle");

174 
EXIT_1
;

177 
	`dç§v_¥e_¥o˚ss
(
hdç
, &
°©ic_comm⁄
, &
°©ic_¥iv©e
);

178 i‡(
	`dç§v_¥o˚ss
(
hdç
, &
dcomm
, &
d¥v
, (**)&
dç_d©a
))

180 
	`mmsdbg
(
DL_ERROR
, "DTP_DB_ID_CHECK_SUM -ÖrocessÉrror");

181 
EXIT_2
;

184 i‡(
DTP_DAT_TYPE_FIXED
 !
dç_d©a
->
d©a_ty≥_id
)

186 
	`mmsdbg
(
DL_ERROR
, "DTP_DB_ID_CHECK_SUM - wrong dataÅype");

187 
EXIT_2
;

190 i‡(
	`oßl_°rcmp
(
dç_d©a
->
d_fixed
.
p_d©a0
, (c⁄° *)
comm™d
->
live_tunög
.
d©a
))

192 
	`mmsdbg
(
DL_ERROR
, "DTP_DB_ID_CHECK_SUM - mismatch");

193 
EXIT_2
;

196 
dç_dtb_checked
 = 1;

198 
EXIT_2
:

199 
	`dç§v_‰ì_hndl
(
hdç
);

200 
EXIT_1
:

202 
	}
}

209 
	$¥ofûe_ªady_cb
(

210 
¥ofûe_t
 *
¥ofûe
,

211 *
¥v
,

212 *
buf„r
,

213 
buf„r_size


216 
	`UNUSED
(
¥v
);

217 
	`UNUSED
(
buf„r
);

218 
	`UNUSED
(
buf„r_size
);

221 
	`PROFILE_RELEASE_READY
(
buf„r
);

222 
	}
}

229 
	$≠p_guzzi_comm™d_ˇŒback
(

230 *
≠p_¥iv©e
,

231 
≠p_guzzi_comm™d_t
 *
comm™d


234 
	`UNUSED
(
≠p_¥iv©e
);

236 
	`mmsdbg
(
DL_ERROR
, "comm™d->id:%d", ()
comm™d
->
id
);

238 
comm™d
->
id
) {

239 
APP_GUZZI_COMMAND__LIVE_TUNING_UNLOCK
:

240 
	`live_tunög_u∆ock
(
comm™d
);

242 
APP_GUZZI_COMMAND__LIVE_TUNING_APPLY
:

243 
	`live_tunög_≠∂y
(
comm™d
);

245 
APP_GUZZI_COMMAND__OUTPUT_CONTROL
:

254 i‡(
	`ˇmîa_c⁄åﬁ_is_a˘ive
(
comm™d
->
ˇm
.
id
))

256 i‡(
APP_GUZZI_COMMAND__CAM_START
 =
comm™d
->
id
) {

257 
	`mmsdbg
(
DL_ERROR
, "Skùpög comm™d START f‹áÃódyá˘iv©ed camî®%d", ()
comm™d
->
ˇm
.
id
);

261 i‡(
APP_GUZZI_COMMAND__CAM_START
 !
comm™d
->
id
) {

262 
	`mmsdbg
(
DL_ERROR
, "Skùpög comm™d %d f‹ N⁄á˘ivêˇmî®%d", ()
comm™d
->
id
, ()comm™d->
ˇm
.id);

266 
comm™d
->
id
) {

267 
APP_GUZZI_COMMAND__NOP
:

270 
APP_GUZZI_COMMAND__CAM_START
:

271 
	`PROFILE_ADD
(
PROFILE_ID_EXT_START_CMD
, 0, 0);

272 
	`mmsdbg
(
DL_ERROR
, "comm™d \"%d %d\" sít\n", ()
comm™d
->
id
, ()comm™d->
ˇm
.id);

273 
	`ˇmîa_c⁄åﬁ_°¨t
(
comm™d
->
ˇm
.
id
);

275 
APP_GUZZI_COMMAND__CAM_STOP
:

276 
	`PROFILE_ADD
(
PROFILE_ID_EXT_STOP_CMD
, 0, 0);

277 
	`ˇmîa_c⁄åﬁ_°›
(
comm™d
->
ˇm
.
id
);

278 
	`mmsdbg
(
DL_ERROR
, "comm™d \"%d %d\" sít\n", ()
comm™d
->
id
, ()comm™d->
ˇm
.id);

280 
APP_GUZZI_COMMAND__CAM_CAPTURE
:

281 
	`PROFILE_ADD
(
PROFILE_ID_EXT_CAPTURE_CMD
, 0, 0);

282 
	`ˇmîa_c⁄åﬁ_ˇ±uª
(
comm™d
->
ˇm
.
id
);

283 
	`mmsdbg
(
DL_ERROR
, "comm™d \"%d %d\" sít\n", ()
comm™d
->
id
, ()comm™d->
ˇm
.id);

285 
APP_GUZZI_COMMAND__CAM_LENS_MOVE
:

286 
	`PROFILE_ADD
(
PROFILE_ID_EXT_LENS_MOVE
, 0, 0);

287 
	`ˇmîa_c⁄åﬁ_Àns_move
(

288 
comm™d
->
ˇm
.
id
,

289 
comm™d
->
ˇm
.
Àns_move
.
pos


291 
	`mmsdbg
(
DL_ERROR
, "command \"%d %d %d\" sent\n",

292 ()
comm™d
->
id
, ()comm™d->
ˇm
.id, ()comm™d->ˇm.
Àns_move
.
pos
);

294 
APP_GUZZI_COMMAND__CAM_AF_TRIGGER
:

295 
	`PROFILE_ADD
(
PROFILE_ID_EXT_LENS_MOVE
, 0, 0);

296 
	`ˇmîa_c⁄åﬁ_focus_åiggî
(
comm™d
->
ˇm
.
id
);

297 
	`mmsdbg
(
DL_ERROR
, "comm™d \"%d %d\" sít\n", ()
comm™d
->
id
, ()comm™d->
ˇm
.id);

299 
APP_GUZZI_COMMAND__CAM_AE_MANUAL
:

300 
	`ˇmîa_c⁄åﬁ_´_m™uÆ
(

301 
comm™d
->
ˇm
.
id
,

302 
comm™d
->
ˇm
.
´_m™uÆ
.
exp_us
,

303 
comm™d
->
ˇm
.
´_m™uÆ
.
£nsôivôy_iso
,

304 
comm™d
->
ˇm
.
´_m™uÆ
.
‰ame_duøti⁄_us


306 
	`mmsdbg
(
DL_ERROR
, "command \"%d %d %d %d %d\" sent\n",

307 ()
comm™d
->
id
,

308 ()
comm™d
->
ˇm
.
id
,

309 ()
comm™d
->
ˇm
.
´_m™uÆ
.
exp_us
,

310 ()
comm™d
->
ˇm
.
´_m™uÆ
.
£nsôivôy_iso
,

311 ()
comm™d
->
ˇm
.
´_m™uÆ
.
‰ame_duøti⁄_us
);

313 
APP_GUZZI_COMMAND__CAM_AE_AUTO
:

314 
	`ˇmîa_c⁄åﬁ_´_auto
(

315 
comm™d
->
ˇm
.
id
,

316 
CAMERA_CONTROL__AE_AUTO__FLASH_MODE__AUTO


318 
	`mmsdbg
(
DL_ERROR
, "comm™d \"%d %d\" sít\n", ()
comm™d
->
id
, ()comm™d->
ˇm
.id);

320 
APP_GUZZI_COMMAND__CAM_AWB_MODE
:

321 
	`ˇmîa_c⁄åﬁ_awb_mode
(

322 
comm™d
->
ˇm
.
id
,

323 
comm™d
->
ˇm
.
awb_mode
.
mode


325 
	`mmsdbg
(
DL_ERROR
, "command \"%d %d %d\" sent\n",

326 ()
comm™d
->
id
, ()comm™d->
ˇm
.id, ()comm™d->ˇm.
awb_mode
.
mode
);

328 
APP_GUZZI_COMMAND__CAM_SCENE_MODE
:

329 
	`ˇmîa_c⁄åﬁ_s˚√_mode
(

330 
comm™d
->
ˇm
.
id
,

331 
comm™d
->
ˇm
.
s˚√_mode
.
ty≥


333 
	`mmsdbg
(
DL_ERROR
, "command \"%d %d %d\" sent\n",

334 ()
comm™d
->
id
, ()comm™d->
ˇm
.id, ()comm™d->ˇm.
s˚√_mode
.
ty≥
);

336 
APP_GUZZI_COMMAND__CAM_ANTIBANDING_MODE
:

337 
	`ˇmîa_c⁄åﬁ_™tib™dög_mode
(

338 
comm™d
->
ˇm
.
id
,

339 
comm™d
->
ˇm
.
™tib™dög_mode
.
ty≥


341 
	`mmsdbg
(
DL_ERROR
, "command \"%d %d %d\" sent\n",

342 ()
comm™d
->
id
, ()comm™d->
ˇm
.id, ()comm™d->ˇm.
™tib™dög_mode
.
ty≥
);

344 
APP_GUZZI_COMMAND__CAM_AE_LOCK
:

345 
	`ˇmîa_c⁄åﬁ_´_lock_mode
(

346 
comm™d
->
ˇm
.
id
,

347 
comm™d
->
ˇm
.
´_lock_mode
.
ty≥


349 
	`mmsdbg
(
DL_ERROR
, "command \"%d %d %d\" sent\n",

350 ()
comm™d
->
id
, ()comm™d->
ˇm
.id, ()comm™d->ˇm.
´_lock_mode
.
ty≥
);

352 
APP_GUZZI_COMMAND__CAM_AE_TARGET_FPS_RANGE
:

353 
	`ˇmîa_c⁄åﬁ_´_èrgë_Âs_ønge
(

354 
comm™d
->
ˇm
.
id
,

355 
comm™d
->
ˇm
.
´_èrgë_Âs_ønge
.
mö_Âs
,

356 
comm™d
->
ˇm
.
´_èrgë_Âs_ønge
.
max_Âs


358 
	`mmsdbg
(
DL_ERROR
, "comm™d \"%d %d %d %d\" sít\n", ()
comm™d
->
id
,

359 ()
comm™d
->
ˇm
.
id
, ()comm™d->ˇm.
´_èrgë_Âs_ønge
.
mö_Âs
,

360 ()
comm™d
->
ˇm
.
´_èrgë_Âs_ønge
.
max_Âs
);

362 
APP_GUZZI_COMMAND__CAM_AWB_LOCK
:

363 
	`ˇmîa_c⁄åﬁ_awb_lock_mode
(

364 
comm™d
->
ˇm
.
id
,

365 
comm™d
->
ˇm
.
awb_lock_c⁄åﬁ
.
ty≥


367 
	`mmsdbg
(
DL_ERROR
, "command \"%d %d %d\" sent\n",

368 ()
comm™d
->
id
, ()comm™d->
ˇm
.id, ()comm™d->ˇm.
awb_lock_c⁄åﬁ
.
ty≥
);

370 
APP_GUZZI_COMMAND__CAM_CAPTURE_INTRENT
:

371 
	`ˇmîa_c⁄åﬁ_ˇ±uª_öã¡
(

372 
comm™d
->
ˇm
.
id
,

373 
comm™d
->
ˇm
.
ˇ±uª_öã¡
.
mode


375 
	`mmsdbg
(
DL_ERROR
, "command \"%d %d %d\" sent\n",

376 ()
comm™d
->
id
, ()comm™d->
ˇm
.id, ()comm™d->ˇm.
ˇ±uª_öã¡
.
mode
);

378 
APP_GUZZI_COMMAND__CAM_CONTROL_MODE
:

379 
	`ˇmîa_c⁄åﬁ_mode
(

380 
comm™d
->
ˇm
.
id
,

381 
comm™d
->
ˇm
.
c⁄åﬁ_mode
.
ty≥


383 
	`mmsdbg
(
DL_ERROR
, "command \"%d %d %d\" sent\n",

384 ()
comm™d
->
id
, ()comm™d->
ˇm
.id, ()comm™d->ˇm.
c⁄åﬁ_mode
.
ty≥
);

386 
APP_GUZZI_COMMAND__CAM_FRAME_DURATION
:

387 
	`ˇmîa_c⁄åﬁ_‰ame_duøti⁄
(

388 
comm™d
->
ˇm
.
id
,

389 
comm™d
->
ˇm
.
‰ame_duøti⁄
.
vÆ


391 
	`mmsdbg
(
DL_ERROR
, "command \"%d %d %d\" sent\n",

392 ()
comm™d
->
id
, ()comm™d->
ˇm
.id, ()comm™d->ˇm.
‰ame_duøti⁄
.
vÆ
);

394 
APP_GUZZI_COMMAND__CAM_AE_EXPOSURE_COMPENSATION
:

395 
	`ˇmîa_c⁄åﬁ_exp_com≥nßti⁄
(

396 
comm™d
->
ˇm
.
id
,

397 
comm™d
->
ˇm
.
exposuª_com≥nßti⁄
.
vÆ


399 
	`mmsdbg
(
DL_ERROR
, "command \"%d %d %d\" sent\n",

400 ()
comm™d
->
id
, ()comm™d->
ˇm
.id, ()comm™d->ˇm.
exposuª_com≥nßti⁄
.
vÆ
);

402 
APP_GUZZI_COMMAND__CAM_SENSITIVITY
:

403 
	`ˇmîa_c⁄åﬁ_£nsôivôy
(

404 
comm™d
->
ˇm
.
id
,

405 
comm™d
->
ˇm
.
£nsôivôy
.
iso_vÆ


407 
	`mmsdbg
(
DL_ERROR
, "command \"%d %d %d\" sent\n",

408 ()
comm™d
->
id
, ()comm™d->
ˇm
.id, ()comm™d->ˇm.
£nsôivôy
.
iso_vÆ
);

410 
APP_GUZZI_COMMAND__CAM_EFFECT_MODE
:

411 
	`ˇmîa_c⁄åﬁ_ef„˘_mode
(

412 
comm™d
->
ˇm
.
id
,

413 
comm™d
->
ˇm
.
ef„˘_mode
.
ty≥


415 
	`mmsdbg
(
DL_ERROR
, "command \"%d %d %d\" sent\n",

416 ()
comm™d
->
id
, ()comm™d->
ˇm
.id, ()comm™d->ˇm.
ef„˘_mode
.
ty≥
);

418 
APP_GUZZI_COMMAND__CAM_AF_MODE
:

419 
	`ˇmîa_c⁄åﬁ_af_mode
(

420 
comm™d
->
ˇm
.
id
,

421 
comm™d
->
ˇm
.
af_mode
.
ty≥


423 
	`mmsdbg
(
DL_ERROR
, "command \"%d %d %d\" sent\n",

424 ()
comm™d
->
id
, ()comm™d->
ˇm
.id, ()comm™d->ˇm.
af_mode
.
ty≥
);

426 
APP_GUZZI_COMMAND__CAM_NOISE_REDUCTION_STRENGTH
:

427 
	`ˇmîa_c⁄åﬁ_noi£_ªdu˘i⁄_°ªngth
(

428 
comm™d
->
ˇm
.
id
,

429 
comm™d
->
ˇm
.
noi£_ªdu˘i⁄_°ªngth
.
vÆ


431 
	`mmsdbg
(
DL_ERROR
, "command \"%d %d %d\" sent\n",

432 ()
comm™d
->
id
, ()comm™d->
ˇm
.id, ()comm™d->ˇm.
noi£_ªdu˘i⁄_°ªngth
.
vÆ
);

434 
APP_GUZZI_COMMAND__CAM_SATURATION
:

435 
	`ˇmîa_c⁄åﬁ_ßtuøti⁄
(

436 
comm™d
->
ˇm
.
id
,

437 
comm™d
->
ˇm
.
ßtuøti⁄
.
vÆ


439 
	`mmsdbg
(
DL_ERROR
, "command \"%d %d %d\" sent\n",

440 ()
comm™d
->
id
, ()comm™d->
ˇm
.id, ()comm™d->ˇm.
ßtuøti⁄
.
vÆ
);

442 
APP_GUZZI_COMMAND__CAM_BRIGHTNESS
:

443 
	`ˇmîa_c⁄åﬁ_brighäess
(

444 
comm™d
->
ˇm
.
id
,

445 
comm™d
->
ˇm
.
brighäess
.
vÆ


447 
	`mmsdbg
(
DL_ERROR
, "command \"%d %d %d\" sent\n",

448 ()
comm™d
->
id
, ()comm™d->
ˇm
.id, ()comm™d->ˇm.
brighäess
.
vÆ
);

450 
APP_GUZZI_COMMAND__CAM_FORMAT
:

451 
	`ˇmîa_c⁄åﬁ_f‹m©
(

452 
comm™d
->
ˇm
.
id
,

453 
comm™d
->
ˇm
.
f‹m©
.
vÆ


455 
	`mmsdbg
(
DL_ERROR
, "command \"%d %d %d\" sent\n",

456 ()
comm™d
->
id
, ()comm™d->
ˇm
.id, ()comm™d->ˇm.
f‹m©
.
vÆ
);

458 
APP_GUZZI_COMMAND__CAM_RESOLUTION
:

459 
	`ˇmîa_c⁄åﬁ_ªsﬁuti⁄
(

460 
comm™d
->
ˇm
.
id
,

461 
comm™d
->
ˇm
.
ªsﬁuti⁄
.
width
,

462 
comm™d
->
ˇm
.
ªsﬁuti⁄
.
height


464 
	`mmsdbg
(
DL_ERROR
, "comm™d \"%d %d %d %d\" sít\n", ()
comm™d
->
id
,

465 ()
comm™d
->
ˇm
.
id
, ()comm™d->ˇm.
ªsﬁuti⁄
.
width
,

466 ()
comm™d
->
ˇm
.
ªsﬁuti⁄
.
height
);

468 
APP_GUZZI_COMMAND__CAM_SHARPNESS
:

469 
	`ˇmîa_c⁄åﬁ_sh¨≤ess
(

470 
comm™d
->
ˇm
.
id
,

471 
comm™d
->
ˇm
.
sh¨≤ess
.
vÆ


473 
	`mmsdbg
(
DL_ERROR
, "command \"%d %d %d\" sent\n",

474 ()
comm™d
->
id
, ()comm™d->
ˇm
.id, ()comm™d->ˇm.
sh¨≤ess
.
vÆ
);

477 
	`mmsdbg
(
DL_ERROR
, "Unknow¿Aµ GUZZI Comm™d: %d", ()
comm™d
->
id
);

479 
	}
}

487 
	$≠p_guzzi_comm™d_waô_timeout_•i
 (*
≠p_¥iv©e
,

488 
≠p_guzzi_comm™d_ˇŒback_t
 *
ˇŒback
,

489 
uöt32_t
 
timeout_ms
)

491  
	`≠p_guzzi_comm™d_•i_waô_timeout
(
≠p_¥iv©e
, 
ˇŒback
, 
timeout_ms
)

492 + 
	`≠p_guzzi_comm™d_dbg_≥ek
(
≠p_¥iv©e
, 
ˇŒback
);

493 
	}
}

496 
oßl_£m
 *
	g≠p_guzzi_comm™d_£m
;

498 
≠p_guzzi_comm™d_t
 *
•i_comm™d_to_≠p_guzzi_comm™d
◊µ_guzzi_comm™d_à*
comm™d
, *
comm™d_•i
);

500 
	#MAX_APP_GUZZI_COMMANDS
 8

	)

501 
≠p_guzzi_comm™d_t
 
	g≠p_guzzi_comm™ds
[
MAX_APP_GUZZI_COMMANDS
];

502 
	g≠p_guzzi_comm™d_rd
 = 0, 
	g≠p_guzzi_comm™d_wr
 = 0;

504 
	$≠p_guzzi_comm™d_gë_wr_idx
()

506 
idx
 = 
≠p_guzzi_comm™d_wr
 + 1;

507 i‡(
idx
 >
MAX_APP_GUZZI_COMMANDS
)

508 
idx
 = 0;

509 i‡(
≠p_guzzi_comm™d_rd
 =
idx
)

511 
	`mmsdbg
(
DL_ERROR
, "Error: command queue overflow\n");

514  
idx
;

515 
	}
}

517 
	$≠p_guzzi_comm™d_commô_wr_idx
(
idx
)

519 
≠p_guzzi_comm™d_wr
 = 
idx
;

520 
	}
}

523 
	$≠p_guzzi_comm™d_gë_rd_idx
()

525 
idx
 = 
≠p_guzzi_comm™d_rd
;

527 i‡(
≠p_guzzi_comm™d_wr
 =
idx
)

529 
	`mmsdbg
(
DL_ERROR
, "Error: command queue overflow\n");

532 
idx
++;

533 i‡(
idx
 =
MAX_APP_GUZZI_COMMANDS
)

534 
idx
 = 0;

536  
idx
;

537 
	}
}

539 
	$≠p_guzzi_comm™d_commô_rd_idx
(
idx
)

541 
≠p_guzzi_comm™d_rd
 = 
idx
;

542 
	}
}

545 
	$≠p_guzzi_comm™d_execuã
(
uöt8_t
 *
ö_comm™d
)

547 
idx
;

548 
idx
 = 
	`≠p_guzzi_comm™d_gë_wr_idx
();

549 i‡(
idx
 < 0)

552 
	`•i_comm™d_to_≠p_guzzi_comm™d
(&
≠p_guzzi_comm™ds
[
idx
], (*)
ö_comm™d
);

553 
	`≠p_guzzi_comm™d_commô_wr_idx
(
idx
);

554 
	`oßl_£m_po°
(
≠p_guzzi_comm™d_£m
);

555 
	}
}

558 
	$≠p_guzzi_comm™d_waô_timeout_usb
(*
≠p_¥iv©e
,

559 
≠p_guzzi_comm™d_ˇŒback_t
 *
ˇŒback
,

560 
uöt32_t
 
timeout_ms
)

562 
rd_idx
;

563 
îr
;

565 
	`≠p_guzzi_comm™d_dbg_≥ek
(
≠p_¥iv©e
, 
ˇŒback
);

567 
îr
 = 
	`oßl_£m_waô_timeout
(
≠p_guzzi_comm™d_£m
, 
timeout_ms
);

568 i‡(
îr
)

574 
rd_idx
 = 
	`≠p_guzzi_comm™d_gë_rd_idx
();

576 i‡(
rd_idx
 < 0)

579 
	`ˇŒback
(
≠p_¥iv©e
, &
≠p_guzzi_comm™ds
[
rd_idx
]);

581 
	`≠p_guzzi_comm™d_commô_rd_idx
(
rd_idx
);

583  
îr
;

584 
	}
}

591 
	$maö
(
¨gc
, **
¨gv
)

593 
	`UNUSED
(
¨gc
);

594 
	`UNUSED
(
¨gv
);

596 
	`vîsi⁄_öfo_öô
();

598 
	`öôSy°em
();

600 
	`oßl_öô
();

603 
	`dç§v_¸óã
(&
dç_§v_hndl
);

604 
	`dç§v_imp‹t_db
(

605 
dç_§v_hndl
,

606 
ext_dç_d©aba£
,

607 
ext_dç_d©aba£_íd
 - 
ext_dç_d©aba£


609 
	`PROFILE_INIT
(4096, 2, 
¥ofûe_ªady_cb
, 
NULL
);

611 
	`guzzi_∂©f‹m_öô
();

612 
	`guzzi_evít_globÆ_˘ª©e
();

614 
	`£ndOutCª©e
(&
£ndOut_öôCfg
);

616 
	`vút_cm_dëe˘
();

619 
	`≠p_guzzi_comm™d_•i_öô
();

621 
≠p_guzzi_comm™d_£m
 = 
	`oßl_£m_¸óã
(0);

623 
	`∂©f‹m_drv_powî_öô
();

624 
	`∂©f‹m_ˇm_Àd_1
(0);

627 
	`APP_GUZZI_COMMAND_WAIT_TIMEOUT
(

628 
NULL
,

629 
≠p_guzzi_comm™d_ˇŒback
,

634 
	`∂©f‹m_ˇm_Àd_1
(1);

635 
	`∂©f‹m_drv_powî_deöô
();

637 
	`oßl_£m_de°roy
(
≠p_guzzi_comm™d_£m
);

639 
	}
}

	@cdk/apps/arch/ma2x5x/cdk_FLIC_1xIMX214_2xIMX208/leon/sendout_config.c

20 
	~"mv_ty≥s.h
"

22 
	~"£ndOutApi.h
"

23 #ifde‡
OUTPUT_UNIT_IS_HDMI


24 
	~"LcdCEA1080p60.h
"

29 #ifde‡
OUTPUT_UNIT_IS_MIPI


30 
	#MIPI_TX_NUM_LANES
 2

	)

31 
	#MIPI_TX_CLOCK
 400

	)

32 
	#MIPI_TX_USE_IRQ
 1

	)

35 #ifde‡
OUTPUT_UNIT_IS_USB


36 #i‚de‡
DISABLE_LEON_DCACHE


37 
	#USBPUMP_MDK_CACHE_ENABLE
 1

	)

39 
	#USBPUMP_MDK_CACHE_ENABLE
 0

	)

45 
HdmiCfg_t
 
	ghdmiInôCfg
 =

47 #ifde‡
OUTPUT_UNIT_IS_HDMI


48 
NULL
,

49 
NULL
,

50 &
lcdS≥c1080p60


52 
NULL


56 
MùiCfg_t
 
	gmùiInôCfg
 =

58 #ifde‡
OUTPUT_UNIT_IS_MIPI


59 .
˘æNo
 = 
MIPI_CTRL_5
,

60 .
	gmss_devi˚
 = 
DRV_MSS_LCD
,

61 .
	gnum_œ√s
 = 
MIPI_TX_NUM_LANES
,

62 .
	gtx_˛ock
 = 
MIPI_TX_CLOCK
,

63 .
	gªf_˛ock_kHz
 = 12000,

64 .
	gu£_úq
 = 
MIPI_TX_USE_IRQ


66 
NULL


70 #ifde‡
OUTPUT_UNIT_IS_USB


71 
osDrvUsbPhyP¨am_t
 
	göôP¨am
 =

73 .
íabÀOtgBlock
 = 
USB_PHY_OTG_DISABLED
,

74 .
	gu£Exã∫ÆClock
 = 0,

75 .
	gfSñ
 = 
USB_REFCLK_MHZ
,

76 .
	gªfClkSñ0
 = 
USB_SUPER_SPEED_CLK_CONFIG
,

77 .
	gf‹˚HsO∆y
 = 
USB_PHY_HS_ONLY_OFF


80 
USBPUMP_APPLICATION_RTEMS_CONFIGURATION
 
	gsg_D©aPump_AµC⁄fig
 =

81 
USBPUMP_APPLICATION_RTEMS_CONFIGURATION_INIT_V1
(

83  
NULL
,

88  
NULL
,

89  
NULL
,

90  
USBPUMP_MDK_CACHE_ENABLE
,

91  
UDMASK_ANY
 | 
UDMASK_ERRORS
 );

93 
≠p_guzzi_comm™d_execuã
(
uöt8_t
 *
ö_comm™d
);

97 
UsbCfg_t
 
	gusbInôCfg
 =

99 #ifde‡
OUTPUT_UNIT_IS_USB


100 &
öôP¨am
,

101 &
sg_D©aPump_AµC⁄fig
,

102 &
≠p_guzzi_comm™d_execuã


104 
NULL


108 
SídOutInôCfg_t
 
	g£ndOut_öôCfg
 =

110 &
hdmiInôCfg
,

111 &
mùiInôCfg
,

112 &
usbInôCfg


	@cdk/apps/arch/ma2x5x/cdk_FLIC_1xIMX214_2xIMX208/leon/sendout_config.h

16 #i‚de‡
SENDOUT_CONFIG_H


17 
	#SENDOUT_CONFIG_H


	)

22 
	~"mv_ty≥s.h
"

24 #ifde‡
OUTPUT_UNIT_IS_HDMI


25 #ifde‡
MV0212


26 
	~"MV0212.h
"

28 
	~"Bﬂrd182Api.h
"

30 
	~"LcdApi.h
"

31 
	~"DrvI2cMa°î.h
"

32 
	~"DrvADV7513.h
"

35 #ifde‡
OUTPUT_UNIT_IS_MIPI


36 
	~<DrvMùiDeföes.h
>

37 
	~"DrvMss.h
"

40 #ifde‡
OUTPUT_UNIT_IS_USB


41 
	~"OsDrvUsbPhy.h
"

42 
	~"usbpumpdebug.h
"

43 
	~"usbpump_≠∂iˇti⁄_πems_≠i.h
"

50 #i‚de‡
APP_CONFIGURATION


51 #w¨nög 
SEND
 
OUT
: 
USE
 
DEFAULT
 
DEFINITIONS


53 #ifde‡
OUTPUT_UNIT_IS_HDMI


55 
	#SEND_OUT_MAX_WIDTH
 (4300)

	)

56 
	#SEND_OUT_MAX_HEIGHT
 (3200)

	)

60 #i‡
deföed
(
OUTPUT_UNIT_IS_USB
Ë|| deföed(
OUTPUT_UNIT_IS_MIPI
)

63 
	#SEND_OUT_MAX_WIDTH
 (4300)

	)

64 
	#SEND_OUT_MAX_HEIGHT
 (3200)

	)

66 
	#USE_STATIC_HEADER


	)

67 
	#SEND_OUT_HEADER_HEIGHT
 (2)

	)

71 #ifde‡
OUTPUT_UNIT_IS_HDMI


72 
	#SEND_OUT_MAX_WIDTH
 (3842)

	)

73 
	#SEND_OUT_MAX_HEIGHT
 (2200)

	)

76 #i‡
deföed
(
OUTPUT_UNIT_IS_USB
Ë|| deföed(
OUTPUT_UNIT_IS_MIPI
)

79 
	#SEND_OUT_MAX_WIDTH
 (4300)

	)

80 
	#SEND_OUT_MAX_HEIGHT
 (3200)

	)

82 
	#USE_STATIC_HEADER


	)

83 
	#SEND_OUT_HEADER_HEIGHT
 (2)

	)

90 #ifde‡
OUTPUT_UNIT_IS_HDMI


91 
ADV7513C⁄tfigMode_t
 
	madvCfgMode
;

92 
I2CM_Devi˚
 **
	mi2c_dev_hndl
;

93 
LCDDi•œyCfg
 *
	mlcdCfg
;

95 *
	mdummy
;

97 } 
	tHdmiCfg_t
;

101 #ifde‡
OUTPUT_UNIT_IS_MIPI


102 
eDrvMùiCålNo
 
	m˘æNo
;

103 
drvMssDevi˚Ty≥
 
	mmss_devi˚
;

104 
	mnum_œ√s
;

105 
	mtx_˛ock
;

106 
u32
 
	mªf_˛ock_kHz
;

107 
	mu£_úq
;

109 *
	mdummy
;

111 } 
	tMùiCfg_t
;

114 (*
	tUsbSíd_I≈utCålCÆlback_Ty≥
)(
	tuöt8_t
 *);

118 #ifde‡
OUTPUT_UNIT_IS_USB


119 
osDrvUsbPhyP¨am_t
 *
phyP¨amInô
;

120 
USBPUMP_APPLICATION_RTEMS_CONFIGURATION
 *
d©aPumpCfgInô
;

121 
UsbSíd_I≈utCålCÆlback_Ty≥
 
cb_fun˘i⁄
;

123 *
dummy
;

125 } 
	tUsbCfg_t
;

	@cdk/apps/arch/ma2x5x/cdk_FLIC_3xIMX208/leon/AppSpecInterface.h

8 #i‚de‡
APPS_GUZZISPI_MV182_A208M_B208M_C208M_MA2150_LEON_APPSPECINTERFACE_H_


9 
	#APPS_GUZZISPI_MV182_A208M_B208M_C208M_MA2150_LEON_APPSPECINTERFACE_H_


	)

11 
	~"hÆ/hÆ_ˇmîa_moduÀ/h©_cm_drivî.h
"

14 
	~<utûs/mms_debug.h
>

15 
	~<utûs/¥ofûe/¥ofûe.h
>

16 
	~<oßl/oßl_°dlib.h
>

17 
	~<oßl/oßl_muãx.h
>

18 
	~<oßl/oßl_time.h
>

19 
	~<oßl/oßl_°rög.h
>

21 
	~"£ndOutApi.h
"

22 
	~"PùeI•3Cams.h
"

24 #i‚de‡
PIPE_CREATE


25 
	#PIPE_CREATE
 
pùe3CamsCª©e


	)

27 #i‚de‡
PIPE_DESTROY


28 
	#PIPE_DESTROY
 
pùe3CamsDe°roy


	)

31 
	#APP_SPEC_DEFS01
 
	`mmsdbg_deföe_v¨übÀ
(
vdl_ic
, 
DL_DEFAULT
, 0, "vdl_ic", "GuzzòIC.");

	)

34 #i‚de‡
MMSDEBUGLEVEL


35 
	#MMSDEBUGLEVEL
 
	`mmsdbg_u£_v¨übÀ
(
vdl_ic
)

	)

38 
	#INSTANCES_COUNT_MAX
 
MAX_NR_OF_CAMS


	)

40 
	#APP_DBG_ERROR
 
mmsdbg


	)

43 
ölöe
 
	$gëSrcLimôs
(
uöt32_t
 
§cId
, 
icSour˚Sëup
* 
§cSë
) {

44 
h©_ˇmîa_limôs_t
 
limôs
;

45 i‡–0 =
	`hai_cm_drivî_gë_ˇmîa_limôs
(
§cId
, &
limôs
)) {

46 
§cSë
->
maxWidth
 = 
limôs
.maxWidth;

47 
§cSë
->
maxHeight
 = 
limôs
.maxHeight;

48 
§cSë
->
maxPixñs
 = 
limôs
.maxPixels;

49 
§cSë
->
maxBµ
 = 
limôs
.maxBpp;

53 
	}
}

55 
	#UPDATE_SRC_LIMITS
(
SRC_ID
,
RETERN_VAL
Ë
	`gëSrcLimôs
(SRC_ID,RETERN_VAL)

	)

57 
ölöe
 
	$doPröt
(
a
, 
b
, 
c
) {

58 
	`¥ötf
("lg: %d, %d, %d \n", 
a
, 
b
, 
c
);

60 
	}
}

61 
	#_PROFILE_ADD
(
ID
, 
V1
, 
V2
Ë
	`PROFILE_ADD
(ID, V1, V2)

	)

	@cdk/apps/arch/ma2x5x/cdk_FLIC_3xIMX208/leon/PipeIsp3Cams.cpp

1 
	~<Opùe.h
>

3 
	~<Flic.h
>

4 
	~<MemAŒoˇt‹.h
>

6 
	~"PlgSour˚.h
"

7 
	~"PlgI•Cål.h
"

8 
	~"PlgI•Proc.h
"

9 
	~"PlgI•M⁄o.h
"

10 
	~"PlgOutItf.h
"

12 
	~"PùeI•3Cams.h
"

13 
	~"sched.h
"

15 
PlgSour˚
 
	g∂gSrc
 [
APP_NR_OF_CAMS
] 
SECTION
(".cmx_direct.data");

16 
PlgI•Cål
 *
∂gI•Cål
 
SECTION
(".cmx_direct.data");

18 
PlgI•Proc
 
	g∂gI•C
 [
APP_NR_OF_CAMS_COLOR
] 
SECTION
(".cmx_direct.data");

19 
PlgI•M⁄o
 
	g∂gI•M
 [
APP_NR_OF_CAMS_MONO
] 
SECTION
(".cmx_direct.data");

22 
	gPlgPoﬁ
<
	gImgFøme
> 
	g∂gPoﬁSrc
[
APP_NR_OF_CAMS
] 
SECTION
(".cmx_direct.data");

23 
	gPlgPoﬁ
<
	gImgFøme
> 
	g∂gPoﬁI•O
[
APP_NR_OF_CAMS
] 
SECTION
(".cmx_direct.data");

26 
PlgOutItf
 
∂gOut
 
SECTION
(".cmx_direct.data");

28 
PlgI•Proc
 
	g∂gI•Sé
 [
APP_NR_OF_CAMS_COLOR
] 
SECTION
(".cmx_direct.data");

29 
	gPlgPoﬁ
<
	gImgFøme
> 
	g∂gPoﬁI•Sé
[
APP_NR_OF_CAMS_COLOR
] 
SECTION
(".cmx_direct.data");

31 
Pùñöe
 
SECTION
(".cmx_dúe˘.d©a"Ë
p
(20);

38 
	$pùe3CamsCª©e
(
GëSrcSzLimôs
 
gëSrcSzLimôs
)

40 
uöt32_t
 
c
 = 0;

42 
	`OpùeRe£t
();

44 
RgnAŒoc
.
	`Cª©e
(
RgnBuff
, 
DEF_POOL_SZ
);

45 
∂gI•Cål
 = 
PlgI•Cål
::
	`ö°™˚
();

46 
∂gI•Cål
->
	`Cª©e
();

47 
∂gI•Cål
->
schP¨am
.
sched_¥i‹ôy
 = 
CUSTOM_FLIC_PRIORITY
;

48 
∂gOut
 .
	`Cª©e
();

49 
∂gOut
.
schP¨am
.
sched_¥i‹ôy
 = 
CUSTOM_FLIC_PRIORITY
;

52 
c
 = (
uöt32_t
)
IC_SOURCE_0
; c < 
APP_NR_OF_CAMS_COLOR
; c++) {

53 
∂gSrc
[
c
] .
	`Cª©e
((
icSour˚In°™˚
)c);

54 
∂gSrc
[
c
].
schP¨am
.
sched_¥i‹ôy
 = 
CUSTOM_FLIC_PRIORITY
;

55 
∂gSrc
[
c
] .
outFmt
 = 
SIPP_FMT_16BIT
;

56 
icSour˚Sëup
 
§cSë
;

57 
	`as£π
((0 =
	`gëSrcSzLimôs
(
c
, &
§cSë
)) && "CameraÇot connected, AppÉxpect 3 cams");

58 
icSour˚Sëup
* 
§cLimôs
 = &
§cSë
;

59 
§cLimôs
->
maxBµ
 = 16;

60 
∂gPoﬁSrc
[
c
].
	`Cª©e
(&
RgnAŒoc
, 
N_POOL_FRMS
, ((
§cLimôs
->
maxPixñs
 * srcLimôs->
maxBµ
)) >> 3);

61 
∂gPoﬁI•O
[
c
].
	`Cª©e
(&
RgnAŒoc
, 
N_POOL_FRMS
, (
§cLimôs
->
maxPixñs
 * 3)>>1);

62 
∂gPoﬁI•Sé
[
c
].
	`Cª©e
(&
RgnAŒoc
, 
N_POOL_FRMS_STL
, (
§cLimôs
->
maxPixñs
 * 3)>>1);

64 
∂gI•C
[
c
].
	`Cª©e
(c, 
§cSë
.
≠pS≥cificInfo
);

65 
∂gI•C
[
c
].
schP¨am
.
sched_¥i‹ôy
 = 
CUSTOM_FLIC_PRIORITY
;

66 
∂gI•Sé
[
c
].
	`Cª©e
(c+
APP_NR_OF_CAMS
, 0);

67 
∂gI•Sé
[
c
].
schP¨am
.
sched_¥i‹ôy
 = 
CUSTOM_FLIC_PRIORITY
;

71 
c
 = (
uöt32_t
)
APP_NR_OF_CAMS_COLOR
; c < (APP_NR_OF_CAMS_COLOR+
APP_NR_OF_CAMS_MONO
); c++) {

72 
∂gSrc
[
c
] .
	`Cª©e
((
icSour˚In°™˚
)c);

73 
∂gSrc
[
c
].
schP¨am
.
sched_¥i‹ôy
 = 
CUSTOM_FLIC_PRIORITY
;

74 
∂gSrc
[
c
] .
outFmt
 = 
SIPP_FMT_16BIT
;

75 
icSour˚Sëup
 
§cSë
;

76 
	`as£π
((0 =
	`gëSrcSzLimôs
(
c
, &
§cSë
)) && "CameraÇot connected, AppÉxpect 3 cams");

77 
icSour˚Sëup
* 
§cLimôs
 = &
§cSë
;

78 
§cLimôs
->
maxBµ
 = 16;

79 
∂gPoﬁSrc
[
c
].
	`Cª©e
(&
RgnAŒoc
, 
N_POOL_FRMS
, ((
§cLimôs
->
maxPixñs
 * srcLimôs->
maxBµ
)) >> 3);

80 
∂gPoﬁI•O
[
c
].
	`Cª©e
(&
RgnAŒoc
, 
N_POOL_FRMS
, (
§cLimôs
->
maxPixñs
 * 3)>>1);

81 
∂gI•M
[
c
-
APP_NR_OF_CAMS_COLOR
].
	`Cª©e
(c, 0);

82 
∂gI•M
[
c
-
APP_NR_OF_CAMS_COLOR
].
schP¨am
.
sched_¥i‹ôy
 = 
CUSTOM_FLIC_PRIORITY
;

86 
p
.
	`Add
(
∂gI•Cål
);

87 
p
.
	`Add
(&
∂gOut
);

91 
c
 = (
uöt32_t
)
IC_SOURCE_0
; c < 
APP_NR_OF_CAMS_COLOR
; c++) {

92 
p
.
	`Add
(&
∂gSrc
 [
c
]);

93 
p
.
	`Add
(&
∂gI•C
 [
c
]);

94 
p
.
	`Add
(&
∂gI•Sé
 [
c
]);

95 
p
.
	`Add
(&
∂gPoﬁSrc
 [
c
]);

96 
p
.
	`Add
(&
∂gPoﬁI•O
 [
c
]);

97 
p
.
	`Add
(&
∂gPoﬁI•Sé
[
c
]);

101 
c
 = (
uöt32_t
)
APP_NR_OF_CAMS_COLOR
; c < (APP_NR_OF_CAMS_COLOR+
APP_NR_OF_CAMS_MONO
); c++) {

102 
p
.
	`Add
(&
∂gSrc
 [
c
]);

103 
p
.
	`Add
(&
∂gI•M
 [
c
-
APP_NR_OF_CAMS_COLOR
]);

104 
p
.
	`Add
(&
∂gPoﬁSrc
 [
c
]);

105 
p
.
	`Add
(&
∂gPoﬁI•O
 [
c
]);

109 
c
 = 0; c < 
APP_NR_OF_CAMS_COLOR
; c++) {

110 
∂gPoﬁSrc
[
c
].
out
 .
	`Lök
(&
∂gSrc
[c].
öO
);

111 
∂gSrc
[
c
] .
outComm™d
 .
	`Lök
(&
∂gI•Cål
->
öCålRe•⁄£
);

112 
∂gI•Cål
 -> 
outSrcComm™d
[
c
].
	`Lök
(&
∂gSrc
[c].
öComm™d
);

113 
∂gPoﬁI•O
[
c
].
out
 .
	`Lök
(&
∂gI•C
[c].
öO
);

114 
∂gSrc
[
c
] .
out
 .
	`Lök
(&
∂gI•C
[c].
öI
);

115 
∂gI•C
[
c
] .
outF
 .
	`Lök
(&
∂gOut
.
ö
 );

116 
∂gI•C
[
c
] .
outE
 .
	`Lök
(&
∂gI•Cål
->
öCålRe•⁄£
);

118 
∂gPoﬁI•Sé
[
c
].
out
 .
	`Lök
(&
∂gI•Sé
[c].
öO
);

119 
∂gSrc
[
c
] .
outSé
 .
	`Lök
(&
∂gI•Sé
[c].
öI
);

120 
∂gI•Sé
[
c
] .
outF
 .
	`Lök
(&
∂gOut
.
ö
 );

121 
∂gI•Sé
[
c
] .
outE
 .
	`Lök
(&
∂gI•Cål
->
öCålRe•⁄£
);

126 
c
 = (
uöt32_t
)
APP_NR_OF_CAMS_COLOR
; c < (APP_NR_OF_CAMS_COLOR+
APP_NR_OF_CAMS_MONO
); c++) {

127 
∂gPoﬁSrc
[
c
].
out
 .
	`Lök
(&
∂gSrc
[c].
öO
);

128 
∂gSrc
[
c
] .
outComm™d
 .
	`Lök
(&
∂gI•Cål
->
öCålRe•⁄£
);

129 
∂gI•Cål
 -> 
outSrcComm™d
[
c
].
	`Lök
(&
∂gSrc
[c].
öComm™d
);

130 
∂gPoﬁI•O
[
c
].
out
 .
	`Lök
(&
∂gI•M
[c-
APP_NR_OF_CAMS_COLOR
].
öO
);

131 
∂gSrc
[
c
] .
out
 .
	`Lök
(&
∂gI•M
[c-
APP_NR_OF_CAMS_COLOR
].
öI
);

132 
∂gI•M
[
c
-
APP_NR_OF_CAMS_COLOR
] .
outF
 .
	`Lök
(&
∂gOut
.
ö
 );

133 
∂gI•M
[
c
-
APP_NR_OF_CAMS_COLOR
] .
outE
 .
	`Lök
(&
∂gI•Cål
->
öCålRe•⁄£
);

136 
∂gOut
.
outCmd
.
	`Lök
(&
∂gI•Cål
->
öCålRe•⁄£
);

137 
∂gI•Cål
->
outOutCmd
.
	`Lök
(&
∂gOut
.
öCmd
);

139 
p
.
	`Sèπ
();

140 
	}
}

142 
	$pùe3CamsDe°roy
() {

143 
p
.
	`St›
();

144 
p
.
	`Waô
();

145 
p
.
	`Dñëe
();

146 
RgnAŒoc
.
	`Dñëe
();

147 
	}
}

	@cdk/apps/arch/ma2x5x/cdk_FLIC_3xIMX208/leon/PipeIsp3Cams.h

12 #i‚de‡
_PIPE_ISP_3CAMS_H


13 
	#_PIPE_ISP_3CAMS_H


	)

15 #ifde‡
__˝lu•lus


19 #i‚de‡
CUSTOM_FLIC_PRIORITY


20 
	#CUSTOM_FLIC_PRIORITY
 211

	)

23 #i‚de‡
N_POOL_FRMS


24 
	#N_POOL_FRMS
 3

	)

27 #i‚de‡
N_POOL_FRMS_SRC


28 
	#N_POOL_FRMS_SRC
 4

	)

31 #i‚de‡
N_POOL_FRMS_STL


32 
	#N_POOL_FRMS_STL
 1

	)

37 
	#APP_NR_OF_CAMS
 3

	)

38 
	#APP_NR_OF_CAMS_COLOR
 1

	)

39 
	#APP_NR_OF_CAMS_MONO
 (
APP_NR_OF_CAMS
 - 
APP_NR_OF_CAMS_COLOR
)

	)

42 (*
GëSrcSzLimôs
)(
	tuöt32_t
 
	t§cId
, 
	ticSour˚Sëup
* 
	t§cSë
);

45 
pùe3CamsCª©e
(
GëSrcSzLimôs
 
gëSrcSzLimôs
);

48 
pùe3CamsDe°roy
();

51 #ifde‡
__˝lu•lus


	@cdk/apps/arch/ma2x5x/cdk_FLIC_3xIMX208/leon/app_guzzi_command.h

35 #i‚de‡
_APP_GUZZI_COMMAND_H


36 
	#_APP_GUZZI_COMMAND_H


	)

38 #ifde‡
__˝lu•lus


42 
	~<°döt.h
>

44 
	#MAX_DYNAMIC_DTP_PAYLOAD_SIZE
 (64)

	)

47 
APP_GUZZI_COMMAND__NOP
,

48 
APP_GUZZI_COMMAND__CAM_START
,

49 
APP_GUZZI_COMMAND__CAM_STOP
,

50 
APP_GUZZI_COMMAND__CAM_CAPTURE
,

51 
APP_GUZZI_COMMAND__CAM_LENS_MOVE
,

52 
APP_GUZZI_COMMAND__CAM_AF_TRIGGER
,

53 
APP_GUZZI_COMMAND__CAM_AE_MANUAL
,

54 
APP_GUZZI_COMMAND__CAM_AE_AUTO
,

55 
APP_GUZZI_COMMAND__CAM_AWB_MODE
,

56 
APP_GUZZI_COMMAND__CAM_SCENE_MODE
,

57 
APP_GUZZI_COMMAND__CAM_ANTIBANDING_MODE
,

58 
APP_GUZZI_COMMAND__CAM_AE_EXPOSURE_COMPENSATION
,

59 
°h_ñ£2
,

60 
APP_GUZZI_COMMAND__CAM_AE_LOCK
,

61 
APP_GUZZI_COMMAND__CAM_AE_TARGET_FPS_RANGE
,

62 
°h_ñ£3
,

63 
APP_GUZZI_COMMAND__CAM_AWB_LOCK
,

64 
APP_GUZZI_COMMAND__CAM_CAPTURE_INTRENT
,

65 
APP_GUZZI_COMMAND__CAM_CONTROL_MODE
,

66 
°h_ñ£4
,

67 
°h_ñ£5
,

68 
APP_GUZZI_COMMAND__CAM_FRAME_DURATION
,

69 
°h_ñ£7
,

70 
APP_GUZZI_COMMAND__CAM_SENSITIVITY
,

71 
APP_GUZZI_COMMAND__CAM_EFFECT_MODE
,

72 
°h_ñ£8
,

73 
APP_GUZZI_COMMAND__CAM_AF_MODE
,

74 
APP_GUZZI_COMMAND__CAM_NOISE_REDUCTION_STRENGTH
,

75 
APP_GUZZI_COMMAND__CAM_SATURATION
,

76 
°h_ñ£9
,

77 
°h_ñ£10
,

78 
APP_GUZZI_COMMAND__CAM_BRIGHTNESS
,

79 
°h_ñ£11
,

80 
APP_GUZZI_COMMAND__CAM_FORMAT
,

81 
APP_GUZZI_COMMAND__CAM_RESOLUTION
,

82 
APP_GUZZI_COMMAND__CAM_SHARPNESS
,

83 
APP_GUZZI_COMMAND__LIVE_TUNING_UNLOCK
,

84 
APP_GUZZI_COMMAND__LIVE_TUNING_APPLY
,

85 
APP_GUZZI_COMMAND__OUTPUT_CONTROL
,

86 
APP_GUZZI_COMMAND__MAX


87 } 
	t≠p_guzzi_comm™d_id_t
;

90 
≠p_guzzi_comm™d_id_t
 
id
;

93 
uöt32_t
 
id
;

96 
uöt32_t
 
pos
;

97 } 
Àns_move
;

99 
uöt32_t
 
exp_us
;

100 
uöt32_t
 
£nsôivôy_iso
;

101 
uöt32_t
 
‰ame_duøti⁄_us
;

102 } 
´_m™uÆ
;

104 
uöt32_t
 
mode
;

105 } 
awb_mode
;

107 
uöt32_t
 
ty≥
;

108 } 
s˚√_mode
;

110 
uöt32_t
 
ty≥
;

111 } 
™tib™dög_mode
;

113 
uöt32_t
 
ty≥
;

114 } 
´_lock_mode
;

116 
uöt32_t
 
mö_Âs
;

117 
uöt32_t
 
max_Âs
;

118 } 
´_èrgë_Âs_ønge
;

120 
uöt32_t
 
ty≥
;

121 } 
awb_lock_c⁄åﬁ
;

123 
uöt32_t
 
mode
;

124 } 
ˇ±uª_öã¡
;

126 
uöt32_t
 
ty≥
;

127 } 
c⁄åﬁ_mode
;

129 
uöt64_t
 
vÆ
;

130 } 
‰ame_duøti⁄
;

132 
uöt32_t
 
vÆ
;

133 } 
exposuª_com≥nßti⁄
;

135 
uöt32_t
 
iso_vÆ
;

136 } 
£nsôivôy
;

138 
uöt32_t
 
ty≥
;

139 } 
ef„˘_mode
;

141 
uöt32_t
 
ty≥
;

142 } 
af_mode
;

144 
uöt32_t
 
vÆ
;

145 } 
noi£_ªdu˘i⁄_°ªngth
;

147 
uöt32_t
 
vÆ
;

148 } 
ßtuøti⁄
;

150 
uöt32_t
 
vÆ
;

151 } 
brighäess
;

153 
uöt32_t
 
vÆ
;

154 } 
f‹m©
;

156 
uöt32_t
 
width
;

157 
uöt32_t
 
height
;

158 } 
ªsﬁuti⁄
;

160 
uöt32_t
 
vÆ
;

161 } 
sh¨≤ess
;

163 } 
ˇm
;

165 
uöt32_t
 
size
;

166 
uöt32_t
 
off£t
;

167 
uöt8_t
 
d©a
[
MAX_DYNAMIC_DTP_PAYLOAD_SIZE
];

168 } 
live_tunög
;

170 
uöt32_t
 
ˇmîa_í_bô_mask
;

171 
uöt32_t
 
‰ame_ty≥_í_bô_mask
;

172 
uöt32_t
 
‰ame_f‹m©_í_bô_mask
;

173 } 
ouçut_c⁄åﬁ
;

175 } 
	t≠p_guzzi_comm™d_t
;

177 
	t≠p_guzzi_comm™d_ˇŒback_t
(

178 *
	t≠p_¥iv©e
,

179 
	t≠p_guzzi_comm™d_t
 *
	tcomm™d


182 
≠p_guzzi_comm™d_≥ek
(

183 *
≠p_¥iv©e
,

184 
≠p_guzzi_comm™d_ˇŒback_t
 *
ˇŒback


186 
≠p_guzzi_comm™d_waô
(

187 *
≠p_¥iv©e
,

188 
≠p_guzzi_comm™d_ˇŒback_t
 *
ˇŒback


190 
≠p_guzzi_comm™d_waô_timeout
(

191 *
≠p_¥iv©e
,

192 
≠p_guzzi_comm™d_ˇŒback_t
 *
ˇŒback
,

193 
uöt32_t
 
timeout_ms


196 #ifde‡
__˝lu•lus


	@cdk/apps/arch/ma2x5x/cdk_FLIC_3xIMX208/leon/app_guzzi_command_dbg.c

35 
	~<oßl/oßl_time.h
>

36 
	~<swcLe⁄Utûs.h
>

37 
	~<≠p_guzzi_comm™d.h
>

38 
	~"≠p_guzzi_comm™d_dbg.h
"

40 #i‚de‡
APP_GUZZI_COMMAND_DBG_PROBE_INTERVAL_MS


41 
	#APP_GUZZI_COMMAND_DBG_PROBE_INTERVAL_MS
 10

	)

44 
uöt32_t
 
	g≠p_guzzi_comm™d_dbg_id
 = (uöt32_t)
APP_GUZZI_COMMAND__NOP
;

45 
uöt32_t
 
	g≠p_guzzi_comm™d_dbg_ˇm_id
 = 0;

46 
uöt32_t
 
	g≠p_guzzi_comm™d_dbg_ˇm_Àns_move_pos
 = 0;

47 
uöt32_t
 
	g≠p_guzzi_comm™d_dbg_ˇm_´_m™uÆ_exp_us
 = 0;

48 
uöt32_t
 
	g≠p_guzzi_comm™d_dbg_ˇm_´_m™uÆ_£nsôivôy_iso
 = 0;

49 
uöt32_t
 
	g≠p_guzzi_comm™d_dbg_ˇm_´_m™uÆ_‰ame_duøti⁄_us
 = 0;

50 
uöt32_t
 
	g≠p_guzzi_comm™d_dbg_ˇm_awb_mode
 = 0;

51 
uöt32_t
 
	g≠p_guzzi_comm™d_dbg_ˇm_™tib™dög_mode
 = 0;

52 
uöt32_t
 
	g≠p_guzzi_comm™d_dbg_ˇm_´_lock_c⁄åﬁ
 = 0;

53 
uöt32_t
 
	g≠p_guzzi_comm™d_dbg_ˇm_´_èrgë_Âs_mö
 = 0;

54 
uöt32_t
 
	g≠p_guzzi_comm™d_dbg_ˇm_´_èrgë_Âs_max
 = 0;

55 
uöt32_t
 
	g≠p_guzzi_comm™d_dbg_ˇm_awb_lock_c⁄åﬁ
 = 0;

56 
uöt32_t
 
	g≠p_guzzi_comm™d_dbg_ˇm_ˇ±uª_öã¡
 = 0;

57 
uöt32_t
 
	g≠p_guzzi_comm™d_dbg_ˇm_c⁄åﬁ
 = 0;

58 
uöt32_t
 
	g≠p_guzzi_comm™d_dbg_ˇm_exp_com≥nßti⁄
 = 0;

59 
uöt32_t
 
	g≠p_guzzi_comm™d_dbg_ˇm_iso
 = 0;

60 
uöt32_t
 
	g≠p_guzzi_comm™d_dbg_ˇm_ef„˘_mode
 = 0;

61 
uöt64_t
 
	g≠p_guzzi_comm™d_dbg_ˇm_‰ame_duøti⁄
 = 0;

63 
	~<utûs/mms_debug.h
>

65 
mmsdbg_deföe_v¨übÀ
(

66 
vdl_≠p_guzzi_comm™d_dbg
,

67 
DL_DEFAULT
,

72 
	#MMSDEBUGLEVEL
 
	`mmsdbg_u£_v¨übÀ
(
vdl_≠p_guzzi_comm™d_dbg
)

	)

74 
	#U
(
V
Ë
	`swcLe⁄RódNoCacheU32
(
	`unˇched
((
uöt32_t
)&(V)))

	)

75 
ölöe
 
uöt32_t
 
	$unˇched
(
uöt32_t
 
v
)

77 i‡((0x70000000 <
v
) && (v <= 0x70200000)) {

78  
v
 | 0x80000000;

79 } i‡((0x80000000 <
v
) && (v <= 0x88000000)) {

80  
v
 | 0x40000000;

82  
v
;

83 
	}
}

85 
≠p_guzzi_comm™d_t
 *
	$≠p_guzzi_comm™d_dbg_fûl
(

86 
≠p_guzzi_comm™d_t
 *
comm™d


89 (
≠p_guzzi_comm™d_id_t
)
	`U
(
≠p_guzzi_comm™d_dbg_id
)) {

90 
APP_GUZZI_COMMAND__CAM_START
:

91 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_START
;

93 
APP_GUZZI_COMMAND__CAM_STOP
:

94 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_STOP
;

96 
APP_GUZZI_COMMAND__CAM_CAPTURE
:

97 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_CAPTURE
;

99 
APP_GUZZI_COMMAND__CAM_LENS_MOVE
:

100 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_LENS_MOVE
;

101 
comm™d
->
ˇm
.
Àns_move
.
pos
 =

102 
	`U
(
≠p_guzzi_comm™d_dbg_ˇm_Àns_move_pos
);

104 
APP_GUZZI_COMMAND__CAM_AF_TRIGGER
:

105 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_AF_TRIGGER
;

107 
APP_GUZZI_COMMAND__CAM_AE_MANUAL
:

108 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_AE_MANUAL
;

109 
comm™d
->
ˇm
.
´_m™uÆ
.
exp_us
 =

110 
	`U
(
≠p_guzzi_comm™d_dbg_ˇm_´_m™uÆ_exp_us
);

111 
comm™d
->
ˇm
.
´_m™uÆ
.
£nsôivôy_iso
 =

112 
	`U
(
≠p_guzzi_comm™d_dbg_ˇm_´_m™uÆ_£nsôivôy_iso
);

113 
comm™d
->
ˇm
.
´_m™uÆ
.
‰ame_duøti⁄_us
 =

114 
	`U
(
≠p_guzzi_comm™d_dbg_ˇm_´_m™uÆ_‰ame_duøti⁄_us
);

116 
APP_GUZZI_COMMAND__CAM_AE_AUTO
:

117 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_AE_AUTO
;

119 
APP_GUZZI_COMMAND__CAM_AWB_MODE
:

120 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_AWB_MODE
;

121 
comm™d
->
ˇm
.
awb_mode
.
mode
 =

122 
	`U
(
≠p_guzzi_comm™d_dbg_ˇm_awb_mode
);

124 
APP_GUZZI_COMMAND__CAM_ANTIBANDING_MODE
:

125 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_ANTIBANDING_MODE
;

126 
comm™d
->
ˇm
.
™tib™dög_mode
.
ty≥
 =

127 
	`U
(
≠p_guzzi_comm™d_dbg_ˇm_™tib™dög_mode
);

129 
APP_GUZZI_COMMAND__CAM_AE_LOCK
:

130 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_AE_LOCK
;

131 
comm™d
->
ˇm
.
´_lock_mode
.
ty≥
 =

132 
	`U
(
≠p_guzzi_comm™d_dbg_ˇm_´_lock_c⁄åﬁ
);

134 
APP_GUZZI_COMMAND__CAM_AE_TARGET_FPS_RANGE
:

135 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_AE_TARGET_FPS_RANGE
;

136 
comm™d
->
ˇm
.
´_èrgë_Âs_ønge
.
mö_Âs
 =

137 
	`U
(
≠p_guzzi_comm™d_dbg_ˇm_´_èrgë_Âs_mö
);

138 
comm™d
->
ˇm
.
´_èrgë_Âs_ønge
.
max_Âs
 =

139 
	`U
(
≠p_guzzi_comm™d_dbg_ˇm_´_èrgë_Âs_max
);

141 
APP_GUZZI_COMMAND__CAM_AWB_LOCK
:

142 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_AWB_LOCK
;

143 
comm™d
->
ˇm
.
awb_lock_c⁄åﬁ
.
ty≥
 =

144 
	`U
(
≠p_guzzi_comm™d_dbg_ˇm_awb_lock_c⁄åﬁ
);

146 
APP_GUZZI_COMMAND__CAM_CAPTURE_INTRENT
:

147 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_CAPTURE_INTRENT
;

148 
comm™d
->
ˇm
.
ˇ±uª_öã¡
.
mode
 =

149 
	`U
(
≠p_guzzi_comm™d_dbg_ˇm_ˇ±uª_öã¡
);

151 
APP_GUZZI_COMMAND__CAM_CONTROL_MODE
:

152 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_CONTROL_MODE
;

153 
comm™d
->
ˇm
.
c⁄åﬁ_mode
.
ty≥
 =

154 
	`U
(
≠p_guzzi_comm™d_dbg_ˇm_c⁄åﬁ
);

156 
APP_GUZZI_COMMAND__CAM_FRAME_DURATION
:

157 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_FRAME_DURATION
;

158 
comm™d
->
ˇm
.
‰ame_duøti⁄
.
vÆ
 =

159 
	`U
(
≠p_guzzi_comm™d_dbg_ˇm_c⁄åﬁ
);

161 
APP_GUZZI_COMMAND__CAM_AE_EXPOSURE_COMPENSATION
:

162 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_AE_EXPOSURE_COMPENSATION
;

163 
comm™d
->
ˇm
.
exposuª_com≥nßti⁄
.
vÆ
 =

164 
	`U
(
≠p_guzzi_comm™d_dbg_ˇm_exp_com≥nßti⁄
);

166 
APP_GUZZI_COMMAND__CAM_SENSITIVITY
:

167 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_SENSITIVITY
;

168 
comm™d
->
ˇm
.
£nsôivôy
.
iso_vÆ
 =

169 
	`U
(
≠p_guzzi_comm™d_dbg_ˇm_iso
);

171 
APP_GUZZI_COMMAND__CAM_EFFECT_MODE
:

172 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_EFFECT_MODE
;

173 
comm™d
->
ˇm
.
ef„˘_mode
.
ty≥
 =

174 
	`U
(
≠p_guzzi_comm™d_dbg_ˇm_ef„˘_mode
);

177 
	`mmsdbg
(

178 
DL_ERROR
,

180 
	`U
(
≠p_guzzi_comm™d_dbg_id
)

182 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__NOP
;

184 
comm™d
->
ˇm
.
id
 = 
	`U
(
≠p_guzzi_comm™d_dbg_ˇm_id
);

186  
comm™d
;

187 
	}
}

189 
	$≠p_guzzi_comm™d_dbg_≥ek
(

190 *
≠p_¥iv©e
,

191 
≠p_guzzi_comm™d_ˇŒback_t
 *
ˇŒback


194 
≠p_guzzi_comm™d_t
 
comm™d
;

196 i‡(
	`U
(
≠p_guzzi_comm™d_dbg_id
Ë!(
uöt32_t
)
APP_GUZZI_COMMAND__NOP
) {

197 
	`ˇŒback
(

198 
≠p_¥iv©e
,

199 
	`≠p_guzzi_comm™d_dbg_fûl
(

200 &
comm™d


204 
≠p_guzzi_comm™d_dbg_id
 = (
uöt32_t
)
APP_GUZZI_COMMAND__NOP
;

209 
	}
}

211 
	$≠p_guzzi_comm™d_dbg_waô
(

212 *
≠p_¥iv©e
,

213 
≠p_guzzi_comm™d_ˇŒback_t
 *
ˇŒback


216 !
	`≠p_guzzi_comm™d_dbg_≥ek
(
≠p_¥iv©e
, 
ˇŒback
)) {

217 
	`oßl_u¶ìp
(
APP_GUZZI_COMMAND_DBG_PROBE_INTERVAL_MS
*1000);

219 
	}
}

221 
	$≠p_guzzi_comm™d_dbg_waô_timeout
(

222 *
≠p_¥iv©e
,

223 
≠p_guzzi_comm™d_ˇŒback_t
 *
ˇŒback
,

224 
uöt32_t
 
timeout_ms


227 
uöt32_t
 
À·
, 
m¶ìp
;

228 
ˇŒed
;

230 
À·
 = 
timeout_ms
;

232 !(
ˇŒed
 = 
	`≠p_guzzi_comm™d_dbg_≥ek
(
≠p_¥iv©e
, 
ˇŒback
)Ë&& 
À·
) {

233 
m¶ìp
 = 
APP_GUZZI_COMMAND_DBG_PROBE_INTERVAL_MS
 < 
À·


234 ? 
APP_GUZZI_COMMAND_DBG_PROBE_INTERVAL_MS


235 : 
À·
;

236 
	`oßl_u¶ìp
(
m¶ìp
*1000);

237 
À·
 -
m¶ìp
;

240  
ˇŒed
;

241 
	}
}

	@cdk/apps/arch/ma2x5x/cdk_FLIC_3xIMX208/leon/app_guzzi_command_dbg.h

35 #i‚de‡
_APP_GUZZI_COMMAND_DBG_H


36 
	#_APP_GUZZI_COMMAND_DBG_H


	)

38 #ifde‡
__˝lu•lus


42 
	~<≠p_guzzi_comm™d.h
>

44 
≠p_guzzi_comm™d_dbg_≥ek
(

45 *
≠p_¥iv©e
,

46 
≠p_guzzi_comm™d_ˇŒback_t
 *
ˇŒback


48 
≠p_guzzi_comm™d_dbg_waô
(

49 *
≠p_¥iv©e
,

50 
≠p_guzzi_comm™d_ˇŒback_t
 *
ˇŒback


52 
≠p_guzzi_comm™d_dbg_waô_timeout
(

53 *
≠p_¥iv©e
,

54 
≠p_guzzi_comm™d_ˇŒback_t
 *
ˇŒback
,

55 
uöt32_t
 
timeout_ms


59 #ifde‡
__˝lu•lus


	@cdk/apps/arch/ma2x5x/cdk_FLIC_3xIMX208/leon/app_guzzi_command_spi.c

35 
	~<°dio.h
>

36 
	~<°dlib.h
>

37 
	~<°rög.h
>

38 
	~<as£π.h
>

40 
	~<πems/libio.h
>

41 
	~<utûs/mms_debug.h
>

43 
	~<DrvGpio.h
>

45 
	~<OsDrvSpiSœveCP.h
>

46 
	~<OsMesßgePrŸocﬁ.h
>

48 
	~"≠p_guzzi_comm™d_•i.h
"

49 
	~"≠p_guzzi_•i_comm™ds.h
"

51 #i‚de‡
APP_GUZZI_CAMMAND_SPI_HOST_NOTIFY_GPIO


52 
	#APP_GUZZI_CAMMAND_SPI_HOST_NOTIFY_GPIO
 22

	)

54 #i‚de‡
APP_GUZZI_CAMMAND_SPI_CH_ID


55 
	#APP_GUZZI_CAMMAND_SPI_CH_ID
 
SPI1


	)

57 #i‚de‡
APP_GUZZI_CAMMAND_SPI_VC_ID


58 
	#APP_GUZZI_CAMMAND_SPI_VC_ID
 1

	)

60 #i‚de‡
APP_GUZZI_CAMMAND_SPI_VC_PRIO


61 
	#APP_GUZZI_CAMMAND_SPI_VC_PRIO
 150

	)

64 
	#RTEMS_DRIVER_AUTO_MAJOR
 0

	)

65 
	#SPI_COMMAND_BUFFER_SIZE
 1024

	)

67 
mmsdbg_deföe_v¨übÀ
(

68 
vdl_≠p_guzzi_comm™d_•i
,

69 
DL_DEFAULT
,

74 
	#MMSDEBUGLEVEL
 
	`mmsdbg_u£_v¨übÀ
(
vdl_≠p_guzzi_comm™d_•i
)

	)

76 
DRVSPI_CONFIGURATION
(

77 
APP_GUZZI_CAMMAND_SPI_CH_ID
,

82 
APP_GUZZI_CAMMAND_SPI_HOST_NOTIFY_GPIO
,

85 
DECLARE_COMMUNICATION_PROTOCOL_DRIVER_TABLE
(

86 
comm_¥Ÿocﬁ_dúvî_èbÀ


88 
DECLARE_OS_MESSAGING_VIRTUAL_CHANNEL
(

89 
comm_¥Ÿocﬁ_vc
,

91 
APP_GUZZI_CAMMAND_SPI_VC_ID
,

92 
APP_GUZZI_CAMMAND_SPI_VC_PRIO
,

93 
SPI_COMMAND_BUFFER_SIZE
,

94 
SPI_COMMAND_BUFFER_SIZE
,

98 
πems_devi˚_maj‹_numbî
 
	gcomm_¥Ÿocﬁ_maj‹
;

99 
	g•i_comm™d_buf„r
[
SPI_COMMAND_BUFFER_SIZE
] 
__©åibuã__
((

100 
£˘i⁄
(".ddr.bss"),

101 
Æig√d
(8)

104 
uöt32_t
 
	$gë_dy«mic_tunög
 (
≠p_guzzi_comm™d_t
 *
comm™d
, * 
d©a
)

106 *
√xt
;

107 
uöt32
 
i
;

108 
uöt8_t
 *
dç_∑ylﬂd
 = 
comm™d
->
live_tunög
.
d©a
;

110 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__NOP
;

111 
comm™d
->
live_tunög
.
size
 = 
	`°πoul
(
d©a
, &
√xt
, 0);

113 i‡(
comm™d
->
live_tunög
.
size
 > (comm™d->live_tunög.
d©a
)) {

114 
	`mmsdbg
(
DL_ERROR
, "Dynamic dtp size: %dÉxceeded: %d",

115 ()
comm™d
->
live_tunög
.
size
,

116 (
comm™d
->
live_tunög
.
d©a
)

118 
EXIT_1
;

121 
comm™d
->
live_tunög
.
off£t
 = 
	`°πoul
(
√xt
, &next, 0);

122 
i
0; i < 
comm™d
->
live_tunög
.
size
; i ++) {

123 *
dç_∑ylﬂd
 = 
	`°πoul
(
√xt
, &next, 0);

124 
dç_∑ylﬂd
 ++;

127 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__LIVE_TUNING_APPLY
;

130 
EXIT_1
:

132 
	}
}

134 
uöt32_t
 
	$gë_tunög_id
 (
≠p_guzzi_comm™d_t
 *
comm™d
, *
d©a
)

137 ' ' =*
d©a
) {

138 
d©a
++;

141 
	`°∫˝y
((*)
comm™d
->
live_tunög
.
d©a
,

142 
d©a
,

143 
MAX_DYNAMIC_DTP_PAYLOAD_SIZE
);

145 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__LIVE_TUNING_UNLOCK
;

147 
	}
}

150 
uöt32_t
 
	$gë_ouçut_c⁄åﬁ
 (
≠p_guzzi_comm™d_t
 *
comm™d
, *
d©a
)

154 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__OUTPUT_CONTROL
;

155 
comm™d
->
ouçut_c⁄åﬁ
.
ˇmîa_í_bô_mask
 = 
	`°πoul
(

156 
d©a
,

157 &
d©a
,

160 
comm™d
->
ouçut_c⁄åﬁ
.
‰ame_ty≥_í_bô_mask
 = 
	`°πoul
(

161 
d©a
,

162 &
d©a
,

165 
comm™d
->
ouçut_c⁄åﬁ
.
‰ame_f‹m©_í_bô_mask
 = 
	`°πoul
(

166 
d©a
,

167 &
d©a
,

171 
	}
}

173 
≠p_guzzi_comm™d_t
 *
	$•i_comm™d_to_≠p_guzzi_comm™d
(

174 
≠p_guzzi_comm™d_t
 *
comm™d
,

175 *
comm™d_•i


178 
uöt32_t
 
comm™d_•i_id
;

180 *
comm™d_•i_∑øms
;

182 
comm™d_•i_id
 = 
	`°πoul
(

183 
comm™d_•i
,

184 &
comm™d_•i_∑øms
,

189 
comm™d
->
ˇm
.
id
 = 0;

190 
comm™d_•i_id
) {

191 
APP_GUZZI_SPI_CMD_START_STREAM
:

192 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_START
;

193 
comm™d
->
ˇm
.
id
 = 
	`°πoul
(

194 
comm™d_•i_∑øms
,

195 &
comm™d_•i_∑øms
,

200 
APP_GUZZI_SPI_CMD_STOP_STREAM
:

201 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_STOP
;

202 
comm™d
->
ˇm
.
id
 = 
	`°πoul
(

203 
comm™d_•i_∑øms
,

204 &
comm™d_•i_∑øms
,

208 
APP_GUZZI_SPI_CMD_REQ_STILL
:

209 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_CAPTURE
;

210 
comm™d
->
ˇm
.
id
 = 
	`°πoul
(

211 
comm™d_•i_∑øms
,

212 &
comm™d_•i_∑øms
,

216 
APP_GUZZI_SPI_CMD_MOV_LENS
:

217 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_LENS_MOVE
;

218 
comm™d
->
ˇm
.
id
 = 
	`°πoul
(

219 
comm™d_•i_∑øms
,

220 &
comm™d_•i_∑øms
,

223 
comm™d
->
ˇm
.
Àns_move
.
pos
 = 
	`°πoul
(

224 
comm™d_•i_∑øms
,

225 &
comm™d_•i_∑øms
,

229 
APP_GUZZI_SPI_CMD_FOCUS_TRIGGER
:

230 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_AF_TRIGGER
;

231 
comm™d
->
ˇm
.
id
 = 
	`°πoul
(

232 
comm™d_•i_∑øms
,

233 &
comm™d_•i_∑øms
,

237 
APP_GUZZI_SPI_CMD_AE_MANUAL
:

238 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_AE_MANUAL
;

239 
comm™d
->
ˇm
.
id
 = 
	`°πoul
(

240 
comm™d_•i_∑øms
,

241 &
comm™d_•i_∑øms
,

244 
comm™d
->
ˇm
.
´_m™uÆ
.
exp_us
 = 
	`°πoul
(

245 
comm™d_•i_∑øms
,

246 &
comm™d_•i_∑øms
,

249 
comm™d
->
ˇm
.
´_m™uÆ
.
£nsôivôy_iso
 = 
	`°πoul
(

250 
comm™d_•i_∑øms
,

251 &
comm™d_•i_∑øms
,

254 
comm™d
->
ˇm
.
´_m™uÆ
.
‰ame_duøti⁄_us
 = 
	`°πoul
(

255 
comm™d_•i_∑øms
,

256 &
comm™d_•i_∑øms
,

260 
APP_GUZZI_SPI_CMD_AE_AUTO
:

261 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_AE_AUTO
;

262 
comm™d
->
ˇm
.
id
 = 
	`°πoul
(

263 
comm™d_•i_∑øms
,

264 &
comm™d_•i_∑øms
,

268 
APP_GUZZI_SPI_CMD_SET_AWB_MODE
:

269 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_AWB_MODE
;

270 
comm™d
->
ˇm
.
id
 = 
	`°πoul
(

271 
comm™d_•i_∑øms
,

272 &
comm™d_•i_∑øms
,

275 
comm™d
->
ˇm
.
awb_mode
.
mode
 = 
	`°πoul
(

276 
comm™d_•i_∑øms
,

277 &
comm™d_•i_∑øms
,

281 
APP_GUZZI_SPI_CMD_SCENE_MODES
:

282 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_SCENE_MODE
;

283 
comm™d
->
ˇm
.
id
 = 
	`°πoul
(

284 
comm™d_•i_∑øms
,

285 &
comm™d_•i_∑øms
,

288 
comm™d
->
ˇm
.
s˚√_mode
.
ty≥
 = 
	`°πoul
(

289 
comm™d_•i_∑øms
,

290 &
comm™d_•i_∑øms
,

294 
APP_GUZZI_SPI_CMD_ANTIBANDING_MODES
:

295 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_ANTIBANDING_MODE
;

296 
comm™d
->
ˇm
.
id
 = 
	`°πoul
(

297 
comm™d_•i_∑øms
,

298 &
comm™d_•i_∑øms
,

301 
comm™d
->
ˇm
.
™tib™dög_mode
.
ty≥
 = 
	`°πoul
(

302 
comm™d_•i_∑øms
,

303 &
comm™d_•i_∑øms
,

307 
APP_GUZZI_SPI_CMD_AE_LOCK
:

308 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_AE_LOCK
;

309 
comm™d
->
ˇm
.
id
 = 
	`°πoul
(

310 
comm™d_•i_∑øms
,

311 &
comm™d_•i_∑øms
,

314 
comm™d
->
ˇm
.
´_lock_mode
.
ty≥
 = 
	`°πoul
(

315 
comm™d_•i_∑øms
,

316 &
comm™d_•i_∑øms
,

320 
APP_GUZZI_SPI_CMD_AE_TARGET_FPS_RANGE
:

321 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_AE_TARGET_FPS_RANGE
;

322 
comm™d
->
ˇm
.
id
 = 
	`°πoul
(

323 
comm™d_•i_∑øms
,

324 &
comm™d_•i_∑øms
,

327 
comm™d
->
ˇm
.
´_èrgë_Âs_ønge
.
mö_Âs
 = 
	`°πoul
(

328 
comm™d_•i_∑øms
,

329 &
comm™d_•i_∑øms
,

332 
comm™d
->
ˇm
.
´_èrgë_Âs_ønge
.
max_Âs
 = 
	`°πoul
(

333 
comm™d_•i_∑øms
,

334 &
comm™d_•i_∑øms
,

338 
APP_GUZZI_SPI_CMD_AWB_LOCK
:

339 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_AWB_LOCK
;

340 
comm™d
->
ˇm
.
id
 = 
	`°πoul
(

341 
comm™d_•i_∑øms
,

342 &
comm™d_•i_∑øms
,

345 
comm™d
->
ˇm
.
awb_lock_c⁄åﬁ
.
ty≥
 = 
	`°πoul
(

346 
comm™d_•i_∑øms
,

347 &
comm™d_•i_∑øms
,

351 
APP_GUZZI_SPI_CMD_CAPTURE_INTENT
:

352 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_CAPTURE_INTRENT
;

353 
comm™d
->
ˇm
.
id
 = 
	`°πoul
(

354 
comm™d_•i_∑øms
,

355 &
comm™d_•i_∑øms
,

358 
comm™d
->
ˇm
.
ˇ±uª_öã¡
.
mode
 = 
	`°πoul
(

359 
comm™d_•i_∑øms
,

360 &
comm™d_•i_∑øms
,

364 
APP_GUZZI_SPI_CMD_CONTROL_MODE
:

365 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_CONTROL_MODE
;

366 
comm™d
->
ˇm
.
id
 = 
	`°πoul
(

367 
comm™d_•i_∑øms
,

368 &
comm™d_•i_∑øms
,

371 
comm™d
->
ˇm
.
c⁄åﬁ_mode
.
ty≥
 = 
	`°πoul
(

372 
comm™d_•i_∑øms
,

373 &
comm™d_•i_∑øms
,

377 
APP_GUZZI_SPI_CMD_FRAME_DURATION
:

378 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_FRAME_DURATION
;

379 
comm™d
->
ˇm
.
id
 = 
	`°πoul
(

380 
comm™d_•i_∑øms
,

381 &
comm™d_•i_∑øms
,

384 
comm™d
->
ˇm
.
‰ame_duøti⁄
.
vÆ
 = 
	`°πoul
(

385 
comm™d_•i_∑øms
,

386 &
comm™d_•i_∑øms
,

390 
APP_GUZZI_SPI_CMD_EXPOSURE_COMPENSATION
:

391 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_AE_EXPOSURE_COMPENSATION
;

392 
comm™d
->
ˇm
.
id
 = 
	`°πoul
(

393 
comm™d_•i_∑øms
,

394 &
comm™d_•i_∑øms
,

397 
comm™d
->
ˇm
.
exposuª_com≥nßti⁄
.
vÆ
 = 
	`°πoul
(

398 
comm™d_•i_∑øms
,

399 &
comm™d_•i_∑øms
,

403 
APP_GUZZI_SPI_CMD_SENSITIVITY
:

404 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_SENSITIVITY
;

405 
comm™d
->
ˇm
.
id
 = 
	`°πoul
(

406 
comm™d_•i_∑øms
,

407 &
comm™d_•i_∑øms
,

410 
comm™d
->
ˇm
.
£nsôivôy
.
iso_vÆ
 = 
	`°πoul
(

411 
comm™d_•i_∑øms
,

412 &
comm™d_•i_∑øms
,

416 
APP_GUZZI_SPI_CMD_EFFECT_MODE
:

417 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_EFFECT_MODE
;

418 
comm™d
->
ˇm
.
id
 = 
	`°πoul
(

419 
comm™d_•i_∑øms
,

420 &
comm™d_•i_∑øms
,

423 
comm™d
->
ˇm
.
ef„˘_mode
.
ty≥
 = 
	`°πoul
(

424 
comm™d_•i_∑øms
,

425 &
comm™d_•i_∑øms
,

429 
APP_GUZZI_SPI_CMD_AF_MODE
:

430 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_AF_MODE
;

431 
comm™d
->
ˇm
.
id
 = 
	`°πoul
(

432 
comm™d_•i_∑øms
,

433 &
comm™d_•i_∑øms
,

436 
comm™d
->
ˇm
.
af_mode
.
ty≥
 = 
	`°πoul
(

437 
comm™d_•i_∑øms
,

438 &
comm™d_•i_∑øms
,

442 
APP_GUZZI_SPI_CMD_NOISE_REDUCTION_STRENGTH
:

443 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_NOISE_REDUCTION_STRENGTH
;

444 
comm™d
->
ˇm
.
id
 = 
	`°πoul
(

445 
comm™d_•i_∑øms
,

446 &
comm™d_•i_∑øms
,

449 
comm™d
->
ˇm
.
noi£_ªdu˘i⁄_°ªngth
.
vÆ
 = 
	`°πoul
(

450 
comm™d_•i_∑øms
,

451 &
comm™d_•i_∑øms
,

455 
APP_GUZZI_SPI_CMD_SATURATION
:

456 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_SATURATION
;

457 
comm™d
->
ˇm
.
id
 = 
	`°πoul
(

458 
comm™d_•i_∑øms
,

459 &
comm™d_•i_∑øms
,

462 
comm™d
->
ˇm
.
ßtuøti⁄
.
vÆ
 = 
	`°πoul
(

463 
comm™d_•i_∑øms
,

464 &
comm™d_•i_∑øms
,

468 
APP_GUZZI_SPI_CMD_BRIGHTNESS
:

469 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_BRIGHTNESS
;

470 
comm™d
->
ˇm
.
id
 = 
	`°πoul
(

471 
comm™d_•i_∑øms
,

472 &
comm™d_•i_∑øms
,

475 
comm™d
->
ˇm
.
brighäess
.
vÆ
 = 
	`°πoul
(

476 
comm™d_•i_∑øms
,

477 &
comm™d_•i_∑øms
,

481 
APP_GUZZI_SPI_CMD_STREAM_FORMAT
:

482 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_FORMAT
;

483 
comm™d
->
ˇm
.
id
 = 
	`°πoul
(

484 
comm™d_•i_∑øms
,

485 &
comm™d_•i_∑øms
,

488 
comm™d
->
ˇm
.
f‹m©
.
vÆ
 = 
	`°πoul
(

489 
comm™d_•i_∑øms
,

490 &
comm™d_•i_∑øms
,

494 
APP_GUZZI_SPI_CMD_CAM_RESOLUTION
:

495 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_RESOLUTION
;

496 
comm™d
->
ˇm
.
id
 = 
	`°πoul
(

497 
comm™d_•i_∑øms
,

498 &
comm™d_•i_∑øms
,

501 
comm™d
->
ˇm
.
ªsﬁuti⁄
.
width
 = 
	`°πoul
(

502 
comm™d_•i_∑øms
,

503 &
comm™d_•i_∑øms
,

506 
comm™d
->
ˇm
.
ªsﬁuti⁄
.
height
 = 
	`°πoul
(

507 
comm™d_•i_∑øms
,

508 &
comm™d_•i_∑øms
,

512 
APP_GUZZI_SPI_CMD_SHARPNESS
:

513 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_SHARPNESS
;

514 
comm™d
->
ˇm
.
id
 = 
	`°πoul
(

515 
comm™d_•i_∑øms
,

516 &
comm™d_•i_∑øms
,

519 
comm™d
->
ˇm
.
sh¨≤ess
.
vÆ
 = 
	`°πoul
(

520 
comm™d_•i_∑øms
,

521 &
comm™d_•i_∑øms
,

525 
APP_GUZZI_SPI_LIVE_TUNING_UNLOCK
:

526 
	`gë_tunög_id
(
comm™d
, 
comm™d_•i_∑øms
);

528 
APP_GUZZI_SPI_LIVE_TUNING_APPLY
:

529 
	`gë_dy«mic_tunög
(
comm™d
, 
comm™d_•i_∑øms
);

531 
APP_GUZZI_SPI_CMD_OUT_CTRL
:

532 
	`gë_ouçut_c⁄åﬁ
(
comm™d
, 
comm™d_•i_∑øms
);

535 
	`mmsdbg
(

536 
DL_ERROR
,

538 ()
comm™d_•i_id


540 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__NOP
;

543  
comm™d
;

544 
	}
}

546 
	$nŸify_boŸ_ªady
()

548 
	`DrvGpioSëPöLo
(
APP_GUZZI_CAMMAND_SPI_HOST_NOTIFY_GPIO
);

549 
	`DrvGpioSëPöHi
(
APP_GUZZI_CAMMAND_SPI_HOST_NOTIFY_GPIO
);

550 
	}
}

553 
	$≠p_guzzi_comm™d_•i_≥ek
(

554 *
≠p_¥iv©e
,

555 
≠p_guzzi_comm™d_ˇŒback_t
 *
ˇŒback


558 
≠p_guzzi_comm™d_t
 
comm™d
;

559 *
comm™d_•i
;

560 
n
;

562 
comm™d_•i
 = 
•i_comm™d_buf„r
;

564 
n
 = 
	`MesßgePassögRód
(

565 
APP_GUZZI_CAMMAND_SPI_VC_ID
,

566 
comm™d_•i
,

567 
SPI_COMMAND_BUFFER_SIZE
-1

569 i‡(
n
) {

570 
comm™d_•i
[
n
] = '\000';

571 
	`ˇŒback
(

572 
≠p_¥iv©e
,

573 
	`•i_comm™d_to_≠p_guzzi_comm™d
(

574 &
comm™d
,

575 
comm™d_•i


582 
	}
}

584 
	$≠p_guzzi_comm™d_•i_waô
(

585 *
≠p_¥iv©e
,

586 
≠p_guzzi_comm™d_ˇŒback_t
 *
ˇŒback


589 
≠p_guzzi_comm™d_t
 
comm™d
;

590 *
comm™d_•i
;

591 
πems_libio_rw_¨gs_t
 
å
;

593 
comm™d_•i
 = 
•i_comm™d_buf„r
;

594 
å
.
buf„r
 = 
comm™d_•i
;

596 
	`πems_io_ªad
(

597 
comm_¥Ÿocﬁ_maj‹
,

598 
APP_GUZZI_CAMMAND_SPI_VC_ID
,

599 &
å


601 i‡(
å
.
byãs_moved
) {

602 
comm™d_•i
[
å
.
byãs_moved
] = '\000';

603 
	`ˇŒback
(

604 
≠p_¥iv©e
,

605 
	`•i_comm™d_to_≠p_guzzi_comm™d
(

606 &
comm™d
,

607 
comm™d_•i


611 
	}
}

614 
	$≠p_guzzi_comm™d_•i_waô_timeout
(

615 *
≠p_¥iv©e
,

616 
≠p_guzzi_comm™d_ˇŒback_t
 *
ˇŒback
,

617 
uöt32_t
 
timeout_ms


620 
OsVútuÆCh™√l
 *
vc
;

621 
≠p_guzzi_comm™d_t
 
comm™d
;

622 *
comm™d_•i
;

623 
πems_°©us_code
 
rc
;

624 
πems_evít_£t
 
evíts
;

625 
n
;

627 
comm™d_•i
 = 
•i_comm™d_buf„r
;

630 
	`as£π
(
vc
 = (
OsVútuÆCh™√l
 *)
	`MesßgePassögGëVútuÆCh™√l
(

631 
APP_GUZZI_CAMMAND_SPI_VC_ID


634 
n
 = 
	`Ba£MesßgePassögRód
(

635 (
VútuÆCh™√l
 *)
vc
,

636 
comm™d_•i
,

637 
SPI_COMMAND_BUFFER_SIZE
-1

640 i‡(!
n
) {

641 
vc
->
rxWaôTaskId
 = 
	`πems_èsk_£lf
();

642 
rc
 = 
	`πems_evít_ª˚ive
(

643 
RTEMS_EVENT_0
,

644 
RTEMS_EVENT_ALL
,

645 (
	`πems_˛ock_gë_ticks_≥r_£c⁄d
(Ë/ 1000Ë* 
timeout_ms
,

646 &
evíts


648 i‡(
rc
 =
RTEMS_TIMEOUT
) {

651 
	`as£π
(!
rc
);

652 
n
 = 
	`Ba£MesßgePassögRód
(

653 (
VútuÆCh™√l
 *)
vc
,

654 
comm™d_•i
,

655 
SPI_COMMAND_BUFFER_SIZE
-1

659 i‡(
n
) {

660 
comm™d_•i
[
n
] = '\000';

661 
	`ˇŒback
(

662 
≠p_¥iv©e
,

663 
	`•i_comm™d_to_≠p_guzzi_comm™d
(

664 &
comm™d
,

665 
comm™d_•i


670  
n
 ? 1 : 0;

671 
	}
}

673 
	$≠p_guzzi_comm™d_•i_öô
()

677 
	`as£π
(
RTEMS_SUCCESSFUL
 =
	`πems_io_ªgi°î_drivî
(

678 
RTEMS_DRIVER_AUTO_MAJOR
,

679 &
comm_¥Ÿocﬁ_dúvî_èbÀ
,

680 &
comm_¥Ÿocﬁ_maj‹


683 
	`as£π
(
RTEMS_SUCCESSFUL
 =
	`πems_io_öôülize
(

684 
comm_¥Ÿocﬁ_maj‹
,

686 &
comm_¥Ÿocﬁ_vc


688 
	`as£π
(
RTEMS_SUCCESSFUL
 =
	`πems_io_›í
(

689 
comm_¥Ÿocﬁ_maj‹
,

690 
APP_GUZZI_CAMMAND_SPI_VC_ID
,

691 
NULL


694 
	`nŸify_boŸ_ªady
();

695 
	}
}

	@cdk/apps/arch/ma2x5x/cdk_FLIC_3xIMX208/leon/app_guzzi_command_spi.h

35 #i‚de‡
_APP_GUZZI_COMMAND_SPI_H


36 
	#_APP_GUZZI_COMMAND_SPI_H


	)

38 #ifde‡
__˝lu•lus


42 
	~<≠p_guzzi_comm™d.h
>

44 
≠p_guzzi_comm™d_•i_öô
();

45 
≠p_guzzi_comm™d_•i_≥ek
(

46 *
≠p_¥iv©e
,

47 
≠p_guzzi_comm™d_ˇŒback_t
 *
ˇŒback


49 
≠p_guzzi_comm™d_•i_waô
(

50 *
≠p_¥iv©e
,

51 
≠p_guzzi_comm™d_ˇŒback_t
 *
ˇŒback


53 
≠p_guzzi_comm™d_•i_waô_timeout
(

54 *
≠p_¥iv©e
,

55 
≠p_guzzi_comm™d_ˇŒback_t
 *
ˇŒback
,

56 
uöt32_t
 
timeout_ms


59 #ifde‡
__˝lu•lus


	@cdk/apps/arch/ma2x5x/cdk_FLIC_3xIMX208/leon/app_guzzi_spi_commands.h

35 #i‚de‡
_APP_GUZZI_SPI_COMMANDS_H


36 
	#_APP_GUZZI_SPI_COMMANDS_H


	)

38 #ifde‡
__˝lu•lus


48 
	#APP_GUZZI_SPI_CMD_START_STREAM
 0

	)

49 
	#APP_GUZZI_SPI_CMD_STOP_STREAM
 1

	)

50 
	#APP_GUZZI_SPI_CMD_REQ_STILL
 2

	)

51 
	#APP_GUZZI_SPI_CMD_MOV_LENS
 3

	)

54 
	#APP_GUZZI_SPI_CMD_FOCUS_TRIGGER
 4

	)

55 
	#APP_GUZZI_SPI_CMD_AE_MANUAL
 5

	)

60 
	#APP_GUZZI_SPI_CMD_AE_AUTO
 6

	)

61 
	#APP_GUZZI_SPI_CMD_SET_AWB_MODE
 7

	)

63 
	#APP_GUZZI_SPI_CMD_SCENE_MODES
 8

	)

66 
	#APP_GUZZI_SPI_CMD_ANTIBANDING_MODES
 9

	)

69 
	#APP_GUZZI_SPI_CMD_EXPOSURE_COMPENSATION
 10

	)

72 
	#APP_GUZZI_SPI_CMD_AE_LOCK
 12

	)

75 
	#APP_GUZZI_SPI_CMD_AE_TARGET_FPS_RANGE
 13

	)

79 
	#APP_GUZZI_SPI_CMD_AWB_LOCK
 15

	)

82 
	#APP_GUZZI_SPI_CMD_CAPTURE_INTENT
 16

	)

85 
	#APP_GUZZI_SPI_CMD_CONTROL_MODE
 17

	)

88 
	#APP_GUZZI_SPI_CMD_FRAME_DURATION
 20

	)

91 
	#APP_GUZZI_SPI_CMD_SENSITIVITY
 22

	)

94 
	#APP_GUZZI_SPI_CMD_EFFECT_MODE
 23

	)

97 
	#APP_GUZZI_SPI_CMD_AF_MODE
 25

	)

100 
	#APP_GUZZI_SPI_CMD_NOISE_REDUCTION_STRENGTH
 26

	)

103 
	#APP_GUZZI_SPI_CMD_SATURATION
 27

	)

106 
	#APP_GUZZI_SPI_CMD_BRIGHTNESS
 30

	)

109 
	#APP_GUZZI_SPI_CMD_STREAM_FORMAT
 32

	)

112 
	#APP_GUZZI_SPI_CMD_CAM_RESOLUTION
 33

	)

116 
	#APP_GUZZI_SPI_CMD_SHARPNESS
 34

	)

119 
	#APP_GUZZI_SPI_LIVE_TUNING_UNLOCK
 35

	)

121 
	#APP_GUZZI_SPI_LIVE_TUNING_APPLY
 36

	)

126 
	#APP_GUZZI_SPI_CMD_AE_MERGER
 37

	)

130 
	#APP_GUZZI_SPI_CMD_AWB_MERGER
 38

	)

134 
	#APP_GUZZI_SPI_CMD_CUST_USECASE
 39

	)

137 
	#APP_GUZZI_SPI_CMD_CUST_CAPT_MODE
 40

	)

140 
	#APP_GUZZI_SPI_CMD_CUST_EXP_BRACKETS
 41

	)

145 
	#APP_GUZZI_SPI_CMD_CUST_CAPTURE
 42

	)

149 
	#APP_GUZZI_SPI_CMD_CONTRAST
 43

	)

152 
	#APP_GUZZI_SPI_CMD_AE_REGION
 44

	)

160 
	#APP_GUZZI_SPI_CMD_OUT_CTRL
 45

	)

165 #ifde‡
__˝lu•lus


	@cdk/apps/arch/ma2x5x/cdk_FLIC_3xIMX208/leon/brdDefines.h

1 #i‚de‡
BRD_DEFINES_H


2 
	#BRD_DEFINES_H


	)

4 #ifde‡
MV0182


5 
	#BOARD_REF_CLOCK_KHZ
 (12000)

	)

8 #ifde‡
MV0212


9 
	#BOARD_REF_CLOCK_KHZ
 (12000)

	)

12 #i‚de‡
BOARD_REF_CLOCK_KHZ


13 #îr‹ 
PÀa£
 
£À˘
 
¥›î
 
BOARD
 
ty≥


	@cdk/apps/arch/ma2x5x/cdk_FLIC_3xIMX208/leon/camera_control.c

35 
	~<oßl/oßl_°dty≥s.h
>

36 
	~<oßl/oßl_°dlib.h
>

37 
	~<oßl/oßl_muãx.h
>

38 
	~<utûs/mms_debug.h
>

40 
	~<ˇmîa.h
>

41 
	~<ˇmîa_c⁄fig_ödex.h
>

42 
	~<ˇmîa_c⁄fig_°ru˘.h
>

44 
	~"ˇmîa_c⁄åﬁ.h
"

46 
mmsdbg_deföe_v¨übÀ
(

47 
vdl_ˇmîa_c⁄åﬁ
,

48 
DL_DEFAULT
,

53 
	#MMSDEBUGLEVEL
 
	`mmsdbg_u£_v¨übÀ
(
vdl_ˇmîa_c⁄åﬁ
)

	)

55 #i‚de‡
GUZZI_INSTANCES_MAX


56 
	#GUZZI_INSTANCES_MAX
 3

	)

60 
ˇmîa_t
 *
	mˇmîa
;

61 
oßl_£m
 *
	mcmd_£m
;

62 
oßl_muãx
 *
	mc⁄fig_muãx
;

63 
	mc⁄figs_to_skù
;

64 
	m°›
;

65 
	m°¨t_îr
;

66 
guzzi_ˇmîa3_c⁄åﬁs_ˇ±uª_ªque°_guzzi_‰_id_t
 
	mguzzi_‰_id
;

67 } 
	tˇmîa_c⁄åﬁ_t
;

69 
ˇmîa_c⁄åﬁ_t
 
	gg_ˇmîa_c⁄åﬁ
[
GUZZI_INSTANCES_MAX
];

71 
	$ˇŒback
(

72 
ˇmîa_t
 *
ˇmîa
,

73 *
≠p_¥v_void
,

74 
ˇmîa_evít_t
 
evít
,

75 
d©™
,

76 *
d©≠


79 
ˇmîa_c⁄åﬁ_t
 *
ˇmîa_c⁄åﬁ
;

81 
ˇmîa_c⁄åﬁ
 = 
≠p_¥v_void
;

83 
	`UNUSED
(
ˇmîa
);

84 
	`UNUSED
(
d©≠
);

86 
evít
.
ty≥
) {

87 
CAMERA_EVENT_ERROR
:

88 
	`mmsdbg
(
DL_ERROR
, "Camera CB ERRORÉvent.");

90 
CAMERA_EVENT_ERROR_START
:

91 
	`mmsdbg
(
DL_ERROR
, "Camera CB ERROR_STARTÉvent.");

92 
ˇmîa_c⁄åﬁ
->
°¨t_îr
 = -1;

93 
	`oßl_£m_po°
(
ˇmîa_c⁄åﬁ
->
cmd_£m
);

95 
CAMERA_EVENT_START_DONE
:

96 
	`mmsdbg
(
DL_ERROR
, "Camera CB START_DONEÉvent.");

97 
	`oßl_£m_po°
(
ˇmîa_c⁄åﬁ
->
cmd_£m
);

99 
CAMERA_EVENT_STOP_DONE
:

100 
	`mmsdbg
(
DL_MESSAGE
, "Camera CB STOP_DONEÉvent.");

101 
	`oßl_£m_po°
(
ˇmîa_c⁄åﬁ
->
cmd_£m
);

103 
CAMERA_EVENT_FLUSH_DONE
:

104 
	`mmsdbg
(
DL_MESSAGE
, "Camera CB FLUSH_DONEÉvent.");

105 
	`oßl_£m_po°
(
ˇmîa_c⁄åﬁ
->
cmd_£m
);

107 
CAMERA_EVENT_PROCESS_DONE
:

108 
	`mmsdbg
(
DL_MESSAGE
, "Camera CB PROCESS_DONEÉvent.");

110 
CAMERA_EVENT_BUFFER_FLUSH
:

111 
	`mmsdbg
(
DL_MESSAGE
, "Camera CB BUFFER_FLUSHÉvent.");

113 
CAMERA_EVENT_GENERIC
:

114 
	`mmsdbg
(
DL_MESSAGE
, "Camî®CB GENERICÉvít: sub_ty≥=%d,Çum=%d.", 
evít
.
sub_ty≥
, 
d©™
);

116 
	`oßl_muãx_lock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

117 i‡(
ˇmîa_c⁄åﬁ
->
°›
 == 0)

119 i‡(!
ˇmîa_c⁄åﬁ
->
c⁄figs_to_skù
) {

120 
ˇmîa_c⁄åﬁ
->
guzzi_‰_id
.
v
++;

121 
	`ˇmîa_c⁄fig_£t_begö
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

122 
	`ˇmîa_c⁄fig_£t
(

123 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

124 
GUZZI_CAMERA3_INDEX_CONTROLS_CAPTURE_REQUEST_GUZZI_FR_ID
,

125 &
ˇmîa_c⁄åﬁ
->
guzzi_‰_id


127 
	`ˇmîa_c⁄fig_£t_íd
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

129 
ˇmîa_c⁄åﬁ
->
c⁄figs_to_skù
--;

132 
	`oßl_muãx_u∆ock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

135 
	`mmsdbg
(
DL_ERROR
, "Unk⁄w camî®evíà(%d)!", 
evít
.
v
);

137 
	}
}

139 
uöt32_t
 
	$ˇmîa_c⁄åﬁ_is_a˘ive
(
ˇm_id
)

141  (
g_ˇmîa_c⁄åﬁ
[
ˇm_id
].
ˇmîa
 !
NULL
);

142 
	}
}

145 
	$ˇmîa_c⁄åﬁ_°¨t
(
ˇm_id
)

147 
ˇmîa_c⁄åﬁ_t
 *
ˇmîa_c⁄åﬁ
;

148 
ˇmîa_¸óã_∑øms_t
 
¸óã_∑øms
;

149 
guzzi_ˇmîa3_dy«mic_c⁄åﬁ_af_mode_t
 
af_mode
;

150 
îr
;

152 
ˇmîa_c⁄åﬁ
 = &
g_ˇmîa_c⁄åﬁ
[
ˇm_id
];

154 
ˇmîa_c⁄åﬁ
->
cmd_£m
 = 
	`oßl_£m_¸óã
(0);

155 i‡(!
ˇmîa_c⁄åﬁ
->
cmd_£m
) {

156 
	`mmsdbg
(
DL_ERROR
, "FailedÅo create camera control command semphore!");

157 
exô1
;

159 
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
 = 
	`oßl_muãx_¸óã
();

160 i‡(!
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
) {

161 
	`mmsdbg
(
DL_ERROR
, "FailedÅo create camera control config mutex!");

162 
exô2
;

165 
¸óã_∑øms
.
ˇmîa_id
 = 
ˇm_id
;

166 
¸óã_∑øms
.
mode
 = 
CAMERA_MODE_MOV_CONFIG_DRIVEN
;

167 
¸óã_∑øms
.
dç_£rvî
 = 
NULL
;

168 
¸óã_∑øms
.
ˇŒback
 = callback;

169 
¸óã_∑øms
.
≠p_¥v
 = 
ˇmîa_c⁄åﬁ
;

170 
ˇmîa_c⁄åﬁ
->
ˇmîa
 = 
	`ˇmîa_¸óã
(&
¸óã_∑øms
);

171 i‡(!
ˇmîa_c⁄åﬁ
->
ˇmîa
) {

172 
	`mmsdbg
(
DL_ERROR
, "FailedÅo create camera!");

173 
exô3
;

176 
îr
 = 
	`ˇmîa_°¨t
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

177 i‡(
îr
) {

178 
	`mmsdbg
(
DL_ERROR
, "FailedÅo start camera!");

179 
exô3
;

181 
	`mmsdbg
(
DL_ERROR
, "Camîa_id = %d sèπed.\n", 
ˇm_id
);

182 
	`oßl_£m_waô
(
ˇmîa_c⁄åﬁ
->
cmd_£m
);

183 i‡(
ˇmîa_c⁄åﬁ
->
°¨t_îr
) {

184 
	`mmsdbg
(
DL_ERROR
, "FailedÅo start camera!");

185 
exô3
;

188 
ˇmîa_c⁄åﬁ
->
guzzi_‰_id
.
v
 = 0;

190 
	`oßl_muãx_lock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

192 
ˇmîa_c⁄åﬁ
->
guzzi_‰_id
.
v
++;

193 
af_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AF_MODE_OFF
;

194 
	`ˇmîa_c⁄fig_£t_begö
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

195 
	`ˇmîa_c⁄fig_£t
(

196 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

197 
GUZZI_CAMERA3_INDEX_CONTROLS_CAPTURE_REQUEST_GUZZI_FR_ID
,

198 &
ˇmîa_c⁄åﬁ
->
guzzi_‰_id


200 
	`ˇmîa_c⁄fig_£t
(

201 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

202 
GUZZI_CAMERA3_INDEX_CONTROLS_CONTROL_AF_MODE
,

203 &
af_mode


205 
	`ˇmîa_c⁄fig_£t_íd
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

207 
ˇmîa_c⁄åﬁ
->
guzzi_‰_id
.
v
++;

208 
	`ˇmîa_c⁄fig_£t_begö
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

209 
	`ˇmîa_c⁄fig_£t
(

210 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

211 
GUZZI_CAMERA3_INDEX_CONTROLS_CAPTURE_REQUEST_GUZZI_FR_ID
,

212 &
ˇmîa_c⁄åﬁ
->
guzzi_‰_id


214 
	`ˇmîa_c⁄fig_£t_íd
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

216 
ˇmîa_c⁄åﬁ
->
guzzi_‰_id
.
v
++;

217 
	`ˇmîa_c⁄fig_£t_begö
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

218 
	`ˇmîa_c⁄fig_£t
(

219 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

220 
GUZZI_CAMERA3_INDEX_CONTROLS_CAPTURE_REQUEST_GUZZI_FR_ID
,

221 &
ˇmîa_c⁄åﬁ
->
guzzi_‰_id


223 
	`ˇmîa_c⁄fig_£t_íd
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

225 
ˇmîa_c⁄åﬁ
->
c⁄figs_to_skù
 = 0;

227 
	`oßl_muãx_u∆ock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

232 
exô3
:

233 
	`oßl_muãx_de°roy
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

234 
exô2
:

235 
	`oßl_£m_de°roy
(
ˇmîa_c⁄åﬁ
->
cmd_£m
);

236 
exô1
:

237 
ˇmîa_c⁄åﬁ
->
ˇmîa
 = 
NULL
;

239 
	}
}

241 
	$ˇmîa_c⁄åﬁ_°›
(
ˇm_id
)

243 
ˇmîa_c⁄åﬁ_t
 *
ˇmîa_c⁄åﬁ
;

245 
ˇmîa_c⁄åﬁ
 = &
g_ˇmîa_c⁄åﬁ
[
ˇm_id
];

246 
îr
;

248 i‡(!
ˇmîa_c⁄åﬁ
->
ˇmîa
) {

251 
	`oßl_muãx_lock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

252 
ˇmîa_c⁄åﬁ
->
°›
 = 1;

253 
	`oßl_muãx_u∆ock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

255 
	`ˇmîa_Êush
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

256 
	`oßl_£m_waô
(
ˇmîa_c⁄åﬁ
->
cmd_£m
);

258 
îr
 = 
	`ˇmîa_°›
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

259 i‡(
îr
) {

260 
	`mmsdbg
(
DL_ERROR
, "FailedÅo stop camera!");

262 
	`oßl_£m_waô
(
ˇmîa_c⁄åﬁ
->
cmd_£m
);

263 
	`mmsdbg
(
DL_ERROR
, "Camî®id = %d st›≥d.\n", 
ˇm_id
);

265 
	`ˇmîa_de°roy
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

266 
	`oßl_muãx_de°roy
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

267 
	`oßl_£m_de°roy
(
ˇmîa_c⁄åﬁ
->
cmd_£m
);

269 
ˇmîa_c⁄åﬁ
->
ˇmîa
 = 
NULL
;

270 
ˇmîa_c⁄åﬁ
->
°›
 = 0;

271 
	}
}

273 
	$ˇmîa_c⁄åﬁ_ˇ±uª
(
ˇm_id
)

275 
ˇmîa_c⁄åﬁ_t
 *
ˇmîa_c⁄åﬁ
;

276 
guzzi_ˇmîa3_c⁄åﬁs_c⁄åﬁ_ˇ±uª_öã¡_t
 
öã¡_ªq
;

277 
îr
;

279 
ˇmîa_c⁄åﬁ
 = &
g_ˇmîa_c⁄åﬁ
[
ˇm_id
];

281 
	`oßl_muãx_lock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

283 
ˇmîa_c⁄åﬁ
->
guzzi_‰_id
.
v
++;

284 
öã¡_ªq
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_CAPTURE_INTENT_ZERO_SHUTTER_LAG
;

285 
	`ˇmîa_c⁄fig_£t_begö
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

286 
îr
 = 
	`ˇmîa_c⁄fig_£t
(

287 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

288 
GUZZI_CAMERA3_INDEX_CONTROLS_CAPTURE_REQUEST_GUZZI_FR_ID
,

289 &
ˇmîa_c⁄åﬁ
->
guzzi_‰_id


291 
îr
 +
	`ˇmîa_c⁄fig_£t
(

292 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

293 
GUZZI_CAMERA3_INDEX_CONTROLS_CONTROL_CAPTURE_INTENT
,

294 &
öã¡_ªq


296 
	`ˇmîa_c⁄fig_£t_íd
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

298 
ˇmîa_c⁄åﬁ
->
guzzi_‰_id
.
v
++;

299 
öã¡_ªq
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_CAPTURE_INTENT_PREVIEW
;

300 
	`ˇmîa_c⁄fig_£t_begö
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

301 
îr
 +
	`ˇmîa_c⁄fig_£t
(

302 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

303 
GUZZI_CAMERA3_INDEX_CONTROLS_CAPTURE_REQUEST_GUZZI_FR_ID
,

304 &
ˇmîa_c⁄åﬁ
->
guzzi_‰_id


306 
îr
 +
	`ˇmîa_c⁄fig_£t
(

307 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

308 
GUZZI_CAMERA3_INDEX_CONTROLS_CONTROL_CAPTURE_INTENT
,

309 &
öã¡_ªq


311 
	`ˇmîa_c⁄fig_£t_íd
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

313 i‡(
îr
) {

314 
	`mmsdbg
(
DL_ERROR
, "Capture failed.\n");

316 
	`mmsdbg
(
DL_ERROR
, "Camî®id = %d c≠tuª suc˚eded.\n", 
ˇm_id
);

319 
ˇmîa_c⁄åﬁ
->
c⁄figs_to_skù
 = 1;

321 
	`oßl_muãx_u∆ock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

322 
	}
}

324 
	$ˇmîa_c⁄åﬁ_Àns_move
(
ˇm_id
, 
Àns_posôi⁄
)

326 
ˇmîa_c⁄åﬁ_t
 *
ˇmîa_c⁄åﬁ
;

327 
guzzi_ˇmîa3_c⁄åﬁs_Àns_foˇl_Àngth_t
 
foc_Àn
;

328 
guzzi_ˇmîa3_dy«mic_c⁄åﬁ_af_mode_t
 
af_mode
;

329 
îr
;

331 
ˇmîa_c⁄åﬁ
 = &
g_ˇmîa_c⁄åﬁ
[
ˇm_id
];

333 i‡(
Àns_posôi⁄
 > 255) {

334 
Àns_posôi⁄
 = 255;

337 i‡(
Àns_posôi⁄
 < 0) {

338 
Àns_posôi⁄
 = 0;

341 
foc_Àn
.
v
 = (Ë
Àns_posôi⁄
 / 255.0;

342 
af_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AF_MODE_OFF
;

344 
	`oßl_muãx_lock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

346 
ˇmîa_c⁄åﬁ
->
guzzi_‰_id
.
v
++;

348 
	`ˇmîa_c⁄fig_£t_begö
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

349 
îr
 = 
	`ˇmîa_c⁄fig_£t
(

350 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

351 
GUZZI_CAMERA3_INDEX_CONTROLS_CAPTURE_REQUEST_GUZZI_FR_ID
,

352 &
ˇmîa_c⁄åﬁ
->
guzzi_‰_id


354 
îr
 +
	`ˇmîa_c⁄fig_£t
(

355 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

356 
GUZZI_CAMERA3_INDEX_CONTROLS_CONTROL_AF_MODE
,

357 &
af_mode


359 
îr
 +
	`ˇmîa_c⁄fig_£t
(

360 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

361 
GUZZI_CAMERA3_INDEX_CONTROLS_LENS_FOCAL_LENGTH
,

362 &
foc_Àn


364 
	`ˇmîa_c⁄fig_£t_íd
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

365 i‡(
îr
) {

366 
	`mmsdbg
(
DL_ERROR
, "Lens move failed.\n");

368 
	`mmsdbg
(
DL_ERROR
, "Lí†movêsuc˚eded camîa_id = %d,Üís_posôi⁄ = %d.\n", 
ˇm_id
, 
Àns_posôi⁄
);

371 
ˇmîa_c⁄åﬁ
->
c⁄figs_to_skù
 = 1;

373 
	`oßl_muãx_u∆ock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

374 
	}
}

376 
	$ˇmîa_c⁄åﬁ_focus_åiggî
(
ˇm_id
)

378 
ˇmîa_c⁄åﬁ_t
 *
ˇmîa_c⁄åﬁ
;

379 
guzzi_ˇmîa3_dy«mic_c⁄åﬁ_af_mode_t
 
af_mode
;

380 
guzzi_ˇmîa3_dy«mic_c⁄åﬁ_af_åiggî_id_t
 
af_åiggî
;

381 
îr
;

383 
ˇmîa_c⁄åﬁ
 = &
g_ˇmîa_c⁄åﬁ
[
ˇm_id
];

385 
af_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AF_MODE_AUTO
;

386 
af_åiggî
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AF_TRIGGER_START
;

388 
	`oßl_muãx_lock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

390 
ˇmîa_c⁄åﬁ
->
guzzi_‰_id
.
v
++;

391 
	`ˇmîa_c⁄fig_£t_begö
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

392 
îr
 = 
	`ˇmîa_c⁄fig_£t
(

393 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

394 
GUZZI_CAMERA3_INDEX_CONTROLS_CAPTURE_REQUEST_GUZZI_FR_ID
,

395 &
ˇmîa_c⁄åﬁ
->
guzzi_‰_id


397 
îr
 +
	`ˇmîa_c⁄fig_£t
(

398 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

399 
GUZZI_CAMERA3_INDEX_CONTROLS_CONTROL_AF_MODE
,

400 &
af_mode


402 
îr
 +
	`ˇmîa_c⁄fig_£t
(

403 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

404 
GUZZI_CAMERA3_INDEX_CONTROLS_CONTROL_AF_TRIGGER
,

405 &
af_åiggî


407 
	`ˇmîa_c⁄fig_£t_íd
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

408 i‡(
îr
) {

409 
	`mmsdbg
(
DL_ERROR
, "FocusÅrigger failed.\n");

411 
	`mmsdbg
(
DL_ERROR
,

412 "Focu†åiggî suc˚eded camîa_id = %d.\n", 
ˇm_id
);

414 
ˇmîa_c⁄åﬁ
->
c⁄figs_to_skù
 = 1;

415 
	`oßl_muãx_u∆ock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

416 
	}
}

418 
	$ˇmîa_c⁄åﬁ_´_m™uÆ
(

419 
ˇm_id
,

420 
uöt32_t
 
time_us
,

421 
uöt32_t
 
£nsôivôy_iso
,

422 
uöt32_t
 
‰ame_duøti⁄_us


425 
ˇmîa_c⁄åﬁ_t
 *
ˇmîa_c⁄åﬁ
;

426 
guzzi_ˇmîa3_dy«mic_£ns‹_exposuª_time_t
 
£ns‹_exposuª_time
;

427 
guzzi_ˇmîa3_dy«mic_£ns‹_£nsôivôy_t
 
£ns‹_£nsôivôy
;

428 
guzzi_ˇmîa3_dy«mic_£ns‹_‰ame_duøti⁄_t
 
£ns‹_‰ame_duøti⁄
;

429 
guzzi_ˇmîa3_c⁄åﬁs_c⁄åﬁ_´_mode_t
 
´_mode
;

430 
îr
;

432 
ˇmîa_c⁄åﬁ
 = &
g_ˇmîa_c⁄åﬁ
[
ˇm_id
];

434 
£ns‹_exposuª_time
.
v
 = 1000 * 
time_us
;

435 
£ns‹_£nsôivôy
.
v
 = 
£nsôivôy_iso
;

436 
£ns‹_‰ame_duøti⁄
.
v
 = 1000 * 
‰ame_duøti⁄_us
;

437 
´_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AE_MODE_OFF
;

439 
	`oßl_muãx_lock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

441 
ˇmîa_c⁄åﬁ
->
guzzi_‰_id
.
v
++;

442 
	`ˇmîa_c⁄fig_£t_begö
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

443 
îr
 = 
	`ˇmîa_c⁄fig_£t
(

444 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

445 
GUZZI_CAMERA3_INDEX_CONTROLS_CAPTURE_REQUEST_GUZZI_FR_ID
,

446 &
ˇmîa_c⁄åﬁ
->
guzzi_‰_id


448 
îr
 +
	`ˇmîa_c⁄fig_£t
(

449 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

450 
GUZZI_CAMERA3_INDEX_CONTROLS_SENSOR_EXPOSURE_TIME
,

451 &
£ns‹_exposuª_time


453 
îr
 +
	`ˇmîa_c⁄fig_£t
(

454 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

455 
GUZZI_CAMERA3_INDEX_CONTROLS_SENSOR_SENSITIVITY
,

456 &
£ns‹_£nsôivôy


458 
îr
 +
	`ˇmîa_c⁄fig_£t
(

459 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

460 
GUZZI_CAMERA3_INDEX_CONTROLS_SENSOR_FRAME_DURATION
,

461 &
£ns‹_‰ame_duøti⁄


463 
îr
 +
	`ˇmîa_c⁄fig_£t
(

464 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

465 
GUZZI_CAMERA3_INDEX_CONTROLS_CONTROL_AE_MODE
,

466 &
´_mode


468 
	`ˇmîa_c⁄fig_£t_íd
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

469 i‡(
îr
) {

470 
	`mmsdbg
(
DL_ERROR
, "Manualáe failed.\n");

472 
	`mmsdbg
(
DL_ERROR
,

475 
ˇm_id
, ()
time_us
, ()
£nsôivôy_iso
, ()
‰ame_duøti⁄_us
);

477 
ˇmîa_c⁄åﬁ
->
c⁄figs_to_skù
 = 1;

478 
	`oßl_muãx_u∆ock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

479 
	}
}

481 
	$ˇmîa_c⁄åﬁ_´_auto
(
ˇm_id
, 
uöt32_t
 
Êash_mode
)

483 
ˇmîa_c⁄åﬁ_t
 *
ˇmîa_c⁄åﬁ
;

484 
guzzi_ˇmîa3_c⁄åﬁs_c⁄åﬁ_´_mode_t
 
´_mode
;

485 
îr
;

487 
ˇmîa_c⁄åﬁ
 = &
g_ˇmîa_c⁄åﬁ
[
ˇm_id
];

489 
Êash_mode
) {

490 
CAMERA_CONTROL__AE_AUTO__FLASH_MODE__OFF
:

491 
´_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AE_MODE_ON
;

493 
CAMERA_CONTROL__AE_AUTO__FLASH_MODE__AUTO
:

494 
´_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AE_MODE_ON_AUTO_FLASH
;

496 
CAMERA_CONTROL__AE_AUTO__FLASH_MODE__ALWAYS
:

497 
´_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AE_MODE_ON_ALWAYS_FLASH
;

499 
CAMERA_CONTROL__AE_AUTO__FLASH_MODE__AUTO_REDEYE
:

500 
´_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AE_MODE_ON_AUTO_FLASH_REDEYE
;

503 
	`mmsdbg
(
DL_ERROR
, "Unknow¿Êash mode: %d!", ()
Êash_mode
);

507 
	`oßl_muãx_lock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

509 
ˇmîa_c⁄åﬁ
->
guzzi_‰_id
.
v
++;

510 
	`ˇmîa_c⁄fig_£t_begö
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

511 
îr
 = 
	`ˇmîa_c⁄fig_£t
(

512 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

513 
GUZZI_CAMERA3_INDEX_CONTROLS_CAPTURE_REQUEST_GUZZI_FR_ID
,

514 &
ˇmîa_c⁄åﬁ
->
guzzi_‰_id


516 
îr
 +
	`ˇmîa_c⁄fig_£t
(

517 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

518 
GUZZI_CAMERA3_INDEX_CONTROLS_CONTROL_AE_MODE
,

519 &
´_mode


521 
	`ˇmîa_c⁄fig_£t_íd
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

522 i‡(
îr
) {

523 
	`mmsdbg
(
DL_ERROR
, "Autoáe failed.\n");

525 
	`mmsdbg
(
DL_ERROR
,

526 "Autÿ´ suc˚eded camîa_id = %d.\n", 
ˇm_id
);

528 
ˇmîa_c⁄åﬁ
->
c⁄figs_to_skù
 = 1;

529 
	`oßl_muãx_u∆ock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

530 
	}
}

532 
	$ˇmîa_c⁄åﬁ_awb_mode
(
ˇm_id
, 
uöt32_t
 
mode
)

534 
ˇmîa_c⁄åﬁ_t
 *
ˇmîa_c⁄åﬁ
;

535 
guzzi_ˇmîa3_c⁄åﬁs_c⁄åﬁ_awb_mode_t
 
awb_mode
;

536 
guzzi_ˇmîa3_c⁄åﬁs_c⁄åﬁ_mode_t
 
˘æ_mode
;

537 
îr
;

539 
ˇmîa_c⁄åﬁ
 = &
g_ˇmîa_c⁄åﬁ
[
ˇm_id
];

540 
˘æ_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_MODE_AUTO
;

542 
mode
) {

543 
CAMERA_CONTROL__AWB_MODE__OFF
:

544 
awb_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AWB_MODE_OFF
;

546 
CAMERA_CONTROL__AWB_MODE__AUTO
:

547 
awb_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AWB_MODE_AUTO
;

549 
CAMERA_CONTROL__AWB_MODE__INCANDESCENT
:

550 
awb_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AWB_MODE_INCANDESCENT
;

552 
CAMERA_CONTROL__AWB_MODE__FLUORESCENT
:

553 
awb_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AWB_MODE_FLUORESCENT
;

555 
CAMERA_CONTROL__AWB_MODE__WARM_FLUORESCENT
:

556 
awb_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AWB_MODE_WARM_FLUORESCENT
;

558 
CAMERA_CONTROL__AWB_MODE__DAYLIGHT
:

559 
awb_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AWB_MODE_DAYLIGHT
;

561 
CAMERA_CONTROL__AWB_MODE__CLOUDY_DAYLIGHT
:

562 
awb_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AWB_MODE_CLOUDY_DAYLIGHT
;

564 
CAMERA_CONTROL__AWB_MODE__TWILIGHT
:

565 
awb_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AWB_MODE_TWILIGHT
;

567 
CAMERA_CONTROL__AWB_MODE__SHADE
:

568 
awb_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AWB_MODE_SHADE
;

571 
	`mmsdbg
(
DL_ERROR
, "Unknow¿awb mode: %d!", ()
mode
);

575 
	`oßl_muãx_lock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

577 
ˇmîa_c⁄åﬁ
->
guzzi_‰_id
.
v
++;

578 
	`ˇmîa_c⁄fig_£t_begö
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

579 
îr
 = 
	`ˇmîa_c⁄fig_£t
(

580 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

581 
GUZZI_CAMERA3_INDEX_CONTROLS_CAPTURE_REQUEST_GUZZI_FR_ID
,

582 &
ˇmîa_c⁄åﬁ
->
guzzi_‰_id


585 
îr
 +
	`ˇmîa_c⁄fig_£t
(

586 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

587 
GUZZI_CAMERA3_INDEX_CONTROLS_CONTROL_MODE
,

588 &
˘æ_mode


590 
îr
 +
	`ˇmîa_c⁄fig_£t
(

591 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

592 
GUZZI_CAMERA3_INDEX_CONTROLS_CONTROL_AWB_MODE
,

593 &
awb_mode


595 
	`ˇmîa_c⁄fig_£t_íd
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

596 i‡(
îr
) {

597 
	`mmsdbg
(
DL_ERROR
, "Setáwb mode failed.\n");

599 
	`mmsdbg
(
DL_ERROR
,

600 "Awb modê£àsuc˚eded camîa_id = %d, modê%d.\n", 
ˇm_id
, ()
mode
);

602 
ˇmîa_c⁄åﬁ
->
c⁄figs_to_skù
 = 1;

603 
	`oßl_muãx_u∆ock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

604 
	}
}

606 
	$ˇmîa_c⁄åﬁ_s˚√_mode
(
ˇm_id
, 
uöt32_t
 
mode
)

608 
ˇmîa_c⁄åﬁ_t
 *
ˇmîa_c⁄åﬁ
;

609 
guzzi_ˇmîa3_c⁄åﬁs_c⁄åﬁ_s˚√_mode_t
 
s˚√_mode
;

610 
îr
;

612 
ˇmîa_c⁄åﬁ
 = &
g_ˇmîa_c⁄åﬁ
[
ˇm_id
];

614 
mode
) {

615 
CAMERA_CONTROL__SCENE_MODE__UNSUPPORTED
:

616 
s˚√_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_SCENE_MODE_UNSUPPORTED
;

618 
CAMERA_CONTROL__SCENE_MODE__FACE_PRIORITY
:

619 
s˚√_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_SCENE_MODE_FACE_PRIORITY
;

621 
CAMERA_CONTROL__SCENE_MODE__ACTION
:

622 
s˚√_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_SCENE_MODE_ACTION
;

624 
CAMERA_CONTROL__SCENE_MODE__PORTRAIT
:

625 
s˚√_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_SCENE_MODE_PORTRAIT
;

627 
CAMERA_CONTROL__SCENE_MODE__LANDSCAPE
:

628 
s˚√_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_SCENE_MODE_LANDSCAPE
;

630 
CAMERA_CONTROL__SCENE_MODE__NIGHT
:

631 
s˚√_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_SCENE_MODE_NIGHT
;

633 
CAMERA_CONTROL__SCENE_MODE__NIGHT_PORTRAIT
:

634 
s˚√_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_SCENE_MODE_NIGHT_PORTRAIT
;

636 
CAMERA_CONTROL__SCENE_MODE__THEATRE
:

637 
s˚√_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_SCENE_MODE_THEATRE
;

639 
CAMERA_CONTROL__SCENE_MODE__BEACH
:

640 
s˚√_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_SCENE_MODE_BEACH
;

642 
CAMERA_CONTROL__SCENE_MODE__SNOW
:

643 
s˚√_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_SCENE_MODE_SNOW
;

645 
CAMERA_CONTROL__SCENE_MODE__SUNSET
:

646 
s˚√_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_SCENE_MODE_SUNSET
;

648 
CAMERA_CONTROL__SCENE_MODE__STEADYPHOTO
:

649 
s˚√_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_SCENE_MODE_STEADYPHOTO
;

651 
CAMERA_CONTROL__SCENE_MODE__FIREWORKS
:

652 
s˚√_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_SCENE_MODE_FIREWORKS
;

654 
CAMERA_CONTROL__SCENE_MODE__SPORTS
:

655 
s˚√_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_SCENE_MODE_SPORTS
;

657 
CAMERA_CONTROL__SCENE_MODE__PARTY
:

658 
s˚√_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_SCENE_MODE_PARTY
;

660 
CAMERA_CONTROL__SCENE_MODE__CANDLELIGHT
:

661 
s˚√_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_SCENE_MODE_CANDLELIGHT
;

663 
CAMERA_CONTROL__SCENE_MODE__BARCODE
:

664 
s˚√_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_SCENE_MODE_BARCODE
;

667 
	`mmsdbg
(
DL_ERROR
, "Unknow¿awb mode: %d!", ()
mode
);

671 
	`oßl_muãx_lock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

673 
ˇmîa_c⁄åﬁ
->
guzzi_‰_id
.
v
++;

674 
	`ˇmîa_c⁄fig_£t_begö
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

675 
îr
 = 
	`ˇmîa_c⁄fig_£t
(

676 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

677 
GUZZI_CAMERA3_INDEX_CONTROLS_CAPTURE_REQUEST_GUZZI_FR_ID
,

678 &
ˇmîa_c⁄åﬁ
->
guzzi_‰_id


682 
îr
 +
	`ˇmîa_c⁄fig_£t
(

683 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

684 
GUZZI_CAMERA3_INDEX_CONTROLS_CONTROL_SCENE_MODE
,

685 &
s˚√_mode


687 
	`ˇmîa_c⁄fig_£t_íd
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

688 i‡(
îr
) {

689 
	`mmsdbg
(
DL_ERROR
, "Set scene mode failed.\n");

691 
	`mmsdbg
(
DL_ERROR
,

692 "S˚√ modê£àsuc˚eded camîa_id = %d, modê%d.\n", 
ˇm_id
, ()
mode
);

694 
ˇmîa_c⁄åﬁ
->
c⁄figs_to_skù
 = 1;

695 
	`oßl_muãx_u∆ock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

696 
	}
}

698 
	$ˇmîa_c⁄åﬁ_™tib™dög_mode
(
ˇm_id
, 
uöt32_t
 
mode
)

700 
ˇmîa_c⁄åﬁ_t
 *
ˇmîa_c⁄åﬁ
;

701 
guzzi_ˇmîa3_c⁄åﬁs_c⁄åﬁ_´_™tib™dög_mode_t
 
™tib™dög_mode
;

702 
îr
;

704 
ˇmîa_c⁄åﬁ
 = &
g_ˇmîa_c⁄åﬁ
[
ˇm_id
];

706 
mode
) {

707 
CAMERA_CONTROL__AE_ANTIBANDING_MODE__OFF
:

708 
™tib™dög_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AE_ANTIBANDING_MODE_OFF
;

710 
CAMERA_CONTROL__AE_ANTIBANDING_MODE__50HZ
:

711 
™tib™dög_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AE_ANTIBANDING_MODE_50HZ
;

713 
CAMERA_CONTROL__AE_ANTIBANDING_MODE__60HZ
:

714 
™tib™dög_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AE_ANTIBANDING_MODE_60HZ
;

716 
CAMERA_CONTROL__AE_ANTIBANDING_MODE__AUTO
:

717 
™tib™dög_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AE_ANTIBANDING_MODE_AUTO
;

720 
	`mmsdbg
(
DL_ERROR
, "Unknow¿™tib™dög mode: %d!", ()
mode
);

724 
	`oßl_muãx_lock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

726 
ˇmîa_c⁄åﬁ
->
guzzi_‰_id
.
v
++;

727 
	`ˇmîa_c⁄fig_£t_begö
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

728 
îr
 = 
	`ˇmîa_c⁄fig_£t
(

729 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

730 
GUZZI_CAMERA3_INDEX_CONTROLS_CAPTURE_REQUEST_GUZZI_FR_ID
,

731 &
ˇmîa_c⁄åﬁ
->
guzzi_‰_id


733 
îr
 +
	`ˇmîa_c⁄fig_£t
(

734 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

735 
GUZZI_CAMERA3_INDEX_CONTROLS_CONTROL_AE_ANTIBANDING_MODE
,

736 &
™tib™dög_mode


738 
	`ˇmîa_c⁄fig_£t_íd
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

739 i‡(
îr
) {

740 
	`mmsdbg
(
DL_ERROR
, "Setántibanding mode failed.\n");

742 
	`mmsdbg
(
DL_ERROR
,

743 "A¡ib™dög modê£àsuc˚eded camîa_id = %d, modê%d.\n", 
ˇm_id
, ()
mode
);

745 
ˇmîa_c⁄åﬁ
->
c⁄figs_to_skù
 = 1;

746 
	`oßl_muãx_u∆ock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

747 
	}
}

749 
	$ˇmîa_c⁄åﬁ_´_lock_mode
(
ˇm_id
, 
uöt32_t
 
mode
)

751 
ˇmîa_c⁄åﬁ_t
 *
ˇmîa_c⁄åﬁ
;

752 
guzzi_ˇmîa3_c⁄åﬁs_c⁄åﬁ_´_lock_t
 
´_lock_mode
;

753 
îr
;

755 
ˇmîa_c⁄åﬁ
 = &
g_ˇmîa_c⁄åﬁ
[
ˇm_id
];

757 
mode
) {

758 
CAMERA_CONTROL__AE_LOCK__OFF
:

759 
´_lock_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AE_LOCK_OFF
;

761 
CAMERA_CONTROL__AE_LOCK__ON
:

762 
´_lock_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AE_LOCK_ON
;

765 
	`mmsdbg
(
DL_ERROR
, "Unknow¿´_lock comm™d: %d!", ()
mode
);

769 
	`oßl_muãx_lock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

771 
ˇmîa_c⁄åﬁ
->
guzzi_‰_id
.
v
++;

772 
	`ˇmîa_c⁄fig_£t_begö
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

773 
îr
 = 
	`ˇmîa_c⁄fig_£t
(

774 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

775 
GUZZI_CAMERA3_INDEX_CONTROLS_CAPTURE_REQUEST_GUZZI_FR_ID
,

776 &
ˇmîa_c⁄åﬁ
->
guzzi_‰_id


778 
îr
 +
	`ˇmîa_c⁄fig_£t
(

779 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

780 
GUZZI_CAMERA3_INDEX_CONTROLS_CONTROL_AE_LOCK
,

781 &
´_lock_mode


783 
	`ˇmîa_c⁄fig_£t_íd
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

784 i‡(
îr
) {

785 
	`mmsdbg
(
DL_ERROR
, "Setáe_lock control mode failed.\n");

787 
	`mmsdbg
(
DL_ERROR
,

788 "Ae_lock c⁄åﬁ suc˚eded: camîa_id = %d, modê%d.\n", 
ˇm_id
, ()
mode
);

790 
ˇmîa_c⁄åﬁ
->
c⁄figs_to_skù
 = 1;

791 
	`oßl_muãx_u∆ock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

792 
	}
}

794 
	$ˇmîa_c⁄åﬁ_´_èrgë_Âs_ønge
(
ˇm_id
, 
uöt32_t
 
mö_Âs
, uöt32_à
max_Âs
)

796 
ˇmîa_c⁄åﬁ_t
 *
ˇmîa_c⁄åﬁ
;

797 
guzzi_ˇmîa3_c⁄åﬁs_c⁄åﬁ_´_èrgë_Âs_ønge_t
 
èrgë_Âs_ønge
;

798 
guzzi_ˇmîa3_°©ic_c⁄åﬁ_´_avaûabÀ_èrgë_Âs_ønges_t
 
check
;

799 
îr
;

801 
ˇmîa_c⁄åﬁ
 = &
g_ˇmîa_c⁄åﬁ
[
ˇm_id
];

802 
èrgë_Âs_ønge
.
dim_size_1
 =

803 
GUZZI_CAMERA3_STATIC_CONTROL_AE_AVAILABLE_TARGET_FPS_RANGES_DIM_MAX_SIZE_1
;

804 
èrgë_Âs_ønge
.
v
[0] = 
mö_Âs
;

805 
èrgë_Âs_ønge
.
v
[1] = 
max_Âs
;

807 
	`ˇmîa_c⁄fig_gë
(

808 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

809 
GUZZI_CAMERA3_INDEX_STATIC_CONTROL_AE_AVAILABLE_TARGET_FPS_RANGES
,

810 &
check


812 
	`mmsdbg
(
DL_ERROR
, "AvailableÑanges: dim1:%d, dim2:%d\n",

813 
check
.
dim_size_1
, check.
dim_size_2
);

815 
	`oßl_muãx_lock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

817 
ˇmîa_c⁄åﬁ
->
guzzi_‰_id
.
v
++;

818 
	`ˇmîa_c⁄fig_£t_begö
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

819 
îr
 = 
	`ˇmîa_c⁄fig_£t
(

820 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

821 
GUZZI_CAMERA3_INDEX_CONTROLS_CAPTURE_REQUEST_GUZZI_FR_ID
,

822 &
ˇmîa_c⁄åﬁ
->
guzzi_‰_id


824 
îr
 +
	`ˇmîa_c⁄fig_£t
(

825 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

826 
GUZZI_CAMERA3_INDEX_CONTROLS_CONTROL_AE_TARGET_FPS_RANGE
,

827 &
èrgë_Âs_ønge


829 
	`ˇmîa_c⁄fig_£t_íd
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

830 i‡(
îr
) {

831 
	`mmsdbg
(
DL_ERROR
, "SetÅarget_fps control mode failed.\n");

833 
	`mmsdbg
(
DL_ERROR
,

835 
ˇm_id
, ()
mö_Âs
, ()
max_Âs
);

837 
ˇmîa_c⁄åﬁ
->
c⁄figs_to_skù
 = 1;

838 
	`oßl_muãx_u∆ock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

839 
	}
}

841 
	$ˇmîa_c⁄åﬁ_awb_lock_mode
(
ˇm_id
, 
uöt32_t
 
ty≥
)

843 
ˇmîa_c⁄åﬁ_t
 *
ˇmîa_c⁄åﬁ
;

844 
guzzi_ˇmîa3_c⁄åﬁs_c⁄åﬁ_awb_lock_t
 
awb_lock_c⁄åﬁ
;

845 
guzzi_ˇmîa3_c⁄åﬁs_c⁄åﬁ_awb_mode_t
 
awb_mode
;

846 
îr
;

848 
ˇmîa_c⁄åﬁ
 = &
g_ˇmîa_c⁄åﬁ
[
ˇm_id
];

849 
awb_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AWB_MODE_AUTO
;

851 
ty≥
) {

852 
CAMERA_CONTROL__AWB_LOCK__OFF
:

853 
awb_lock_c⁄åﬁ
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AWB_LOCK_OFF
;

855 
CAMERA_CONTROL__AWB_LOCK__ON
:

856 
awb_lock_c⁄åﬁ
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AWB_LOCK_ON
;

859 
	`mmsdbg
(
DL_ERROR
, "Unknow¿awb_lock comm™d: %d!", ()
ty≥
);

863 
	`oßl_muãx_lock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

865 
ˇmîa_c⁄åﬁ
->
guzzi_‰_id
.
v
++;

866 
	`ˇmîa_c⁄fig_£t_begö
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

867 
îr
 = 
	`ˇmîa_c⁄fig_£t
(

868 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

869 
GUZZI_CAMERA3_INDEX_CONTROLS_CAPTURE_REQUEST_GUZZI_FR_ID
,

870 &
ˇmîa_c⁄åﬁ
->
guzzi_‰_id


872 
îr
 +
	`ˇmîa_c⁄fig_£t
(

873 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

874 
GUZZI_CAMERA3_INDEX_CONTROLS_CONTROL_AWB_MODE
,

875 &
awb_mode


877 
îr
 +
	`ˇmîa_c⁄fig_£t
(

878 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

879 
GUZZI_CAMERA3_INDEX_CONTROLS_CONTROL_AWB_LOCK
,

880 &
awb_lock_c⁄åﬁ


882 
	`ˇmîa_c⁄fig_£t_íd
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

883 i‡(
îr
) {

884 
	`mmsdbg
(
DL_ERROR
, "Setáwb_lock control mode failed.\n");

886 
	`mmsdbg
(
DL_ERROR
,

887 "Awb_lock c⁄åﬁ suc˚eded: camîa_id = %d, modê%d.\n", 
ˇm_id
, ()
ty≥
);

889 
ˇmîa_c⁄åﬁ
->
c⁄figs_to_skù
 = 1;

890 
	`oßl_muãx_u∆ock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

891 
	}
}

893 
	$ˇmîa_c⁄åﬁ_ˇ±uª_öã¡
(
ˇm_id
, 
uöt32_t
 
mode
)

895 
ˇmîa_c⁄åﬁ_t
 *
ˇmîa_c⁄åﬁ
;

896 
guzzi_ˇmîa3_c⁄åﬁs_c⁄åﬁ_ˇ±uª_öã¡_t
 
ˇ±uª_öã¡
;

897 
guzzi_ˇmîa3_c⁄åﬁs_c⁄åﬁ_mode_t
 
˘æ_mode
;

898 
îr
;

900 
ˇmîa_c⁄åﬁ
 = &
g_ˇmîa_c⁄åﬁ
[
ˇm_id
];

901 
˘æ_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_MODE_AUTO
;

903 
mode
) {

904 
CAMERA_CONTROL__CAPTURE_INTENT__CUSTOM
:

905 
ˇ±uª_öã¡
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_CAPTURE_INTENT_CUSTOM
;

907 
CAMERA_CONTROL__CAPTURE_INTENT__PREVIEW
:

908 
ˇ±uª_öã¡
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_CAPTURE_INTENT_PREVIEW
;

910 
CAMERA_CONTROL__CAPTURE_INTENT__STILL_CAPTURE
:

911 
ˇ±uª_öã¡
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_CAPTURE_INTENT_STILL_CAPTURE
;

913 
CAMERA_CONTROL__CAPTURE_INTENT__VIDEO_RECORD
:

914 
ˇ±uª_öã¡
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_CAPTURE_INTENT_VIDEO_RECORD
;

916 
CAMERA_CONTROL__CAPTURE_INTENT__VIDEO_SNAPSHOT
:

917 
ˇ±uª_öã¡
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_CAPTURE_INTENT_VIDEO_SNAPSHOT
;

919 
CAMERA_CONTROL__CAPTURE_INTENT__ZERO_SHUTTER_LAG
:

920 
ˇ±uª_öã¡
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_CAPTURE_INTENT_ZERO_SHUTTER_LAG
;

923 
	`mmsdbg
(
DL_ERROR
, "Unknow¿ˇ±uª_öã¡ comm™d: %d!", ()
mode
);

927 
	`oßl_muãx_lock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

929 
ˇmîa_c⁄åﬁ
->
guzzi_‰_id
.
v
++;

930 
	`ˇmîa_c⁄fig_£t_begö
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

931 
îr
 = 
	`ˇmîa_c⁄fig_£t
(

932 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

933 
GUZZI_CAMERA3_INDEX_CONTROLS_CAPTURE_REQUEST_GUZZI_FR_ID
,

934 &
ˇmîa_c⁄åﬁ
->
guzzi_‰_id


936 
îr
 +
	`ˇmîa_c⁄fig_£t
(

937 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

938 
GUZZI_CAMERA3_INDEX_CONTROLS_CONTROL_MODE
,

939 &
˘æ_mode


941 
îr
 +
	`ˇmîa_c⁄fig_£t
(

942 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

943 
GUZZI_CAMERA3_INDEX_CONTROLS_CONTROL_CAPTURE_INTENT
,

944 &
ˇ±uª_öã¡


946 
	`ˇmîa_c⁄fig_£t_íd
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

947 i‡(
îr
) {

948 
	`mmsdbg
(
DL_ERROR
, "Set capture_intent control mode failed.\n");

950 
	`mmsdbg
(
DL_ERROR
,

951 "C≠tuª_öã¡ c⁄åﬁ suc˚eded: camîa_id = %d, modê%d.\n", 
ˇm_id
, ()
mode
);

953 
ˇmîa_c⁄åﬁ
->
c⁄figs_to_skù
 = 1;

954 
	`oßl_muãx_u∆ock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

955 
	}
}

957 
	$ˇmîa_c⁄åﬁ_mode
(
ˇm_id
, 
uöt32_t
 
mode
)

959 
ˇmîa_c⁄åﬁ_t
 *
ˇmîa_c⁄åﬁ
;

960 
guzzi_ˇmîa3_c⁄åﬁs_c⁄åﬁ_mode_t
 
˘æ_mode
;

961 
îr
;

963 
ˇmîa_c⁄åﬁ
 = &
g_ˇmîa_c⁄åﬁ
[
ˇm_id
];

965 
mode
) {

966 
CAMERA_CONTROL__MODE__OFF
:

967 
˘æ_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_MODE_OFF
;

969 
CAMERA_CONTROL__MODE__AUTO
:

970 
˘æ_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_MODE_AUTO
;

972 
CAMERA_CONTROL__MODE__USE_SCENE_MODE
:

973 
˘æ_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_MODE_USE_SCENE_MODE
;

976 
	`mmsdbg
(
DL_ERROR
, "Unknow¿˘æ_modêcomm™d: %d!", ()
mode
);

980 
	`oßl_muãx_lock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

982 
ˇmîa_c⁄åﬁ
->
guzzi_‰_id
.
v
++;

983 
	`ˇmîa_c⁄fig_£t_begö
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

984 
îr
 = 
	`ˇmîa_c⁄fig_£t
(

985 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

986 
GUZZI_CAMERA3_INDEX_CONTROLS_CAPTURE_REQUEST_GUZZI_FR_ID
,

987 &
ˇmîa_c⁄åﬁ
->
guzzi_‰_id


989 
îr
 +
	`ˇmîa_c⁄fig_£t
(

990 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

991 
GUZZI_CAMERA3_INDEX_CONTROLS_CONTROL_MODE
,

992 &
˘æ_mode


994 
	`ˇmîa_c⁄fig_£t_íd
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

995 i‡(
îr
) {

996 
	`mmsdbg
(
DL_ERROR
, "Set control mode failed.\n");

998 
	`mmsdbg
(
DL_ERROR
,

999 "C⁄åﬁ modê£àsuc˚eded: camîa_id = %d, modê%d.\n", 
ˇm_id
, ()
mode
);

1001 
ˇmîa_c⁄åﬁ
->
c⁄figs_to_skù
 = 1;

1002 
	`oßl_muãx_u∆ock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

1003 
	}
}

1005 
	$ˇmîa_c⁄åﬁ_‰ame_duøti⁄
(
ˇm_id
, 
uöt64_t
 
vÆ
)

1007 
ˇmîa_c⁄åﬁ_t
 *
ˇmîa_c⁄åﬁ
;

1008 
guzzi_ˇmîa3_c⁄åﬁs_£ns‹_‰ame_duøti⁄_t
 
‰ame_duøti⁄
;

1009 
îr
;

1011 
ˇmîa_c⁄åﬁ
 = &
g_ˇmîa_c⁄åﬁ
[
ˇm_id
];

1012 
‰ame_duøti⁄
.
v
 = 
vÆ
;

1014 
	`oßl_muãx_lock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

1016 
ˇmîa_c⁄åﬁ
->
guzzi_‰_id
.
v
++;

1017 
	`ˇmîa_c⁄fig_£t_begö
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

1018 
îr
 = 
	`ˇmîa_c⁄fig_£t
(

1019 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

1020 
GUZZI_CAMERA3_INDEX_CONTROLS_CAPTURE_REQUEST_GUZZI_FR_ID
,

1021 &
ˇmîa_c⁄åﬁ
->
guzzi_‰_id


1023 
îr
 +
	`ˇmîa_c⁄fig_£t
(

1024 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

1025 
GUZZI_CAMERA3_INDEX_CONTROLS_SENSOR_FRAME_DURATION
,

1026 &
‰ame_duøti⁄


1028 
	`ˇmîa_c⁄fig_£t_íd
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

1029 i‡(
îr
) {

1030 
	`mmsdbg
(
DL_ERROR
, "Set sensor frame duration failed.\n");

1032 
	`mmsdbg
(
DL_ERROR
,

1033 "Sís‹ fømêduøti⁄ së suc˚eded: camîa_id = %d, duøti⁄ = %d.\n", 
ˇm_id
, ()
vÆ
);

1035 
ˇmîa_c⁄åﬁ
->
c⁄figs_to_skù
 = 1;

1036 
	`oßl_muãx_u∆ock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

1037 
	}
}

1040 
	$ˇmîa_c⁄åﬁ_exp_com≥nßti⁄
(
ˇm_id
, 
uöt32_t
 
vÆ
)

1042 
ˇmîa_c⁄åﬁ_t
 *
ˇmîa_c⁄åﬁ
;

1043 
guzzi_ˇmîa3_c⁄åﬁs_c⁄åﬁ_´_exposuª_com≥nßti⁄_t
 
exp_com≥nßti⁄
;

1044 
îr
;

1046 
ˇmîa_c⁄åﬁ
 = &
g_ˇmîa_c⁄åﬁ
[
ˇm_id
];

1047 
exp_com≥nßti⁄
.
v
 = 
vÆ
;

1049 
	`oßl_muãx_lock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

1051 
ˇmîa_c⁄åﬁ
->
guzzi_‰_id
.
v
++;

1052 
	`ˇmîa_c⁄fig_£t_begö
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

1053 
îr
 = 
	`ˇmîa_c⁄fig_£t
(

1054 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

1055 
GUZZI_CAMERA3_INDEX_CONTROLS_CAPTURE_REQUEST_GUZZI_FR_ID
,

1056 &
ˇmîa_c⁄åﬁ
->
guzzi_‰_id


1058 
îr
 +
	`ˇmîa_c⁄fig_£t
(

1059 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

1060 
GUZZI_CAMERA3_INDEX_CONTROLS_CONTROL_AE_EXPOSURE_COMPENSATION
,

1061 &
exp_com≥nßti⁄


1063 
	`ˇmîa_c⁄fig_£t_íd
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

1064 i‡(
îr
) {

1065 
	`mmsdbg
(
DL_ERROR
, "SetÉxposure compensation failed.\n");

1067 
	`mmsdbg
(
DL_ERROR
,

1068 "Exposuª com≥nßti⁄ së suc˚eded: camîa_id = %d, vÆ = %d.\n", 
ˇm_id
, ()
vÆ
);

1070 
ˇmîa_c⁄åﬁ
->
c⁄figs_to_skù
 = 1;

1071 
	`oßl_muãx_u∆ock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

1072 
	}
}

1074 
	$ˇmîa_c⁄åﬁ_£nsôivôy
(
ˇm_id
, 
uöt32_t
 
iso_vÆ
)

1076 
ˇmîa_c⁄åﬁ_t
 *
ˇmîa_c⁄åﬁ
;

1077 
guzzi_ˇmîa3_c⁄åﬁs_£ns‹_£nsôivôy_t
 
£nsôivôy
;

1079 
guzzi_ˇmîa3_c⁄åﬁs_c⁄åﬁ_´_mode_t
 
´_mode
;

1080 
îr
;

1082 
ˇmîa_c⁄åﬁ
 = &
g_ˇmîa_c⁄åﬁ
[
ˇm_id
];

1083 
£nsôivôy
.
v
 = 
iso_vÆ
;

1084 
´_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AE_MODE_OFF
;

1086 
	`oßl_muãx_lock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

1088 
ˇmîa_c⁄åﬁ
->
guzzi_‰_id
.
v
++;

1089 
	`ˇmîa_c⁄fig_£t_begö
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

1090 
îr
 = 
	`ˇmîa_c⁄fig_£t
(

1091 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

1092 
GUZZI_CAMERA3_INDEX_CONTROLS_CAPTURE_REQUEST_GUZZI_FR_ID
,

1093 &
ˇmîa_c⁄åﬁ
->
guzzi_‰_id


1095 
îr
 +
	`ˇmîa_c⁄fig_£t
(

1096 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

1097 
GUZZI_CAMERA3_INDEX_CONTROLS_SENSOR_SENSITIVITY
,

1098 &
£nsôivôy


1100 
îr
 +
	`ˇmîa_c⁄fig_£t
(

1101 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

1102 
GUZZI_CAMERA3_INDEX_CONTROLS_CONTROL_AE_MODE
,

1103 &
´_mode


1105 
	`ˇmîa_c⁄fig_£t_íd
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

1106 i‡(
îr
) {

1107 
	`mmsdbg
(
DL_ERROR
, "Set ISO failed.\n");

1109 
	`mmsdbg
(
DL_ERROR
,

1110 "ISO së suc˚eded: camîa_id = %d, vÆ = %d.\n", 
ˇm_id
, ()
iso_vÆ
);

1112 
ˇmîa_c⁄åﬁ
->
c⁄figs_to_skù
 = 1;

1113 
	`oßl_muãx_u∆ock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

1114 
	}
}

1116 
	$ˇmîa_c⁄åﬁ_ef„˘_mode
(
ˇm_id
, 
uöt32_t
 
mode
)

1118 
ˇmîa_c⁄åﬁ_t
 *
ˇmîa_c⁄åﬁ
;

1119 
guzzi_ˇmîa3_c⁄åﬁs_c⁄åﬁ_ef„˘_mode_t
 
ef„˘_mode
;

1120 
îr
;

1122 
ˇmîa_c⁄åﬁ
 = &
g_ˇmîa_c⁄åﬁ
[
ˇm_id
];

1124 
mode
) {

1125 
CAMERA_CONTROL__EFFECT_MODE__OFF
:

1126 
ef„˘_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_EFFECT_MODE_OFF
;

1128 
CAMERA_CONTROL__EFFECT_MODE__MONO
:

1129 
ef„˘_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_EFFECT_MODE_MONO
;

1131 
CAMERA_CONTROL__EFFECT_MODE__NEGATIVE
:

1132 
ef„˘_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_EFFECT_MODE_NEGATIVE
;

1134 
CAMERA_CONTROL__EFFECT_MODE__SOLARIZE
:

1135 
ef„˘_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_EFFECT_MODE_SOLARIZE
;

1137 
CAMERA_CONTROL__EFFECT_MODE__SEPIA
:

1138 
ef„˘_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_EFFECT_MODE_SEPIA
;

1140 
CAMERA_CONTROL__EFFECT_MODE__POSTERIZE
:

1141 
ef„˘_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_EFFECT_MODE_POSTERIZE
;

1143 
CAMERA_CONTROL__EFFECT_MODE__WHITEBOARD
:

1144 
ef„˘_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_EFFECT_MODE_WHITEBOARD
;

1146 
CAMERA_CONTROL__EFFECT_MODE__BLACKBOARD
:

1147 
ef„˘_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_EFFECT_MODE_BLACKBOARD
;

1149 
CAMERA_CONTROL__EFFECT_MODE__AQUA
:

1150 
ef„˘_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_EFFECT_MODE_AQUA
;

1153 
	`mmsdbg
(
DL_ERROR
, "Unknow¿awb mode: %d!", ()
mode
);

1157 
	`oßl_muãx_lock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

1159 
ˇmîa_c⁄åﬁ
->
guzzi_‰_id
.
v
++;

1160 
	`ˇmîa_c⁄fig_£t_begö
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

1161 
îr
 = 
	`ˇmîa_c⁄fig_£t
(

1162 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

1163 
GUZZI_CAMERA3_INDEX_CONTROLS_CAPTURE_REQUEST_GUZZI_FR_ID
,

1164 &
ˇmîa_c⁄åﬁ
->
guzzi_‰_id


1167 
îr
 +
	`ˇmîa_c⁄fig_£t
(

1168 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

1169 
GUZZI_CAMERA3_INDEX_CONTROLS_CONTROL_EFFECT_MODE
,

1170 &
ef„˘_mode


1172 
	`ˇmîa_c⁄fig_£t_íd
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

1173 i‡(
îr
) {

1174 
	`mmsdbg
(
DL_ERROR
, "SetÉffect mode failed.\n");

1176 
	`mmsdbg
(
DL_ERROR
,

1177 "Ef„˘ modê£àsuc˚eded camîa_id = %d, modê%d.\n", 
ˇm_id
, ()
mode
);

1179 
ˇmîa_c⁄åﬁ
->
c⁄figs_to_skù
 = 1;

1180 
	`oßl_muãx_u∆ock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

1181 
	}
}

1183 
	$ˇmîa_c⁄åﬁ_af_mode
(
ˇm_id
, 
uöt32_t
 
mode
)

1185 
ˇmîa_c⁄åﬁ_t
 *
ˇmîa_c⁄åﬁ
;

1186 
guzzi_ˇmîa3_c⁄åﬁs_c⁄åﬁ_af_mode_t
 
af_mode
;

1187 
îr
;

1189 
ˇmîa_c⁄åﬁ
 = &
g_ˇmîa_c⁄åﬁ
[
ˇm_id
];

1191 
mode
) {

1192 
CAMERA_CONTROL__AF_MODE_OFF
:

1193 
af_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AF_MODE_OFF
;

1195 
CAMERA_CONTROL__AF_MODE_AUTO
:

1196 
af_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AF_MODE_AUTO
;

1198 
CAMERA_CONTROL__AF_MODE_MACRO
:

1199 
af_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AF_MODE_MACRO
;

1201 
CAMERA_CONTROL__AF_MODE_CONTINUOUS_VIDEO
:

1202 
af_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AF_MODE_CONTINUOUS_VIDEO
;

1204 
CAMERA_CONTROL__AF_MODE_CONTINUOUS_PICTURE
:

1205 
af_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AF_MODE_CONTINUOUS_PICTURE
;

1207 
CAMERA_CONTROL__AF_MODE_EDOF
:

1208 
af_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AF_MODE_EDOF
;

1211 
	`mmsdbg
(
DL_ERROR
, "Unknow¿a‡mode: %d!", ()
mode
);

1215 
	`oßl_muãx_lock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

1217 
ˇmîa_c⁄åﬁ
->
guzzi_‰_id
.
v
++;

1218 
	`ˇmîa_c⁄fig_£t_begö
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

1219 
îr
 = 
	`ˇmîa_c⁄fig_£t
(

1220 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

1221 
GUZZI_CAMERA3_INDEX_CONTROLS_CAPTURE_REQUEST_GUZZI_FR_ID
,

1222 &
ˇmîa_c⁄åﬁ
->
guzzi_‰_id


1224 
îr
 +
	`ˇmîa_c⁄fig_£t
(

1225 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

1226 
GUZZI_CAMERA3_INDEX_CONTROLS_CONTROL_AF_MODE
,

1227 &
af_mode


1229 
	`ˇmîa_c⁄fig_£t_íd
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

1230 i‡(
îr
) {

1231 
	`mmsdbg
(
DL_ERROR
, "Setáf mode failed.\n");

1233 
	`mmsdbg
(
DL_ERROR
,

1234 "A‡modê£àsuc˚eded camîa_id = %d, modê%d.\n", 
ˇm_id
, ()
mode
);

1236 
ˇmîa_c⁄åﬁ
->
c⁄figs_to_skù
 = 1;

1237 
	`oßl_muãx_u∆ock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

1238 
	}
}

1240 
	$ˇmîa_c⁄åﬁ_noi£_ªdu˘i⁄_°ªngth
(
ˇm_id
, 
uöt32_t
 
°ªngth_vÆ
)

1242 
ˇmîa_c⁄åﬁ_t
 *
ˇmîa_c⁄åﬁ
;

1243 
guzzi_ˇmîa3_c⁄åﬁs_noi£_ªdu˘i⁄_°ªngth_t
 
°ªngth
;

1244 
guzzi_ˇmîa3_c⁄åﬁs_noi£_ªdu˘i⁄_mode_t
 
mode
;

1245 
îr
;

1247 
ˇmîa_c⁄åﬁ
 = &
g_ˇmîa_c⁄åﬁ
[
ˇm_id
];

1248 
°ªngth
.
v
 = 
°ªngth_vÆ
;

1249 
mode
.
v
 = 
GUZZI_CAMERA3_ENUM_NOISE_REDUCTION_MODE_FAST
;

1251 
	`oßl_muãx_lock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

1253 
ˇmîa_c⁄åﬁ
->
guzzi_‰_id
.
v
++;

1254 
	`ˇmîa_c⁄fig_£t_begö
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

1255 
îr
 = 
	`ˇmîa_c⁄fig_£t
(

1256 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

1257 
GUZZI_CAMERA3_INDEX_CONTROLS_CAPTURE_REQUEST_GUZZI_FR_ID
,

1258 &
ˇmîa_c⁄åﬁ
->
guzzi_‰_id


1260 
îr
 +
	`ˇmîa_c⁄fig_£t
(

1261 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

1262 
GUZZI_CAMERA3_INDEX_CONTROLS_NOISE_REDUCTION_STRENGTH
,

1263 &
°ªngth


1265 
îr
 +
	`ˇmîa_c⁄fig_£t
(

1266 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

1267 
GUZZI_CAMERA3_INDEX_CONTROLS_NOISE_REDUCTION_MODE
,

1268 &
mode


1270 
	`ˇmîa_c⁄fig_£t_íd
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

1271 i‡(
îr
) {

1272 
	`mmsdbg
(
DL_ERROR
, "SetÇoiseÑeduction strength failed.\n");

1274 
	`mmsdbg
(
DL_ERROR
,

1276 
ˇm_id
, ()
°ªngth_vÆ
);

1278 
ˇmîa_c⁄åﬁ
->
c⁄figs_to_skù
 = 1;

1279 
	`oßl_muãx_u∆ock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

1280 
	}
}

1282 
	$ˇmîa_c⁄åﬁ_ßtuøti⁄
(
ˇm_id
, 
uöt32_t
 
ßtuøti⁄_vÆ
)

1284 
ˇmîa_c⁄åﬁ_t
 *
ˇmîa_c⁄åﬁ
;

1286 
îr
;

1288 
ˇmîa_c⁄åﬁ
 = &
g_ˇmîa_c⁄åﬁ
[
ˇm_id
];

1291 
	`oßl_muãx_lock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

1293 
ˇmîa_c⁄åﬁ
->
guzzi_‰_id
.
v
++;

1294 
	`ˇmîa_c⁄fig_£t_begö
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

1295 
îr
 = 
	`ˇmîa_c⁄fig_£t
(

1296 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

1297 
GUZZI_CAMERA3_INDEX_CONTROLS_CAPTURE_REQUEST_GUZZI_FR_ID
,

1298 &
ˇmîa_c⁄åﬁ
->
guzzi_‰_id


1305 
	`ˇmîa_c⁄fig_£t_íd
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

1306 i‡(
îr
) {

1307 
	`mmsdbg
(
DL_ERROR
, "Set saturation failed.\n");

1309 
	`mmsdbg
(
DL_ERROR
,

1311 
ˇm_id
, ()
ßtuøti⁄_vÆ
);

1313 
ˇmîa_c⁄åﬁ
->
c⁄figs_to_skù
 = 1;

1314 
	`oßl_muãx_u∆ock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

1315 
	}
}

1317 
	$ˇmîa_c⁄åﬁ_brighäess
(
ˇm_id
, 
uöt32_t
 
brighäess_vÆ
)

1319 
ˇmîa_c⁄åﬁ_t
 *
ˇmîa_c⁄åﬁ
;

1321 
îr
;

1323 
ˇmîa_c⁄åﬁ
 = &
g_ˇmîa_c⁄åﬁ
[
ˇm_id
];

1326 
	`oßl_muãx_lock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

1328 
ˇmîa_c⁄åﬁ
->
guzzi_‰_id
.
v
++;

1329 
	`ˇmîa_c⁄fig_£t_begö
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

1330 
îr
 = 
	`ˇmîa_c⁄fig_£t
(

1331 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

1332 
GUZZI_CAMERA3_INDEX_CONTROLS_CAPTURE_REQUEST_GUZZI_FR_ID
,

1333 &
ˇmîa_c⁄åﬁ
->
guzzi_‰_id


1340 
	`ˇmîa_c⁄fig_£t_íd
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

1341 i‡(
îr
) {

1342 
	`mmsdbg
(
DL_ERROR
, "Set brightness failed.\n");

1344 
	`mmsdbg
(
DL_ERROR
,

1346 
ˇm_id
, ()
brighäess_vÆ
);

1348 
ˇmîa_c⁄åﬁ
->
c⁄figs_to_skù
 = 1;

1349 
	`oßl_muãx_u∆ock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

1350 
	}
}

1352 
	$ˇmîa_c⁄åﬁ_f‹m©
(
ˇm_id
, 
uöt32_t
 
f‹m©_ty≥
)

1362 
	`mmsdbg
(
DL_ERROR
,

1364 
ˇm_id
, ()
f‹m©_ty≥
);

1383 
	}
}

1385 
	$ˇmîa_c⁄åﬁ_ªsﬁuti⁄
(
ˇm_id
, 
uöt32_t
 
w
, uöt32_à
h
)

1398 
	`mmsdbg
(
DL_ERROR
,

1400 
ˇm_id
, ()
w
, ()
h
);

1419 
	}
}

1421 
	$ˇmîa_c⁄åﬁ_sh¨≤ess
(
ˇm_id
, 
uöt32_t
 
sh¨≤ess_vÆ
)

1423 
ˇmîa_c⁄åﬁ_t
 *
ˇmîa_c⁄åﬁ
;

1424 
guzzi_ˇmîa3_c⁄åﬁs_edge_°ªngth_t
 
sh¨≤ess
;

1425 
îr
;

1427 
ˇmîa_c⁄åﬁ
 = &
g_ˇmîa_c⁄åﬁ
[
ˇm_id
];

1428 
sh¨≤ess
.
v
 = 
sh¨≤ess_vÆ
;

1430 
	`oßl_muãx_lock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

1432 
ˇmîa_c⁄åﬁ
->
guzzi_‰_id
.
v
++;

1433 
	`ˇmîa_c⁄fig_£t_begö
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

1434 
îr
 = 
	`ˇmîa_c⁄fig_£t
(

1435 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

1436 
GUZZI_CAMERA3_INDEX_CONTROLS_CAPTURE_REQUEST_GUZZI_FR_ID
,

1437 &
ˇmîa_c⁄åﬁ
->
guzzi_‰_id


1439 
îr
 +
	`ˇmîa_c⁄fig_£t
(

1440 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

1441 
GUZZI_CAMERA3_INDEX_CONTROLS_EDGE_STRENGTH
,

1442 &
sh¨≤ess


1444 
	`ˇmîa_c⁄fig_£t_íd
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

1445 i‡(
îr
) {

1446 
	`mmsdbg
(
DL_ERROR
, "Set sharpness failed.\n");

1448 
	`mmsdbg
(
DL_ERROR
,

1450 
ˇm_id
, ()
sh¨≤ess_vÆ
);

1452 
ˇmîa_c⁄åﬁ
->
c⁄figs_to_skù
 = 1;

1453 
	`oßl_muãx_u∆ock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

1454 
	}
}

	@cdk/apps/arch/ma2x5x/cdk_FLIC_3xIMX208/leon/camera_control.h

35 #i‚de‡
_CAMERA_CONTROL_H


36 
	#_CAMERA_CONTROL_H


	)

38 
	~<°döt.h
>

41 
	mCAMERA_CONTROL__AE_AUTO__FLASH_MODE__OFF
,

42 
	mCAMERA_CONTROL__AE_AUTO__FLASH_MODE__AUTO
,

43 
	mCAMERA_CONTROL__AE_AUTO__FLASH_MODE__ALWAYS
,

44 
	mCAMERA_CONTROL__AE_AUTO__FLASH_MODE__AUTO_REDEYE
,

48 
	mCAMERA_CONTROL__AWB_MODE__OFF
,

49 
	mCAMERA_CONTROL__AWB_MODE__AUTO
,

50 
	mCAMERA_CONTROL__AWB_MODE__INCANDESCENT
,

51 
	mCAMERA_CONTROL__AWB_MODE__FLUORESCENT
,

52 
	mCAMERA_CONTROL__AWB_MODE__WARM_FLUORESCENT
,

53 
	mCAMERA_CONTROL__AWB_MODE__DAYLIGHT
,

54 
	mCAMERA_CONTROL__AWB_MODE__CLOUDY_DAYLIGHT
,

55 
	mCAMERA_CONTROL__AWB_MODE__TWILIGHT
,

56 
	mCAMERA_CONTROL__AWB_MODE__SHADE
,

60 
	mCAMERA_CONTROL__SCENE_MODE__UNSUPPORTED
,

61 
	mCAMERA_CONTROL__SCENE_MODE__FACE_PRIORITY
,

62 
	mCAMERA_CONTROL__SCENE_MODE__ACTION
,

63 
	mCAMERA_CONTROL__SCENE_MODE__PORTRAIT
,

64 
	mCAMERA_CONTROL__SCENE_MODE__LANDSCAPE
,

65 
	mCAMERA_CONTROL__SCENE_MODE__NIGHT
,

66 
	mCAMERA_CONTROL__SCENE_MODE__NIGHT_PORTRAIT
,

67 
	mCAMERA_CONTROL__SCENE_MODE__THEATRE
,

68 
	mCAMERA_CONTROL__SCENE_MODE__BEACH
,

69 
	mCAMERA_CONTROL__SCENE_MODE__SNOW
,

70 
	mCAMERA_CONTROL__SCENE_MODE__SUNSET
,

71 
	mCAMERA_CONTROL__SCENE_MODE__STEADYPHOTO
,

72 
	mCAMERA_CONTROL__SCENE_MODE__FIREWORKS
,

73 
	mCAMERA_CONTROL__SCENE_MODE__SPORTS
,

74 
	mCAMERA_CONTROL__SCENE_MODE__PARTY
,

75 
	mCAMERA_CONTROL__SCENE_MODE__CANDLELIGHT
,

76 
	mCAMERA_CONTROL__SCENE_MODE__BARCODE
,

80 
	mCAMERA_CONTROL__AE_ANTIBANDING_MODE__OFF
,

81 
	mCAMERA_CONTROL__AE_ANTIBANDING_MODE__50HZ
,

82 
	mCAMERA_CONTROL__AE_ANTIBANDING_MODE__60HZ
,

83 
	mCAMERA_CONTROL__AE_ANTIBANDING_MODE__AUTO
,

87 
	mCAMERA_CONTROL__AE_LOCK__OFF
,

88 
	mCAMERA_CONTROL__AE_LOCK__ON
,

92 
	mCAMERA_CONTROL__AWB_LOCK__OFF
,

93 
	mCAMERA_CONTROL__AWB_LOCK__ON
,

97 
	mCAMERA_CONTROL__CAPTURE_INTENT__CUSTOM
,

98 
	mCAMERA_CONTROL__CAPTURE_INTENT__PREVIEW
,

99 
	mCAMERA_CONTROL__CAPTURE_INTENT__STILL_CAPTURE
,

100 
	mCAMERA_CONTROL__CAPTURE_INTENT__VIDEO_RECORD
,

101 
	mCAMERA_CONTROL__CAPTURE_INTENT__VIDEO_SNAPSHOT
,

102 
	mCAMERA_CONTROL__CAPTURE_INTENT__ZERO_SHUTTER_LAG
,

106 
	mCAMERA_CONTROL__MODE__OFF
,

107 
	mCAMERA_CONTROL__MODE__AUTO
,

108 
	mCAMERA_CONTROL__MODE__USE_SCENE_MODE
,

112 
	mCAMERA_CONTROL__EFFECT_MODE__OFF
,

113 
	mCAMERA_CONTROL__EFFECT_MODE__MONO
,

114 
	mCAMERA_CONTROL__EFFECT_MODE__NEGATIVE
,

115 
	mCAMERA_CONTROL__EFFECT_MODE__SOLARIZE
,

116 
	mCAMERA_CONTROL__EFFECT_MODE__SEPIA
,

117 
	mCAMERA_CONTROL__EFFECT_MODE__POSTERIZE
,

118 
	mCAMERA_CONTROL__EFFECT_MODE__WHITEBOARD
,

119 
	mCAMERA_CONTROL__EFFECT_MODE__BLACKBOARD
,

120 
	mCAMERA_CONTROL__EFFECT_MODE__AQUA
,

124 
	mCAMERA_CONTROL__AF_MODE_OFF
,

125 
	mCAMERA_CONTROL__AF_MODE_AUTO
,

126 
	mCAMERA_CONTROL__AF_MODE_MACRO
,

127 
	mCAMERA_CONTROL__AF_MODE_CONTINUOUS_VIDEO
,

128 
	mCAMERA_CONTROL__AF_MODE_CONTINUOUS_PICTURE
,

129 
	mCAMERA_CONTROL__AF_MODE_EDOF
,

133 
uöt32_t
 
ˇmîa_c⁄åﬁ_is_a˘ive
(
ˇm_id
);

134 
ˇmîa_c⁄åﬁ_°¨t
(
ˇm_id
);

135 
ˇmîa_c⁄åﬁ_°›
(
ˇm_id
);

136 
ˇmîa_c⁄åﬁ_ˇ±uª
(
ˇm_id
);

137 
ˇmîa_c⁄åﬁ_Àns_move
(
ˇm_id
, 
Àns_posôi⁄
);

138 
ˇmîa_c⁄åﬁ_focus_åiggî
(
ˇm_id
);

139 
ˇmîa_c⁄åﬁ_´_m™uÆ
(

140 
ˇm_id
,

141 
uöt32_t
 
time_us
,

142 
uöt32_t
 
£nsôivôy_iso
,

143 
uöt32_t
 
‰ame_duøti⁄_us


145 
ˇmîa_c⁄åﬁ_´_auto
(
ˇm_id
, 
uöt32_t
 
Êash_mode
);

146 
ˇmîa_c⁄åﬁ_awb_mode
(
ˇm_id
, 
uöt32_t
 
awb_mode
);

147 
ˇmîa_c⁄åﬁ_s˚√_mode
(
ˇm_id
, 
uöt32_t
 
s˚√_mode
);

148 
ˇmîa_c⁄åﬁ_™tib™dög_mode
(
ˇm_id
, 
uöt32_t
 
™tib™dög_mode
);

149 
ˇmîa_c⁄åﬁ_´_lock_mode
(
ˇm_id
, 
uöt32_t
 
´_lock_mode
);

150 
ˇmîa_c⁄åﬁ_´_èrgë_Âs_ønge
(
ˇm_id
, 
uöt32_t
 
mö_Âs
, uöt32_à
max_Âs
);

151 
ˇmîa_c⁄åﬁ_awb_lock_mode
(
ˇm_id
, 
uöt32_t
 
awb_lock_c⁄åﬁ
);

152 
ˇmîa_c⁄åﬁ_ˇ±uª_öã¡
(
ˇm_id
, 
uöt32_t
 
ˇ±uª_öã¡_mode
);

153 
ˇmîa_c⁄åﬁ_mode
(
ˇm_id
, 
uöt32_t
 
c⁄åﬁ_mode
);

154 
ˇmîa_c⁄åﬁ_‰ame_duøti⁄
(
ˇm_id
, 
uöt64_t
 
‰ame_duøti⁄
);

155 
ˇmîa_c⁄åﬁ_exp_com≥nßti⁄
(
ˇm_id
, 
uöt32_t
 
exp_com≥nßti⁄
);

156 
ˇmîa_c⁄åﬁ_£nsôivôy
(
ˇm_id
, 
uöt32_t
 
iso_vÆ
);

157 
ˇmîa_c⁄åﬁ_ef„˘_mode
(
ˇm_id
, 
uöt32_t
 
ef„˘_mode
);

158 
ˇmîa_c⁄åﬁ_af_mode
(
ˇm_id
, 
uöt32_t
 
af_mode
);

159 
ˇmîa_c⁄åﬁ_noi£_ªdu˘i⁄_°ªngth
(
ˇm_id
, 
uöt32_t
 
°ªngth_vÆ
);

160 
ˇmîa_c⁄åﬁ_ßtuøti⁄
(
ˇm_id
, 
uöt32_t
 
ßtuøti⁄_vÆ
);

161 
ˇmîa_c⁄åﬁ_brighäess
(
ˇm_id
, 
uöt32_t
 
brighäess_vÆ
);

162 
ˇmîa_c⁄åﬁ_f‹m©
(
ˇm_id
, 
uöt32_t
 
f‹m©_ty≥
);

163 
ˇmîa_c⁄åﬁ_ªsﬁuti⁄
(
ˇm_id
, 
uöt32_t
 
width
, uöt32_à
height
);

164 
ˇmîa_c⁄åﬁ_sh¨≤ess
(
ˇm_id
, 
uöt32_t
 
sh¨≤ess_vÆ
);

	@cdk/apps/arch/ma2x5x/cdk_FLIC_3xIMX208/leon/init.c

1 
	~<°dlib.h
>

2 
	~<°dio.h
>

3 
	~<°rög.h
>

4 
	~<î∫o.h
>

5 
	~<πems.h
>

6 
	~<b•.h
>

8 
	~<πems/b•Io.h
>

10 
	~<£m≠h‹e.h
>

11 
	~<±hªad.h
>

12 
	~<sched.h
>

13 
	~<f˙é.h
>

14 
	~<mv_ty≥s.h
>

15 
	~<πems/˝uu£.h
>

16 
	~<DrvLe⁄.h
>

17 
	~<öôSy°em.h
>

28 
maö
(
¨gc
, **
¨gv
);

30 * 
	$POSIX_Inô
 (*
¨gs
)

32 
	`UNUSED
(
¨gs
);

34 
	`maö
(0, 
NULL
);

35  
NULL
;

36 
	}
}

38 #i‡!
deföed
 (
__CONFIG__
)

39 
	#__CONFIG__


	)

42 
	#CONFIGURE_INIT


	)

44 
	#CONFIGURE_MICROSECONDS_PER_TICK
 1000

	)

46 
	#CONFIGURE_TICKS_PER_TIMESLICE
 10

	)

48 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

50 
	#CONFIGURE_APPLICATION_NEEDS_CLOCK_DRIVER


	)

52 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

56 
	#CONFIGURE_MINIMUM_TASK_STACK_SIZE
 (8*1024)

	)

58 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 80

	)

60 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 600

	)

62 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 50

	)

64 
	#CONFIGURE_MAXIMUM_POSIX_SEMAPHORES
 600

	)

66 
	#CONFIGURE_MAXIMUM_POSIX_CONDITION_VARIABLES
 16

	)

68 
	#CONFIGURE_MAXIMUM_POSIX_TIMERS
 4

	)

70 
	#CONFIGURE_MAXIMUM_TIMERS
 4

	)

72 
	#CONFIGURE_MAXIMUM_MESSAGE_QUEUES
 8

	)

73 
	#CONFIGURE_MAXIMUM_TASKS
 4

	)

75 
	#CONFIGURE_MAXIMUM_REGIONS
 1

	)

76 
	#CONFIGURE_LIBIO_MAXIMUM_FILE_DESCRIPTORS
 32

	)

77 
	#CONFIGURE_MAXIMUM_DRIVERS
 10

	)

78 
	#CONFIGURE_MAXIMUM_SEMAPHORES
 16

	)

79 
	#CONFIGURE_MAXIMUM_DEVICES
 8

	)

80 
	#CONFIGURE_APPLICATION_NEEDS_ZERO_DRIVER


	)

81 
	#CONFIGURE_APPLICATION_NEEDS_NULL_DRIVER


	)

82 
	#CONFIGURE_APPLICATION_NEEDS_STUB_DRIVER


	)

85 
	$F©Æ_exãnsi⁄
(

86 
I¡î«l_îr‹s_Sour˚
 
the_sour˚
,

87 
boﬁ
 
is_öã∫Æ
,

88 
I¡î«l_îr‹s_t
 
the_îr‹


91 
the_sour˚
)

93 
RTEMS_FATAL_SOURCE_EXIT
:

94 if(
the_îr‹
)

95 
	`¥ötk
("Exôed wôhÉº‹ codê%d\n", 
the_îr‹
);

97 
RTEMS_FATAL_SOURCE_ASSERT
:

98 
	`¥ötk
("%s : %d in %s \n",

99 ((
πems_as£π_c⁄ãxt
 *)
the_îr‹
)->
fûe
,

100 ((
πems_as£π_c⁄ãxt
 *)
the_îr‹
)->
löe
,

101 ((
πems_as£π_c⁄ãxt
 *)
the_îr‹
)->
fun˘i⁄
);

103 
RTEMS_FATAL_SOURCE_EXCEPTION
:

104 
	`πems_ex˚±i⁄_‰ame_¥öt
((c⁄° 
πems_ex˚±i⁄_‰ame
 *Ë
the_îr‹
);

107 
	`¥ötk
 ("\nSource %d Internal %d Error %d 0x%X:\n",

108 
the_sour˚
, 
is_öã∫Æ
, 
the_îr‹
,Åhe_error);

111 
	}
}

113 
	#CONFIGURE_MAXIMUM_USER_EXTENSIONS
 1

	)

114 
	#CONFIGURE_INITIAL_EXTENSIONS
 { .
Áèl
 = &
F©Æ_exãnsi⁄
 }

	)

116 
	~<πems/c⁄fdefs.h
>

117 
	#MSS_CLOCKS
 0xFFFFFFFF

	)

142 
BSP_SET_CLOCK
(
DEFAULT_OSC_CLOCK_KHZ
, 
DEFAULT_APP_CLOCK_KHZ
, 1, 1, 
APP_CSS_CLOCKS
, 
APP_MSS_CLOCKS
, 
APP_UPA_CLOCKS
, 
APP_SIPP_CLOCKS
,0);

144 
BSP_SET_L2C_CONFIG
(0, 
DEFAULT_RTEMS_L2C_REPLACEMENT_POLICY
, 
DEFAULT_RTEMS_L2C_LOCKED_WAYS
,
DEFAULT_RTEMS_L2C_MODE
, 0, 0);

	@cdk/apps/arch/ma2x5x/cdk_FLIC_3xIMX208/leon/initSystem.c

19 
	~<OsDrvC¥.h
>

20 
	~<DrvGpio.h
>

21 
	~<OsDrvTimî.h
>

22 
	~<DrvShaveL2Cache.h
>

23 
	~"öôSy°em.h
"

24 
	~<brdDeföes.h
>

25 
	~"brdGpioCfgs/brdMv0182GpioDeÁu…s.h
"

31 
	#L2CACHE_CFG
 (
SHAVE_L2CACHE_NORMAL_MODE
)

	)

33 
	#CLOCKS_MIPICFG
 (
AUX_CLK_MASK_MIPI_ECFG
 | 
AUX_CLK_MASK_MIPI_CFG
)

	)

34 
	#REM_CLOCKS
 ( 
AUX_CLK_MASK_I2S0
 | \

35 
AUX_CLK_MASK_I2S1
 | \

36 
AUX_CLK_MASK_I2S2
 )

	)

38 
	#DESIRED_USB_FREQ_KHZ
 (20000)

	)

39 #i‡(
DEFAULT_APP_CLOCK_KHZ
%
DESIRED_USB_FREQ_KHZ
)

50 
tyAuxClkDividîCfg
 
	gauxClkAŒOn
[] =

52 {
AUX_CLK_MASK_UART
, 
CLK_SRC_REFCLK0
, 96, 625},

54 .
auxClockE«bÀMask
 = 
REM_CLOCKS
,

55 .
	gauxClockSour˚
 = 
CLK_SRC_SYS_CLK
,

56 .
	gauxClockDivNumî©‹
 = 1,

57 .
	gauxClockDivDíomö©‹
 = 1,

60 .
	gauxClockE«bÀMask
 = 
AUX_CLK_MASK_LCD
 ,

61 .
	gauxClockSour˚
 = 
CLK_SRC_SYS_CLK_DIV2
,

62 .
	gauxClockDivNumî©‹
 = 1,

63 .
	gauxClockDivDíomö©‹
 = 1

66 .
	gauxClockE«bÀMask
 = 
AUX_CLK_MASK_MEDIA
,

67 .
	gauxClockSour˚
 = 
CLK_SRC_SYS_CLK
 ,

68 .
	gauxClockDivNumî©‹
 = 1,

69 .
	gauxClockDivDíomö©‹
 = 1,

73 .
	gauxClockE«bÀMask
 = (
AUX_CLK_MASK_CIF0
 | 
AUX_CLK_MASK_CIF1
),

74 .
	gauxClockSour˚
 = 
CLK_SRC_SYS_CLK
,

75 .
	gauxClockDivNumî©‹
 = 1,

76 .
	gauxClockDivDíomö©‹
 = 1,

79 .
	gauxClockE«bÀMask
 = 
CLOCKS_MIPICFG
,

80 .
	gauxClockSour˚
 = 
CLK_SRC_SYS_CLK
 ,

81 .
	gauxClockDivNumî©‹
 = 1,

82 .
	gauxClockDivDíomö©‹
 = (
uöt32_t
)(
DEFAULT_APP_CLOCK_KHZ
/24000),

85 .
	gauxClockE«bÀMask
 = 
AUX_CLK_MASK_MIPI_TX0
 | 
AUX_CLK_MASK_MIPI_TX1
,

86 .
	gauxClockSour˚
 = 
CLK_SRC_REFCLK0
,

87 .
	gauxClockDivNumî©‹
 = 1,

88 .
	gauxClockDivDíomö©‹
 = 1

91 .
	gauxClockE«bÀMask
 = (
u32
)(1 << 
CSS_AUX_TSENS
),

92 .
	gauxClockSour˚
 = 
CLK_SRC_REFCLK0
,

93 .
	gauxClockDivNumî©‹
 = 1,

94 .
	gauxClockDivDíomö©‹
 = 10,

97 .
	gauxClockE«bÀMask
 = 
AUX_CLK_MASK_USB_PHY_EXTREFCLK
,

98 .
	gauxClockSour˚
 = 
CLK_SRC_PLL0
,

99 .
	gauxClockDivNumî©‹
 = 1,

100 .
	gauxClockDivDíomö©‹
 = (
uöt32_t
)(
DEFAULT_APP_CLOCK_KHZ
/
DESIRED_USB_FREQ_KHZ
)

103 .
	gauxClockE«bÀMask
 = 
AUX_CLK_MASK_USB_PHY_REF_ALT_CLK
,

104 .
	gauxClockSour˚
 = 
CLK_SRC_PLL0
,

105 .
	gauxClockDivNumî©‹
 = 1,

106 .
	gauxClockDivDíomö©‹
 = (
uöt32_t
)(
DEFAULT_APP_CLOCK_KHZ
/
DESIRED_USB_FREQ_KHZ
)

109 .
	gauxClockE«bÀMask
 = 
AUX_CLK_MASK_USB_CTRL_REF_CLK
,

110 .
	gauxClockSour˚
 = 
CLK_SRC_PLL0
,

111 .
	gauxClockDivNumî©‹
 = 1,

112 .
	gauxClockDivDíomö©‹
 = (
uöt32_t
)(
DEFAULT_APP_CLOCK_KHZ
/
DESIRED_USB_FREQ_KHZ
)

115 .
	gauxClockE«bÀMask
 = 
AUX_CLK_MASK_USB_CTRL_SUSPEND_CLK
,

116 .
	gauxClockSour˚
 = 
CLK_SRC_PLL0
,

117 .
	gauxClockDivNumî©‹
 = 1,

118 .
	gauxClockDivDíomö©‹
 = (
uöt32_t
)(
DEFAULT_APP_CLOCK_KHZ
/
DESIRED_USB_FREQ_KHZ
)

125 
	~<DrvLe⁄L2C.h
>

126 
	$À⁄L2CacheInôWrThrough
()

128 
LL2CC⁄fig_t
 
Œ2C⁄fig
;

131 
	`DrvLL2CFlushOpOnAŒLöes
(
LL2C_OPERATION_INVALIDATE
, 0);

133 
Œ2C⁄fig
.
LL2CE«bÀ
 = 1;

134 
Œ2C⁄fig
.
LL2CLockedWaysNo
 = 0;

135 
Œ2C⁄fig
.
LL2CWayToRïœ˚
 = 0;

136 
Œ2C⁄fig
.
busUßge
 = 
BUS_WRAPPING_MODE
;

137 
Œ2C⁄fig
.
hôR©e
 = 
HIT_WRAPPING_MODE
;

138 
Œ2C⁄fig
.
ª∂a˚Pﬁicy
 = 
LRU
;

139 
Œ2C⁄fig
.
wrôePﬁicy
 = 
WRITE_THROUGH
;

141 
	`DrvLL2CInôülize
(&
Œ2C⁄fig
);

142 
	}
}

148 
	$öôClocksAndMem‹y
()

154 
	`OsDrvC¥Inô
();

155 
	`OsDrvC¥O≥n
();

156 
	`OsDrvTimîInô
();

157 
	`OsDrvC¥AuxClockAºayC⁄fig
(
auxClkAŒOn
);

158 
	`À⁄L2CacheInôWrThrough
();

160 
	`DrvShaveL2CacheSëMode
(
L2CACHE_CFG
);

163 
	`SET_REG_WORD
 (
CMX_RSTN_CTRL
,0x00000000);

164 
	`SET_REG_WORD
 (
CMX_CLK_CTRL
, 0xffffffff);

165 
	`SET_REG_WORD
 (
CMX_RSTN_CTRL
,0xffffffff);

167 
	`SET_REG_WORD
(
MSS_CLK_CTRL_ADR
, 0xffffffff);

168 
	`SET_REG_WORD
(
MSS_RSTN_CTRL_ADR
, 0xffffffff);

170 
	`DrvC¥SysDevi˚A˘i⁄
(
MSS_DOMAIN
, 
ASSERT_RESET
, 
DEV_MSS_LCD
 | 
DEV_MSS_CIF0
 | 
DEV_MSS_CIF1
 | 
DEV_MSS_SIPP
);

171 
	`DrvC¥SysDevi˚A˘i⁄
(
MSS_DOMAIN
, 
DEASSERT_RESET
, -1);

172 
	`DrvC¥SysDevi˚A˘i⁄
(
CSS_DOMAIN
, 
DEASSERT_RESET
, -1);

173 
	`DrvC¥SysDevi˚A˘i⁄
(
UPA_DOMAIN
, 
DEASSERT_RESET
, -1);

175 
	`DrvC¥SèπAŒClocks
();

176 
	`SET_REG_WORD
(
MSS_SIPP_RSTN_CTRL_ADR
, 0);

177 
	`SET_REG_WORD
(
MSS_SIPP_RSTN_CTRL_ADR
, 0x3ffffff);

178 
	`SET_REG_WORD
(
MSS_SIPP_CLK_SET_ADR
, 0x3ffffff);

181 
	}
}

185 
	$öôSy°em
()

187 
	#IRQ_SRC_0
 0

	)

188 
	#IRQ_SRC_1
 1

	)

189 
	#IRQ_SRC_2
 2

	)

190 
	#IRQ_SRC_3
 3

	)

192 
	`öôClocksAndMem‹y
();

193 
	`DrvGpioIrqSrcDißbÀ
(
IRQ_SRC_0
);

194 
	`DrvGpioIrqSrcDißbÀ
(
IRQ_SRC_1
);

195 
	`DrvGpioIrqSrcDißbÀ
(
IRQ_SRC_2
);

196 
	`DrvGpioIrqSrcDißbÀ
(
IRQ_SRC_3
);

197 
	`DrvGpioInôüli£R™ge
(
brdMV0182GpioCfgDeÁu…
);

198 
	}
}

	@cdk/apps/arch/ma2x5x/cdk_FLIC_3xIMX208/leon/initSystem.h

15 #i‚de‡
INITSYSTEM_LOS_H


16 
	#INITSYSTEM_LOS_H


	)

21 
	~<brdDeföes.h
>

22 
	~<DrvC¥.h
>

27 #i‚de‡
DEFAULT_APP_CLOCK_KHZ


28 
	#DEFAULT_APP_CLOCK_KHZ
 480000

	)

31 #i‚de‡
DEFAULT_OSC_CLOCK_KHZ


32 
	#DEFAULT_OSC_CLOCK_KHZ
 
BOARD_REF_CLOCK_KHZ


	)

35 
	#BIGENDIANMODE
 (0x01000786)

	)

37 
	#APP_CSS_CLOCKS
 (–
DEV_CSS_LOS
 ) | \

38 –
DEV_CSS_LAHB_CTRL
 ) | \

39 –
DEV_CSS_APB4_CTRL
 ) | \

40 –
DEV_CSS_CPR
 ) | \

41 –
DEV_CSS_ROM
 ) | \

42 –
DEV_CSS_LOS_L2C
 ) | \

43 –
DEV_CSS_MAHB_CTRL
 ) | \

44 –
DEV_CSS_LOS_ICB
 ) | \

45 –
DEV_CSS_LOS_DSU
 ) | \

46 –
DEV_CSS_LOS_TIM
 ) | \

47 –
DEV_CSS_GPIO
 ) | \

48 –
DEV_CSS_JTAG
 ) | \

49 –
DEV_CSS_APB1_CTRL
 ) | \

50 –
DEV_CSS_AHB_DMA
 ) | \

51 –
DEV_CSS_APB3_CTRL
 ) | \

52 –
DEV_CSS_I2C0
 ) | \

53 –
DEV_CSS_I2C1
 ) | \

54 –
DEV_CSS_I2C2
 ) | \

55 –
DEV_CSS_UART
 ) | \

56 –
DEV_CSS_SPI0
 ) | \

57 –
DEV_CSS_SPI1
 ) | \

58 –
DEV_CSS_SPI2
 ) | \

59 –
DEV_CSS_SAHB_CTRL
 ) | \

60 –
DEV_CSS_MSS_MAS
 ) | \

61 –
DEV_CSS_UPA_MAS
 ) | \

62 –
DEV_CSS_DSS_APB
 ) | \

63 –
DEV_CSS_DSS_BUS
 ) | \

64 –
DEV_CSS_DSS_BUS_DXI
 ) | \

65 –
DEV_CSS_DSS_BUS_AAXI
 ) | \

66 –
DEV_CSS_DSS_BUS_MXI
 ) | \

67 –
DEV_CSS_LAHB2SHB
 ) | \

68 –
DEV_CSS_SAHB2MAHB
 ) | \

69 –
DEV_CSS_USB
 ) | \

70 –
DEV_CSS_USB_APBSLV
 ) | \

71 –
DEV_CSS_AON
 ))

	)

73 
	#APP_UPA_CLOCKS
 (–
DEV_UPA_SHAVE_L2
 ) | \

74 –
DEV_UPA_CDMA
 ) | \

75 –
DEV_UPA_BIC
 ) | \

76 –
DEV_UPA_CTRL
 ) | \

77 –
DEV_UPA_SH0
 ) | \

78 –
DEV_UPA_SH1
 ) | \

79 –
DEV_UPA_SH2
 ) | \

80 –
DEV_UPA_SH3
 ) | \

81 –
DEV_UPA_SH4
 ) | \

82 –
DEV_UPA_SH5
 ) | \

83 –
DEV_UPA_SH6
 ) | \

84 –
DEV_UPA_SH7
 ))

	)

86 
	#APP_MSS_CLOCKS
 (–
DEV_MSS_APB_SLV
 ) | \

87 –
DEV_MSS_APB2_CTRL
 ) | \

88 –
DEV_MSS_RTBRIDGE
 ) | \

89 –
DEV_MSS_RTAHB_CTRL
 ) | \

90 –
DEV_MSS_LRT
 ) | \

91 –
DEV_MSS_LRT_DSU
 ) | \

92 –
DEV_MSS_LRT_L2C
 ) | \

93 –
DEV_MSS_LRT_ICB
 ) | \

94 –
DEV_MSS_AXI_BRIDGE
 ) | \

95 –
DEV_MSS_MXI_CTRL
 ) | \

96 –
DEV_MSS_MXI_DEFSLV
 ) | \

97 –
DEV_MSS_AXI_MON
 ) | \

98 –
DEV_MSS_LCD
 ) | \

99 –
DEV_MSS_TIM
 ) | \

100 –
DEV_MSS_AMC
 ) | \

101 –
DEV_MSS_SIPP
 ))

	)

103 
	#APP_SIPP_CLOCKS
 (–
DEV_SIPP_SIGMA
 ) | \

104 –
DEV_SIPP_LSC
 ) | \

105 –
DEV_SIPP_RAW
 ) | \

106 –
DEV_SIPP_DBYR
 ) | \

107 –
DEV_SIPP_DOGL
 ) | \

108 –
DEV_SIPP_LUMA
 ) | \

109 –
DEV_SIPP_SHARPEN
 ) | \

110 –
DEV_SIPP_CGEN
 ) | \

111 –
DEV_SIPP_MED
 ) | \

112 –
DEV_SIPP_CHROMA
 ) | \

113 –
DEV_SIPP_CC
 ) | \

114 –
DEV_SIPP_LUT
 ) | \

115 –
DEV_SIPP_UPFIRDN0
 ) | \

116 –
DEV_SIPP_UPFIRDN1
 ) | \

117 –
DEV_SIPP_UPFIRDN2
 ) | \

118 –
DEV_SIPP_MIPI_RX0
 ) | \

119 –
DEV_SIPP_MIPI_RX1
 ) | \

120 –
DEV_SIPP_MIPI_RX2
 ) | \

121 –
DEV_SIPP_MIPI
 ) | \

122 –
DEV_SIPP_SIPP_ABPSLV
 ))

	)

132 
öôClocksAndMem‹y
();

134 
öôSy°em
();

	@cdk/apps/arch/ma2x5x/cdk_FLIC_3xIMX208/leon/main.c

35 
	~<°döt.h
>

36 
	~<oßl/oßl_°dlib.h
>

37 
	~<oßl/oßl_°rög.h
>

38 
	~<oßl/oßl_time.h
>

39 
	~<utûs/mms_debug.h
>

41 
	~<vîsi⁄_öfo.h
>

45 
	~<∂©f‹m/öc/∂©f‹m.h
>

47 
	~<guzzi_evít/ö˛ude/guzzi_evít.h
>

48 
	~<guzzi_evít_globÆ/ö˛ude/guzzi_evít_globÆ.h
>

50 
	~<dç/dç_£rvî_defs.h
>

52 
	~<comp⁄íts/ˇmîa/vˇmîa_iÁ˚/vút_cm/öc/vút_cm.h
>

54 
	~"öôSy°em.h
"

55 
	~"ˇmîa_c⁄åﬁ.h
"

56 
	~"≠p_guzzi_comm™d_•i.h
"

57 
	~"≠p_guzzi_comm™d_dbg.h
"

59 
	~"£ndOutApi.h
"

61 
	gdo_nŸ_u£_i2c_ch_0
 = 0;

63 
dç_£rvî_hndl_t
 
	gdç_§v_hndl
;

64 
uöt8_t
 
ext_dç_d©aba£
[];

65 
uöt8_t
 
ext_dç_d©aba£_íd
[];

66 
uöt8_t
 
	gdç_dtb_checked
 = 0;

68 
mmsdbg_deföe_v¨übÀ
(

69 
vdl_guzzi_i2c
,

70 
DL_DEFAULT
,

75 
	#MMSDEBUGLEVEL
 
	`mmsdbg_u£_v¨übÀ
(
vdl_guzzi_i2c
)

	)

77 #i‡
INPUT_UNIT_IS_USB


78 
	#APP_GUZZI_COMMAND_WAIT_TIMEOUT
 
≠p_guzzi_comm™d_waô_timeout_usb


	)

80 
	#APP_GUZZI_COMMAND_WAIT_TIMEOUT
 
≠p_guzzi_comm™d_waô_timeout_•i


	)

88 
∂©f‹m_drv_powî_öô
();

89 
∂©f‹m_drv_powî_deöô
();

90 
∂©f‹m_ˇm_Àd_1
(
a˘i⁄
);

92 
	$guzzi_ˇmîa3_ˇ±uª_ªsu…__x11_c⁄figuª_°ªams
(

93 
ˇmîa_id
,

94 *
°ªams


97 
	`UNUSED
(
ˇmîa_id
);

98 
	`UNUSED
(
°ªams
);

99 
	}
}

101 
	$guzzi_ˇmîa3_ˇ±uª_ªsu…
(

102 
ˇmîa_id
,

103 
°ªam_id
,

104 
‰ame_numbî
,

105 *
d©a
,

106 
d©a_size


109 
	`UNUSED
(
ˇmîa_id
);

110 
	`UNUSED
(
°ªam_id
);

111 
	`UNUSED
(
‰ame_numbî
);

112 
	`UNUSED
(
d©a
);

113 
	`UNUSED
(
d©a_size
);

114 
	}
}

121 
	$live_tunög_≠∂y
 (
≠p_guzzi_comm™d_t
 *
comm™d
)

123 
uöt8_t
 *
de°
 = 
ext_dç_d©aba£
 + 
comm™d
->
live_tunög
.
off£t
;

124 
uöt8_t
 *
§c
 = 
comm™d
->
live_tunög
.
d©a
;

126 i‡((
de°
 + 
comm™d
->
live_tunög
.
size
Ë> 
ext_dç_d©aba£_íd
) {

127 
	`mmsdbg
(
DL_ERROR
, "DTP offset: %d + size: %dÉxceeded: %d",

128 ()
comm™d
->
live_tunög
.
size
,

129 ()
comm™d
->
live_tunög
.
off£t
,

130 ()(
ext_dç_d©aba£_íd
 - 
ext_dç_d©aba£
)

135 i‡(!
dç_dtb_checked
) {

136 
	`mmsdbg
(
DL_ERROR
, "DTP db isÇot checked");

140 
comm™d
->
live_tunög
.
size
--) {

141 *
de°
++ = *
§c
++;

143 
	}
}

151 
	$live_tunög_u∆ock
 (
≠p_guzzi_comm™d_t
 *
comm™d
)

153 
dç_hndl_t
 
hdç
;

154 
dç_Àaf_d©a_t
 
Àaf
;

155 
dçdb_°©ic_comm⁄_t
 
°©ic_comm⁄
;

156 
dçdb_°©ic_¥iv©e_t
 
°©ic_¥iv©e
;

157 
dçdb_dy«mic_comm⁄_t
 
dcomm
;

158 
dçdb_dy«mic_¥iv©e_t
 
d¥v
;

159 
dç_out_d©a_t
 *
dç_d©a
;

161 
	`oßl_mem£t
(&
°©ic_comm⁄
, 0x00, (static_common));

162 
	`oßl_mem£t
(&
°©ic_¥iv©e
, 0x00, (static_private));

163 
	`oßl_mem£t
(&
dcomm
, 0x00, (dcomm));

164 
	`oßl_mem£t
(&
d¥v
, 0x00, (dprv));

166 if(
	`dç§v_gë_hndl
(
dç_§v_hndl
,

167 
DTP_DB_ID_CHECK_SUM
,

170 
dç_∑øm_‹dî
,

171 &
hdç
, &
Àaf
))

173 
	`mmsdbg
(
DL_ERROR
, "DTP_DB_ID_CHECK_ID - can't get DTP client handle");

174 
EXIT_1
;

177 
	`dç§v_¥e_¥o˚ss
(
hdç
, &
°©ic_comm⁄
, &
°©ic_¥iv©e
);

178 i‡(
	`dç§v_¥o˚ss
(
hdç
, &
dcomm
, &
d¥v
, (**)&
dç_d©a
))

180 
	`mmsdbg
(
DL_ERROR
, "DTP_DB_ID_CHECK_SUM -ÖrocessÉrror");

181 
EXIT_2
;

184 i‡(
DTP_DAT_TYPE_FIXED
 !
dç_d©a
->
d©a_ty≥_id
)

186 
	`mmsdbg
(
DL_ERROR
, "DTP_DB_ID_CHECK_SUM - wrong dataÅype");

187 
EXIT_2
;

190 i‡(
	`oßl_°rcmp
(
dç_d©a
->
d_fixed
.
p_d©a0
, (c⁄° *)
comm™d
->
live_tunög
.
d©a
))

192 
	`mmsdbg
(
DL_ERROR
, "DTP_DB_ID_CHECK_SUM - mismatch");

193 
EXIT_2
;

196 
dç_dtb_checked
 = 1;

198 
EXIT_2
:

199 
	`dç§v_‰ì_hndl
(
hdç
);

200 
EXIT_1
:

202 
	}
}

209 
	$¥ofûe_ªady_cb
(

210 
¥ofûe_t
 *
¥ofûe
,

211 *
¥v
,

212 *
buf„r
,

213 
buf„r_size


216 
	`UNUSED
(
¥v
);

217 
	`UNUSED
(
buf„r
);

218 
	`UNUSED
(
buf„r_size
);

221 
	`PROFILE_RELEASE_READY
(
buf„r
);

222 
	}
}

229 
	$≠p_guzzi_comm™d_ˇŒback
(

230 *
≠p_¥iv©e
,

231 
≠p_guzzi_comm™d_t
 *
comm™d


234 
	`UNUSED
(
≠p_¥iv©e
);

236 
	`mmsdbg
(
DL_ERROR
, "comm™d->id:%d", ()
comm™d
->
id
);

238 
comm™d
->
id
) {

239 
APP_GUZZI_COMMAND__LIVE_TUNING_UNLOCK
:

240 
	`live_tunög_u∆ock
(
comm™d
);

242 
APP_GUZZI_COMMAND__LIVE_TUNING_APPLY
:

243 
	`live_tunög_≠∂y
(
comm™d
);

245 
APP_GUZZI_COMMAND__OUTPUT_CONTROL
:

254 i‡(
	`ˇmîa_c⁄åﬁ_is_a˘ive
(
comm™d
->
ˇm
.
id
))

256 i‡(
APP_GUZZI_COMMAND__CAM_START
 =
comm™d
->
id
) {

257 
	`mmsdbg
(
DL_ERROR
, "Skùpög comm™d START f‹áÃódyá˘iv©ed camî®%d", ()
comm™d
->
ˇm
.
id
);

261 i‡(
APP_GUZZI_COMMAND__CAM_START
 !
comm™d
->
id
) {

262 
	`mmsdbg
(
DL_ERROR
, "Skùpög comm™d %d f‹ N⁄á˘ivêˇmî®%d", ()
comm™d
->
id
, ()comm™d->
ˇm
.id);

266 
comm™d
->
id
) {

267 
APP_GUZZI_COMMAND__NOP
:

270 
APP_GUZZI_COMMAND__CAM_START
:

271 
	`PROFILE_ADD
(
PROFILE_ID_EXT_START_CMD
, 0, 0);

272 
	`mmsdbg
(
DL_ERROR
, "comm™d \"%d %d\" sít\n", ()
comm™d
->
id
, ()comm™d->
ˇm
.id);

273 
	`ˇmîa_c⁄åﬁ_°¨t
(
comm™d
->
ˇm
.
id
);

275 
APP_GUZZI_COMMAND__CAM_STOP
:

276 
	`PROFILE_ADD
(
PROFILE_ID_EXT_STOP_CMD
, 0, 0);

277 
	`ˇmîa_c⁄åﬁ_°›
(
comm™d
->
ˇm
.
id
);

278 
	`mmsdbg
(
DL_ERROR
, "comm™d \"%d %d\" sít\n", ()
comm™d
->
id
, ()comm™d->
ˇm
.id);

280 
APP_GUZZI_COMMAND__CAM_CAPTURE
:

281 
	`PROFILE_ADD
(
PROFILE_ID_EXT_CAPTURE_CMD
, 0, 0);

282 
	`ˇmîa_c⁄åﬁ_ˇ±uª
(
comm™d
->
ˇm
.
id
);

283 
	`mmsdbg
(
DL_ERROR
, "comm™d \"%d %d\" sít\n", ()
comm™d
->
id
, ()comm™d->
ˇm
.id);

285 
APP_GUZZI_COMMAND__CAM_LENS_MOVE
:

286 
	`PROFILE_ADD
(
PROFILE_ID_EXT_LENS_MOVE
, 0, 0);

287 
	`ˇmîa_c⁄åﬁ_Àns_move
(

288 
comm™d
->
ˇm
.
id
,

289 
comm™d
->
ˇm
.
Àns_move
.
pos


291 
	`mmsdbg
(
DL_ERROR
, "command \"%d %d %d\" sent\n",

292 ()
comm™d
->
id
, ()comm™d->
ˇm
.id, ()comm™d->ˇm.
Àns_move
.
pos
);

294 
APP_GUZZI_COMMAND__CAM_AF_TRIGGER
:

295 
	`PROFILE_ADD
(
PROFILE_ID_EXT_LENS_MOVE
, 0, 0);

296 
	`ˇmîa_c⁄åﬁ_focus_åiggî
(
comm™d
->
ˇm
.
id
);

297 
	`mmsdbg
(
DL_ERROR
, "comm™d \"%d %d\" sít\n", ()
comm™d
->
id
, ()comm™d->
ˇm
.id);

299 
APP_GUZZI_COMMAND__CAM_AE_MANUAL
:

300 
	`ˇmîa_c⁄åﬁ_´_m™uÆ
(

301 
comm™d
->
ˇm
.
id
,

302 
comm™d
->
ˇm
.
´_m™uÆ
.
exp_us
,

303 
comm™d
->
ˇm
.
´_m™uÆ
.
£nsôivôy_iso
,

304 
comm™d
->
ˇm
.
´_m™uÆ
.
‰ame_duøti⁄_us


306 
	`mmsdbg
(
DL_ERROR
, "command \"%d %d %d %d %d\" sent\n",

307 ()
comm™d
->
id
,

308 ()
comm™d
->
ˇm
.
id
,

309 ()
comm™d
->
ˇm
.
´_m™uÆ
.
exp_us
,

310 ()
comm™d
->
ˇm
.
´_m™uÆ
.
£nsôivôy_iso
,

311 ()
comm™d
->
ˇm
.
´_m™uÆ
.
‰ame_duøti⁄_us
);

313 
APP_GUZZI_COMMAND__CAM_AE_AUTO
:

314 
	`ˇmîa_c⁄åﬁ_´_auto
(

315 
comm™d
->
ˇm
.
id
,

316 
CAMERA_CONTROL__AE_AUTO__FLASH_MODE__AUTO


318 
	`mmsdbg
(
DL_ERROR
, "comm™d \"%d %d\" sít\n", ()
comm™d
->
id
, ()comm™d->
ˇm
.id);

320 
APP_GUZZI_COMMAND__CAM_AWB_MODE
:

321 
	`ˇmîa_c⁄åﬁ_awb_mode
(

322 
comm™d
->
ˇm
.
id
,

323 
comm™d
->
ˇm
.
awb_mode
.
mode


325 
	`mmsdbg
(
DL_ERROR
, "command \"%d %d %d\" sent\n",

326 ()
comm™d
->
id
, ()comm™d->
ˇm
.id, ()comm™d->ˇm.
awb_mode
.
mode
);

328 
APP_GUZZI_COMMAND__CAM_SCENE_MODE
:

329 
	`ˇmîa_c⁄åﬁ_s˚√_mode
(

330 
comm™d
->
ˇm
.
id
,

331 
comm™d
->
ˇm
.
s˚√_mode
.
ty≥


333 
	`mmsdbg
(
DL_ERROR
, "command \"%d %d %d\" sent\n",

334 ()
comm™d
->
id
, ()comm™d->
ˇm
.id, ()comm™d->ˇm.
s˚√_mode
.
ty≥
);

336 
APP_GUZZI_COMMAND__CAM_ANTIBANDING_MODE
:

337 
	`ˇmîa_c⁄åﬁ_™tib™dög_mode
(

338 
comm™d
->
ˇm
.
id
,

339 
comm™d
->
ˇm
.
™tib™dög_mode
.
ty≥


341 
	`mmsdbg
(
DL_ERROR
, "command \"%d %d %d\" sent\n",

342 ()
comm™d
->
id
, ()comm™d->
ˇm
.id, ()comm™d->ˇm.
™tib™dög_mode
.
ty≥
);

344 
APP_GUZZI_COMMAND__CAM_AE_LOCK
:

345 
	`ˇmîa_c⁄åﬁ_´_lock_mode
(

346 
comm™d
->
ˇm
.
id
,

347 
comm™d
->
ˇm
.
´_lock_mode
.
ty≥


349 
	`mmsdbg
(
DL_ERROR
, "command \"%d %d %d\" sent\n",

350 ()
comm™d
->
id
, ()comm™d->
ˇm
.id, ()comm™d->ˇm.
´_lock_mode
.
ty≥
);

352 
APP_GUZZI_COMMAND__CAM_AE_TARGET_FPS_RANGE
:

353 
	`ˇmîa_c⁄åﬁ_´_èrgë_Âs_ønge
(

354 
comm™d
->
ˇm
.
id
,

355 
comm™d
->
ˇm
.
´_èrgë_Âs_ønge
.
mö_Âs
,

356 
comm™d
->
ˇm
.
´_èrgë_Âs_ønge
.
max_Âs


358 
	`mmsdbg
(
DL_ERROR
, "comm™d \"%d %d %d %d\" sít\n", ()
comm™d
->
id
,

359 ()
comm™d
->
ˇm
.
id
, ()comm™d->ˇm.
´_èrgë_Âs_ønge
.
mö_Âs
,

360 ()
comm™d
->
ˇm
.
´_èrgë_Âs_ønge
.
max_Âs
);

362 
APP_GUZZI_COMMAND__CAM_AWB_LOCK
:

363 
	`ˇmîa_c⁄åﬁ_awb_lock_mode
(

364 
comm™d
->
ˇm
.
id
,

365 
comm™d
->
ˇm
.
awb_lock_c⁄åﬁ
.
ty≥


367 
	`mmsdbg
(
DL_ERROR
, "command \"%d %d %d\" sent\n",

368 ()
comm™d
->
id
, ()comm™d->
ˇm
.id, ()comm™d->ˇm.
awb_lock_c⁄åﬁ
.
ty≥
);

370 
APP_GUZZI_COMMAND__CAM_CAPTURE_INTRENT
:

371 
	`ˇmîa_c⁄åﬁ_ˇ±uª_öã¡
(

372 
comm™d
->
ˇm
.
id
,

373 
comm™d
->
ˇm
.
ˇ±uª_öã¡
.
mode


375 
	`mmsdbg
(
DL_ERROR
, "command \"%d %d %d\" sent\n",

376 ()
comm™d
->
id
, ()comm™d->
ˇm
.id, ()comm™d->ˇm.
ˇ±uª_öã¡
.
mode
);

378 
APP_GUZZI_COMMAND__CAM_CONTROL_MODE
:

379 
	`ˇmîa_c⁄åﬁ_mode
(

380 
comm™d
->
ˇm
.
id
,

381 
comm™d
->
ˇm
.
c⁄åﬁ_mode
.
ty≥


383 
	`mmsdbg
(
DL_ERROR
, "command \"%d %d %d\" sent\n",

384 ()
comm™d
->
id
, ()comm™d->
ˇm
.id, ()comm™d->ˇm.
c⁄åﬁ_mode
.
ty≥
);

386 
APP_GUZZI_COMMAND__CAM_FRAME_DURATION
:

387 
	`ˇmîa_c⁄åﬁ_‰ame_duøti⁄
(

388 
comm™d
->
ˇm
.
id
,

389 
comm™d
->
ˇm
.
‰ame_duøti⁄
.
vÆ


391 
	`mmsdbg
(
DL_ERROR
, "command \"%d %d %d\" sent\n",

392 ()
comm™d
->
id
, ()comm™d->
ˇm
.id, ()comm™d->ˇm.
‰ame_duøti⁄
.
vÆ
);

394 
APP_GUZZI_COMMAND__CAM_AE_EXPOSURE_COMPENSATION
:

395 
	`ˇmîa_c⁄åﬁ_exp_com≥nßti⁄
(

396 
comm™d
->
ˇm
.
id
,

397 
comm™d
->
ˇm
.
exposuª_com≥nßti⁄
.
vÆ


399 
	`mmsdbg
(
DL_ERROR
, "command \"%d %d %d\" sent\n",

400 ()
comm™d
->
id
, ()comm™d->
ˇm
.id, ()comm™d->ˇm.
exposuª_com≥nßti⁄
.
vÆ
);

402 
APP_GUZZI_COMMAND__CAM_SENSITIVITY
:

403 
	`ˇmîa_c⁄åﬁ_£nsôivôy
(

404 
comm™d
->
ˇm
.
id
,

405 
comm™d
->
ˇm
.
£nsôivôy
.
iso_vÆ


407 
	`mmsdbg
(
DL_ERROR
, "command \"%d %d %d\" sent\n",

408 ()
comm™d
->
id
, ()comm™d->
ˇm
.id, ()comm™d->ˇm.
£nsôivôy
.
iso_vÆ
);

410 
APP_GUZZI_COMMAND__CAM_EFFECT_MODE
:

411 
	`ˇmîa_c⁄åﬁ_ef„˘_mode
(

412 
comm™d
->
ˇm
.
id
,

413 
comm™d
->
ˇm
.
ef„˘_mode
.
ty≥


415 
	`mmsdbg
(
DL_ERROR
, "command \"%d %d %d\" sent\n",

416 ()
comm™d
->
id
, ()comm™d->
ˇm
.id, ()comm™d->ˇm.
ef„˘_mode
.
ty≥
);

418 
APP_GUZZI_COMMAND__CAM_AF_MODE
:

419 
	`ˇmîa_c⁄åﬁ_af_mode
(

420 
comm™d
->
ˇm
.
id
,

421 
comm™d
->
ˇm
.
af_mode
.
ty≥


423 
	`mmsdbg
(
DL_ERROR
, "command \"%d %d %d\" sent\n",

424 ()
comm™d
->
id
, ()comm™d->
ˇm
.id, ()comm™d->ˇm.
af_mode
.
ty≥
);

426 
APP_GUZZI_COMMAND__CAM_NOISE_REDUCTION_STRENGTH
:

427 
	`ˇmîa_c⁄åﬁ_noi£_ªdu˘i⁄_°ªngth
(

428 
comm™d
->
ˇm
.
id
,

429 
comm™d
->
ˇm
.
noi£_ªdu˘i⁄_°ªngth
.
vÆ


431 
	`mmsdbg
(
DL_ERROR
, "command \"%d %d %d\" sent\n",

432 ()
comm™d
->
id
, ()comm™d->
ˇm
.id, ()comm™d->ˇm.
noi£_ªdu˘i⁄_°ªngth
.
vÆ
);

434 
APP_GUZZI_COMMAND__CAM_SATURATION
:

435 
	`ˇmîa_c⁄åﬁ_ßtuøti⁄
(

436 
comm™d
->
ˇm
.
id
,

437 
comm™d
->
ˇm
.
ßtuøti⁄
.
vÆ


439 
	`mmsdbg
(
DL_ERROR
, "command \"%d %d %d\" sent\n",

440 ()
comm™d
->
id
, ()comm™d->
ˇm
.id, ()comm™d->ˇm.
ßtuøti⁄
.
vÆ
);

442 
APP_GUZZI_COMMAND__CAM_BRIGHTNESS
:

443 
	`ˇmîa_c⁄åﬁ_brighäess
(

444 
comm™d
->
ˇm
.
id
,

445 
comm™d
->
ˇm
.
brighäess
.
vÆ


447 
	`mmsdbg
(
DL_ERROR
, "command \"%d %d %d\" sent\n",

448 ()
comm™d
->
id
, ()comm™d->
ˇm
.id, ()comm™d->ˇm.
brighäess
.
vÆ
);

450 
APP_GUZZI_COMMAND__CAM_FORMAT
:

451 
	`ˇmîa_c⁄åﬁ_f‹m©
(

452 
comm™d
->
ˇm
.
id
,

453 
comm™d
->
ˇm
.
f‹m©
.
vÆ


455 
	`mmsdbg
(
DL_ERROR
, "command \"%d %d %d\" sent\n",

456 ()
comm™d
->
id
, ()comm™d->
ˇm
.id, ()comm™d->ˇm.
f‹m©
.
vÆ
);

458 
APP_GUZZI_COMMAND__CAM_RESOLUTION
:

459 
	`ˇmîa_c⁄åﬁ_ªsﬁuti⁄
(

460 
comm™d
->
ˇm
.
id
,

461 
comm™d
->
ˇm
.
ªsﬁuti⁄
.
width
,

462 
comm™d
->
ˇm
.
ªsﬁuti⁄
.
height


464 
	`mmsdbg
(
DL_ERROR
, "comm™d \"%d %d %d %d\" sít\n", ()
comm™d
->
id
,

465 ()
comm™d
->
ˇm
.
id
, ()comm™d->ˇm.
ªsﬁuti⁄
.
width
,

466 ()
comm™d
->
ˇm
.
ªsﬁuti⁄
.
height
);

468 
APP_GUZZI_COMMAND__CAM_SHARPNESS
:

469 
	`ˇmîa_c⁄åﬁ_sh¨≤ess
(

470 
comm™d
->
ˇm
.
id
,

471 
comm™d
->
ˇm
.
sh¨≤ess
.
vÆ


473 
	`mmsdbg
(
DL_ERROR
, "command \"%d %d %d\" sent\n",

474 ()
comm™d
->
id
, ()comm™d->
ˇm
.id, ()comm™d->ˇm.
sh¨≤ess
.
vÆ
);

477 
	`mmsdbg
(
DL_ERROR
, "Unknow¿Aµ GUZZI Comm™d: %d", ()
comm™d
->
id
);

479 
	}
}

487 
	$≠p_guzzi_comm™d_waô_timeout_•i
 (*
≠p_¥iv©e
,

488 
≠p_guzzi_comm™d_ˇŒback_t
 *
ˇŒback
,

489 
uöt32_t
 
timeout_ms
)

491  
	`≠p_guzzi_comm™d_•i_waô_timeout
(
≠p_¥iv©e
, 
ˇŒback
, 
timeout_ms
)

492 + 
	`≠p_guzzi_comm™d_dbg_≥ek
(
≠p_¥iv©e
, 
ˇŒback
);

493 
	}
}

496 
oßl_£m
 *
	g≠p_guzzi_comm™d_£m
;

498 
≠p_guzzi_comm™d_t
 *
•i_comm™d_to_≠p_guzzi_comm™d
◊µ_guzzi_comm™d_à*
comm™d
, *
comm™d_•i
);

500 
	#MAX_APP_GUZZI_COMMANDS
 8

	)

501 
≠p_guzzi_comm™d_t
 
	g≠p_guzzi_comm™ds
[
MAX_APP_GUZZI_COMMANDS
];

502 
	g≠p_guzzi_comm™d_rd
 = 0, 
	g≠p_guzzi_comm™d_wr
 = 0;

504 
	$≠p_guzzi_comm™d_gë_wr_idx
()

506 
idx
 = 
≠p_guzzi_comm™d_wr
 + 1;

507 i‡(
idx
 >
MAX_APP_GUZZI_COMMANDS
)

508 
idx
 = 0;

509 i‡(
≠p_guzzi_comm™d_rd
 =
idx
)

511 
	`mmsdbg
(
DL_ERROR
, "Error: command queue overflow\n");

514  
idx
;

515 
	}
}

517 
	$≠p_guzzi_comm™d_commô_wr_idx
(
idx
)

519 
≠p_guzzi_comm™d_wr
 = 
idx
;

520 
	}
}

523 
	$≠p_guzzi_comm™d_gë_rd_idx
()

525 
idx
 = 
≠p_guzzi_comm™d_rd
;

527 i‡(
≠p_guzzi_comm™d_wr
 =
idx
)

529 
	`mmsdbg
(
DL_ERROR
, "Error: command queue overflow\n");

532 
idx
++;

533 i‡(
idx
 =
MAX_APP_GUZZI_COMMANDS
)

534 
idx
 = 0;

536  
idx
;

537 
	}
}

539 
	$≠p_guzzi_comm™d_commô_rd_idx
(
idx
)

541 
≠p_guzzi_comm™d_rd
 = 
idx
;

542 
	}
}

545 
	$≠p_guzzi_comm™d_execuã
(
uöt8_t
 *
ö_comm™d
)

547 
idx
;

548 
idx
 = 
	`≠p_guzzi_comm™d_gë_wr_idx
();

549 i‡(
idx
 < 0)

552 
	`•i_comm™d_to_≠p_guzzi_comm™d
(&
≠p_guzzi_comm™ds
[
idx
], (*)
ö_comm™d
);

553 
	`≠p_guzzi_comm™d_commô_wr_idx
(
idx
);

554 
	`oßl_£m_po°
(
≠p_guzzi_comm™d_£m
);

555 
	}
}

558 
	$≠p_guzzi_comm™d_waô_timeout_usb
(*
≠p_¥iv©e
,

559 
≠p_guzzi_comm™d_ˇŒback_t
 *
ˇŒback
,

560 
uöt32_t
 
timeout_ms
)

562 
rd_idx
;

563 
îr
;

565 
	`≠p_guzzi_comm™d_dbg_≥ek
(
≠p_¥iv©e
, 
ˇŒback
);

567 
îr
 = 
	`oßl_£m_waô_timeout
(
≠p_guzzi_comm™d_£m
, 
timeout_ms
);

568 i‡(
îr
)

574 
rd_idx
 = 
	`≠p_guzzi_comm™d_gë_rd_idx
();

576 i‡(
rd_idx
 < 0)

579 
	`ˇŒback
(
≠p_¥iv©e
, &
≠p_guzzi_comm™ds
[
rd_idx
]);

581 
	`≠p_guzzi_comm™d_commô_rd_idx
(
rd_idx
);

583  
îr
;

584 
	}
}

591 
	$maö
(
¨gc
, **
¨gv
)

593 
	`UNUSED
(
¨gc
);

594 
	`UNUSED
(
¨gv
);

596 
	`vîsi⁄_öfo_öô
();

598 
	`öôSy°em
();

600 
	`oßl_öô
();

603 
	`dç§v_¸óã
(&
dç_§v_hndl
);

604 
	`dç§v_imp‹t_db
(

605 
dç_§v_hndl
,

606 
ext_dç_d©aba£
,

607 
ext_dç_d©aba£_íd
 - 
ext_dç_d©aba£


609 
	`PROFILE_INIT
(4096, 2, 
¥ofûe_ªady_cb
, 
NULL
);

611 
	`guzzi_∂©f‹m_öô
();

612 
	`guzzi_evít_globÆ_˘ª©e
();

614 
	`£ndOutCª©e
(&
£ndOut_öôCfg
);

616 
	`vút_cm_dëe˘
();

619 
	`≠p_guzzi_comm™d_•i_öô
();

621 
≠p_guzzi_comm™d_£m
 = 
	`oßl_£m_¸óã
(0);

623 
	`∂©f‹m_drv_powî_öô
();

624 
	`∂©f‹m_ˇm_Àd_1
(0);

627 
	`APP_GUZZI_COMMAND_WAIT_TIMEOUT
(

628 
NULL
,

629 
≠p_guzzi_comm™d_ˇŒback
,

634 
	`∂©f‹m_ˇm_Àd_1
(1);

635 
	`∂©f‹m_drv_powî_deöô
();

637 
	`oßl_£m_de°roy
(
≠p_guzzi_comm™d_£m
);

639 
	}
}

	@cdk/apps/arch/ma2x5x/cdk_FLIC_3xIMX208/leon/sendout_config.c

20 
	~"mv_ty≥s.h
"

22 
	~"£ndOutApi.h
"

23 #ifde‡
OUTPUT_UNIT_IS_HDMI


24 
	~"LcdCEA1080p60.h
"

29 #ifde‡
OUTPUT_UNIT_IS_MIPI


30 
	#MIPI_TX_NUM_LANES
 2

	)

31 
	#MIPI_TX_CLOCK
 400

	)

32 
	#MIPI_TX_USE_IRQ
 1

	)

35 #ifde‡
OUTPUT_UNIT_IS_USB


36 #i‚de‡
DISABLE_LEON_DCACHE


37 
	#USBPUMP_MDK_CACHE_ENABLE
 1

	)

39 
	#USBPUMP_MDK_CACHE_ENABLE
 0

	)

45 
HdmiCfg_t
 
	ghdmiInôCfg
 =

47 #ifde‡
OUTPUT_UNIT_IS_HDMI


48 
NULL
,

49 
NULL
,

50 &
lcdS≥c1080p60


52 
NULL


56 
MùiCfg_t
 
	gmùiInôCfg
 =

58 #ifde‡
OUTPUT_UNIT_IS_MIPI


59 .
˘æNo
 = 
MIPI_CTRL_5
,

60 .
	gmss_devi˚
 = 
DRV_MSS_LCD
,

61 .
	gnum_œ√s
 = 
MIPI_TX_NUM_LANES
,

62 .
	gtx_˛ock
 = 
MIPI_TX_CLOCK
,

63 .
	gªf_˛ock_kHz
 = 12000,

64 .
	gu£_úq
 = 
MIPI_TX_USE_IRQ


66 
NULL


70 #ifde‡
OUTPUT_UNIT_IS_USB


71 
osDrvUsbPhyP¨am_t
 
	göôP¨am
 =

73 .
íabÀOtgBlock
 = 
USB_PHY_OTG_DISABLED
,

74 .
	gu£Exã∫ÆClock
 = 0,

75 .
	gfSñ
 = 
USB_REFCLK_MHZ
,

76 .
	gªfClkSñ0
 = 
USB_SUPER_SPEED_CLK_CONFIG
,

77 .
	gf‹˚HsO∆y
 = 
USB_PHY_HS_ONLY_OFF


80 
USBPUMP_APPLICATION_RTEMS_CONFIGURATION
 
	gsg_D©aPump_AµC⁄fig
 =

81 
USBPUMP_APPLICATION_RTEMS_CONFIGURATION_INIT_V1
(

83  
NULL
,

88  
NULL
,

89  
NULL
,

90  
USBPUMP_MDK_CACHE_ENABLE
,

91  
UDMASK_ANY
 | 
UDMASK_ERRORS
 );

93 
≠p_guzzi_comm™d_execuã
(
uöt8_t
 *
ö_comm™d
);

97 
UsbCfg_t
 
	gusbInôCfg
 =

99 #ifde‡
OUTPUT_UNIT_IS_USB


100 &
öôP¨am
,

101 &
sg_D©aPump_AµC⁄fig
,

102 &
≠p_guzzi_comm™d_execuã


104 
NULL


108 
SídOutInôCfg_t
 
	g£ndOut_öôCfg
 =

110 &
hdmiInôCfg
,

111 &
mùiInôCfg
,

112 &
usbInôCfg


	@cdk/apps/arch/ma2x5x/cdk_FLIC_3xIMX208/leon/sendout_config.h

16 #i‚de‡
SENDOUT_CONFIG_H


17 
	#SENDOUT_CONFIG_H


	)

22 
	~"mv_ty≥s.h
"

24 #ifde‡
OUTPUT_UNIT_IS_HDMI


25 #ifde‡
MV0212


26 
	~"MV0212.h
"

28 
	~"Bﬂrd182Api.h
"

30 
	~"LcdApi.h
"

31 
	~"DrvI2cMa°î.h
"

32 
	~"DrvADV7513.h
"

35 #ifde‡
OUTPUT_UNIT_IS_MIPI


36 
	~<DrvMùiDeföes.h
>

37 
	~"DrvMss.h
"

40 #ifde‡
OUTPUT_UNIT_IS_USB


41 
	~"OsDrvUsbPhy.h
"

42 
	~"usbpumpdebug.h
"

43 
	~"usbpump_≠∂iˇti⁄_πems_≠i.h
"

50 #i‚de‡
APP_CONFIGURATION


51 #w¨nög 
SEND
 
OUT
: 
USE
 
DEFAULT
 
DEFINITIONS


53 #ifde‡
OUTPUT_UNIT_IS_HDMI


55 
	#SEND_OUT_MAX_WIDTH
 (4300)

	)

56 
	#SEND_OUT_MAX_HEIGHT
 (3200)

	)

60 #i‡
deföed
(
OUTPUT_UNIT_IS_USB
Ë|| deföed(
OUTPUT_UNIT_IS_MIPI
)

63 
	#SEND_OUT_MAX_WIDTH
 (4300)

	)

64 
	#SEND_OUT_MAX_HEIGHT
 (3200)

	)

66 
	#USE_STATIC_HEADER


	)

67 
	#SEND_OUT_HEADER_HEIGHT
 (2)

	)

71 #ifde‡
OUTPUT_UNIT_IS_HDMI


72 
	#SEND_OUT_MAX_WIDTH
 (3842)

	)

73 
	#SEND_OUT_MAX_HEIGHT
 (2200)

	)

76 #i‡
deföed
(
OUTPUT_UNIT_IS_USB
Ë|| deföed(
OUTPUT_UNIT_IS_MIPI
)

79 
	#SEND_OUT_MAX_WIDTH
 (4300)

	)

80 
	#SEND_OUT_MAX_HEIGHT
 (3200)

	)

82 
	#USE_STATIC_HEADER


	)

83 
	#SEND_OUT_HEADER_HEIGHT
 (2)

	)

90 #ifde‡
OUTPUT_UNIT_IS_HDMI


91 
ADV7513C⁄tfigMode_t
 
	madvCfgMode
;

92 
I2CM_Devi˚
 **
	mi2c_dev_hndl
;

93 
LCDDi•œyCfg
 *
	mlcdCfg
;

95 *
	mdummy
;

97 } 
	tHdmiCfg_t
;

101 #ifde‡
OUTPUT_UNIT_IS_MIPI


102 
eDrvMùiCålNo
 
	m˘æNo
;

103 
drvMssDevi˚Ty≥
 
	mmss_devi˚
;

104 
	mnum_œ√s
;

105 
	mtx_˛ock
;

106 
u32
 
	mªf_˛ock_kHz
;

107 
	mu£_úq
;

109 *
	mdummy
;

111 } 
	tMùiCfg_t
;

114 (*
	tUsbSíd_I≈utCålCÆlback_Ty≥
)(
	tuöt8_t
 *);

118 #ifde‡
OUTPUT_UNIT_IS_USB


119 
osDrvUsbPhyP¨am_t
 *
phyP¨amInô
;

120 
USBPUMP_APPLICATION_RTEMS_CONFIGURATION
 *
d©aPumpCfgInô
;

121 
UsbSíd_I≈utCålCÆlback_Ty≥
 
cb_fun˘i⁄
;

123 *
dummy
;

125 } 
	tUsbCfg_t
;

	@cdk/apps/arch/ma2x5x/cdk_SrcIsp_1xIMX214/leon/app_guzzi_command.h

35 #i‚de‡
_APP_GUZZI_COMMAND_H


36 
	#_APP_GUZZI_COMMAND_H


	)

38 #ifde‡
__˝lu•lus


42 
	~<°döt.h
>

44 
	#MAX_DYNAMIC_DTP_PAYLOAD_SIZE
 (64)

	)

47 
APP_GUZZI_COMMAND__NOP
,

48 
APP_GUZZI_COMMAND__CAM_START
,

49 
APP_GUZZI_COMMAND__CAM_STOP
,

50 
APP_GUZZI_COMMAND__CAM_CAPTURE
,

51 
APP_GUZZI_COMMAND__CAM_LENS_MOVE
,

52 
APP_GUZZI_COMMAND__CAM_AF_TRIGGER
,

53 
APP_GUZZI_COMMAND__CAM_AE_MANUAL
,

54 
APP_GUZZI_COMMAND__CAM_AE_AUTO
,

55 
APP_GUZZI_COMMAND__CAM_AWB_MODE
,

56 
APP_GUZZI_COMMAND__CAM_SCENE_MODE
,

57 
APP_GUZZI_COMMAND__CAM_ANTIBANDING_MODE
,

58 
APP_GUZZI_COMMAND__CAM_AE_EXPOSURE_COMPENSATION
,

59 
°h_ñ£2
,

60 
APP_GUZZI_COMMAND__CAM_AE_LOCK
,

61 
APP_GUZZI_COMMAND__CAM_AE_TARGET_FPS_RANGE
,

62 
°h_ñ£3
,

63 
APP_GUZZI_COMMAND__CAM_AWB_LOCK
,

64 
APP_GUZZI_COMMAND__CAM_CAPTURE_INTRENT
,

65 
APP_GUZZI_COMMAND__CAM_CONTROL_MODE
,

66 
°h_ñ£4
,

67 
°h_ñ£5
,

68 
APP_GUZZI_COMMAND__CAM_FRAME_DURATION
,

69 
°h_ñ£7
,

70 
APP_GUZZI_COMMAND__CAM_SENSITIVITY
,

71 
APP_GUZZI_COMMAND__CAM_EFFECT_MODE
,

72 
°h_ñ£8
,

73 
APP_GUZZI_COMMAND__CAM_AF_MODE
,

74 
APP_GUZZI_COMMAND__CAM_NOISE_REDUCTION_STRENGTH
,

75 
APP_GUZZI_COMMAND__CAM_SATURATION
,

76 
°h_ñ£9
,

77 
°h_ñ£10
,

78 
APP_GUZZI_COMMAND__CAM_BRIGHTNESS
,

79 
°h_ñ£11
,

80 
APP_GUZZI_COMMAND__CAM_FORMAT
,

81 
APP_GUZZI_COMMAND__CAM_RESOLUTION
,

82 
APP_GUZZI_COMMAND__CAM_SHARPNESS
,

83 
APP_GUZZI_COMMAND__LIVE_TUNING_UNLOCK
,

84 
APP_GUZZI_COMMAND__LIVE_TUNING_APPLY
,

85 
APP_GUZZI_COMMAND__OUTPUT_CONTROL
,

86 
APP_GUZZI_COMMAND__MAX


87 } 
	t≠p_guzzi_comm™d_id_t
;

90 
≠p_guzzi_comm™d_id_t
 
id
;

93 
uöt32_t
 
id
;

96 
uöt32_t
 
pos
;

97 } 
Àns_move
;

99 
uöt32_t
 
exp_us
;

100 
uöt32_t
 
£nsôivôy_iso
;

101 
uöt32_t
 
‰ame_duøti⁄_us
;

102 } 
´_m™uÆ
;

104 
uöt32_t
 
mode
;

105 } 
awb_mode
;

107 
uöt32_t
 
ty≥
;

108 } 
s˚√_mode
;

110 
uöt32_t
 
ty≥
;

111 } 
™tib™dög_mode
;

113 
uöt32_t
 
ty≥
;

114 } 
´_lock_mode
;

116 
uöt32_t
 
mö_Âs
;

117 
uöt32_t
 
max_Âs
;

118 } 
´_èrgë_Âs_ønge
;

120 
uöt32_t
 
ty≥
;

121 } 
awb_lock_c⁄åﬁ
;

123 
uöt32_t
 
mode
;

124 } 
ˇ±uª_öã¡
;

126 
uöt32_t
 
ty≥
;

127 } 
c⁄åﬁ_mode
;

129 
uöt64_t
 
vÆ
;

130 } 
‰ame_duøti⁄
;

132 
uöt32_t
 
vÆ
;

133 } 
exposuª_com≥nßti⁄
;

135 
uöt32_t
 
iso_vÆ
;

136 } 
£nsôivôy
;

138 
uöt32_t
 
ty≥
;

139 } 
ef„˘_mode
;

141 
uöt32_t
 
ty≥
;

142 } 
af_mode
;

144 
uöt32_t
 
vÆ
;

145 } 
noi£_ªdu˘i⁄_°ªngth
;

147 
uöt32_t
 
vÆ
;

148 } 
ßtuøti⁄
;

150 
uöt32_t
 
vÆ
;

151 } 
brighäess
;

153 
uöt32_t
 
vÆ
;

154 } 
f‹m©
;

156 
uöt32_t
 
width
;

157 
uöt32_t
 
height
;

158 } 
ªsﬁuti⁄
;

160 
uöt32_t
 
vÆ
;

161 } 
sh¨≤ess
;

163 } 
ˇm
;

165 
uöt32_t
 
size
;

166 
uöt32_t
 
off£t
;

167 
uöt8_t
 
d©a
[
MAX_DYNAMIC_DTP_PAYLOAD_SIZE
];

168 } 
live_tunög
;

170 
uöt32_t
 
ˇmîa_í_bô_mask
;

171 
uöt32_t
 
‰ame_ty≥_í_bô_mask
;

172 
uöt32_t
 
‰ame_f‹m©_í_bô_mask
;

173 } 
ouçut_c⁄åﬁ
;

175 } 
	t≠p_guzzi_comm™d_t
;

177 
	t≠p_guzzi_comm™d_ˇŒback_t
(

178 *
	t≠p_¥iv©e
,

179 
	t≠p_guzzi_comm™d_t
 *
	tcomm™d


182 
≠p_guzzi_comm™d_≥ek
(

183 *
≠p_¥iv©e
,

184 
≠p_guzzi_comm™d_ˇŒback_t
 *
ˇŒback


186 
≠p_guzzi_comm™d_waô
(

187 *
≠p_¥iv©e
,

188 
≠p_guzzi_comm™d_ˇŒback_t
 *
ˇŒback


190 
≠p_guzzi_comm™d_waô_timeout
(

191 *
≠p_¥iv©e
,

192 
≠p_guzzi_comm™d_ˇŒback_t
 *
ˇŒback
,

193 
uöt32_t
 
timeout_ms


196 #ifde‡
__˝lu•lus


	@cdk/apps/arch/ma2x5x/cdk_SrcIsp_1xIMX214/leon/app_guzzi_command_dbg.c

35 
	~<oßl/oßl_time.h
>

36 
	~<swcLe⁄Utûs.h
>

37 
	~<≠p_guzzi_comm™d.h
>

38 
	~"≠p_guzzi_comm™d_dbg.h
"

40 #i‚de‡
APP_GUZZI_COMMAND_DBG_PROBE_INTERVAL_MS


41 
	#APP_GUZZI_COMMAND_DBG_PROBE_INTERVAL_MS
 10

	)

44 
uöt32_t
 
	g≠p_guzzi_comm™d_dbg_id
 = (uöt32_t)
APP_GUZZI_COMMAND__NOP
;

45 
uöt32_t
 
	g≠p_guzzi_comm™d_dbg_ˇm_id
 = 0;

46 
uöt32_t
 
	g≠p_guzzi_comm™d_dbg_ˇm_Àns_move_pos
 = 0;

47 
uöt32_t
 
	g≠p_guzzi_comm™d_dbg_ˇm_´_m™uÆ_exp_us
 = 0;

48 
uöt32_t
 
	g≠p_guzzi_comm™d_dbg_ˇm_´_m™uÆ_£nsôivôy_iso
 = 0;

49 
uöt32_t
 
	g≠p_guzzi_comm™d_dbg_ˇm_´_m™uÆ_‰ame_duøti⁄_us
 = 0;

50 
uöt32_t
 
	g≠p_guzzi_comm™d_dbg_ˇm_awb_mode
 = 0;

51 
uöt32_t
 
	g≠p_guzzi_comm™d_dbg_ˇm_™tib™dög_mode
 = 0;

52 
uöt32_t
 
	g≠p_guzzi_comm™d_dbg_ˇm_´_lock_c⁄åﬁ
 = 0;

53 
uöt32_t
 
	g≠p_guzzi_comm™d_dbg_ˇm_´_èrgë_Âs_mö
 = 0;

54 
uöt32_t
 
	g≠p_guzzi_comm™d_dbg_ˇm_´_èrgë_Âs_max
 = 0;

55 
uöt32_t
 
	g≠p_guzzi_comm™d_dbg_ˇm_awb_lock_c⁄åﬁ
 = 0;

56 
uöt32_t
 
	g≠p_guzzi_comm™d_dbg_ˇm_ˇ±uª_öã¡
 = 0;

57 
uöt32_t
 
	g≠p_guzzi_comm™d_dbg_ˇm_c⁄åﬁ
 = 0;

58 
uöt32_t
 
	g≠p_guzzi_comm™d_dbg_ˇm_exp_com≥nßti⁄
 = 0;

59 
uöt32_t
 
	g≠p_guzzi_comm™d_dbg_ˇm_iso
 = 0;

60 
uöt32_t
 
	g≠p_guzzi_comm™d_dbg_ˇm_ef„˘_mode
 = 0;

61 
uöt64_t
 
	g≠p_guzzi_comm™d_dbg_ˇm_‰ame_duøti⁄
 = 0;

63 
	~<utûs/mms_debug.h
>

65 
mmsdbg_deföe_v¨übÀ
(

66 
vdl_≠p_guzzi_comm™d_dbg
,

67 
DL_DEFAULT
,

72 
	#MMSDEBUGLEVEL
 
	`mmsdbg_u£_v¨übÀ
(
vdl_≠p_guzzi_comm™d_dbg
)

	)

74 
	#U
(
V
Ë
	`swcLe⁄RódNoCacheU32
(
	`unˇched
((
uöt32_t
)&(V)))

	)

75 
ölöe
 
uöt32_t
 
	$unˇched
(
uöt32_t
 
v
)

77 i‡((0x70000000 <
v
) && (v <= 0x70200000)) {

78  
v
 | 0x80000000;

79 } i‡((0x80000000 <
v
) && (v <= 0x88000000)) {

80  
v
 | 0x40000000;

82  
v
;

83 
	}
}

85 
≠p_guzzi_comm™d_t
 *
	$≠p_guzzi_comm™d_dbg_fûl
(

86 
≠p_guzzi_comm™d_t
 *
comm™d


89 (
≠p_guzzi_comm™d_id_t
)
	`U
(
≠p_guzzi_comm™d_dbg_id
)) {

90 
APP_GUZZI_COMMAND__CAM_START
:

91 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_START
;

93 
APP_GUZZI_COMMAND__CAM_STOP
:

94 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_STOP
;

96 
APP_GUZZI_COMMAND__CAM_CAPTURE
:

97 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_CAPTURE
;

99 
APP_GUZZI_COMMAND__CAM_LENS_MOVE
:

100 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_LENS_MOVE
;

101 
comm™d
->
ˇm
.
Àns_move
.
pos
 =

102 
	`U
(
≠p_guzzi_comm™d_dbg_ˇm_Àns_move_pos
);

104 
APP_GUZZI_COMMAND__CAM_AF_TRIGGER
:

105 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_AF_TRIGGER
;

107 
APP_GUZZI_COMMAND__CAM_AE_MANUAL
:

108 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_AE_MANUAL
;

109 
comm™d
->
ˇm
.
´_m™uÆ
.
exp_us
 =

110 
	`U
(
≠p_guzzi_comm™d_dbg_ˇm_´_m™uÆ_exp_us
);

111 
comm™d
->
ˇm
.
´_m™uÆ
.
£nsôivôy_iso
 =

112 
	`U
(
≠p_guzzi_comm™d_dbg_ˇm_´_m™uÆ_£nsôivôy_iso
);

113 
comm™d
->
ˇm
.
´_m™uÆ
.
‰ame_duøti⁄_us
 =

114 
	`U
(
≠p_guzzi_comm™d_dbg_ˇm_´_m™uÆ_‰ame_duøti⁄_us
);

116 
APP_GUZZI_COMMAND__CAM_AE_AUTO
:

117 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_AE_AUTO
;

119 
APP_GUZZI_COMMAND__CAM_AWB_MODE
:

120 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_AWB_MODE
;

121 
comm™d
->
ˇm
.
awb_mode
.
mode
 =

122 
	`U
(
≠p_guzzi_comm™d_dbg_ˇm_awb_mode
);

124 
APP_GUZZI_COMMAND__CAM_ANTIBANDING_MODE
:

125 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_ANTIBANDING_MODE
;

126 
comm™d
->
ˇm
.
™tib™dög_mode
.
ty≥
 =

127 
	`U
(
≠p_guzzi_comm™d_dbg_ˇm_™tib™dög_mode
);

129 
APP_GUZZI_COMMAND__CAM_AE_LOCK
:

130 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_AE_LOCK
;

131 
comm™d
->
ˇm
.
´_lock_mode
.
ty≥
 =

132 
	`U
(
≠p_guzzi_comm™d_dbg_ˇm_´_lock_c⁄åﬁ
);

134 
APP_GUZZI_COMMAND__CAM_AE_TARGET_FPS_RANGE
:

135 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_AE_TARGET_FPS_RANGE
;

136 
comm™d
->
ˇm
.
´_èrgë_Âs_ønge
.
mö_Âs
 =

137 
	`U
(
≠p_guzzi_comm™d_dbg_ˇm_´_èrgë_Âs_mö
);

138 
comm™d
->
ˇm
.
´_èrgë_Âs_ønge
.
max_Âs
 =

139 
	`U
(
≠p_guzzi_comm™d_dbg_ˇm_´_èrgë_Âs_max
);

141 
APP_GUZZI_COMMAND__CAM_AWB_LOCK
:

142 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_AWB_LOCK
;

143 
comm™d
->
ˇm
.
awb_lock_c⁄åﬁ
.
ty≥
 =

144 
	`U
(
≠p_guzzi_comm™d_dbg_ˇm_awb_lock_c⁄åﬁ
);

146 
APP_GUZZI_COMMAND__CAM_CAPTURE_INTRENT
:

147 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_CAPTURE_INTRENT
;

148 
comm™d
->
ˇm
.
ˇ±uª_öã¡
.
mode
 =

149 
	`U
(
≠p_guzzi_comm™d_dbg_ˇm_ˇ±uª_öã¡
);

151 
APP_GUZZI_COMMAND__CAM_CONTROL_MODE
:

152 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_CONTROL_MODE
;

153 
comm™d
->
ˇm
.
c⁄åﬁ_mode
.
ty≥
 =

154 
	`U
(
≠p_guzzi_comm™d_dbg_ˇm_c⁄åﬁ
);

156 
APP_GUZZI_COMMAND__CAM_FRAME_DURATION
:

157 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_FRAME_DURATION
;

158 
comm™d
->
ˇm
.
‰ame_duøti⁄
.
vÆ
 =

159 
	`U
(
≠p_guzzi_comm™d_dbg_ˇm_c⁄åﬁ
);

161 
APP_GUZZI_COMMAND__CAM_AE_EXPOSURE_COMPENSATION
:

162 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_AE_EXPOSURE_COMPENSATION
;

163 
comm™d
->
ˇm
.
exposuª_com≥nßti⁄
.
vÆ
 =

164 
	`U
(
≠p_guzzi_comm™d_dbg_ˇm_exp_com≥nßti⁄
);

166 
APP_GUZZI_COMMAND__CAM_SENSITIVITY
:

167 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_SENSITIVITY
;

168 
comm™d
->
ˇm
.
£nsôivôy
.
iso_vÆ
 =

169 
	`U
(
≠p_guzzi_comm™d_dbg_ˇm_iso
);

171 
APP_GUZZI_COMMAND__CAM_EFFECT_MODE
:

172 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_EFFECT_MODE
;

173 
comm™d
->
ˇm
.
ef„˘_mode
.
ty≥
 =

174 
	`U
(
≠p_guzzi_comm™d_dbg_ˇm_ef„˘_mode
);

177 
	`mmsdbg
(

178 
DL_ERROR
,

180 
	`U
(
≠p_guzzi_comm™d_dbg_id
)

182 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__NOP
;

184 
comm™d
->
ˇm
.
id
 = 
	`U
(
≠p_guzzi_comm™d_dbg_ˇm_id
);

186  
comm™d
;

187 
	}
}

189 
	$≠p_guzzi_comm™d_dbg_≥ek
(

190 *
≠p_¥iv©e
,

191 
≠p_guzzi_comm™d_ˇŒback_t
 *
ˇŒback


194 
≠p_guzzi_comm™d_t
 
comm™d
;

196 i‡(
	`U
(
≠p_guzzi_comm™d_dbg_id
Ë!(
uöt32_t
)
APP_GUZZI_COMMAND__NOP
) {

197 
	`ˇŒback
(

198 
≠p_¥iv©e
,

199 
	`≠p_guzzi_comm™d_dbg_fûl
(

200 &
comm™d


204 
≠p_guzzi_comm™d_dbg_id
 = (
uöt32_t
)
APP_GUZZI_COMMAND__NOP
;

209 
	}
}

211 
	$≠p_guzzi_comm™d_dbg_waô
(

212 *
≠p_¥iv©e
,

213 
≠p_guzzi_comm™d_ˇŒback_t
 *
ˇŒback


216 !
	`≠p_guzzi_comm™d_dbg_≥ek
(
≠p_¥iv©e
, 
ˇŒback
)) {

217 
	`oßl_u¶ìp
(
APP_GUZZI_COMMAND_DBG_PROBE_INTERVAL_MS
*1000);

219 
	}
}

221 
	$≠p_guzzi_comm™d_dbg_waô_timeout
(

222 *
≠p_¥iv©e
,

223 
≠p_guzzi_comm™d_ˇŒback_t
 *
ˇŒback
,

224 
uöt32_t
 
timeout_ms


227 
uöt32_t
 
À·
, 
m¶ìp
;

228 
ˇŒed
;

230 
À·
 = 
timeout_ms
;

232 !(
ˇŒed
 = 
	`≠p_guzzi_comm™d_dbg_≥ek
(
≠p_¥iv©e
, 
ˇŒback
)Ë&& 
À·
) {

233 
m¶ìp
 = 
APP_GUZZI_COMMAND_DBG_PROBE_INTERVAL_MS
 < 
À·


234 ? 
APP_GUZZI_COMMAND_DBG_PROBE_INTERVAL_MS


235 : 
À·
;

236 
	`oßl_u¶ìp
(
m¶ìp
*1000);

237 
À·
 -
m¶ìp
;

240  
ˇŒed
;

241 
	}
}

	@cdk/apps/arch/ma2x5x/cdk_SrcIsp_1xIMX214/leon/app_guzzi_command_dbg.h

35 #i‚de‡
_APP_GUZZI_COMMAND_DBG_H


36 
	#_APP_GUZZI_COMMAND_DBG_H


	)

38 #ifde‡
__˝lu•lus


42 
	~<≠p_guzzi_comm™d.h
>

44 
≠p_guzzi_comm™d_dbg_≥ek
(

45 *
≠p_¥iv©e
,

46 
≠p_guzzi_comm™d_ˇŒback_t
 *
ˇŒback


48 
≠p_guzzi_comm™d_dbg_waô
(

49 *
≠p_¥iv©e
,

50 
≠p_guzzi_comm™d_ˇŒback_t
 *
ˇŒback


52 
≠p_guzzi_comm™d_dbg_waô_timeout
(

53 *
≠p_¥iv©e
,

54 
≠p_guzzi_comm™d_ˇŒback_t
 *
ˇŒback
,

55 
uöt32_t
 
timeout_ms


59 #ifde‡
__˝lu•lus


	@cdk/apps/arch/ma2x5x/cdk_SrcIsp_1xIMX214/leon/app_guzzi_command_spi.c

35 
	~<°dio.h
>

36 
	~<°dlib.h
>

37 
	~<°rög.h
>

38 
	~<as£π.h
>

40 
	~<πems/libio.h
>

41 
	~<utûs/mms_debug.h
>

43 
	~<DrvGpio.h
>

45 
	~<OsDrvSpiSœveCP.h
>

46 
	~<OsMesßgePrŸocﬁ.h
>

48 
	~"≠p_guzzi_comm™d_•i.h
"

49 
	~"≠p_guzzi_•i_comm™ds.h
"

50 
	~<OsComm⁄.h
>

52 #i‚de‡
APP_GUZZI_CAMMAND_SPI_HOST_NOTIFY_GPIO


53 
	#APP_GUZZI_CAMMAND_SPI_HOST_NOTIFY_GPIO
 22

	)

55 #i‚de‡
APP_GUZZI_CAMMAND_SPI_CH_ID


56 
	#APP_GUZZI_CAMMAND_SPI_CH_ID
 
SPI1


	)

58 #i‚de‡
APP_GUZZI_CAMMAND_SPI_VC_ID


59 
	#APP_GUZZI_CAMMAND_SPI_VC_ID
 1

	)

61 #i‚de‡
APP_GUZZI_CAMMAND_SPI_VC_PRIO


62 
	#APP_GUZZI_CAMMAND_SPI_VC_PRIO
 150

	)

65 
	#RTEMS_DRIVER_AUTO_MAJOR
 0

	)

66 
	#SPI_COMMAND_BUFFER_SIZE
 1024

	)

68 
mmsdbg_deföe_v¨übÀ
(

69 
vdl_≠p_guzzi_comm™d_•i
,

70 
DL_DEFAULT
,

75 
	#MMSDEBUGLEVEL
 
	`mmsdbg_u£_v¨übÀ
(
vdl_≠p_guzzi_comm™d_•i
)

	)

77 
DRVSPI_CONFIGURATION
(

78 
APP_GUZZI_CAMMAND_SPI_CH_ID
,

83 
APP_GUZZI_CAMMAND_SPI_HOST_NOTIFY_GPIO
,

86 
DECLARE_COMMUNICATION_PROTOCOL_DRIVER_TABLE
(

87 
comm_¥Ÿocﬁ_dúvî_èbÀ


89 
DECLARE_OS_MESSAGING_VIRTUAL_CHANNEL
(

90 
comm_¥Ÿocﬁ_vc
,

92 
APP_GUZZI_CAMMAND_SPI_VC_ID
,

93 
APP_GUZZI_CAMMAND_SPI_VC_PRIO
,

94 
SPI_COMMAND_BUFFER_SIZE
,

95 
SPI_COMMAND_BUFFER_SIZE
,

99 
πems_devi˚_maj‹_numbî
 
	gcomm_¥Ÿocﬁ_maj‹
;

100 
	g•i_comm™d_buf„r
[
SPI_COMMAND_BUFFER_SIZE
] 
__©åibuã__
((

101 
£˘i⁄
(".ddr.bss"),

102 
Æig√d
(8)

105 
uöt32_t
 
	$gë_dy«mic_tunög
 (
≠p_guzzi_comm™d_t
 *
comm™d
, * 
d©a
)

107 *
√xt
;

108 
uöt32
 
i
;

109 
uöt8_t
 *
dç_∑ylﬂd
 = 
comm™d
->
live_tunög
.
d©a
;

111 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__NOP
;

112 
comm™d
->
live_tunög
.
size
 = 
	`°πoul
(
d©a
, &
√xt
, 0);

114 i‡(
comm™d
->
live_tunög
.
size
 > (comm™d->live_tunög.
d©a
)) {

115 
	`mmsdbg
(
DL_ERROR
, "Dynamic dtp size: %dÉxceeded: %d",

116 ()
comm™d
->
live_tunög
.
size
,

117 (
comm™d
->
live_tunög
.
d©a
)

119 
EXIT_1
;

122 
comm™d
->
live_tunög
.
off£t
 = 
	`°πoul
(
√xt
, &next, 0);

123 
i
0; i < 
comm™d
->
live_tunög
.
size
; i ++) {

124 *
dç_∑ylﬂd
 = 
	`°πoul
(
√xt
, &next, 0);

125 
dç_∑ylﬂd
 ++;

128 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__LIVE_TUNING_APPLY
;

131 
EXIT_1
:

133 
	}
}

135 
uöt32_t
 
	$gë_tunög_id
 (
≠p_guzzi_comm™d_t
 *
comm™d
, *
d©a
)

138 ' ' =*
d©a
) {

139 
d©a
++;

142 
	`°∫˝y
((*)
comm™d
->
live_tunög
.
d©a
,

143 
d©a
,

144 
MAX_DYNAMIC_DTP_PAYLOAD_SIZE
);

146 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__LIVE_TUNING_UNLOCK
;

148 
	}
}

151 
uöt32_t
 
	$gë_ouçut_c⁄åﬁ
 (
≠p_guzzi_comm™d_t
 *
comm™d
, *
d©a
)

155 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__OUTPUT_CONTROL
;

156 
comm™d
->
ouçut_c⁄åﬁ
.
ˇmîa_í_bô_mask
 = 
	`°πoul
(

157 
d©a
,

158 &
d©a
,

161 
comm™d
->
ouçut_c⁄åﬁ
.
‰ame_ty≥_í_bô_mask
 = 
	`°πoul
(

162 
d©a
,

163 &
d©a
,

166 
comm™d
->
ouçut_c⁄åﬁ
.
‰ame_f‹m©_í_bô_mask
 = 
	`°πoul
(

167 
d©a
,

168 &
d©a
,

172 
	}
}

174 
≠p_guzzi_comm™d_t
 *
	$•i_comm™d_to_≠p_guzzi_comm™d
(

175 
≠p_guzzi_comm™d_t
 *
comm™d
,

176 *
comm™d_•i


179 
uöt32_t
 
comm™d_•i_id
;

181 *
comm™d_•i_∑øms
;

183 
comm™d_•i_id
 = 
	`°πoul
(

184 
comm™d_•i
,

185 &
comm™d_•i_∑øms
,

190 
comm™d
->
ˇm
.
id
 = 0;

191 
comm™d_•i_id
) {

192 
APP_GUZZI_SPI_CMD_START_STREAM
:

193 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_START
;

194 
comm™d
->
ˇm
.
id
 = 
	`°πoul
(

195 
comm™d_•i_∑øms
,

196 &
comm™d_•i_∑øms
,

201 
APP_GUZZI_SPI_CMD_STOP_STREAM
:

202 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_STOP
;

203 
comm™d
->
ˇm
.
id
 = 
	`°πoul
(

204 
comm™d_•i_∑øms
,

205 &
comm™d_•i_∑øms
,

209 
APP_GUZZI_SPI_CMD_REQ_STILL
:

210 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_CAPTURE
;

211 
comm™d
->
ˇm
.
id
 = 
	`°πoul
(

212 
comm™d_•i_∑øms
,

213 &
comm™d_•i_∑øms
,

217 
APP_GUZZI_SPI_CMD_MOV_LENS
:

218 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_LENS_MOVE
;

219 
comm™d
->
ˇm
.
id
 = 
	`°πoul
(

220 
comm™d_•i_∑øms
,

221 &
comm™d_•i_∑øms
,

224 
comm™d
->
ˇm
.
Àns_move
.
pos
 = 
	`°πoul
(

225 
comm™d_•i_∑øms
,

226 &
comm™d_•i_∑øms
,

230 
APP_GUZZI_SPI_CMD_FOCUS_TRIGGER
:

231 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_AF_TRIGGER
;

232 
comm™d
->
ˇm
.
id
 = 
	`°πoul
(

233 
comm™d_•i_∑øms
,

234 &
comm™d_•i_∑øms
,

238 
APP_GUZZI_SPI_CMD_AE_MANUAL
:

239 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_AE_MANUAL
;

240 
comm™d
->
ˇm
.
id
 = 
	`°πoul
(

241 
comm™d_•i_∑øms
,

242 &
comm™d_•i_∑øms
,

245 
comm™d
->
ˇm
.
´_m™uÆ
.
exp_us
 = 
	`°πoul
(

246 
comm™d_•i_∑øms
,

247 &
comm™d_•i_∑øms
,

250 
comm™d
->
ˇm
.
´_m™uÆ
.
£nsôivôy_iso
 = 
	`°πoul
(

251 
comm™d_•i_∑øms
,

252 &
comm™d_•i_∑øms
,

255 
comm™d
->
ˇm
.
´_m™uÆ
.
‰ame_duøti⁄_us
 = 
	`°πoul
(

256 
comm™d_•i_∑øms
,

257 &
comm™d_•i_∑øms
,

261 
APP_GUZZI_SPI_CMD_AE_AUTO
:

262 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_AE_AUTO
;

263 
comm™d
->
ˇm
.
id
 = 
	`°πoul
(

264 
comm™d_•i_∑øms
,

265 &
comm™d_•i_∑øms
,

269 
APP_GUZZI_SPI_CMD_SET_AWB_MODE
:

270 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_AWB_MODE
;

271 
comm™d
->
ˇm
.
id
 = 
	`°πoul
(

272 
comm™d_•i_∑øms
,

273 &
comm™d_•i_∑øms
,

276 
comm™d
->
ˇm
.
awb_mode
.
mode
 = 
	`°πoul
(

277 
comm™d_•i_∑øms
,

278 &
comm™d_•i_∑øms
,

282 
APP_GUZZI_SPI_CMD_SCENE_MODES
:

283 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_SCENE_MODE
;

284 
comm™d
->
ˇm
.
id
 = 
	`°πoul
(

285 
comm™d_•i_∑øms
,

286 &
comm™d_•i_∑øms
,

289 
comm™d
->
ˇm
.
s˚√_mode
.
ty≥
 = 
	`°πoul
(

290 
comm™d_•i_∑øms
,

291 &
comm™d_•i_∑øms
,

295 
APP_GUZZI_SPI_CMD_ANTIBANDING_MODES
:

296 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_ANTIBANDING_MODE
;

297 
comm™d
->
ˇm
.
id
 = 
	`°πoul
(

298 
comm™d_•i_∑øms
,

299 &
comm™d_•i_∑øms
,

302 
comm™d
->
ˇm
.
™tib™dög_mode
.
ty≥
 = 
	`°πoul
(

303 
comm™d_•i_∑øms
,

304 &
comm™d_•i_∑øms
,

308 
APP_GUZZI_SPI_CMD_AE_LOCK
:

309 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_AE_LOCK
;

310 
comm™d
->
ˇm
.
id
 = 
	`°πoul
(

311 
comm™d_•i_∑øms
,

312 &
comm™d_•i_∑øms
,

315 
comm™d
->
ˇm
.
´_lock_mode
.
ty≥
 = 
	`°πoul
(

316 
comm™d_•i_∑øms
,

317 &
comm™d_•i_∑øms
,

321 
APP_GUZZI_SPI_CMD_AE_TARGET_FPS_RANGE
:

322 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_AE_TARGET_FPS_RANGE
;

323 
comm™d
->
ˇm
.
id
 = 
	`°πoul
(

324 
comm™d_•i_∑øms
,

325 &
comm™d_•i_∑øms
,

328 
comm™d
->
ˇm
.
´_èrgë_Âs_ønge
.
mö_Âs
 = 
	`°πoul
(

329 
comm™d_•i_∑øms
,

330 &
comm™d_•i_∑øms
,

333 
comm™d
->
ˇm
.
´_èrgë_Âs_ønge
.
max_Âs
 = 
	`°πoul
(

334 
comm™d_•i_∑øms
,

335 &
comm™d_•i_∑øms
,

339 
APP_GUZZI_SPI_CMD_AWB_LOCK
:

340 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_AWB_LOCK
;

341 
comm™d
->
ˇm
.
id
 = 
	`°πoul
(

342 
comm™d_•i_∑øms
,

343 &
comm™d_•i_∑øms
,

346 
comm™d
->
ˇm
.
awb_lock_c⁄åﬁ
.
ty≥
 = 
	`°πoul
(

347 
comm™d_•i_∑øms
,

348 &
comm™d_•i_∑øms
,

352 
APP_GUZZI_SPI_CMD_CAPTURE_INTENT
:

353 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_CAPTURE_INTRENT
;

354 
comm™d
->
ˇm
.
id
 = 
	`°πoul
(

355 
comm™d_•i_∑øms
,

356 &
comm™d_•i_∑øms
,

359 
comm™d
->
ˇm
.
ˇ±uª_öã¡
.
mode
 = 
	`°πoul
(

360 
comm™d_•i_∑øms
,

361 &
comm™d_•i_∑øms
,

365 
APP_GUZZI_SPI_CMD_CONTROL_MODE
:

366 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_CONTROL_MODE
;

367 
comm™d
->
ˇm
.
id
 = 
	`°πoul
(

368 
comm™d_•i_∑øms
,

369 &
comm™d_•i_∑øms
,

372 
comm™d
->
ˇm
.
c⁄åﬁ_mode
.
ty≥
 = 
	`°πoul
(

373 
comm™d_•i_∑øms
,

374 &
comm™d_•i_∑øms
,

378 
APP_GUZZI_SPI_CMD_FRAME_DURATION
:

379 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_FRAME_DURATION
;

380 
comm™d
->
ˇm
.
id
 = 
	`°πoul
(

381 
comm™d_•i_∑øms
,

382 &
comm™d_•i_∑øms
,

385 
comm™d
->
ˇm
.
‰ame_duøti⁄
.
vÆ
 = 
	`°πoul
(

386 
comm™d_•i_∑øms
,

387 &
comm™d_•i_∑øms
,

391 
APP_GUZZI_SPI_CMD_EXPOSURE_COMPENSATION
:

392 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_AE_EXPOSURE_COMPENSATION
;

393 
comm™d
->
ˇm
.
id
 = 
	`°πoul
(

394 
comm™d_•i_∑øms
,

395 &
comm™d_•i_∑øms
,

398 
comm™d
->
ˇm
.
exposuª_com≥nßti⁄
.
vÆ
 = 
	`°πoul
(

399 
comm™d_•i_∑øms
,

400 &
comm™d_•i_∑øms
,

404 
APP_GUZZI_SPI_CMD_SENSITIVITY
:

405 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_SENSITIVITY
;

406 
comm™d
->
ˇm
.
id
 = 
	`°πoul
(

407 
comm™d_•i_∑øms
,

408 &
comm™d_•i_∑øms
,

411 
comm™d
->
ˇm
.
£nsôivôy
.
iso_vÆ
 = 
	`°πoul
(

412 
comm™d_•i_∑øms
,

413 &
comm™d_•i_∑øms
,

417 
APP_GUZZI_SPI_CMD_EFFECT_MODE
:

418 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_EFFECT_MODE
;

419 
comm™d
->
ˇm
.
id
 = 
	`°πoul
(

420 
comm™d_•i_∑øms
,

421 &
comm™d_•i_∑øms
,

424 
comm™d
->
ˇm
.
ef„˘_mode
.
ty≥
 = 
	`°πoul
(

425 
comm™d_•i_∑øms
,

426 &
comm™d_•i_∑øms
,

430 
APP_GUZZI_SPI_CMD_AF_MODE
:

431 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_AF_MODE
;

432 
comm™d
->
ˇm
.
id
 = 
	`°πoul
(

433 
comm™d_•i_∑øms
,

434 &
comm™d_•i_∑øms
,

437 
comm™d
->
ˇm
.
af_mode
.
ty≥
 = 
	`°πoul
(

438 
comm™d_•i_∑øms
,

439 &
comm™d_•i_∑øms
,

443 
APP_GUZZI_SPI_CMD_NOISE_REDUCTION_STRENGTH
:

444 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_NOISE_REDUCTION_STRENGTH
;

445 
comm™d
->
ˇm
.
id
 = 
	`°πoul
(

446 
comm™d_•i_∑øms
,

447 &
comm™d_•i_∑øms
,

450 
comm™d
->
ˇm
.
noi£_ªdu˘i⁄_°ªngth
.
vÆ
 = 
	`°πoul
(

451 
comm™d_•i_∑øms
,

452 &
comm™d_•i_∑øms
,

456 
APP_GUZZI_SPI_CMD_SATURATION
:

457 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_SATURATION
;

458 
comm™d
->
ˇm
.
id
 = 
	`°πoul
(

459 
comm™d_•i_∑øms
,

460 &
comm™d_•i_∑øms
,

463 
comm™d
->
ˇm
.
ßtuøti⁄
.
vÆ
 = 
	`°πoul
(

464 
comm™d_•i_∑øms
,

465 &
comm™d_•i_∑øms
,

469 
APP_GUZZI_SPI_CMD_BRIGHTNESS
:

470 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_BRIGHTNESS
;

471 
comm™d
->
ˇm
.
id
 = 
	`°πoul
(

472 
comm™d_•i_∑øms
,

473 &
comm™d_•i_∑øms
,

476 
comm™d
->
ˇm
.
brighäess
.
vÆ
 = 
	`°πoul
(

477 
comm™d_•i_∑øms
,

478 &
comm™d_•i_∑øms
,

482 
APP_GUZZI_SPI_CMD_STREAM_FORMAT
:

483 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_FORMAT
;

484 
comm™d
->
ˇm
.
id
 = 
	`°πoul
(

485 
comm™d_•i_∑øms
,

486 &
comm™d_•i_∑øms
,

489 
comm™d
->
ˇm
.
f‹m©
.
vÆ
 = 
	`°πoul
(

490 
comm™d_•i_∑øms
,

491 &
comm™d_•i_∑øms
,

495 
APP_GUZZI_SPI_CMD_CAM_RESOLUTION
:

496 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_RESOLUTION
;

497 
comm™d
->
ˇm
.
id
 = 
	`°πoul
(

498 
comm™d_•i_∑øms
,

499 &
comm™d_•i_∑øms
,

502 
comm™d
->
ˇm
.
ªsﬁuti⁄
.
width
 = 
	`°πoul
(

503 
comm™d_•i_∑øms
,

504 &
comm™d_•i_∑øms
,

507 
comm™d
->
ˇm
.
ªsﬁuti⁄
.
height
 = 
	`°πoul
(

508 
comm™d_•i_∑øms
,

509 &
comm™d_•i_∑øms
,

513 
APP_GUZZI_SPI_CMD_SHARPNESS
:

514 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__CAM_SHARPNESS
;

515 
comm™d
->
ˇm
.
id
 = 
	`°πoul
(

516 
comm™d_•i_∑øms
,

517 &
comm™d_•i_∑øms
,

520 
comm™d
->
ˇm
.
sh¨≤ess
.
vÆ
 = 
	`°πoul
(

521 
comm™d_•i_∑øms
,

522 &
comm™d_•i_∑øms
,

526 
APP_GUZZI_SPI_LIVE_TUNING_UNLOCK
:

527 
	`gë_tunög_id
(
comm™d
, 
comm™d_•i_∑øms
);

529 
APP_GUZZI_SPI_LIVE_TUNING_APPLY
:

530 
	`gë_dy«mic_tunög
(
comm™d
, 
comm™d_•i_∑øms
);

532 
APP_GUZZI_SPI_CMD_OUT_CTRL
:

533 
	`gë_ouçut_c⁄åﬁ
(
comm™d
, 
comm™d_•i_∑øms
);

536 
	`mmsdbg
(

537 
DL_ERROR
,

539 ()
comm™d_•i_id


541 
comm™d
->
id
 = 
APP_GUZZI_COMMAND__NOP
;

544  
comm™d
;

545 
	}
}

547 
	$nŸify_boŸ_ªady
()

549 
	`DrvGpioSëPöLo
(
APP_GUZZI_CAMMAND_SPI_HOST_NOTIFY_GPIO
);

550 
	`DrvGpioSëPöHi
(
APP_GUZZI_CAMMAND_SPI_HOST_NOTIFY_GPIO
);

551 
	}
}

554 
	$≠p_guzzi_comm™d_•i_≥ek
(

555 *
≠p_¥iv©e
,

556 
≠p_guzzi_comm™d_ˇŒback_t
 *
ˇŒback


559 
≠p_guzzi_comm™d_t
 
comm™d
;

560 *
comm™d_•i
;

561 
n
;

563 
comm™d_•i
 = 
•i_comm™d_buf„r
;

565 
n
 = 
	`MesßgePassögRód
(

566 
APP_GUZZI_CAMMAND_SPI_VC_ID
,

567 
comm™d_•i
,

568 
SPI_COMMAND_BUFFER_SIZE
-1

570 i‡(
n
) {

571 
comm™d_•i
[
n
] = '\000';

572 
	`ˇŒback
(

573 
≠p_¥iv©e
,

574 
	`•i_comm™d_to_≠p_guzzi_comm™d
(

575 &
comm™d
,

576 
comm™d_•i


583 
	}
}

585 
	$≠p_guzzi_comm™d_•i_waô
(

586 *
≠p_¥iv©e
,

587 
≠p_guzzi_comm™d_ˇŒback_t
 *
ˇŒback


590 
≠p_guzzi_comm™d_t
 
comm™d
;

591 *
comm™d_•i
;

592 
πems_libio_rw_¨gs_t
 
å
;

594 
comm™d_•i
 = 
•i_comm™d_buf„r
;

595 
å
.
buf„r
 = 
comm™d_•i
;

597 
	`πems_io_ªad
(

598 
comm_¥Ÿocﬁ_maj‹
,

599 
APP_GUZZI_CAMMAND_SPI_VC_ID
,

600 &
å


602 i‡(
å
.
byãs_moved
) {

603 
comm™d_•i
[
å
.
byãs_moved
] = '\000';

604 
	`ˇŒback
(

605 
≠p_¥iv©e
,

606 
	`•i_comm™d_to_≠p_guzzi_comm™d
(

607 &
comm™d
,

608 
comm™d_•i


612 
	}
}

615 
	$≠p_guzzi_comm™d_•i_waô_timeout
(

616 *
≠p_¥iv©e
,

617 
≠p_guzzi_comm™d_ˇŒback_t
 *
ˇŒback
,

618 
uöt32_t
 
timeout_ms


621 
OsVútuÆCh™√l
 *
vc
;

622 
≠p_guzzi_comm™d_t
 
comm™d
;

623 *
comm™d_•i
;

624 
πems_°©us_code
 
rc
;

625 
πems_evít_£t
 
evíts
;

626 
n
;

628 
comm™d_•i
 = 
•i_comm™d_buf„r
;

631 
	`as£π
(
vc
 = (
OsVútuÆCh™√l
 *)
	`MesßgePassögGëVútuÆCh™√l
(

632 
APP_GUZZI_CAMMAND_SPI_VC_ID


635 
n
 = 
	`Ba£MesßgePassögRód
(

636 (
VútuÆCh™√l
 *)
vc
,

637 
comm™d_•i
,

638 
SPI_COMMAND_BUFFER_SIZE
-1

641 i‡(!
n
) {

642 
vc
->
rxWaôTaskId
 = 
	`πems_èsk_£lf
();

643 
rc
 = 
	`πems_evít_sy°em_ª˚ive
(

644 
OSCOMMON_EVENT_MPROTOCOL_VC_READ_DATA
,

645 
RTEMS_EVENT_ALL
,

646 (
	`πems_˛ock_gë_ticks_≥r_£c⁄d
(Ë/ 1000Ë* 
timeout_ms
,

647 &
evíts


649 i‡(
rc
 =
RTEMS_TIMEOUT
) {

652 
	`as£π
(!
rc
);

653 
n
 = 
	`Ba£MesßgePassögRód
(

654 (
VútuÆCh™√l
 *)
vc
,

655 
comm™d_•i
,

656 
SPI_COMMAND_BUFFER_SIZE
-1

660 i‡(
n
) {

661 
comm™d_•i
[
n
] = '\000';

662 
	`ˇŒback
(

663 
≠p_¥iv©e
,

664 
	`•i_comm™d_to_≠p_guzzi_comm™d
(

665 &
comm™d
,

666 
comm™d_•i


671  
n
 ? 1 : 0;

672 
	}
}

674 
	$≠p_guzzi_comm™d_•i_öô
()

678 
	`as£π
(
RTEMS_SUCCESSFUL
 =
	`πems_io_ªgi°î_drivî
(

679 
RTEMS_DRIVER_AUTO_MAJOR
,

680 &
comm_¥Ÿocﬁ_dúvî_èbÀ
,

681 &
comm_¥Ÿocﬁ_maj‹


684 
	`as£π
(
RTEMS_SUCCESSFUL
 =
	`πems_io_öôülize
(

685 
comm_¥Ÿocﬁ_maj‹
,

687 &
comm_¥Ÿocﬁ_vc


689 
	`as£π
(
RTEMS_SUCCESSFUL
 =
	`πems_io_›í
(

690 
comm_¥Ÿocﬁ_maj‹
,

691 
APP_GUZZI_CAMMAND_SPI_VC_ID
,

692 
NULL


695 
	`nŸify_boŸ_ªady
();

696 
	}
}

	@cdk/apps/arch/ma2x5x/cdk_SrcIsp_1xIMX214/leon/app_guzzi_command_spi.h

35 #i‚de‡
_APP_GUZZI_COMMAND_SPI_H


36 
	#_APP_GUZZI_COMMAND_SPI_H


	)

38 #ifde‡
__˝lu•lus


42 
	~<≠p_guzzi_comm™d.h
>

44 
≠p_guzzi_comm™d_•i_öô
();

45 
≠p_guzzi_comm™d_•i_≥ek
(

46 *
≠p_¥iv©e
,

47 
≠p_guzzi_comm™d_ˇŒback_t
 *
ˇŒback


49 
≠p_guzzi_comm™d_•i_waô
(

50 *
≠p_¥iv©e
,

51 
≠p_guzzi_comm™d_ˇŒback_t
 *
ˇŒback


53 
≠p_guzzi_comm™d_•i_waô_timeout
(

54 *
≠p_¥iv©e
,

55 
≠p_guzzi_comm™d_ˇŒback_t
 *
ˇŒback
,

56 
uöt32_t
 
timeout_ms


59 #ifde‡
__˝lu•lus


	@cdk/apps/arch/ma2x5x/cdk_SrcIsp_1xIMX214/leon/brdDefines.h

1 #i‚de‡
BRD_DEFINES_H


2 
	#BRD_DEFINES_H


	)

4 #ifde‡
MV0182


5 
	#BOARD_REF_CLOCK_KHZ
 (12000)

	)

8 #ifde‡
MV0212


9 
	#BOARD_REF_CLOCK_KHZ
 (12000)

	)

12 #i‚de‡
BOARD_REF_CLOCK_KHZ


13 #îr‹ 
PÀa£
 
£À˘
 
¥›î
 
BOARD
 
ty≥


	@cdk/apps/arch/ma2x5x/cdk_SrcIsp_1xIMX214/leon/camera_control.c

35 
	~<oßl/oßl_°dty≥s.h
>

36 
	~<oßl/oßl_°dlib.h
>

37 
	~<oßl/oßl_muãx.h
>

38 
	~<utûs/mms_debug.h
>

40 
	~<ˇmîa.h
>

41 
	~<ˇmîa_c⁄fig_ödex.h
>

42 
	~<ˇmîa_c⁄fig_°ru˘.h
>

44 
	~"ˇmîa_c⁄åﬁ.h
"

46 
mmsdbg_deföe_v¨übÀ
(

47 
vdl_ˇmîa_c⁄åﬁ
,

48 
DL_DEFAULT
,

53 
	#MMSDEBUGLEVEL
 
	`mmsdbg_u£_v¨übÀ
(
vdl_ˇmîa_c⁄åﬁ
)

	)

55 #i‚de‡
GUZZI_INSTANCES_MAX


56 
	#GUZZI_INSTANCES_MAX
 3

	)

60 
ˇmîa_t
 *
	mˇmîa
;

61 
oßl_£m
 *
	mcmd_£m
;

62 
oßl_muãx
 *
	mc⁄fig_muãx
;

63 
	mc⁄figs_to_skù
;

64 
	m°›
;

65 
	m°¨t_îr
;

66 
guzzi_ˇmîa3_c⁄åﬁs_ˇ±uª_ªque°_guzzi_‰_id_t
 
	mguzzi_‰_id
;

67 } 
	tˇmîa_c⁄åﬁ_t
;

69 
ˇmîa_c⁄åﬁ_t
 
	gg_ˇmîa_c⁄åﬁ
[
GUZZI_INSTANCES_MAX
];

71 
	$ˇŒback
(

72 
ˇmîa_t
 *
ˇmîa
,

73 *
≠p_¥v_void
,

74 
ˇmîa_evít_t
 
evít
,

75 
d©™
,

76 *
d©≠


79 
ˇmîa_c⁄åﬁ_t
 *
ˇmîa_c⁄åﬁ
;

81 
ˇmîa_c⁄åﬁ
 = 
≠p_¥v_void
;

83 
	`UNUSED
(
ˇmîa
);

84 
	`UNUSED
(
d©≠
);

86 
evít
.
ty≥
) {

87 
CAMERA_EVENT_ERROR
:

88 
	`mmsdbg
(
DL_ERROR
, "Camera CB ERRORÉvent.");

90 
CAMERA_EVENT_ERROR_START
:

91 
	`mmsdbg
(
DL_ERROR
, "Camera CB ERROR_STARTÉvent.");

92 
ˇmîa_c⁄åﬁ
->
°¨t_îr
 = -1;

93 
	`oßl_£m_po°
(
ˇmîa_c⁄åﬁ
->
cmd_£m
);

95 
CAMERA_EVENT_START_DONE
:

96 
	`mmsdbg
(
DL_ERROR
, "Camera CB START_DONEÉvent.");

97 
	`oßl_£m_po°
(
ˇmîa_c⁄åﬁ
->
cmd_£m
);

99 
CAMERA_EVENT_STOP_DONE
:

100 
	`mmsdbg
(
DL_MESSAGE
, "Camera CB STOP_DONEÉvent.");

101 
	`oßl_£m_po°
(
ˇmîa_c⁄åﬁ
->
cmd_£m
);

103 
CAMERA_EVENT_FLUSH_DONE
:

104 
	`mmsdbg
(
DL_MESSAGE
, "Camera CB FLUSH_DONEÉvent.");

105 
	`oßl_£m_po°
(
ˇmîa_c⁄åﬁ
->
cmd_£m
);

107 
CAMERA_EVENT_PROCESS_DONE
:

108 
	`mmsdbg
(
DL_MESSAGE
, "Camera CB PROCESS_DONEÉvent.");

110 
CAMERA_EVENT_BUFFER_FLUSH
:

111 
	`mmsdbg
(
DL_MESSAGE
, "Camera CB BUFFER_FLUSHÉvent.");

113 
CAMERA_EVENT_GENERIC
:

114 
	`mmsdbg
(
DL_MESSAGE
, "Camî®CB GENERICÉvít: sub_ty≥=%d,Çum=%d.", 
evít
.
sub_ty≥
, 
d©™
);

116 
	`oßl_muãx_lock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

117 i‡(
ˇmîa_c⁄åﬁ
->
°›
 == 0)

119 i‡(!
ˇmîa_c⁄åﬁ
->
c⁄figs_to_skù
) {

120 
ˇmîa_c⁄åﬁ
->
guzzi_‰_id
.
v
++;

121 
	`ˇmîa_c⁄fig_£t_begö
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

122 
	`ˇmîa_c⁄fig_£t
(

123 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

124 
GUZZI_CAMERA3_INDEX_CONTROLS_CAPTURE_REQUEST_GUZZI_FR_ID
,

125 &
ˇmîa_c⁄åﬁ
->
guzzi_‰_id


127 
	`ˇmîa_c⁄fig_£t_íd
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

129 
ˇmîa_c⁄åﬁ
->
c⁄figs_to_skù
--;

132 
	`oßl_muãx_u∆ock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

135 
	`mmsdbg
(
DL_ERROR
, "Unk⁄w camî®evíà(%d)!", 
evít
.
v
);

137 
	}
}

139 
uöt32_t
 
	$ˇmîa_c⁄åﬁ_is_a˘ive
(
ˇm_id
)

141  (
g_ˇmîa_c⁄åﬁ
[
ˇm_id
].
ˇmîa
 !
NULL
);

142 
	}
}

145 
	$ˇmîa_c⁄åﬁ_°¨t
(
ˇm_id
)

147 
ˇmîa_c⁄åﬁ_t
 *
ˇmîa_c⁄åﬁ
;

148 
ˇmîa_¸óã_∑øms_t
 
¸óã_∑øms
;

149 
guzzi_ˇmîa3_dy«mic_c⁄åﬁ_af_mode_t
 
af_mode
;

150 
îr
;

152 
ˇmîa_c⁄åﬁ
 = &
g_ˇmîa_c⁄åﬁ
[
ˇm_id
];

154 
ˇmîa_c⁄åﬁ
->
cmd_£m
 = 
	`oßl_£m_¸óã
(0);

155 i‡(!
ˇmîa_c⁄åﬁ
->
cmd_£m
) {

156 
	`mmsdbg
(
DL_ERROR
, "FailedÅo create camera control command semphore!");

157 
exô1
;

159 
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
 = 
	`oßl_muãx_¸óã
();

160 i‡(!
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
) {

161 
	`mmsdbg
(
DL_ERROR
, "FailedÅo create camera control config mutex!");

162 
exô2
;

165 
¸óã_∑øms
.
ˇmîa_id
 = 
ˇm_id
;

166 
¸óã_∑øms
.
mode
 = 
CAMERA_MODE_MOV_CONFIG_DRIVEN
;

167 
¸óã_∑øms
.
dç_£rvî
 = 
NULL
;

168 
¸óã_∑øms
.
ˇŒback
 = callback;

169 
¸óã_∑øms
.
≠p_¥v
 = 
ˇmîa_c⁄åﬁ
;

170 
ˇmîa_c⁄åﬁ
->
ˇmîa
 = 
	`ˇmîa_¸óã
(&
¸óã_∑øms
);

171 i‡(!
ˇmîa_c⁄åﬁ
->
ˇmîa
) {

172 
	`mmsdbg
(
DL_ERROR
, "FailedÅo create camera!");

173 
exô3
;

176 #i‡
FULL_30FPS
 == 1

178 
guzzi_ˇmîa3_c⁄åﬁs_c⁄åﬁ_´_èrgë_Âs_ønge_t
 
èrgë_Âs_ønge
;

179 
èrgë_Âs_ønge
.
dim_size_1
 =

180 
GUZZI_CAMERA3_STATIC_CONTROL_AE_AVAILABLE_TARGET_FPS_RANGES_DIM_MAX_SIZE_1
;

181 
èrgë_Âs_ønge
.
v
[0] = 10;

182 
èrgë_Âs_ønge
.
v
[1] = 30;

184 
	`ˇmîa_c⁄fig_£t_begö
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

186 
îr
 +
	`ˇmîa_c⁄fig_£t
(

187 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

188 
GUZZI_CAMERA3_INDEX_CONTROLS_CAPTURE_REQUEST_GUZZI_FR_ID
,

189 &
ˇmîa_c⁄åﬁ
->
guzzi_‰_id


191 
îr
 +
	`ˇmîa_c⁄fig_£t
(

192 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

193 
GUZZI_CAMERA3_INDEX_CONTROLS_CONTROL_AE_TARGET_FPS_RANGE
,

194 &
èrgë_Âs_ønge


197 
	`ˇmîa_c⁄fig_£t_íd
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

200 
îr
 = 
	`ˇmîa_°¨t
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

201 i‡(
îr
) {

202 
	`mmsdbg
(
DL_ERROR
, "FailedÅo start camera!");

203 
exô3
;

205 
	`mmsdbg
(
DL_ERROR
, "Camîa_id = %d sèπed.\n", 
ˇm_id
);

206 
	`oßl_£m_waô
(
ˇmîa_c⁄åﬁ
->
cmd_£m
);

207 i‡(
ˇmîa_c⁄åﬁ
->
°¨t_îr
) {

208 
	`mmsdbg
(
DL_ERROR
, "FailedÅo start camera!");

209 
exô3
;

212 
ˇmîa_c⁄åﬁ
->
guzzi_‰_id
.
v
 = 0;

214 
	`oßl_muãx_lock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

216 
ˇmîa_c⁄åﬁ
->
guzzi_‰_id
.
v
++;

217 
af_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AF_MODE_OFF
;

218 
	`ˇmîa_c⁄fig_£t_begö
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

219 
	`ˇmîa_c⁄fig_£t
(

220 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

221 
GUZZI_CAMERA3_INDEX_CONTROLS_CAPTURE_REQUEST_GUZZI_FR_ID
,

222 &
ˇmîa_c⁄åﬁ
->
guzzi_‰_id


224 
	`ˇmîa_c⁄fig_£t
(

225 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

226 
GUZZI_CAMERA3_INDEX_CONTROLS_CONTROL_AF_MODE
,

227 &
af_mode


229 
	`ˇmîa_c⁄fig_£t_íd
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

231 
ˇmîa_c⁄åﬁ
->
guzzi_‰_id
.
v
++;

232 
	`ˇmîa_c⁄fig_£t_begö
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

233 
	`ˇmîa_c⁄fig_£t
(

234 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

235 
GUZZI_CAMERA3_INDEX_CONTROLS_CAPTURE_REQUEST_GUZZI_FR_ID
,

236 &
ˇmîa_c⁄åﬁ
->
guzzi_‰_id


238 
	`ˇmîa_c⁄fig_£t_íd
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

240 
ˇmîa_c⁄åﬁ
->
guzzi_‰_id
.
v
++;

241 
	`ˇmîa_c⁄fig_£t_begö
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

242 
	`ˇmîa_c⁄fig_£t
(

243 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

244 
GUZZI_CAMERA3_INDEX_CONTROLS_CAPTURE_REQUEST_GUZZI_FR_ID
,

245 &
ˇmîa_c⁄åﬁ
->
guzzi_‰_id


247 
	`ˇmîa_c⁄fig_£t_íd
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

249 
ˇmîa_c⁄åﬁ
->
c⁄figs_to_skù
 = 0;

251 
	`oßl_muãx_u∆ock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

256 
exô3
:

257 
	`oßl_muãx_de°roy
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

258 
exô2
:

259 
	`oßl_£m_de°roy
(
ˇmîa_c⁄åﬁ
->
cmd_£m
);

260 
exô1
:

261 
ˇmîa_c⁄åﬁ
->
ˇmîa
 = 
NULL
;

263 
	}
}

265 
	$ˇmîa_c⁄åﬁ_°›
(
ˇm_id
)

267 
ˇmîa_c⁄åﬁ_t
 *
ˇmîa_c⁄åﬁ
;

269 
ˇmîa_c⁄åﬁ
 = &
g_ˇmîa_c⁄åﬁ
[
ˇm_id
];

270 
îr
;

272 i‡(!
ˇmîa_c⁄åﬁ
->
ˇmîa
) {

275 
	`oßl_muãx_lock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

276 
ˇmîa_c⁄åﬁ
->
°›
 = 1;

277 
	`oßl_muãx_u∆ock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

279 
	`ˇmîa_Êush
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

280 
	`oßl_£m_waô
(
ˇmîa_c⁄åﬁ
->
cmd_£m
);

282 
îr
 = 
	`ˇmîa_°›
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

283 i‡(
îr
) {

284 
	`mmsdbg
(
DL_ERROR
, "FailedÅo stop camera!");

286 
	`oßl_£m_waô
(
ˇmîa_c⁄åﬁ
->
cmd_£m
);

287 
	`mmsdbg
(
DL_ERROR
, "Camî®id = %d st›≥d.\n", 
ˇm_id
);

289 
	`ˇmîa_de°roy
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

290 
	`oßl_muãx_de°roy
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

291 
	`oßl_£m_de°roy
(
ˇmîa_c⁄åﬁ
->
cmd_£m
);

293 
ˇmîa_c⁄åﬁ
->
ˇmîa
 = 
NULL
;

294 
ˇmîa_c⁄åﬁ
->
°›
 = 0;

295 
	}
}

297 
	$ˇmîa_c⁄åﬁ_ˇ±uª
(
ˇm_id
)

299 
ˇmîa_c⁄åﬁ_t
 *
ˇmîa_c⁄åﬁ
;

300 
guzzi_ˇmîa3_c⁄åﬁs_c⁄åﬁ_ˇ±uª_öã¡_t
 
öã¡_ªq
;

301 
îr
;

303 
ˇmîa_c⁄åﬁ
 = &
g_ˇmîa_c⁄åﬁ
[
ˇm_id
];

305 
	`oßl_muãx_lock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

307 
ˇmîa_c⁄åﬁ
->
guzzi_‰_id
.
v
++;

308 
öã¡_ªq
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_CAPTURE_INTENT_ZERO_SHUTTER_LAG
;

309 
	`ˇmîa_c⁄fig_£t_begö
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

310 
îr
 = 
	`ˇmîa_c⁄fig_£t
(

311 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

312 
GUZZI_CAMERA3_INDEX_CONTROLS_CAPTURE_REQUEST_GUZZI_FR_ID
,

313 &
ˇmîa_c⁄åﬁ
->
guzzi_‰_id


315 
îr
 +
	`ˇmîa_c⁄fig_£t
(

316 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

317 
GUZZI_CAMERA3_INDEX_CONTROLS_CONTROL_CAPTURE_INTENT
,

318 &
öã¡_ªq


320 
	`ˇmîa_c⁄fig_£t_íd
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

322 
ˇmîa_c⁄åﬁ
->
guzzi_‰_id
.
v
++;

323 
öã¡_ªq
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_CAPTURE_INTENT_PREVIEW
;

324 
	`ˇmîa_c⁄fig_£t_begö
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

325 
îr
 +
	`ˇmîa_c⁄fig_£t
(

326 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

327 
GUZZI_CAMERA3_INDEX_CONTROLS_CAPTURE_REQUEST_GUZZI_FR_ID
,

328 &
ˇmîa_c⁄åﬁ
->
guzzi_‰_id


330 
îr
 +
	`ˇmîa_c⁄fig_£t
(

331 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

332 
GUZZI_CAMERA3_INDEX_CONTROLS_CONTROL_CAPTURE_INTENT
,

333 &
öã¡_ªq


335 
	`ˇmîa_c⁄fig_£t_íd
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

337 i‡(
îr
) {

338 
	`mmsdbg
(
DL_ERROR
, "Capture failed.\n");

340 
	`mmsdbg
(
DL_ERROR
, "Camî®id = %d c≠tuª suc˚eded.\n", 
ˇm_id
);

343 
ˇmîa_c⁄åﬁ
->
c⁄figs_to_skù
 = 1;

345 
	`oßl_muãx_u∆ock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

346 
	}
}

348 
	$ˇmîa_c⁄åﬁ_Àns_move
(
ˇm_id
, 
Àns_posôi⁄
)

350 
ˇmîa_c⁄åﬁ_t
 *
ˇmîa_c⁄åﬁ
;

351 
guzzi_ˇmîa3_c⁄åﬁs_Àns_foˇl_Àngth_t
 
foc_Àn
;

352 
guzzi_ˇmîa3_dy«mic_c⁄åﬁ_af_mode_t
 
af_mode
;

353 
îr
;

355 
ˇmîa_c⁄åﬁ
 = &
g_ˇmîa_c⁄åﬁ
[
ˇm_id
];

357 i‡(
Àns_posôi⁄
 > 255) {

358 
Àns_posôi⁄
 = 255;

361 i‡(
Àns_posôi⁄
 < 0) {

362 
Àns_posôi⁄
 = 0;

365 
foc_Àn
.
v
 = (Ë
Àns_posôi⁄
 / 255.0;

366 
af_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AF_MODE_OFF
;

368 
	`oßl_muãx_lock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

370 
ˇmîa_c⁄åﬁ
->
guzzi_‰_id
.
v
++;

372 
	`ˇmîa_c⁄fig_£t_begö
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

373 
îr
 = 
	`ˇmîa_c⁄fig_£t
(

374 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

375 
GUZZI_CAMERA3_INDEX_CONTROLS_CAPTURE_REQUEST_GUZZI_FR_ID
,

376 &
ˇmîa_c⁄åﬁ
->
guzzi_‰_id


378 
îr
 +
	`ˇmîa_c⁄fig_£t
(

379 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

380 
GUZZI_CAMERA3_INDEX_CONTROLS_CONTROL_AF_MODE
,

381 &
af_mode


383 
îr
 +
	`ˇmîa_c⁄fig_£t
(

384 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

385 
GUZZI_CAMERA3_INDEX_CONTROLS_LENS_FOCAL_LENGTH
,

386 &
foc_Àn


388 
	`ˇmîa_c⁄fig_£t_íd
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

389 i‡(
îr
) {

390 
	`mmsdbg
(
DL_ERROR
, "Lens move failed.\n");

392 
	`mmsdbg
(
DL_ERROR
, "Lí†movêsuc˚eded camîa_id = %d,Üís_posôi⁄ = %d.\n", 
ˇm_id
, 
Àns_posôi⁄
);

395 
ˇmîa_c⁄åﬁ
->
c⁄figs_to_skù
 = 1;

397 
	`oßl_muãx_u∆ock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

398 
	}
}

400 
	$ˇmîa_c⁄åﬁ_focus_åiggî
(
ˇm_id
)

402 
ˇmîa_c⁄åﬁ_t
 *
ˇmîa_c⁄åﬁ
;

403 
guzzi_ˇmîa3_dy«mic_c⁄åﬁ_af_mode_t
 
af_mode
;

404 
guzzi_ˇmîa3_dy«mic_c⁄åﬁ_af_åiggî_id_t
 
af_åiggî
;

405 
îr
;

407 
ˇmîa_c⁄åﬁ
 = &
g_ˇmîa_c⁄åﬁ
[
ˇm_id
];

409 
af_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AF_MODE_AUTO
;

410 
af_åiggî
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AF_TRIGGER_START
;

412 
	`oßl_muãx_lock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

414 
ˇmîa_c⁄åﬁ
->
guzzi_‰_id
.
v
++;

415 
	`ˇmîa_c⁄fig_£t_begö
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

416 
îr
 = 
	`ˇmîa_c⁄fig_£t
(

417 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

418 
GUZZI_CAMERA3_INDEX_CONTROLS_CAPTURE_REQUEST_GUZZI_FR_ID
,

419 &
ˇmîa_c⁄åﬁ
->
guzzi_‰_id


421 
îr
 +
	`ˇmîa_c⁄fig_£t
(

422 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

423 
GUZZI_CAMERA3_INDEX_CONTROLS_CONTROL_AF_MODE
,

424 &
af_mode


426 
îr
 +
	`ˇmîa_c⁄fig_£t
(

427 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

428 
GUZZI_CAMERA3_INDEX_CONTROLS_CONTROL_AF_TRIGGER
,

429 &
af_åiggî


431 
	`ˇmîa_c⁄fig_£t_íd
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

432 i‡(
îr
) {

433 
	`mmsdbg
(
DL_ERROR
, "FocusÅrigger failed.\n");

435 
	`mmsdbg
(
DL_ERROR
,

436 "Focu†åiggî suc˚eded camîa_id = %d.\n", 
ˇm_id
);

438 
ˇmîa_c⁄åﬁ
->
c⁄figs_to_skù
 = 1;

439 
	`oßl_muãx_u∆ock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

440 
	}
}

442 
	$ˇmîa_c⁄åﬁ_´_m™uÆ
(

443 
ˇm_id
,

444 
uöt32_t
 
time_us
,

445 
uöt32_t
 
£nsôivôy_iso
,

446 
uöt32_t
 
‰ame_duøti⁄_us


449 
ˇmîa_c⁄åﬁ_t
 *
ˇmîa_c⁄åﬁ
;

450 
guzzi_ˇmîa3_dy«mic_£ns‹_exposuª_time_t
 
£ns‹_exposuª_time
;

451 
guzzi_ˇmîa3_dy«mic_£ns‹_£nsôivôy_t
 
£ns‹_£nsôivôy
;

452 
guzzi_ˇmîa3_dy«mic_£ns‹_‰ame_duøti⁄_t
 
£ns‹_‰ame_duøti⁄
;

453 
guzzi_ˇmîa3_c⁄åﬁs_c⁄åﬁ_´_mode_t
 
´_mode
;

454 
îr
;

456 
ˇmîa_c⁄åﬁ
 = &
g_ˇmîa_c⁄åﬁ
[
ˇm_id
];

458 
£ns‹_exposuª_time
.
v
 = 1000 * 
time_us
;

459 
£ns‹_£nsôivôy
.
v
 = 
£nsôivôy_iso
;

460 
£ns‹_‰ame_duøti⁄
.
v
 = 1000 * 
‰ame_duøti⁄_us
;

461 
´_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AE_MODE_OFF
;

463 
	`oßl_muãx_lock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

465 
ˇmîa_c⁄åﬁ
->
guzzi_‰_id
.
v
++;

466 
	`ˇmîa_c⁄fig_£t_begö
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

467 
îr
 = 
	`ˇmîa_c⁄fig_£t
(

468 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

469 
GUZZI_CAMERA3_INDEX_CONTROLS_CAPTURE_REQUEST_GUZZI_FR_ID
,

470 &
ˇmîa_c⁄åﬁ
->
guzzi_‰_id


472 
îr
 +
	`ˇmîa_c⁄fig_£t
(

473 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

474 
GUZZI_CAMERA3_INDEX_CONTROLS_SENSOR_EXPOSURE_TIME
,

475 &
£ns‹_exposuª_time


477 
îr
 +
	`ˇmîa_c⁄fig_£t
(

478 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

479 
GUZZI_CAMERA3_INDEX_CONTROLS_SENSOR_SENSITIVITY
,

480 &
£ns‹_£nsôivôy


482 
îr
 +
	`ˇmîa_c⁄fig_£t
(

483 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

484 
GUZZI_CAMERA3_INDEX_CONTROLS_SENSOR_FRAME_DURATION
,

485 &
£ns‹_‰ame_duøti⁄


487 
îr
 +
	`ˇmîa_c⁄fig_£t
(

488 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

489 
GUZZI_CAMERA3_INDEX_CONTROLS_CONTROL_AE_MODE
,

490 &
´_mode


492 
	`ˇmîa_c⁄fig_£t_íd
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

493 i‡(
îr
) {

494 
	`mmsdbg
(
DL_ERROR
, "Manualáe failed.\n");

496 
	`mmsdbg
(
DL_ERROR
,

499 
ˇm_id
, ()
time_us
, ()
£nsôivôy_iso
, ()
‰ame_duøti⁄_us
);

501 
ˇmîa_c⁄åﬁ
->
c⁄figs_to_skù
 = 1;

502 
	`oßl_muãx_u∆ock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

503 
	}
}

505 
	$ˇmîa_c⁄åﬁ_´_auto
(
ˇm_id
, 
uöt32_t
 
Êash_mode
)

507 
ˇmîa_c⁄åﬁ_t
 *
ˇmîa_c⁄åﬁ
;

508 
guzzi_ˇmîa3_c⁄åﬁs_c⁄åﬁ_´_mode_t
 
´_mode
;

509 
îr
;

511 
ˇmîa_c⁄åﬁ
 = &
g_ˇmîa_c⁄åﬁ
[
ˇm_id
];

513 
Êash_mode
) {

514 
CAMERA_CONTROL__AE_AUTO__FLASH_MODE__OFF
:

515 
´_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AE_MODE_ON
;

517 
CAMERA_CONTROL__AE_AUTO__FLASH_MODE__AUTO
:

518 
´_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AE_MODE_ON_AUTO_FLASH
;

520 
CAMERA_CONTROL__AE_AUTO__FLASH_MODE__ALWAYS
:

521 
´_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AE_MODE_ON_ALWAYS_FLASH
;

523 
CAMERA_CONTROL__AE_AUTO__FLASH_MODE__AUTO_REDEYE
:

524 
´_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AE_MODE_ON_AUTO_FLASH_REDEYE
;

527 
	`mmsdbg
(
DL_ERROR
, "Unknow¿Êash mode: %d!", ()
Êash_mode
);

531 
	`oßl_muãx_lock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

533 
ˇmîa_c⁄åﬁ
->
guzzi_‰_id
.
v
++;

534 
	`ˇmîa_c⁄fig_£t_begö
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

535 
îr
 = 
	`ˇmîa_c⁄fig_£t
(

536 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

537 
GUZZI_CAMERA3_INDEX_CONTROLS_CAPTURE_REQUEST_GUZZI_FR_ID
,

538 &
ˇmîa_c⁄åﬁ
->
guzzi_‰_id


540 
îr
 +
	`ˇmîa_c⁄fig_£t
(

541 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

542 
GUZZI_CAMERA3_INDEX_CONTROLS_CONTROL_AE_MODE
,

543 &
´_mode


545 
	`ˇmîa_c⁄fig_£t_íd
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

546 i‡(
îr
) {

547 
	`mmsdbg
(
DL_ERROR
, "Autoáe failed.\n");

549 
	`mmsdbg
(
DL_ERROR
,

550 "Autÿ´ suc˚eded camîa_id = %d.\n", 
ˇm_id
);

552 
ˇmîa_c⁄åﬁ
->
c⁄figs_to_skù
 = 1;

553 
	`oßl_muãx_u∆ock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

554 
	}
}

556 
	$ˇmîa_c⁄åﬁ_awb_mode
(
ˇm_id
, 
uöt32_t
 
mode
)

558 
ˇmîa_c⁄åﬁ_t
 *
ˇmîa_c⁄åﬁ
;

559 
guzzi_ˇmîa3_c⁄åﬁs_c⁄åﬁ_awb_mode_t
 
awb_mode
;

560 
guzzi_ˇmîa3_c⁄åﬁs_c⁄åﬁ_mode_t
 
˘æ_mode
;

561 
îr
;

563 
ˇmîa_c⁄åﬁ
 = &
g_ˇmîa_c⁄åﬁ
[
ˇm_id
];

564 
˘æ_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_MODE_AUTO
;

566 
mode
) {

567 
CAMERA_CONTROL__AWB_MODE__OFF
:

568 
awb_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AWB_MODE_OFF
;

570 
CAMERA_CONTROL__AWB_MODE__AUTO
:

571 
awb_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AWB_MODE_AUTO
;

573 
CAMERA_CONTROL__AWB_MODE__INCANDESCENT
:

574 
awb_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AWB_MODE_INCANDESCENT
;

576 
CAMERA_CONTROL__AWB_MODE__FLUORESCENT
:

577 
awb_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AWB_MODE_FLUORESCENT
;

579 
CAMERA_CONTROL__AWB_MODE__WARM_FLUORESCENT
:

580 
awb_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AWB_MODE_WARM_FLUORESCENT
;

582 
CAMERA_CONTROL__AWB_MODE__DAYLIGHT
:

583 
awb_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AWB_MODE_DAYLIGHT
;

585 
CAMERA_CONTROL__AWB_MODE__CLOUDY_DAYLIGHT
:

586 
awb_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AWB_MODE_CLOUDY_DAYLIGHT
;

588 
CAMERA_CONTROL__AWB_MODE__TWILIGHT
:

589 
awb_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AWB_MODE_TWILIGHT
;

591 
CAMERA_CONTROL__AWB_MODE__SHADE
:

592 
awb_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AWB_MODE_SHADE
;

595 
	`mmsdbg
(
DL_ERROR
, "Unknow¿awb mode: %d!", ()
mode
);

599 
	`oßl_muãx_lock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

601 
ˇmîa_c⁄åﬁ
->
guzzi_‰_id
.
v
++;

602 
	`ˇmîa_c⁄fig_£t_begö
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

603 
îr
 = 
	`ˇmîa_c⁄fig_£t
(

604 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

605 
GUZZI_CAMERA3_INDEX_CONTROLS_CAPTURE_REQUEST_GUZZI_FR_ID
,

606 &
ˇmîa_c⁄åﬁ
->
guzzi_‰_id


609 
îr
 +
	`ˇmîa_c⁄fig_£t
(

610 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

611 
GUZZI_CAMERA3_INDEX_CONTROLS_CONTROL_MODE
,

612 &
˘æ_mode


614 
îr
 +
	`ˇmîa_c⁄fig_£t
(

615 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

616 
GUZZI_CAMERA3_INDEX_CONTROLS_CONTROL_AWB_MODE
,

617 &
awb_mode


619 
	`ˇmîa_c⁄fig_£t_íd
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

620 i‡(
îr
) {

621 
	`mmsdbg
(
DL_ERROR
, "Setáwb mode failed.\n");

623 
	`mmsdbg
(
DL_ERROR
,

624 "Awb modê£àsuc˚eded camîa_id = %d, modê%d.\n", 
ˇm_id
, ()
mode
);

626 
ˇmîa_c⁄åﬁ
->
c⁄figs_to_skù
 = 1;

627 
	`oßl_muãx_u∆ock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

628 
	}
}

630 
	$ˇmîa_c⁄åﬁ_s˚√_mode
(
ˇm_id
, 
uöt32_t
 
mode
)

632 
ˇmîa_c⁄åﬁ_t
 *
ˇmîa_c⁄åﬁ
;

633 
guzzi_ˇmîa3_c⁄åﬁs_c⁄åﬁ_s˚√_mode_t
 
s˚√_mode
;

634 
îr
;

636 
ˇmîa_c⁄åﬁ
 = &
g_ˇmîa_c⁄åﬁ
[
ˇm_id
];

638 
mode
) {

639 
CAMERA_CONTROL__SCENE_MODE__UNSUPPORTED
:

640 
s˚√_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_SCENE_MODE_UNSUPPORTED
;

642 
CAMERA_CONTROL__SCENE_MODE__FACE_PRIORITY
:

643 
s˚√_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_SCENE_MODE_FACE_PRIORITY
;

645 
CAMERA_CONTROL__SCENE_MODE__ACTION
:

646 
s˚√_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_SCENE_MODE_ACTION
;

648 
CAMERA_CONTROL__SCENE_MODE__PORTRAIT
:

649 
s˚√_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_SCENE_MODE_PORTRAIT
;

651 
CAMERA_CONTROL__SCENE_MODE__LANDSCAPE
:

652 
s˚√_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_SCENE_MODE_LANDSCAPE
;

654 
CAMERA_CONTROL__SCENE_MODE__NIGHT
:

655 
s˚√_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_SCENE_MODE_NIGHT
;

657 
CAMERA_CONTROL__SCENE_MODE__NIGHT_PORTRAIT
:

658 
s˚√_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_SCENE_MODE_NIGHT_PORTRAIT
;

660 
CAMERA_CONTROL__SCENE_MODE__THEATRE
:

661 
s˚√_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_SCENE_MODE_THEATRE
;

663 
CAMERA_CONTROL__SCENE_MODE__BEACH
:

664 
s˚√_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_SCENE_MODE_BEACH
;

666 
CAMERA_CONTROL__SCENE_MODE__SNOW
:

667 
s˚√_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_SCENE_MODE_SNOW
;

669 
CAMERA_CONTROL__SCENE_MODE__SUNSET
:

670 
s˚√_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_SCENE_MODE_SUNSET
;

672 
CAMERA_CONTROL__SCENE_MODE__STEADYPHOTO
:

673 
s˚√_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_SCENE_MODE_STEADYPHOTO
;

675 
CAMERA_CONTROL__SCENE_MODE__FIREWORKS
:

676 
s˚√_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_SCENE_MODE_FIREWORKS
;

678 
CAMERA_CONTROL__SCENE_MODE__SPORTS
:

679 
s˚√_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_SCENE_MODE_SPORTS
;

681 
CAMERA_CONTROL__SCENE_MODE__PARTY
:

682 
s˚√_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_SCENE_MODE_PARTY
;

684 
CAMERA_CONTROL__SCENE_MODE__CANDLELIGHT
:

685 
s˚√_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_SCENE_MODE_CANDLELIGHT
;

687 
CAMERA_CONTROL__SCENE_MODE__BARCODE
:

688 
s˚√_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_SCENE_MODE_BARCODE
;

691 
	`mmsdbg
(
DL_ERROR
, "Unknow¿awb mode: %d!", ()
mode
);

695 
	`oßl_muãx_lock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

697 
ˇmîa_c⁄åﬁ
->
guzzi_‰_id
.
v
++;

698 
	`ˇmîa_c⁄fig_£t_begö
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

699 
îr
 = 
	`ˇmîa_c⁄fig_£t
(

700 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

701 
GUZZI_CAMERA3_INDEX_CONTROLS_CAPTURE_REQUEST_GUZZI_FR_ID
,

702 &
ˇmîa_c⁄åﬁ
->
guzzi_‰_id


706 
îr
 +
	`ˇmîa_c⁄fig_£t
(

707 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

708 
GUZZI_CAMERA3_INDEX_CONTROLS_CONTROL_SCENE_MODE
,

709 &
s˚√_mode


711 
	`ˇmîa_c⁄fig_£t_íd
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

712 i‡(
îr
) {

713 
	`mmsdbg
(
DL_ERROR
, "Set scene mode failed.\n");

715 
	`mmsdbg
(
DL_ERROR
,

716 "S˚√ modê£àsuc˚eded camîa_id = %d, modê%d.\n", 
ˇm_id
, ()
mode
);

718 
ˇmîa_c⁄åﬁ
->
c⁄figs_to_skù
 = 1;

719 
	`oßl_muãx_u∆ock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

720 
	}
}

722 
	$ˇmîa_c⁄åﬁ_™tib™dög_mode
(
ˇm_id
, 
uöt32_t
 
mode
)

724 
ˇmîa_c⁄åﬁ_t
 *
ˇmîa_c⁄åﬁ
;

725 
guzzi_ˇmîa3_c⁄åﬁs_c⁄åﬁ_´_™tib™dög_mode_t
 
™tib™dög_mode
;

726 
îr
;

728 
ˇmîa_c⁄åﬁ
 = &
g_ˇmîa_c⁄åﬁ
[
ˇm_id
];

730 
mode
) {

731 
CAMERA_CONTROL__AE_ANTIBANDING_MODE__OFF
:

732 
™tib™dög_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AE_ANTIBANDING_MODE_OFF
;

734 
CAMERA_CONTROL__AE_ANTIBANDING_MODE__50HZ
:

735 
™tib™dög_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AE_ANTIBANDING_MODE_50HZ
;

737 
CAMERA_CONTROL__AE_ANTIBANDING_MODE__60HZ
:

738 
™tib™dög_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AE_ANTIBANDING_MODE_60HZ
;

740 
CAMERA_CONTROL__AE_ANTIBANDING_MODE__AUTO
:

741 
™tib™dög_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AE_ANTIBANDING_MODE_AUTO
;

744 
	`mmsdbg
(
DL_ERROR
, "Unknow¿™tib™dög mode: %d!", ()
mode
);

748 
	`oßl_muãx_lock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

750 
ˇmîa_c⁄åﬁ
->
guzzi_‰_id
.
v
++;

751 
	`ˇmîa_c⁄fig_£t_begö
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

752 
îr
 = 
	`ˇmîa_c⁄fig_£t
(

753 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

754 
GUZZI_CAMERA3_INDEX_CONTROLS_CAPTURE_REQUEST_GUZZI_FR_ID
,

755 &
ˇmîa_c⁄åﬁ
->
guzzi_‰_id


757 
îr
 +
	`ˇmîa_c⁄fig_£t
(

758 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

759 
GUZZI_CAMERA3_INDEX_CONTROLS_CONTROL_AE_ANTIBANDING_MODE
,

760 &
™tib™dög_mode


762 
	`ˇmîa_c⁄fig_£t_íd
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

763 i‡(
îr
) {

764 
	`mmsdbg
(
DL_ERROR
, "Setántibanding mode failed.\n");

766 
	`mmsdbg
(
DL_ERROR
,

767 "A¡ib™dög modê£àsuc˚eded camîa_id = %d, modê%d.\n", 
ˇm_id
, ()
mode
);

769 
ˇmîa_c⁄åﬁ
->
c⁄figs_to_skù
 = 1;

770 
	`oßl_muãx_u∆ock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

771 
	}
}

773 
	$ˇmîa_c⁄åﬁ_´_lock_mode
(
ˇm_id
, 
uöt32_t
 
mode
)

775 
ˇmîa_c⁄åﬁ_t
 *
ˇmîa_c⁄åﬁ
;

776 
guzzi_ˇmîa3_c⁄åﬁs_c⁄åﬁ_´_lock_t
 
´_lock_mode
;

777 
îr
;

779 
ˇmîa_c⁄åﬁ
 = &
g_ˇmîa_c⁄åﬁ
[
ˇm_id
];

781 
mode
) {

782 
CAMERA_CONTROL__AE_LOCK__OFF
:

783 
´_lock_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AE_LOCK_OFF
;

785 
CAMERA_CONTROL__AE_LOCK__ON
:

786 
´_lock_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AE_LOCK_ON
;

789 
	`mmsdbg
(
DL_ERROR
, "Unknow¿´_lock comm™d: %d!", ()
mode
);

793 
	`oßl_muãx_lock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

795 
ˇmîa_c⁄åﬁ
->
guzzi_‰_id
.
v
++;

796 
	`ˇmîa_c⁄fig_£t_begö
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

797 
îr
 = 
	`ˇmîa_c⁄fig_£t
(

798 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

799 
GUZZI_CAMERA3_INDEX_CONTROLS_CAPTURE_REQUEST_GUZZI_FR_ID
,

800 &
ˇmîa_c⁄åﬁ
->
guzzi_‰_id


802 
îr
 +
	`ˇmîa_c⁄fig_£t
(

803 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

804 
GUZZI_CAMERA3_INDEX_CONTROLS_CONTROL_AE_LOCK
,

805 &
´_lock_mode


807 
	`ˇmîa_c⁄fig_£t_íd
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

808 i‡(
îr
) {

809 
	`mmsdbg
(
DL_ERROR
, "Setáe_lock control mode failed.\n");

811 
	`mmsdbg
(
DL_ERROR
,

812 "Ae_lock c⁄åﬁ suc˚eded: camîa_id = %d, modê%d.\n", 
ˇm_id
, ()
mode
);

814 
ˇmîa_c⁄åﬁ
->
c⁄figs_to_skù
 = 1;

815 
	`oßl_muãx_u∆ock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

816 
	}
}

818 
	$ˇmîa_c⁄åﬁ_´_èrgë_Âs_ønge
(
ˇm_id
, 
uöt32_t
 
mö_Âs
, uöt32_à
max_Âs
)

820 
ˇmîa_c⁄åﬁ_t
 *
ˇmîa_c⁄åﬁ
;

821 
guzzi_ˇmîa3_c⁄åﬁs_c⁄åﬁ_´_èrgë_Âs_ønge_t
 
èrgë_Âs_ønge
;

822 
guzzi_ˇmîa3_°©ic_c⁄åﬁ_´_avaûabÀ_èrgë_Âs_ønges_t
 
check
;

823 
îr
;

825 
ˇmîa_c⁄åﬁ
 = &
g_ˇmîa_c⁄åﬁ
[
ˇm_id
];

826 
èrgë_Âs_ønge
.
dim_size_1
 =

827 
GUZZI_CAMERA3_STATIC_CONTROL_AE_AVAILABLE_TARGET_FPS_RANGES_DIM_MAX_SIZE_1
;

828 
èrgë_Âs_ønge
.
v
[0] = 
mö_Âs
;

829 
èrgë_Âs_ønge
.
v
[1] = 
max_Âs
;

831 
	`ˇmîa_c⁄fig_gë
(

832 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

833 
GUZZI_CAMERA3_INDEX_STATIC_CONTROL_AE_AVAILABLE_TARGET_FPS_RANGES
,

834 &
check


836 
	`mmsdbg
(
DL_ERROR
, "AvailableÑanges: dim1:%d, dim2:%d\n",

837 
check
.
dim_size_1
, check.
dim_size_2
);

839 
	`oßl_muãx_lock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

841 
ˇmîa_c⁄åﬁ
->
guzzi_‰_id
.
v
++;

842 
	`ˇmîa_c⁄fig_£t_begö
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

843 
îr
 = 
	`ˇmîa_c⁄fig_£t
(

844 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

845 
GUZZI_CAMERA3_INDEX_CONTROLS_CAPTURE_REQUEST_GUZZI_FR_ID
,

846 &
ˇmîa_c⁄åﬁ
->
guzzi_‰_id


848 
îr
 +
	`ˇmîa_c⁄fig_£t
(

849 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

850 
GUZZI_CAMERA3_INDEX_CONTROLS_CONTROL_AE_TARGET_FPS_RANGE
,

851 &
èrgë_Âs_ønge


853 
	`ˇmîa_c⁄fig_£t_íd
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

854 i‡(
îr
) {

855 
	`mmsdbg
(
DL_ERROR
, "SetÅarget_fps control mode failed.\n");

857 
	`mmsdbg
(
DL_ERROR
,

859 
ˇm_id
, ()
mö_Âs
, ()
max_Âs
);

861 
ˇmîa_c⁄åﬁ
->
c⁄figs_to_skù
 = 1;

862 
	`oßl_muãx_u∆ock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

863 
	}
}

865 
	$ˇmîa_c⁄åﬁ_awb_lock_mode
(
ˇm_id
, 
uöt32_t
 
ty≥
)

867 
ˇmîa_c⁄åﬁ_t
 *
ˇmîa_c⁄åﬁ
;

868 
guzzi_ˇmîa3_c⁄åﬁs_c⁄åﬁ_awb_lock_t
 
awb_lock_c⁄åﬁ
;

869 
guzzi_ˇmîa3_c⁄åﬁs_c⁄åﬁ_awb_mode_t
 
awb_mode
;

870 
îr
;

872 
ˇmîa_c⁄åﬁ
 = &
g_ˇmîa_c⁄åﬁ
[
ˇm_id
];

873 
awb_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AWB_MODE_AUTO
;

875 
ty≥
) {

876 
CAMERA_CONTROL__AWB_LOCK__OFF
:

877 
awb_lock_c⁄åﬁ
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AWB_LOCK_OFF
;

879 
CAMERA_CONTROL__AWB_LOCK__ON
:

880 
awb_lock_c⁄åﬁ
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AWB_LOCK_ON
;

883 
	`mmsdbg
(
DL_ERROR
, "Unknow¿awb_lock comm™d: %d!", ()
ty≥
);

887 
	`oßl_muãx_lock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

889 
ˇmîa_c⁄åﬁ
->
guzzi_‰_id
.
v
++;

890 
	`ˇmîa_c⁄fig_£t_begö
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

891 
îr
 = 
	`ˇmîa_c⁄fig_£t
(

892 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

893 
GUZZI_CAMERA3_INDEX_CONTROLS_CAPTURE_REQUEST_GUZZI_FR_ID
,

894 &
ˇmîa_c⁄åﬁ
->
guzzi_‰_id


896 
îr
 +
	`ˇmîa_c⁄fig_£t
(

897 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

898 
GUZZI_CAMERA3_INDEX_CONTROLS_CONTROL_AWB_MODE
,

899 &
awb_mode


901 
îr
 +
	`ˇmîa_c⁄fig_£t
(

902 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

903 
GUZZI_CAMERA3_INDEX_CONTROLS_CONTROL_AWB_LOCK
,

904 &
awb_lock_c⁄åﬁ


906 
	`ˇmîa_c⁄fig_£t_íd
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

907 i‡(
îr
) {

908 
	`mmsdbg
(
DL_ERROR
, "Setáwb_lock control mode failed.\n");

910 
	`mmsdbg
(
DL_ERROR
,

911 "Awb_lock c⁄åﬁ suc˚eded: camîa_id = %d, modê%d.\n", 
ˇm_id
, ()
ty≥
);

913 
ˇmîa_c⁄åﬁ
->
c⁄figs_to_skù
 = 1;

914 
	`oßl_muãx_u∆ock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

915 
	}
}

917 
	$ˇmîa_c⁄åﬁ_ˇ±uª_öã¡
(
ˇm_id
, 
uöt32_t
 
mode
)

919 
ˇmîa_c⁄åﬁ_t
 *
ˇmîa_c⁄åﬁ
;

920 
guzzi_ˇmîa3_c⁄åﬁs_c⁄åﬁ_ˇ±uª_öã¡_t
 
ˇ±uª_öã¡
;

921 
guzzi_ˇmîa3_c⁄åﬁs_c⁄åﬁ_mode_t
 
˘æ_mode
;

922 
îr
;

924 
ˇmîa_c⁄åﬁ
 = &
g_ˇmîa_c⁄åﬁ
[
ˇm_id
];

925 
˘æ_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_MODE_AUTO
;

927 
mode
) {

928 
CAMERA_CONTROL__CAPTURE_INTENT__CUSTOM
:

929 
ˇ±uª_öã¡
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_CAPTURE_INTENT_CUSTOM
;

931 
CAMERA_CONTROL__CAPTURE_INTENT__PREVIEW
:

932 
ˇ±uª_öã¡
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_CAPTURE_INTENT_PREVIEW
;

934 
CAMERA_CONTROL__CAPTURE_INTENT__STILL_CAPTURE
:

935 
ˇ±uª_öã¡
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_CAPTURE_INTENT_STILL_CAPTURE
;

937 
CAMERA_CONTROL__CAPTURE_INTENT__VIDEO_RECORD
:

938 
ˇ±uª_öã¡
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_CAPTURE_INTENT_VIDEO_RECORD
;

940 
CAMERA_CONTROL__CAPTURE_INTENT__VIDEO_SNAPSHOT
:

941 
ˇ±uª_öã¡
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_CAPTURE_INTENT_VIDEO_SNAPSHOT
;

943 
CAMERA_CONTROL__CAPTURE_INTENT__ZERO_SHUTTER_LAG
:

944 
ˇ±uª_öã¡
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_CAPTURE_INTENT_ZERO_SHUTTER_LAG
;

947 
	`mmsdbg
(
DL_ERROR
, "Unknow¿ˇ±uª_öã¡ comm™d: %d!", ()
mode
);

951 
	`oßl_muãx_lock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

953 
ˇmîa_c⁄åﬁ
->
guzzi_‰_id
.
v
++;

954 
	`ˇmîa_c⁄fig_£t_begö
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

955 
îr
 = 
	`ˇmîa_c⁄fig_£t
(

956 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

957 
GUZZI_CAMERA3_INDEX_CONTROLS_CAPTURE_REQUEST_GUZZI_FR_ID
,

958 &
ˇmîa_c⁄åﬁ
->
guzzi_‰_id


960 
îr
 +
	`ˇmîa_c⁄fig_£t
(

961 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

962 
GUZZI_CAMERA3_INDEX_CONTROLS_CONTROL_MODE
,

963 &
˘æ_mode


965 
îr
 +
	`ˇmîa_c⁄fig_£t
(

966 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

967 
GUZZI_CAMERA3_INDEX_CONTROLS_CONTROL_CAPTURE_INTENT
,

968 &
ˇ±uª_öã¡


970 
	`ˇmîa_c⁄fig_£t_íd
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

971 i‡(
îr
) {

972 
	`mmsdbg
(
DL_ERROR
, "Set capture_intent control mode failed.\n");

974 
	`mmsdbg
(
DL_ERROR
,

975 "C≠tuª_öã¡ c⁄åﬁ suc˚eded: camîa_id = %d, modê%d.\n", 
ˇm_id
, ()
mode
);

977 
ˇmîa_c⁄åﬁ
->
c⁄figs_to_skù
 = 1;

978 
	`oßl_muãx_u∆ock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

979 
	}
}

981 
	$ˇmîa_c⁄åﬁ_mode
(
ˇm_id
, 
uöt32_t
 
mode
)

983 
ˇmîa_c⁄åﬁ_t
 *
ˇmîa_c⁄åﬁ
;

984 
guzzi_ˇmîa3_c⁄åﬁs_c⁄åﬁ_mode_t
 
˘æ_mode
;

985 
îr
;

987 
ˇmîa_c⁄åﬁ
 = &
g_ˇmîa_c⁄åﬁ
[
ˇm_id
];

989 
mode
) {

990 
CAMERA_CONTROL__MODE__OFF
:

991 
˘æ_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_MODE_OFF
;

993 
CAMERA_CONTROL__MODE__AUTO
:

994 
˘æ_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_MODE_AUTO
;

996 
CAMERA_CONTROL__MODE__USE_SCENE_MODE
:

997 
˘æ_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_MODE_USE_SCENE_MODE
;

1000 
	`mmsdbg
(
DL_ERROR
, "Unknow¿˘æ_modêcomm™d: %d!", ()
mode
);

1004 
	`oßl_muãx_lock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

1006 
ˇmîa_c⁄åﬁ
->
guzzi_‰_id
.
v
++;

1007 
	`ˇmîa_c⁄fig_£t_begö
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

1008 
îr
 = 
	`ˇmîa_c⁄fig_£t
(

1009 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

1010 
GUZZI_CAMERA3_INDEX_CONTROLS_CAPTURE_REQUEST_GUZZI_FR_ID
,

1011 &
ˇmîa_c⁄åﬁ
->
guzzi_‰_id


1013 
îr
 +
	`ˇmîa_c⁄fig_£t
(

1014 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

1015 
GUZZI_CAMERA3_INDEX_CONTROLS_CONTROL_MODE
,

1016 &
˘æ_mode


1018 
	`ˇmîa_c⁄fig_£t_íd
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

1019 i‡(
îr
) {

1020 
	`mmsdbg
(
DL_ERROR
, "Set control mode failed.\n");

1022 
	`mmsdbg
(
DL_ERROR
,

1023 "C⁄åﬁ modê£àsuc˚eded: camîa_id = %d, modê%d.\n", 
ˇm_id
, ()
mode
);

1025 
ˇmîa_c⁄åﬁ
->
c⁄figs_to_skù
 = 1;

1026 
	`oßl_muãx_u∆ock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

1027 
	}
}

1029 
	$ˇmîa_c⁄åﬁ_‰ame_duøti⁄
(
ˇm_id
, 
uöt64_t
 
vÆ
)

1031 
ˇmîa_c⁄åﬁ_t
 *
ˇmîa_c⁄åﬁ
;

1032 
guzzi_ˇmîa3_c⁄åﬁs_£ns‹_‰ame_duøti⁄_t
 
‰ame_duøti⁄
;

1033 
îr
;

1035 
ˇmîa_c⁄åﬁ
 = &
g_ˇmîa_c⁄åﬁ
[
ˇm_id
];

1036 
‰ame_duøti⁄
.
v
 = 
vÆ
;

1038 
	`oßl_muãx_lock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

1040 
ˇmîa_c⁄åﬁ
->
guzzi_‰_id
.
v
++;

1041 
	`ˇmîa_c⁄fig_£t_begö
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

1042 
îr
 = 
	`ˇmîa_c⁄fig_£t
(

1043 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

1044 
GUZZI_CAMERA3_INDEX_CONTROLS_CAPTURE_REQUEST_GUZZI_FR_ID
,

1045 &
ˇmîa_c⁄åﬁ
->
guzzi_‰_id


1047 
îr
 +
	`ˇmîa_c⁄fig_£t
(

1048 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

1049 
GUZZI_CAMERA3_INDEX_CONTROLS_SENSOR_FRAME_DURATION
,

1050 &
‰ame_duøti⁄


1052 
	`ˇmîa_c⁄fig_£t_íd
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

1053 i‡(
îr
) {

1054 
	`mmsdbg
(
DL_ERROR
, "Set sensor frame duration failed.\n");

1056 
	`mmsdbg
(
DL_ERROR
,

1057 "Sís‹ fømêduøti⁄ së suc˚eded: camîa_id = %d, duøti⁄ = %d.\n", 
ˇm_id
, ()
vÆ
);

1059 
ˇmîa_c⁄åﬁ
->
c⁄figs_to_skù
 = 1;

1060 
	`oßl_muãx_u∆ock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

1061 
	}
}

1064 
	$ˇmîa_c⁄åﬁ_exp_com≥nßti⁄
(
ˇm_id
, 
uöt32_t
 
vÆ
)

1066 
ˇmîa_c⁄åﬁ_t
 *
ˇmîa_c⁄åﬁ
;

1067 
guzzi_ˇmîa3_c⁄åﬁs_c⁄åﬁ_´_exposuª_com≥nßti⁄_t
 
exp_com≥nßti⁄
;

1068 
îr
;

1070 
ˇmîa_c⁄åﬁ
 = &
g_ˇmîa_c⁄åﬁ
[
ˇm_id
];

1071 
exp_com≥nßti⁄
.
v
 = 
vÆ
;

1073 
	`oßl_muãx_lock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

1075 
ˇmîa_c⁄åﬁ
->
guzzi_‰_id
.
v
++;

1076 
	`ˇmîa_c⁄fig_£t_begö
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

1077 
îr
 = 
	`ˇmîa_c⁄fig_£t
(

1078 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

1079 
GUZZI_CAMERA3_INDEX_CONTROLS_CAPTURE_REQUEST_GUZZI_FR_ID
,

1080 &
ˇmîa_c⁄åﬁ
->
guzzi_‰_id


1082 
îr
 +
	`ˇmîa_c⁄fig_£t
(

1083 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

1084 
GUZZI_CAMERA3_INDEX_CONTROLS_CONTROL_AE_EXPOSURE_COMPENSATION
,

1085 &
exp_com≥nßti⁄


1087 
	`ˇmîa_c⁄fig_£t_íd
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

1088 i‡(
îr
) {

1089 
	`mmsdbg
(
DL_ERROR
, "SetÉxposure compensation failed.\n");

1091 
	`mmsdbg
(
DL_ERROR
,

1092 "Exposuª com≥nßti⁄ së suc˚eded: camîa_id = %d, vÆ = %d.\n", 
ˇm_id
, ()
vÆ
);

1094 
ˇmîa_c⁄åﬁ
->
c⁄figs_to_skù
 = 1;

1095 
	`oßl_muãx_u∆ock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

1096 
	}
}

1098 
	$ˇmîa_c⁄åﬁ_£nsôivôy
(
ˇm_id
, 
uöt32_t
 
iso_vÆ
)

1100 
ˇmîa_c⁄åﬁ_t
 *
ˇmîa_c⁄åﬁ
;

1101 
guzzi_ˇmîa3_c⁄åﬁs_£ns‹_£nsôivôy_t
 
£nsôivôy
;

1103 
guzzi_ˇmîa3_c⁄åﬁs_c⁄åﬁ_´_mode_t
 
´_mode
;

1104 
îr
;

1106 
ˇmîa_c⁄åﬁ
 = &
g_ˇmîa_c⁄åﬁ
[
ˇm_id
];

1107 
£nsôivôy
.
v
 = 
iso_vÆ
;

1108 
´_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AE_MODE_OFF
;

1110 
	`oßl_muãx_lock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

1112 
ˇmîa_c⁄åﬁ
->
guzzi_‰_id
.
v
++;

1113 
	`ˇmîa_c⁄fig_£t_begö
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

1114 
îr
 = 
	`ˇmîa_c⁄fig_£t
(

1115 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

1116 
GUZZI_CAMERA3_INDEX_CONTROLS_CAPTURE_REQUEST_GUZZI_FR_ID
,

1117 &
ˇmîa_c⁄åﬁ
->
guzzi_‰_id


1119 
îr
 +
	`ˇmîa_c⁄fig_£t
(

1120 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

1121 
GUZZI_CAMERA3_INDEX_CONTROLS_SENSOR_SENSITIVITY
,

1122 &
£nsôivôy


1124 
îr
 +
	`ˇmîa_c⁄fig_£t
(

1125 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

1126 
GUZZI_CAMERA3_INDEX_CONTROLS_CONTROL_AE_MODE
,

1127 &
´_mode


1129 
	`ˇmîa_c⁄fig_£t_íd
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

1130 i‡(
îr
) {

1131 
	`mmsdbg
(
DL_ERROR
, "Set ISO failed.\n");

1133 
	`mmsdbg
(
DL_ERROR
,

1134 "ISO së suc˚eded: camîa_id = %d, vÆ = %d.\n", 
ˇm_id
, ()
iso_vÆ
);

1136 
ˇmîa_c⁄åﬁ
->
c⁄figs_to_skù
 = 1;

1137 
	`oßl_muãx_u∆ock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

1138 
	}
}

1140 
	$ˇmîa_c⁄åﬁ_ef„˘_mode
(
ˇm_id
, 
uöt32_t
 
mode
)

1142 
ˇmîa_c⁄åﬁ_t
 *
ˇmîa_c⁄åﬁ
;

1143 
guzzi_ˇmîa3_c⁄åﬁs_c⁄åﬁ_ef„˘_mode_t
 
ef„˘_mode
;

1144 
îr
;

1146 
ˇmîa_c⁄åﬁ
 = &
g_ˇmîa_c⁄åﬁ
[
ˇm_id
];

1148 
mode
) {

1149 
CAMERA_CONTROL__EFFECT_MODE__OFF
:

1150 
ef„˘_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_EFFECT_MODE_OFF
;

1152 
CAMERA_CONTROL__EFFECT_MODE__MONO
:

1153 
ef„˘_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_EFFECT_MODE_MONO
;

1155 
CAMERA_CONTROL__EFFECT_MODE__NEGATIVE
:

1156 
ef„˘_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_EFFECT_MODE_NEGATIVE
;

1158 
CAMERA_CONTROL__EFFECT_MODE__SOLARIZE
:

1159 
ef„˘_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_EFFECT_MODE_SOLARIZE
;

1161 
CAMERA_CONTROL__EFFECT_MODE__SEPIA
:

1162 
ef„˘_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_EFFECT_MODE_SEPIA
;

1164 
CAMERA_CONTROL__EFFECT_MODE__POSTERIZE
:

1165 
ef„˘_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_EFFECT_MODE_POSTERIZE
;

1167 
CAMERA_CONTROL__EFFECT_MODE__WHITEBOARD
:

1168 
ef„˘_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_EFFECT_MODE_WHITEBOARD
;

1170 
CAMERA_CONTROL__EFFECT_MODE__BLACKBOARD
:

1171 
ef„˘_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_EFFECT_MODE_BLACKBOARD
;

1173 
CAMERA_CONTROL__EFFECT_MODE__AQUA
:

1174 
ef„˘_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_EFFECT_MODE_AQUA
;

1177 
	`mmsdbg
(
DL_ERROR
, "Unknow¿awb mode: %d!", ()
mode
);

1181 
	`oßl_muãx_lock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

1183 
ˇmîa_c⁄åﬁ
->
guzzi_‰_id
.
v
++;

1184 
	`ˇmîa_c⁄fig_£t_begö
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

1185 
îr
 = 
	`ˇmîa_c⁄fig_£t
(

1186 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

1187 
GUZZI_CAMERA3_INDEX_CONTROLS_CAPTURE_REQUEST_GUZZI_FR_ID
,

1188 &
ˇmîa_c⁄åﬁ
->
guzzi_‰_id


1191 
îr
 +
	`ˇmîa_c⁄fig_£t
(

1192 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

1193 
GUZZI_CAMERA3_INDEX_CONTROLS_CONTROL_EFFECT_MODE
,

1194 &
ef„˘_mode


1196 
	`ˇmîa_c⁄fig_£t_íd
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

1197 i‡(
îr
) {

1198 
	`mmsdbg
(
DL_ERROR
, "SetÉffect mode failed.\n");

1200 
	`mmsdbg
(
DL_ERROR
,

1201 "Ef„˘ modê£àsuc˚eded camîa_id = %d, modê%d.\n", 
ˇm_id
, ()
mode
);

1203 
ˇmîa_c⁄åﬁ
->
c⁄figs_to_skù
 = 1;

1204 
	`oßl_muãx_u∆ock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

1205 
	}
}

1207 
	$ˇmîa_c⁄åﬁ_af_mode
(
ˇm_id
, 
uöt32_t
 
mode
)

1209 
ˇmîa_c⁄åﬁ_t
 *
ˇmîa_c⁄åﬁ
;

1210 
guzzi_ˇmîa3_c⁄åﬁs_c⁄åﬁ_af_mode_t
 
af_mode
;

1211 
îr
;

1213 
ˇmîa_c⁄åﬁ
 = &
g_ˇmîa_c⁄åﬁ
[
ˇm_id
];

1215 
mode
) {

1216 
CAMERA_CONTROL__AF_MODE_OFF
:

1217 
af_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AF_MODE_OFF
;

1219 
CAMERA_CONTROL__AF_MODE_AUTO
:

1220 
af_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AF_MODE_AUTO
;

1222 
CAMERA_CONTROL__AF_MODE_MACRO
:

1223 
af_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AF_MODE_MACRO
;

1225 
CAMERA_CONTROL__AF_MODE_CONTINUOUS_VIDEO
:

1226 
af_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AF_MODE_CONTINUOUS_VIDEO
;

1228 
CAMERA_CONTROL__AF_MODE_CONTINUOUS_PICTURE
:

1229 
af_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AF_MODE_CONTINUOUS_PICTURE
;

1231 
CAMERA_CONTROL__AF_MODE_EDOF
:

1232 
af_mode
.
v
 = 
GUZZI_CAMERA3_ENUM_CONTROL_AF_MODE_EDOF
;

1235 
	`mmsdbg
(
DL_ERROR
, "Unknow¿a‡mode: %d!", ()
mode
);

1239 
	`oßl_muãx_lock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

1241 
ˇmîa_c⁄åﬁ
->
guzzi_‰_id
.
v
++;

1242 
	`ˇmîa_c⁄fig_£t_begö
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

1243 
îr
 = 
	`ˇmîa_c⁄fig_£t
(

1244 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

1245 
GUZZI_CAMERA3_INDEX_CONTROLS_CAPTURE_REQUEST_GUZZI_FR_ID
,

1246 &
ˇmîa_c⁄åﬁ
->
guzzi_‰_id


1248 
îr
 +
	`ˇmîa_c⁄fig_£t
(

1249 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

1250 
GUZZI_CAMERA3_INDEX_CONTROLS_CONTROL_AF_MODE
,

1251 &
af_mode


1253 
	`ˇmîa_c⁄fig_£t_íd
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

1254 i‡(
îr
) {

1255 
	`mmsdbg
(
DL_ERROR
, "Setáf mode failed.\n");

1257 
	`mmsdbg
(
DL_ERROR
,

1258 "A‡modê£àsuc˚eded camîa_id = %d, modê%d.\n", 
ˇm_id
, ()
mode
);

1260 
ˇmîa_c⁄åﬁ
->
c⁄figs_to_skù
 = 1;

1261 
	`oßl_muãx_u∆ock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

1262 
	}
}

1264 
	$ˇmîa_c⁄åﬁ_noi£_ªdu˘i⁄_°ªngth
(
ˇm_id
, 
uöt32_t
 
°ªngth_vÆ
)

1266 
ˇmîa_c⁄åﬁ_t
 *
ˇmîa_c⁄åﬁ
;

1267 
guzzi_ˇmîa3_c⁄åﬁs_noi£_ªdu˘i⁄_°ªngth_t
 
°ªngth
;

1268 
guzzi_ˇmîa3_c⁄åﬁs_noi£_ªdu˘i⁄_mode_t
 
mode
;

1269 
îr
;

1271 
ˇmîa_c⁄åﬁ
 = &
g_ˇmîa_c⁄åﬁ
[
ˇm_id
];

1272 
°ªngth
.
v
 = 
°ªngth_vÆ
;

1273 
mode
.
v
 = 
GUZZI_CAMERA3_ENUM_NOISE_REDUCTION_MODE_FAST
;

1275 
	`oßl_muãx_lock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

1277 
ˇmîa_c⁄åﬁ
->
guzzi_‰_id
.
v
++;

1278 
	`ˇmîa_c⁄fig_£t_begö
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

1279 
îr
 = 
	`ˇmîa_c⁄fig_£t
(

1280 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

1281 
GUZZI_CAMERA3_INDEX_CONTROLS_CAPTURE_REQUEST_GUZZI_FR_ID
,

1282 &
ˇmîa_c⁄åﬁ
->
guzzi_‰_id


1284 
îr
 +
	`ˇmîa_c⁄fig_£t
(

1285 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

1286 
GUZZI_CAMERA3_INDEX_CONTROLS_NOISE_REDUCTION_STRENGTH
,

1287 &
°ªngth


1289 
îr
 +
	`ˇmîa_c⁄fig_£t
(

1290 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

1291 
GUZZI_CAMERA3_INDEX_CONTROLS_NOISE_REDUCTION_MODE
,

1292 &
mode


1294 
	`ˇmîa_c⁄fig_£t_íd
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

1295 i‡(
îr
) {

1296 
	`mmsdbg
(
DL_ERROR
, "SetÇoiseÑeduction strength failed.\n");

1298 
	`mmsdbg
(
DL_ERROR
,

1300 
ˇm_id
, ()
°ªngth_vÆ
);

1302 
ˇmîa_c⁄åﬁ
->
c⁄figs_to_skù
 = 1;

1303 
	`oßl_muãx_u∆ock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

1304 
	}
}

1306 
	$ˇmîa_c⁄åﬁ_ßtuøti⁄
(
ˇm_id
, 
uöt32_t
 
ßtuøti⁄_vÆ
)

1308 
ˇmîa_c⁄åﬁ_t
 *
ˇmîa_c⁄åﬁ
;

1310 
îr
;

1312 
ˇmîa_c⁄åﬁ
 = &
g_ˇmîa_c⁄åﬁ
[
ˇm_id
];

1315 
	`oßl_muãx_lock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

1317 
ˇmîa_c⁄åﬁ
->
guzzi_‰_id
.
v
++;

1318 
	`ˇmîa_c⁄fig_£t_begö
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

1319 
îr
 = 
	`ˇmîa_c⁄fig_£t
(

1320 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

1321 
GUZZI_CAMERA3_INDEX_CONTROLS_CAPTURE_REQUEST_GUZZI_FR_ID
,

1322 &
ˇmîa_c⁄åﬁ
->
guzzi_‰_id


1329 
	`ˇmîa_c⁄fig_£t_íd
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

1330 i‡(
îr
) {

1331 
	`mmsdbg
(
DL_ERROR
, "Set saturation failed.\n");

1333 
	`mmsdbg
(
DL_ERROR
,

1335 
ˇm_id
, ()
ßtuøti⁄_vÆ
);

1337 
ˇmîa_c⁄åﬁ
->
c⁄figs_to_skù
 = 1;

1338 
	`oßl_muãx_u∆ock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

1339 
	}
}

1341 
	$ˇmîa_c⁄åﬁ_brighäess
(
ˇm_id
, 
uöt32_t
 
brighäess_vÆ
)

1343 
ˇmîa_c⁄åﬁ_t
 *
ˇmîa_c⁄åﬁ
;

1345 
îr
;

1347 
ˇmîa_c⁄åﬁ
 = &
g_ˇmîa_c⁄åﬁ
[
ˇm_id
];

1350 
	`oßl_muãx_lock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

1352 
ˇmîa_c⁄åﬁ
->
guzzi_‰_id
.
v
++;

1353 
	`ˇmîa_c⁄fig_£t_begö
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

1354 
îr
 = 
	`ˇmîa_c⁄fig_£t
(

1355 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

1356 
GUZZI_CAMERA3_INDEX_CONTROLS_CAPTURE_REQUEST_GUZZI_FR_ID
,

1357 &
ˇmîa_c⁄åﬁ
->
guzzi_‰_id


1364 
	`ˇmîa_c⁄fig_£t_íd
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

1365 i‡(
îr
) {

1366 
	`mmsdbg
(
DL_ERROR
, "Set brightness failed.\n");

1368 
	`mmsdbg
(
DL_ERROR
,

1370 
ˇm_id
, ()
brighäess_vÆ
);

1372 
ˇmîa_c⁄åﬁ
->
c⁄figs_to_skù
 = 1;

1373 
	`oßl_muãx_u∆ock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

1374 
	}
}

1376 
	$ˇmîa_c⁄åﬁ_f‹m©
(
ˇm_id
, 
uöt32_t
 
f‹m©_ty≥
)

1386 
	`mmsdbg
(
DL_ERROR
,

1388 
ˇm_id
, ()
f‹m©_ty≥
);

1407 
	}
}

1409 
	$ˇmîa_c⁄åﬁ_ªsﬁuti⁄
(
ˇm_id
, 
uöt32_t
 
w
, uöt32_à
h
)

1422 
	`mmsdbg
(
DL_ERROR
,

1424 
ˇm_id
, ()
w
, ()
h
);

1443 
	}
}

1445 
	$ˇmîa_c⁄åﬁ_sh¨≤ess
(
ˇm_id
, 
uöt32_t
 
sh¨≤ess_vÆ
)

1447 
ˇmîa_c⁄åﬁ_t
 *
ˇmîa_c⁄åﬁ
;

1448 
guzzi_ˇmîa3_c⁄åﬁs_edge_°ªngth_t
 
sh¨≤ess
;

1449 
îr
;

1451 
ˇmîa_c⁄åﬁ
 = &
g_ˇmîa_c⁄åﬁ
[
ˇm_id
];

1452 
sh¨≤ess
.
v
 = 
sh¨≤ess_vÆ
;

1454 
	`oßl_muãx_lock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

1456 
ˇmîa_c⁄åﬁ
->
guzzi_‰_id
.
v
++;

1457 
	`ˇmîa_c⁄fig_£t_begö
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

1458 
îr
 = 
	`ˇmîa_c⁄fig_£t
(

1459 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

1460 
GUZZI_CAMERA3_INDEX_CONTROLS_CAPTURE_REQUEST_GUZZI_FR_ID
,

1461 &
ˇmîa_c⁄åﬁ
->
guzzi_‰_id


1463 
îr
 +
	`ˇmîa_c⁄fig_£t
(

1464 
ˇmîa_c⁄åﬁ
->
ˇmîa
,

1465 
GUZZI_CAMERA3_INDEX_CONTROLS_EDGE_STRENGTH
,

1466 &
sh¨≤ess


1468 
	`ˇmîa_c⁄fig_£t_íd
(
ˇmîa_c⁄åﬁ
->
ˇmîa
);

1469 i‡(
îr
) {

1470 
	`mmsdbg
(
DL_ERROR
, "Set sharpness failed.\n");

1472 
	`mmsdbg
(
DL_ERROR
,

1474 
ˇm_id
, ()
sh¨≤ess_vÆ
);

1476 
ˇmîa_c⁄åﬁ
->
c⁄figs_to_skù
 = 1;

1477 
	`oßl_muãx_u∆ock
(
ˇmîa_c⁄åﬁ
->
c⁄fig_muãx
);

1478 
	}
}

	@cdk/apps/arch/ma2x5x/cdk_SrcIsp_1xIMX214/leon/camera_control.h

35 #i‚de‡
_CAMERA_CONTROL_H


36 
	#_CAMERA_CONTROL_H


	)

38 
	~<°döt.h
>

41 
	mCUSTOM_CAMERA_COMMAND__PREVIEW_MODE
,

42 
	mCUSTOM_CAMERA_COMMAND__CAPTURE_MODE
,

43 
	mCUSTOM_CAMERA_COMMAND__MAX
,

47 
	mCAMERA_CONTROL__AE_AUTO__FLASH_MODE__OFF
,

48 
	mCAMERA_CONTROL__AE_AUTO__FLASH_MODE__AUTO
,

49 
	mCAMERA_CONTROL__AE_AUTO__FLASH_MODE__ALWAYS
,

50 
	mCAMERA_CONTROL__AE_AUTO__FLASH_MODE__AUTO_REDEYE
,

54 
	mCAMERA_CONTROL__AWB_MODE__OFF
,

55 
	mCAMERA_CONTROL__AWB_MODE__AUTO
,

56 
	mCAMERA_CONTROL__AWB_MODE__INCANDESCENT
,

57 
	mCAMERA_CONTROL__AWB_MODE__FLUORESCENT
,

58 
	mCAMERA_CONTROL__AWB_MODE__WARM_FLUORESCENT
,

59 
	mCAMERA_CONTROL__AWB_MODE__DAYLIGHT
,

60 
	mCAMERA_CONTROL__AWB_MODE__CLOUDY_DAYLIGHT
,

61 
	mCAMERA_CONTROL__AWB_MODE__TWILIGHT
,

62 
	mCAMERA_CONTROL__AWB_MODE__SHADE
,

66 
	mCAMERA_CONTROL__SCENE_MODE__UNSUPPORTED
,

67 
	mCAMERA_CONTROL__SCENE_MODE__FACE_PRIORITY
,

68 
	mCAMERA_CONTROL__SCENE_MODE__ACTION
,

69 
	mCAMERA_CONTROL__SCENE_MODE__PORTRAIT
,

70 
	mCAMERA_CONTROL__SCENE_MODE__LANDSCAPE
,

71 
	mCAMERA_CONTROL__SCENE_MODE__NIGHT
,

72 
	mCAMERA_CONTROL__SCENE_MODE__NIGHT_PORTRAIT
,

73 
	mCAMERA_CONTROL__SCENE_MODE__THEATRE
,

74 
	mCAMERA_CONTROL__SCENE_MODE__BEACH
,

75 
	mCAMERA_CONTROL__SCENE_MODE__SNOW
,

76 
	mCAMERA_CONTROL__SCENE_MODE__SUNSET
,

77 
	mCAMERA_CONTROL__SCENE_MODE__STEADYPHOTO
,

78 
	mCAMERA_CONTROL__SCENE_MODE__FIREWORKS
,

79 
	mCAMERA_CONTROL__SCENE_MODE__SPORTS
,

80 
	mCAMERA_CONTROL__SCENE_MODE__PARTY
,

81 
	mCAMERA_CONTROL__SCENE_MODE__CANDLELIGHT
,

82 
	mCAMERA_CONTROL__SCENE_MODE__BARCODE
,

86 
	mCAMERA_CONTROL__AE_ANTIBANDING_MODE__OFF
,

87 
	mCAMERA_CONTROL__AE_ANTIBANDING_MODE__50HZ
,

88 
	mCAMERA_CONTROL__AE_ANTIBANDING_MODE__60HZ
,

89 
	mCAMERA_CONTROL__AE_ANTIBANDING_MODE__AUTO
,

93 
	mCAMERA_CONTROL__AE_LOCK__OFF
,

94 
	mCAMERA_CONTROL__AE_LOCK__ON
,

98 
	mCAMERA_CONTROL__AWB_LOCK__OFF
,

99 
	mCAMERA_CONTROL__AWB_LOCK__ON
,

103 
	mCAMERA_CONTROL__CAPTURE_INTENT__CUSTOM
,

104 
	mCAMERA_CONTROL__CAPTURE_INTENT__PREVIEW
,

105 
	mCAMERA_CONTROL__CAPTURE_INTENT__STILL_CAPTURE
,

106 
	mCAMERA_CONTROL__CAPTURE_INTENT__VIDEO_RECORD
,

107 
	mCAMERA_CONTROL__CAPTURE_INTENT__VIDEO_SNAPSHOT
,

108 
	mCAMERA_CONTROL__CAPTURE_INTENT__ZERO_SHUTTER_LAG
,

112 
	mCAMERA_CONTROL__MODE__OFF
,

113 
	mCAMERA_CONTROL__MODE__AUTO
,

114 
	mCAMERA_CONTROL__MODE__USE_SCENE_MODE
,

118 
	mCAMERA_CONTROL__EFFECT_MODE__OFF
,

119 
	mCAMERA_CONTROL__EFFECT_MODE__MONO
,

120 
	mCAMERA_CONTROL__EFFECT_MODE__NEGATIVE
,

121 
	mCAMERA_CONTROL__EFFECT_MODE__SOLARIZE
,

122 
	mCAMERA_CONTROL__EFFECT_MODE__SEPIA
,

123 
	mCAMERA_CONTROL__EFFECT_MODE__POSTERIZE
,

124 
	mCAMERA_CONTROL__EFFECT_MODE__WHITEBOARD
,

125 
	mCAMERA_CONTROL__EFFECT_MODE__BLACKBOARD
,

126 
	mCAMERA_CONTROL__EFFECT_MODE__AQUA
,

130 
	mCAMERA_CONTROL__AF_MODE_OFF
,

131 
	mCAMERA_CONTROL__AF_MODE_AUTO
,

132 
	mCAMERA_CONTROL__AF_MODE_MACRO
,

133 
	mCAMERA_CONTROL__AF_MODE_CONTINUOUS_VIDEO
,

134 
	mCAMERA_CONTROL__AF_MODE_CONTINUOUS_PICTURE
,

135 
	mCAMERA_CONTROL__AF_MODE_EDOF
,

139 
uöt32_t
 
ˇmîa_c⁄åﬁ_is_a˘ive
(
ˇm_id
);

140 
ˇmîa_c⁄åﬁ_°¨t
(
ˇm_id
);

141 
ˇmîa_c⁄åﬁ_°›
(
ˇm_id
);

142 
ˇmîa_c⁄åﬁ_ˇ±uª
(
ˇm_id
);

143 
ˇmîa_c⁄åﬁ_Àns_move
(
ˇm_id
, 
Àns_posôi⁄
);

144 
ˇmîa_c⁄åﬁ_focus_åiggî
(
ˇm_id
);

145 
ˇmîa_c⁄åﬁ_´_m™uÆ
(

146 
ˇm_id
,

147 
uöt32_t
 
time_us
,

148 
uöt32_t
 
£nsôivôy_iso
,

149 
uöt32_t
 
‰ame_duøti⁄_us


151 
ˇmîa_c⁄åﬁ_´_auto
(
ˇm_id
, 
uöt32_t
 
Êash_mode
);

152 
ˇmîa_c⁄åﬁ_awb_mode
(
ˇm_id
, 
uöt32_t
 
awb_mode
);

153 
ˇmîa_c⁄åﬁ_s˚√_mode
(
ˇm_id
, 
uöt32_t
 
s˚√_mode
);

154 
ˇmîa_c⁄åﬁ_™tib™dög_mode
(
ˇm_id
, 
uöt32_t
 
™tib™dög_mode
);

155 
ˇmîa_c⁄åﬁ_´_lock_mode
(
ˇm_id
, 
uöt32_t
 
´_lock_mode
);

156 
ˇmîa_c⁄åﬁ_´_èrgë_Âs_ønge
(
ˇm_id
, 
uöt32_t
 
mö_Âs
, uöt32_à
max_Âs
);

157 
ˇmîa_c⁄åﬁ_awb_lock_mode
(
ˇm_id
, 
uöt32_t
 
awb_lock_c⁄åﬁ
);

158 
ˇmîa_c⁄åﬁ_ˇ±uª_öã¡
(
ˇm_id
, 
uöt32_t
 
ˇ±uª_öã¡_mode
);

159 
ˇmîa_c⁄åﬁ_mode
(
ˇm_id
, 
uöt32_t
 
c⁄åﬁ_mode
);

160 
ˇmîa_c⁄åﬁ_‰ame_duøti⁄
(
ˇm_id
, 
uöt64_t
 
‰ame_duøti⁄
);

161 
ˇmîa_c⁄åﬁ_exp_com≥nßti⁄
(
ˇm_id
, 
uöt32_t
 
exp_com≥nßti⁄
);

162 
ˇmîa_c⁄åﬁ_£nsôivôy
(
ˇm_id
, 
uöt32_t
 
iso_vÆ
);

163 
ˇmîa_c⁄åﬁ_ef„˘_mode
(
ˇm_id
, 
uöt32_t
 
ef„˘_mode
);

164 
ˇmîa_c⁄åﬁ_af_mode
(
ˇm_id
, 
uöt32_t
 
af_mode
);

165 
ˇmîa_c⁄åﬁ_noi£_ªdu˘i⁄_°ªngth
(
ˇm_id
, 
uöt32_t
 
°ªngth_vÆ
);

166 
ˇmîa_c⁄åﬁ_ßtuøti⁄
(
ˇm_id
, 
uöt32_t
 
ßtuøti⁄_vÆ
);

167 
ˇmîa_c⁄åﬁ_brighäess
(
ˇm_id
, 
uöt32_t
 
brighäess_vÆ
);

168 
ˇmîa_c⁄åﬁ_f‹m©
(
ˇm_id
, 
uöt32_t
 
f‹m©_ty≥
);

169 
ˇmîa_c⁄åﬁ_ªsﬁuti⁄
(
ˇm_id
, 
uöt32_t
 
width
, uöt32_à
height
);

170 
ˇmîa_c⁄åﬁ_sh¨≤ess
(
ˇm_id
, 
uöt32_t
 
sh¨≤ess_vÆ
);

	@cdk/apps/arch/ma2x5x/cdk_SrcIsp_1xIMX214/leon/ic_main.c

9 
	~<°dlib.h
>

10 
	~<time.h
>

11 
	~<°dio.h
>

12 
	~<uni°d.h
>

13 
	~<°rög.h
>

14 
	~<±hªad.h
>

15 
	~<sig«l.h
>

16 
	~<£m≠h‹e.h
>

17 
	~<as£π.h
>

19 
	~<ùùe.h
>

20 
	~"I•Comm⁄.h
"

21 
	~"hÆ/hÆ_ˇmîa_moduÀ/h©_cm_drivî.h
"

22 
	~"£ndOutApi.h
"

24 
	~<utûs/mms_debug.h
>

25 
	~<utûs/¥ofûe/¥ofûe.h
>

26 
	~<oßl/oßl_°dlib.h
>

27 
	~<oßl/oßl_muãx.h
>

28 
	~<oßl/oßl_time.h
>

29 
	~<oßl/oßl_°rög.h
>

30 
	~<ˇmîa_c⁄åﬁ.h
>

32 
mmsdbg_deföe_v¨übÀ
(

33 
vdl_ic
,

34 
DL_DEFAULT
,

39 
	#MMSDEBUGLEVEL
 
	`mmsdbg_u£_v¨übÀ
(
vdl_ic
)

	)

41 
	#INSTANCES_COUNT_MAX
 
MAX_NR_OF_CAMS


	)

43 
	#IC_IMAGE_WIDTH
 4208

	)

45 
cu°om_ˇm_comm™d
;

47 
∂©f‹m_ˇm_Àd1_toggÀ
 ();

49 
los_C⁄figuªSour˚
(

50 
§cIdx
,

51 
icSour˚C⁄fig
 *
sc⁄f
,

52 
pùeId


54 
los_SëupSour˚
(

55 
§cIdx
,

56 
icSour˚Sëup
 *
sc⁄f


58 
los_SëupSour˚Commô
();

59 
öc_ˇm_°©s_ªady
(

60 *
p_¥v
,

61 
£qNo
,

62 *
p_cfg_¥v


64 
öc_ˇm_ˇ±uª_ªady
(

65 *
p_¥v
,

66 
£qNo
,

67 *
p_cfg_¥v


69 
öc_ˇm_ùùe_cfg_ªady
(

70 *
p_¥v
,

71 
£qNo
,

72 *
p_cfg_¥v


74 
öc_ˇm_ùùe_buff_locked
(

75 *
p_¥v
,

76 *
u£rD©a
,

77 
sour˚In°™˚
,

78 *
buffZ¶
,

79 
icTime°amp
 
ts
,

80 
£qNo


82 
öc_ˇm_‰ame_°¨t
(

83 *
p_¥v
,

84 
uöt32_t
 
sour˚In°™˚
,

85 
uöt32_t
 
£qNo
,

86 
icTime°amp
 
ts
,

87 *
u£rD©a


89 
öc_ˇm_‰ame_löe_ªached
(

90 *
p_¥v
,

91 
uöt32_t
 
sour˚In°™˚
,

92 
uöt32_t
 
£qNo
,

93 
icTime°amp
 
ts
,

94 *
u£rD©a


96 
öc_ˇm_‰ame_íd
(

97 *
p_¥v
,

98 
uöt32_t
 
sour˚In°™˚
,

99 
uöt32_t
 
£qNo
,

100 
icTime°amp
 
ts
,

101 *
u£rD©a


104 
los_d©aWasSít
(
FømeT
 *
d©aBufSåu˘
, 
uöt32_t
 
ouçutId
, uöt32_à
‰mTy≥
);

106 
öc_ˇm_ãrmö©e_‰
(

107 *
p_¥v
,

108 
uöt32_t
 
sour˚In°™˚
,

109 *
u£rD©a


113 
uöt32_t
 
	mªf_˙t
;

114 
oßl_muãx
 *
	mlock
;

115 
icCål
 *
	m˘æ
;

116 } 
	tg_ùùe_˘x_t
;

118 
g_ùùe_˘x_t
 
	gg˘x
;

120 
£m_t
 
	g£mWaôF‹LπRódy
;

121 
£m_t
 
	g£mWaôF‹Sour˚Commô
;

122 
£m_t
 
	g£mWaôF‹Sour˚Ródy
;

123 
£m_t
 
	g£mWaôF‹Sour˚St›ed
;

125 
±hªad_t
 
	gevítThªad
;

127 
icSour˚Sëup
 
	g§cSë
 = {

128 0, 0, 12, 0, 1, 1, 1, 1, 
QUARTER_MODE_FOR_VIDEO_PIPE


131 
	#DDR_BUFFER_ALOCATED_MEM_SIZE
 ((128-30)*1024*1024)

	)

133 
uöt8_t
 
	gddrSèticAloˇãdMem‹y
[
DDR_BUFFER_ALOCATED_MEM_SIZE
] 
__©åibuã__
((

134 
£˘i⁄
(".ddr.bss")

150 * 
	$evítLo›
(*
vCål
)

152 
g_ùùe_˘x_t
 *
˘x
;

153 
icCål
 *
˘æ
;

154 
icEvít
 
ev
;

155 
evno
;

157 
˘x
 = 
vCål
;

158 
˘æ
 = 
˘x
->ctrl;

165 i‡(!
	`icGëEvít
(
˘æ
, &
ev
)) {

166 
evno
 = 
ev
.
˘æ
 & 
IC_EVENT_CTRL_TYPE_MASK
;

168 
evno
) {

169 
IC_EVENT_TYPE_LEON_RT_READY
:

171 
	`as£π
(
	`£m_po°
(&
£mWaôF‹LπRódy
) != -1);

173 
IC_EVENT_TYPE_SETUP_SOURCES_RESULT
:

175 
	`as£π
(
	`£m_po°
(&
£mWaôF‹Sour˚Commô
) != -1);

177 
IC_EVENT_TYPE_SOURCE_READY
:

179 
	`as£π
(
	`£m_po°
(&
£mWaôF‹Sour˚Ródy
) != -1);

181 
IC_EVENT_TYPE_READOUT_START
:

182 i‡(
ev
.
u
.
löeEvít
.
u£rD©a
 !
NULL
) {

183 
	`PROFILE_ADD
(

184 
PROFILE_ID_LRT_START_FRAME
,

185 
ev
.
u
.
löeEvít
.
£qNo
,

186 
ev
.
u
.
löeEvít
.
sour˚In°™˚


188 
	`öc_ˇm_‰ame_°¨t
(

189 
NULL
,

190 
ev
.
u
.
löeEvít
.
sour˚In°™˚
,

191 
ev
.
u
.
löeEvít
.
£qNo
,

192 
ev
.
u
.
löeEvít
.
ts
,

193 
ev
.
u
.
löeEvít
.
u£rD©a


195 
	`öc_ˇm_ùùe_cfg_ªady
(

196 
NULL
,

197 
ev
.
u
.
löeEvít
.
£qNo
,

198 
ev
.
u
.
löeEvít
.
u£rD©a


200 
	`öc_ˇm_‰ame_íd
(

201 
NULL
,

202 
ev
.
u
.
löeEvít
.
sour˚In°™˚
,

203 
ev
.
u
.
löeEvít
.
£qNo
,

204 
ev
.
u
.
löeEvít
.
ts
,

205 
ev
.
u
.
löeEvít
.
u£rD©a


209 
IC_EVENT_TYPE_LINE_REACHED
:

210 i‡(
ev
.
u
.
löeEvít
.
u£rD©a
 !
NULL
) {

211 
	`PROFILE_ADD
(

212 
PROFILE_ID_LRT_LINE_REACHED
,

213 
ev
.
u
.
löeEvít
.
u£rD©a
,

214 
ev
.
u
.
löeEvít
.
sour˚In°™˚


217 
	`öc_ˇm_‰ame_löe_ªached
(

218 
NULL
,

219 
ev
.
u
.
löeEvít
.
sour˚In°™˚
,

220 
ev
.
u
.
löeEvít
.
£qNo
,

221 
ev
.
u
.
löeEvít
.
ts
,

222 
ev
.
u
.
löeEvít
.
u£rD©a


227 
IC_EVENT_TYPE_READOUT_END
:

228 i‡(
ev
.
u
.
löeEvít
.
u£rD©a
 !
NULL
) {

229 
	`PROFILE_ADD
(

230 
PROFILE_ID_LRT_END_FRAME
,

231 
ev
.
u
.
löeEvít
.
u£rD©a
,

232 
ev
.
u
.
löeEvít
.
sour˚In°™˚


234 
	`öc_ˇm_°©s_ªady
(

235 
NULL
,

236 
ev
.
u
.
löeEvít
.
£qNo
,

237 
ev
.
u
.
löeEvít
.
u£rD©a


241 
IC_EVENT_TYPE_ISP_START
:

242 i‡(
ev
.
u
.
i•Evít
.
u£rD©a
 !
NULL
) {

243 
	`PROFILE_ADD
(

244 
PROFILE_ID_LRT_ISP_START
,

245 
ev
.
u
.
i•Evít
.
u£rD©a
,

246 
ev
.
u
.
i•Evít
.
i•In°™˚


249 
	`mmsdbg
(

250 
DL_ERROR
,

255 
IC_EVENT_TYPE_ISP_END
:

256 i‡(
ev
.
u
.
i•Evít
.
u£rD©a
 !
NULL
) {

257 
	`PROFILE_ADD
(

258 
PROFILE_ID_LRT_ISP_END
,

259 
ev
.
u
.
i•Evít
.
u£rD©a
,

260 
ev
.
u
.
i•Evít
.
i•In°™˚


263 
	`mmsdbg
(

264 
DL_ERROR
,

269 
IC_EVENT_TYPE_ZSL_LOCKED
:

270 
	`PROFILE_ADD
(

271 
PROFILE_ID_LRT_ZSL_LOCKED
,

272 
ev
.
u
.
buffLockedZSL
.
u£rD©a
,

273 
ev
.
u
.
buffLockedZSL
.
sour˚In°™˚


275 
	`öc_ˇm_ùùe_buff_locked
(

276 
NULL
,

277 
ev
.
u
.
buffLockedZSL
.
u£rD©a
,

278 
ev
.
u
.
buffLockedZSL
.
sour˚In°™˚
,

279 
ev
.
u
.
buffLockedZSL
.
buffZ¶
,

280 
ev
.
u
.
buffLockedZSL
.
buffZ¶
->
time°amp
[0],

282 
ev
.
u
.
buffLockedZSL
.
buffZ¶
->
£qNo


285 
IC_EVENT_TYPE_SOURCE_STOPPED
:

287 
	`as£π
(
	`£m_po°
(&
£mWaôF‹Sour˚St›ed
) != -1);

289 
IC_EVENT_TYPE_SEND_OUTPUT_DATA
:

291 
FømeT
 *
‰ame
;

292 
uöt32_t
 
outId
;

293 
uöt32_t
 
‰mTy≥
;

294 
uöt32_t
 
‰mFmt
;

296 
	`∂©f‹m_ˇm_Àd1_toggÀ
();

298 
‰ame
 = 
ev
.
u
.
£¡Ouçut
.
d©aBufSåu˘
;

301 
outId
 = 
˘æ
->
icPùñöeDes¸ùti⁄
.
icQuîyOuçut
[
ev
.
u
.
£¡Ouçut
.
ouçutId
]->
dïídítSour˚s
;

303 
‰mFmt
 = 
ev
.
u
.
£¡Ouçut
.
d©aBufSåu˘
->
ty≥
;

304 
‰mTy≥
 = 
˘æ
->
icPùñöeDes¸ùti⁄
.
icQuîyOuçut
[
ev
.
u
.
£¡Ouçut
.
ouçutId
]->
©ås
;

306 i‡(
‰ame
->
°ride
[0] =
IC_IMAGE_WIDTH
){

307 
‰mFmt
 = 
FRAME_T_FORMAT_YUV420
;

308 
‰mTy≥
 = 
FRAME_DATA_TYPE_STILL
;

311 
	`PROFILE_ADD
(

312 
PROFILE_ID_LRT_SEND_DATA
,

313 
‰ame
->
≠pS≥cificD©a
,

314 
outId


317 
	`as£π
(
outId
<
INSTANCES_COUNT_MAX
);

318 
	`as£π
(
‰mTy≥
<
FRAME_DATA_TYPE_MAX
);

319 
	`as£π
(
‰mFmt
<
FRAME_T_FORMAT_MAX
);

321 
	`£ndOutSíd
(
‰ame
, 
outId
, 
‰mTy≥
, 
los_d©aWasSít
);

324 
IC_EVENT_TYPE_ERROR
:

325 
	`PROFILE_ADD
(

326 
PROFILE_ID_LRT_ERROR
,

327 
ev
.
u
.
îr‹
.
u£rD©a
,

328 
ev
.
u
.
îr‹
.
sour˚In°™˚


330 i‡((
ev
.
u
.
îr‹
.
u£rD©a
Ë&& (ev.u.îr‹.
îr‹No
 =
IC_ERROR_RT_OUT_BUFFERS_NOT_AVAILABLE
)) {

331 
	`öc_ˇm_ãrmö©e_‰
(

332 
NULL
,

333 
ev
.
u
.
îr‹
.
sour˚In°™˚
,

334 
ev
.
u
.
îr‹
.
u£rD©a


338 
IC_EVENT_TYPE_TORN_DOWN
:

340  
NULL
;

342 
	`mmsdbg
(
DL_ERROR
, "Unknow¿evt: %d", 
evno
);

350 
	`mmsdbg
(
DL_ERROR
, "Error X");

354  
NULL
;

355 
	}
}

357 
	$los_°¨t
(*
¨g
)

359 
pﬁicy
;

360 
sched_∑øm
 
∑øm
;

362 
	`UNUSED
(
¨g
);

364 
	`PROFILE_ADD
(
PROFILE_ID_LOS_START
, 0, 0);

366 
g˘x
.
ªf_˙t
++;

367 i‡(
g˘x
.
ªf_˙t
 == 1) {

368 
g˘x
.
lock
 = 
	`oßl_muãx_¸óã
();

370 
	`as£π
(
	`£m_öô
(&
£mWaôF‹LπRódy
, 0, 0) != -1);

371 
	`as£π
(
	`£m_öô
(&
£mWaôF‹Sour˚Commô
, 0, 0) != -1);

372 
	`as£π
(
	`£m_öô
(&
£mWaôF‹Sour˚Ródy
, 0, 0) != -1);

373 
	`as£π
(
	`£m_öô
(&
£mWaôF‹Sour˚St›ed
, 0, 0) != -1);

374 
g˘x
.
˘æ
 = 
	`icSëup
(

376 (
uöt32_t
)
ddrSèticAloˇãdMem‹y
,

377  (
ddrSèticAloˇãdMem‹y
)

380 
	`as£π
(
	`±hªad_¸óã
(&
evítThªad
, 
NULL
, 
evítLo›
, &
g˘x
) == 0);

382 
	`±hªad_gësched∑øm
(
evítThªad
, &
pﬁicy
, &
∑øm
);

383 
∑øm
.
sched_¥i‹ôy
 = 210;

384 
	`±hªad_£tsched∑øm
(
evítThªad
, 
pﬁicy
, &
∑øm
);

386 
	`as£π
(
	`£m_waô
(&
£mWaôF‹LπRódy
) != -1);

388 
	`£ndOutInô
();

391 
i
;

392 
i
 = 0; i<
INSTANCES_COUNT_MAX
; i++)

394 
h©_ˇmîa_limôs_t
 
limôs
;

395 i‡–0 =
	`hai_cm_drivî_gë_ˇmîa_limôs
(
i
, &
limôs
)) {

396 
§cSë
.
maxWidth
 = 
limôs
.maxWidth;

397 
§cSë
.
maxHeight
 = 
limôs
.maxHeight;

398 
§cSë
.
maxPixñs
 = 
limôs
.maxPixels;

399 
§cSë
.
maxBµ
 = 12;

400 
	`los_SëupSour˚
(
i
, &
§cSë
);

405 
	`los_SëupSour˚Commô
();

407 
	}
}

409 
	$los_°›
()

411 
	`PROFILE_ADD
(
PROFILE_ID_LOS_STOP
, 0, 0);

413 
	`as£π
(
g˘x
.
ªf_˙t
);

415 
g˘x
.
ªf_˙t
--;

416 i‡(!
g˘x
.
ªf_˙t
) {

417 
	`oßl_u¶ìp
(33*1000);

418 
	`icTórdown
(
g˘x
.
˘æ
);

419 
	`±hªad_joö
(
evítThªad
, 
NULL
);

421 
	`£ndOutFöi
();

422 
	`oßl_muãx_de°roy
(
g˘x
.
lock
);

423 
	`£m_de°roy
(&
£mWaôF‹Sour˚St›ed
);

424 
	`£m_de°roy
(&
£mWaôF‹Sour˚Ródy
);

425 
	`£m_de°roy
(&
£mWaôF‹Sour˚Commô
);

426 
	`£m_de°roy
(&
£mWaôF‹LπRódy
);

428 
	}
}

430 
	$los_C⁄figuªGlobÆ
(*
gc⁄f
)

432 
	`PROFILE_ADD
(
PROFILE_ID_LOS_GOB_CONFIG
, 
gc⁄f
, 0);

433 
	}
}

435 
	$los_C⁄figuªSour˚
(
§cIdx
, 
icSour˚C⁄fig
 *
sc⁄f
, 
pùeId
)

437 
	`UNUSED
(
pùeId
);

441 
	`PROFILE_ADD
(
PROFILE_ID_LOS_SRC_CONFIG
, 
sc⁄f
, 
§cIdx
);

442 
	`icC⁄figuªSour˚
(
g˘x
.
˘æ
, (
icSour˚In°™˚
)
§cIdx
, 
sc⁄f
);

444 
	}
}

445 
	$los_SëupSour˚
(
§cIdx
, 
icSour˚Sëup
 *
sc⁄f
)

448 
	`PROFILE_ADD
(
PROFILE_ID_LOS_SRC_CONFIG
, 
sc⁄f
, 
§cIdx
);

449 
	`icSëupSour˚
 (
g˘x
.
˘æ
, (
icSour˚In°™˚
)
§cIdx
, 
sc⁄f
);

451 
	}
}

452 
	$los_SëupSour˚Commô
()

454 
	`oßl_muãx_lock
(
g˘x
.
lock
);

456 
	`icSëupSour˚sCommô
(
g˘x
.
˘æ
);

457 
	`as£π
(
	`£m_waô
(&
£mWaôF‹Sour˚Commô
) != -1);

458 
	`oßl_muãx_u∆ock
(
g˘x
.
lock
);

459 
	}
}

461 
	$los_ùùe_LockZSL
(
uöt32_t
 
§cIdx
) {

462 
	`PROFILE_ADD
(
PROFILE_ID_LOS_LOCK_ZSL
, 0, 
§cIdx
);

463 
	`icLockZSL
 (
g˘x
.
˘æ
, 
§cIdx
, 0, 
IC_LOCKZSL_TS_RELATIVE
);

464 
	}
}

467 
	$los_ùùe_TriggîC≠tuª
(* 
buff
, *
ic⁄f
, 
uöt32_t
 
§cIdx
) {

468 
	`PROFILE_ADD
(
PROFILE_ID_LOS_TRIGGER_CAPTURE
, 
buff
, 
§cIdx
);

469 
	`icTriggîC≠tuª
 (
g˘x
.
˘æ
, 
§cIdx
, 
buff
, 
ic⁄f
, 0);

470 
	}
}

472 
	$los_c⁄figI•
(*
ic⁄f
, 
i•Idx
)

475 
	`PROFILE_ADD
(
PROFILE_ID_LOS_CONFIG_ISP
, ((
icI•C⁄fig
 *)
ic⁄f
)->
u£rD©a
, 
i•Idx
);

478 
icI•C⁄fig
 *
i•Cfg
 = (icI•C⁄fig*)
ic⁄f
;

479 
cu°om_ˇm_comm™d
){

480 (
CUSTOM_CAMERA_COMMAND__CAPTURE_MODE
):

481 
i•Cfg
->
updnCfg0
.
vN
 = 1;

482 
i•Cfg
->
updnCfg0
.
vD
 = 1;

483 
i•Cfg
->
updnCfg0
.
hN
 = 1;

484 
i•Cfg
->
updnCfg0
.
hD
 = 1;

485 
cu°om_ˇm_comm™d
 = 
CUSTOM_CAMERA_COMMAND__PREVIEW_MODE
;

488 
	`mmsdbg
(
DL_ERROR
, "Unknow¿cu°om c⁄åﬁ comm™d: %d. PªsumögÖªvõw mode.", 
cu°om_ˇm_comm™d
);

489 (
CUSTOM_CAMERA_COMMAND__PREVIEW_MODE
):

490 
i•Cfg
->
updnCfg0
.
vN
 = 1;

491 
i•Cfg
->
updnCfg0
.
vD
 = 2;

492 
i•Cfg
->
updnCfg0
.
hN
 = 1;

493 
i•Cfg
->
updnCfg0
.
hD
 = 2;

496 
	`icC⁄figuªI•
(
g˘x
.
˘æ
, 
i•Idx
, 
ic⁄f
);

498 
	}
}

500 
	$los_°¨tSour˚
(
§cIdx
)

503 
	`oßl_muãx_lock
(
g˘x
.
lock
);

504 
	`PROFILE_ADD
(
PROFILE_ID_LOS_SRC_SART
, 0, 
§cIdx
);

505 
	`icSèπSour˚
(
g˘x
.
˘æ
, (
icSour˚In°™˚
)
§cIdx
);

506 
	`as£π
(
	`£m_waô
(&
£mWaôF‹Sour˚Ródy
) != -1);

507 
	`oßl_muãx_u∆ock
(
g˘x
.
lock
);

510 
	}
}

512 
	$los_°›Sour˚
(
§cIdx
)

514 
	`oßl_muãx_lock
(
g˘x
.
lock
);

515 
	`PROFILE_ADD
(
PROFILE_ID_LOS_SRC_STOP
, 0, 
§cIdx
);

516 
	`icSt›Sour˚
(
g˘x
.
˘æ
, (
icSour˚In°™˚
)
§cIdx
);

517 
	`as£π
(
	`£m_waô
(&
£mWaôF‹Sour˚St›ed
) != -1);

518 
	`oßl_muãx_u∆ock
(
g˘x
.
lock
);

521 
	}
}

523 
	$los_d©aWasSít
(
FømeT
 *
d©aBufSåu˘
, 
uöt32_t
 
ouçutId
, uöt32_à
‰mTy≥
)

525 
	`UNUSED
(
ouçutId
);

526 
	`UNUSED
(
‰mTy≥
);

528 
	`PROFILE_ADD
(

529 
PROFILE_ID_LRT_DATA_SENT
,

530 
d©aBufSåu˘
->
≠pS≥cificD©a
,

533 i‡(
g˘x
.
ªf_˙t
)

535 
	`icD©aRe˚ived
(
g˘x
.
˘æ
, 
d©aBufSåu˘
);

537 
	}
}

	@cdk/apps/arch/ma2x5x/cdk_SrcIsp_1xIMX214/leon/init.c

1 
	~<°dlib.h
>

2 
	~<°dio.h
>

3 
	~<°rög.h
>

4 
	~<î∫o.h
>

5 
	~<πems.h
>

6 
	~<b•.h
>

8 
	~<£m≠h‹e.h
>

9 
	~<±hªad.h
>

10 
	~<sched.h
>

11 
	~<f˙é.h
>

12 
	~<mv_ty≥s.h
>

13 
	~<πems/˝uu£.h
>

14 
	~<DrvLe⁄.h
>

15 
	~<öôSy°em.h
>

16 
	~<πems/b•Io.h
>

27 
maö
(
¨gc
, **
¨gv
);

29 * 
	$POSIX_Inô
 (*
¨gs
)

31 
	`UNUSED
(
¨gs
);

33 
	`maö
(0, 
NULL
);

34  
NULL
;

35 
	}
}

37 #i‡!
deföed
 (
__CONFIG__
)

38 
	#__CONFIG__


	)

41 
	#CONFIGURE_INIT


	)

43 
	#CONFIGURE_MICROSECONDS_PER_TICK
 1000

	)

45 
	#CONFIGURE_TICKS_PER_TIMESLICE
 10

	)

47 
	#CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER


	)

49 
	#CONFIGURE_APPLICATION_NEEDS_CLOCK_DRIVER


	)

51 
	#CONFIGURE_POSIX_INIT_THREAD_TABLE


	)

55 
	#CONFIGURE_MINIMUM_TASK_STACK_SIZE
 (4*1024)

	)

57 
	#CONFIGURE_MAXIMUM_POSIX_THREADS
 50

	)

59 
	#CONFIGURE_MAXIMUM_POSIX_MUTEXES
 600

	)

61 
	#CONFIGURE_MAXIMUM_POSIX_KEYS
 50

	)

63 
	#CONFIGURE_MAXIMUM_POSIX_SEMAPHORES
 600

	)

65 
	#CONFIGURE_MAXIMUM_POSIX_CONDITION_VARIABLES
 16

	)

67 
	#CONFIGURE_MAXIMUM_POSIX_TIMERS
 4

	)

69 
	#CONFIGURE_MAXIMUM_TIMERS
 4

	)

71 
	#CONFIGURE_MAXIMUM_MESSAGE_QUEUES
 8

	)

72 
	#CONFIGURE_MAXIMUM_TASKS
 4

	)

74 
	#CONFIGURE_MAXIMUM_DRIVERS
 10

	)

75 
	#CONFIGURE_MAXIMUM_SEMAPHORES
 16

	)

76 
	#CONFIGURE_MAXIMUM_DEVICES
 8

	)

77 
	#CONFIGURE_APPLICATION_NEEDS_ZERO_DRIVER


	)

78 
	#CONFIGURE_APPLICATION_NEEDS_NULL_DRIVER


	)

79 
	#CONFIGURE_APPLICATION_NEEDS_STUB_DRIVER


	)

82 
	$F©Æ_exãnsi⁄
(

83 
I¡î«l_îr‹s_Sour˚
 
the_sour˚
,

84 
boﬁ
 
is_öã∫Æ
,

85 
I¡î«l_îr‹s_t
 
the_îr‹


88 
the_sour˚
)

90 
RTEMS_FATAL_SOURCE_EXIT
:

91 if(
the_îr‹
)

92 
	`¥ötk
("Exôed wôhÉº‹ codê%d\n", 
the_îr‹
);

94 
RTEMS_FATAL_SOURCE_ASSERT
:

95 
	`¥ötk
("%s : %d in %s \n",

96 ((
πems_as£π_c⁄ãxt
 *)
the_îr‹
)->
fûe
,

97 ((
πems_as£π_c⁄ãxt
 *)
the_îr‹
)->
löe
,

98 ((
πems_as£π_c⁄ãxt
 *)
the_îr‹
)->
fun˘i⁄
);

100 
RTEMS_FATAL_SOURCE_EXCEPTION
:

101 
	`πems_ex˚±i⁄_‰ame_¥öt
((c⁄° 
πems_ex˚±i⁄_‰ame
 *Ë
the_îr‹
);

104 
	`¥ötk
 ("\nSource %d Internal %d Error %d 0x%X:\n",

105 
the_sour˚
, 
is_öã∫Æ
, 
the_îr‹
,Åhe_error);

108 
	}
}

110 
	#CONFIGURE_MAXIMUM_USER_EXTENSIONS
 1

	)

111 
	#CONFIGURE_INITIAL_EXTENSIONS
 { .
Áèl
 = &
F©Æ_exãnsi⁄
 }

	)

113 
	~<πems/c⁄fdefs.h
>

114 
	#MSS_CLOCKS
 0xFFFFFFFF

	)

139 
BSP_SET_CLOCK
(
DEFAULT_OSC_CLOCK_KHZ
, 
DEFAULT_APP_CLOCK_KHZ
, 1, 1, 
APP_CSS_CLOCKS
, 
APP_MSS_CLOCKS
, 
APP_UPA_CLOCKS
, 
APP_SIPP_CLOCKS
,0);

141 
BSP_SET_L2C_CONFIG
(0, 
DEFAULT_RTEMS_L2C_REPLACEMENT_POLICY
, 
DEFAULT_RTEMS_L2C_LOCKED_WAYS
,
DEFAULT_RTEMS_L2C_MODE
, 0, 0);

	@cdk/apps/arch/ma2x5x/cdk_SrcIsp_1xIMX214/leon/initSystem.c

19 
	~<OsDrvC¥.h
>

20 
	~<DrvGpio.h
>

21 
	~<OsDrvTimî.h
>

22 
	~<DrvShaveL2Cache.h
>

23 
	~"öôSy°em.h
"

24 
	~<brdDeföes.h
>

25 
	~"brdGpioCfgs/brdMv0182GpioDeÁu…s.h
"

31 
	#L2CACHE_CFG
 (
SHAVE_L2CACHE_NORMAL_MODE
)

	)

33 
	#CLOCKS_MIPICFG
 (
AUX_CLK_MASK_MIPI_ECFG
 | 
AUX_CLK_MASK_MIPI_CFG
)

	)

34 
	#REM_CLOCKS
 ( 
AUX_CLK_MASK_I2S0
 | \

35 
AUX_CLK_MASK_I2S1
 | \

36 
AUX_CLK_MASK_I2S2
 )

	)

38 
	#DESIRED_USB_FREQ_KHZ
 (20000)

	)

39 #i‡(
DEFAULT_APP_CLOCK_KHZ
%
DESIRED_USB_FREQ_KHZ
)

43 
	#IRQ_SRC_0
 0

	)

44 
	#IRQ_SRC_1
 1

	)

45 
	#IRQ_SRC_2
 2

	)

46 
	#IRQ_SRC_3
 3

	)

55 
tyAuxClkDividîCfg
 
	gauxClkAŒOn
[] =

57 {
AUX_CLK_MASK_UART
, 
CLK_SRC_REFCLK0
, 96, 625},

59 .
auxClockE«bÀMask
 = 
REM_CLOCKS
,

60 .
	gauxClockSour˚
 = 
CLK_SRC_SYS_CLK
,

61 .
	gauxClockDivNumî©‹
 = 1,

62 .
	gauxClockDivDíomö©‹
 = 1,

65 .
	gauxClockE«bÀMask
 = 
AUX_CLK_MASK_LCD
 ,

66 .
	gauxClockSour˚
 = 
CLK_SRC_SYS_CLK_DIV2
,

67 .
	gauxClockDivNumî©‹
 = 1,

68 .
	gauxClockDivDíomö©‹
 = 1

71 .
	gauxClockE«bÀMask
 = 
AUX_CLK_MASK_MEDIA
,

72 .
	gauxClockSour˚
 = 
CLK_SRC_SYS_CLK
 ,

73 .
	gauxClockDivNumî©‹
 = 1,

74 .
	gauxClockDivDíomö©‹
 = 1,

78 .
	gauxClockE«bÀMask
 = (
AUX_CLK_MASK_CIF0
 | 
AUX_CLK_MASK_CIF1
),

79 .
	gauxClockSour˚
 = 
CLK_SRC_SYS_CLK
,

80 .
	gauxClockDivNumî©‹
 = 1,

81 .
	gauxClockDivDíomö©‹
 = 1,

84 .
	gauxClockE«bÀMask
 = 
CLOCKS_MIPICFG
,

85 .
	gauxClockSour˚
 = 
CLK_SRC_SYS_CLK
 ,

86 .
	gauxClockDivNumî©‹
 = 1,

87 .
	gauxClockDivDíomö©‹
 = (
uöt32_t
)(
DEFAULT_APP_CLOCK_KHZ
/24000),

90 .
	gauxClockE«bÀMask
 = 
AUX_CLK_MASK_MIPI_TX0
 | 
AUX_CLK_MASK_MIPI_TX1
,

91 .
	gauxClockSour˚
 = 
CLK_SRC_REFCLK0
,

92 .
	gauxClockDivNumî©‹
 = 1,

93 .
	gauxClockDivDíomö©‹
 = 1

96 .
	gauxClockE«bÀMask
 = (
u32
)(1 << 
CSS_AUX_TSENS
),

97 .
	gauxClockSour˚
 = 
CLK_SRC_REFCLK0
,

98 .
	gauxClockDivNumî©‹
 = 1,

99 .
	gauxClockDivDíomö©‹
 = 10,

102 .
	gauxClockE«bÀMask
 = 
AUX_CLK_MASK_USB_PHY_EXTREFCLK
,

103 .
	gauxClockSour˚
 = 
CLK_SRC_PLL0
,

104 .
	gauxClockDivNumî©‹
 = 1,

105 .
	gauxClockDivDíomö©‹
 = (
uöt32_t
)(
DEFAULT_APP_CLOCK_KHZ
/
DESIRED_USB_FREQ_KHZ
)

108 .
	gauxClockE«bÀMask
 = 
AUX_CLK_MASK_USB_PHY_REF_ALT_CLK
,

109 .
	gauxClockSour˚
 = 
CLK_SRC_PLL0
,

110 .
	gauxClockDivNumî©‹
 = 1,

111 .
	gauxClockDivDíomö©‹
 = (
uöt32_t
)(
DEFAULT_APP_CLOCK_KHZ
/
DESIRED_USB_FREQ_KHZ
)

114 .
	gauxClockE«bÀMask
 = 
AUX_CLK_MASK_USB_CTRL_REF_CLK
,

115 .
	gauxClockSour˚
 = 
CLK_SRC_PLL0
,

116 .
	gauxClockDivNumî©‹
 = 1,

117 .
	gauxClockDivDíomö©‹
 = (
uöt32_t
)(
DEFAULT_APP_CLOCK_KHZ
/
DESIRED_USB_FREQ_KHZ
)

120 .
	gauxClockE«bÀMask
 = 
AUX_CLK_MASK_USB_CTRL_SUSPEND_CLK
,

121 .
	gauxClockSour˚
 = 
CLK_SRC_PLL0
,

122 .
	gauxClockDivNumî©‹
 = 1,

123 .
	gauxClockDivDíomö©‹
 = (
uöt32_t
)(
DEFAULT_APP_CLOCK_KHZ
/
DESIRED_USB_FREQ_KHZ
)

130 
	~<DrvLe⁄L2C.h
>

131 
	$À⁄L2CacheInôWrThrough
()

133 
LL2CC⁄fig_t
 
Œ2C⁄fig
;

136 
	`DrvLL2CFlushOpOnAŒLöes
(
LL2C_OPERATION_INVALIDATE
, 0);

138 
Œ2C⁄fig
.
LL2CE«bÀ
 = 1;

139 
Œ2C⁄fig
.
LL2CLockedWaysNo
 = 0;

140 
Œ2C⁄fig
.
LL2CWayToRïœ˚
 = 0;

141 
Œ2C⁄fig
.
busUßge
 = 
BUS_WRAPPING_MODE
;

142 
Œ2C⁄fig
.
hôR©e
 = 
HIT_WRAPPING_MODE
;

143 
Œ2C⁄fig
.
ª∂a˚Pﬁicy
 = 
LRU
;

144 
Œ2C⁄fig
.
wrôePﬁicy
 = 
WRITE_THROUGH
;

146 
	`DrvLL2CInôülize
(&
Œ2C⁄fig
);

147 
	}
}

153 
	$öôClocksAndMem‹y
()

159 
	`OsDrvC¥Inô
();

160 
	`OsDrvC¥O≥n
();

161 
	`OsDrvTimîInô
();

162 
	`OsDrvC¥AuxClockAºayC⁄fig
(
auxClkAŒOn
);

163 
	`À⁄L2CacheInôWrThrough
();

165 
	`DrvShaveL2CacheSëMode
(
L2CACHE_CFG
);

168 
	`SET_REG_WORD
 (
CMX_RSTN_CTRL
,0x00000000);

169 
	`SET_REG_WORD
 (
CMX_CLK_CTRL
, 0xffffffff);

170 
	`SET_REG_WORD
 (
CMX_RSTN_CTRL
,0xffffffff);

172 
	`SET_REG_WORD
(
MSS_CLK_CTRL_ADR
, 0xffffffff);

173 
	`SET_REG_WORD
(
MSS_RSTN_CTRL_ADR
, 0xffffffff);

175 
	`DrvC¥SysDevi˚A˘i⁄
(
MSS_DOMAIN
, 
ASSERT_RESET
, 
DEV_MSS_LCD
 | 
DEV_MSS_CIF0
 | 
DEV_MSS_CIF1
 | 
DEV_MSS_SIPP
);

176 
	`DrvC¥SysDevi˚A˘i⁄
(
MSS_DOMAIN
, 
DEASSERT_RESET
, -1);

177 
	`DrvC¥SysDevi˚A˘i⁄
(
CSS_DOMAIN
, 
DEASSERT_RESET
, -1);

178 
	`DrvC¥SysDevi˚A˘i⁄
(
UPA_DOMAIN
, 
DEASSERT_RESET
, -1);

180 
	`DrvC¥SèπAŒClocks
();

181 
	`SET_REG_WORD
(
MSS_SIPP_RSTN_CTRL_ADR
, 0);

182 
	`SET_REG_WORD
(
MSS_SIPP_RSTN_CTRL_ADR
, 0x3ffffff);

183 
	`SET_REG_WORD
(
MSS_SIPP_CLK_SET_ADR
, 0x3ffffff);

186 
	}
}

190 
	$öôSy°em
()

192 
	`öôClocksAndMem‹y
();

193 
	`DrvGpioIrqSrcDißbÀ
(
IRQ_SRC_0
);

194 
	`DrvGpioIrqSrcDißbÀ
(
IRQ_SRC_1
);

195 
	`DrvGpioIrqSrcDißbÀ
(
IRQ_SRC_2
);

196 
	`DrvGpioIrqSrcDißbÀ
(
IRQ_SRC_3
);

197 
	`DrvGpioInôüli£R™ge
(
brdMV0182GpioCfgDeÁu…
);

198 
	}
}

	@cdk/apps/arch/ma2x5x/cdk_SrcIsp_1xIMX214/leon/initSystem.h

15 #i‚de‡
INITSYSTEM_LOS_H


16 
	#INITSYSTEM_LOS_H


	)

21 
	~<brdDeföes.h
>

22 
	~<DrvC¥.h
>

27 #i‚de‡
DEFAULT_APP_CLOCK_KHZ


28 
	#DEFAULT_APP_CLOCK_KHZ
 480000

	)

31 #i‚de‡
DEFAULT_OSC_CLOCK_KHZ


32 
	#DEFAULT_OSC_CLOCK_KHZ
 
BOARD_REF_CLOCK_KHZ


	)

35 
	#BIGENDIANMODE
 (0x01000786)

	)

37 
	#APP_CSS_CLOCKS
 (–
DEV_CSS_LOS
 ) | \

38 –
DEV_CSS_LAHB_CTRL
 ) | \

39 –
DEV_CSS_APB4_CTRL
 ) | \

40 –
DEV_CSS_CPR
 ) | \

41 –
DEV_CSS_ROM
 ) | \

42 –
DEV_CSS_LOS_L2C
 ) | \

43 –
DEV_CSS_MAHB_CTRL
 ) | \

44 –
DEV_CSS_LOS_ICB
 ) | \

45 –
DEV_CSS_LOS_DSU
 ) | \

46 –
DEV_CSS_LOS_TIM
 ) | \

47 –
DEV_CSS_GPIO
 ) | \

48 –
DEV_CSS_JTAG
 ) | \

49 –
DEV_CSS_APB1_CTRL
 ) | \

50 –
DEV_CSS_AHB_DMA
 ) | \

51 –
DEV_CSS_APB3_CTRL
 ) | \

52 –
DEV_CSS_I2C0
 ) | \

53 –
DEV_CSS_I2C1
 ) | \

54 –
DEV_CSS_I2C2
 ) | \

55 –
DEV_CSS_UART
 ) | \

56 –
DEV_CSS_SPI0
 ) | \

57 –
DEV_CSS_SPI1
 ) | \

58 –
DEV_CSS_SPI2
 ) | \

59 –
DEV_CSS_SAHB_CTRL
 ) | \

60 –
DEV_CSS_MSS_MAS
 ) | \

61 –
DEV_CSS_UPA_MAS
 ) | \

62 –
DEV_CSS_DSS_APB
 ) | \

63 –
DEV_CSS_DSS_BUS
 ) | \

64 –
DEV_CSS_DSS_BUS_DXI
 ) | \

65 –
DEV_CSS_DSS_BUS_AAXI
 ) | \

66 –
DEV_CSS_DSS_BUS_MXI
 ) | \

67 –
DEV_CSS_LAHB2SHB
 ) | \

68 –
DEV_CSS_SAHB2MAHB
 ) | \

69 –
DEV_CSS_USB
 ) | \

70 –
DEV_CSS_USB_APBSLV
 ) | \

71 –
DEV_CSS_AON
 ))

	)

73 
	#APP_UPA_CLOCKS
 (–
DEV_UPA_SHAVE_L2
 ) | \

74 –
DEV_UPA_CDMA
 ) | \

75 –
DEV_UPA_BIC
 ) | \

76 –
DEV_UPA_CTRL
 ) | \

77 –
DEV_UPA_SH0
 ) | \

78 –
DEV_UPA_SH1
 ) | \

79 –
DEV_UPA_SH2
 ) | \

80 –
DEV_UPA_SH3
 ) | \

81 –
DEV_UPA_SH4
 ) | \

82 –
DEV_UPA_SH5
 ) | \

83 –
DEV_UPA_SH6
 ) | \

84 –
DEV_UPA_SH7
 ))

	)

86 
	#APP_MSS_CLOCKS
 (–
DEV_MSS_APB_SLV
 ) | \

87 –
DEV_MSS_APB2_CTRL
 ) | \

88 –
DEV_MSS_RTBRIDGE
 ) | \

89 –
DEV_MSS_RTAHB_CTRL
 ) | \

90 –
DEV_MSS_LRT
 ) | \

91 –
DEV_MSS_LRT_DSU
 ) | \

92 –
DEV_MSS_LRT_L2C
 ) | \

93 –
DEV_MSS_LRT_ICB
 ) | \

94 –
DEV_MSS_AXI_BRIDGE
 ) | \

95 –
DEV_MSS_MXI_CTRL
 ) | \

96 –
DEV_MSS_MXI_DEFSLV
 ) | \

97 –
DEV_MSS_AXI_MON
 ) | \

98 –
DEV_MSS_LCD
 ) | \

99 –
DEV_MSS_TIM
 ) | \

100 –
DEV_MSS_AMC
 ) | \

101 –
DEV_MSS_SIPP
 ))

	)

103 
	#APP_SIPP_CLOCKS
 (–
DEV_SIPP_SIGMA
 ) | \

104 –
DEV_SIPP_LSC
 ) | \

105 –
DEV_SIPP_RAW
 ) | \

106 –
DEV_SIPP_DBYR
 ) | \

107 –
DEV_SIPP_DOGL
 ) | \

108 –
DEV_SIPP_LUMA
 ) | \

109 –
DEV_SIPP_SHARPEN
 ) | \

110 –
DEV_SIPP_CGEN
 ) | \

111 –
DEV_SIPP_MED
 ) | \

112 –
DEV_SIPP_CHROMA
 ) | \

113 –
DEV_SIPP_CC
 ) | \

114 –
DEV_SIPP_LUT
 ) | \

115 –
DEV_SIPP_UPFIRDN0
 ) | \

116 –
DEV_SIPP_UPFIRDN1
 ) | \

117 –
DEV_SIPP_UPFIRDN2
 ) | \

118 –
DEV_SIPP_MIPI_RX0
 ) | \

119 –
DEV_SIPP_MIPI_RX1
 ) | \

120 –
DEV_SIPP_MIPI_RX2
 ) | \

121 –
DEV_SIPP_MIPI
 ) | \

122 –
DEV_SIPP_SIPP_ABPSLV
 ))

	)

132 
öôClocksAndMem‹y
();

134 
öôSy°em
();

	@cdk/apps/arch/ma2x5x/cdk_SrcIsp_1xIMX214/leon/main.c

35 
	~<°döt.h
>

36 
	~<oßl/oßl_°dlib.h
>

37 
	~<oßl/oßl_°rög.h
>

38 
	~<oßl/oßl_time.h
>

39 
	~<utûs/mms_debug.h
>

41 
	~<vîsi⁄_öfo.h
>

45 
	~<∂©f‹m/öc/∂©f‹m.h
>

47 
	~<guzzi_evít/ö˛ude/guzzi_evít.h
>

48 
	~<guzzi_evít_globÆ/ö˛ude/guzzi_evít_globÆ.h
>

50 
	~<dç/dç_£rvî_defs.h
>

52 
	~<comp⁄íts/ˇmîa/vˇmîa_iÁ˚/vút_cm/öc/vút_cm.h
>

54 
	~"öôSy°em.h
"

55 
	~"ˇmîa_c⁄åﬁ.h
"

56 
	~"≠p_guzzi_comm™d_•i.h
"

57 
	~"≠p_guzzi_comm™d_dbg.h
"

59 
	~"£ndOutApi.h
"

61 
	gdo_nŸ_u£_i2c_ch_0
 = 0;

63 
dç_£rvî_hndl_t
 
	gdç_§v_hndl
;

64 
uöt8_t
 
ext_dç_d©aba£
[];

65 
uöt8_t
 
ext_dç_d©aba£_íd
[];

66 
uöt8_t
 
	gdç_dtb_checked
 = 0;

68 
mmsdbg_deföe_v¨übÀ
(

69 
vdl_guzzi_i2c
,

70 
DL_DEFAULT
,

75 
	#MMSDEBUGLEVEL
 
	`mmsdbg_u£_v¨übÀ
(
vdl_guzzi_i2c
)

	)

76 
	gcu°om_ˇm_comm™d
 = 
CUSTOM_CAMERA_COMMAND__PREVIEW_MODE
;

78 #i‡
INPUT_UNIT_IS_USB


79 
	#APP_GUZZI_COMMAND_WAIT_TIMEOUT
 
≠p_guzzi_comm™d_waô_timeout_usb


	)

81 
	#APP_GUZZI_COMMAND_WAIT_TIMEOUT
 
≠p_guzzi_comm™d_waô_timeout_•i


	)

89 
∂©f‹m_drv_powî_öô
();

90 
∂©f‹m_drv_powî_deöô
();

91 
∂©f‹m_ˇm_Àd_1
(
a˘i⁄
);

93 
	$guzzi_ˇmîa3_ˇ±uª_ªsu…__x11_c⁄figuª_°ªams
(

94 
ˇmîa_id
,

95 *
°ªams


98 
	`UNUSED
(
ˇmîa_id
);

99 
	`UNUSED
(
°ªams
);

100 
	}
}

102 
	$guzzi_ˇmîa3_ˇ±uª_ªsu…
(

103 
ˇmîa_id
,

104 
°ªam_id
,

105 
‰ame_numbî
,

106 *
d©a
,

107 
d©a_size


110 
	`UNUSED
(
ˇmîa_id
);

111 
	`UNUSED
(
°ªam_id
);

112 
	`UNUSED
(
‰ame_numbî
);

113 
	`UNUSED
(
d©a
);

114 
	`UNUSED
(
d©a_size
);

115 
	}
}

122 
	$live_tunög_≠∂y
 (
≠p_guzzi_comm™d_t
 *
comm™d
)

124 
uöt8_t
 *
de°
 = 
ext_dç_d©aba£
 + 
comm™d
->
live_tunög
.
off£t
;

125 
uöt8_t
 *
§c
 = 
comm™d
->
live_tunög
.
d©a
;

127 i‡((
de°
 + 
comm™d
->
live_tunög
.
size
Ë> 
ext_dç_d©aba£_íd
) {

128 
	`mmsdbg
(
DL_ERROR
, "DTP offset: %d + size: %dÉxceeded: %d",

129 ()
comm™d
->
live_tunög
.
size
,

130 ()
comm™d
->
live_tunög
.
off£t
,

131 ()(
ext_dç_d©aba£_íd
 - 
ext_dç_d©aba£
)

136 i‡(!
dç_dtb_checked
) {

137 
	`mmsdbg
(
DL_ERROR
, "DTP db isÇot checked");

141 
comm™d
->
live_tunög
.
size
--) {

142 *
de°
++ = *
§c
++;

144 
	}
}

152 
	$live_tunög_u∆ock
 (
≠p_guzzi_comm™d_t
 *
comm™d
)

154 
dç_hndl_t
 
hdç
;

155 
dç_Àaf_d©a_t
 
Àaf
;

156 
dçdb_°©ic_comm⁄_t
 
°©ic_comm⁄
;

157 
dçdb_°©ic_¥iv©e_t
 
°©ic_¥iv©e
;

158 
dçdb_dy«mic_comm⁄_t
 
dcomm
;

159 
dçdb_dy«mic_¥iv©e_t
 
d¥v
;

160 
dç_out_d©a_t
 *
dç_d©a
;

162 
	`oßl_mem£t
(&
°©ic_comm⁄
, 0x00, (static_common));

163 
	`oßl_mem£t
(&
°©ic_¥iv©e
, 0x00, (static_private));

164 
	`oßl_mem£t
(&
dcomm
, 0x00, (dcomm));

165 
	`oßl_mem£t
(&
d¥v
, 0x00, (dprv));

167 if(
	`dç§v_gë_hndl
(
dç_§v_hndl
,

168 
DTP_DB_ID_CHECK_SUM
,

171 
dç_∑øm_‹dî
,

172 &
hdç
, &
Àaf
))

174 
	`mmsdbg
(
DL_ERROR
, "DTP_DB_ID_CHECK_ID - can't get DTP client handle");

175 
EXIT_1
;

178 
	`dç§v_¥e_¥o˚ss
(
hdç
, &
°©ic_comm⁄
, &
°©ic_¥iv©e
);

179 i‡(
	`dç§v_¥o˚ss
(
hdç
, &
dcomm
, &
d¥v
, (**)&
dç_d©a
))

181 
	`mmsdbg
(
DL_ERROR
, "DTP_DB_ID_CHECK_SUM -ÖrocessÉrror");

182 
EXIT_2
;

185 i‡(
DTP_DAT_TYPE_FIXED
 !
dç_d©a
->
d©a_ty≥_id
)

187 
	`mmsdbg
(
DL_ERROR
, "DTP_DB_ID_CHECK_SUM - wrong dataÅype");

188 
EXIT_2
;

191 i‡(
	`oßl_°rcmp
(
dç_d©a
->
d_fixed
.
p_d©a0
, (c⁄° *)
comm™d
->
live_tunög
.
d©a
))

193 
	`mmsdbg
(
DL_ERROR
, "DTP_DB_ID_CHECK_SUM - mismatch");

194 
EXIT_2
;

197 
dç_dtb_checked
 = 1;

199 
EXIT_2
:

200 
	`dç§v_‰ì_hndl
(
hdç
);

201 
EXIT_1
:

203 
	}
}

210 
	$¥ofûe_ªady_cb
(

211 
¥ofûe_t
 *
¥ofûe
,

212 *
¥v
,

213 *
buf„r
,

214 
buf„r_size


217 
	`UNUSED
(
¥v
);

218 
	`UNUSED
(
buf„r
);

219 
	`UNUSED
(
buf„r_size
);

222 
	`PROFILE_RELEASE_READY
(
buf„r
);

223 
	}
}

230 
	$≠p_guzzi_comm™d_ˇŒback
(

231 *
≠p_¥iv©e
,

232 
≠p_guzzi_comm™d_t
 *
comm™d


235 
	`UNUSED
(
≠p_¥iv©e
);

237 
	`mmsdbg
(
DL_ERROR
, "comm™d->id:%d", ()
comm™d
->
id
);

239 
comm™d
->
id
) {

240 
APP_GUZZI_COMMAND__LIVE_TUNING_UNLOCK
:

241 
	`live_tunög_u∆ock
(
comm™d
);

243 
APP_GUZZI_COMMAND__LIVE_TUNING_APPLY
:

244 
	`live_tunög_≠∂y
(
comm™d
);

246 
APP_GUZZI_COMMAND__OUTPUT_CONTROL
:

247 
	`£ndOutC⁄åﬁ
(
comm™d
->
ouçut_c⁄åﬁ
.
ˇmîa_í_bô_mask
,

248 
comm™d
->
ouçut_c⁄åﬁ
.
‰ame_ty≥_í_bô_mask
,

249 
comm™d
->
ouçut_c⁄åﬁ
.
‰ame_f‹m©_í_bô_mask
);

255 i‡(
	`ˇmîa_c⁄åﬁ_is_a˘ive
(
comm™d
->
ˇm
.
id
))

257 i‡(
APP_GUZZI_COMMAND__CAM_START
 =
comm™d
->
id
) {

258 
	`mmsdbg
(
DL_ERROR
, "Skùpög comm™d START f‹áÃódyá˘iv©ed camî®%d", ()
comm™d
->
ˇm
.
id
);

262 i‡(
APP_GUZZI_COMMAND__CAM_START
 !
comm™d
->
id
) {

263 
	`mmsdbg
(
DL_ERROR
, "Skùpög comm™d %d f‹ N⁄á˘ivêˇmî®%d", ()
comm™d
->
id
, ()comm™d->
ˇm
.id);

267 
comm™d
->
id
) {

268 
APP_GUZZI_COMMAND__NOP
:

271 
APP_GUZZI_COMMAND__CAM_START
:

272 
	`PROFILE_ADD
(
PROFILE_ID_EXT_START_CMD
, 0, 0);

273 
	`mmsdbg
(
DL_ERROR
, "comm™d \"%d %d\" sít\n", ()
comm™d
->
id
, ()comm™d->
ˇm
.id);

274 
	`ˇmîa_c⁄åﬁ_°¨t
(
comm™d
->
ˇm
.
id
);

276 
APP_GUZZI_COMMAND__CAM_STOP
:

277 
	`PROFILE_ADD
(
PROFILE_ID_EXT_STOP_CMD
, 0, 0);

278 
	`ˇmîa_c⁄åﬁ_°›
(
comm™d
->
ˇm
.
id
);

279 
	`mmsdbg
(
DL_ERROR
, "comm™d \"%d %d\" sít\n", ()
comm™d
->
id
, ()comm™d->
ˇm
.id);

281 
APP_GUZZI_COMMAND__CAM_CAPTURE
:

282 
	`PROFILE_ADD
(
PROFILE_ID_EXT_CAPTURE_CMD
, 0, 0);

283 
cu°om_ˇm_comm™d
 = 
CUSTOM_CAMERA_COMMAND__CAPTURE_MODE
;

284 
	`mmsdbg
(
DL_ERROR
, "comm™d \"%d %d\" sít\n", ()
comm™d
->
id
, ()comm™d->
ˇm
.id);

286 
APP_GUZZI_COMMAND__CAM_LENS_MOVE
:

287 
	`PROFILE_ADD
(
PROFILE_ID_EXT_LENS_MOVE
, 0, 0);

288 
	`ˇmîa_c⁄åﬁ_Àns_move
(

289 
comm™d
->
ˇm
.
id
,

290 
comm™d
->
ˇm
.
Àns_move
.
pos


292 
	`mmsdbg
(
DL_ERROR
, "command \"%d %d %d\" sent\n",

293 ()
comm™d
->
id
, ()comm™d->
ˇm
.id, ()comm™d->ˇm.
Àns_move
.
pos
);

295 
APP_GUZZI_COMMAND__CAM_AF_TRIGGER
:

296 
	`PROFILE_ADD
(
PROFILE_ID_EXT_LENS_MOVE
, 0, 0);

297 
	`ˇmîa_c⁄åﬁ_focus_åiggî
(
comm™d
->
ˇm
.
id
);

298 
	`mmsdbg
(
DL_ERROR
, "comm™d \"%d %d\" sít\n", ()
comm™d
->
id
, ()comm™d->
ˇm
.id);

300 
APP_GUZZI_COMMAND__CAM_AE_MANUAL
:

301 
	`ˇmîa_c⁄åﬁ_´_m™uÆ
(

302 
comm™d
->
ˇm
.
id
,

303 
comm™d
->
ˇm
.
´_m™uÆ
.
exp_us
,

304 
comm™d
->
ˇm
.
´_m™uÆ
.
£nsôivôy_iso
,

305 
comm™d
->
ˇm
.
´_m™uÆ
.
‰ame_duøti⁄_us


307 
	`mmsdbg
(
DL_ERROR
, "command \"%d %d %d %d %d\" sent\n",

308 ()
comm™d
->
id
,

309 ()
comm™d
->
ˇm
.
id
,

310 ()
comm™d
->
ˇm
.
´_m™uÆ
.
exp_us
,

311 ()
comm™d
->
ˇm
.
´_m™uÆ
.
£nsôivôy_iso
,

312 ()
comm™d
->
ˇm
.
´_m™uÆ
.
‰ame_duøti⁄_us
);

314 
APP_GUZZI_COMMAND__CAM_AE_AUTO
:

315 
	`ˇmîa_c⁄åﬁ_´_auto
(

316 
comm™d
->
ˇm
.
id
,

317 
CAMERA_CONTROL__AE_AUTO__FLASH_MODE__AUTO


319 
	`mmsdbg
(
DL_ERROR
, "comm™d \"%d %d\" sít\n", ()
comm™d
->
id
, ()comm™d->
ˇm
.id);

321 
APP_GUZZI_COMMAND__CAM_AWB_MODE
:

322 
	`ˇmîa_c⁄åﬁ_awb_mode
(

323 
comm™d
->
ˇm
.
id
,

324 
comm™d
->
ˇm
.
awb_mode
.
mode


326 
	`mmsdbg
(
DL_ERROR
, "command \"%d %d %d\" sent\n",

327 ()
comm™d
->
id
, ()comm™d->
ˇm
.id, ()comm™d->ˇm.
awb_mode
.
mode
);

329 
APP_GUZZI_COMMAND__CAM_SCENE_MODE
:

330 
	`ˇmîa_c⁄åﬁ_s˚√_mode
(

331 
comm™d
->
ˇm
.
id
,

332 
comm™d
->
ˇm
.
s˚√_mode
.
ty≥


334 
	`mmsdbg
(
DL_ERROR
, "command \"%d %d %d\" sent\n",

335 ()
comm™d
->
id
, ()comm™d->
ˇm
.id, ()comm™d->ˇm.
s˚√_mode
.
ty≥
);

337 
APP_GUZZI_COMMAND__CAM_ANTIBANDING_MODE
:

338 
	`ˇmîa_c⁄åﬁ_™tib™dög_mode
(

339 
comm™d
->
ˇm
.
id
,

340 
comm™d
->
ˇm
.
™tib™dög_mode
.
ty≥


342 
	`mmsdbg
(
DL_ERROR
, "command \"%d %d %d\" sent\n",

343 ()
comm™d
->
id
, ()comm™d->
ˇm
.id, ()comm™d->ˇm.
™tib™dög_mode
.
ty≥
);

345 
APP_GUZZI_COMMAND__CAM_AE_LOCK
:

346 
	`ˇmîa_c⁄åﬁ_´_lock_mode
(

347 
comm™d
->
ˇm
.
id
,

348 
comm™d
->
ˇm
.
´_lock_mode
.
ty≥


350 
	`mmsdbg
(
DL_ERROR
, "command \"%d %d %d\" sent\n",

351 ()
comm™d
->
id
, ()comm™d->
ˇm
.id, ()comm™d->ˇm.
´_lock_mode
.
ty≥
);

353 
APP_GUZZI_COMMAND__CAM_AE_TARGET_FPS_RANGE
:

354 
	`ˇmîa_c⁄åﬁ_´_èrgë_Âs_ønge
(

355 
comm™d
->
ˇm
.
id
,

356 
comm™d
->
ˇm
.
´_èrgë_Âs_ønge
.
mö_Âs
,

357 
comm™d
->
ˇm
.
´_èrgë_Âs_ønge
.
max_Âs


359 
	`mmsdbg
(
DL_ERROR
, "comm™d \"%d %d %d %d\" sít\n", ()
comm™d
->
id
,

360 ()
comm™d
->
ˇm
.
id
, ()comm™d->ˇm.
´_èrgë_Âs_ønge
.
mö_Âs
,

361 ()
comm™d
->
ˇm
.
´_èrgë_Âs_ønge
.
max_Âs
);

363 
APP_GUZZI_COMMAND__CAM_AWB_LOCK
:

364 
	`ˇmîa_c⁄åﬁ_awb_lock_mode
(

365 
comm™d
->
ˇm
.
id
,

366 
comm™d
->
ˇm
.
awb_lock_c⁄åﬁ
.
ty≥


368 
	`mmsdbg
(
DL_ERROR
, "command \"%d %d %d\" sent\n",

369 ()
comm™d
->
id
, ()comm™d->
ˇm
.id, ()comm™d->ˇm.
awb_lock_c⁄åﬁ
.
ty≥
);

371 
APP_GUZZI_COMMAND__CAM_CAPTURE_INTRENT
:

372 
	`ˇmîa_c⁄åﬁ_ˇ±uª_öã¡
(

373 
comm™d
->
ˇm
.
id
,

374 
comm™d
->
ˇm
.
ˇ±uª_öã¡
.
mode


376 
	`mmsdbg
(
DL_ERROR
, "command \"%d %d %d\" sent\n",

377 ()
comm™d
->
id
, ()comm™d->
ˇm
.id, ()comm™d->ˇm.
ˇ±uª_öã¡
.
mode
);

379 
APP_GUZZI_COMMAND__CAM_CONTROL_MODE
:

380 
	`ˇmîa_c⁄åﬁ_mode
(

381 
comm™d
->
ˇm
.
id
,

382 
comm™d
->
ˇm
.
c⁄åﬁ_mode
.
ty≥


384 
	`mmsdbg
(
DL_ERROR
, "command \"%d %d %d\" sent\n",

385 ()
comm™d
->
id
, ()comm™d->
ˇm
.id, ()comm™d->ˇm.
c⁄åﬁ_mode
.
ty≥
);

387 
APP_GUZZI_COMMAND__CAM_FRAME_DURATION
:

388 
	`ˇmîa_c⁄åﬁ_‰ame_duøti⁄
(

389 
comm™d
->
ˇm
.
id
,

390 
comm™d
->
ˇm
.
‰ame_duøti⁄
.
vÆ


392 
	`mmsdbg
(
DL_ERROR
, "command \"%d %d %d\" sent\n",

393 ()
comm™d
->
id
, ()comm™d->
ˇm
.id, ()comm™d->ˇm.
‰ame_duøti⁄
.
vÆ
);

395 
APP_GUZZI_COMMAND__CAM_AE_EXPOSURE_COMPENSATION
:

396 
	`ˇmîa_c⁄åﬁ_exp_com≥nßti⁄
(

397 
comm™d
->
ˇm
.
id
,

398 
comm™d
->
ˇm
.
exposuª_com≥nßti⁄
.
vÆ


400 
	`mmsdbg
(
DL_ERROR
, "command \"%d %d %d\" sent\n",

401 ()
comm™d
->
id
, ()comm™d->
ˇm
.id, ()comm™d->ˇm.
exposuª_com≥nßti⁄
.
vÆ
);

403 
APP_GUZZI_COMMAND__CAM_SENSITIVITY
:

404 
	`ˇmîa_c⁄åﬁ_£nsôivôy
(

405 
comm™d
->
ˇm
.
id
,

406 
comm™d
->
ˇm
.
£nsôivôy
.
iso_vÆ


408 
	`mmsdbg
(
DL_ERROR
, "command \"%d %d %d\" sent\n",

409 ()
comm™d
->
id
, ()comm™d->
ˇm
.id, ()comm™d->ˇm.
£nsôivôy
.
iso_vÆ
);

411 
APP_GUZZI_COMMAND__CAM_EFFECT_MODE
:

412 
	`ˇmîa_c⁄åﬁ_ef„˘_mode
(

413 
comm™d
->
ˇm
.
id
,

414 
comm™d
->
ˇm
.
ef„˘_mode
.
ty≥


416 
	`mmsdbg
(
DL_ERROR
, "command \"%d %d %d\" sent\n",

417 ()
comm™d
->
id
, ()comm™d->
ˇm
.id, ()comm™d->ˇm.
ef„˘_mode
.
ty≥
);

419 
APP_GUZZI_COMMAND__CAM_AF_MODE
:

420 
	`ˇmîa_c⁄åﬁ_af_mode
(

421 
comm™d
->
ˇm
.
id
,

422 
comm™d
->
ˇm
.
af_mode
.
ty≥


424 
	`mmsdbg
(
DL_ERROR
, "command \"%d %d %d\" sent\n",

425 ()
comm™d
->
id
, ()comm™d->
ˇm
.id, ()comm™d->ˇm.
af_mode
.
ty≥
);

427 
APP_GUZZI_COMMAND__CAM_NOISE_REDUCTION_STRENGTH
:

428 
	`ˇmîa_c⁄åﬁ_noi£_ªdu˘i⁄_°ªngth
(

429 
comm™d
->
ˇm
.
id
,

430 
comm™d
->
ˇm
.
noi£_ªdu˘i⁄_°ªngth
.
vÆ


432 
	`mmsdbg
(
DL_ERROR
, "command \"%d %d %d\" sent\n",

433 ()
comm™d
->
id
, ()comm™d->
ˇm
.id, ()comm™d->ˇm.
noi£_ªdu˘i⁄_°ªngth
.
vÆ
);

435 
APP_GUZZI_COMMAND__CAM_SATURATION
:

436 
	`ˇmîa_c⁄åﬁ_ßtuøti⁄
(

437 
comm™d
->
ˇm
.
id
,

438 
comm™d
->
ˇm
.
ßtuøti⁄
.
vÆ


440 
	`mmsdbg
(
DL_ERROR
, "command \"%d %d %d\" sent\n",

441 ()
comm™d
->
id
, ()comm™d->
ˇm
.id, ()comm™d->ˇm.
ßtuøti⁄
.
vÆ
);

443 
APP_GUZZI_COMMAND__CAM_BRIGHTNESS
:

444 
	`ˇmîa_c⁄åﬁ_brighäess
(

445 
comm™d
->
ˇm
.
id
,

446 
comm™d
->
ˇm
.
brighäess
.
vÆ


448 
	`mmsdbg
(
DL_ERROR
, "command \"%d %d %d\" sent\n",

449 ()
comm™d
->
id
, ()comm™d->
ˇm
.id, ()comm™d->ˇm.
brighäess
.
vÆ
);

451 
APP_GUZZI_COMMAND__CAM_FORMAT
:

452 
	`ˇmîa_c⁄åﬁ_f‹m©
(

453 
comm™d
->
ˇm
.
id
,

454 
comm™d
->
ˇm
.
f‹m©
.
vÆ


456 
	`mmsdbg
(
DL_ERROR
, "command \"%d %d %d\" sent\n",

457 ()
comm™d
->
id
, ()comm™d->
ˇm
.id, ()comm™d->ˇm.
f‹m©
.
vÆ
);

459 
APP_GUZZI_COMMAND__CAM_RESOLUTION
:

460 
	`ˇmîa_c⁄åﬁ_ªsﬁuti⁄
(

461 
comm™d
->
ˇm
.
id
,

462 
comm™d
->
ˇm
.
ªsﬁuti⁄
.
width
,

463 
comm™d
->
ˇm
.
ªsﬁuti⁄
.
height


465 
	`mmsdbg
(
DL_ERROR
, "comm™d \"%d %d %d %d\" sít\n", ()
comm™d
->
id
,

466 ()
comm™d
->
ˇm
.
id
, ()comm™d->ˇm.
ªsﬁuti⁄
.
width
,

467 ()
comm™d
->
ˇm
.
ªsﬁuti⁄
.
height
);

469 
APP_GUZZI_COMMAND__CAM_SHARPNESS
:

470 
	`ˇmîa_c⁄åﬁ_sh¨≤ess
(

471 
comm™d
->
ˇm
.
id
,

472 
comm™d
->
ˇm
.
sh¨≤ess
.
vÆ


474 
	`mmsdbg
(
DL_ERROR
, "command \"%d %d %d\" sent\n",

475 ()
comm™d
->
id
, ()comm™d->
ˇm
.id, ()comm™d->ˇm.
sh¨≤ess
.
vÆ
);

478 
	`mmsdbg
(
DL_ERROR
, "Unknow¿Aµ GUZZI Comm™d: %d", ()
comm™d
->
id
);

480 
	}
}

488 
	$≠p_guzzi_comm™d_waô_timeout_•i
 (*
≠p_¥iv©e
,

489 
≠p_guzzi_comm™d_ˇŒback_t
 *
ˇŒback
,

490 
uöt32_t
 
timeout_ms
)

492  
	`≠p_guzzi_comm™d_•i_waô_timeout
(
≠p_¥iv©e
, 
ˇŒback
, 
timeout_ms
)

493 + 
	`≠p_guzzi_comm™d_dbg_≥ek
(
≠p_¥iv©e
, 
ˇŒback
);

494 
	}
}

497 
oßl_£m
 *
	g≠p_guzzi_comm™d_£m
;

499 
≠p_guzzi_comm™d_t
 *
•i_comm™d_to_≠p_guzzi_comm™d
◊µ_guzzi_comm™d_à*
comm™d
, *
comm™d_•i
);

501 
	#MAX_APP_GUZZI_COMMANDS
 8

	)

502 
≠p_guzzi_comm™d_t
 
	g≠p_guzzi_comm™ds
[
MAX_APP_GUZZI_COMMANDS
];

503 
	g≠p_guzzi_comm™d_rd
 = 0, 
	g≠p_guzzi_comm™d_wr
 = 0;

505 
	$≠p_guzzi_comm™d_gë_wr_idx
()

507 
idx
 = 
≠p_guzzi_comm™d_wr
 + 1;

508 i‡(
idx
 >
MAX_APP_GUZZI_COMMANDS
)

509 
idx
 = 0;

510 i‡(
≠p_guzzi_comm™d_rd
 =
idx
)

512 
	`mmsdbg
(
DL_ERROR
, "Error: command queue overflow\n");

515  
idx
;

516 
	}
}

518 
	$≠p_guzzi_comm™d_commô_wr_idx
(
idx
)

520 
≠p_guzzi_comm™d_wr
 = 
idx
;

521 
	}
}

524 
	$≠p_guzzi_comm™d_gë_rd_idx
()

526 
idx
 = 
≠p_guzzi_comm™d_rd
;

528 i‡(
≠p_guzzi_comm™d_wr
 =
idx
)

530 
	`mmsdbg
(
DL_ERROR
, "Error: command queue overflow\n");

533 
idx
++;

534 i‡(
idx
 =
MAX_APP_GUZZI_COMMANDS
)

535 
idx
 = 0;

537  
idx
;

538 
	}
}

540 
	$≠p_guzzi_comm™d_commô_rd_idx
(
idx
)

542 
≠p_guzzi_comm™d_rd
 = 
idx
;

543 
	}
}

546 
	$≠p_guzzi_comm™d_execuã
(
uöt8_t
 *
ö_comm™d
)

548 
idx
;

549 
idx
 = 
	`≠p_guzzi_comm™d_gë_wr_idx
();

550 i‡(
idx
 < 0)

553 
	`•i_comm™d_to_≠p_guzzi_comm™d
(&
≠p_guzzi_comm™ds
[
idx
], (*)
ö_comm™d
);

554 
	`≠p_guzzi_comm™d_commô_wr_idx
(
idx
);

555 
	`oßl_£m_po°
(
≠p_guzzi_comm™d_£m
);

556 
	}
}

559 
	$≠p_guzzi_comm™d_waô_timeout_usb
(*
≠p_¥iv©e
,

560 
≠p_guzzi_comm™d_ˇŒback_t
 *
ˇŒback
,

561 
uöt32_t
 
timeout_ms
)

563 
rd_idx
;

564 
îr
;

566 
	`≠p_guzzi_comm™d_dbg_≥ek
(
≠p_¥iv©e
, 
ˇŒback
);

568 
îr
 = 
	`oßl_£m_waô_timeout
(
≠p_guzzi_comm™d_£m
, 
timeout_ms
);

569 i‡(
îr
)

575 
rd_idx
 = 
	`≠p_guzzi_comm™d_gë_rd_idx
();

577 i‡(
rd_idx
 < 0)

580 
	`ˇŒback
(
≠p_¥iv©e
, &
≠p_guzzi_comm™ds
[
rd_idx
]);

582 
	`≠p_guzzi_comm™d_commô_rd_idx
(
rd_idx
);

584  
îr
;

585 
	}
}

593 
	$maö
(
¨gc
, **
¨gv
)

595 
	`UNUSED
(
¨gc
);

596 
	`UNUSED
(
¨gv
);

598 
	`vîsi⁄_öfo_öô
();

600 
	`öôSy°em
();

602 
	`oßl_öô
();

605 
	`dç§v_¸óã
(&
dç_§v_hndl
);

606 
	`dç§v_imp‹t_db
(

607 
dç_§v_hndl
,

608 
ext_dç_d©aba£
,

609 
ext_dç_d©aba£_íd
 - 
ext_dç_d©aba£


611 
	`PROFILE_INIT
(32768, 2, 
¥ofûe_ªady_cb
, 
NULL
);

613 
	`guzzi_∂©f‹m_öô
();

614 
	`guzzi_evít_globÆ_˘ª©e
();

616 
	`£ndOutCª©e
(&
£ndOut_öôCfg
);

618 
	`vút_cm_dëe˘
();

621 
	`≠p_guzzi_comm™d_•i_öô
();

623 
≠p_guzzi_comm™d_£m
 = 
	`oßl_£m_¸óã
(0);

625 
	`∂©f‹m_drv_powî_öô
();

626 
	`∂©f‹m_ˇm_Àd_1
(0);

629 
	`APP_GUZZI_COMMAND_WAIT_TIMEOUT
(

630 
NULL
,

631 
≠p_guzzi_comm™d_ˇŒback
,

636 
	`∂©f‹m_ˇm_Àd_1
(1);

637 
	`∂©f‹m_drv_powî_deöô
();

639 
	`oßl_£m_de°roy
(
≠p_guzzi_comm™d_£m
);

641 
	}
}

	@cdk/apps/arch/ma2x5x/cdk_SrcIsp_1xIMX214/leon/sendout_config.c

19 
	~"mv_ty≥s.h
"

21 
	~"£ndOutApi.h
"

22 #ifde‡
OUTPUT_UNIT_IS_HDMI


23 
	~"LcdCEA1080p60.h
"

28 #ifde‡
OUTPUT_UNIT_IS_MIPI


29 
	#MIPI_TX_NUM_LANES
 2

	)

30 
	#MIPI_TX_CLOCK
 400

	)

31 
	#MIPI_TX_USE_IRQ
 1

	)

34 #ifde‡
OUTPUT_UNIT_IS_USB


35 #i‚de‡
DISABLE_LEON_DCACHE


36 
	#USBPUMP_MDK_CACHE_ENABLE
 1

	)

38 
	#USBPUMP_MDK_CACHE_ENABLE
 0

	)

44 
HdmiCfg_t
 
	ghdmiInôCfg
 =

46 #ifde‡
OUTPUT_UNIT_IS_HDMI


47 
NULL
,

48 
NULL
,

49 &
lcdS≥c1080p60


51 
NULL


55 
MùiCfg_t
 
	gmùiInôCfg
 =

57 #ifde‡
OUTPUT_UNIT_IS_MIPI


58 .
˘æNo
 = 
MIPI_CTRL_5
,

59 .
	gmss_devi˚
 = 
DRV_MSS_LCD
,

60 .
	gnum_œ√s
 = 
MIPI_TX_NUM_LANES
,

61 .
	gtx_˛ock
 = 
MIPI_TX_CLOCK
,

62 .
	gªf_˛ock_kHz
 = 12000,

63 .
	gu£_úq
 = 
MIPI_TX_USE_IRQ


65 
NULL


69 #ifde‡
OUTPUT_UNIT_IS_USB


70 
osDrvUsbPhyP¨am_t
 
	göôP¨am
 =

72 .
íabÀOtgBlock
 = 
USB_PHY_OTG_DISABLED
,

73 .
	gu£Exã∫ÆClock
 = 0,

74 .
	gfSñ
 = 
USB_REFCLK_MHZ
,

75 .
	gªfClkSñ0
 = 
USB_SUPER_SPEED_CLK_CONFIG
,

76 .
	gf‹˚HsO∆y
 = 
USB_PHY_HS_ONLY_OFF


79 
USBPUMP_APPLICATION_RTEMS_CONFIGURATION
 
	gsg_D©aPump_AµC⁄fig
 =

80 
USBPUMP_APPLICATION_RTEMS_CONFIGURATION_INIT_V1
(

82  
NULL
,

87  
NULL
,

88  
NULL
,

89  
USBPUMP_MDK_CACHE_ENABLE
,

90  
UDMASK_ANY
 | 
UDMASK_ERRORS
 );

92 
≠p_guzzi_comm™d_execuã
(
uöt8_t
 *
ö_comm™d
);

96 
UsbCfg_t
 
	gusbInôCfg
 =

98 #ifde‡
OUTPUT_UNIT_IS_USB


99 &
öôP¨am
,

100 &
sg_D©aPump_AµC⁄fig
,

101 &
≠p_guzzi_comm™d_execuã


103 
NULL


107 
SídOutInôCfg_t
 
	g£ndOut_öôCfg
 =

109 &
hdmiInôCfg
,

110 &
mùiInôCfg
,

111 &
usbInôCfg


	@cdk/apps/arch/ma2x5x/cdk_SrcIsp_1xIMX214/leon/sendout_config.h

15 #i‚de‡
SENDOUT_CONFIG_H


16 
	#SENDOUT_CONFIG_H


	)

21 
	~"mv_ty≥s.h
"

23 #ifde‡
OUTPUT_UNIT_IS_HDMI


24 #ifde‡
MV0212


25 
	~"MV0212.h
"

27 
	~"Bﬂrd182Api.h
"

29 
	~"LcdApi.h
"

30 
	~"DrvI2cMa°î.h
"

31 
	~"DrvADV7513.h
"

34 #ifde‡
OUTPUT_UNIT_IS_MIPI


35 
	~<DrvMùiDeföes.h
>

36 
	~"DrvMss.h
"

39 #ifde‡
OUTPUT_UNIT_IS_USB


40 
	~"OsDrvUsbPhy.h
"

41 
	~"usbpumpdebug.h
"

42 
	~"usbpump_≠∂iˇti⁄_πems_≠i.h
"

49 #i‚de‡
APP_CONFIGURATION


50 #w¨nög 
SEND
 
OUT
: 
USE
 
DEFAULT
 
DEFINITIONS


52 #ifde‡
OUTPUT_UNIT_IS_HDMI


53 
	#SEND_OUT_MAX_WIDTH
 (3842)

	)

54 
	#SEND_OUT_MAX_HEIGHT
 (2200)

	)

57 #i‡
deföed
(
OUTPUT_UNIT_IS_USB
Ë|| deföed(
OUTPUT_UNIT_IS_MIPI
)

60 
	#SEND_OUT_MAX_WIDTH
 (4300)

	)

61 
	#SEND_OUT_MAX_HEIGHT
 (3200)

	)

63 
	#USE_STATIC_HEADER


	)

64 
	#SEND_OUT_HEADER_HEIGHT
 (2)

	)

68 #ifde‡
OUTPUT_UNIT_IS_HDMI


69 
	#SEND_OUT_MAX_WIDTH
 (3842)

	)

70 
	#SEND_OUT_MAX_HEIGHT
 (2200)

	)

73 #i‡
deföed
(
OUTPUT_UNIT_IS_USB
Ë|| deföed(
OUTPUT_UNIT_IS_MIPI
)

76 
	#SEND_OUT_MAX_WIDTH
 (4300)

	)

77 
	#SEND_OUT_MAX_HEIGHT
 (3200)

	)

79 
	#USE_STATIC_HEADER


	)

80 
	#SEND_OUT_HEADER_HEIGHT
 (2)

	)

87 #ifde‡
OUTPUT_UNIT_IS_HDMI


88 
ADV7513C⁄tfigMode_t
 
	madvCfgMode
;

89 
I2CM_Devi˚
 **
	mi2c_dev_hndl
;

90 
LCDDi•œyCfg
 *
	mlcdCfg
;

92 *
	mdummy
;

94 } 
	tHdmiCfg_t
;

98 #ifde‡
OUTPUT_UNIT_IS_MIPI


99 
eDrvMùiCålNo
 
	m˘æNo
;

100 
drvMssDevi˚Ty≥
 
	mmss_devi˚
;

101 
	mnum_œ√s
;

102 
	mtx_˛ock
;

103 
u32
 
	mªf_˛ock_kHz
;

104 
	mu£_úq
;

106 *
	mdummy
;

108 } 
	tMùiCfg_t
;

111 (*
	tUsbSíd_I≈utCålCÆlback_Ty≥
)(
	tuöt8_t
 *);

115 #ifde‡
OUTPUT_UNIT_IS_USB


116 
osDrvUsbPhyP¨am_t
 *
phyP¨amInô
;

117 
USBPUMP_APPLICATION_RTEMS_CONFIGURATION
 *
d©aPumpCfgInô
;

118 
UsbSíd_I≈utCålCÆlback_Ty≥
 
cb_fun˘i⁄
;

120 *
dummy
;

122 } 
	tUsbCfg_t
;

	@/usr/include/arpa/inet.h

18 #i‚de‡
_ARPA_INET_H


19 
	#_ARPA_INET_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<√töë/ö.h
>

25 #i‚de‡
__sockÀn_t_deföed


26 
__sockÀn_t
 
	tsockÀn_t
;

27 
	#__sockÀn_t_deföed


	)

30 
__BEGIN_DECLS


34 
ö_addr_t
 
	$öë_addr
 (c⁄° *
__˝
Ë
__THROW
;

37 
ö_addr_t
 
	$öë_ aof
 (
ö_addr
 
__ö
Ë
__THROW
;

41 
ö_addr
 
	$öë_makóddr
 (
ö_addr_t
 
__√t
, in_addr_à
__ho°
)

42 
__THROW
;

45 
ö_addr_t
 
	$öë_√tof
 (
ö_addr
 
__ö
Ë
__THROW
;

49 
ö_addr_t
 
	$öë_√tw‹k
 (c⁄° *
__˝
Ë
__THROW
;

53 *
	$öë_¡ﬂ
 (
ö_addr
 
__ö
Ë
__THROW
;

58 
	$öë_±⁄
 (
__af
, c⁄° *
__ª°ri˘
 
__˝
,

59 *
__ª°ri˘
 
__buf
Ë
__THROW
;

64 c⁄° *
	$öë_¡›
 (
__af
, c⁄° *
__ª°ri˘
 
__˝
,

65 *
__ª°ri˘
 
__buf
, 
sockÀn_t
 
__Àn
)

66 
__THROW
;

70 #ifde‡
__USE_MISC


73 
	$öë_©⁄
 (c⁄° *
__˝
, 
ö_addr
 *
__öp
Ë
__THROW
;

77 *
	$öë_√è
 (
ö_addr_t
 
__√t
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

82 *
	$öë_√t_¡›
 (
__af
, c⁄° *
__˝
, 
__bôs
,

83 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

88 
	$öë_√t_±⁄
 (
__af
, c⁄° *
__˝
,

89 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

94 
	$öë_nßp_addr
 (c⁄° *
__˝
,

95 *
__buf
, 
__Àn
Ë
__THROW
;

99 *
	$öë_nßp_¡ﬂ
 (
__Àn
, c⁄° *
__˝
,

100 *
__buf
Ë
__THROW
;

103 
__END_DECLS


	@/usr/include/assert.h

22 #ifdef 
_ASSERT_H


24 #unde‡
_ASSERT_H


25 #unde‡
as£π


26 #unde‡
__ASSERT_VOID_CAST


28 #ifdef 
__USE_GNU


29 #unde‡
as£π_≥º‹


34 
	#_ASSERT_H
 1

	)

35 
	~<„©uªs.h
>

37 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,95)

38 
	#__ASSERT_VOID_CAST
 
°©ic_ˇ°
<>

	)

40 
	#__ASSERT_VOID_CAST
 ()

	)

48 #ifdef 
NDEBUG


50 
	#as£π
(
ex¥
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

58 #ifdef 
__USE_GNU


59 
	#as£π_≥º‹
(
î∫um
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

64 #i‚de‡
_ASSERT_H_DECLS


65 
	#_ASSERT_H_DECLS


	)

66 
__BEGIN_DECLS


69 
	$__as£π_Áû
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
,

70 
__löe
, c⁄° *
__fun˘i⁄
)

71 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

74 
	$__as£π_≥º‹_Áû
 (
__î∫um
, c⁄° *
__fûe
,

75 
__löe
, c⁄° *
__fun˘i⁄
)

76 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

81 
	$__as£π
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
, 
__löe
)

82 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

85 
__END_DECLS


88 
	#as£π
(
ex¥
) \

89 ((
ex¥
) \

90 ? 
	`__ASSERT_VOID_CAST
 (0) \

91 : 
	`__as£π_Áû
 (#ex¥, 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

93 #ifdef 
__USE_GNU


94 
	#as£π_≥º‹
(
î∫um
) \

95 (!(
î∫um
) \

96 ? 
	`__ASSERT_VOID_CAST
 (0) \

97 : 
	`__as£π_≥º‹_Áû
 ((
î∫um
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

105 #i‡
deföed
 
__˝lu•lus
 ? 
	`__GNUC_PREREQ
 (2, 6) : __GNUC_PREREQ (2, 4)

106 
	#__ASSERT_FUNCTION
 
__PRETTY_FUNCTION__


	)

108 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

109 
	#__ASSERT_FUNCTION
 
__func__


	)

111 
	#__ASSERT_FUNCTION
 ((c⁄° *Ë0)

	)

118 #i‡
deföed
 
__USE_ISOC11
 && !deföed 
__˝lu•lus


119 #unde‡
°©ic_as£π


120 
	#°©ic_as£π
 
_Sètic_as£π


	)

	@/usr/include/ctype.h

22 #i‚def 
_CTYPE_H


23 
	#_CTYPE_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 
	g__BEGIN_DECLS


30 #i‚de‡
_ISbô


39 
	~<ídün.h
>

40 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


41 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

43 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

48 
	m_ISuµî
 = 
_ISbô
 (0),

49 
	m_ISlowî
 = 
_ISbô
 (1),

50 
	m_ISÆpha
 = 
_ISbô
 (2),

51 
	m_ISdigô
 = 
_ISbô
 (3),

52 
	m_ISxdigô
 = 
_ISbô
 (4),

53 
	m_IS•a˚
 = 
_ISbô
 (5),

54 
	m_IS¥öt
 = 
_ISbô
 (6),

55 
	m_ISgøph
 = 
_ISbô
 (7),

56 
	m_ISbœnk
 = 
_ISbô
 (8),

57 
	m_IS˙ål
 = 
_ISbô
 (9),

58 
	m_ISpun˘
 = 
_ISbô
 (10),

59 
	m_ISÆnum
 = 
_ISbô
 (11)

79 c⁄° **
	$__˘y≥_b_loc
 ()

80 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

81 c⁄° 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

83 c⁄° 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

87 #i‚de‡
__˝lu•lus


88 
	#__is˘y≥
(
c
, 
ty≥
) \

89 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

90 #ñi‡
deföed
 
__USE_EXTERN_INLINES


91 
	#__is˘y≥_f
(
ty≥
) \

92 
__exã∫_ölöe
 \

93 
is
##
	`ty≥
 (
__c
Ë
__THROW
 \

95  (*
	`__˘y≥_b_loc
 ())[(Ë(
__c
)] & (Ë
_IS
##
ty≥
; \

96 
	}

	)
}

99 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

100 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

102 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

104 
__BEGIN_NAMESPACE_STD


110 
__ex˘y≥
 (
iß um
);

111 
__ex˘y≥
 (
ißÕha
);

112 
__ex˘y≥
 (
is˙ål
);

113 
__ex˘y≥
 (
isdigô
);

114 
__ex˘y≥
 (
i¶owî
);

115 
__ex˘y≥
 (
isgøph
);

116 
__ex˘y≥
 (
i•röt
);

117 
__ex˘y≥
 (
i•un˘
);

118 
__ex˘y≥
 (
is•a˚
);

119 
__ex˘y≥
 (
isuµî
);

120 
__ex˘y≥
 (
isxdigô
);

124 
	$tﬁowî
 (
__c
Ë
__THROW
;

127 
	$touµî
 (
__c
Ë
__THROW
;

129 
__END_NAMESPACE_STD


133 #ifdef 
__USE_ISOC99


134 
__BEGIN_NAMESPACE_C99


136 
	`__ex˘y≥
 (
isbœnk
);

138 
__END_NAMESPACE_C99


141 #ifde‡
__USE_GNU


143 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

146 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


150 
	$ißscii
 (
__c
Ë
__THROW
;

154 
	$tﬂscii
 (
__c
Ë
__THROW
;

158 
	`__ex˘y≥
 (
_touµî
);

159 
	`__ex˘y≥
 (
_tﬁowî
);

163 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

164 (
__exãnsi⁄__
 \

165 ({ 
__ªs
; \

166 i‡( (
c
) > 1) \

168 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

170 
__c
 = (
c
); \

171 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

174 
__ªs
 = 
f
 
¨gs
; \

177 
__ªs
 = (
a
)[(Ë(
c
)]; \

178 
__ªs
; 
	}
}))

	)

180 #i‡!
deföed
 
__NO_CTYPE


181 #ifde‡
__is˘y≥_f


182 
	$__is˘y≥_f
 (
Ænum
)

183 
	$__is˘y≥_f
 (
Æpha
)

184 
	$__is˘y≥_f
 (
˙ål
)

185 
	$__is˘y≥_f
 (
digô
)

186 
	$__is˘y≥_f
 (
lowî
)

187 
	$__is˘y≥_f
 (
gøph
)

188 
	$__is˘y≥_f
 (
¥öt
)

189 
	$__is˘y≥_f
 (
pun˘
)

190 
	$__is˘y≥_f
 (
•a˚
)

191 
	$__is˘y≥_f
 (
uµî
)

192 
	$__is˘y≥_f
 (
xdigô
)

193 #ifde‡
__USE_ISOC99


194 
	$__is˘y≥_f
 (
bœnk
)

196 #ñi‡
deföed
 
__is˘y≥


197 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

198 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

199 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

200 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

201 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

202 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

203 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

204 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

205 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

206 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

207 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

208 #ifde‡
__USE_ISOC99


209 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

213 #ifde‡
__USE_EXTERN_INLINES


214 
__exã∫_ölöe
 

215 
	`__NTH
 (
	$tﬁowî
 (
__c
))

217  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

218 
	}
}

220 
__exã∫_ölöe
 

221 
__NTH
 (
	$touµî
 (
__c
))

223  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

224 
	}
}

227 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


228 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

229 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

232 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


233 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

234 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

236 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

237 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

243 #ifde‡
__USE_XOPEN2K8


257 
	~<xloˇÀ.h
>

261 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

262 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

264 
	#__ex˘y≥_l
(
«me
) \

265 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

271 
__ex˘y≥_l
 (
iß um_l
);

272 
__ex˘y≥_l
 (
ißÕha_l
);

273 
__ex˘y≥_l
 (
is˙ål_l
);

274 
__ex˘y≥_l
 (
isdigô_l
);

275 
__ex˘y≥_l
 (
i¶owî_l
);

276 
__ex˘y≥_l
 (
isgøph_l
);

277 
__ex˘y≥_l
 (
i•röt_l
);

278 
__ex˘y≥_l
 (
i•un˘_l
);

279 
__ex˘y≥_l
 (
is•a˚_l
);

280 
__ex˘y≥_l
 (
isuµî_l
);

281 
__ex˘y≥_l
 (
isxdigô_l
);

283 
__ex˘y≥_l
 (
isbœnk_l
);

287 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

288 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

291 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

292 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

294 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


295 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

296 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

297 
	#__touµî_l
(
c
, 
loˇÀ
) \

298 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

299 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

300 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

304 #i‚de‡
__NO_CTYPE


305 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

306 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

307 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

308 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

309 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

310 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

311 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

312 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

313 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

314 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

315 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

317 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

319 #ifde‡
__USE_MISC


320 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

321 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

324 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

325 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

326 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

327 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

328 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

329 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

330 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

331 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

332 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

333 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

334 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

336 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

338 #ifde‡
__USE_MISC


339 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

340 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

347 
__END_DECLS


	@/usr/include/errno.h

22 #i‚def 
_ERRNO_H


26 #i‚def 
__√ed_Em©h


27 
	#_ERRNO_H
 1

	)

28 
	~<„©uªs.h
>

31 
	g__BEGIN_DECLS


35 
	~<bôs/î∫o.h
>

36 #unde‡
__√ed_Em©h


38 #ifdef 
_ERRNO_H


45 #i‚def 
î∫o


46 
î∫o
;

49 #ifde‡
__USE_GNU


54 *
¥ogøm_övoˇti⁄_«me
, *
¥ogøm_övoˇti⁄_sh‹t_«me
;

58 
	g__END_DECLS


66 #i‡
deföed
 
__USE_GNU
 || deföed 
__√ed_îr‹_t


67 #i‚de‡
__îr‹_t_deföed


68 
	tîr‹_t
;

69 
	#__îr‹_t_deföed
 1

	)

71 #unde‡
__√ed_îr‹_t


	@/usr/include/fcntl.h

22 #i‚def 
_FCNTL_H


23 
	#_FCNTL_H
 1

	)

25 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


31 
	~<bôs/ty≥s.h
>

35 
	~<bôs/f˙é.h
>

39 #ifde‡
__O_TMPFILE


40 
	#__OPEN_NEEDS_MODE
(
oÊag
) \

41 (((
oÊag
Ë& 
O_CREAT
Ë!0 || ((oÊagË& 
__O_TMPFILE
Ë=__O_TMPFILE)

	)

43 
	#__OPEN_NEEDS_MODE
(
oÊag
Ë(((oÊagË& 
O_CREAT
Ë!0)

	)

49 #i‚de‡
__mode_t_deföed


50 
__mode_t
 
	tmode_t
;

51 
	#__mode_t_deföed


	)

54 #i‚de‡
__off_t_deföed


55 #i‚de‡
__USE_FILE_OFFSET64


56 
__off_t
 
	toff_t
;

58 
__off64_t
 
	toff_t
;

60 
	#__off_t_deföed


	)

63 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


64 
__off64_t
 
	toff64_t
;

65 
	#__off64_t_deföed


	)

68 #i‚de‡
__pid_t_deföed


69 
__pid_t
 
	tpid_t
;

70 
	#__pid_t_deföed


	)

74 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


75 
	#__√ed_time•ec


	)

76 
	~<time.h
>

77 
	~<bôs/°©.h
>

79 
	#S_IFMT
 
__S_IFMT


	)

80 
	#S_IFDIR
 
__S_IFDIR


	)

81 
	#S_IFCHR
 
__S_IFCHR


	)

82 
	#S_IFBLK
 
__S_IFBLK


	)

83 
	#S_IFREG
 
__S_IFREG


	)

84 #ifde‡
__S_IFIFO


85 
	#S_IFIFO
 
__S_IFIFO


	)

87 #ifde‡
__S_IFLNK


88 
	#S_IFLNK
 
__S_IFLNK


	)

90 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
Ë&& deföed 
__S_IFSOCK


91 
	#S_IFSOCK
 
__S_IFSOCK


	)

96 
	#S_ISUID
 
__S_ISUID


	)

97 
	#S_ISGID
 
__S_ISGID


	)

99 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


101 
	#S_ISVTX
 
__S_ISVTX


	)

104 
	#S_IRUSR
 
__S_IREAD


	)

105 
	#S_IWUSR
 
__S_IWRITE


	)

106 
	#S_IXUSR
 
__S_IEXEC


	)

108 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

110 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

111 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

112 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

114 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

116 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

117 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

118 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

120 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

123 #ifdef 
__USE_MISC


124 #i‚de‡
R_OK


127 
	#R_OK
 4

	)

128 
	#W_OK
 2

	)

129 
	#X_OK
 1

	)

130 
	#F_OK
 0

	)

135 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


136 
	#SEEK_SET
 0

	)

137 
	#SEEK_CUR
 1

	)

138 
	#SEEK_END
 2

	)

146 
f˙é
 (
__fd
, 
__cmd
, ...);

155 #i‚de‡
__USE_FILE_OFFSET64


156 
	$›í
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

158 #ifde‡
__REDIRECT


159 
	`__REDIRECT
 (
›í
, (c⁄° *
__fûe
, 
__oÊag
, ...), 
›í64
)

160 
	`__n⁄nuŒ
 ((1));

162 
	#›í
 
›í64


	)

165 #ifde‡
__USE_LARGEFILE64


166 
	$›í64
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

169 #ifde‡
__USE_ATFILE


179 #i‚de‡
__USE_FILE_OFFSET64


180 
	$›í©
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

181 
	`__n⁄nuŒ
 ((2));

183 #ifde‡
__REDIRECT


184 
	`__REDIRECT
 (
›í©
, (
__fd
, c⁄° *
__fûe
, 
__oÊag
,

185 ...), 
›í©64
Ë
	`__n⁄nuŒ
 ((2));

187 
	#›í©
 
›í©64


	)

190 #ifde‡
__USE_LARGEFILE64


191 
	$›í©64
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

192 
	`__n⁄nuŒ
 ((2));

201 #i‚de‡
__USE_FILE_OFFSET64


202 
	$¸ót
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

204 #ifde‡
__REDIRECT


205 
	`__REDIRECT
 (
¸ót
, (c⁄° *
__fûe
, 
mode_t
 
__mode
),

206 
¸ót64
Ë
	`__n⁄nuŒ
 ((1));

208 
	#¸ót
 
¸ót64


	)

211 #ifde‡
__USE_LARGEFILE64


212 
	$¸ót64
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

215 #i‡!
deföed
 
F_LOCK
 && (deföed 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

216 && !
deföed
 
__USE_POSIX
))

225 
	#F_ULOCK
 0

	)

226 
	#F_LOCK
 1

	)

227 
	#F_TLOCK
 2

	)

228 
	#F_TEST
 3

	)

230 #i‚de‡
__USE_FILE_OFFSET64


231 
	`lockf
 (
__fd
, 
__cmd
, 
off_t
 
__Àn
);

233 #ifde‡
__REDIRECT


234 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
), 
lockf64
);

236 
	#lockf
 
lockf64


	)

239 #ifde‡
__USE_LARGEFILE64


240 
	`lockf64
 (
__fd
, 
__cmd
, 
off64_t
 
__Àn
);

244 #ifde‡
__USE_XOPEN2K


247 #i‚de‡
__USE_FILE_OFFSET64


248 
	$posix_Ádvi£
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
,

249 
__advi£
Ë
__THROW
;

251 #ifde‡
__REDIRECT_NTH


252 
	`__REDIRECT_NTH
 (
posix_Ádvi£
, (
__fd
, 
__off64_t
 
__off£t
,

253 
__off64_t
 
__Àn
, 
__advi£
),

254 
posix_Ádvi£64
);

256 
	#posix_Ádvi£
 
posix_Ádvi£64


	)

259 #ifde‡
__USE_LARGEFILE64


260 
	$posix_Ádvi£64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
,

261 
__advi£
Ë
__THROW
;

269 #i‚de‡
__USE_FILE_OFFSET64


270 
	`posix_ÁŒoˇã
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
);

272 #ifde‡
__REDIRECT


273 
	`__REDIRECT
 (
posix_ÁŒoˇã
, (
__fd
, 
__off64_t
 
__off£t
,

274 
__off64_t
 
__Àn
),

275 
posix_ÁŒoˇã64
);

277 
	#posix_ÁŒoˇã
 
posix_ÁŒoˇã64


	)

280 #ifde‡
__USE_LARGEFILE64


281 
	`posix_ÁŒoˇã64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
);

287 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄
 \

288 && 
deföed
 
__va_¨g_∑ck_Àn


289 
	~<bôs/f˙é2.h
>

292 
__END_DECLS


	@/usr/include/inttypes.h

22 #i‚de‡
_INTTYPES_H


23 
	#_INTTYPES_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<°döt.h
>

30 #i‚de‡
____gwch¨_t_deföed


31 #ifde‡
__˝lu•lus


32 
	#__gwch¨_t
 
wch¨_t


	)

33 #ñi‡
deföed
 
__WCHAR_TYPE__


34 
__WCHAR_TYPE__
 
	t__gwch¨_t
;

36 
	#__√ed_wch¨_t


	)

37 
	~<°ddef.h
>

38 
wch¨_t
 
	t__gwch¨_t
;

40 
	#____gwch¨_t_deföed
 1

	)

43 #i‡
__WORDSIZE
 == 64

44 
	#__PRI64_PREFIX
 "l"

	)

45 
	#__PRIPTR_PREFIX
 "l"

	)

47 
	#__PRI64_PREFIX
 "Œ"

	)

48 
	#__PRIPTR_PREFIX


	)

54 
	#PRId8
 "d"

	)

55 
	#PRId16
 "d"

	)

56 
	#PRId32
 "d"

	)

57 
	#PRId64
 
__PRI64_PREFIX
 "d"

	)

59 
	#PRIdLEAST8
 "d"

	)

60 
	#PRIdLEAST16
 "d"

	)

61 
	#PRIdLEAST32
 "d"

	)

62 
	#PRIdLEAST64
 
__PRI64_PREFIX
 "d"

	)

64 
	#PRIdFAST8
 "d"

	)

65 
	#PRIdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

66 
	#PRIdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

67 
	#PRIdFAST64
 
__PRI64_PREFIX
 "d"

	)

70 
	#PRIi8
 "i"

	)

71 
	#PRIi16
 "i"

	)

72 
	#PRIi32
 "i"

	)

73 
	#PRIi64
 
__PRI64_PREFIX
 "i"

	)

75 
	#PRIiLEAST8
 "i"

	)

76 
	#PRIiLEAST16
 "i"

	)

77 
	#PRIiLEAST32
 "i"

	)

78 
	#PRIiLEAST64
 
__PRI64_PREFIX
 "i"

	)

80 
	#PRIiFAST8
 "i"

	)

81 
	#PRIiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

82 
	#PRIiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

83 
	#PRIiFAST64
 
__PRI64_PREFIX
 "i"

	)

86 
	#PRIo8
 "o"

	)

87 
	#PRIo16
 "o"

	)

88 
	#PRIo32
 "o"

	)

89 
	#PRIo64
 
__PRI64_PREFIX
 "o"

	)

91 
	#PRIoLEAST8
 "o"

	)

92 
	#PRIoLEAST16
 "o"

	)

93 
	#PRIoLEAST32
 "o"

	)

94 
	#PRIoLEAST64
 
__PRI64_PREFIX
 "o"

	)

96 
	#PRIoFAST8
 "o"

	)

97 
	#PRIoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

98 
	#PRIoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

99 
	#PRIoFAST64
 
__PRI64_PREFIX
 "o"

	)

102 
	#PRIu8
 "u"

	)

103 
	#PRIu16
 "u"

	)

104 
	#PRIu32
 "u"

	)

105 
	#PRIu64
 
__PRI64_PREFIX
 "u"

	)

107 
	#PRIuLEAST8
 "u"

	)

108 
	#PRIuLEAST16
 "u"

	)

109 
	#PRIuLEAST32
 "u"

	)

110 
	#PRIuLEAST64
 
__PRI64_PREFIX
 "u"

	)

112 
	#PRIuFAST8
 "u"

	)

113 
	#PRIuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

114 
	#PRIuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

115 
	#PRIuFAST64
 
__PRI64_PREFIX
 "u"

	)

118 
	#PRIx8
 "x"

	)

119 
	#PRIx16
 "x"

	)

120 
	#PRIx32
 "x"

	)

121 
	#PRIx64
 
__PRI64_PREFIX
 "x"

	)

123 
	#PRIxLEAST8
 "x"

	)

124 
	#PRIxLEAST16
 "x"

	)

125 
	#PRIxLEAST32
 "x"

	)

126 
	#PRIxLEAST64
 
__PRI64_PREFIX
 "x"

	)

128 
	#PRIxFAST8
 "x"

	)

129 
	#PRIxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

130 
	#PRIxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

131 
	#PRIxFAST64
 
__PRI64_PREFIX
 "x"

	)

134 
	#PRIX8
 "X"

	)

135 
	#PRIX16
 "X"

	)

136 
	#PRIX32
 "X"

	)

137 
	#PRIX64
 
__PRI64_PREFIX
 "X"

	)

139 
	#PRIXLEAST8
 "X"

	)

140 
	#PRIXLEAST16
 "X"

	)

141 
	#PRIXLEAST32
 "X"

	)

142 
	#PRIXLEAST64
 
__PRI64_PREFIX
 "X"

	)

144 
	#PRIXFAST8
 "X"

	)

145 
	#PRIXFAST16
 
__PRIPTR_PREFIX
 "X"

	)

146 
	#PRIXFAST32
 
__PRIPTR_PREFIX
 "X"

	)

147 
	#PRIXFAST64
 
__PRI64_PREFIX
 "X"

	)

151 
	#PRIdMAX
 
__PRI64_PREFIX
 "d"

	)

152 
	#PRIiMAX
 
__PRI64_PREFIX
 "i"

	)

153 
	#PRIoMAX
 
__PRI64_PREFIX
 "o"

	)

154 
	#PRIuMAX
 
__PRI64_PREFIX
 "u"

	)

155 
	#PRIxMAX
 
__PRI64_PREFIX
 "x"

	)

156 
	#PRIXMAX
 
__PRI64_PREFIX
 "X"

	)

160 
	#PRIdPTR
 
__PRIPTR_PREFIX
 "d"

	)

161 
	#PRIiPTR
 
__PRIPTR_PREFIX
 "i"

	)

162 
	#PRIoPTR
 
__PRIPTR_PREFIX
 "o"

	)

163 
	#PRIuPTR
 
__PRIPTR_PREFIX
 "u"

	)

164 
	#PRIxPTR
 
__PRIPTR_PREFIX
 "x"

	)

165 
	#PRIXPTR
 
__PRIPTR_PREFIX
 "X"

	)

171 
	#SCNd8
 "hhd"

	)

172 
	#SCNd16
 "hd"

	)

173 
	#SCNd32
 "d"

	)

174 
	#SCNd64
 
__PRI64_PREFIX
 "d"

	)

176 
	#SCNdLEAST8
 "hhd"

	)

177 
	#SCNdLEAST16
 "hd"

	)

178 
	#SCNdLEAST32
 "d"

	)

179 
	#SCNdLEAST64
 
__PRI64_PREFIX
 "d"

	)

181 
	#SCNdFAST8
 "hhd"

	)

182 
	#SCNdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

183 
	#SCNdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

184 
	#SCNdFAST64
 
__PRI64_PREFIX
 "d"

	)

187 
	#SCNi8
 "hhi"

	)

188 
	#SCNi16
 "hi"

	)

189 
	#SCNi32
 "i"

	)

190 
	#SCNi64
 
__PRI64_PREFIX
 "i"

	)

192 
	#SCNiLEAST8
 "hhi"

	)

193 
	#SCNiLEAST16
 "hi"

	)

194 
	#SCNiLEAST32
 "i"

	)

195 
	#SCNiLEAST64
 
__PRI64_PREFIX
 "i"

	)

197 
	#SCNiFAST8
 "hhi"

	)

198 
	#SCNiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

199 
	#SCNiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

200 
	#SCNiFAST64
 
__PRI64_PREFIX
 "i"

	)

203 
	#SCNu8
 "hhu"

	)

204 
	#SCNu16
 "hu"

	)

205 
	#SCNu32
 "u"

	)

206 
	#SCNu64
 
__PRI64_PREFIX
 "u"

	)

208 
	#SCNuLEAST8
 "hhu"

	)

209 
	#SCNuLEAST16
 "hu"

	)

210 
	#SCNuLEAST32
 "u"

	)

211 
	#SCNuLEAST64
 
__PRI64_PREFIX
 "u"

	)

213 
	#SCNuFAST8
 "hhu"

	)

214 
	#SCNuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

215 
	#SCNuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

216 
	#SCNuFAST64
 
__PRI64_PREFIX
 "u"

	)

219 
	#SCNo8
 "hho"

	)

220 
	#SCNo16
 "ho"

	)

221 
	#SCNo32
 "o"

	)

222 
	#SCNo64
 
__PRI64_PREFIX
 "o"

	)

224 
	#SCNoLEAST8
 "hho"

	)

225 
	#SCNoLEAST16
 "ho"

	)

226 
	#SCNoLEAST32
 "o"

	)

227 
	#SCNoLEAST64
 
__PRI64_PREFIX
 "o"

	)

229 
	#SCNoFAST8
 "hho"

	)

230 
	#SCNoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

231 
	#SCNoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

232 
	#SCNoFAST64
 
__PRI64_PREFIX
 "o"

	)

235 
	#SCNx8
 "hhx"

	)

236 
	#SCNx16
 "hx"

	)

237 
	#SCNx32
 "x"

	)

238 
	#SCNx64
 
__PRI64_PREFIX
 "x"

	)

240 
	#SCNxLEAST8
 "hhx"

	)

241 
	#SCNxLEAST16
 "hx"

	)

242 
	#SCNxLEAST32
 "x"

	)

243 
	#SCNxLEAST64
 
__PRI64_PREFIX
 "x"

	)

245 
	#SCNxFAST8
 "hhx"

	)

246 
	#SCNxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

247 
	#SCNxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

248 
	#SCNxFAST64
 
__PRI64_PREFIX
 "x"

	)

252 
	#SCNdMAX
 
__PRI64_PREFIX
 "d"

	)

253 
	#SCNiMAX
 
__PRI64_PREFIX
 "i"

	)

254 
	#SCNoMAX
 
__PRI64_PREFIX
 "o"

	)

255 
	#SCNuMAX
 
__PRI64_PREFIX
 "u"

	)

256 
	#SCNxMAX
 
__PRI64_PREFIX
 "x"

	)

259 
	#SCNdPTR
 
__PRIPTR_PREFIX
 "d"

	)

260 
	#SCNiPTR
 
__PRIPTR_PREFIX
 "i"

	)

261 
	#SCNoPTR
 
__PRIPTR_PREFIX
 "o"

	)

262 
	#SCNuPTR
 
__PRIPTR_PREFIX
 "u"

	)

263 
	#SCNxPTR
 
__PRIPTR_PREFIX
 "x"

	)

266 
	g__BEGIN_DECLS


268 #i‡
__WORDSIZE
 == 64

273 
	mquŸ
;

274 
	mªm
;

275 } 
	timaxdiv_t
;

282 
__exãnsi⁄__
 
	mquŸ
;

283 
__exãnsi⁄__
 
	mªm
;

284 } 
	timaxdiv_t
;

290 
ötmax_t
 
	$imaxabs
 (
ötmax_t
 
__n
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

293 
imaxdiv_t
 
	$imaxdiv
 (
ötmax_t
 
__numî
, i¡max_à
__díom
)

294 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

297 
ötmax_t
 
	$°πoimax
 (c⁄° *
__ª°ri˘
 
__≈å
,

298 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

301 
uötmax_t
 
	$°πoumax
 (c⁄° *
__ª°ri˘
 
__≈å
,

302 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

305 
ötmax_t
 
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

306 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

307 
__THROW
;

310 
uötmax_t
 
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

311 
__gwch¨_t
 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
)

312 
__THROW
;

314 #ifde‡
__USE_EXTERN_INLINES


316 #i‡
__WORDSIZE
 == 64

318 
	$__°πﬁ_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

319 **
__ª°ri˘
 
__íd±r
,

320 
__ba£
, 
__group
)

321 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

323 
__exã∫_ölöe
 
ötmax_t


324 
	`__NTH
 (
	$°πoimax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

325 
ba£
))

327  
	`__°πﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

328 
	}
}

330 
	$__°πoul_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

331 ** 
__ª°ri˘
 
__íd±r
,

332 
__ba£
, 
__group
)

333 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

335 
__exã∫_ölöe
 
uötmax_t


336 
	`__NTH
 (
	$°πoumax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

337 
ba£
))

339  
	`__°πoul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

340 
	}
}

342 
	$__wc°ﬁ_öã∫Æ
 (c⁄° 
__gwch¨_t
 * 
__ª°ri˘
 
__≈å
,

343 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

344 
__ba£
, 
__group
)

345 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

347 
__exã∫_ölöe
 
ötmax_t


348 
	`__NTH
 (
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

349 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

351  
	`__wc°ﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

352 
	}
}

354 
	$__wc°oul_öã∫Æ
 (c⁄° 
__gwch¨_t
 *

355 
__ª°ri˘
 
__≈å
,

356 
__gwch¨_t
 **

357 
__ª°ri˘
 
__íd±r
,

358 
__ba£
, 
__group
)

359 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

361 
__exã∫_ölöe
 
uötmax_t


362 
	`__NTH
 (
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

363 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

365  
	`__wc°oul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

366 
	}
}

370 
__exãnsi⁄__


371 
	$__°πﬁl_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

372 **
__ª°ri˘
 
__íd±r
,

373 
__ba£
, 
__group
)

374 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

376 
__exã∫_ölöe
 
ötmax_t


377 
	`__NTH
 (
	$°πoimax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

378 
ba£
))

380  
	`__°πﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

381 
	}
}

383 
__exãnsi⁄__


384 
	$__°πouŒ_öã∫Æ
 (const *

385 
__ª°ri˘
 
__≈å
,

387 
__ª°ri˘
 
__íd±r
,

388 
__ba£
,

389 
__group
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

392 
__exã∫_ölöe
 
uötmax_t


393 
	`__NTH
 (
	$°πoumax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

394 
ba£
))

396  
	`__°πouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

397 
	}
}

399 
__exãnsi⁄__


400 
	$__wc°ﬁl_öã∫Æ
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

401 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

402 
__ba£
, 
__group
)

403 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

405 
__exã∫_ölöe
 
ötmax_t


406 
	`__NTH
 (
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

407 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

409  
	`__wc°ﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

410 
	}
}

413 
__exãnsi⁄__


414 
	$__wc°ouŒ_öã∫Æ
 (c⁄° 
__gwch¨_t
 *

415 
__ª°ri˘
 
__≈å
,

416 
__gwch¨_t
 **

417 
__ª°ri˘
 
__íd±r
,

418 
__ba£
,

419 
__group
)

420 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

422 
__exã∫_ölöe
 
uötmax_t


423 
	`__NTH
 (
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

424 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

426  
	`__wc°ouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

427 
	}
}

432 
	g__END_DECLS


	@/usr/include/malloc.h

19 #i‚de‡
_MALLOC_H


20 
	#_MALLOC_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<°ddef.h
>

24 
	~<°dio.h
>

26 #ifde‡
_LIBC


27 
	#__MALLOC_HOOK_VOLATILE


	)

28 
	#__MALLOC_DEPRECATED


	)

30 
	#__MALLOC_HOOK_VOLATILE
 vﬁ©ûe

	)

31 
	#__MALLOC_DEPRECATED
 
__©åibuã_dïªˇãd__


	)

35 
__BEGIN_DECLS


38 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

41 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

42 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

49 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

50 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

53 
	$‰ì
 (*
__±r
Ë
__THROW
;

56 
	$c‰ì
 (*
__±r
Ë
__THROW
;

59 *
	$memÆign
 (
size_t
 
__Æignmít
, size_à
__size
)

60 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

63 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

67 *
	$pvÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

71 *(*
__m‹ec‹e
Ë(
±rdiff_t
 
__size
);

74 *
	$__deÁu…_m‹ec‹e
 (
±rdiff_t
 
__size
)

75 
__THROW
 
__©åibuã_mÆloc__
;

79 
	smÆlöfo


81 
¨ía
;

82 
‹dblks
;

83 
smblks
;

84 
hblks
;

85 
hblkhd
;

86 
usmblks
;

87 
fsmblks
;

88 
u‹dblks
;

89 
f‹dblks
;

90 
kìpco°
;

94 
mÆlöfo
 
	$mÆlöfo
 (Ë
__THROW
;

97 #i‚de‡
M_MXFAST


98 
	#M_MXFAST
 1

	)

100 #i‚de‡
M_NLBLKS


101 
	#M_NLBLKS
 2

	)

103 #i‚de‡
M_GRAIN


104 
	#M_GRAIN
 3

	)

106 #i‚de‡
M_KEEP


107 
	#M_KEEP
 4

	)

111 
	#M_TRIM_THRESHOLD
 -1

	)

112 
	#M_TOP_PAD
 -2

	)

113 
	#M_MMAP_THRESHOLD
 -3

	)

114 
	#M_MMAP_MAX
 -4

	)

115 
	#M_CHECK_ACTION
 -5

	)

116 
	#M_PERTURB
 -6

	)

117 
	#M_ARENA_TEST
 -7

	)

118 
	#M_ARENA_MAX
 -8

	)

121 
	$mÆl›t
 (
__∑øm
, 
__vÆ
Ë
__THROW
;

125 
	$mÆloc_åim
 (
size_t
 
__∑d
Ë
__THROW
;

129 
size_t
 
	$mÆloc_ußbÀ_size
 (*
__±r
Ë
__THROW
;

132 
	$mÆloc_°©s
 (Ë
__THROW
;

135 
	$mÆloc_öfo
 (
__›ti⁄s
, 
FILE
 *
__Â
Ë
__THROW
;

138 *
	$mÆloc_gë_°©e
 (Ë
__THROW
;

142 
	$mÆloc_£t_°©e
 (*
__±r
Ë
__THROW
;

147 (*
__MALLOC_HOOK_VOLATILE
 
__mÆloc_öôülize_hook
) ()

148 
__MALLOC_DEPRECATED
;

150 (*
__MALLOC_HOOK_VOLATILE
 
__‰ì_hook
Ë(*
__±r
,

152 
__MALLOC_DEPRECATED
;

153 *(*
__MALLOC_HOOK_VOLATILE
 
__mÆloc_hook
)(
size_t
 
__size
,

155 
__MALLOC_DEPRECATED
;

156 *(*
__MALLOC_HOOK_VOLATILE
 
__ªÆloc_hook
)(*
__±r
,

157 
size_t
 
__size
,

159 
__MALLOC_DEPRECATED
;

160 *(*
__MALLOC_HOOK_VOLATILE
 
__memÆign_hook
)(
size_t
 
__Æignmít
,

161 
size_t
 
__size
,

163 
__MALLOC_DEPRECATED
;

164 (*
__MALLOC_HOOK_VOLATILE
 
__a·î_m‹ec‹e_hook
) ();

167 
	$__mÆloc_check_öô
 (Ë
__THROW
 
__MALLOC_DEPRECATED
;

170 
__END_DECLS


	@/usr/include/math.h

23 #i‚def 
_MATH_H


24 
	#_MATH_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


31 
	~<bôs/m©h-ve˘‹.h
>

35 
	~<bôs/huge_vÆ.h
>

36 #ifde‡
__USE_ISOC99


37 
	~<bôs/huge_vÆf.h
>

38 
	~<bôs/huge_vÆl.h
>

41 
	~<bôs/öf.h
>

44 
	~<bôs/«n.h
>

48 
	~<bôs/m©hdef.h
>

55 
	#__SIMD_DECL
(
fun˘i⁄
Ë
	`__CONCAT
 (
__DECL_SIMD_
, fun˘i⁄)

	)

57 
	#__MATHCALL_VEC
(
fun˘i⁄
, 
suffix
, 
¨gs
) \

58 
	`__SIMD_DECL
 (
	`__MATH_PRECNAME
 (
fun˘i⁄
, 
suffix
)) \

59 
	`__MATHCALL
 (
fun˘i⁄
, 
suffix
, 
¨gs
)

	)

61 
	#__MATHDECL_VEC
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

62 
	`__SIMD_DECL
 (
	`__MATH_PRECNAME
 (
fun˘i⁄
, 
suffix
)) \

63 
	`__MATHDECL
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
)

	)

65 
	#__MATHCALL
(
fun˘i⁄
,
suffix
, 
¨gs
) \

66 
	`__MATHDECL
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
)

	)

67 
	#__MATHDECL
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

68 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
); \

69 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
)

	)

70 
	#__MATHCALLX
(
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

71 
	`__MATHDECLX
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
)

	)

72 
	#__MATHDECLX
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

73 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
); \

74 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
)

	)

75 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

76 
ty≥
 
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
Ë
¨gs
 
__THROW


	)

78 
	#_MdoubÀ_
 

	)

79 
	#__MATH_PRECNAME
(
«me
,
r
Ë
	`__CONCAT
“ame,r)

	)

80 
	#__MATH_DECLARING_DOUBLE
 1

	)

81 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_STD


	)

82 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_STD


	)

83 
	~<bôs/m©hˇŒs.h
>

84 #unde‡
_MdoubÀ_


85 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


86 #unde‡
_MdoubÀ_END_NAMESPACE


87 #unde‡
__MATH_PRECNAME


88 #unde‡
__MATH_DECLARING_DOUBLE


90 #ifde‡
__USE_ISOC99


96 #i‚de‡
_MÊﬂt_


97 
	#_MÊﬂt_
 

	)

99 
	#_MdoubÀ_
 
_MÊﬂt_


	)

100 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f
##
	)
r

101 
	#__MATH_DECLARING_DOUBLE
 0

	)

102 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

103 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

104 
	~<bôs/m©hˇŒs.h
>

105 #unde‡
_MdoubÀ_


106 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


107 #unde‡
_MdoubÀ_END_NAMESPACE


108 #unde‡
__MATH_PRECNAME


109 #unde‡
__MATH_DECLARING_DOUBLE


111 #i‡!(
deföed
 
__NO_LONG_DOUBLE_MATH
 && deföed 
_LIBC
) \

112 || 
deföed
 
__LDBL_COMPAT
 \

113 || 
deföed
 
_LIBC_TEST


114 #ifde‡
__LDBL_COMPAT


116 #ifde‡
__USE_ISOC99


117 
	$__∆dbl_√xâow¨df
 (
__x
, 
__y
)

118 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

119 #ifde‡
__REDIRECT_NTH


120 
	`__REDIRECT_NTH
 (
√xâow¨df
, (
__x
, 
__y
),

121 
__∆dbl_√xâow¨df
)

122 
	`__©åibuã__
 ((
__c⁄°__
));

123 
	`__REDIRECT_NTH
 (
√xâow¨d
, (
__x
, 
__y
),

124 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

125 
	`__REDIRECT_NTH
 (
√xâow¨dl
,

126 (
__x
, 
__y
),

127 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

131 #unde‡
__MATHDECL_1


132 
	#__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
Æüs
) \

133 
ty≥
 
	`__REDIRECT_NTH
(
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
), \

134 
¨gs
, 
Æüs
)

	)

135 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

136 
	`__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
	`__CONCAT
(fun˘i⁄,suffix))

	)

142 #i‚de‡
_Ml⁄g_doubÀ_


143 
	#_Ml⁄g_doubÀ_
 

	)

145 
	#_MdoubÀ_
 
_Ml⁄g_doubÀ_


	)

146 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
l
##
	)
r

147 
	#__MATH_DECLARING_DOUBLE
 0

	)

148 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

149 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

150 
	#__MATH_DECLARE_LDOUBLE
 1

	)

151 
	~<bôs/m©hˇŒs.h
>

152 #unde‡
_MdoubÀ_


153 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


154 #unde‡
_MdoubÀ_END_NAMESPACE


155 #unde‡
__MATH_PRECNAME


156 #unde‡
__MATH_DECLARING_DOUBLE


161 #unde‡
__MATHDECL_1


162 #unde‡
__MATHDECL


163 #unde‡
__MATHCALL


166 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


168 
signgam
;

173 #ifde‡
__USE_ISOC99


211 
FP_NAN
 =

212 
	#FP_NAN
 0

	)

213 
FP_NAN
,

214 
FP_INFINITE
 =

215 
	#FP_INFINITE
 1

	)

216 
FP_INFINITE
,

217 
FP_ZERO
 =

218 
	#FP_ZERO
 2

	)

219 
FP_ZERO
,

220 
FP_SUBNORMAL
 =

221 
	#FP_SUBNORMAL
 3

	)

222 
FP_SUBNORMAL
,

223 
FP_NORMAL
 =

224 
	#FP_NORMAL
 4

	)

225 
FP_NORMAL


233 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__
 \

234 && !
deföed
 
__OPTIMIZE_SIZE__


235 
	#Â˛assify
(
x
Ë
	`__buûtö_Â˛assify
 (
FP_NAN
, 
FP_INFINITE
, \

236 
FP_NORMAL
, 
FP_SUBNORMAL
, 
FP_ZERO
, 
x
)

	)

237 #ñi‡
deföed
 
__NO_LONG_DOUBLE_MATH


238 
	#Â˛assify
(
x
) \

239 ( (
x
Ë= (Ë? 
	`__Â˛assifyf
 (xË: 
	`__Â˛assify
 (x))

	)

241 
	#Â˛assify
(
x
) \

242 ( (
x
) ==  () \

243 ? 
	`__Â˛assifyf
 (
x
) \

244 :  (
x
) ==  () \

245 ? 
	`__Â˛assify
 (
x
Ë: 
	`__Â˛assifyl
 (x))

	)

249 #i‡
	`__GNUC_PREREQ
 (4,0)

250 
	#signbô
(
x
) \

251 ( (
x
) ==  () \

252 ? 
	`__buûtö_signbôf
 (
x
) \

253 :  (
x
) ==  () \

254 ? 
	`__buûtö_signbô
 (
x
Ë: 
	`__buûtö_signbôl
 (x))

	)

256 #ifde‡
__NO_LONG_DOUBLE_MATH


257 
	#signbô
(
x
) \

258 ( (
x
Ë= (Ë? 
	`__signbôf
 (xË: 
	`__signbô
 (x))

	)

260 
	#signbô
(
x
) \

261 ( (
x
) ==  () \

262 ? 
	`__signbôf
 (
x
) \

263 :  (
x
) ==  () \

264 ? 
	`__signbô
 (
x
Ë: 
	`__signbôl
 (x))

	)

269 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__


270 
	#isföôe
(
x
Ë
	`__buûtö_isföôe
 (x)

	)

271 #ñi‡
deföed
 
__NO_LONG_DOUBLE_MATH


272 
	#isföôe
(
x
) \

273 ( (
x
Ë= (Ë? 
	`__föôef
 (xË: 
	`__föôe
 (x))

	)

275 
	#isföôe
(
x
) \

276 ( (
x
) ==  () \

277 ? 
	`__föôef
 (
x
) \

278 :  (
x
) ==  () \

279 ? 
	`__föôe
 (
x
Ë: 
	`__föôñ
 (x))

	)

283 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__


284 
	#i¢‹mÆ
(
x
Ë
	`__buûtö_i¢‹mÆ
 (x)

	)

286 
	#i¢‹mÆ
(
x
Ë(
	`Â˛assify
 (xË=
FP_NORMAL
)

	)

291 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__


292 
	#i¢™
(
x
Ë
	`__buûtö_i¢™
 (x)

	)

293 #ñi‡
deföed
 
__NO_LONG_DOUBLE_MATH


294 
	#i¢™
(
x
) \

295 ( (
x
Ë= (Ë? 
	`__i¢™f
 (xË: 
	`__i¢™
 (x))

	)

297 
	#i¢™
(
x
) \

298 ( (
x
) ==  () \

299 ? 
	`__i¢™f
 (
x
) \

300 :  (
x
) ==  () \

301 ? 
	`__i¢™
 (
x
Ë: 
	`__i¢™l
 (x))

	)

305 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__


306 
	#isöf
(
x
Ë
	`__buûtö_isöf_sign
 (x)

	)

307 #ñi‡
deföed
 
__NO_LONG_DOUBLE_MATH


308 
	#isöf
(
x
) \

309 ( (
x
Ë= (Ë? 
	`__isöff
 (xË: 
	`__isöf
 (x))

	)

311 
	#isöf
(
x
) \

312 ( (
x
) ==  () \

313 ? 
	`__isöff
 (
x
) \

314 :  (
x
) ==  () \

315 ? 
	`__isöf
 (
x
Ë: 
	`__isöÊ
 (x))

	)

319 
	#MATH_ERRNO
 1

	)

320 
	#MATH_ERREXCEPT
 2

	)

325 #i‚de‡
__FAST_MATH__


326 
	#m©h_îrh™dlög
 (
MATH_ERRNO
 | 
MATH_ERREXCEPT
)

	)

331 #ifde‡
__USE_GNU


333 #ifde‡
__NO_LONG_DOUBLE_MATH


334 
	#issig«lög
(
x
) \

335 ( (
x
Ë= (Ë? 
	`__issig«lögf
 (xË: 
	`__issig«lög
 (x))

	)

337 
	#issig«lög
(
x
) \

338 ( (
x
) ==  () \

339 ? 
	`__issig«lögf
 (
x
) \

340 :  (
x
) ==  () \

341 ? 
	`__issig«lög
 (
x
Ë: 
	`__issig«lögl
 (x))

	)

345 #ifdef 
__USE_MISC


349 
_IEEE_
 = -1,

350 
_SVID_
,

351 
_XOPEN_
,

352 
_POSIX_
,

353 
_ISOC_


354 } 
	t_LIB_VERSION_TYPE
;

359 
_LIB_VERSION_TYPE
 
_LIB_VERSION
;

363 #ifde‡
__USE_MISC


369 #ifde‡
__˝lu•lus


370 
__ex˚±i⁄


372 
ex˚±i⁄


375 
ty≥
;

376 *
«me
;

377 
¨g1
;

378 
¨g2
;

379 
ªtvÆ
;

380 
	}
};

382 #ifde‡
__˝lu•lus


383 
	$m©hîr
 (
__ex˚±i⁄
 *
__exc
Ë
	`throw
 ();

385 
	`m©hîr
 (
ex˚±i⁄
 *
__exc
);

388 
	#X_TLOSS
 1.41484755040568800000e+16

	)

391 
	#DOMAIN
 1

	)

392 
	#SING
 2

	)

393 
	#OVERFLOW
 3

	)

394 
	#UNDERFLOW
 4

	)

395 
	#TLOSS
 5

	)

396 
	#PLOSS
 6

	)

399 
	#HUGE
 3.40282347e+38F

	)

403 #ifde‡
__USE_XOPEN


405 
	#MAXFLOAT
 3.40282347e+38F

	)

412 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


413 
	#M_E
 2.7182818284590452354

	)

414 
	#M_LOG2E
 1.4426950408889634074

	)

415 
	#M_LOG10E
 0.43429448190325182765

	)

416 
	#M_LN2
 0.69314718055994530942

	)

417 
	#M_LN10
 2.30258509299404568402

	)

418 
	#M_PI
 3.14159265358979323846

	)

419 
	#M_PI_2
 1.57079632679489661923

	)

420 
	#M_PI_4
 0.78539816339744830962

	)

421 
	#M_1_PI
 0.31830988618379067154

	)

422 
	#M_2_PI
 0.63661977236758134308

	)

423 
	#M_2_SQRTPI
 1.12837916709551257390

	)

424 
	#M_SQRT2
 1.41421356237309504880

	)

425 
	#M_SQRT1_2
 0.70710678118654752440

	)

431 #ifde‡
__USE_GNU


432 
	#M_El
 2.718281828459045235360287471352662498L

	)

433 
	#M_LOG2El
 1.442695040888963407359924681001892137L

	)

434 
	#M_LOG10El
 0.434294481903251827651128918916605082L

	)

435 
	#M_LN2l
 0.693147180559945309417232121458176568L

	)

436 
	#M_LN10l
 2.302585092994045684017991454684364208L

	)

437 
	#M_PIl
 3.141592653589793238462643383279502884L

	)

438 
	#M_PI_2l
 1.570796326794896619231321691639751442L

	)

439 
	#M_PI_4l
 0.785398163397448309615660845819875721L

	)

440 
	#M_1_PIl
 0.318309886183790671537767526745028724L

	)

441 
	#M_2_PIl
 0.636619772367581343075535053490057448L

	)

442 
	#M_2_SQRTPIl
 1.128379167095512573896158903121545172L

	)

443 
	#M_SQRT2l
 1.414213562373095048801688724209698079L

	)

444 
	#M_SQRT1_2l
 0.707106781186547524400844362104849039L

	)

451 #i‡
deföed
 
__STRICT_ANSI__
 && !deföed 
__NO_MATH_INLINES


452 
	#__NO_MATH_INLINES
 1

	)

455 #i‡
deföed
 
__USE_ISOC99
 && 
	`__GNUC_PREREQ
(2,97)

462 
	#isgª©î
(
x
, 
y
Ë
	`__buûtö_isgª©î
(x, y)

	)

463 
	#isgª©îequÆ
(
x
, 
y
Ë
	`__buûtö_isgª©îequÆ
(x, y)

	)

464 
	#i¶ess
(
x
, 
y
Ë
	`__buûtö_i¶ess
(x, y)

	)

465 
	#i¶es£quÆ
(
x
, 
y
Ë
	`__buûtö_i¶es£quÆ
(x, y)

	)

466 
	#i¶essgª©î
(
x
, 
y
Ë
	`__buûtö_i¶essgª©î
(x, y)

	)

467 
	#isun‹dîed
(
u
, 
v
Ë
	`__buûtö_isun‹dîed
(u, v)

	)

471 #ifde‡
__USE_EXTERN_INLINES


472 
	~<bôs/m©hölöe.h
>

477 #i‡
deföed
 
__FINITE_MATH_ONLY__
 && __FINITE_MATH_ONLY__ > 0

478 
	~<bôs/m©h-föôe.h
>

481 #ifde‡
__USE_ISOC99


485 #i‚de‡
isgª©î


486 
	#isgª©î
(
x
, 
y
) \

487 (
__exãnsi⁄__
 \

488 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

489 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x > __y; 
	}
}))

	)

493 #i‚de‡
isgª©îequÆ


494 
	#isgª©îequÆ
(
x
, 
y
) \

495 (
__exãnsi⁄__
 \

496 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

497 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x >__y; }))

	)

501 #i‚de‡
i¶ess


502 
	#i¶ess
(
x
, 
y
) \

503 (
__exãnsi⁄__
 \

504 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

505 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x < __y; }))

	)

509 #i‚de‡
i¶es£quÆ


510 
	#i¶es£quÆ
(
x
, 
y
) \

511 (
__exãnsi⁄__
 \

512 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

513 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x <__y; }))

	)

517 #i‚de‡
i¶essgª©î


518 
	#i¶essgª©î
(
x
, 
y
) \

519 (
__exãnsi⁄__
 \

520 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

521 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& (__x < __y || __y < __x); }))

	)

525 #i‚de‡
isun‹dîed


526 
	#isun‹dîed
(
u
, 
v
) \

527 (
__exãnsi⁄__
 \

528 ({ 
	`__ty≥of__
(
u
Ë
__u
 = (u); __ty≥of__(
v
Ë
__v
 = (v); \

529 
	`Â˛assify
 (
__u
Ë=
FP_NAN
 || fp˛assify (
__v
Ë=FP_NAN; }))

	)

534 
	g__END_DECLS


	@/usr/include/net/if.h

19 #i‚de‡
_NET_IF_H


20 
	#_NET_IF_H
 1

	)

22 
	~<„©uªs.h
>

24 #ifde‡
__USE_MISC


25 
	~<sys/ty≥s.h
>

26 
	~<sys/sockë.h
>

31 
	#IF_NAMESIZE
 16

	)

33 
	sif_«meödex


35 
	mif_ödex
;

36 *
	mif_«me
;

40 #ifde‡
__USE_MISC


44 
	mIFF_UP
 = 0x1,

45 
	#IFF_UP
 
IFF_UP


	)

46 
	mIFF_BROADCAST
 = 0x2,

47 
	#IFF_BROADCAST
 
IFF_BROADCAST


	)

48 
	mIFF_DEBUG
 = 0x4,

49 
	#IFF_DEBUG
 
IFF_DEBUG


	)

50 
	mIFF_LOOPBACK
 = 0x8,

51 
	#IFF_LOOPBACK
 
IFF_LOOPBACK


	)

52 
	mIFF_POINTOPOINT
 = 0x10,

53 
	#IFF_POINTOPOINT
 
IFF_POINTOPOINT


	)

54 
	mIFF_NOTRAILERS
 = 0x20,

55 
	#IFF_NOTRAILERS
 
IFF_NOTRAILERS


	)

56 
	mIFF_RUNNING
 = 0x40,

57 
	#IFF_RUNNING
 
IFF_RUNNING


	)

58 
	mIFF_NOARP
 = 0x80,

59 
	#IFF_NOARP
 
IFF_NOARP


	)

60 
	mIFF_PROMISC
 = 0x100,

61 
	#IFF_PROMISC
 
IFF_PROMISC


	)

64 
	mIFF_ALLMULTI
 = 0x200,

65 
	#IFF_ALLMULTI
 
IFF_ALLMULTI


	)

67 
	mIFF_MASTER
 = 0x400,

68 
	#IFF_MASTER
 
IFF_MASTER


	)

69 
	mIFF_SLAVE
 = 0x800,

70 
	#IFF_SLAVE
 
IFF_SLAVE


	)

72 
	mIFF_MULTICAST
 = 0x1000,

73 
	#IFF_MULTICAST
 
IFF_MULTICAST


	)

75 
	mIFF_PORTSEL
 = 0x2000,

76 
	#IFF_PORTSEL
 
IFF_PORTSEL


	)

77 
	mIFF_AUTOMEDIA
 = 0x4000,

78 
	#IFF_AUTOMEDIA
 
IFF_AUTOMEDIA


	)

79 
	mIFF_DYNAMIC
 = 0x8000

80 
	#IFF_DYNAMIC
 
IFF_DYNAMIC


	)

88 
	siÁddr


90 
sockaddr
 
	miÁ_addr
;

93 
sockaddr
 
	mifu_brﬂdaddr
;

94 
sockaddr
 
	mifu_d°addr
;

95 } 
	miÁ_ifu
;

96 
iÁ˚
 *
	miÁ_iÂ
;

97 
iÁddr
 *
	miÁ_√xt
;

100 
	#iÁ_brﬂdaddr
 
iÁ_ifu
.
ifu_brﬂdaddr


	)

101 
	#iÁ_d°addr
 
iÁ_ifu
.
ifu_d°addr


	)

111 
	sifm≠


113 
	mmem_°¨t
;

114 
	mmem_íd
;

115 
	mba£_addr
;

116 
	múq
;

117 
	mdma
;

118 
	mp‹t
;

126 
	si‰eq


128 
	#IFHWADDRLEN
 6

	)

129 
	#IFNAMSIZ
 
IF_NAMESIZE


	)

132 
	mi‰n_«me
[
IFNAMSIZ
];

133 } 
	mi‰_i‰n
;

137 
sockaddr
 
	mi‰u_addr
;

138 
sockaddr
 
	mi‰u_d°addr
;

139 
sockaddr
 
	mi‰u_brﬂdaddr
;

140 
sockaddr
 
	mi‰u_√tmask
;

141 
sockaddr
 
	mi‰u_hwaddr
;

142 
	mi‰u_Êags
;

143 
	mi‰u_ivÆue
;

144 
	mi‰u_mtu
;

145 
ifm≠
 
	mi‰u_m≠
;

146 
	mi‰u_¶ave
[
IFNAMSIZ
];

147 
	mi‰u_√w«me
[
IFNAMSIZ
];

148 
__ˇddr_t
 
	mi‰u_d©a
;

149 } 
	mi‰_i‰u
;

151 
	#i‰_«me
 
i‰_i‰n
.
i‰n_«me


	)

152 
	#i‰_hwaddr
 
i‰_i‰u
.
i‰u_hwaddr


	)

153 
	#i‰_addr
 
i‰_i‰u
.
i‰u_addr


	)

154 
	#i‰_d°addr
 
i‰_i‰u
.
i‰u_d°addr


	)

155 
	#i‰_brﬂdaddr
 
i‰_i‰u
.
i‰u_brﬂdaddr


	)

156 
	#i‰_√tmask
 
i‰_i‰u
.
i‰u_√tmask


	)

157 
	#i‰_Êags
 
i‰_i‰u
.
i‰u_Êags


	)

158 
	#i‰_mëric
 
i‰_i‰u
.
i‰u_ivÆue


	)

159 
	#i‰_mtu
 
i‰_i‰u
.
i‰u_mtu


	)

160 
	#i‰_m≠
 
i‰_i‰u
.
i‰u_m≠


	)

161 
	#i‰_¶ave
 
i‰_i‰u
.
i‰u_¶ave


	)

162 
	#i‰_d©a
 
i‰_i‰u
.
i‰u_d©a


	)

163 
	#i‰_ifödex
 
i‰_i‰u
.
i‰u_ivÆue


	)

164 
	#i‰_b™dwidth
 
i‰_i‰u
.
i‰u_ivÆue


	)

165 
	#i‰_qÀn
 
i‰_i‰u
.
i‰u_ivÆue


	)

166 
	#i‰_√w«me
 
i‰_i‰u
.
i‰u_√w«me


	)

167 
	#_IOT_i‰eq
 
	`_IOT
(
	`_IOTS
(),
IFNAMSIZ
,_IOTS(),16,0,0)

	)

168 
	#_IOT_i‰eq_sh‹t
 
	`_IOT
(
	`_IOTS
(),
IFNAMSIZ
,_IOTS(),1,0,0)

	)

169 
	#_IOT_i‰eq_öt
 
	`_IOT
(
	`_IOTS
(),
IFNAMSIZ
,_IOTS(),1,0,0)

	)

176 
	sifc⁄f


178 
	mifc_Àn
;

181 
__ˇddr_t
 
	mifcu_buf
;

182 
i‰eq
 *
	mifcu_ªq
;

183 } 
	mifc_ifcu
;

185 
	#ifc_buf
 
ifc_ifcu
.
ifcu_buf


	)

186 
	#ifc_ªq
 
ifc_ifcu
.
ifcu_ªq


	)

187 
	#_IOT_ifc⁄f
 
	`_IOT
(
	`_IOTS
(
ifc⁄f
),1,0,0,0,0Ë

	)

190 
__BEGIN_DECLS


193 
	$if_«mëoödex
 (c⁄° *
__i‚ame
Ë
__THROW
;

194 *
	$if_ödext⁄ame
 (
__ifödex
, *
__i‚ame
Ë
__THROW
;

197 
if_«meödex
 *
	$if_«meödex
 (Ë
__THROW
;

200 
	$if_‰ì«meödex
 (
if_«meödex
 *
__±r
Ë
__THROW
;

202 
__END_DECLS


	@/usr/include/netdb.h

22 #i‚def 
_NETDB_H


23 
	#_NETDB_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<√töë/ö.h
>

28 
	~<°döt.h
>

29 #ifde‡
__USE_MISC


32 
	~<Ωc/√tdb.h
>

35 #ifde‡
__USE_GNU


36 
	#__√ed_sigevít_t


	)

37 
	~<bôs/sigöfo.h
>

38 
	#__√ed_time•ec


	)

39 
	~<time.h
>

42 
	~<bôs/√tdb.h
>

45 
	#_PATH_HEQUIV
 "/ëc/ho°s.equiv"

	)

46 
	#_PATH_HOSTS
 "/ëc/ho°s"

	)

47 
	#_PATH_NETWORKS
 "/ëc/√tw‹ks"

	)

48 
	#_PATH_NSSWITCH_CONF
 "/ëc/nsswôch.c⁄f"

	)

49 
	#_PATH_PROTOCOLS
 "/ëc/¥Ÿocﬁs"

	)

50 
	#_PATH_SERVICES
 "/ëc/£rvi˚s"

	)

53 
	g__BEGIN_DECLS


55 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


58 
	#h_î∫o
 (*
	`__h_î∫o_loˇti⁄
 ())

	)

61 *
	$__h_î∫o_loˇti⁄
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

65 
	#HOST_NOT_FOUND
 1

	)

66 
	#TRY_AGAIN
 2

	)

68 
	#NO_RECOVERY
 3

	)

70 
	#NO_DATA
 4

	)

73 #ifde‡
__USE_MISC


74 
	#NETDB_INTERNAL
 -1

	)

75 
	#NETDB_SUCCESS
 0

	)

76 
	#NO_ADDRESS
 
NO_DATA


	)

79 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_XOPEN_EXTENDED


81 
	#IPPORT_RESERVED
 1024

	)

84 #ifde‡
__USE_GNU


86 
	#SCOPE_DELIMITER
 '%'

	)

89 #ifde‡
__USE_MISC


92 
	$hîr‹
 (c⁄° *
__°r
Ë
__THROW
;

95 c⁄° *
	$h°ªº‹
 (
__îr_num
Ë
__THROW
;

100 
	sho°ít


102 *
h_«me
;

103 **
h_Æü£s
;

104 
h_addπy≥
;

105 
h_Àngth
;

106 **
h_addr_li°
;

107 #ifde‡
__USE_MISC


108 
	#h_addr
 
h_addr_li°
[0]

	)

117 
	`£tho°ít
 (
__°ay_›í
);

123 
	`ídho°ít
 ();

130 
ho°ít
 *
	`gëho°ít
 ();

137 
ho°ít
 *
	`gëho°byaddr
 (c⁄° *
__addr
, 
__sockÀn_t
 
__Àn
,

138 
__ty≥
);

144 
ho°ít
 *
	`gëho°by«me
 (c⁄° *
__«me
);

146 #ifde‡
__USE_MISC


155 
ho°ít
 *
	`gëho°by«me2
 (c⁄° *
__«me
, 
__af
);

167 
	`gëho°ít_r
 (
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

168 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

169 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

170 *
__ª°ri˘
 
__h_î∫›
);

172 
	`gëho°byaddr_r
 (c⁄° *
__ª°ri˘
 
__addr
, 
__sockÀn_t
 
__Àn
,

173 
__ty≥
,

174 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

175 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

176 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

177 *
__ª°ri˘
 
__h_î∫›
);

179 
	`gëho°by«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

180 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

181 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

182 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

183 *
__ª°ri˘
 
__h_î∫›
);

185 
	`gëho°by«me2_r
 (c⁄° *
__ª°ri˘
 
__«me
, 
__af
,

186 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

187 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

188 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

189 *
__ª°ri˘
 
__h_î∫›
);

198 
	`£äëít
 (
__°ay_›í
);

204 
	`íd√ã¡
 ();

211 
√ã¡
 *
	`gë√ã¡
 ();

218 
√ã¡
 *
	`gë√tbyaddr
 (
uöt32_t
 
__√t
, 
__ty≥
);

224 
√ã¡
 *
	`gë√tby«me
 (c⁄° *
__«me
);

226 #ifdef 
__USE_MISC


237 
	`gë√ã¡_r
 (
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

238 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

239 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

240 *
__ª°ri˘
 
__h_î∫›
);

242 
	`gë√tbyaddr_r
 (
uöt32_t
 
__√t
, 
__ty≥
,

243 
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

244 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

245 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

246 *
__ª°ri˘
 
__h_î∫›
);

248 
	`gë√tby«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

249 
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

250 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

251 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

252 *
__ª°ri˘
 
__h_î∫›
);

257 
	s£rvít


259 *
s_«me
;

260 **
s_Æü£s
;

261 
s_p‹t
;

262 *
s_¥Ÿo
;

270 
	`£t£rvít
 (
__°ay_›í
);

276 
	`íd£rvít
 ();

283 
£rvít
 *
	`gë£rvít
 ();

290 
£rvít
 *
	`gë£rvby«me
 (c⁄° *
__«me
, c⁄° *
__¥Ÿo
);

297 
£rvít
 *
	`gë£rvbyp‹t
 (
__p‹t
, c⁄° *
__¥Ÿo
);

300 #ifdef 
__USE_MISC


308 
	`gë£rvít_r
 (
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

309 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

310 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

312 
	`gë£rvby«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

313 c⁄° *
__ª°ri˘
 
__¥Ÿo
,

314 
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

315 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

316 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

318 
	`gë£rvbyp‹t_r
 (
__p‹t
, c⁄° *
__ª°ri˘
 
__¥Ÿo
,

319 
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

320 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

321 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

326 
	s¥Ÿ€¡


328 *
p_«me
;

329 **
p_Æü£s
;

330 
p_¥Ÿo
;

338 
	`£çrŸ€¡
 (
__°ay_›í
);

344 
	`íd¥Ÿ€¡
 ();

351 
¥Ÿ€¡
 *
	`gë¥Ÿ€¡
 ();

357 
¥Ÿ€¡
 *
	`gë¥Ÿoby«me
 (c⁄° *
__«me
);

363 
¥Ÿ€¡
 *
	`gë¥Ÿobynumbî
 (
__¥Ÿo
);

366 #ifdef 
__USE_MISC


374 
	`gë¥Ÿ€¡_r
 (
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

375 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

376 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

378 
	`gë¥Ÿoby«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

379 
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

380 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

381 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

383 
	`gë¥Ÿobynumbî_r
 (
__¥Ÿo
,

384 
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

385 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

386 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

395 
	`£äëgª¡
 (c⁄° *
__√tgroup
);

403 
	`íd√tgª¡
 ();

412 
	`gë√tgª¡
 (**
__ª°ri˘
 
__ho°p
,

413 **
__ª°ri˘
 
__u£Ω
,

414 **
__ª°ri˘
 
__domaöp
);

423 
	`ö√tgr
 (c⁄° *
__√tgroup
, c⁄° *
__ho°
,

424 c⁄° *
__u£r
, c⁄° *
__domaö
);

432 
	`gë√tgª¡_r
 (**
__ª°ri˘
 
__ho°p
,

433 **
__ª°ri˘
 
__u£Ω
,

434 **
__ª°ri˘
 
__domaöp
,

435 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
);

439 #ifde‡
__USE_MISC


451 
	`rcmd
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

452 c⁄° *
__ª°ri˘
 
__locu£r
,

453 c⁄° *
__ª°ri˘
 
__ªmu£r
,

454 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
);

463 
	`rcmd_af
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

464 c⁄° *
__ª°ri˘
 
__locu£r
,

465 c⁄° *
__ª°ri˘
 
__ªmu£r
,

466 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
,

467 
ß_Ámûy_t
 
__af
);

479 
	`ªxec
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

480 c⁄° *
__ª°ri˘
 
__«me
,

481 c⁄° *
__ª°ri˘
 
__∑ss
,

482 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
);

491 
	`ªxec_af
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

492 c⁄° *
__ª°ri˘
 
__«me
,

493 c⁄° *
__ª°ri˘
 
__∑ss
,

494 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
,

495 
ß_Ámûy_t
 
__af
);

505 
	`ru£rok
 (c⁄° *
__rho°
, 
__su£r
,

506 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
);

515 
	`ru£rok_af
 (c⁄° *
__rho°
, 
__su£r
,

516 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
,

517 
ß_Ámûy_t
 
__af
);

528 
	`úu£rok
 (
uöt32_t
 
__øddr
, 
__su£r
,

529 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
);

539 
	`úu£rok_af
 (c⁄° *
__øddr
, 
__su£r
,

540 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
,

541 
ß_Ámûy_t
 
__af
);

551 
	`ºesvp‹t
 (*
__Æp‹t
);

560 
	`ºesvp‹t_af
 (*
__Æp‹t
, 
ß_Ámûy_t
 
__af
);

565 #ifde‡
__USE_XOPEN2K


567 
	saddröfo


569 
ai_Êags
;

570 
ai_Ámûy
;

571 
ai_sockty≥
;

572 
ai_¥Ÿocﬁ
;

573 
sockÀn_t
 
ai_addæí
;

574 
sockaddr
 *
ai_addr
;

575 *
ai_ˇn⁄«me
;

576 
addröfo
 *
ai_√xt
;

579 #ifde‡
__USE_GNU


581 
	sgaicb


583 c⁄° *
¨_«me
;

584 c⁄° *
¨_£rvi˚
;

585 c⁄° 
addröfo
 *
¨_ªque°
;

586 
addröfo
 *
¨_ªsu…
;

588 
__ªtu∫
;

589 
__glibc_ª£rved
[5];

593 
	#GAI_WAIT
 0

	)

594 
	#GAI_NOWAIT
 1

	)

598 
	#AI_PASSIVE
 0x0001

	)

599 
	#AI_CANONNAME
 0x0002

	)

600 
	#AI_NUMERICHOST
 0x0004

	)

601 
	#AI_V4MAPPED
 0x0008

	)

602 
	#AI_ALL
 0x0010

	)

603 
	#AI_ADDRCONFIG
 0x0020

	)

605 #ifde‡
__USE_GNU


606 
	#AI_IDN
 0x0040

	)

609 
	#AI_CANONIDN
 0x0080

	)

610 
	#AI_IDN_ALLOW_UNASSIGNED
 0x0100

	)

612 
	#AI_IDN_USE_STD3_ASCII_RULES
 0x0200

	)

615 
	#AI_NUMERICSERV
 0x0400

	)

618 
	#EAI_BADFLAGS
 -1

	)

619 
	#EAI_NONAME
 -2

	)

620 
	#EAI_AGAIN
 -3

	)

621 
	#EAI_FAIL
 -4

	)

622 
	#EAI_FAMILY
 -6

	)

623 
	#EAI_SOCKTYPE
 -7

	)

624 
	#EAI_SERVICE
 -8

	)

625 
	#EAI_MEMORY
 -10

	)

626 
	#EAI_SYSTEM
 -11

	)

627 
	#EAI_OVERFLOW
 -12

	)

628 #ifde‡
__USE_GNU


629 
	#EAI_NODATA
 -5

	)

630 
	#EAI_ADDRFAMILY
 -9

	)

631 
	#EAI_INPROGRESS
 -100

	)

632 
	#EAI_CANCELED
 -101

	)

633 
	#EAI_NOTCANCELED
 -102

	)

634 
	#EAI_ALLDONE
 -103

	)

635 
	#EAI_INTR
 -104

	)

636 
	#EAI_IDN_ENCODE
 -105

	)

639 #ifde‡
__USE_MISC


640 
	#NI_MAXHOST
 1025

	)

641 
	#NI_MAXSERV
 32

	)

644 
	#NI_NUMERICHOST
 1

	)

645 
	#NI_NUMERICSERV
 2

	)

646 
	#NI_NOFQDN
 4

	)

647 
	#NI_NAMEREQD
 8

	)

648 
	#NI_DGRAM
 16

	)

649 #ifde‡
__USE_GNU


650 
	#NI_IDN
 32

	)

651 
	#NI_IDN_ALLOW_UNASSIGNED
 64

	)

653 
	#NI_IDN_USE_STD3_ASCII_RULES
 128

	)

662 
	`gëaddröfo
 (c⁄° *
__ª°ri˘
 
__«me
,

663 c⁄° *
__ª°ri˘
 
__£rvi˚
,

664 c⁄° 
addröfo
 *
__ª°ri˘
 
__ªq
,

665 
addröfo
 **
__ª°ri˘
 
__∑i
);

668 
	$‰ìaddröfo
 (
addröfo
 *
__ai
Ë
__THROW
;

671 c⁄° *
	$gai_°ªº‹
 (
__ecode
Ë
__THROW
;

677 
	`gë«meöfo
 (c⁄° 
sockaddr
 *
__ª°ri˘
 
__ß
,

678 
sockÀn_t
 
__ßÀn
, *
__ª°ri˘
 
__ho°
,

679 
sockÀn_t
 
__ho°Àn
, *
__ª°ri˘
 
__£rv
,

680 
sockÀn_t
 
__£rvÀn
, 
__Êags
);

683 #ifde‡
__USE_GNU


692 
	`gëaddröfo_a
 (
__mode
, 
gaicb
 *
__li°
[
__ª°ri˘_¨r
],

693 
__ít
, 
sigevít
 *
__ª°ri˘
 
__sig
);

703 
	`gai_su•íd
 (c⁄° 
gaicb
 *c⁄° 
__li°
[], 
__ít
,

704 c⁄° 
time•ec
 *
__timeout
);

707 
	$gai_îr‹
 (
gaicb
 *
__ªq
Ë
__THROW
;

710 
	$gai_ˇn˚l
 (
gaicb
 *
__gaicbp
Ë
__THROW
;

713 
__END_DECLS


	@/usr/include/netinet/in.h

18 #i‚def 
_NETINET_IN_H


19 
	#_NETINET_IN_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<°döt.h
>

23 
	~<sys/sockë.h
>

24 
	~<bôs/ty≥s.h
>

27 
__BEGIN_DECLS


30 
uöt32_t
 
	tö_addr_t
;

31 
	sö_addr


33 
ö_addr_t
 
	ms_addr
;

37 
	~<bôs/ö.h
>

42 
	mIPPROTO_IP
 = 0,

43 
	#IPPROTO_IP
 
IPPROTO_IP


	)

44 
	mIPPROTO_ICMP
 = 1,

45 
	#IPPROTO_ICMP
 
IPPROTO_ICMP


	)

46 
	mIPPROTO_IGMP
 = 2,

47 
	#IPPROTO_IGMP
 
IPPROTO_IGMP


	)

48 
	mIPPROTO_IPIP
 = 4,

49 
	#IPPROTO_IPIP
 
IPPROTO_IPIP


	)

50 
	mIPPROTO_TCP
 = 6,

51 
	#IPPROTO_TCP
 
IPPROTO_TCP


	)

52 
	mIPPROTO_EGP
 = 8,

53 
	#IPPROTO_EGP
 
IPPROTO_EGP


	)

54 
	mIPPROTO_PUP
 = 12,

55 
	#IPPROTO_PUP
 
IPPROTO_PUP


	)

56 
	mIPPROTO_UDP
 = 17,

57 
	#IPPROTO_UDP
 
IPPROTO_UDP


	)

58 
	mIPPROTO_IDP
 = 22,

59 
	#IPPROTO_IDP
 
IPPROTO_IDP


	)

60 
	mIPPROTO_TP
 = 29,

61 
	#IPPROTO_TP
 
IPPROTO_TP


	)

62 
	mIPPROTO_DCCP
 = 33,

63 
	#IPPROTO_DCCP
 
IPPROTO_DCCP


	)

64 
	mIPPROTO_IPV6
 = 41,

65 
	#IPPROTO_IPV6
 
IPPROTO_IPV6


	)

66 
	mIPPROTO_RSVP
 = 46,

67 
	#IPPROTO_RSVP
 
IPPROTO_RSVP


	)

68 
	mIPPROTO_GRE
 = 47,

69 
	#IPPROTO_GRE
 
IPPROTO_GRE


	)

70 
	mIPPROTO_ESP
 = 50,

71 
	#IPPROTO_ESP
 
IPPROTO_ESP


	)

72 
	mIPPROTO_AH
 = 51,

73 
	#IPPROTO_AH
 
IPPROTO_AH


	)

74 
	mIPPROTO_MTP
 = 92,

75 
	#IPPROTO_MTP
 
IPPROTO_MTP


	)

76 
	mIPPROTO_BEETPH
 = 94,

77 
	#IPPROTO_BEETPH
 
IPPROTO_BEETPH


	)

78 
	mIPPROTO_ENCAP
 = 98,

79 
	#IPPROTO_ENCAP
 
IPPROTO_ENCAP


	)

80 
	mIPPROTO_PIM
 = 103,

81 
	#IPPROTO_PIM
 
IPPROTO_PIM


	)

82 
	mIPPROTO_COMP
 = 108,

83 
	#IPPROTO_COMP
 
IPPROTO_COMP


	)

84 
	mIPPROTO_SCTP
 = 132,

85 
	#IPPROTO_SCTP
 
IPPROTO_SCTP


	)

86 
	mIPPROTO_UDPLITE
 = 136,

87 
	#IPPROTO_UDPLITE
 
IPPROTO_UDPLITE


	)

88 
	mIPPROTO_MPLS
 = 137,

89 
	#IPPROTO_MPLS
 
IPPROTO_MPLS


	)

90 
	mIPPROTO_RAW
 = 255,

91 
	#IPPROTO_RAW
 
IPPROTO_RAW


	)

92 
	mIPPROTO_MAX


98 #i‚de‡
__USE_KERNEL_IPV6_DEFS


101 
	mIPPROTO_HOPOPTS
 = 0,

102 
	#IPPROTO_HOPOPTS
 
IPPROTO_HOPOPTS


	)

103 
	mIPPROTO_ROUTING
 = 43,

104 
	#IPPROTO_ROUTING
 
IPPROTO_ROUTING


	)

105 
	mIPPROTO_FRAGMENT
 = 44,

106 
	#IPPROTO_FRAGMENT
 
IPPROTO_FRAGMENT


	)

107 
	mIPPROTO_ICMPV6
 = 58,

108 
	#IPPROTO_ICMPV6
 
IPPROTO_ICMPV6


	)

109 
	mIPPROTO_NONE
 = 59,

110 
	#IPPROTO_NONE
 
IPPROTO_NONE


	)

111 
	mIPPROTO_DSTOPTS
 = 60,

112 
	#IPPROTO_DSTOPTS
 
IPPROTO_DSTOPTS


	)

113 
	mIPPROTO_MH
 = 135

114 
	#IPPROTO_MH
 
IPPROTO_MH


	)

119 
uöt16_t
 
	tö_p‹t_t
;

124 
	mIPPORT_ECHO
 = 7,

125 
	mIPPORT_DISCARD
 = 9,

126 
	mIPPORT_SYSTAT
 = 11,

127 
	mIPPORT_DAYTIME
 = 13,

128 
	mIPPORT_NETSTAT
 = 15,

129 
	mIPPORT_FTP
 = 21,

130 
	mIPPORT_TELNET
 = 23,

131 
	mIPPORT_SMTP
 = 25,

132 
	mIPPORT_TIMESERVER
 = 37,

133 
	mIPPORT_NAMESERVER
 = 42,

134 
	mIPPORT_WHOIS
 = 43,

135 
	mIPPORT_MTP
 = 57,

137 
	mIPPORT_TFTP
 = 69,

138 
	mIPPORT_RJE
 = 77,

139 
	mIPPORT_FINGER
 = 79,

140 
	mIPPORT_TTYLINK
 = 87,

141 
	mIPPORT_SUPDUP
 = 95,

144 
	mIPPORT_EXECSERVER
 = 512,

145 
	mIPPORT_LOGINSERVER
 = 513,

146 
	mIPPORT_CMDSERVER
 = 514,

147 
	mIPPORT_EFSSERVER
 = 520,

150 
	mIPPORT_BIFFUDP
 = 512,

151 
	mIPPORT_WHOSERVER
 = 513,

152 
	mIPPORT_ROUTESERVER
 = 520,

155 
	mIPPORT_RESERVED
 = 1024,

158 
	mIPPORT_USERRESERVED
 = 5000

166 
	#IN_CLASSA
(
a
Ë((((
ö_addr_t
)◊)Ë& 0x80000000Ë=0)

	)

167 
	#IN_CLASSA_NET
 0xff000000

	)

168 
	#IN_CLASSA_NSHIFT
 24

	)

169 
	#IN_CLASSA_HOST
 (0xfffffff‡& ~
IN_CLASSA_NET
)

	)

170 
	#IN_CLASSA_MAX
 128

	)

172 
	#IN_CLASSB
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xc0000000Ë=0x80000000)

	)

173 
	#IN_CLASSB_NET
 0xffff0000

	)

174 
	#IN_CLASSB_NSHIFT
 16

	)

175 
	#IN_CLASSB_HOST
 (0xfffffff‡& ~
IN_CLASSB_NET
)

	)

176 
	#IN_CLASSB_MAX
 65536

	)

178 
	#IN_CLASSC
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xc0000000)

	)

179 
	#IN_CLASSC_NET
 0xffffff00

	)

180 
	#IN_CLASSC_NSHIFT
 8

	)

181 
	#IN_CLASSC_HOST
 (0xfffffff‡& ~
IN_CLASSC_NET
)

	)

183 
	#IN_CLASSD
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xe0000000)

	)

184 
	#IN_MULTICAST
(
a
Ë
	`IN_CLASSD
◊)

	)

186 
	#IN_EXPERIMENTAL
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xe0000000)

	)

187 
	#IN_BADCLASS
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xf0000000)

	)

190 
	#INADDR_ANY
 ((
ö_addr_t
Ë0x00000000)

	)

192 
	#INADDR_BROADCAST
 ((
ö_addr_t
Ë0xffffffff)

	)

194 
	#INADDR_NONE
 ((
ö_addr_t
Ë0xffffffff)

	)

197 
	#IN_LOOPBACKNET
 127

	)

199 #i‚de‡
INADDR_LOOPBACK


200 
	#INADDR_LOOPBACK
 ((
ö_addr_t
Ë0x7f000001Ë

	)

204 
	#INADDR_UNSPEC_GROUP
 ((
ö_addr_t
Ë0xe0000000Ë

	)

205 
	#INADDR_ALLHOSTS_GROUP
 ((
ö_addr_t
Ë0xe0000001Ë

	)

206 
	#INADDR_ALLRTRS_GROUP
 ((
ö_addr_t
Ë0xe0000002Ë

	)

207 
	#INADDR_MAX_LOCAL_GROUP
 ((
ö_addr_t
Ë0xe00000ffË

	)

209 #i‚de‡
__USE_KERNEL_IPV6_DEFS


211 
	sö6_addr


215 
uöt8_t
 
	m__u6_addr8
[16];

216 #ifde‡
__USE_MISC


217 
uöt16_t
 
	m__u6_addr16
[8];

218 
uöt32_t
 
	m__u6_addr32
[4];

220 } 
	m__ö6_u
;

221 
	#s6_addr
 
__ö6_u
.
__u6_addr8


	)

222 #ifde‡
__USE_MISC


223 
	#s6_addr16
 
__ö6_u
.
__u6_addr16


	)

224 
	#s6_addr32
 
__ö6_u
.
__u6_addr32


	)

229 c⁄° 
ö6_addr
 
ö6addr_™y
;

230 c⁄° 
ö6_addr
 
ö6addr_lo›back
;

231 
	#IN6ADDR_ANY_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } } }

	)

232 
	#IN6ADDR_LOOPBACK_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1 } } }

	)

234 
	#INET_ADDRSTRLEN
 16

	)

235 
	#INET6_ADDRSTRLEN
 46

	)

239 
	ssockaddr_ö


241 
__SOCKADDR_COMMON
 (
sö_
);

242 
ö_p‹t_t
 
	msö_p‹t
;

243 
ö_addr
 
	msö_addr
;

246 
	msö_zîo
[ (
sockaddr
) -

247 
__SOCKADDR_COMMON_SIZE
 -

248  (
ö_p‹t_t
) -

249  (
ö_addr
)];

252 #i‚de‡
__USE_KERNEL_IPV6_DEFS


254 
	ssockaddr_ö6


256 
__SOCKADDR_COMMON
 (
sö6_
);

257 
ö_p‹t_t
 
	msö6_p‹t
;

258 
uöt32_t
 
	msö6_Êowöfo
;

259 
ö6_addr
 
	msö6_addr
;

260 
uöt32_t
 
	msö6_sc›e_id
;

264 #ifde‡
__USE_MISC


266 
	sù_mªq


269 
ö_addr
 
	mimr_mu…üddr
;

272 
ö_addr
 
	mimr_öãrÁ˚
;

275 
	sù_mªq_sour˚


278 
ö_addr
 
	mimr_mu…üddr
;

281 
ö_addr
 
	mimr_öãrÁ˚
;

284 
ö_addr
 
	mimr_sour˚addr
;

288 #i‚de‡
__USE_KERNEL_IPV6_DEFS


290 
	sùv6_mªq


293 
ö6_addr
 
	mùv6mr_mu…üddr
;

296 
	mùv6mr_öãrÁ˚
;

300 #ifde‡
__USE_MISC


302 
	sgroup_ªq


305 
uöt32_t
 
	mgr_öãrÁ˚
;

308 
sockaddr_°‹age
 
	mgr_group
;

311 
	sgroup_sour˚_ªq


314 
uöt32_t
 
	mg§_öãrÁ˚
;

317 
sockaddr_°‹age
 
	mg§_group
;

320 
sockaddr_°‹age
 
	mg§_sour˚
;

325 
	sù_msfûãr


328 
ö_addr
 
	mimsf_mu…üddr
;

331 
ö_addr
 
	mimsf_öãrÁ˚
;

334 
uöt32_t
 
	mimsf_fmode
;

337 
uöt32_t
 
	mimsf_num§c
;

339 
ö_addr
 
	mimsf_¶i°
[1];

342 
	#IP_MSFILTER_SIZE
(
num§c
Ë( (
ù_msfûãr
) \

343 -  (
ö_addr
) \

344 + (
num§c
Ë*  (
ö_addr
))

	)

346 
	sgroup_fûãr


349 
uöt32_t
 
	mgf_öãrÁ˚
;

352 
sockaddr_°‹age
 
	mgf_group
;

355 
uöt32_t
 
	mgf_fmode
;

358 
uöt32_t
 
	mgf_num§c
;

360 
sockaddr_°‹age
 
	mgf_¶i°
[1];

363 
	#GROUP_FILTER_SIZE
(
num§c
Ë( (
group_fûãr
) \

364 -  (
sockaddr_°‹age
) \

365 + ((
num§c
) \

366 *  (
sockaddr_°‹age
)))

	)

376 
uöt32_t
 
	$¡ohl
 (
uöt32_t
 
__√é⁄g
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

377 
uöt16_t
 
	$¡ohs
 (
uöt16_t
 
__√tsh‹t
)

378 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

379 
uöt32_t
 
	$ht⁄l
 (
uöt32_t
 
__ho°l⁄g
)

380 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

381 
uöt16_t
 
	$ht⁄s
 (
uöt16_t
 
__ho°sh‹t
)

382 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

384 
	~<ídün.h
>

387 
	~<bôs/byãsw≠.h
>

389 #ifde‡
__OPTIMIZE__


393 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


396 
	#¡ohl
(
x
Ë(x)

	)

397 
	#¡ohs
(
x
Ë(x)

	)

398 
	#ht⁄l
(
x
Ë(x)

	)

399 
	#ht⁄s
(
x
Ë(x)

	)

401 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


402 
	#¡ohl
(
x
Ë
	`__bsw≠_32
 (x)

	)

403 
	#¡ohs
(
x
Ë
	`__bsw≠_16
 (x)

	)

404 
	#ht⁄l
(
x
Ë
	`__bsw≠_32
 (x)

	)

405 
	#ht⁄s
(
x
Ë
	`__bsw≠_16
 (x)

	)

410 #ifde‡
__GNUC__


411 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

412 (
__exãnsi⁄__
 \

413 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

414 
__a
->
s6_addr32
[0] == 0 \

415 && 
__a
->
s6_addr32
[1] == 0 \

416 && 
__a
->
s6_addr32
[2] == 0 \

417 && 
__a
->
s6_addr32
[3] =0; 
	}
}))

	)

419 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

420 (
__exãnsi⁄__
 \

421 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

422 
__a
->
s6_addr32
[0] == 0 \

423 && 
__a
->
s6_addr32
[1] == 0 \

424 && 
__a
->
s6_addr32
[2] == 0 \

425 && 
__a
->
s6_addr32
[3] =
	`ht⁄l
 (1); }))

	)

427 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

428 (
__exãnsi⁄__
 \

429 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

430 (
__a
->
s6_addr32
[0] & 
	`ht⁄l
 (0xffc00000)Ë=ht⁄»(0x„800000); }))

	)

432 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

433 (
__exãnsi⁄__
 \

434 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

435 (
__a
->
s6_addr32
[0] & 
	`ht⁄l
 (0xffc00000)Ë=ht⁄»(0x„c00000); }))

	)

437 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

438 (
__exãnsi⁄__
 \

439 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

440 
__a
->
s6_addr32
[0] == 0 \

441 && 
__a
->
s6_addr32
[1] == 0 \

442 && 
__a
->
s6_addr32
[2] =
	`ht⁄l
 (0xffff); }))

	)

444 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

445 (
__exãnsi⁄__
 \

446 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

447 
__a
->
s6_addr32
[0] == 0 \

448 && 
__a
->
s6_addr32
[1] == 0 \

449 && 
__a
->
s6_addr32
[2] == 0 \

450 && 
	`¡ohl
 (
__a
->
s6_addr32
[3]Ë> 1; }))

	)

452 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

453 (
__exãnsi⁄__
 \

454 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

455 c⁄° 
ö6_addr
 *
__b
 = (c⁄° ö6_add∏*Ë(
b
); \

456 
__a
->
s6_addr32
[0] =
__b
->s6_addr32[0] \

457 && 
__a
->
s6_addr32
[1] =
__b
->s6_addr32[1] \

458 && 
__a
->
s6_addr32
[2] =
__b
->s6_addr32[2] \

459 && 
__a
->
s6_addr32
[3] =
__b
->s6_addr32[3]; }))

	)

461 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

462 (((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0 \

463 && ((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0 \

464 && ((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0 \

465 && ((c⁄° 
uöt32_t
 *Ë(
a
))[3] =0)

	)

467 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

468 (((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0 \

469 && ((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0 \

470 && ((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0 \

471 && ((c⁄° 
uöt32_t
 *Ë(
a
))[3] =
	`ht⁄l
 (1))

	)

473 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

474 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

475 =
	`ht⁄l
 (0x„800000))

	)

477 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

478 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

479 =
	`ht⁄l
 (0x„c00000))

	)

481 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

482 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0) \

483 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0) \

484 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] =
	`ht⁄l
 (0xffff)))

	)

486 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

487 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0) \

488 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0) \

489 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0) \

490 && (
	`¡ohl
 (((c⁄° 
uöt32_t
 *Ë(
a
))[3]Ë> 1))

	)

492 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

493 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] =((c⁄° uöt32_à*Ë(
b
))[0]) \

494 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] =((c⁄° uöt32_à*Ë(
b
))[1]) \

495 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] =((c⁄° uöt32_à*Ë(
b
))[2]) \

496 && (((c⁄° 
uöt32_t
 *Ë(
a
))[3] =((c⁄° uöt32_à*Ë(
b
))[3]))

	)

499 
	#IN6_IS_ADDR_MULTICAST
(
a
Ë(((c⁄° 
uöt8_t
 *Ë◊))[0] =0xff)

	)

501 #ifde‡
__USE_MISC


503 
	$bödªsvp‹t
 (
__sockfd
, 
sockaddr_ö
 *
__sock_ö
Ë
__THROW
;

506 
	$bödªsvp‹t6
 (
__sockfd
, 
sockaddr_ö6
 *
__sock_ö
)

507 
__THROW
;

511 
	#IN6_IS_ADDR_MC_NODELOCAL
(
a
) \

512 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

513 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x1))

	)

515 
	#IN6_IS_ADDR_MC_LINKLOCAL
(
a
) \

516 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

517 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x2))

	)

519 
	#IN6_IS_ADDR_MC_SITELOCAL
(
a
) \

520 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

521 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x5))

	)

523 
	#IN6_IS_ADDR_MC_ORGLOCAL
(
a
) \

524 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

525 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x8))

	)

527 
	#IN6_IS_ADDR_MC_GLOBAL
(
a
) \

528 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

529 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0xe))

	)

532 #ifde‡
__USE_GNU


533 
cmsghdr
;

535 #i‚de‡
__USE_KERNEL_IPV6_DEFS


537 
	sö6_pktöfo


539 
ö6_addr
 
ùi6_addr
;

540 
ùi6_ifödex
;

544 
	sù6_mtuöfo


546 
sockaddr_ö6
 
ù6m_addr
;

547 
uöt32_t
 
ù6m_mtu
;

552 
	$öë6_›ti⁄_•a˚
 (
__nbyãs
)

553 
__THROW
 
__©åibuã_dïªˇãd__
;

554 
	$öë6_›ti⁄_öô
 (*
__bp
, 
cmsghdr
 **
__cmsgp
,

555 
__ty≥
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

556 
	$öë6_›ti⁄_≠≥nd
 (
cmsghdr
 *
__cmsg
,

557 c⁄° 
uöt8_t
 *
__ty≥p
, 
__mu…x
,

558 
__∂usy
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

559 
uöt8_t
 *
	$öë6_›ti⁄_Æloc
 (
cmsghdr
 *
__cmsg
, 
__d©Æí
,

560 
__mu…x
, 
__∂usy
)

561 
__THROW
 
__©åibuã_dïªˇãd__
;

562 
	$öë6_›ti⁄_√xt
 (c⁄° 
cmsghdr
 *
__cmsg
,

563 
uöt8_t
 **
__çåp
)

564 
__THROW
 
__©åibuã_dïªˇãd__
;

565 
	$öë6_›ti⁄_föd
 (c⁄° 
cmsghdr
 *
__cmsg
,

566 
uöt8_t
 **
__çåp
, 
__ty≥
)

567 
__THROW
 
__©åibuã_dïªˇãd__
;

571 
	$öë6_›t_öô
 (*
__extbuf
, 
sockÀn_t
 
__exéí
Ë
__THROW
;

572 
	$öë6_›t_≠≥nd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

573 
uöt8_t
 
__ty≥
, 
sockÀn_t
 
__Àn
, uöt8_à
__Æign
,

574 **
__d©abuÂ
Ë
__THROW
;

575 
	$öë6_›t_föish
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
)

576 
__THROW
;

577 
	$öë6_›t_£t_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

578 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

579 
	$öë6_›t_√xt
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

580 
uöt8_t
 *
__ty≥p
, 
sockÀn_t
 *
__À≈
,

581 **
__d©abuÂ
Ë
__THROW
;

582 
	$öë6_›t_föd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

583 
uöt8_t
 
__ty≥
, 
sockÀn_t
 *
__À≈
,

584 **
__d©abuÂ
Ë
__THROW
;

585 
	$öë6_›t_gë_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

586 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

590 
sockÀn_t
 
	$öë6_πh_•a˚
 (
__ty≥
, 
__£gmíts
Ë
__THROW
;

591 *
	$öë6_πh_öô
 (*
__bp
, 
sockÀn_t
 
__bp_Àn
, 
__ty≥
,

592 
__£gmíts
Ë
__THROW
;

593 
	$öë6_πh_add
 (*
__bp
, c⁄° 
ö6_addr
 *
__addr
Ë
__THROW
;

594 
	$öë6_πh_ªvî£
 (c⁄° *
__ö
, *
__out
Ë
__THROW
;

595 
	$öë6_πh_£gmíts
 (c⁄° *
__bp
Ë
__THROW
;

596 
ö6_addr
 *
	$öë6_πh_gëaddr
 (c⁄° *
__bp
, 
__ödex
)

597 
__THROW
;

603 
	$gëùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

604 
ö_addr
 
__group
, 
uöt32_t
 *
__fmode
,

605 
uöt32_t
 *
__num§c
, 
ö_addr
 *
__¶i°
)

606 
__THROW
;

609 
	$£tùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

610 
ö_addr
 
__group
, 
uöt32_t
 
__fmode
,

611 
uöt32_t
 
__num§c
,

612 c⁄° 
ö_addr
 *
__¶i°
)

613 
__THROW
;

617 
	$gësour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

618 c⁄° 
sockaddr
 *
__group
,

619 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 *
__fmode
,

620 
uöt32_t
 *
__num§c
,

621 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

624 
	$£tsour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

625 c⁄° 
sockaddr
 *
__group
,

626 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 
__fmode
,

627 
uöt32_t
 
__num§c
,

628 c⁄° 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

631 
__END_DECLS


	@/usr/include/pthread.h

18 #i‚de‡
_PTHREAD_H


19 
	#_PTHREAD_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<ídün.h
>

23 
	~<sched.h
>

24 
	~<time.h
>

26 
	~<bôs/±hªadty≥s.h
>

27 
	~<bôs/£tjmp.h
>

28 
	~<bôs/w‹dsize.h
>

34 
	mPTHREAD_CREATE_JOINABLE
,

35 
	#PTHREAD_CREATE_JOINABLE
 
PTHREAD_CREATE_JOINABLE


	)

36 
	mPTHREAD_CREATE_DETACHED


37 
	#PTHREAD_CREATE_DETACHED
 
PTHREAD_CREATE_DETACHED


	)

44 
	mPTHREAD_MUTEX_TIMED_NP
,

45 
	mPTHREAD_MUTEX_RECURSIVE_NP
,

46 
	mPTHREAD_MUTEX_ERRORCHECK_NP
,

47 
	mPTHREAD_MUTEX_ADAPTIVE_NP


48 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


50 
	mPTHREAD_MUTEX_NORMAL
 = 
PTHREAD_MUTEX_TIMED_NP
,

51 
	mPTHREAD_MUTEX_RECURSIVE
 = 
PTHREAD_MUTEX_RECURSIVE_NP
,

52 
	mPTHREAD_MUTEX_ERRORCHECK
 = 
PTHREAD_MUTEX_ERRORCHECK_NP
,

53 
	mPTHREAD_MUTEX_DEFAULT
 = 
PTHREAD_MUTEX_NORMAL


55 #ifde‡
__USE_GNU


57 , 
	mPTHREAD_MUTEX_FAST_NP
 = 
PTHREAD_MUTEX_TIMED_NP


62 #ifde‡
__USE_XOPEN2K


66 
	mPTHREAD_MUTEX_STALLED
,

67 
	mPTHREAD_MUTEX_STALLED_NP
 = 
PTHREAD_MUTEX_STALLED
,

68 
	mPTHREAD_MUTEX_ROBUST
,

69 
	mPTHREAD_MUTEX_ROBUST_NP
 = 
PTHREAD_MUTEX_ROBUST


74 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


78 
	mPTHREAD_PRIO_NONE
,

79 
	mPTHREAD_PRIO_INHERIT
,

80 
	mPTHREAD_PRIO_PROTECT


85 #ifde‡
__PTHREAD_MUTEX_HAVE_PREV


86 
	#PTHREAD_MUTEX_INITIALIZER
 \

87 { { 0, 0, 0, 0, 0, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

88 #ifde‡
__USE_GNU


89 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

90 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

91 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

92 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

93 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

94 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

98 
	#PTHREAD_MUTEX_INITIALIZER
 \

99 { { 0, 0, 0, 0, 0, { 
__PTHREAD_SPINS
 } } }

	)

100 #ifde‡
__USE_GNU


101 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

102 { { 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

103 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

104 { { 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

105 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

106 { { 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

113 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


116 
	mPTHREAD_RWLOCK_PREFER_READER_NP
,

117 
	mPTHREAD_RWLOCK_PREFER_WRITER_NP
,

118 
	mPTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,

119 
	mPTHREAD_RWLOCK_DEFAULT_NP
 = 
PTHREAD_RWLOCK_PREFER_READER_NP


125 #i‚de‡
__PTHREAD_RWLOCK_INT_FLAGS_SHARED


126 #i‡
__WORDSIZE
 == 64

127 
	#__PTHREAD_RWLOCK_INT_FLAGS_SHARED
 1

	)

132 
	#PTHREAD_RWLOCK_INITIALIZER
 \

133 { { 0, 0, 0, 0, 0, 0, 0, 0, 
__PTHREAD_RWLOCK_ELISION_EXTRA
, 0, 0 } }

	)

134 #ifde‡
__USE_GNU


135 #ifde‡
__PTHREAD_RWLOCK_INT_FLAGS_SHARED


136 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

137 { { 0, 0, 0, 0, 0, 0, 0, 0, 
__PTHREAD_RWLOCK_ELISION_EXTRA
, 0, \

138 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
 } }

	)

140 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


141 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

142 { { 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
, \

143 0, 
__PTHREAD_RWLOCK_ELISION_EXTRA
, 0, 0 } }

	)

145 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

146 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,\

147 0 } }

	)

157 
	mPTHREAD_INHERIT_SCHED
,

158 
	#PTHREAD_INHERIT_SCHED
 
PTHREAD_INHERIT_SCHED


	)

159 
	mPTHREAD_EXPLICIT_SCHED


160 
	#PTHREAD_EXPLICIT_SCHED
 
PTHREAD_EXPLICIT_SCHED


	)

167 
	mPTHREAD_SCOPE_SYSTEM
,

168 
	#PTHREAD_SCOPE_SYSTEM
 
PTHREAD_SCOPE_SYSTEM


	)

169 
	mPTHREAD_SCOPE_PROCESS


170 
	#PTHREAD_SCOPE_PROCESS
 
PTHREAD_SCOPE_PROCESS


	)

177 
	mPTHREAD_PROCESS_PRIVATE
,

178 
	#PTHREAD_PROCESS_PRIVATE
 
PTHREAD_PROCESS_PRIVATE


	)

179 
	mPTHREAD_PROCESS_SHARED


180 
	#PTHREAD_PROCESS_SHARED
 
PTHREAD_PROCESS_SHARED


	)

186 
	#PTHREAD_COND_INITIALIZER
 { { 0, 0, 0, 0, 0, (*Ë0, 0, 0 } }

	)

190 
	s_±hªad_˛ónup_buf„r


192 (*
	m__routöe
) (*);

193 *
	m__¨g
;

194 
	m__ˇn˚…y≥
;

195 
_±hªad_˛ónup_buf„r
 *
	m__¥ev
;

201 
	mPTHREAD_CANCEL_ENABLE
,

202 
	#PTHREAD_CANCEL_ENABLE
 
PTHREAD_CANCEL_ENABLE


	)

203 
	mPTHREAD_CANCEL_DISABLE


204 
	#PTHREAD_CANCEL_DISABLE
 
PTHREAD_CANCEL_DISABLE


	)

208 
	mPTHREAD_CANCEL_DEFERRED
,

209 
	#PTHREAD_CANCEL_DEFERRED
 
PTHREAD_CANCEL_DEFERRED


	)

210 
	mPTHREAD_CANCEL_ASYNCHRONOUS


211 
	#PTHREAD_CANCEL_ASYNCHRONOUS
 
PTHREAD_CANCEL_ASYNCHRONOUS


	)

213 
	#PTHREAD_CANCELED
 ((*Ë-1)

	)

217 
	#PTHREAD_ONCE_INIT
 0

	)

220 #ifde‡
__USE_XOPEN2K


224 
	#PTHREAD_BARRIER_SERIAL_THREAD
 -1

	)

228 
__BEGIN_DECLS


233 
	$±hªad_¸óã
 (
±hªad_t
 *
__ª°ri˘
 
__√wthªad
,

234 c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

235 *(*
__°¨t_routöe
) (*),

236 *
__ª°ri˘
 
__¨g
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 3));

242 
	$±hªad_exô
 (*
__ªtvÆ
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

250 
	`±hªad_joö
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
);

252 #ifde‡
__USE_GNU


255 
	$±hªad_åyjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
Ë
__THROW
;

263 
	`±hªad_timedjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

264 c⁄° 
time•ec
 *
__ab°ime
);

271 
	$±hªad_dëach
 (
±hªad_t
 
__th
Ë
__THROW
;

275 
±hªad_t
 
	$±hªad_£lf
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

278 
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
)

279 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

287 
	$±hªad_©å_öô
 (
±hªad_©å_t
 *
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

290 
	$±hªad_©å_de°roy
 (
±hªad_©å_t
 *
__©å
)

291 
__THROW
 
	`__n⁄nuŒ
 ((1));

294 
	$±hªad_©å_gëdëach°©e
 (c⁄° 
±hªad_©å_t
 *
__©å
,

295 *
__dëach°©e
)

296 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

299 
	$±hªad_©å_£tdëach°©e
 (
±hªad_©å_t
 *
__©å
,

300 
__dëach°©e
)

301 
__THROW
 
	`__n⁄nuŒ
 ((1));

305 
	$±hªad_©å_gëgu¨dsize
 (c⁄° 
±hªad_©å_t
 *
__©å
,

306 
size_t
 *
__gu¨dsize
)

307 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

310 
	$±hªad_©å_£tgu¨dsize
 (
±hªad_©å_t
 *
__©å
,

311 
size_t
 
__gu¨dsize
)

312 
__THROW
 
	`__n⁄nuŒ
 ((1));

316 
	$±hªad_©å_gësched∑øm
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

317 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

318 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

321 
	$±hªad_©å_£tsched∑øm
 (
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

322 c⁄° 
sched_∑øm
 *
__ª°ri˘


323 
__∑øm
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

326 
	$±hªad_©å_gëschedpﬁicy
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


327 
__©å
, *
__ª°ri˘
 
__pﬁicy
)

328 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

331 
	$±hªad_©å_£tschedpﬁicy
 (
±hªad_©å_t
 *
__©å
, 
__pﬁicy
)

332 
__THROW
 
	`__n⁄nuŒ
 ((1));

335 
	$±hªad_©å_gëöhîôsched
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


336 
__©å
, *
__ª°ri˘
 
__öhîô
)

337 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

340 
	$±hªad_©å_£töhîôsched
 (
±hªad_©å_t
 *
__©å
,

341 
__öhîô
)

342 
__THROW
 
	`__n⁄nuŒ
 ((1));

346 
	$±hªad_©å_gësc›e
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

347 *
__ª°ri˘
 
__sc›e
)

348 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

351 
	$±hªad_©å_£tsc›e
 (
±hªad_©å_t
 *
__©å
, 
__sc›e
)

352 
__THROW
 
	`__n⁄nuŒ
 ((1));

355 
	$±hªad_©å_gë°ackaddr
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


356 
__©å
, **
__ª°ri˘
 
__°ackaddr
)

357 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__©åibuã_dïªˇãd__
;

363 
	$±hªad_©å_£t°ackaddr
 (
±hªad_©å_t
 *
__©å
,

364 *
__°ackaddr
)

365 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
;

368 
	$±hªad_©å_gë°acksize
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


369 
__©å
, 
size_t
 *
__ª°ri˘
 
__°acksize
)

370 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

375 
	$±hªad_©å_£t°acksize
 (
±hªad_©å_t
 *
__©å
,

376 
size_t
 
__°acksize
)

377 
__THROW
 
	`__n⁄nuŒ
 ((1));

379 #ifde‡
__USE_XOPEN2K


381 
	$±hªad_©å_gë°ack
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

382 **
__ª°ri˘
 
__°ackaddr
,

383 
size_t
 *
__ª°ri˘
 
__°acksize
)

384 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

389 
	$±hªad_©å_£t°ack
 (
±hªad_©å_t
 *
__©å
, *
__°ackaddr
,

390 
size_t
 
__°acksize
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

393 #ifde‡
__USE_GNU


396 
	$±hªad_©å_£èfföôy_≈
 (
±hªad_©å_t
 *
__©å
,

397 
size_t
 
__˝u£tsize
,

398 c⁄° 
˝u_£t_t
 *
__˝u£t
)

399 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

403 
	$±hªad_©å_gëafföôy_≈
 (c⁄° 
±hªad_©å_t
 *
__©å
,

404 
size_t
 
__˝u£tsize
,

405 
˝u_£t_t
 *
__˝u£t
)

406 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

409 
	$±hªad_gë©å_deÁu…_≈
 (
±hªad_©å_t
 *
__©å
)

410 
__THROW
 
	`__n⁄nuŒ
 ((1));

414 
	$±hªad_£èâr_deÁu…_≈
 (c⁄° 
±hªad_©å_t
 *
__©å
)

415 
__THROW
 
	`__n⁄nuŒ
 ((1));

420 
	$±hªad_gë©å_≈
 (
±hªad_t
 
__th
, 
±hªad_©å_t
 *
__©å
)

421 
__THROW
 
	`__n⁄nuŒ
 ((2));

429 
	$±hªad_£tsched∑øm
 (
±hªad_t
 
__èrgë_thªad
, 
__pﬁicy
,

430 c⁄° 
sched_∑øm
 *
__∑øm
)

431 
__THROW
 
	`__n⁄nuŒ
 ((3));

434 
	$±hªad_gësched∑øm
 (
±hªad_t
 
__èrgë_thªad
,

435 *
__ª°ri˘
 
__pﬁicy
,

436 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

437 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

440 
	$±hªad_£tsched¥io
 (
±hªad_t
 
__èrgë_thªad
, 
__¥io
)

441 
__THROW
;

444 #ifde‡
__USE_GNU


446 
	$±hªad_gë«me_≈
 (
±hªad_t
 
__èrgë_thªad
, *
__buf
,

447 
size_t
 
__buÊí
)

448 
__THROW
 
	`__n⁄nuŒ
 ((2));

451 
	$±hªad_£äame_≈
 (
±hªad_t
 
__èrgë_thªad
, c⁄° *
__«me
)

452 
__THROW
 
	`__n⁄nuŒ
 ((2));

456 #ifde‡
__USE_UNIX98


458 
	$±hªad_gëc⁄cuºícy
 (Ë
__THROW
;

461 
	$±hªad_£tc⁄cuºícy
 (
__Àvñ
Ë
__THROW
;

464 #ifde‡
__USE_GNU


469 
	$±hªad_yõld
 (Ë
__THROW
;

474 
	$±hªad_£èfföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

475 c⁄° 
˝u_£t_t
 *
__˝u£t
)

476 
__THROW
 
	`__n⁄nuŒ
 ((3));

479 
	$±hªad_gëafföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

480 
˝u_£t_t
 *
__˝u£t
)

481 
__THROW
 
	`__n⁄nuŒ
 ((3));

494 
	$±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

495 (*
__öô_routöe
Ë()Ë
	`__n⁄nuŒ
 ((1, 2));

506 
	`±hªad_£tˇn˚l°©e
 (
__°©e
, *
__ﬁd°©e
);

510 
	`±hªad_£tˇn˚…y≥
 (
__ty≥
, *
__ﬁdty≥
);

513 
	`±hªad_ˇn˚l
 (
±hªad_t
 
__th
);

518 
	`±hªad_ã°ˇn˚l
 ();

527 
__jmp_buf
 
__ˇn˚l_jmp_buf
;

528 
__mask_was_ßved
;

529 } 
__ˇn˚l_jmp_buf
[1];

530 *
__∑d
[4];

531 } 
	t__±hªad_unwöd_buf_t
 
	t__©åibuã__
 ((
	t__Æig√d__
));

534 #i‚de‡
__˛ónup_f˘_©åibuã


535 
	#__˛ónup_f˘_©åibuã


	)

540 
	s__±hªad_˛ónup_‰ame


542 (*
__ˇn˚l_routöe
) (*);

543 *
__ˇn˚l_¨g
;

544 
__do_ô
;

545 
__ˇn˚l_ty≥
;

548 #i‡
deföed
 
__GNUC__
 && deföed 
__EXCEPTIONS


549 #ifde‡
__˝lu•lus


551 ˛as†
	c__±hªad_˛ónup_˛ass


553 (*
__ˇn˚l_routöe
) (*);

554 *
__ˇn˚l_¨g
;

555 
__do_ô
;

556 
__ˇn˚l_ty≥
;

558 
public
:

559 
	$__±hªad_˛ónup_˛ass
 ((*
__f˘
Ë(*), *
__¨g
)

560 : 
	`__ˇn˚l_routöe
 (
__f˘
), 
	`__ˇn˚l_¨g
 (
__¨g
), 
	$__do_ô
 (1) { }

561 ~
	$__±hªad_˛ónup_˛ass
 (Ë{ i‡(
__do_ô
Ë
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); 
	}
}

562 
	$__£tdoô
 (
__√wvÆ
Ë{ 
__do_ô
 = __√wvÆ; 
	}
}

563 
	$__de„r
 (Ë{ 
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
,

564 &
__ˇn˚l_ty≥
); 
	}
}

565 
	$__ª°‹e
 (Ëc⁄° { 
	`±hªad_£tˇn˚…y≥
 (
__ˇn˚l_ty≥
, 0); 
	}
}

575 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

577 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
)

	)

581 
	#±hªad_˛ónup_p›
(
execuã
) \

582 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

583 } 0)

	)

585 #ifde‡
__USE_GNU


589 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

591 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
); \

592 
__˛‰ame
.
	`__de„r
 ()

	)

597 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

598 
__˛‰ame
.
	`__ª°‹e
 (); \

599 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

600 } 0)

	)

607 
__exã∫_ölöe
 

608 
	$__±hªad_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
__‰ame
)

610 i‡(
__‰ame
->
__do_ô
)

611 
__‰ame
->
	`__ˇn˚l_routöe
 (__‰ame->
__ˇn˚l_¨g
);

612 
	}
}

621 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

623 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

624 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

625 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

626 .
__do_ô
 = 1 };

	)

630 
	#±hªad_˛ónup_p›
(
execuã
) \

631 
__˛‰ame
.
__do_ô
 = (
execuã
); \

632 } 0)

	)

634 #ifde‡
__USE_GNU


638 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

640 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

641 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

642 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

643 .
__do_ô
 = 1 }; \

644 (Ë
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
, \

645 &
__˛‰ame
.
__ˇn˚l_ty≥
)

	)

650 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

651 (Ë
	`±hªad_£tˇn˚…y≥
 (
__˛‰ame
.
__ˇn˚l_ty≥
, 
NULL
); \

652 
__˛‰ame
.
__do_ô
 = (
execuã
); \

653 } 0)

	)

664 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

666 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

667 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

668 *
__ˇn˚l_¨g
 = (
¨g
); \

669 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

670 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

671 i‡(
	`__glibc_u∆ikñy
 (
__nŸ_fú°_ˇŒ
)) \

673 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

674 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

678 
	`__±hªad_ªgi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

679 dÿ{

	)

680 
__±hªad_ªgi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

681 
__˛ónup_f˘_©åibuã
;

685 
	#±hªad_˛ónup_p›
(
execuã
) \

688 
	`__±hªad_uƒegi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

689 i‡(
execuã
) \

690 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

691 } 0)

	)

692 
	$__±hªad_uƒegi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

693 
__˛ónup_f˘_©åibuã
;

695 #ifde‡
__USE_GNU


699 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

701 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

702 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

703 *
__ˇn˚l_¨g
 = (
¨g
); \

704 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

705 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

706 i‡(
	`__glibc_u∆ikñy
 (
__nŸ_fú°_ˇŒ
)) \

708 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

709 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

713 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (&
__ˇn˚l_buf
); \

714 dÿ{

	)

715 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (
__±hªad_unwöd_buf_t
 *
__buf
)

716 
__˛ónup_f˘_©åibuã
;

721 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

724 
	`__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (&
__ˇn˚l_buf
); \

725 i‡(
execuã
) \

726 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

727 
	}
} 0)

	)

728 
	$__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (
__±hªad_unwöd_buf_t
 *
__buf
)

729 
__˛ónup_f˘_©åibuã
;

733 
	$__±hªad_unwöd_√xt
 (
__±hªad_unwöd_buf_t
 *
__buf
)

734 
__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

735 #i‚de‡
SHARED


736 
	`__©åibuã__
 ((
__wók__
))

742 
__jmp_buf_èg
;

743 
	$__sig£tjmp
 (
__jmp_buf_èg
 *
__ív
, 
__ßvemask
Ë
__THROWNL
;

749 
	$±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

750 c⁄° 
±hªad_muãx©å_t
 *
__muãx©å
)

751 
__THROW
 
	`__n⁄nuŒ
 ((1));

754 
	$±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
)

755 
__THROW
 
	`__n⁄nuŒ
 ((1));

758 
	$±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
)

759 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

762 
	$±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
)

763 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

765 #ifde‡
__USE_XOPEN2K


767 
	$±hªad_muãx_timedlock
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

768 c⁄° 
time•ec
 *
__ª°ri˘


769 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

773 
	$±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
)

774 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

778 
	$±hªad_muãx_gë¥io˚ûög
 (c⁄° 
±hªad_muãx_t
 *

779 
__ª°ri˘
 
__muãx
,

780 *
__ª°ri˘
 
__¥io˚ûög
)

781 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

785 
	$±hªad_muãx_£çrio˚ûög
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

786 
__¥io˚ûög
,

787 *
__ª°ri˘
 
__ﬁd_˚ûög
)

788 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

791 #ifde‡
__USE_XOPEN2K8


793 
	$±hªad_muãx_c⁄si°ít
 (
±hªad_muãx_t
 *
__muãx
)

794 
__THROW
 
	`__n⁄nuŒ
 ((1));

795 #ifde‡
__USE_GNU


796 
	$±hªad_muãx_c⁄si°ít_≈
 (
±hªad_muãx_t
 *
__muãx
)

797 
__THROW
 
	`__n⁄nuŒ
 ((1));

806 
	$±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
)

807 
__THROW
 
	`__n⁄nuŒ
 ((1));

810 
	$±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
)

811 
__THROW
 
	`__n⁄nuŒ
 ((1));

814 
	$±hªad_muãx©å_gëpsh¨ed
 (c⁄° 
±hªad_muãx©å_t
 *

815 
__ª°ri˘
 
__©å
,

816 *
__ª°ri˘
 
__psh¨ed
)

817 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

820 
	$±hªad_muãx©å_£çsh¨ed
 (
±hªad_muãx©å_t
 *
__©å
,

821 
__psh¨ed
)

822 
__THROW
 
	`__n⁄nuŒ
 ((1));

824 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


826 
	$±hªad_muãx©å_gëty≥
 (c⁄° 
±hªad_muãx©å_t
 *
__ª°ri˘


827 
__©å
, *
__ª°ri˘
 
__köd
)

828 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

833 
	$±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
, 
__köd
)

834 
__THROW
 
	`__n⁄nuŒ
 ((1));

838 
	$±hªad_muãx©å_gë¥Ÿocﬁ
 (c⁄° 
±hªad_muãx©å_t
 *

839 
__ª°ri˘
 
__©å
,

840 *
__ª°ri˘
 
__¥Ÿocﬁ
)

841 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

845 
	$±hªad_muãx©å_£çrŸocﬁ
 (
±hªad_muãx©å_t
 *
__©å
,

846 
__¥Ÿocﬁ
)

847 
__THROW
 
	`__n⁄nuŒ
 ((1));

850 
	$±hªad_muãx©å_gë¥io˚ûög
 (c⁄° 
±hªad_muãx©å_t
 *

851 
__ª°ri˘
 
__©å
,

852 *
__ª°ri˘
 
__¥io˚ûög
)

853 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

856 
	$±hªad_muãx©å_£çrio˚ûög
 (
±hªad_muãx©å_t
 *
__©å
,

857 
__¥io˚ûög
)

858 
__THROW
 
	`__n⁄nuŒ
 ((1));

860 #ifde‡
__USE_XOPEN2K


862 
	$±hªad_muãx©å_gërobu°
 (c⁄° 
±hªad_muãx©å_t
 *
__©å
,

863 *
__robu°√ss
)

864 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

865 #ifde‡
__USE_GNU


866 
	$±hªad_muãx©å_gërobu°_≈
 (c⁄° 
±hªad_muãx©å_t
 *
__©å
,

867 *
__robu°√ss
)

868 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

872 
	$±hªad_muãx©å_£åobu°
 (
±hªad_muãx©å_t
 *
__©å
,

873 
__robu°√ss
)

874 
__THROW
 
	`__n⁄nuŒ
 ((1));

875 #ifde‡
__USE_GNU


876 
	$±hªad_muãx©å_£åobu°_≈
 (
±hªad_muãx©å_t
 *
__©å
,

877 
__robu°√ss
)

878 
__THROW
 
	`__n⁄nuŒ
 ((1));

883 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


888 
	$±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

889 c⁄° 
±hªad_rwlock©å_t
 *
__ª°ri˘


890 
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

893 
	$±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
)

894 
__THROW
 
	`__n⁄nuŒ
 ((1));

897 
	$±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

898 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

901 
	$±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

902 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

904 #ifde‡
__USE_XOPEN2K


906 
	$±hªad_rwlock_timedrdlock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

907 c⁄° 
time•ec
 *
__ª°ri˘


908 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

912 
	$±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
)

913 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

916 
	$±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
)

917 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

919 #ifde‡
__USE_XOPEN2K


921 
	$±hªad_rwlock_timedwæock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

922 c⁄° 
time•ec
 *
__ª°ri˘


923 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

927 
	$±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
)

928 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

934 
	$±hªad_rwlock©å_öô
 (
±hªad_rwlock©å_t
 *
__©å
)

935 
__THROW
 
	`__n⁄nuŒ
 ((1));

938 
	$±hªad_rwlock©å_de°roy
 (
±hªad_rwlock©å_t
 *
__©å
)

939 
__THROW
 
	`__n⁄nuŒ
 ((1));

942 
	$±hªad_rwlock©å_gëpsh¨ed
 (c⁄° 
±hªad_rwlock©å_t
 *

943 
__ª°ri˘
 
__©å
,

944 *
__ª°ri˘
 
__psh¨ed
)

945 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

948 
	$±hªad_rwlock©å_£çsh¨ed
 (
±hªad_rwlock©å_t
 *
__©å
,

949 
__psh¨ed
)

950 
__THROW
 
	`__n⁄nuŒ
 ((1));

953 
	$±hªad_rwlock©å_gëköd_≈
 (c⁄° 
±hªad_rwlock©å_t
 *

954 
__ª°ri˘
 
__©å
,

955 *
__ª°ri˘
 
__¥ef
)

956 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

959 
	$±hªad_rwlock©å_£tköd_≈
 (
±hªad_rwlock©å_t
 *
__©å
,

960 
__¥ef
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

968 
	$±hªad_c⁄d_öô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

969 c⁄° 
±hªad_c⁄d©å_t
 *
__ª°ri˘
 
__c⁄d_©å
)

970 
__THROW
 
	`__n⁄nuŒ
 ((1));

973 
	$±hªad_c⁄d_de°roy
 (
±hªad_c⁄d_t
 *
__c⁄d
)

974 
__THROW
 
	`__n⁄nuŒ
 ((1));

977 
	$±hªad_c⁄d_sig«l
 (
±hªad_c⁄d_t
 *
__c⁄d
)

978 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

981 
	$±hªad_c⁄d_brﬂdˇ°
 (
±hªad_c⁄d_t
 *
__c⁄d
)

982 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

989 
	$±hªad_c⁄d_waô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

990 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
)

991 
	`__n⁄nuŒ
 ((1, 2));

1000 
	$±hªad_c⁄d_timedwaô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

1001 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

1002 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
)

1003 
	`__n⁄nuŒ
 ((1, 2, 3));

1008 
	$±hªad_c⁄d©å_öô
 (
±hªad_c⁄d©å_t
 *
__©å
)

1009 
__THROW
 
	`__n⁄nuŒ
 ((1));

1012 
	$±hªad_c⁄d©å_de°roy
 (
±hªad_c⁄d©å_t
 *
__©å
)

1013 
__THROW
 
	`__n⁄nuŒ
 ((1));

1016 
	$±hªad_c⁄d©å_gëpsh¨ed
 (c⁄° 
±hªad_c⁄d©å_t
 *

1017 
__ª°ri˘
 
__©å
,

1018 *
__ª°ri˘
 
__psh¨ed
)

1019 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1022 
	$±hªad_c⁄d©å_£çsh¨ed
 (
±hªad_c⁄d©å_t
 *
__©å
,

1023 
__psh¨ed
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1025 #ifde‡
__USE_XOPEN2K


1027 
	$±hªad_c⁄d©å_gë˛ock
 (c⁄° 
±hªad_c⁄d©å_t
 *

1028 
__ª°ri˘
 
__©å
,

1029 
__˛ockid_t
 *
__ª°ri˘
 
__˛ock_id
)

1030 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1033 
	$±hªad_c⁄d©å_£t˛ock
 (
±hªad_c⁄d©å_t
 *
__©å
,

1034 
__˛ockid_t
 
__˛ock_id
)

1035 
__THROW
 
	`__n⁄nuŒ
 ((1));

1039 #ifde‡
__USE_XOPEN2K


1044 
	$±hªad_•ö_öô
 (
±hªad_•ölock_t
 *
__lock
, 
__psh¨ed
)

1045 
__THROW
 
	`__n⁄nuŒ
 ((1));

1048 
	$±hªad_•ö_de°roy
 (
±hªad_•ölock_t
 *
__lock
)

1049 
__THROW
 
	`__n⁄nuŒ
 ((1));

1052 
	$±hªad_•ö_lock
 (
±hªad_•ölock_t
 *
__lock
)

1053 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1056 
	$±hªad_•ö_åylock
 (
±hªad_•ölock_t
 *
__lock
)

1057 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1060 
	$±hªad_•ö_u∆ock
 (
±hªad_•ölock_t
 *
__lock
)

1061 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1068 
	$±hªad_b¨rõr_öô
 (
±hªad_b¨rõr_t
 *
__ª°ri˘
 
__b¨rõr
,

1069 c⁄° 
±hªad_b¨rõøâr_t
 *
__ª°ri˘


1070 
__©å
, 
__cou¡
)

1071 
__THROW
 
	`__n⁄nuŒ
 ((1));

1074 
	$±hªad_b¨rõr_de°roy
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1075 
__THROW
 
	`__n⁄nuŒ
 ((1));

1078 
	$±hªad_b¨rõr_waô
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1079 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1083 
	$±hªad_b¨rõøâr_öô
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1084 
__THROW
 
	`__n⁄nuŒ
 ((1));

1087 
	$±hªad_b¨rõøâr_de°roy
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1088 
__THROW
 
	`__n⁄nuŒ
 ((1));

1091 
	$±hªad_b¨rõøâr_gëpsh¨ed
 (c⁄° 
±hªad_b¨rõøâr_t
 *

1092 
__ª°ri˘
 
__©å
,

1093 *
__ª°ri˘
 
__psh¨ed
)

1094 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1097 
	$±hªad_b¨rõøâr_£çsh¨ed
 (
±hªad_b¨rõøâr_t
 *
__©å
,

1098 
__psh¨ed
)

1099 
__THROW
 
	`__n⁄nuŒ
 ((1));

1111 
	$±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

1112 (*
__de°r_fun˘i⁄
) (*))

1113 
__THROW
 
	`__n⁄nuŒ
 ((1));

1116 
	$±hªad_key_dñëe
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1119 *
	$±hªad_gë•ecific
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1122 
	$±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

1123 c⁄° *
__poöãr
Ë
__THROW
 ;

1126 #ifde‡
__USE_XOPEN2K


1128 
	$±hªad_gë˝u˛ockid
 (
±hªad_t
 
__thªad_id
,

1129 
__˛ockid_t
 *
__˛ock_id
)

1130 
__THROW
 
	`__n⁄nuŒ
 ((2));

1145 
	$±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1146 (*
__∑ª¡
) (),

1147 (*
__chûd
Ë()Ë
__THROW
;

1150 #ifde‡
__USE_EXTERN_INLINES


1152 
__exã∫_ölöe
 

1153 
	`__NTH
 (
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
))

1155  
__thªad1
 =
__thªad2
;

1156 
	}
}

1159 
	g__END_DECLS


	@/usr/include/sched.h

19 #i‚def 
_SCHED_H


20 
	#_SCHED_H
 1

	)

22 
	~<„©uªs.h
>

25 
	~<bôs/ty≥s.h
>

27 
	#__√ed_size_t


	)

28 
	~<°ddef.h
>

30 #ifde‡
__USE_XOPEN2K


31 
	#__√ed_time_t


	)

32 
	#__√ed_time•ec


	)

34 
	~<time.h
>

36 #i‚de‡
__pid_t_deföed


37 
__pid_t
 
	tpid_t
;

38 
	#__pid_t_deföed


	)

43 
	~<bôs/sched.h
>

45 
	#sched_¥i‹ôy
 
__sched_¥i‹ôy


	)

48 
__BEGIN_DECLS


51 
	$sched_£ç¨am
 (
__pid_t
 
__pid
, c⁄° 
sched_∑øm
 *
__∑øm
)

52 
__THROW
;

55 
	$sched_gë∑øm
 (
__pid_t
 
__pid
, 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

58 
	$sched_£tscheduÀr
 (
__pid_t
 
__pid
, 
__pﬁicy
,

59 c⁄° 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

62 
	$sched_gëscheduÀr
 (
__pid_t
 
__pid
Ë
__THROW
;

65 
	$sched_yõld
 (Ë
__THROW
;

68 
	$sched_gë_¥i‹ôy_max
 (
__Æg‹ôhm
Ë
__THROW
;

71 
	$sched_gë_¥i‹ôy_mö
 (
__Æg‹ôhm
Ë
__THROW
;

74 
	$sched_º_gë_öãrvÆ
 (
__pid_t
 
__pid
, 
time•ec
 *
__t
Ë
__THROW
;

77 #ifde‡
__USE_GNU


79 
	#CPU_SETSIZE
 
__CPU_SETSIZE


	)

80 
	#CPU_SET
(
˝u
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

81 
	#CPU_CLR
(
˝u
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

82 
	#CPU_ISSET
(
˝u
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (˝u,  (
˝u_£t_t
), \

83 
˝u£ç
)

	)

84 
	#CPU_ZERO
(
˝u£ç
Ë
	`__CPU_ZERO_S
 ( (
˝u_£t_t
), cpu£ç)

	)

85 
	#CPU_COUNT
(
˝u£ç
Ë
	`__CPU_COUNT_S
 ( (
˝u_£t_t
), cpu£ç)

	)

87 
	#CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u, sësize, cpu£ç)

	)

88 
	#CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u, sësize, cpu£ç)

	)

89 
	#CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (cpu, setsize, \

90 
˝u£ç
)

	)

91 
	#CPU_ZERO_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_ZERO_S
 (£tsize, cpu£ç)

	)

92 
	#CPU_COUNT_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_COUNT_S
 (£tsize, cpu£ç)

	)

94 
	#CPU_EQUAL
(
˝u£ç1
, 
˝u£ç2
) \

95 
	`__CPU_EQUAL_S
 ( (
˝u_£t_t
), 
˝u£ç1
, 
˝u£ç2
)

	)

96 
	#CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

97 
	`__CPU_EQUAL_S
 (
£tsize
, 
˝u£ç1
, 
˝u£ç2
)

	)

99 
	#CPU_AND
(
de°£t
, 
§c£t1
, 
§c£t2
) \

100 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

101 
	#CPU_OR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

102 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

103 
	#CPU_XOR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

104 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

105 
	#CPU_AND_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

106 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

107 
	#CPU_OR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

108 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

109 
	#CPU_XOR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

110 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

112 
	#CPU_ALLOC_SIZE
(
cou¡
Ë
	`__CPU_ALLOC_SIZE
 (cou¡)

	)

113 
	#CPU_ALLOC
(
cou¡
Ë
	`__CPU_ALLOC
 (cou¡)

	)

114 
	#CPU_FREE
(
˝u£t
Ë
	`__CPU_FREE
 (˝u£t)

	)

118 
	$sched_£èfföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

119 c⁄° 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

122 
	$sched_gëafföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

123 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

126 
__END_DECLS


	@/usr/include/semaphore.h

18 #i‚de‡
_SEMAPHORE_H


19 
	#_SEMAPHORE_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<sys/ty≥s.h
>

23 #ifde‡
__USE_XOPEN2K


24 
	#__√ed_time•ec


	)

25 
	~<time.h
>

29 
	~<bôs/£m≠h‹e.h
>

32 
__BEGIN_DECLS


36 
	$£m_öô
 (
£m_t
 *
__£m
, 
__psh¨ed
, 
__vÆue
)

37 
__THROW
;

39 
	$£m_de°roy
 (
£m_t
 *
__£m
Ë
__THROW
;

42 
£m_t
 *
	$£m_›í
 (c⁄° *
__«me
, 
__oÊag
, ...Ë
__THROW
;

45 
	$£m_˛o£
 (
£m_t
 *
__£m
Ë
__THROW
;

48 
	$£m_u∆ök
 (c⁄° *
__«me
Ë
__THROW
;

54 
	`£m_waô
 (
£m_t
 *
__£m
);

56 #ifde‡
__USE_XOPEN2K


61 
	`£m_timedwaô
 (
£m_t
 *
__ª°ri˘
 
__£m
,

62 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
);

66 
	$£m_åywaô
 (
£m_t
 *
__£m
Ë
__THROWNL
;

69 
	$£m_po°
 (
£m_t
 *
__£m
Ë
__THROWNL
;

72 
	$£m_gëvÆue
 (
£m_t
 *
__ª°ri˘
 
__£m
, *__ª°ri˘ 
__svÆ
)

73 
__THROW
;

76 
__END_DECLS


	@/usr/include/signal.h

22 #i‚def 
_SIGNAL_H


24 #i‡!
deföed
 
__√ed_sig_©omic_t
 && !deföed 
__√ed_sig£t_t


25 
	#_SIGNAL_H


	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


32 
	~<bôs/sig£t.h
>

36 #i‡
deföed
 
__√ed_sig_©omic_t
 || deföed 
_SIGNAL_H


37 #i‚de‡
__sig_©omic_t_deföed


38 
	#__sig_©omic_t_deföed


	)

39 
__BEGIN_NAMESPACE_STD


40 
__sig_©omic_t
 
	tsig_©omic_t
;

41 
	g__END_NAMESPACE_STD


43 #unde‡
__√ed_sig_©omic_t


46 #i‡
deföed
 
__√ed_sig£t_t
 || (deföed 
_SIGNAL_H
 && deföed 
__USE_POSIX
)

47 #i‚de‡
__sig£t_t_deföed


48 
	#__sig£t_t_deföed


	)

49 
__sig£t_t
 
	tsig£t_t
;

51 #unde‡
__√ed_sig£t_t


54 #ifde‡
_SIGNAL_H


56 
	~<bôs/ty≥s.h
>

57 
	~<bôs/signum.h
>

59 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


60 #i‚de‡
__pid_t_deföed


61 
__pid_t
 
	tpid_t
;

62 
	#__pid_t_deföed


	)

64 #ifde‡
__USE_XOPEN


66 #i‚de‡
__uid_t_deföed


67 
__uid_t
 
	tuid_t
;

68 
	#__uid_t_deföed


	)

72 #ifde‡
__USE_POSIX199309


74 
	#__√ed_time•ec


	)

75 
	~<time.h
>

78 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_XOPEN_EXTENDED


80 
	~<bôs/sigöfo.h
>

85 (*
	t__sigh™dÀr_t
) ();

90 
__sigh™dÀr_t
 
	$__sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

91 
__THROW
;

92 #ifde‡
__USE_GNU


93 
__sigh™dÀr_t
 
	$sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

94 
__THROW
;

100 
__BEGIN_NAMESPACE_STD


101 #ifde‡
__USE_MISC


102 
__sigh™dÀr_t
 
	$sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

103 
__THROW
;

106 #ifde‡
__REDIRECT_NTH


107 
__sigh™dÀr_t
 
	`__REDIRECT_NTH
 (
sig«l
,

108 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
),

109 
__sysv_sig«l
);

111 
	#sig«l
 
__sysv_sig«l


	)

114 
__END_NAMESPACE_STD


116 #ifde‡
__USE_XOPEN


119 
__sigh™dÀr_t
 
	$bsd_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

120 
__THROW
;

126 #ifde‡
__USE_POSIX


127 
	$kûl
 (
__pid_t
 
__pid
, 
__sig
Ë
__THROW
;

130 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


134 
	$kûÕg
 (
__pid_t
 
__pgΩ
, 
__sig
Ë
__THROW
;

137 
__BEGIN_NAMESPACE_STD


139 
	$øi£
 (
__sig
Ë
__THROW
;

140 
__END_NAMESPACE_STD


142 #ifde‡
__USE_MISC


144 
__sigh™dÀr_t
 
	$ssig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

145 
__THROW
;

146 
	$gsig«l
 (
__sig
Ë
__THROW
;

149 #ifde‡
__USE_XOPEN2K8


151 
	`psig«l
 (
__sig
, c⁄° *
__s
);

154 
	`psigöfo
 (c⁄° 
sigöfo_t
 *
__pöfo
, c⁄° *
__s
);

166 #ifde‡
__USE_XOPEN


167 #ifde‡
__GNUC__


168 
	$sig∑u£
 (
__sig
Ë
	`__asm__
 ("__xpg_sigpause");

170 
	`__sig∑u£
 (
__sig_‹_mask
, 
__is_sig
);

172 
	#sig∑u£
(
sig
Ë
	`__sig∑u£
 ((sig), 1)

	)

177 #ifde‡
__USE_MISC


184 
	#sigmask
(
sig
Ë
	`__sigmask
(sig)

	)

187 
	$sigblock
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

190 
	$sig£tmask
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

193 
	$siggëmask
 (Ë
__THROW
 
__©åibuã_dïªˇãd__
;

197 #ifde‡
__USE_MISC


198 
	#NSIG
 
_NSIG


	)

201 #ifde‡
__USE_GNU


202 
__sigh™dÀr_t
 
	tsigh™dÀr_t
;

206 #ifde‡
__USE_MISC


207 
__sigh™dÀr_t
 
	tsig_t
;

210 #ifde‡
__USE_POSIX


213 
	$sigem±y£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

216 
	$sigfûl£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

219 
	$sigadd£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

222 
	$sigdñ£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

225 
	$sigismembî
 (c⁄° 
sig£t_t
 *
__£t
, 
__signo
)

226 
__THROW
 
	`__n⁄nuŒ
 ((1));

228 #ifde‡
__USE_GNU


230 
	$sigi£m±y£t
 (c⁄° 
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

233 
	$sig™d£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

234 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

237 
	$sig‹£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

238 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

243 
	~<bôs/siga˘i⁄.h
>

246 
	$sig¥ocmask
 (
__how
, c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

247 
sig£t_t
 *
__ª°ri˘
 
__o£t
Ë
__THROW
;

254 
	$sigsu•íd
 (c⁄° 
sig£t_t
 *
__£t
Ë
	`__n⁄nuŒ
 ((1));

257 
	$siga˘i⁄
 (
__sig
, c⁄° 
siga˘i⁄
 *
__ª°ri˘
 
__a˘
,

258 
siga˘i⁄
 *
__ª°ri˘
 
__ﬂ˘
Ë
__THROW
;

261 
	$sig≥ndög
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

268 
	$sigwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
, *__ª°ri˘ 
__sig
)

269 
	`__n⁄nuŒ
 ((1, 2));

271 #ifde‡
__USE_POSIX199309


276 
	$sigwaôöfo
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

277 
sigöfo_t
 *
__ª°ri˘
 
__öfo
Ë
	`__n⁄nuŒ
 ((1));

284 
	$sigtimedwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

285 
sigöfo_t
 *
__ª°ri˘
 
__öfo
,

286 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
)

287 
	`__n⁄nuŒ
 ((1));

291 
	$sigqueue
 (
__pid_t
 
__pid
, 
__sig
, c⁄° 
sigvÆ
 
__vÆ
)

292 
__THROW
;

297 #ifde‡
__USE_MISC


301 c⁄° *c⁄° 
_sys_sigli°
[
_NSIG
];

302 c⁄° *c⁄° 
sys_sigli°
[
_NSIG
];

306 
	~<bôs/sigc⁄ãxt.h
>

309 
	$sigªtu∫
 (
sigc⁄ãxt
 *
__s˝
Ë
__THROW
;

314 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


315 
	#__√ed_size_t


	)

316 
	~<°ddef.h
>

321 
	$sigöãºu±
 (
__sig
, 
__öãºu±
Ë
__THROW
;

323 
	~<bôs/sig°ack.h
>

324 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


326 
	~<sys/uc⁄ãxt.h
>

332 
	$sig°ack
 (
sig°ack
 *
__ss
, sig°ack *
__oss
)

333 
__THROW
 
__©åibuã_dïªˇãd__
;

337 
	$sigÆt°ack
 (c⁄° 
sigÆt°ack
 *
__ª°ri˘
 
__ss
,

338 
sigÆt°ack
 *
__ª°ri˘
 
__oss
Ë
__THROW
;

342 #ifde‡
__USE_XOPEN_EXTENDED


346 
	$sighﬁd
 (
__sig
Ë
__THROW
;

349 
	$sigªl£
 (
__sig
Ë
__THROW
;

352 
	$sigign‹e
 (
__sig
Ë
__THROW
;

355 
__sigh™dÀr_t
 
	$sig£t
 (
__sig
, 
__sigh™dÀr_t
 
__di•
Ë
__THROW
;

358 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


361 
	~<bôs/±hªadty≥s.h
>

362 
	~<bôs/sigthªad.h
>

369 
	$__libc_cuºít_sigπmö
 (Ë
__THROW
;

371 
	$__libc_cuºít_sigπmax
 (Ë
__THROW
;

375 
__END_DECLS


	@/usr/include/stdint.h

22 #i‚de‡
_STDINT_H


23 
	#_STDINT_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/wch¨.h
>

27 
	~<bôs/w‹dsize.h
>

34 #i‚de‡
__öt8_t_deföed


35 
	#__öt8_t_deföed


	)

36 sig√d 
	töt8_t
;

37 
	töt16_t
;

38 
	töt32_t
;

39 #i‡
__WORDSIZE
 == 64

40 
	töt64_t
;

42 
__exãnsi⁄__


43 
	töt64_t
;

48 
	tuöt8_t
;

49 
	tuöt16_t
;

50 #i‚de‡
__uöt32_t_deföed


51 
	tuöt32_t
;

52 
	#__uöt32_t_deföed


	)

54 #i‡
__WORDSIZE
 == 64

55 
	tuöt64_t
;

57 
__exãnsi⁄__


58 
	tuöt64_t
;

65 sig√d 
	töt_Àa°8_t
;

66 
	töt_Àa°16_t
;

67 
	töt_Àa°32_t
;

68 #i‡
__WORDSIZE
 == 64

69 
	töt_Àa°64_t
;

71 
__exãnsi⁄__


72 
	töt_Àa°64_t
;

76 
	tuöt_Àa°8_t
;

77 
	tuöt_Àa°16_t
;

78 
	tuöt_Àa°32_t
;

79 #i‡
__WORDSIZE
 == 64

80 
	tuöt_Àa°64_t
;

82 
__exãnsi⁄__


83 
	tuöt_Àa°64_t
;

90 sig√d 
	töt_Á°8_t
;

91 #i‡
__WORDSIZE
 == 64

92 
	töt_Á°16_t
;

93 
	töt_Á°32_t
;

94 
	töt_Á°64_t
;

96 
	töt_Á°16_t
;

97 
	töt_Á°32_t
;

98 
__exãnsi⁄__


99 
	töt_Á°64_t
;

103 
	tuöt_Á°8_t
;

104 #i‡
__WORDSIZE
 == 64

105 
	tuöt_Á°16_t
;

106 
	tuöt_Á°32_t
;

107 
	tuöt_Á°64_t
;

109 
	tuöt_Á°16_t
;

110 
	tuöt_Á°32_t
;

111 
__exãnsi⁄__


112 
	tuöt_Á°64_t
;

117 #i‡
__WORDSIZE
 == 64

118 #i‚de‡
__öçå_t_deföed


119 
	töçå_t
;

120 
	#__öçå_t_deföed


	)

122 
	tuöçå_t
;

124 #i‚de‡
__öçå_t_deföed


125 
	töçå_t
;

126 
	#__öçå_t_deföed


	)

128 
	tuöçå_t
;

133 #i‡
__WORDSIZE
 == 64

134 
	tötmax_t
;

135 
	tuötmax_t
;

137 
__exãnsi⁄__


138 
	tötmax_t
;

139 
__exãnsi⁄__


140 
	tuötmax_t
;

144 #i‡
__WORDSIZE
 == 64

145 
	#__INT64_C
(
c
Ë¯## 
L


	)

146 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

148 
	#__INT64_C
(
c
Ë¯## 
LL


	)

149 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

155 
	#INT8_MIN
 (-128)

	)

156 
	#INT16_MIN
 (-32767-1)

	)

157 
	#INT32_MIN
 (-2147483647-1)

	)

158 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

160 
	#INT8_MAX
 (127)

	)

161 
	#INT16_MAX
 (32767)

	)

162 
	#INT32_MAX
 (2147483647)

	)

163 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

166 
	#UINT8_MAX
 (255)

	)

167 
	#UINT16_MAX
 (65535)

	)

168 
	#UINT32_MAX
 (4294967295U)

	)

169 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

173 
	#INT_LEAST8_MIN
 (-128)

	)

174 
	#INT_LEAST16_MIN
 (-32767-1)

	)

175 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

176 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

178 
	#INT_LEAST8_MAX
 (127)

	)

179 
	#INT_LEAST16_MAX
 (32767)

	)

180 
	#INT_LEAST32_MAX
 (2147483647)

	)

181 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

184 
	#UINT_LEAST8_MAX
 (255)

	)

185 
	#UINT_LEAST16_MAX
 (65535)

	)

186 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

187 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

191 
	#INT_FAST8_MIN
 (-128)

	)

192 #i‡
__WORDSIZE
 == 64

193 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

194 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

196 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

197 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

199 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

201 
	#INT_FAST8_MAX
 (127)

	)

202 #i‡
__WORDSIZE
 == 64

203 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

204 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

206 
	#INT_FAST16_MAX
 (2147483647)

	)

207 
	#INT_FAST32_MAX
 (2147483647)

	)

209 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

212 
	#UINT_FAST8_MAX
 (255)

	)

213 #i‡
__WORDSIZE
 == 64

214 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

215 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

217 
	#UINT_FAST16_MAX
 (4294967295U)

	)

218 
	#UINT_FAST32_MAX
 (4294967295U)

	)

220 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

224 #i‡
__WORDSIZE
 == 64

225 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

226 
	#INTPTR_MAX
 (9223372036854775807L)

	)

227 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

229 
	#INTPTR_MIN
 (-2147483647-1)

	)

230 
	#INTPTR_MAX
 (2147483647)

	)

231 
	#UINTPTR_MAX
 (4294967295U)

	)

236 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

238 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

241 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

247 #i‡
__WORDSIZE
 == 64

248 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

249 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

251 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

252 
	#PTRDIFF_MAX
 (2147483647)

	)

256 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

257 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

260 #i‡
__WORDSIZE
 == 64

261 
	#SIZE_MAX
 (18446744073709551615UL)

	)

263 #ifde‡
__WORDSIZE32_SIZE_ULONG


264 
	#SIZE_MAX
 (4294967295UL)

	)

266 
	#SIZE_MAX
 (4294967295U)

	)

271 #i‚de‡
WCHAR_MIN


273 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

274 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

278 
	#WINT_MIN
 (0u)

	)

279 
	#WINT_MAX
 (4294967295u)

	)

282 
	#INT8_C
(
c
Ë
	)
c

283 
	#INT16_C
(
c
Ë
	)
c

284 
	#INT32_C
(
c
Ë
	)
c

285 #i‡
__WORDSIZE
 == 64

286 
	#INT64_C
(
c
Ë¯## 
L


	)

288 
	#INT64_C
(
c
Ë¯## 
LL


	)

292 
	#UINT8_C
(
c
Ë
	)
c

293 
	#UINT16_C
(
c
Ë
	)
c

294 
	#UINT32_C
(
c
Ë¯## 
U


	)

295 #i‡
__WORDSIZE
 == 64

296 
	#UINT64_C
(
c
Ë¯## 
UL


	)

298 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

302 #i‡
__WORDSIZE
 == 64

303 
	#INTMAX_C
(
c
Ë¯## 
L


	)

304 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

306 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

307 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/stdio.h

23 #i‚de‡
_STDIO_H


25 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


26 
	#_STDIO_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	~<bôs/ty≥s.h
>

36 
	#__√ed_FILE


	)

37 
	#__√ed___FILE


	)

41 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


44 
	g_IO_FILE
;

46 
__BEGIN_NAMESPACE_STD


48 
_IO_FILE
 
	tFILE
;

49 
	g__END_NAMESPACE_STD


50 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_POSIX
 \

51 || 
deföed
 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

52 || 
deföed
 
__USE_POSIX2


53 
	$__USING_NAMESPACE_STD
(
FILE
)

56 
	#__FILE_deföed
 1

	)

58 #unde‡
__√ed_FILE


61 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


64 
_IO_FILE
 
	t__FILE
;

66 
	#____FILE_deföed
 1

	)

68 #unde‡
__√ed___FILE


71 #ifdef 
_STDIO_H


72 
	#_STDIO_USES_IOSTREAM


	)

74 
	~<libio.h
>

76 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


77 #ifde‡
__GNUC__


78 #i‚de‡
_VA_LIST_DEFINED


79 
_G_va_li°
 
	tva_li°
;

80 
	#_VA_LIST_DEFINED


	)

83 
	~<°d¨g.h
>

87 #ifde‡
__USE_XOPEN2K8


88 #i‚de‡
__off_t_deföed


89 #i‚de‡
__USE_FILE_OFFSET64


90 
__off_t
 
	toff_t
;

92 
__off64_t
 
	toff_t
;

94 
	#__off_t_deföed


	)

96 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


97 
__off64_t
 
	toff64_t
;

98 
	#__off64_t_deföed


	)

101 #i‚de‡
__ssize_t_deföed


102 
__ssize_t
 
	tssize_t
;

103 
	#__ssize_t_deföed


	)

108 
__BEGIN_NAMESPACE_STD


109 #i‚de‡
__USE_FILE_OFFSET64


110 
_G_Âos_t
 
	tÂos_t
;

112 
_G_Âos64_t
 
	tÂos_t
;

114 
__END_NAMESPACE_STD


115 #ifde‡
__USE_LARGEFILE64


116 
_G_Âos64_t
 
	tÂos64_t
;

120 
	#_IOFBF
 0

	)

121 
	#_IOLBF
 1

	)

122 
	#_IONBF
 2

	)

126 #i‚de‡
BUFSIZ


127 
	#BUFSIZ
 
_IO_BUFSIZ


	)

133 #i‚de‡
EOF


134 
	#EOF
 (-1)

	)

140 
	#SEEK_SET
 0

	)

141 
	#SEEK_CUR
 1

	)

142 
	#SEEK_END
 2

	)

143 #ifde‡
__USE_GNU


144 
	#SEEK_DATA
 3

	)

145 
	#SEEK_HOLE
 4

	)

149 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


151 
	#P_tmpdú
 "/tmp"

	)

164 
	~<bôs/°dio_lim.h
>

168 
_IO_FILE
 *
°dö
;

169 
_IO_FILE
 *
°dout
;

170 
_IO_FILE
 *
°dîr
;

172 
	#°dö
 
°dö


	)

173 
	#°dout
 
°dout


	)

174 
	#°dîr
 
°dîr


	)

176 
__BEGIN_NAMESPACE_STD


178 
	$ªmove
 (c⁄° *
__fûíame
Ë
__THROW
;

180 
	$ª«me
 (c⁄° *
__ﬁd
, c⁄° *
__√w
Ë
__THROW
;

181 
__END_NAMESPACE_STD


183 #ifde‡
__USE_ATFILE


185 
	$ª«mót
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

186 c⁄° *
__√w
Ë
__THROW
;

189 
__BEGIN_NAMESPACE_STD


194 #i‚de‡
__USE_FILE_OFFSET64


195 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

197 #ifde‡
__REDIRECT


198 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

200 
	#tmpfûe
 
tmpfûe64


	)

204 #ifde‡
__USE_LARGEFILE64


205 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

209 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

210 
__END_NAMESPACE_STD


212 #ifde‡
__USE_MISC


215 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

219 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


227 *
	$ãm≤am
 (c⁄° *
__dú
, c⁄° *
__pfx
)

228 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

232 
__BEGIN_NAMESPACE_STD


237 
	`f˛o£
 (
FILE
 *
__°ªam
);

242 
	`fÊush
 (
FILE
 *
__°ªam
);

243 
__END_NAMESPACE_STD


245 #ifde‡
__USE_MISC


252 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

255 #ifde‡
__USE_GNU


262 
	`f˛o£Æl
 ();

266 
__BEGIN_NAMESPACE_STD


267 #i‚de‡
__USE_FILE_OFFSET64


272 
FILE
 *
	$f›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

273 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

278 
FILE
 *
	$‰e›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

279 c⁄° *
__ª°ri˘
 
__modes
,

280 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

282 #ifde‡
__REDIRECT


283 
FILE
 *
	`__REDIRECT
 (
f›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

284 c⁄° *
__ª°ri˘
 
__modes
), 
f›í64
)

285 
__wur
;

286 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

287 c⁄° *
__ª°ri˘
 
__modes
,

288 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

289 
__wur
;

291 
	#f›í
 
f›í64


	)

292 
	#‰e›í
 
‰e›í64


	)

295 
__END_NAMESPACE_STD


296 #ifde‡
__USE_LARGEFILE64


297 
FILE
 *
	$f›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

298 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

299 
FILE
 *
	$‰e›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

300 c⁄° *
__ª°ri˘
 
__modes
,

301 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

304 #ifdef 
__USE_POSIX


306 
FILE
 *
	$fd›í
 (
__fd
, c⁄° *
__modes
Ë
__THROW
 
__wur
;

309 #ifdef 
__USE_GNU


312 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

313 c⁄° *
__ª°ri˘
 
__modes
,

314 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

317 #ifde‡
__USE_XOPEN2K8


319 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, c⁄° *
__modes
)

320 
__THROW
 
__wur
;

325 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

329 
__BEGIN_NAMESPACE_STD


332 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

336 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

337 
__modes
, 
size_t
 
__n
Ë
__THROW
;

338 
__END_NAMESPACE_STD


340 #ifdef 
__USE_MISC


343 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

344 
size_t
 
__size
Ë
__THROW
;

347 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

351 
__BEGIN_NAMESPACE_STD


356 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

357 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

362 
	`¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

364 
	$•rötf
 (*
__ª°ri˘
 
__s
,

365 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROWNL
;

371 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

372 
_G_va_li°
 
__¨g
);

377 
	`v¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

379 
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

380 
_G_va_li°
 
__¨g
Ë
__THROWNL
;

381 
__END_NAMESPACE_STD


383 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


384 
__BEGIN_NAMESPACE_C99


386 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

387 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

388 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

390 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

391 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

392 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

393 
__END_NAMESPACE_C99


396 #ifde‡
__USE_GNU


399 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__f
,

400 
_G_va_li°
 
__¨g
)

401 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

402 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

403 c⁄° *
__ª°ri˘
 
__fmt
, ...)

404 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

405 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

406 c⁄° *
__ª°ri˘
 
__fmt
, ...)

407 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

410 #ifde‡
__USE_XOPEN2K8


412 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
,

413 
_G_va_li°
 
__¨g
)

414 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

415 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

416 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

420 
__BEGIN_NAMESPACE_STD


425 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

426 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

431 
	$sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

433 
	$ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

434 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

436 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

437 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

438 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

439 #ifde‡
__REDIRECT


443 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

444 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

445 
__isoc99_fsˇnf
Ë
__wur
;

446 
	`__REDIRECT
 (
sˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

447 
__isoc99_sˇnf
Ë
__wur
;

448 
	`__REDIRECT_NTH
 (
ssˇnf
, (c⁄° *
__ª°ri˘
 
__s
,

449 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

450 
__isoc99_ssˇnf
);

452 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

453 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

454 
	$__isoc99_sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

455 
	$__isoc99_ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

456 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

457 
	#fsˇnf
 
__isoc99_fsˇnf


	)

458 
	#sˇnf
 
__isoc99_sˇnf


	)

459 
	#ssˇnf
 
__isoc99_ssˇnf


	)

463 
__END_NAMESPACE_STD


465 #ifdef 
__USE_ISOC99


466 
__BEGIN_NAMESPACE_C99


471 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

472 
_G_va_li°
 
__¨g
)

473 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

479 
	$vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

480 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

483 
	$vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

484 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

485 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

487 #i‡!
deföed
 
__USE_GNU
 \

488 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

489 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

490 #ifde‡
__REDIRECT


494 
	`__REDIRECT
 (
vfsˇnf
,

495 (
FILE
 *
__ª°ri˘
 
__s
,

496 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

497 
__isoc99_vfsˇnf
)

498 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

499 
	`__REDIRECT
 (
vsˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
,

500 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

501 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

502 
	`__REDIRECT_NTH
 (
vssˇnf
,

503 (c⁄° *
__ª°ri˘
 
__s
,

504 c⁄° *
__ª°ri˘
 
__f‹m©
,

505 
_G_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

506 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

508 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

509 c⁄° *
__ª°ri˘
 
__f‹m©
,

510 
_G_va_li°
 
__¨g
Ë
__wur
;

511 
	$__isoc99_vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
,

512 
_G_va_li°
 
__¨g
Ë
__wur
;

513 
	$__isoc99_vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

514 c⁄° *
__ª°ri˘
 
__f‹m©
,

515 
_G_va_li°
 
__¨g
Ë
__THROW
;

516 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

517 
	#vsˇnf
 
__isoc99_vsˇnf


	)

518 
	#vssˇnf
 
__isoc99_vssˇnf


	)

522 
__END_NAMESPACE_C99


526 
__BEGIN_NAMESPACE_STD


531 
	`fgëc
 (
FILE
 *
__°ªam
);

532 
	`gëc
 (
FILE
 *
__°ªam
);

538 
	`gëch¨
 ();

539 
__END_NAMESPACE_STD


543 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

545 #ifde‡
__USE_POSIX


550 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

551 
	`gëch¨_u∆ocked
 ();

554 #ifde‡
__USE_MISC


561 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

565 
__BEGIN_NAMESPACE_STD


573 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

574 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

580 
	`putch¨
 (
__c
);

581 
__END_NAMESPACE_STD


585 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

587 #ifde‡
__USE_MISC


594 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

597 #ifde‡
__USE_POSIX


602 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

603 
	`putch¨_u∆ocked
 (
__c
);

607 #i‡
deföed
 
__USE_MISC
 \

608 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

610 
	`gëw
 (
FILE
 *
__°ªam
);

613 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

617 
__BEGIN_NAMESPACE_STD


622 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

623 
__wur
;

625 #i‡!
deföed
 
__USE_ISOC11
 \

626 || (
deföed
 
__˝lu•lus
 && __cplusplus <= 201103L)

638 *
	$gës
 (*
__s
Ë
__wur
 
__©åibuã_dïªˇãd__
;

640 
__END_NAMESPACE_STD


642 #ifde‡
__USE_GNU


649 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

650 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

654 #ifdef 
__USE_XOPEN2K8


665 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

666 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

667 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

668 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

669 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

670 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

678 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

679 
size_t
 *
__ª°ri˘
 
__n
,

680 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

684 
__BEGIN_NAMESPACE_STD


689 
	`Âuts
 (c⁄° *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

695 
	`puts
 (c⁄° *
__s
);

702 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

709 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

710 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

715 
size_t
 
	`fwrôe
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

716 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

717 
__END_NAMESPACE_STD


719 #ifde‡
__USE_GNU


726 
	`Âuts_u∆ocked
 (c⁄° *
__ª°ri˘
 
__s
,

727 
FILE
 *
__ª°ri˘
 
__°ªam
);

730 #ifde‡
__USE_MISC


737 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

738 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

739 
size_t
 
	`fwrôe_u∆ocked
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

740 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

744 
__BEGIN_NAMESPACE_STD


749 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

754 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

759 
	`ªwöd
 (
FILE
 *
__°ªam
);

760 
__END_NAMESPACE_STD


767 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


768 #i‚de‡
__USE_FILE_OFFSET64


773 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

778 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

780 #ifde‡
__REDIRECT


781 
	`__REDIRECT
 (
f£eko
,

782 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

783 
f£eko64
);

784 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

786 
	#f£eko
 
f£eko64


	)

787 
	#·ñlo
 
·ñlo64


	)

792 
__BEGIN_NAMESPACE_STD


793 #i‚de‡
__USE_FILE_OFFSET64


798 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

803 
	`f£ços
 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
);

805 #ifde‡
__REDIRECT


806 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

807 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

808 
	`__REDIRECT
 (
f£ços
,

809 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
), 
f£ços64
);

811 
	#fgëpos
 
fgëpos64


	)

812 
	#f£ços
 
f£ços64


	)

815 
__END_NAMESPACE_STD


817 #ifde‡
__USE_LARGEFILE64


818 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

819 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

820 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

821 
	`f£ços64
 (
FILE
 *
__°ªam
, c⁄° 
Âos64_t
 *
__pos
);

824 
__BEGIN_NAMESPACE_STD


826 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

828 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

830 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

831 
__END_NAMESPACE_STD


833 #ifde‡
__USE_MISC


835 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

836 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

837 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

841 
__BEGIN_NAMESPACE_STD


846 
	`≥º‹
 (c⁄° *
__s
);

847 
__END_NAMESPACE_STD


853 
	~<bôs/sys_îæi°.h
>

856 #ifdef 
__USE_POSIX


858 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

861 #ifde‡
__USE_MISC


863 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

867 #ifde‡
__USE_POSIX2


872 
FILE
 *
	$p›í
 (c⁄° *
__comm™d
, c⁄° *
__modes
Ë
__wur
;

878 
	`p˛o£
 (
FILE
 *
__°ªam
);

882 #ifdef 
__USE_POSIX


884 *
	$˘îmid
 (*
__s
Ë
__THROW
;

888 #ifde‡
__USE_XOPEN


890 *
	`cu£rid
 (*
__s
);

894 #ifdef 
__USE_GNU


895 
ob°ack
;

898 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

899 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

900 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

901 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

902 c⁄° *
__ª°ri˘
 
__f‹m©
,

903 
_G_va_li°
 
__¨gs
)

904 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

908 #ifde‡
__USE_POSIX


912 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

916 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

919 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

922 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


926 
	#__√ed_gë›t


	)

927 
	~<gë›t.h
>

932 #ifde‡
__USE_EXTERN_INLINES


933 
	~<bôs/°dio.h
>

935 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


936 
	~<bôs/°dio2.h
>

938 #ifde‡
__LDBL_COMPAT


939 
	~<bôs/°dio-ldbl.h
>

942 
__END_DECLS


	@/usr/include/stdlib.h

22 #i‚def 
_STDLIB_H


24 
	~<„©uªs.h
>

27 
	#__√ed_size_t


	)

28 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


29 
	#__√ed_wch¨_t


	)

30 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

34 
	g__BEGIN_DECLS


36 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


37 
	#_STDLIB_H
 1

	)

39 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


41 
	~<bôs/waôÊags.h
>

42 
	~<bôs/waô°©us.h
>

44 #ifde‡
__USE_MISC


49 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


50 
	#__WAIT_INT
(
°©us
) \

51 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

52 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

54 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

62 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


63 
	#__WAIT_STATUS
 *

	)

64 
	#__WAIT_STATUS_DEFN
 *

	)

69 
waô
 *
	m__u±r
;

70 *
	m__ùå
;

71 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

72 
	#__WAIT_STATUS_DEFN
 *

	)

77 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

78 
	#__WAIT_STATUS
 *

	)

79 
	#__WAIT_STATUS_DEFN
 *

	)

84 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

85 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

88 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

89 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

90 #ifde‡
__WIFCONTINUED


91 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

95 
__BEGIN_NAMESPACE_STD


99 
	mquŸ
;

100 
	mªm
;

101 } 
	tdiv_t
;

104 #i‚de‡
__ldiv_t_deföed


107 
	mquŸ
;

108 
	mªm
;

109 } 
	tldiv_t
;

110 
	#__ldiv_t_deföed
 1

	)

112 
	g__END_NAMESPACE_STD


114 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


115 
__BEGIN_NAMESPACE_C99


117 
__exãnsi⁄__
 struct

119 
	mquŸ
;

120 
	mªm
;

121 } 
	tŒdiv_t
;

122 
	#__Œdiv_t_deföed
 1

	)

123 
	g__END_NAMESPACE_C99


128 
	#RAND_MAX
 2147483647

	)

133 
	#EXIT_FAILURE
 1

	)

134 
	#EXIT_SUCCESS
 0

	)

138 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

139 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

142 
__BEGIN_NAMESPACE_STD


144 
	$©of
 (c⁄° *
__≈å
)

145 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

147 
	$©oi
 (c⁄° *
__≈å
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

150 
	$©ﬁ
 (c⁄° *
__≈å
)

151 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

152 
__END_NAMESPACE_STD


154 #ifde‡
__USE_ISOC99


155 
__BEGIN_NAMESPACE_C99


157 
__exãnsi⁄__
 
	$©ﬁl
 (c⁄° *
__≈å
)

158 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

159 
__END_NAMESPACE_C99


162 
__BEGIN_NAMESPACE_STD


164 
	$°πod
 (c⁄° *
__ª°ri˘
 
__≈å
,

165 **
__ª°ri˘
 
__íd±r
)

166 
__THROW
 
	`__n⁄nuŒ
 ((1));

167 
__END_NAMESPACE_STD


169 #ifdef 
__USE_ISOC99


170 
__BEGIN_NAMESPACE_C99


172 
	$°πof
 (c⁄° *
__ª°ri˘
 
__≈å
,

173 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

175 
	$°πﬁd
 (c⁄° *
__ª°ri˘
 
__≈å
,

176 **
__ª°ri˘
 
__íd±r
)

177 
__THROW
 
	`__n⁄nuŒ
 ((1));

178 
__END_NAMESPACE_C99


181 
__BEGIN_NAMESPACE_STD


183 
	$°πﬁ
 (c⁄° *
__ª°ri˘
 
__≈å
,

184 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

185 
__THROW
 
	`__n⁄nuŒ
 ((1));

187 
	$°πoul
 (c⁄° *
__ª°ri˘
 
__≈å
,

188 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

189 
__THROW
 
	`__n⁄nuŒ
 ((1));

190 
__END_NAMESPACE_STD


192 #ifde‡
__USE_MISC


194 
__exãnsi⁄__


195 
	$°πoq
 (c⁄° *
__ª°ri˘
 
__≈å
,

196 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

197 
__THROW
 
	`__n⁄nuŒ
 ((1));

199 
__exãnsi⁄__


200 
	$°πouq
 (c⁄° *
__ª°ri˘
 
__≈å
,

201 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

202 
__THROW
 
	`__n⁄nuŒ
 ((1));

205 #ifde‡
__USE_ISOC99


206 
__BEGIN_NAMESPACE_C99


208 
__exãnsi⁄__


209 
	$°πﬁl
 (c⁄° *
__ª°ri˘
 
__≈å
,

210 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

211 
__THROW
 
	`__n⁄nuŒ
 ((1));

213 
__exãnsi⁄__


214 
	$°πouŒ
 (c⁄° *
__ª°ri˘
 
__≈å
,

215 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

216 
__THROW
 
	`__n⁄nuŒ
 ((1));

217 
__END_NAMESPACE_C99


221 #ifde‡
__USE_GNU


235 
	~<xloˇÀ.h
>

239 
	$°πﬁ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

240 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

241 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

243 
	$°πoul_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

244 **
__ª°ri˘
 
__íd±r
,

245 
__ba£
, 
__loˇÀ_t
 
__loc
)

246 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

248 
__exãnsi⁄__


249 
	$°πﬁl_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

250 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

251 
__loˇÀ_t
 
__loc
)

252 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

254 
__exãnsi⁄__


255 
	$°πouŒ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

256 **
__ª°ri˘
 
__íd±r
,

257 
__ba£
, 
__loˇÀ_t
 
__loc
)

258 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

260 
	$°πod_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

261 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

262 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

264 
	$°πof_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

265 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

266 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

268 
	$°πﬁd_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

269 **
__ª°ri˘
 
__íd±r
,

270 
__loˇÀ_t
 
__loc
)

271 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

275 #ifde‡
__USE_EXTERN_INLINES


276 
__BEGIN_NAMESPACE_STD


277 
__exã∫_ölöe
 

278 
	`__NTH
 (
	$©oi
 (c⁄° *
__≈å
))

280  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

281 
	}
}

282 
__exã∫_ölöe
 

283 
__NTH
 (
	$©ﬁ
 (c⁄° *
__≈å
))

285  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

286 
	}
}

287 
	g__END_NAMESPACE_STD


289 #ifde‡
__USE_ISOC99


290 
__BEGIN_NAMESPACE_C99


291 
__exãnsi⁄__
 
__exã∫_ölöe
 

292 
__NTH
 (
	$©ﬁl
 (c⁄° *
__≈å
))

294  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

295 
	}
}

296 
	g__END_NAMESPACE_C99


301 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


305 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

308 
	$a64l
 (c⁄° *
__s
)

309 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

313 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


314 
	~<sys/ty≥s.h
>

321 
	$øndom
 (Ë
__THROW
;

324 
	$§™dom
 (
__£ed
Ë
__THROW
;

330 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

331 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

335 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

338 #ifde‡
__USE_MISC


343 
	søndom_d©a


345 
öt32_t
 *
Âå
;

346 
öt32_t
 *
Ωå
;

347 
öt32_t
 *
°©e
;

348 
ønd_ty≥
;

349 
ønd_deg
;

350 
ønd_£p
;

351 
öt32_t
 *
íd_±r
;

354 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

355 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

357 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

358 
__THROW
 
	`__n⁄nuŒ
 ((2));

360 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

361 
size_t
 
__°©ñí
,

362 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

363 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

365 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

366 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

367 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

372 
__BEGIN_NAMESPACE_STD


374 
	$ønd
 (Ë
__THROW
;

376 
	$§™d
 (
__£ed
Ë
__THROW
;

377 
__END_NAMESPACE_STD


379 #ifde‡
__USE_POSIX


381 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

385 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


389 
	$dønd48
 (Ë
__THROW
;

390 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

393 
	$Ã™d48
 (Ë
__THROW
;

394 
	$ƒ™d48
 (
__xsubi
[3])

395 
__THROW
 
	`__n⁄nuŒ
 ((1));

398 
	$mønd48
 (Ë
__THROW
;

399 
	$jønd48
 (
__xsubi
[3])

400 
__THROW
 
	`__n⁄nuŒ
 ((1));

403 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

404 *
	$£ed48
 (
__£ed16v
[3])

405 
__THROW
 
	`__n⁄nuŒ
 ((1));

406 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

408 #ifde‡
__USE_MISC


412 
	sdønd48_d©a


414 
__x
[3];

415 
__ﬁd_x
[3];

416 
__c
;

417 
__öô
;

418 
__exãnsi⁄__
 
__a
;

423 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

424 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

425 
	$î™d48_r
 (
__xsubi
[3],

426 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

427 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

430 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

431 *
__ª°ri˘
 
__ªsu…
)

432 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

433 
	$ƒ™d48_r
 (
__xsubi
[3],

434 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

435 *
__ª°ri˘
 
__ªsu…
)

436 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

439 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

440 *
__ª°ri˘
 
__ªsu…
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

442 
	$jønd48_r
 (
__xsubi
[3],

443 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

444 *
__ª°ri˘
 
__ªsu…
)

445 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

448 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

449 
__THROW
 
	`__n⁄nuŒ
 ((2));

451 
	$£ed48_r
 (
__£ed16v
[3],

452 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

454 
	$lc⁄g48_r
 (
__∑øm
[7],

455 
dønd48_d©a
 *
__buf„r
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

462 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


463 
	#__mÆloc_™d_ˇŒoc_deföed


	)

464 
__BEGIN_NAMESPACE_STD


466 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

468 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

469 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

470 
__END_NAMESPACE_STD


473 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


474 
__BEGIN_NAMESPACE_STD


480 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

481 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

483 
	$‰ì
 (*
__±r
Ë
__THROW
;

484 
__END_NAMESPACE_STD


486 #ifdef 
__USE_MISC


488 
	$c‰ì
 (*
__±r
Ë
__THROW
;

491 #ifde‡
__USE_MISC


492 
	~<Æloˇ.h
>

495 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

496 || 
deföed
 
__USE_MISC


498 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

501 #ifde‡
__USE_XOPEN2K


503 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

504 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

507 #ifde‡
__USE_ISOC11


509 *
	$Æig√d_Æloc
 (
size_t
 
__Æignmít
, size_à
__size
)

510 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_size__
 ((2)Ë
__wur
;

513 
__BEGIN_NAMESPACE_STD


515 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

519 
	$©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

521 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


523 #ifde‡
__˝lu•lus


524 "C++" 
	$©_quick_exô
 ((*
__func
) ())

525 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

527 
	$©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

530 
__END_NAMESPACE_STD


532 #ifdef 
__USE_MISC


535 
	$⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

536 
__THROW
 
	`__n⁄nuŒ
 ((1));

539 
__BEGIN_NAMESPACE_STD


543 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

545 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


549 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

551 
__END_NAMESPACE_STD


553 #ifde‡
__USE_ISOC99


554 
__BEGIN_NAMESPACE_C99


557 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

558 
__END_NAMESPACE_C99


562 
__BEGIN_NAMESPACE_STD


564 *
	$gëív
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

565 
__END_NAMESPACE_STD


567 #ifde‡
__USE_GNU


570 *
	$£cuª_gëív
 (c⁄° *
__«me
)

571 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

574 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


578 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

581 #ifde‡
__USE_XOPEN2K


584 
	$£ãnv
 (c⁄° *
__«me
, c⁄° *
__vÆue
, 
__ª∂a˚
)

585 
__THROW
 
	`__n⁄nuŒ
 ((2));

588 
	$un£ãnv
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

591 #ifdef 
__USE_MISC


595 
	$˛óªnv
 (Ë
__THROW
;

599 #i‡
deföed
 
__USE_MISC
 \

600 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
)

606 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

609 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


618 #i‚de‡
__USE_FILE_OFFSET64


619 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

621 #ifde‡
__REDIRECT


622 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

623 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

625 
	#mk°emp
 
mk°emp64


	)

628 #ifde‡
__USE_LARGEFILE64


629 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

633 #ifde‡
__USE_MISC


640 #i‚de‡
__USE_FILE_OFFSET64


641 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

643 #ifde‡
__REDIRECT


644 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

645 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

647 
	#mk°emps
 
mk°emps64


	)

650 #ifde‡
__USE_LARGEFILE64


651 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

652 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

656 #ifde‡
__USE_XOPEN2K8


662 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

665 #ifde‡
__USE_GNU


672 #i‚de‡
__USE_FILE_OFFSET64


673 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

675 #ifde‡
__REDIRECT


676 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

677 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

679 
	#mko°emp
 
mko°emp64


	)

682 #ifde‡
__USE_LARGEFILE64


683 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

692 #i‚de‡
__USE_FILE_OFFSET64


693 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

694 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

696 #ifde‡
__REDIRECT


697 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

698 
__Êags
), 
mko°emps64
)

699 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

701 
	#mko°emps
 
mko°emps64


	)

704 #ifde‡
__USE_LARGEFILE64


705 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

706 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

711 
__BEGIN_NAMESPACE_STD


716 
	$sy°em
 (c⁄° *
__comm™d
Ë
__wur
;

717 
__END_NAMESPACE_STD


720 #ifdef 
__USE_GNU


723 *
	$ˇn⁄iˇlize_fûe_«me
 (c⁄° *
__«me
)

724 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

727 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


733 *
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
,

734 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

739 #i‚de‡
__COMPAR_FN_T


740 
	#__COMPAR_FN_T


	)

741 (*
	t__com∑r_‚_t
) (const *, const *);

743 #ifdef 
__USE_GNU


744 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

747 #ifde‡
__USE_GNU


748 (*
	t__com∑r_d_‚_t
) (const *, const *, *);

751 
__BEGIN_NAMESPACE_STD


754 *
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
,

755 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

756 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

758 #ifde‡
__USE_EXTERN_INLINES


759 
	~<bôs/°dlib-b£¨ch.h
>

764 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

765 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

766 #ifde‡
__USE_GNU


767 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

768 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

769 
	`__n⁄nuŒ
 ((1, 4));

774 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

775 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

776 
__END_NAMESPACE_STD


778 #ifde‡
__USE_ISOC99


779 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

780 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

784 
__BEGIN_NAMESPACE_STD


788 
div_t
 
	$div
 (
__numî
, 
__díom
)

789 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

790 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

791 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

792 
__END_NAMESPACE_STD


794 #ifde‡
__USE_ISOC99


795 
__BEGIN_NAMESPACE_C99


796 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

797 
__díom
)

798 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

799 
__END_NAMESPACE_C99


803 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

804 || 
deföed
 
__USE_MISC


811 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

812 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

817 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

818 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

823 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

824 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

827 #ifde‡
__USE_MISC


829 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

830 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

831 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

832 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

833 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

834 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

835 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

836 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

841 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

842 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

843 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

844 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

845 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

846 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

848 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

849 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

850 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

851 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

852 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

853 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

854 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

855 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

859 
__BEGIN_NAMESPACE_STD


862 
	$mbÀn
 (c⁄° *
__s
, 
size_t
 
__n
Ë
__THROW
;

865 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

866 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

869 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
;

873 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

874 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

876 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

877 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

878 
__THROW
;

879 
__END_NAMESPACE_STD


882 #ifde‡
__USE_MISC


887 
	$Ωm©ch
 (c⁄° *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

891 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


898 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

899 *c⁄° *
__ª°ri˘
 
__tokís
,

900 **
__ª°ri˘
 
__vÆuï
)

901 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

905 #ifde‡
__USE_XOPEN


907 
	$£tkey
 (c⁄° *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

913 #ifde‡
__USE_XOPEN2KXSI


915 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

918 #ifde‡
__USE_XOPEN


923 
	$gø¡±
 (
__fd
Ë
__THROW
;

927 
	$u∆ock±
 (
__fd
Ë
__THROW
;

932 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

935 #ifde‡
__USE_GNU


939 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

940 
__THROW
 
	`__n⁄nuŒ
 ((2));

943 
	`gë±
 ();

946 #ifde‡
__USE_MISC


950 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

951 
__THROW
 
	`__n⁄nuŒ
 ((1));

954 
	~<bôs/°dlib-Êﬂt.h
>

957 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


958 
	~<bôs/°dlib.h
>

960 #ifde‡
__LDBL_COMPAT


961 
	~<bôs/°dlib-ldbl.h
>

965 #unde‡
__√ed_mÆloc_™d_ˇŒoc


967 
__END_DECLS


	@/usr/include/string.h

22 #i‚def 
_STRING_H


23 
	#_STRING_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


30 
	#__√ed_size_t


	)

31 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

35 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

36 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

40 
__BEGIN_NAMESPACE_STD


42 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

43 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

46 *
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

47 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

48 
__END_NAMESPACE_STD


53 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


54 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

55 
__c
, 
size_t
 
__n
)

56 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

60 
__BEGIN_NAMESPACE_STD


62 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

65 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

66 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

69 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


72 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

73 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

74 c⁄° *
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

75 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

77 #ifde‡
__OPTIMIZE__


78 
__exã∫_Æways_ölöe
 *

79 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


81  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

84 
__exã∫_Æways_ölöe
 const *

85 
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


87  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

90 
	}
}

92 *
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

93 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

95 
__END_NAMESPACE_STD


97 #ifde‡
__USE_GNU


100 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


101 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

102 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

103 "C++" c⁄° *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

104 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

106 *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

107 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

111 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


112 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

113 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

114 "C++" c⁄° *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

115 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

117 *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

118 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

123 
__BEGIN_NAMESPACE_STD


125 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

126 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

128 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

129 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

130 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

133 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

134 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

136 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

137 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

140 
	$°rcmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

141 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

143 
	$°∫cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

144 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

147 
	$°rcﬁl
 (c⁄° *
__s1
, c⁄° *
__s2
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

150 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

151 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

152 
__THROW
 
	`__n⁄nuŒ
 ((2));

153 
__END_NAMESPACE_STD


155 #ifde‡
__USE_XOPEN2K8


159 
	~<xloˇÀ.h
>

162 
	$°rcﬁl_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

163 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

165 
size_t
 
	$°rx‰m_l
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

166 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

169 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


171 *
	$°rdup
 (c⁄° *
__s
)

172 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

178 #i‡
deföed
 
__USE_XOPEN2K8


179 *
	$°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

180 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

183 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


185 
	#°rdu∑
(
s
) \

186 (
__exãnsi⁄__
 \

188 c⁄° *
__ﬁd
 = (
s
); \

189 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

190 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

191 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

192 
	}
}))

	)

195 
	#°∫du∑
(
s
, 
n
) \

196 (
__exãnsi⁄__
 \

198 c⁄° *
__ﬁd
 = (
s
); \

199 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

200 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

201 
__√w
[
__Àn
] = '\0'; \

202 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

203 }))

	)

206 
	g__BEGIN_NAMESPACE_STD


208 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


211 *
°rchr
 (*
__s
, 
__c
)

212 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

213 c⁄° *
°rchr
 (c⁄° *
__s
, 
__c
)

214 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

216 #ifde‡
__OPTIMIZE__


217 
__exã∫_Æways_ölöe
 *

218 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


220  
__buûtö_°rchr
 (
__s
, 
__c
);

223 
__exã∫_Æways_ölöe
 const *

224 
°rchr
 (c⁄° *
__s
, 
__c
Ë
	g__THROW


226  
__buûtö_°rchr
 (
__s
, 
__c
);

231 *
	$°rchr
 (c⁄° *
__s
, 
__c
)

232 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

235 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


238 *
	`°ºchr
 (*
__s
, 
__c
)

239 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

240 c⁄° *
	`°ºchr
 (c⁄° *
__s
, 
__c
)

241 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

243 #ifde‡
__OPTIMIZE__


244 
__exã∫_Æways_ölöe
 *

245 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


247  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

250 
__exã∫_Æways_ölöe
 const *

251 
	`°ºchr
 (c⁄° *
__s
, 
__c
Ë
__THROW


253  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

256 
	}
}

258 *
	$°ºchr
 (c⁄° *
__s
, 
__c
)

259 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

261 
__END_NAMESPACE_STD


263 #ifde‡
__USE_GNU


266 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


267 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

268 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

269 "C++" c⁄° *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

270 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

272 *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

273 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

277 
__BEGIN_NAMESPACE_STD


280 
size_t
 
	$°rc•n
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

281 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

284 
size_t
 
	$°r•n
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

285 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

287 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


290 *
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
)

291 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

292 c⁄° *
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

293 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

295 #ifde‡
__OPTIMIZE__


296 
__exã∫_Æways_ölöe
 *

297 
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
Ë
__THROW


299  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

302 
__exã∫_Æways_ölöe
 const *

303 
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
Ë
__THROW


305  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

308 
	}
}

310 *
	$°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

311 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

314 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


317 *
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

318 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

319 c⁄° *
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

320 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

322 #ifde‡
__OPTIMIZE__


323 
__exã∫_Æways_ölöe
 *

324 
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


326  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

329 
__exã∫_Æways_ölöe
 const *

330 
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


332  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

335 
	}
}

337 *
	$°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

338 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

343 *
	$°πok
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
)

344 
__THROW
 
	`__n⁄nuŒ
 ((2));

345 
__END_NAMESPACE_STD


349 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

350 c⁄° *
__ª°ri˘
 
__dñim
,

351 **
__ª°ri˘
 
__ßve_±r
)

352 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

353 #ifde‡
__USE_POSIX


354 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
,

355 **
__ª°ri˘
 
__ßve_±r
)

356 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

359 #ifde‡
__USE_GNU


361 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


362 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

363 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

364 "C++" c⁄° *
	$°rˇ£°r
 (c⁄° *
__hay°ack
,

365 c⁄° *
__√edÀ
)

366 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

368 *
	$°rˇ£°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

369 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

373 #ifde‡
__USE_GNU


377 *
	$memmem
 (c⁄° *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

378 c⁄° *
__√edÀ
, 
size_t
 
__√edÀÀn
)

379 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

383 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

384 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

385 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

386 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

387 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

388 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

392 
__BEGIN_NAMESPACE_STD


394 
size_t
 
	$°æí
 (c⁄° *
__s
)

395 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

396 
__END_NAMESPACE_STD


398 #ifdef 
__USE_XOPEN2K8


401 
size_t
 
	$°∫Àn
 (c⁄° *
__°rög
, 
size_t
 
__maxÀn
)

402 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

406 
__BEGIN_NAMESPACE_STD


408 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

409 
__END_NAMESPACE_STD


410 #ifde‡
__USE_XOPEN2K


418 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


421 #ifde‡
__REDIRECT_NTH


422 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

423 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

424 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

426 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

427 
__THROW
 
	`__n⁄nuŒ
 ((2));

428 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

433 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

434 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

438 #ifde‡
__USE_XOPEN2K8


440 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

446 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

448 #ifde‡
__USE_MISC


450 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
)

451 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

454 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

457 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

458 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

461 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


464 *
	`ödex
 (*
__s
, 
__c
)

465 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

466 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

467 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

469 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


470 
__exã∫_Æways_ölöe
 *

471 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


473  
	`__buûtö_ödex
 (
__s
, 
__c
);

476 
__exã∫_Æways_ölöe
 const *

477 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


479  
	`__buûtö_ödex
 (
__s
, 
__c
);

482 
	}
}

484 *
	$ödex
 (c⁄° *
__s
, 
__c
)

485 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

489 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


492 *
	`rödex
 (*
__s
, 
__c
)

493 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

494 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

495 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

497 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


498 
__exã∫_Æways_ölöe
 *

499 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


501  
	`__buûtö_rödex
 (
__s
, 
__c
);

504 
__exã∫_Æways_ölöe
 const *

505 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


507  
	`__buûtö_rödex
 (
__s
, 
__c
);

510 
	}
}

512 *
	$rödex
 (c⁄° *
__s
, 
__c
)

513 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

518 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

522 #ifdef 
__USE_GNU


523 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

524 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

525 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

529 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

530 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

533 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

534 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

537 #ifdef 
__USE_GNU


540 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

541 
__loˇÀ_t
 
__loc
)

542 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

544 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

545 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

546 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

549 #ifdef 
__USE_MISC


552 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

553 c⁄° *
__ª°ri˘
 
__dñim
)

554 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

557 #ifdef 
__USE_XOPEN2K8


559 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

562 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

563 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

564 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

565 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

569 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

570 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

571 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

572 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

573 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

574 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

577 #ifdef 
__USE_GNU


579 
	$°rvîscmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

580 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

583 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

586 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

588 #i‚de‡
ba£«me


593 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


594 "C++" *
	$ba£«me
 (*
__fûíame
)

595 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

596 "C++" c⁄° *
	$ba£«me
 (c⁄° *
__fûíame
)

597 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

599 *
	$ba£«me
 (c⁄° *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

605 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

606 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

607 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


627 
	~<bôs/°rög.h
>

630 
	~<bôs/°rög2.h
>

633 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


635 
	~<bôs/°rög3.h
>

639 #i‡
deföed
 
__USE_GNU
 && deföed 
__OPTIMIZE__
 \

640 && 
deföed
 
__exã∫_Æways_ölöe
 && 
	$__GNUC_PREREQ
 (3,2)

641 #i‡!
deföed
 
_FORCE_INLINES
 && !deföed 
_HAVE_STRING_ARCH_memp˝y


643 #unde‡
memp˝y


644 #unde‡
__memp˝y


645 
	#memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y_ölöe
 (de°, src,Ç)

	)

646 
	#__memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y_ölöe
 (de°, src,Ç)

	)

648 
__exã∫_Æways_ölöe
 *

649 
	$__memp˝y_ölöe
 (*
__ª°ri˘
 
__de°
,

650 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

652  (*Ë
	`mem˝y
 (
__de°
, 
__§c
, 
__n
) + __n;

653 
	}
}

658 
	g__END_DECLS


	@/usr/include/strings.h

18 #i‚def 
_STRINGS_H


19 
	#_STRINGS_H
 1

	)

24 #i‡!
deföed
 
_STRING_H
 || !deföed 
__USE_MISC


26 
	~<„©uªs.h
>

27 
	#__√ed_size_t


	)

28 
	~<°ddef.h
>

31 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

32 
	#__CORRECT_ISO_CPP_STRINGS_H_PROTO


	)

35 
	g__BEGIN_DECLS


37 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


39 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

40 
__THROW
 
__©åibuã_puª__
;

43 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
Ë
__THROW
;

46 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
;

49 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


52 *
	`ödex
 (*
__s
, 
__c
)

53 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

54 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

55 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

57 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRING_H_PROTO


58 
__exã∫_Æways_ölöe
 *

59 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


61  
	`__buûtö_ödex
 (
__s
, 
__c
);

64 
__exã∫_Æways_ölöe
 const *

65 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


67  
	`__buûtö_ödex
 (
__s
, 
__c
);

70 
	}
}

72 *
	$ödex
 (c⁄° *
__s
, 
__c
)

73 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

77 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


80 *
	`rödex
 (*
__s
, 
__c
)

81 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

82 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

83 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

85 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRING_H_PROTO


86 
__exã∫_Æways_ölöe
 *

87 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


89  
	`__buûtö_rödex
 (
__s
, 
__c
);

92 
__exã∫_Æways_ölöe
 const *

93 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


95  
	`__buûtö_rödex
 (
__s
, 
__c
);

98 
	}
}

100 *
	$rödex
 (c⁄° *
__s
, 
__c
)

101 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

105 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8
 || deföed 
__USE_XOPEN2K8XSI


108 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((const));

112 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

113 
__THROW
 
__©åibuã_puª__
;

116 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

117 
__THROW
 
__©åibuã_puª__
;

119 #ifdef 
__USE_XOPEN2K8


123 
	~<xloˇÀ.h
>

127 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
__loˇÀ_t
 
__loc
)

128 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

130 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

131 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

132 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

135 
__END_DECLS


	@/usr/include/termios.h

22 #i‚def 
_TERMIOS_H


23 
	#_TERMIOS_H
 1

	)

25 
	~<„©uªs.h
>

26 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


28 
	~<bôs/ty≥s.h
>

29 #i‚de‡
__pid_t_deföed


30 
__pid_t
 
	tpid_t
;

31 
	#__pid_t_deföed


	)

35 
	g__BEGIN_DECLS


39 
	~<bôs/ãrmios.h
>

41 #ifde‡
__USE_MISC


44 
	#CCEQ
(
vÆ
, 
c
Ë((cË=(vÆË&& (vÆË!
_POSIX_VDISABLE
)

	)

48 
•ìd_t
 
	$cfgëo•ìd
 (c⁄° 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

51 
•ìd_t
 
	$cfgëi•ìd
 (c⁄° 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

54 
	$cf£to•ìd
 (
ãrmios
 *
__ãrmios_p
, 
•ìd_t
 
__•ìd
Ë
__THROW
;

57 
	$cf£ti•ìd
 (
ãrmios
 *
__ãrmios_p
, 
•ìd_t
 
__•ìd
Ë
__THROW
;

59 #ifdef 
__USE_MISC


61 
	$cf£t•ìd
 (
ãrmios
 *
__ãrmios_p
, 
•ìd_t
 
__•ìd
Ë
__THROW
;

66 
	$tcgë©å
 (
__fd
, 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

70 
	$tc£èâr
 (
__fd
, 
__›ti⁄Æ_a˘i⁄s
,

71 c⁄° 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

74 #ifdef 
__USE_MISC


76 
	$cfmakîaw
 (
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

80 
	$tc£ndbªak
 (
__fd
, 
__duøti⁄
Ë
__THROW
;

86 
	`tcdøö
 (
__fd
);

90 
	$tcÊush
 (
__fd
, 
__queue_£À˘‹
Ë
__THROW
;

94 
	$tcÊow
 (
__fd
, 
__a˘i⁄
Ë
__THROW
;

97 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


99 
__pid_t
 
	$tcgësid
 (
__fd
Ë
__THROW
;

103 #ifde‡
__USE_MISC


104 
	~<sys/âydeÁu…s.h
>

107 
__END_DECLS


	@/usr/include/time.h

22 #i‚def 
_TIME_H


24 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

25 ! 
deföed
 
	g__√ed_time•ec
)

26 
	#_TIME_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


33 #ifdef 
_TIME_H


35 
	#__√ed_size_t


	)

36 
	#__√ed_NULL


	)

37 
	~<°ddef.h
>

41 
	~<bôs/time.h
>

44 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


45 #i‚de‡
CLK_TCK


46 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

52 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

53 
	#__˛ock_t_deföed
 1

	)

55 
	~<bôs/ty≥s.h
>

57 
__BEGIN_NAMESPACE_STD


59 
__˛ock_t
 
	t˛ock_t
;

60 
	g__END_NAMESPACE_STD


61 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX


62 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

66 #unde‡
__√ed_˛ock_t


68 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

69 
	#__time_t_deföed
 1

	)

71 
	~<bôs/ty≥s.h
>

73 
__BEGIN_NAMESPACE_STD


75 
__time_t
 
	ttime_t
;

76 
__END_NAMESPACE_STD


77 #ifde‡
__USE_POSIX


78 
	$__USING_NAMESPACE_STD
(
time_t
)

82 #unde‡
__√ed_time_t


84 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

85 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

86 
	#__˛ockid_t_deföed
 1

	)

88 
	~<bôs/ty≥s.h
>

91 
__˛ockid_t
 
	t˛ockid_t
;

94 #unde‡
__˛ockid_time_t


96 #i‡!
deföed
 
__timî_t_deföed
 && \

97 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

98 
	#__timî_t_deföed
 1

	)

100 
	~<bôs/ty≥s.h
>

103 
__timî_t
 
	ttimî_t
;

106 #unde‡
__√ed_timî_t


109 #i‡(!
deföed
 
__time•ec_deföed
 \

110 && ((
deföed
 
_TIME_H
 \

111 && (
deföed
 
__USE_POSIX199309
 \

112 || 
deföed
 
__USE_ISOC11
)) \

113 || 
deföed
 
__√ed_time•ec
))

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
__sysˇŒ_¶⁄g_t
 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_MISC


146 
tm_gmtoff
;

147 c⁄° *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 c⁄° *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 #ifde‡
__USE_ISOC11


182 
	#TIME_UTC
 1

	)

186 
__BEGIN_NAMESPACE_STD


189 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

192 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

195 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

196 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

199 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

205 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

206 c⁄° *
__ª°ri˘
 
__f‹m©
,

207 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

208 
__END_NAMESPACE_STD


210 #ifde‡
__USE_XOPEN


213 *
	$°Ωtime
 (c⁄° *
__ª°ri˘
 
__s
,

214 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

215 
__THROW
;

218 #ifde‡
__USE_XOPEN2K8


221 
	~<xloˇÀ.h
>

223 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

224 c⁄° *
__ª°ri˘
 
__f‹m©
,

225 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

229 #ifde‡
__USE_GNU


230 *
	$°Ωtime_l
 (c⁄° *
__ª°ri˘
 
__s
,

231 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

232 
__loˇÀ_t
 
__loc
Ë
__THROW
;

236 
__BEGIN_NAMESPACE_STD


239 
tm
 *
	$gmtime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

243 
tm
 *
	$loˇ…ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

244 
__END_NAMESPACE_STD


246 #ifde‡
__USE_POSIX


249 
tm
 *
	$gmtime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

250 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

254 
tm
 *
	$loˇ…ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

255 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

258 
__BEGIN_NAMESPACE_STD


261 *
	$as˘ime
 (c⁄° 
tm
 *
__ç
Ë
__THROW
;

264 *
	$˘ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

265 
__END_NAMESPACE_STD


267 #ifde‡
__USE_POSIX


272 *
	$as˘ime_r
 (c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

273 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
	$˘ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

277 *
__ª°ri˘
 
__buf
Ë
__THROW
;

282 *
__tz«me
[2];

283 
__daylight
;

284 
__timez⁄e
;

287 #ifdef 
__USE_POSIX


289 *
tz«me
[2];

293 
	$tz£t
 (Ë
__THROW
;

296 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


297 
daylight
;

298 
timez⁄e
;

301 #ifde‡
__USE_MISC


304 
	$°ime
 (c⁄° 
time_t
 *
__whí
Ë
__THROW
;

310 
	#__i¶óp
(
yór
) \

311 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

314 #ifde‡
__USE_MISC


319 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

322 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

325 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

329 #ifde‡
__USE_POSIX199309


334 
	`«no¶ìp
 (c⁄° 
time•ec
 *
__ªque°ed_time
,

335 
time•ec
 *
__ªmaöög
);

339 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

342 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

345 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, c⁄° 
time•ec
 *
__ç
)

346 
__THROW
;

348 #ifde‡
__USE_XOPEN2K


353 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

354 c⁄° 
time•ec
 *
__ªq
,

355 
time•ec
 *
__ªm
);

358 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

363 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

364 
sigevít
 *
__ª°ri˘
 
__evp
,

365 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

368 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

371 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

372 c⁄° 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

373 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

376 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

377 
__THROW
;

380 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

384 #ifde‡
__USE_ISOC11


386 
	$time•ec_gë
 (
time•ec
 *
__ts
, 
__ba£
)

387 
__THROW
 
	`__n⁄nuŒ
 ((1));

391 #ifde‡
__USE_XOPEN_EXTENDED


403 
gëd©e_îr
;

412 
tm
 *
	`gëd©e
 (c⁄° *
__°rög
);

415 #ifde‡
__USE_GNU


426 
	`gëd©e_r
 (c⁄° *
__ª°ri˘
 
__°rög
,

427 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

430 
__END_DECLS


	@/usr/include/unistd.h

22 #i‚def 
_UNISTD_H


23 
	#_UNISTD_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


32 #ifde‡
__USE_XOPEN2K8


34 
	#_POSIX_VERSION
 200809L

	)

35 #ñi‡
deföed
 
__USE_XOPEN2K


37 
	#_POSIX_VERSION
 200112L

	)

38 #ñi‡
deföed
 
__USE_POSIX199506


40 
	#_POSIX_VERSION
 199506L

	)

41 #ñi‡
deföed
 
__USE_POSIX199309


43 
	#_POSIX_VERSION
 199309L

	)

46 
	#_POSIX_VERSION
 199009L

	)

52 #ifde‡
__USE_XOPEN2K8


53 
	#__POSIX2_THIS_VERSION
 200809L

	)

55 #ñi‡
deföed
 
__USE_XOPEN2K


57 
	#__POSIX2_THIS_VERSION
 200112L

	)

58 #ñi‡
deföed
 
__USE_POSIX199506


60 
	#__POSIX2_THIS_VERSION
 199506L

	)

63 
	#__POSIX2_THIS_VERSION
 199209L

	)

67 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

70 
	#_POSIX2_C_VERSION
 
__POSIX2_THIS_VERSION


	)

74 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

78 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

82 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

86 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

89 #ifde‡
__USE_XOPEN2K8


90 
	#_XOPEN_VERSION
 700

	)

91 #ñi‡
deföed
 
__USE_XOPEN2K


92 
	#_XOPEN_VERSION
 600

	)

93 #ñi‡
deföed
 
__USE_UNIX98


94 
	#_XOPEN_VERSION
 500

	)

96 
	#_XOPEN_VERSION
 4

	)

100 
	#_XOPEN_XCU_VERSION
 4

	)

103 
	#_XOPEN_XPG2
 1

	)

104 
	#_XOPEN_XPG3
 1

	)

105 
	#_XOPEN_XPG4
 1

	)

108 
	#_XOPEN_UNIX
 1

	)

111 
	#_XOPEN_CRYPT
 1

	)

115 
	#_XOPEN_ENH_I18N
 1

	)

118 
	#_XOPEN_LEGACY
 1

	)

205 
	~<bôs/posix_›t.h
>

208 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


209 
	~<bôs/ívú⁄míts.h
>

213 
	#STDIN_FILENO
 0

	)

214 
	#STDOUT_FILENO
 1

	)

215 
	#STDERR_FILENO
 2

	)

220 
	~<bôs/ty≥s.h
>

222 #i‚def 
__ssize_t_deföed


223 
__ssize_t
 
	tssize_t
;

224 
	#__ssize_t_deföed


	)

227 
	#__√ed_size_t


	)

228 
	#__√ed_NULL


	)

229 
	~<°ddef.h
>

231 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


234 #i‚de‡
__gid_t_deföed


235 
__gid_t
 
	tgid_t
;

236 
	#__gid_t_deföed


	)

239 #i‚de‡
__uid_t_deföed


240 
__uid_t
 
	tuid_t
;

241 
	#__uid_t_deföed


	)

244 #i‚de‡
__off_t_deföed


245 #i‚de‡
__USE_FILE_OFFSET64


246 
__off_t
 
	toff_t
;

248 
__off64_t
 
	toff_t
;

250 
	#__off_t_deföed


	)

252 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


253 
__off64_t
 
	toff64_t
;

254 
	#__off64_t_deföed


	)

257 #i‚de‡
__u£c⁄ds_t_deföed


258 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

259 
	#__u£c⁄ds_t_deföed


	)

262 #i‚de‡
__pid_t_deföed


263 
__pid_t
 
	tpid_t
;

264 
	#__pid_t_deföed


	)

268 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


269 #i‚de‡
__öçå_t_deföed


270 
__öçå_t
 
	töçå_t
;

271 
	#__öçå_t_deföed


	)

275 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


276 #i‚de‡
__sockÀn_t_deföed


277 
__sockÀn_t
 
	tsockÀn_t
;

278 
	#__sockÀn_t_deföed


	)

284 
	#R_OK
 4

	)

285 
	#W_OK
 2

	)

286 
	#X_OK
 1

	)

287 
	#F_OK
 0

	)

290 
	$ac˚ss
 (c⁄° *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

292 #ifde‡
__USE_GNU


295 
	$euidac˚ss
 (c⁄° *
__«me
, 
__ty≥
)

296 
__THROW
 
	`__n⁄nuŒ
 ((1));

299 
	$óc˚ss
 (c⁄° *
__«me
, 
__ty≥
)

300 
__THROW
 
	`__n⁄nuŒ
 ((1));

303 #ifde‡
__USE_ATFILE


307 
	$Ác˚sßt
 (
__fd
, c⁄° *
__fûe
, 
__ty≥
, 
__Êag
)

308 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

313 #i‚def 
_STDIO_H


314 
	#SEEK_SET
 0

	)

315 
	#SEEK_CUR
 1

	)

316 
	#SEEK_END
 2

	)

317 #ifde‡
__USE_GNU


318 
	#SEEK_DATA
 3

	)

319 
	#SEEK_HOLE
 4

	)

323 #i‡
deföed
 
__USE_MISC
 && !deföed 
L_SET


325 
	#L_SET
 
SEEK_SET


	)

326 
	#L_INCR
 
SEEK_CUR


	)

327 
	#L_XTND
 
SEEK_END


	)

336 #i‚de‡
__USE_FILE_OFFSET64


337 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

339 #ifde‡
__REDIRECT_NTH


340 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

341 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

342 
l£ek64
);

344 
	#l£ek
 
l£ek64


	)

347 #ifde‡
__USE_LARGEFILE64


348 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

349 
__THROW
;

356 
	`˛o£
 (
__fd
);

363 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

369 
ssize_t
 
	$wrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
Ë
__wur
;

371 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


372 #i‚de‡
__USE_FILE_OFFSET64


379 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

380 
__off_t
 
__off£t
Ë
__wur
;

387 
ssize_t
 
	$pwrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

388 
__off_t
 
__off£t
Ë
__wur
;

390 #ifde‡
__REDIRECT


391 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

392 
__off64_t
 
__off£t
),

393 
¥ód64
Ë
__wur
;

394 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, c⁄° *
__buf
,

395 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

396 
pwrôe64
Ë
__wur
;

398 
	#¥ód
 
¥ód64


	)

399 
	#pwrôe
 
pwrôe64


	)

403 #ifde‡
__USE_LARGEFILE64


407 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

408 
__off64_t
 
__off£t
Ë
__wur
;

411 
ssize_t
 
	$pwrôe64
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

412 
__off64_t
 
__off£t
Ë
__wur
;

420 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

422 #ifde‡
__USE_GNU


425 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

435 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

447 
	`¶ìp
 (
__£c⁄ds
);

449 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

450 || 
deföed
 
__USE_MISC


455 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

456 
__THROW
;

463 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

472 
	`∑u£
 ();

476 
	$chown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

477 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

479 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


481 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

486 
	$lchown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

487 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

491 #ifde‡
__USE_ATFILE


494 
	$fchow«t
 (
__fd
, c⁄° *
__fûe
, 
__uid_t
 
__ow√r
,

495 
__gid_t
 
__group
, 
__Êag
)

496 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

500 
	$chdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

502 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


504 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

514 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

516 #ifdef 
__USE_GNU


520 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

523 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

524 || 
deföed
 
__USE_MISC


528 *
	$gëwd
 (*
__buf
)

529 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

534 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

537 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

539 #ifde‡
__USE_GNU


542 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

546 **
__ívú⁄
;

547 #ifde‡
__USE_GNU


548 **
ívú⁄
;

554 
	$execve
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[],

555 *c⁄° 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

557 #ifde‡
__USE_XOPEN2K8


560 
	$„xecve
 (
__fd
, *c⁄° 
__¨gv
[], *c⁄° 
__ívp
[])

561 
__THROW
 
	`__n⁄nuŒ
 ((2));

566 
	$execv
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[])

567 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

571 
	$exe˛e
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

572 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

576 
	$exe˛
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

577 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

581 
	$execvp
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[])

582 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

587 
	$exe˛p
 (c⁄° *
__fûe
, c⁄° *
__¨g
, ...)

588 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

590 #ifde‡
__USE_GNU


593 
	$execv≥
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[],

594 *c⁄° 
__ívp
[])

595 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

599 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


601 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

606 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

612 
	~<bôs/c⁄‚ame.h
>

615 
	$∑thc⁄f
 (c⁄° *
__∑th
, 
__«me
)

616 
__THROW
 
	`__n⁄nuŒ
 ((1));

619 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

622 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

624 #ifdef 
__USE_POSIX2


626 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

631 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

634 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

637 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

640 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

641 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


642 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

649 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

651 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


663 
	$£çgΩ
 (Ë
__THROW
;

670 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

672 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


674 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

678 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

681 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

684 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

687 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

692 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

694 #ifdef 
__USE_GNU


696 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

703 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

705 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


708 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
 
__wur
;

711 #ifde‡
__USE_XOPEN2K


713 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

720 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

722 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


725 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
 
__wur
;

728 #ifde‡
__USE_XOPEN2K


730 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

733 #ifde‡
__USE_GNU


736 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

737 
__THROW
;

741 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

742 
__THROW
;

746 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

747 
__THROW
 
__wur
;

751 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

752 
__THROW
 
__wur
;

759 
__pid_t
 
	$f‹k
 (Ë
__THROWNL
;

761 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

762 || 
deföed
 
__USE_MISC


767 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

773 *
	$ây«me
 (
__fd
Ë
__THROW
;

777 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

778 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

782 
	$ißây
 (
__fd
Ë
__THROW
;

784 #i‡
deföed
 
__USE_MISC
 \

785 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_UNIX98
)

788 
	$ây¶Ÿ
 (Ë
__THROW
;

793 
	$lök
 (c⁄° *
__‰om
, c⁄° *
__to
)

794 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

796 #ifde‡
__USE_ATFILE


799 
	$lök©
 (
__‰omfd
, c⁄° *
__‰om
, 
__tofd
,

800 c⁄° *
__to
, 
__Êags
)

801 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

804 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


806 
	$symlök
 (c⁄° *
__‰om
, c⁄° *
__to
)

807 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

812 
ssize_t
 
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
,

813 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

814 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

817 #ifde‡
__USE_ATFILE


819 
	$symlök©
 (c⁄° *
__‰om
, 
__tofd
,

820 c⁄° *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

823 
ssize_t
 
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

824 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

825 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

829 
	$u∆ök
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

831 #ifde‡
__USE_ATFILE


833 
	$u∆ök©
 (
__fd
, c⁄° *
__«me
, 
__Êag
)

834 
__THROW
 
	`__n⁄nuŒ
 ((2));

838 
	$rmdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

842 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

845 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

852 *
	`gëlogö
 ();

853 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


860 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

863 #ifdef 
__USE_MISC


865 
	$£éogö
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

869 #ifdef 
__USE_POSIX2


873 
	#__√ed_gë›t


	)

874 
	~<gë›t.h
>

878 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


882 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

886 #i‡
deföed
 
__USE_MISC


889 
	$£tho°«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

890 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

894 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

900 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

901 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

902 
	$£tdomaö«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

903 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

909 
	$vh™gup
 (Ë
__THROW
;

912 
	$ªvoke
 (c⁄° *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

920 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

921 
size_t
 
__off£t
, 
__sˇÀ
)

922 
__THROW
 
	`__n⁄nuŒ
 ((1));

928 
	$ac˘
 (c⁄° *
__«me
Ë
__THROW
;

932 *
	$gëu£rshñl
 (Ë
__THROW
;

933 
	$ídu£rshñl
 (Ë
__THROW
;

934 
	$£tu£rshñl
 (Ë
__THROW
;

940 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

944 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

947 
	$chroŸ
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

951 *
	$gë∑ss
 (c⁄° *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

959 
	`fsync
 (
__fd
);

962 #ifde‡
__USE_GNU


965 
	$syncfs
 (
__fd
Ë
__THROW
;

969 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


972 
	`gëho°id
 ();

975 
	$sync
 (Ë
__THROW
;

978 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K


981 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

986 
	$gëdèbÀsize
 (Ë
__THROW
;

992 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


995 #i‚de‡
__USE_FILE_OFFSET64


996 
	$åunˇã
 (c⁄° *
__fûe
, 
__off_t
 
__Àngth
)

997 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

999 #ifde‡
__REDIRECT_NTH


1000 
	`__REDIRECT_NTH
 (
åunˇã
,

1001 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
),

1002 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1004 
	#åunˇã
 
åunˇã64


	)

1007 #ifde‡
__USE_LARGEFILE64


1008 
	$åunˇã64
 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
)

1009 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1014 #i‡
deföed
 
__USE_POSIX199309
 \

1015 || 
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


1018 #i‚de‡
__USE_FILE_OFFSET64


1019 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1021 #ifde‡
__REDIRECT_NTH


1022 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1023 
·runˇã64
Ë
__wur
;

1025 
	#·runˇã
 
·runˇã64


	)

1028 #ifde‡
__USE_LARGEFILE64


1029 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1035 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1036 || 
deföed
 
__USE_MISC


1040 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1046 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1050 #ifde‡
__USE_MISC


1061 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1066 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1078 
	#F_ULOCK
 0

	)

1079 
	#F_LOCK
 1

	)

1080 
	#F_TLOCK
 2

	)

1081 
	#F_TEST
 3

	)

1083 #i‚de‡
__USE_FILE_OFFSET64


1084 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1086 #ifde‡
__REDIRECT


1087 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1088 
lockf64
Ë
__wur
;

1090 
	#lockf
 
lockf64


	)

1093 #ifde‡
__USE_LARGEFILE64


1094 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1099 #ifde‡
__USE_GNU


1104 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1105 (
__exãnsi⁄__
 \

1106 ({ 
__ªsu…
; \

1107 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1108 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1109 
__ªsu…
; 
	}
}))

	)

1112 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1115 
fd©async
 (
__fûdes
);

1121 #ifdef 
__USE_XOPEN


1123 *
	$¸y±
 (c⁄° *
__key
, c⁄° *
__ß…
)

1124 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1128 
	$í¸y±
 (*
__glibc_block
, 
__edÊag
)

1129 
__THROW
 
	`__n⁄nuŒ
 ((1));

1136 
	$swab
 (c⁄° *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1137 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1143 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K


1145 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1150 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


1151 
	~<bôs/uni°d.h
>

1154 
__END_DECLS


	@/usr/include/ustat.h

1 
	~<sys/u°©.h
>

	@/usr/include/alloca.h

18 #i‚def 
_ALLOCA_H


19 
	#_ALLOCA_H
 1

	)

21 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

26 
	g__BEGIN_DECLS


29 #unde‡
Æloˇ


32 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

34 #ifdef 
__GNUC__


35 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

38 
__END_DECLS


	@/usr/include/endian.h

18 #i‚def 
_ENDIAN_H


19 
	#_ENDIAN_H
 1

	)

21 
	~<„©uªs.h
>

31 
	#__LITTLE_ENDIAN
 1234

	)

32 
	#__BIG_ENDIAN
 4321

	)

33 
	#__PDP_ENDIAN
 3412

	)

36 
	~<bôs/ídün.h
>

40 #i‚de‡
__FLOAT_WORD_ORDER


41 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

44 #ifdef 
__USE_MISC


45 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

46 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

47 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

48 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

51 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


52 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

53 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


54 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

58 #i‡
deföed
 
__USE_MISC
 && !deföed 
__ASSEMBLER__


60 
	~<bôs/byãsw≠.h
>

62 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


63 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

64 
	#htﬁe16
(
x
Ë(x)

	)

65 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

66 
	#À16toh
(
x
Ë(x)

	)

68 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

69 
	#htﬁe32
(
x
Ë(x)

	)

70 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

71 
	#À32toh
(
x
Ë(x)

	)

73 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

74 
	#htﬁe64
(
x
Ë(x)

	)

75 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

76 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

97 #unde‡
__USE_ISOC11


98 #unde‡
__USE_ISOC99


99 #unde‡
__USE_ISOC95


100 #unde‡
__USE_ISOCXX11


101 #unde‡
__USE_POSIX


102 #unde‡
__USE_POSIX2


103 #unde‡
__USE_POSIX199309


104 #unde‡
__USE_POSIX199506


105 #unde‡
__USE_XOPEN


106 #unde‡
__USE_XOPEN_EXTENDED


107 #unde‡
__USE_UNIX98


108 #unde‡
__USE_XOPEN2K


109 #unde‡
__USE_XOPEN2KXSI


110 #unde‡
__USE_XOPEN2K8


111 #unde‡
__USE_XOPEN2K8XSI


112 #unde‡
__USE_LARGEFILE


113 #unde‡
__USE_LARGEFILE64


114 #unde‡
__USE_FILE_OFFSET64


115 #unde‡
__USE_MISC


116 #unde‡
__USE_ATFILE


117 #unde‡
__USE_GNU


118 #unde‡
__USE_REENTRANT


119 #unde‡
__USE_FORTIFY_LEVEL


120 #unde‡
__KERNEL_STRICT_NAMES


124 #i‚de‡
_LOOSE_KERNEL_NAMES


125 
	#__KERNEL_STRICT_NAMES


	)

135 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


136 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

137 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

139 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

146 #i‡(
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE
) \

147 && !
deföed
 
	g_DEFAULT_SOURCE


152 #unde‡
_DEFAULT_SOURCE


153 
	#_DEFAULT_SOURCE
 1

	)

157 #ifde‡
_GNU_SOURCE


158 #unde‡
_ISOC95_SOURCE


159 
	#_ISOC95_SOURCE
 1

	)

160 #unde‡
_ISOC99_SOURCE


161 
	#_ISOC99_SOURCE
 1

	)

162 #unde‡
_ISOC11_SOURCE


163 
	#_ISOC11_SOURCE
 1

	)

164 #unde‡
_POSIX_SOURCE


165 
	#_POSIX_SOURCE
 1

	)

166 #unde‡
_POSIX_C_SOURCE


167 
	#_POSIX_C_SOURCE
 200809L

	)

168 #unde‡
_XOPEN_SOURCE


169 
	#_XOPEN_SOURCE
 700

	)

170 #unde‡
_XOPEN_SOURCE_EXTENDED


171 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

172 #unde‡
_LARGEFILE64_SOURCE


173 
	#_LARGEFILE64_SOURCE
 1

	)

174 #unde‡
_DEFAULT_SOURCE


175 
	#_DEFAULT_SOURCE
 1

	)

176 #unde‡
_ATFILE_SOURCE


177 
	#_ATFILE_SOURCE
 1

	)

182 #i‡(
deföed
 
_DEFAULT_SOURCE
 \

183 || (!
deföed
 
	g__STRICT_ANSI__
 \

184 && !
deföed
 
	g_ISOC99_SOURCE
 \

185 && !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 \

186 && !
deföed
 
	g_XOPEN_SOURCE
))

187 #unde‡
_DEFAULT_SOURCE


188 
	#_DEFAULT_SOURCE
 1

	)

192 #i‡(
deföed
 
_ISOC11_SOURCE
 \

193 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

194 
	#__USE_ISOC11
 1

	)

198 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

199 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

200 
	#__USE_ISOC99
 1

	)

204 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

205 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

206 
	#__USE_ISOC95
 1

	)

213 #i‡((
deföed
 
__˝lu•lus
 && __cplusplus >= 201103L) \

214 || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__
)

215 
	#__USE_ISOCXX11
 1

	)

221 #ifde‡
_DEFAULT_SOURCE


222 #i‡!
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE


223 
	#__USE_POSIX_IMPLICITLY
 1

	)

225 #unde‡
_POSIX_SOURCE


226 
	#_POSIX_SOURCE
 1

	)

227 #unde‡
_POSIX_C_SOURCE


228 
	#_POSIX_C_SOURCE
 200809L

	)

230 #i‡((!
deföed
 
__STRICT_ANSI__
 \

231 || (
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) >= 500)) \

232 && !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

233 
	#_POSIX_SOURCE
 1

	)

234 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

235 
	#_POSIX_C_SOURCE
 2

	)

236 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

237 
	#_POSIX_C_SOURCE
 199506L

	)

238 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

239 
	#_POSIX_C_SOURCE
 200112L

	)

241 
	#_POSIX_C_SOURCE
 200809L

	)

243 
	#__USE_POSIX_IMPLICITLY
 1

	)

246 #i‡(
deföed
 
_POSIX_SOURCE
 \

247 || (
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >= 1) \

248 || 
deföed
 
_XOPEN_SOURCE
)

249 
	#__USE_POSIX
 1

	)

252 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


253 
	#__USE_POSIX2
 1

	)

256 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199309L

257 
	#__USE_POSIX199309
 1

	)

260 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199506L

261 
	#__USE_POSIX199506
 1

	)

264 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200112L

265 
	#__USE_XOPEN2K
 1

	)

266 #unde‡
__USE_ISOC95


267 
	#__USE_ISOC95
 1

	)

268 #unde‡
__USE_ISOC99


269 
	#__USE_ISOC99
 1

	)

272 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200809L

273 
	#__USE_XOPEN2K8
 1

	)

274 #unde‡
_ATFILE_SOURCE


275 
	#_ATFILE_SOURCE
 1

	)

278 #ifdef 
_XOPEN_SOURCE


279 
	#__USE_XOPEN
 1

	)

280 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

281 
	#__USE_XOPEN_EXTENDED
 1

	)

282 
	#__USE_UNIX98
 1

	)

283 #unde‡
_LARGEFILE_SOURCE


284 
	#_LARGEFILE_SOURCE
 1

	)

285 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

286 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

287 
	#__USE_XOPEN2K8
 1

	)

288 
	#__USE_XOPEN2K8XSI
 1

	)

290 
	#__USE_XOPEN2K
 1

	)

291 
	#__USE_XOPEN2KXSI
 1

	)

292 #unde‡
__USE_ISOC95


293 
	#__USE_ISOC95
 1

	)

294 #unde‡
__USE_ISOC99


295 
	#__USE_ISOC99
 1

	)

298 #ifde‡
_XOPEN_SOURCE_EXTENDED


299 
	#__USE_XOPEN_EXTENDED
 1

	)

304 #ifde‡
_LARGEFILE_SOURCE


305 
	#__USE_LARGEFILE
 1

	)

308 #ifde‡
_LARGEFILE64_SOURCE


309 
	#__USE_LARGEFILE64
 1

	)

312 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

313 
	#__USE_FILE_OFFSET64
 1

	)

316 #i‡
deföed
 
_DEFAULT_SOURCE


317 
	#__USE_MISC
 1

	)

320 #ifdef 
_ATFILE_SOURCE


321 
	#__USE_ATFILE
 1

	)

324 #ifdef 
_GNU_SOURCE


325 
	#__USE_GNU
 1

	)

328 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


329 
	#__USE_REENTRANT
 1

	)

332 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

333 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

334 #i‡
_FORTIFY_SOURCE
 > 1

335 
	#__USE_FORTIFY_LEVEL
 2

	)

337 
	#__USE_FORTIFY_LEVEL
 1

	)

340 
	#__USE_FORTIFY_LEVEL
 0

	)

345 
	~<°dc-¥edef.h
>

353 #unde‡
__GNU_LIBRARY__


354 
	#__GNU_LIBRARY__
 6

	)

358 
	#__GLIBC__
 2

	)

359 
	#__GLIBC_MINOR__
 23

	)

361 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

362 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

365 #i‚de‡
__ASSEMBLER__


366 #i‚de‡
_SYS_CDEFS_H


367 
	~<sys/cdefs.h
>

372 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


373 
	#__USE_LARGEFILE
 1

	)

374 
	#__USE_LARGEFILE64
 1

	)

380 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

381 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

382 && 
deföed
 
	g__exã∫_ölöe


383 
	#__USE_EXTERN_INLINES
 1

	)

391 
	~<gnu/°ubs.h
>

	@/usr/include/getopt.h

19 #i‚de‡
_GETOPT_H


21 #i‚de‡
__√ed_gë›t


22 
	#_GETOPT_H
 1

	)

32 #i‡!
deföed
 
__GNU_LIBRARY__


33 
	~<˘y≥.h
>

36 #i‚de‡
__THROW


37 #i‚de‡
__GNUC_PREREQ


38 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

40 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

41 
	#__THROW
 
	`throw
 ()

	)

43 
	#__THROW


	)

47 #ifdef 
__˝lu•lus


57 *
›èrg
;

71 
›töd
;

76 
›ãº
;

80 
›t›t
;

82 #i‚de‡
__√ed_gë›t


104 
	s›ti⁄


106 c⁄° *
	g«me
;

109 
	ghas_¨g
;

110 *
	gÊag
;

111 
	gvÆ
;

116 
	#no_¨gumít
 0

	)

117 
	#ªquúed_¨gumít
 1

	)

118 
	#›ti⁄Æ_¨gumít
 2

	)

146 #ifde‡
__GNU_LIBRARY__


150 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

151 
__THROW
;

153 #i‡
deföed
 
__√ed_gë›t
 && deföed 
__USE_POSIX2
 \

154 && !
deföed
 
	g__USE_POSIX_IMPLICITLY
 && !deföed 
	g__USE_GNU


158 #ifde‡
__REDIRECT


159 
__REDIRECT_NTH
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

160 c⁄° *
__sh‹t›ts
),

161 
__posix_gë›t
);

163 
__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

164 c⁄° *
__sh‹t›ts
Ë
__THROW
;

165 
	#gë›t
 
__posix_gë›t


	)

169 
gë›t
 ();

172 #i‚de‡
__√ed_gë›t


173 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

174 c⁄° *
__sh‹t›ts
,

175 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

176 
__THROW
;

177 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

178 c⁄° *
__sh‹t›ts
,

179 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

180 
__THROW
;

184 #ifdef 
__˝lu•lus


189 #unde‡
__√ed_gë›t


	@/usr/include/libio.h

28 #i‚de‡
_IO_STDIO_H


29 
	#_IO_STDIO_H


	)

31 
	~<_G_c⁄fig.h
>

33 
	#_IO_Âos_t
 
_G_Âos_t


	)

34 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

35 
	#_IO_size_t
 
size_t


	)

36 
	#_IO_ssize_t
 
__ssize_t


	)

37 
	#_IO_off_t
 
__off_t


	)

38 
	#_IO_off64_t
 
__off64_t


	)

39 
	#_IO_pid_t
 
__pid_t


	)

40 
	#_IO_uid_t
 
__uid_t


	)

41 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

42 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

43 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

44 
	#_IO_va_li°
 
_G_va_li°


	)

45 
	#_IO_wöt_t
 
wöt_t


	)

48 
	#__√ed___va_li°


	)

49 
	~<°d¨g.h
>

50 #ifde‡
__GNUC_VA_LIST


51 #unde‡
_IO_va_li°


52 
	#_IO_va_li°
 
__gnuc_va_li°


	)

55 #i‚de‡
__P


56 
	~<sys/cdefs.h
>

59 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

61 #i‚de‡
EOF


62 
	#EOF
 (-1)

	)

64 #i‚de‡
NULL


65 #i‡
deföed
 
__GNUG__
 && \

66 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

67 
	#NULL
 (
__nuŒ
)

	)

69 #i‡!
deföed
(
__˝lu•lus
)

70 
	#NULL
 ((*)0)

	)

72 
	#NULL
 (0)

	)

77 
	#_IOS_INPUT
 1

	)

78 
	#_IOS_OUTPUT
 2

	)

79 
	#_IOS_ATEND
 4

	)

80 
	#_IOS_APPEND
 8

	)

81 
	#_IOS_TRUNC
 16

	)

82 
	#_IOS_NOCREATE
 32

	)

83 
	#_IOS_NOREPLACE
 64

	)

84 
	#_IOS_BIN
 128

	)

92 
	#_IO_MAGIC
 0xFBAD0000

	)

93 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

94 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

95 
	#_IO_USER_BUF
 1

	)

96 
	#_IO_UNBUFFERED
 2

	)

97 
	#_IO_NO_READS
 4

	)

98 
	#_IO_NO_WRITES
 8

	)

99 
	#_IO_EOF_SEEN
 0x10

	)

100 
	#_IO_ERR_SEEN
 0x20

	)

101 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

102 
	#_IO_LINKED
 0x80

	)

103 
	#_IO_IN_BACKUP
 0x100

	)

104 
	#_IO_LINE_BUF
 0x200

	)

105 
	#_IO_TIED_PUT_GET
 0x400

	)

106 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

107 
	#_IO_IS_APPENDING
 0x1000

	)

108 
	#_IO_IS_FILEBUF
 0x2000

	)

109 
	#_IO_BAD_SEEN
 0x4000

	)

110 
	#_IO_USER_LOCK
 0x8000

	)

112 
	#_IO_FLAGS2_MMAP
 1

	)

113 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

114 #ifde‡
_LIBC


115 
	#_IO_FLAGS2_FORTIFY
 4

	)

117 
	#_IO_FLAGS2_USER_WBUF
 8

	)

118 #ifde‡
_LIBC


119 
	#_IO_FLAGS2_SCANF_STD
 16

	)

120 
	#_IO_FLAGS2_NOCLOSE
 32

	)

121 
	#_IO_FLAGS2_CLOEXEC
 64

	)

125 
	#_IO_SKIPWS
 01

	)

126 
	#_IO_LEFT
 02

	)

127 
	#_IO_RIGHT
 04

	)

128 
	#_IO_INTERNAL
 010

	)

129 
	#_IO_DEC
 020

	)

130 
	#_IO_OCT
 040

	)

131 
	#_IO_HEX
 0100

	)

132 
	#_IO_SHOWBASE
 0200

	)

133 
	#_IO_SHOWPOINT
 0400

	)

134 
	#_IO_UPPERCASE
 01000

	)

135 
	#_IO_SHOWPOS
 02000

	)

136 
	#_IO_SCIENTIFIC
 04000

	)

137 
	#_IO_FIXED
 010000

	)

138 
	#_IO_UNITBUF
 020000

	)

139 
	#_IO_STDIO
 040000

	)

140 
	#_IO_DONT_CLOSE
 0100000

	)

141 
	#_IO_BOOLALPHA
 0200000

	)

144 
_IO_jump_t
; 
	g_IO_FILE
;

147 #ifde‡
_IO_MTSAFE_IO


150 
	t_IO_lock_t
;

156 
	s_IO_m¨kî
 {

157 
_IO_m¨kî
 *
	m_√xt
;

158 
_IO_FILE
 *
	m_sbuf
;

162 
	m_pos
;

164 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

165 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

166 
	mpublic
:

167 
°ªamm¨kî
(
°ªambuf
 *
sb
);

168 ~
°ªamm¨kî
();

169 
ßvög
(Ë{  
	m_•os
 == -2; }

170 
dñè
(
°ªamm¨kî
&);

171 
dñè
();

176 
	e__codecvt_ªsu…


178 
	m__codecvt_ok
,

179 
	m__codecvt_∑πül
,

180 
	m__codecvt_îr‹
,

181 
	m__codecvt_noc⁄v


184 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


187 
	s_IO_codecvt


189 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

190 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

191 
	m__mb°©e_t
 *,

192 c⁄° 
	mwch¨_t
 *,

193 c⁄° 
	mwch¨_t
 *,

194 c⁄° 
	mwch¨_t
 **, *,

196 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

197 
	m__mb°©e_t
 *, *,

199 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

200 
	m__mb°©e_t
 *,

202 c⁄° **, 
	mwch¨_t
 *,

203 
	mwch¨_t
 *, wchar_t **);

204 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

205 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

206 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

207 c⁄° *, c⁄° *, 
	m_IO_size_t
);

208 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

210 
_IO_ic⁄v_t
 
	m__cd_ö
;

211 
_IO_ic⁄v_t
 
	m__cd_out
;

215 
	s_IO_wide_d©a


217 
wch¨_t
 *
	m_IO_ªad_±r
;

218 
wch¨_t
 *
	m_IO_ªad_íd
;

219 
wch¨_t
 *
	m_IO_ªad_ba£
;

220 
wch¨_t
 *
	m_IO_wrôe_ba£
;

221 
wch¨_t
 *
	m_IO_wrôe_±r
;

222 
wch¨_t
 *
	m_IO_wrôe_íd
;

223 
wch¨_t
 *
	m_IO_buf_ba£
;

224 
wch¨_t
 *
	m_IO_buf_íd
;

226 
wch¨_t
 *
	m_IO_ßve_ba£
;

227 
wch¨_t
 *
	m_IO_backup_ba£
;

229 
wch¨_t
 *
	m_IO_ßve_íd
;

231 
__mb°©e_t
 
	m_IO_°©e
;

232 
__mb°©e_t
 
	m_IO_œ°_°©e
;

233 
_IO_codecvt
 
	m_codecvt
;

235 
wch¨_t
 
	m_sh‹tbuf
[1];

237 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

241 
	s_IO_FILE
 {

242 
	m_Êags
;

243 
	#_IO_fûe_Êags
 
_Êags


	)

247 * 
	m_IO_ªad_±r
;

248 * 
	m_IO_ªad_íd
;

249 * 
	m_IO_ªad_ba£
;

250 * 
	m_IO_wrôe_ba£
;

251 * 
	m_IO_wrôe_±r
;

252 * 
	m_IO_wrôe_íd
;

253 * 
	m_IO_buf_ba£
;

254 * 
	m_IO_buf_íd
;

256 *
	m_IO_ßve_ba£
;

257 *
	m_IO_backup_ba£
;

258 *
	m_IO_ßve_íd
;

260 
_IO_m¨kî
 *
	m_m¨kîs
;

262 
_IO_FILE
 *
	m_chaö
;

264 
	m_fûío
;

266 
	m_blksize
;

268 
	m_Êags2
;

270 
_IO_off_t
 
	m_ﬁd_off£t
;

272 
	#__HAVE_COLUMN


	)

274 
	m_cur_cﬁumn
;

275 sig√d 
	m_vèbÀ_off£t
;

276 
	m_sh‹tbuf
[1];

280 
_IO_lock_t
 *
	m_lock
;

281 #ifde‡
_IO_USE_OLD_IO_FILE


284 
	s_IO_FILE_com∂ëe


286 
_IO_FILE
 
	m_fûe
;

288 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

289 
_IO_off64_t
 
	m_off£t
;

290 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


292 
_IO_codecvt
 *
	m_codecvt
;

293 
_IO_wide_d©a
 *
	m_wide_d©a
;

294 
_IO_FILE
 *
	m_‰ìªs_li°
;

295 *
	m_‰ìªs_buf
;

297 *
	m__∑d1
;

298 *
	m__∑d2
;

299 *
	m__∑d3
;

300 *
	m__∑d4
;

302 
size_t
 
	m__∑d5
;

303 
	m_mode
;

305 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

309 #i‚de‡
__˝lu•lus


310 
_IO_FILE
 
	t_IO_FILE
;

313 
	g_IO_FILE_∂us
;

315 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

316 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

317 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

318 #i‚de‡
_LIBC


319 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

320 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

321 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

323 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

324 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

325 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

333 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

341 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, c⁄° *
	t__buf
,

342 
	tsize_t
 
	t__n
);

350 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

353 
	t__io_˛o£_‚
 (*
	t__cookõ
);

356 #ifde‡
_GNU_SOURCE


358 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

359 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

360 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

361 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

366 
__io_ªad_‚
 *
	mªad
;

367 
__io_wrôe_‚
 *
	mwrôe
;

368 
__io_£ek_‚
 *
	m£ek
;

369 
__io_˛o£_‚
 *
	m˛o£
;

370 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

371 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

373 
	g_IO_cookõ_fûe
;

376 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

377 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

381 #ifde‡
__˝lu•lus


385 
__undîÊow
 (
_IO_FILE
 *);

386 
__uÊow
 (
_IO_FILE
 *);

387 
__ovîÊow
 (
_IO_FILE
 *, );

388 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


389 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

390 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

391 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

394 #i‡ 
__GNUC__
 >= 3

395 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

397 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

400 
	#_IO_gëc_u∆ocked
(
_Â
) \

401 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

402 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

403 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

404 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

405 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

406 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

407 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

408 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

409 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

410 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

412 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


413 
	#_IO_gëwc_u∆ocked
(
_Â
) \

414 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

415 || ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 \

416 >(
_Â
)->
_wide_d©a
->
_IO_ªad_íd
), 0) \

417 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

418 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

419 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

420 || ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

421 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
), 0) \

422 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

423 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

426 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

427 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

429 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

430 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

431 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

432 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

434 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

437 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

438 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

440 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

441 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

442 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

444 #ifde‡
_IO_MTSAFE_IO


445 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

446 
	#_IO_Êockfûe
(
_Â
) \

447 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

448 
	#_IO_fu∆ockfûe
(
_Â
) \

449 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

451 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

452 
	#_IO_Êockfûe
(
_Â
Ë

	)

453 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

454 
	#_IO_·rylockfûe
(
_Â
Ë

	)

455 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

456 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

459 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

460 
_IO_va_li°
, *
__ª°ri˘
);

461 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

462 
_IO_va_li°
);

463 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

464 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

466 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

467 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

469 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

471 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


472 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

473 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

474 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

475 #i‡
__GNUC__
 >= 2

478 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


479 
	~<shlib-com∑t.h
>

480 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

481 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

482 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

483 c⁄° 
_IO_°dö_u£d
;

484 
wók_exã∫
 (
_IO_°dö_u£d
);

487 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


488 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

492 
	#_IO_fwide
(
__Â
, 
__mode
) \

493 ({ 
__ªsu…
 = (
__mode
); \

494 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

496 i‡((
__Â
)->
_mode
 == 0) \

498 (
__Â
)->
_mode
 = -1; \

499 
__ªsu…
 = (
__Â
)->
_mode
; \

501 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

502 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

504 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

505 
__ªsu…
; })

	)

508 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

509 
_IO_va_li°
, *
__ª°ri˘
);

510 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

511 
_IO_va_li°
);

512 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

513 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

516 #ifde‡
__LDBL_COMPAT


517 
	~<bôs/libio-ldbl.h
>

520 #ifde‡
__˝lu•lus


	@/usr/include/rpc/netdb.h

36 #i‚de‡
_RPC_NETDB_H


37 
	#_RPC_NETDB_H
 1

	)

39 
	~<„©uªs.h
>

41 
	#__√ed_size_t


	)

42 
	~<°ddef.h
>

44 
__BEGIN_DECLS


46 
	sΩ˚¡


48 *
	mr_«me
;

49 **
	mr_Æü£s
;

50 
	mr_numbî
;

53 
	$£åp˚¡
 (
__°ay›í
Ë
__THROW
;

54 
	$ídΩ˚¡
 (Ë
__THROW
;

55 
Ω˚¡
 *
	$gëΩcby«me
 (c⁄° *
__«me
Ë
__THROW
;

56 
Ω˚¡
 *
	$gëΩcbynumbî
 (
__numbî
Ë
__THROW
;

57 
Ω˚¡
 *
	$gëΩ˚¡
 (Ë
__THROW
;

59 #ifde‡
__USE_MISC


60 
	$gëΩcby«me_r
 (c⁄° *
__«me
, 
Ω˚¡
 *
__ªsu…_buf
,

61 *
__buf„r
, 
size_t
 
__buÊí
,

62 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

64 
	$gëΩcbynumbî_r
 (
__numbî
, 
Ω˚¡
 *
__ªsu…_buf
,

65 *
__buf„r
, 
size_t
 
__buÊí
,

66 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

68 
	$gëΩ˚¡_r
 (
Ω˚¡
 *
__ªsu…_buf
, *
__buf„r
,

69 
size_t
 
__buÊí
, 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

72 
__END_DECLS


	@/usr/include/xlocale.h

20 #i‚de‡
_XLOCALE_H


21 
	#_XLOCALE_H
 1

	)

27 
	s__loˇÀ_°ru˘


30 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

33 c⁄° *
	m__˘y≥_b
;

34 c⁄° *
	m__˘y≥_tﬁowî
;

35 c⁄° *
	m__˘y≥_touµî
;

38 c⁄° *
	m__«mes
[13];

39 } *
	t__loˇÀ_t
;

42 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wöt_t


	)

20 
	~<wch¨.h
>

23 
__off_t
 
	m__pos
;

24 
__mb°©e_t
 
	m__°©e
;

25 } 
	t_G_Âos_t
;

28 
__off64_t
 
	m__pos
;

29 
__mb°©e_t
 
	m__°©e
;

30 } 
	t_G_Âos64_t
;

31 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


32 
	~<gc⁄v.h
>

35 
__gc⁄v_öfo
 
	m__cd
;

38 
__gc⁄v_öfo
 
	m__cd
;

39 
__gc⁄v_°ï_d©a
 
	m__d©a
;

40 } 
	m__comböed
;

41 } 
	t_G_ic⁄v_t
;

46 
	#_G_va_li°
 
__gnuc_va_li°


	)

48 
	#_G_HAVE_MMAP
 1

	)

49 
	#_G_HAVE_MREMAP
 1

	)

51 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

54 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

56 
	#_G_BUFSIZ
 8192

	)

	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

36 #ifde‡
__GCC_IEC_559


37 #i‡
__GCC_IEC_559
 > 0

38 
	#__STDC_IEC_559__
 1

	)

41 
	#__STDC_IEC_559__
 1

	)

44 #ifde‡
__GCC_IEC_559_COMPLEX


45 #i‡
__GCC_IEC_559_COMPLEX
 > 0

46 
	#__STDC_IEC_559_COMPLEX__
 1

	)

49 
	#__STDC_IEC_559_COMPLEX__
 1

	)

55 
	#__STDC_ISO_10646__
 201505L

	)

58 
	#__STDC_NO_THREADS__
 1

	)

	@/usr/include/gconv.h

22 #i‚de‡
_GCONV_H


23 
	#_GCONV_H
 1

	)

25 
	~<„©uªs.h
>

26 
	#__√ed_mb°©e_t


	)

27 
	#__√ed_wöt_t


	)

28 
	~<wch¨.h
>

29 
	#__√ed_size_t


	)

30 
	#__√ed_wch¨_t


	)

31 
	~<°ddef.h
>

34 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

39 
	m__GCONV_OK
 = 0,

40 
	m__GCONV_NOCONV
,

41 
	m__GCONV_NODB
,

42 
	m__GCONV_NOMEM
,

44 
	m__GCONV_EMPTY_INPUT
,

45 
	m__GCONV_FULL_OUTPUT
,

46 
	m__GCONV_ILLEGAL_INPUT
,

47 
	m__GCONV_INCOMPLETE_INPUT
,

49 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

50 
	m__GCONV_INTERNAL_ERROR


57 
	m__GCONV_IS_LAST
 = 0x0001,

58 
	m__GCONV_IGNORE_ERRORS
 = 0x0002,

59 
	m__GCONV_SWAP
 = 0x0004,

60 
	m__GCONV_TRANSLIT
 = 0x0008

65 
	g__gc⁄v_°ï
;

66 
	g__gc⁄v_°ï_d©a
;

67 
	g__gc⁄v_lﬂded_obje˘
;

71 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

73 **, 
	tsize_t
 *, , );

76 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

79 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

80 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

84 
	s__gc⁄v_°ï


86 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

87 c⁄° *
__mod«me
;

89 
__cou¡î
;

91 *
__‰om_«me
;

92 *
__to_«me
;

94 
__gc⁄v_f˘
 
__f˘
;

95 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

96 
__gc⁄v_öô_f˘
 
__öô_f˘
;

97 
__gc⁄v_íd_f˘
 
__íd_f˘
;

101 
__mö_√eded_‰om
;

102 
__max_√eded_‰om
;

103 
__mö_√eded_to
;

104 
__max_√eded_to
;

107 
__°©eful
;

109 *
__d©a
;

114 
	s__gc⁄v_°ï_d©a


116 *
__outbuf
;

117 *
__outbu„nd
;

121 
__Êags
;

125 
__övoˇti⁄_cou¡î
;

129 
__öã∫Æ_u£
;

131 
__mb°©e_t
 *
__°©ï
;

132 
__mb°©e_t
 
__°©e
;

138 
	s__gc⁄v_öfo


140 
size_t
 
__n°ïs
;

141 
__gc⁄v_°ï
 *
__°ïs
;

142 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
 
__Êex¨r
;

143 } *
	t__gc⁄v_t
;

146 
	`__gc⁄v_å™¶ôî©e
 (
__gc⁄v_°ï
 *
°ï
,

147 
__gc⁄v_°ï_d©a
 *
°ï_d©a
,

148 c⁄° *
öbuf°¨t
,

149 c⁄° **
öbuÂ
,

150 c⁄° *
öbu„nd
,

151 **
outbuf°¨t
,

152 
size_t
 *
úªvîsibÀ
);

	@/usr/include/wchar.h

23 #i‚de‡
_WCHAR_H


25 #i‡!
deföed
 
__√ed_mb°©e_t
 && !deföed 
__√ed_wöt_t


26 
	#_WCHAR_H
 1

	)

27 
	~<„©uªs.h
>

30 #ifde‡
_WCHAR_H


32 
	#__√ed___FILE


	)

33 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


34 
	#__√ed_FILE


	)

36 
	~<°dio.h
>

38 
	#__√ed___va_li°


	)

39 
	~<°d¨g.h
>

41 
	~<bôs/wch¨.h
>

44 
	#__√ed_size_t


	)

45 
	#__√ed_wch¨_t


	)

46 
	#__√ed_NULL


	)

48 #i‡
deföed
 
_WCHAR_H
 || deföed 
__√ed_wöt_t
 || !deföed 
__WINT_TYPE__


49 #unde‡
__√ed_wöt_t


50 
	#__√ed_wöt_t


	)

51 
	~<°ddef.h
>

55 #i‚de‡
_WINT_T


60 
	#_WINT_T


	)

61 
	twöt_t
;

65 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

66 && 
deföed
 
__WINT_TYPE__


67 
__BEGIN_NAMESPACE_STD


68 
__WINT_TYPE__
 
	twöt_t
;

69 
	g__END_NAMESPACE_STD


74 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

75 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

79 #i‡(
deföed
 
_WCHAR_H
 || deföed 
__√ed_mb°©e_t
Ë&& !deföed 
____mb°©e_t_deföed


80 
	#____mb°©e_t_deföed
 1

	)

84 
	m__cou¡
;

87 #ifde‡
__WINT_TYPE__


88 
__WINT_TYPE__
 
	m__wch
;

90 
wöt_t
 
	m__wch
;

92 
	m__wchb
[4];

93 } 
	m__vÆue
;

94 } 
	t__mb°©e_t
;

96 #unde‡
__√ed_mb°©e_t


101 #ifde‡
_WCHAR_H


103 #i‚de‡
__mb°©e_t_deföed


104 
__BEGIN_NAMESPACE_C99


106 
__mb°©e_t
 
	tmb°©e_t
;

107 
	g__END_NAMESPACE_C99


108 
	#__mb°©e_t_deföed
 1

	)

111 #ifde‡
__USE_GNU


112 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

115 #i‚de‡
WCHAR_MIN


117 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

118 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

121 #i‚de‡
WEOF


122 
	#WEOF
 (0xffffffffu)

	)

127 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


128 
	~<w˘y≥.h
>

132 
__BEGIN_DECLS


134 
__BEGIN_NAMESPACE_STD


137 
tm
;

138 
__END_NAMESPACE_STD


142 
	$__USING_NAMESPACE_STD
(
tm
)

145 
__BEGIN_NAMESPACE_STD


147 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
)

149 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

152 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

153 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

154 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

157 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

158 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
)

159 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

161 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

162 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

163 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

166 
	$wcscmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
)

167 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

169 
	$wc¢cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

170 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

171 
__END_NAMESPACE_STD


173 #ifde‡
__USE_XOPEN2K8


175 
	$wcsˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

178 
	$wc¢ˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

179 
size_t
 
__n
Ë
__THROW
;

183 
	~<xloˇÀ.h
>

185 
	$wcsˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

186 
__loˇÀ_t
 
__loc
Ë
__THROW
;

188 
	$wc¢ˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

189 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

192 
__BEGIN_NAMESPACE_STD


195 
	$wcscﬁl
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

199 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

200 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

201 
__END_NAMESPACE_STD


203 #ifde‡
__USE_XOPEN2K8


209 
	$wcscﬁl_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

210 
__loˇÀ_t
 
__loc
Ë
__THROW
;

215 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

216 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

219 
wch¨_t
 *
	$wcsdup
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

222 
__BEGIN_NAMESPACE_STD


224 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


225 "C++" 
wch¨_t
 *
	$wcschr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

226 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

227 "C++" c⁄° 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

228 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

230 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

231 
__THROW
 
__©åibuã_puª__
;

234 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


235 "C++" 
wch¨_t
 *
	$wc§chr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

236 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

237 "C++" c⁄° 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

238 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

240 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

241 
__THROW
 
__©åibuã_puª__
;

243 
__END_NAMESPACE_STD


245 #ifde‡
__USE_GNU


248 
wch¨_t
 *
	$wcsch∫ul
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__wc
)

249 
__THROW
 
__©åibuã_puª__
;

252 
__BEGIN_NAMESPACE_STD


255 
size_t
 
	$wcsc•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ªje˘
)

256 
__THROW
 
__©åibuã_puª__
;

259 
size_t
 
	$wcs•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

260 
__THROW
 
__©åibuã_puª__
;

262 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


263 "C++" 
wch¨_t
 *
	$wc•brk
 (
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

264 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

265 "C++" c⁄° 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
,

266 c⁄° 
wch¨_t
 *
__ac˚±
)

267 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

269 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

270 
__THROW
 
__©åibuã_puª__
;

273 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


274 "C++" 
wch¨_t
 *
	$wcs°r
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

275 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

276 "C++" c⁄° 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
,

277 c⁄° 
wch¨_t
 *
__√edÀ
)

278 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

280 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

281 
__THROW
 
__©åibuã_puª__
;

285 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

286 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

287 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

290 
size_t
 
	$wc¶í
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

291 
__END_NAMESPACE_STD


293 #ifde‡
__USE_XOPEN


295 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


296 "C++" 
wch¨_t
 *
	$wcswcs
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

297 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

298 "C++" c⁄° 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
,

299 c⁄° 
wch¨_t
 *
__√edÀ
)

300 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

302 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

303 
__THROW
 
__©åibuã_puª__
;

307 #ifde‡
__USE_XOPEN2K8


309 
size_t
 
	$wc¢Àn
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

310 
__THROW
 
__©åibuã_puª__
;

314 
__BEGIN_NAMESPACE_STD


316 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


317 "C++" 
wch¨_t
 *
	$wmemchr
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

318 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

319 "C++" c⁄° 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
,

320 
size_t
 
__n
)

321 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

323 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

324 
__THROW
 
__©åibuã_puª__
;

328 
	$wmemcmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

329 
__THROW
 
__©åibuã_puª__
;

332 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

333 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

337 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

338 
__THROW
;

341 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

342 
__END_NAMESPACE_STD


344 #ifde‡
__USE_GNU


347 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

348 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

349 
__THROW
;

353 
__BEGIN_NAMESPACE_STD


356 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

360 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

364 
	$mbsöô
 (c⁄° 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

368 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

369 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

370 
mb°©e_t
 *
__ª°ri˘
 
__p
Ë
__THROW
;

373 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

374 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

377 
size_t
 
	$__mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

378 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

379 
size_t
 
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

380 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

381 
__END_NAMESPACE_STD


383 #ifde‡
__USE_EXTERN_INLINES


389 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

390 
__exã∫_ölöe
 
wöt_t


391 
	`__NTH
 (
	$btowc
 (
__c
))

392 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

393 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

395 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

396 
__exã∫_ölöe
 

397 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

398 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

399 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

401 
__exã∫_ölöe
 
size_t


402 
__NTH
 (
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

403 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

404 {  (
__ps
 !
NULL


405 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

408 
__BEGIN_NAMESPACE_STD


411 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

412 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

413 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

417 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

418 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

419 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

420 
__END_NAMESPACE_STD


423 #ifdef 
__USE_XOPEN2K8


426 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

427 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

428 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

432 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

433 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

434 
size_t
 
__nwc
, size_à
__Àn
,

435 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

440 #ifde‡
__USE_XOPEN


442 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

446 
	$wcswidth
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

450 
__BEGIN_NAMESPACE_STD


453 
	$wc°od
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

454 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

455 
__END_NAMESPACE_STD


457 #ifde‡
__USE_ISOC99


458 
__BEGIN_NAMESPACE_C99


460 
	$wc°of
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

461 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

462 
	$wc°ﬁd
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

463 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

464 
__END_NAMESPACE_C99


468 
__BEGIN_NAMESPACE_STD


471 
	$wc°ﬁ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

472 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

476 
	$wc°oul
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

477 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

478 
__THROW
;

479 
__END_NAMESPACE_STD


481 #ifde‡
__USE_ISOC99


482 
__BEGIN_NAMESPACE_C99


485 
__exãnsi⁄__


486 
	$wc°ﬁl
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

487 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

488 
__THROW
;

492 
__exãnsi⁄__


493 
	$wc°ouŒ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

494 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

495 
__ba£
Ë
__THROW
;

496 
__END_NAMESPACE_C99


499 #ifde‡
__USE_GNU


502 
__exãnsi⁄__


503 
	$wc°oq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

504 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

505 
__THROW
;

509 
__exãnsi⁄__


510 
	$wc°ouq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

511 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

512 
__ba£
Ë
__THROW
;

515 #ifde‡
__USE_GNU


529 
	~<xloˇÀ.h
>

533 
	$wc°ﬁ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

534 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

535 
__loˇÀ_t
 
__loc
Ë
__THROW
;

537 
	$wc°oul_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

538 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

539 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

541 
__exãnsi⁄__


542 
	$wc°ﬁl_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

543 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

544 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

546 
__exãnsi⁄__


547 
	$wc°ouŒ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

548 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

549 
__ba£
, 
__loˇÀ_t
 
__loc
)

550 
__THROW
;

552 
	$wc°od_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

553 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

554 
__THROW
;

556 
	$wc°of_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

557 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

558 
__THROW
;

560 
	$wc°ﬁd_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

561 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

562 
__loˇÀ_t
 
__loc
Ë
__THROW
;

566 #ifde‡
__USE_XOPEN2K8


569 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

570 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

574 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

575 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

576 
__THROW
;

583 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

586 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


587 
__BEGIN_NAMESPACE_STD


590 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

597 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

598 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

604 
	`w¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

607 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

608 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

609 
__THROW
 ;

615 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

616 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

617 
__gnuc_va_li°
 
__¨g
)

623 
	`vw¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

624 
__gnuc_va_li°
 
__¨g
)

628 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

629 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

630 
__gnuc_va_li°
 
__¨g
)

631 
__THROW
 ;

638 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

639 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

645 
	`wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

648 
	$swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

649 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

650 
__THROW
 ;

652 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

653 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

654 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

655 #ifde‡
__REDIRECT


659 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

660 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

661 
__isoc99_fwsˇnf
)

663 
	`__REDIRECT
 (
wsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

664 
__isoc99_wsˇnf
)

666 
	`__REDIRECT_NTH
 (
swsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

667 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

668 ...), 
__isoc99_swsˇnf
)

671 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

672 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

673 
	`__isoc99_wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

674 
	$__isoc99_swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

675 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

676 
__THROW
;

677 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

678 
	#wsˇnf
 
__isoc99_wsˇnf


	)

679 
	#swsˇnf
 
__isoc99_swsˇnf


	)

683 
__END_NAMESPACE_STD


686 #ifde‡
__USE_ISOC99


687 
__BEGIN_NAMESPACE_C99


692 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

693 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

694 
__gnuc_va_li°
 
__¨g
)

700 
	`vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

701 
__gnuc_va_li°
 
__¨g
)

704 
	$vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

705 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

706 
__gnuc_va_li°
 
__¨g
)

707 
__THROW
 ;

709 #i‡!
deföed
 
__USE_GNU
 \

710 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

711 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

712 #ifde‡
__REDIRECT


713 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

714 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

715 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

717 
	`__REDIRECT
 (
vwsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

718 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

720 
	`__REDIRECT_NTH
 (
vswsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

721 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

722 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

725 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

726 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

727 
__gnuc_va_li°
 
__¨g
);

728 
	`__isoc99_vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

729 
__gnuc_va_li°
 
__¨g
);

730 
	$__isoc99_vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

731 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

732 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

733 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

734 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

735 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

739 
__END_NAMESPACE_C99


743 
__BEGIN_NAMESPACE_STD


748 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

749 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

755 
wöt_t
 
	`gëwch¨
 ();

762 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

763 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

769 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

777 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

778 
__FILE
 *
__ª°ri˘
 
__°ªam
);

784 
	`Âutws
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

785 
__FILE
 *
__ª°ri˘
 
__°ªam
);

792 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

793 
__END_NAMESPACE_STD


796 #ifde‡
__USE_GNU


804 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

805 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

813 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

821 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

830 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

831 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

840 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

841 
__FILE
 *
__ª°ri˘
 
__°ªam
);

849 
	`Âutws_u∆ocked
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

850 
__FILE
 *
__ª°ri˘
 
__°ªam
);

854 
__BEGIN_NAMESPACE_C99


858 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

859 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

860 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

861 
__END_NAMESPACE_C99


863 #ifde‡
__USE_GNU


864 
	~<xloˇÀ.h
>

868 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

869 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

870 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

871 
__loˇÀ_t
 
__loc
Ë
__THROW
;

880 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


881 
	#__√ed_iswxxx


	)

882 
	~<w˘y≥.h
>

886 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


887 
	~<bôs/wch¨2.h
>

890 #ifde‡
__LDBL_COMPAT


891 
	~<bôs/wch¨-ldbl.h
>

894 
__END_DECLS


902 #unde‡
__√ed_mb°©e_t


903 #unde‡
__√ed_wöt_t


	@/usr/include/wctype.h

23 #i‚de‡
_WCTYPE_H


25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 #i‚de‡
__√ed_iswxxx


29 
	#_WCTYPE_H
 1

	)

32 
	#__√ed_wöt_t


	)

33 
	~<wch¨.h
>

37 #i‚de‡
WEOF


38 
	#WEOF
 (0xffffffffu)

	)

41 #unde‡
__√ed_iswxxx


46 #i‚de‡
__iswxxx_deföed


47 
	#__iswxxx_deföed
 1

	)

49 
__BEGIN_NAMESPACE_C99


52 
	tw˘y≥_t
;

53 
	g__END_NAMESPACE_C99


55 #i‚de‡
_ISwbô


60 
	~<ídün.h
>

61 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


62 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

64 
	#_ISwbô
(
bô
) \

65 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

66 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

67 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

68 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

73 
	m__ISwuµî
 = 0,

74 
	m__ISwlowî
 = 1,

75 
	m__ISwÆpha
 = 2,

76 
	m__ISwdigô
 = 3,

77 
	m__ISwxdigô
 = 4,

78 
	m__ISw•a˚
 = 5,

79 
	m__ISw¥öt
 = 6,

80 
	m__ISwgøph
 = 7,

81 
	m__ISwbœnk
 = 8,

82 
	m__ISw˙ål
 = 9,

83 
	m__ISwpun˘
 = 10,

84 
	m__ISwÆnum
 = 11,

86 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

87 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

88 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

89 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

90 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

91 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

92 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

93 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

94 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

95 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

96 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

97 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

102 
__BEGIN_DECLS


104 
__BEGIN_NAMESPACE_C99


111 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

117 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

120 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

124 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

128 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

133 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

136 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

141 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

146 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

151 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

156 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

161 #ifde‡
__USE_ISOC99


162 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

171 
w˘y≥_t
 
	$w˘y≥
 (c⁄° *
__¥›îty
Ë
__THROW
;

175 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

176 
__END_NAMESPACE_C99


183 
__BEGIN_NAMESPACE_C99


186 c⁄° 
	t__öt32_t
 *
	tw˘øns_t
;

187 
__END_NAMESPACE_C99


188 #ifde‡
__USE_GNU


189 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

192 
__BEGIN_NAMESPACE_C99


194 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

197 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

198 
__END_NAMESPACE_C99


200 
__END_DECLS


207 #ifde‡
_WCTYPE_H


213 
__BEGIN_DECLS


215 
__BEGIN_NAMESPACE_C99


218 
w˘øns_t
 
	$w˘øns
 (c⁄° *
__¥›îty
Ë
__THROW
;

221 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

222 
__END_NAMESPACE_C99


224 #ifde‡
__USE_XOPEN2K8


226 
	~<xloˇÀ.h
>

230 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

236 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

239 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

243 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

247 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

252 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

255 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

260 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

265 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

270 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

275 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

280 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

284 
w˘y≥_t
 
	$w˘y≥_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

285 
__THROW
;

289 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

290 
__THROW
;

298 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

301 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

305 
w˘øns_t
 
	$w˘øns_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

306 
__THROW
;

309 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

310 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

314 
__END_DECLS


	@
1
.
1
/usr/include
1047
52877
Demo/Cam208CvDynJpegHdmi/arch/ma2x5x/leon/los_app_config_2150.c
Demo/Cam208CvDynJpegHdmi/arch/ma2x5x/leon/los_app_config_2150.h
Demo/Cam208CvDynJpegHdmi/leon/los_app_config.c
Demo/Cam208CvDynJpegHdmi/leon/los_app_config.h
Demo/Cam208CvDynJpegHdmi/leon/main.c
Demo/Cam208CvDynJpegHdmi/leon/rtems_config.h
Demo/Cam208CvDynJpegHdmi/leon_rt/Cam208CvHdmiModel.c
Demo/Cam208CvDynJpegHdmi/leon_rt/Cam208CvHdmiModel.h
Demo/Cam208CvDynJpegHdmi/leon_rt/lrt_app_config.c
Demo/Cam208CvDynJpegHdmi/leon_rt/lrt_app_config.h
Demo/Cam208CvDynJpegHdmi/leon_rt/main.c
Demo/Cam208CvDynJpegHdmi/leon_rt/sippModelParams.c
Demo/Cam208CvDynJpegHdmi/leon_rt/sippModelParams.h
Demo/Cam208CvDynJpegHdmi/shared/commonDefine.h
Demo/Cam208CvHdmi/arch/ma2x5x/leon/los_app_config_2150.c
Demo/Cam208CvHdmi/arch/ma2x5x/leon/los_app_config_2150.h
Demo/Cam208CvHdmi/leon/los_app_config.c
Demo/Cam208CvHdmi/leon/los_app_config.h
Demo/Cam208CvHdmi/leon/main.c
Demo/Cam208CvHdmi/leon/rtems_config.h
Demo/Cam208CvHdmi/leon_rt/Cam208CvHdmiModel.c
Demo/Cam208CvHdmi/leon_rt/Cam208CvHdmiModel.h
Demo/Cam208CvHdmi/leon_rt/lrt_app_config.c
Demo/Cam208CvHdmi/leon_rt/lrt_app_config.h
Demo/Cam208CvHdmi/leon_rt/main.c
Demo/Cam208CvHdmi/leon_rt/sippModelParams.c
Demo/Cam208CvHdmi/leon_rt/sippModelParams.h
Demo/Cam208WarpEffectsHdmi/arch/ma2x5x/leon/app_config.c
Demo/Cam208WarpEffectsHdmi/leon/app_config.h
Demo/Cam208WarpEffectsHdmi/leon/fisheye_mesh.h
Demo/Cam208WarpEffectsHdmi/leon/identity_mesh.h
Demo/Cam208WarpEffectsHdmi/leon/main_code.c
Demo/Cam208WarpEffectsHdmi/leon/mesh.h
Demo/Cam208WarpEffectsHdmi/leon/perspective_mesh.h
Demo/Cam208WarpEffectsHdmi/leon/wave_mesh.h
Demo/Cam378OpipeHdmi/leon/app_config.c
Demo/Cam378OpipeHdmi/leon/app_config.h
Demo/Cam378OpipeHdmi/leon/main.c
Demo/Cam378OpipeHdmi/leon/rtems_config.h
Demo/Cam378OpipeHdmi/leon_rt/app_config.c
Demo/Cam378OpipeHdmi/leon_rt/app_config.h
Demo/Cam378OpipeHdmi/leon_rt/main.c
Demo/Cam378OpipeHdmi/leon_rt/opipe_app_cfg.c
Demo/Cam378OpipeHdmi/leon_rt/opipe_app_cfg_rx.c
Demo/Cam378OpipeHdmi/leon_rt/params/isp_gamma_lut_fp16.c
Demo/Cam378OpipeHdmi/leon_rt/params/isp_params_pp.c
Demo/Cam378OpipeHdmi/leon_rt/params/isp_params_pp.h
Demo/Cam378OpipeHdmi/leon_rt/params/isp_params_still.c
Demo/Cam378OpipeHdmi/leon_rt/params/isp_params_still.h
Demo/Cam378OpipeHdmi/leon_rt/params/isp_params_wrap.h
Demo/CamOpipeDebayerHdmi/leon/app_config.c
Demo/CamOpipeDebayerHdmi/leon/app_config.h
Demo/CamOpipeDebayerHdmi/leon/main.c
Demo/CamOpipeDebayerHdmi/leon/rtems_config.h
Demo/CamOpipeDebayerHdmi/leon_rt/app_config.c
Demo/CamOpipeDebayerHdmi/leon_rt/app_config.h
Demo/CamOpipeDebayerHdmi/leon_rt/main.c
Demo/CamOpipeDebayerHdmi/leon_rt/opipe_app_cfg.c
Demo/CamOpipeDebayerHdmi/leon_rt/opipe_app_cfg_rx.c
Demo/CamOpipeDebayerHdmi/leon_rt/params/isp_gamma_lut_fp16.c
Demo/CamOpipeDebayerHdmi/leon_rt/params/isp_params_pp.c
Demo/CamOpipeDebayerHdmi/leon_rt/params/isp_params_pp.h
Demo/CamOpipeDebayerHdmi/leon_rt/params/isp_params_still.c
Demo/CamOpipeDebayerHdmi/leon_rt/params/isp_params_still.h
Demo/CamOpipeDebayerHdmi/leon_rt/params/isp_params_wrap.h
Demo/CamSIPPDebayerHdmi/leon/app_config.c
Demo/CamSIPPDebayerHdmi/leon/app_config.h
Demo/CamSIPPDebayerHdmi/leon/main.c
Demo/CamSIPPDebayerHdmi/leon/rtems_config.h
Demo/CamSIPPDebayerHdmi/leon_rt/Cam214SIPPDebayerHdmi.c
Demo/CamSIPPDebayerHdmi/leon_rt/Cam214SIPPDebayerHdmi.h
Demo/CamSIPPDebayerHdmi/leon_rt/ISPParamsPP.c
Demo/CamSIPPDebayerHdmi/leon_rt/ISPParamsStill.c
Demo/CamSIPPDebayerHdmi/leon_rt/ISPPipeSettings.h
Demo/CamSIPPDebayerHdmi/leon_rt/app_config.c
Demo/CamSIPPDebayerHdmi/leon_rt/app_config.h
Demo/CamSIPPDebayerHdmi/leon_rt/main.c
Demo/DisparityMap/myriad/arch/ma2x5x/leon/los_app_config_2150.c
Demo/DisparityMap/myriad/arch/ma2x5x/leon/los_app_config_2150.h
Demo/DisparityMap/myriad/arch/ma2x5x/leon_rt/lrt_app_config_2150.c
Demo/DisparityMap/myriad/arch/ma2x5x/leon_rt/lrt_app_config_2150.h
Demo/DisparityMap/myriad/leon/los_app_config.c
Demo/DisparityMap/myriad/leon/los_app_config.h
Demo/DisparityMap/myriad/leon/main.c
Demo/DisparityMap/myriad/leon/rtems_config.h
Demo/DisparityMap/myriad/leon/videodemo.h
Demo/DisparityMap/myriad/leon/videodemo_appinit.c
Demo/DisparityMap/myriad/leon/videodemo_create.c
Demo/DisparityMap/myriad/leon/videodemo_init.c
Demo/DisparityMap/myriad/leon/videodemo_outswitch.c
Demo/DisparityMap/myriad/leon_rt/lrt_app_config.c
Demo/DisparityMap/myriad/leon_rt/lrt_app_config.h
Demo/DisparityMap/myriad/leon_rt/main.c
Demo/DisparityMap/myriad/leon_rt/setup.c
Demo/DisparityMap/myriad/leon_rt/setup.h
Demo/DisparityMap/myriad/shared/Buffers.h
Demo/DisparityMap/myriad/shared/CameraConfig.h
Demo/DisparityMap/myriad/shared/Defines.h
Demo/DisparityMap/myriad/shared/DisparityMapApiDefines.h
Demo/DisparityMap/myriad/shared/Sections.h
Demo/DisparityMap/myriad/shave/DisparityMap.cpp
Demo/DisparityMap/myriad/shave/DisparityMapApi.h
Demo/DisparityMap/myriad/shave/Helpers.cpp
Demo/DisparityMap/myriad/shave/Helpers.h
Demo/DisparityMap/myriad/shave/Preprocessing.cpp
Demo/DisparityMap/myriad/shave/Preprocessing.h
Demo/DisparityMap/pc/src/Main.cpp
Demo/SimpleCamHDMI/arch/ma2x5x/leon/app_config.c
Demo/SimpleCamHDMI/leon/app_config.h
Demo/SimpleCamHDMI/leon/main_code.c
Demo/Stereo208Hdmi/arch/ma2x5x/leon/los_app_config_2150.c
Demo/Stereo208Hdmi/arch/ma2x5x/leon/los_app_config_2150.h
Demo/Stereo208Hdmi/arch/ma2x5x/leon_rt/lrt_app_config_2150.c
Demo/Stereo208Hdmi/leon/los_app_config.c
Demo/Stereo208Hdmi/leon/los_app_config.h
Demo/Stereo208Hdmi/leon/main.c
Demo/Stereo208Hdmi/leon/rtems_config.h
Demo/Stereo208Hdmi/leon_rt/lrt_app_config.c
Demo/Stereo208Hdmi/leon_rt/lrt_app_config.h
Demo/Stereo208Hdmi/leon_rt/main.c
Demo/Stereo208SDCard/arch/ma2x5x/leon/los_app_config_2150.c
Demo/Stereo208SDCard/arch/ma2x5x/leon/los_app_config_2150.h
Demo/Stereo208SDCard/arch/ma2x5x/leon_rt/lrt_app_config_2150.c
Demo/Stereo208SDCard/leon/los_app_config.c
Demo/Stereo208SDCard/leon/los_app_config.h
Demo/Stereo208SDCard/leon/main.c
Demo/Stereo208SDCard/leon/rtems_config.h
Demo/Stereo208SDCard/leon_rt/lrt_app_config.c
Demo/Stereo208SDCard/leon_rt/lrt_app_config.h
Demo/Stereo208SDCard/leon_rt/main.c
Demo/Stereo208SDCard/shared/common_defines.h
Demo/UsbFirmwareUpdate/ImageProcApp/leon/UsbFlasherAddon/If_usbFlasher.h
Demo/UsbFirmwareUpdate/ImageProcApp/leon/UsbFlasherAddon/spi_i2c_config.c
Demo/UsbFirmwareUpdate/ImageProcApp/leon/UsbFlasherAddon/spi_i2c_config.h
Demo/UsbFirmwareUpdate/ImageProcApp/leon/UsbFlasherAddon/usbFlasher.c
Demo/UsbFirmwareUpdate/ImageProcApp/leon/UsbFlasherAddon/usbFlasher.h
Demo/UsbFirmwareUpdate/ImageProcApp/leon/UsbFlasherAddon/usbpump_vsc2app.h
Demo/UsbFirmwareUpdate/ImageProcApp/leon/UsbFlasherAddon/vsc2app_appinit.c
Demo/UsbFirmwareUpdate/ImageProcApp/leon/UsbFlasherAddon/vsc2app_create.c
Demo/UsbFirmwareUpdate/ImageProcApp/leon/UsbFlasherAddon/vsc2app_outcall.c
Demo/UsbFirmwareUpdate/ImageProcApp/leon/app_config.c
Demo/UsbFirmwareUpdate/ImageProcApp/leon/app_config.h
Demo/UsbFirmwareUpdate/ImageProcApp/leon/blinker.c
Demo/UsbFirmwareUpdate/ImageProcApp/leon/main.c
Demo/UsbFirmwareUpdate/ImageProcApp/leon/rtems_config.h
Demo/UsbFirmwareUpdate/ImageProcApp/leon/system.h
Demo/UsbFirmwareUpdate/UsbLoaderApp/leon/app_config.c
Demo/UsbFirmwareUpdate/UsbLoaderApp/leon/app_config.h
Demo/UsbFirmwareUpdate/UsbLoaderApp/leon/main.c
Demo/UsbFirmwareUpdate/UsbLoaderApp/leon/ndfuapplib.h
Demo/UsbFirmwareUpdate/UsbLoaderApp/leon/ndfudemo_appinit.c
Demo/UsbFirmwareUpdate/UsbLoaderApp/leon/ndfudemo_create.c
Demo/UsbFirmwareUpdate/UsbLoaderApp/leon/ndfudemo_id2region.c
Demo/UsbFirmwareUpdate/UsbLoaderApp/leon/ndfudemo_ram.c
Demo/UsbFirmwareUpdate/UsbLoaderApp/leon/rtems_config.h
Demo/UsbFirmwareUpdate/UsbLoaderApp/leon/spi_i2c_config.c
Demo/UsbFirmwareUpdate/UsbLoaderApp/leon/spi_i2c_config.h
Demo/UsbFirmwareUpdate/UsbLoaderApp/leon/system.h
Demo/UsbFirmwareUpdate/UsbLoaderApp/leon/tasks.c
Demo/UsbHost/leon/app_config.c
Demo/UsbHost/leon/app_config.h
Demo/UsbHost/leon/hostapp_gcdclient_api.c
Demo/UsbHost/leon/hostapp_gcdclient_create.c
Demo/UsbHost/leon/hostapp_hostinit.c
Demo/UsbHost/leon/hostapp_msdclient_api.c
Demo/UsbHost/leon/hostapp_msdclient_create.c
Demo/UsbHost/leon/main.c
Demo/UsbHost/leon/rtems_config.h
Demo/UsbHost/leon/usbpump_hostapp_gcdclient.h
Demo/UsbHost/leon/usbpump_hostapp_msdclient.h
Demo/UsbSerialPortRtemsShell/leon/app_config.h
Demo/UsbSerialPortRtemsShell/leon/main.c
Demo/UsbSerialPortRtemsShell/leon/serialPort.c
Demo/UsbSerialPortRtemsShell/leon/serialPort.h
Demo/UsbSerialPortRtemsShell/leon/serialPort_appinit.c
Demo/UsbSerialPortRtemsShell/leon/serialPort_create.c
Demo/UsbSerialPortRtemsShell/leon/usb_uart.h
Demo/UsbVideo208/arch/ma2x5x/leon/los_app_config_2150.c
Demo/UsbVideo208/arch/ma2x5x/leon/los_app_config_2150.h
Demo/UsbVideo208/arch/ma2x5x/leon_rt/lrt_app_config_2150.c
Demo/UsbVideo208/arch/ma2x5x/leon_rt/lrt_app_config_2150.h
Demo/UsbVideo208/leon/los_app_config.c
Demo/UsbVideo208/leon/los_app_config.h
Demo/UsbVideo208/leon/main.c
Demo/UsbVideo208/leon/rtems_config.h
Demo/UsbVideo208/leon/videodemo.h
Demo/UsbVideo208/leon/videodemo_appinit.c
Demo/UsbVideo208/leon/videodemo_create.c
Demo/UsbVideo208/leon/videodemo_init.c
Demo/UsbVideo208/leon/videodemo_outswitch.c
Demo/UsbVideo208/leon_rt/lrt_app_config.c
Demo/UsbVideo208/leon_rt/lrt_app_config.h
Demo/UsbVideo208/leon_rt/main.c
Demo/UsbVideo208/shared/cam_config.h
Evaluation/ma2x5x/3DConvolution/leon/app_config.c
Evaluation/ma2x5x/3DConvolution/leon/app_config.h
Evaluation/ma2x5x/3DConvolution/leon/conv4d.c
Evaluation/ma2x5x/3DConvolution/leon/main.c
Evaluation/ma2x5x/3DConvolution/shared/mvTensorApi.h
Evaluation/ma2x5x/3DConvolution/shave/mvTensorShaveDefines.h
Evaluation/ma2x5x/3DConvolution/shave/startShave.c
Evaluation/ma2x5x/DDRBandwidth/leon/app_config.c
Evaluation/ma2x5x/DDRBandwidth/leon/app_config.h
Evaluation/ma2x5x/DDRBandwidth/leon/main.c
Evaluation/ma2x5x/DDRBandwidth/shave/shave.c
Evaluation/ma2x5x/IspHighThroughput/leon/app_config.c
Evaluation/ma2x5x/IspHighThroughput/leon/app_config.h
Evaluation/ma2x5x/IspHighThroughput/leon/main.c
Evaluation/ma2x5x/IspHighThroughput/leon/params/isp_gamma_lut_fp16.c
Evaluation/ma2x5x/IspHighThroughput/leon/params/isp_params_pp.c
Evaluation/ma2x5x/IspHighThroughput/leon/params/isp_params_pp.h
Evaluation/ma2x5x/IspHighThroughput/leon/params/isp_params_still.c
Evaluation/ma2x5x/IspHighThroughput/leon/params/isp_params_still.h
Evaluation/ma2x5x/IspHighThroughput/leon/params/isp_params_wrap.h
Evaluation/ma2x5x/LowDynamicPower/leon/app_config.c
Evaluation/ma2x5x/LowDynamicPower/leon/app_config.h
Evaluation/ma2x5x/LowDynamicPower/leon/main.c
Evaluation/ma2x5x/LowDynamicPower/shared/kernel_config.h
Evaluation/ma2x5x/LowDynamicPower/shave/MultipleKernelScheduleStripes.cpp
Evaluation/ma2x5x/LowDynamicPower/shave/kernel_buffers.h
Evaluation/ma2x5x/PowerActiveBaseline/leon/app_config.c
Evaluation/ma2x5x/PowerActiveBaseline/leon/app_config.h
Evaluation/ma2x5x/PowerActiveBaseline/leon/main.c
Evaluation/ma2x5x/UsbMscDemo/leon/app_config.c
Evaluation/ma2x5x/UsbMscDemo/leon/app_config.h
Evaluation/ma2x5x/UsbMscDemo/leon/main.c
Evaluation/ma2x5x/UsbMscDemo/leon/mscapplib.h
Evaluation/ma2x5x/UsbMscDemo/leon/mscapplibcfg.h
Evaluation/ma2x5x/UsbMscDemo/leon/mscdemo_appinit.c
Evaluation/ma2x5x/UsbMscDemo/leon/mscdemo_create.c
Evaluation/ma2x5x/UsbMscDemo/leon/mscdemo_ramdisk.c
Evaluation/ma2x5x/UsbVideoIso/leon/app_config.c
Evaluation/ma2x5x/UsbVideoIso/leon/app_config.h
Evaluation/ma2x5x/UsbVideoIso/leon/main.c
Evaluation/ma2x5x/UsbVideoIso/leon/rtems_config.h
Evaluation/ma2x5x/UsbVideoIso/leon/videodemo.c
Evaluation/ma2x5x/UsbVideoIso/leon/videodemo.h
Evaluation/ma2x5x/UsbVideoIso/leon/videodemo_appinit.c
Evaluation/ma2x5x/UsbVideoIso/leon/videodemo_create.c
Evaluation/ma2x5x/UsbVideoIso/leon/videodemo_isoch.c
Evaluation/ma2x5x/UsbVideoIso/leon/videodemo_outswitch.c
HowTo/BothLeons/leon/app_config.c
HowTo/BothLeons/leon/app_config.h
HowTo/BothLeons/leon/main.c
HowTo/BothLeons/leon_rt/rthello.c
HowTo/CheckingCycles/leon/app_config.c
HowTo/CheckingCycles/leon/app_config.h
HowTo/CheckingCycles/leon/main.c
HowTo/CheckingCycles/leon/rtems_config.h
HowTo/CheckingCycles/shave/init.c
HowTo/Cholesky/leon/app_config.c
HowTo/Cholesky/leon/app_config.h
HowTo/Cholesky/leon/main.c
HowTo/Cholesky/tools/lib/core.c
HowTo/Cholesky/tools/lib/helpers.c
HowTo/Cholesky/tools/lib/solver.h
HowTo/Cholesky/tools/matdiff.c
HowTo/Cholesky/tools/printsqm.c
HowTo/Cholesky/tools/solver.c
HowTo/CmxDmaTransfers/leon/app_config.c
HowTo/CmxDmaTransfers/leon/app_config.h
HowTo/CmxDmaTransfers/leon/main.c
HowTo/CmxDmaTransfers/leon/rtems_config.h
HowTo/CmxDmaTransfers/leon_rt/app_config.c
HowTo/CmxDmaTransfers/leon_rt/app_config.h
HowTo/CmxDmaTransfers/leon_rt/main.c
HowTo/CmxDmaTransfers/shared/shared_config.h
HowTo/CmxDmaTransfers/shaveApps/cdma/shaveMain.c
HowTo/Cpp/CppExample/leon/app_config.c
HowTo/Cpp/CppExample/leon/app_config.h
HowTo/Cpp/CppExample/leon/main.cpp
HowTo/Cpp/cppRtems_LosLrtShave/leon/app_config.cpp
HowTo/Cpp/cppRtems_LosLrtShave/leon/app_config.h
HowTo/Cpp/cppRtems_LosLrtShave/leon/main.cpp
HowTo/Cpp/cppRtems_LosLrtShave/leon/rtems_config.c
HowTo/Cpp/cppRtems_LosLrtShave/leon_rt/Shave.cpp
HowTo/Cpp/cppRtems_LosLrtShave/leon_rt/Shave.h
HowTo/Cpp/cppRtems_LosLrtShave/leon_rt/leonrt_main.cpp
HowTo/Cpp/cppRtems_LosLrtShave/shave/shave_main.c
HowTo/Cpp/cppbaremetal/leon/Geometry.cpp
HowTo/Cpp/cppbaremetal/leon/Geometry.h
HowTo/Cpp/cppbaremetal/leon/Shape.cpp
HowTo/Cpp/cppbaremetal/leon/Shape.h
HowTo/Cpp/cppbaremetal/leon/app_config.c
HowTo/Cpp/cppbaremetal/leon/app_config.h
HowTo/Cpp/cppbaremetal/leon/main.cpp
HowTo/Cpp/cpprtems/leon/Geometry.cpp
HowTo/Cpp/cpprtems/leon/Geometry.h
HowTo/Cpp/cpprtems/leon/app_config.cpp
HowTo/Cpp/cpprtems/leon/app_config.h
HowTo/Cpp/cpprtems/leon/main.cpp
HowTo/Cpp/cpprtems/leon/rtems_config.c
HowTo/Cpp/cppshave/leon/Shave.cpp
HowTo/Cpp/cppshave/leon/Shave.h
HowTo/Cpp/cppshave/leon/app_config.c
HowTo/Cpp/cppshave/leon/app_config.h
HowTo/Cpp/cppshave/leon/main.cpp
HowTo/Cpp/cppshave/shave/heap.cpp
HowTo/Cpp/cppshave/shave/shaveStart.cpp
HowTo/DynamicInfrastructure_C/leon/app_config.c
HowTo/DynamicInfrastructure_C/leon/app_config.h
HowTo/DynamicInfrastructure_C/leon/main.c
HowTo/DynamicInfrastructure_C/leon/rtems_config.h
HowTo/DynamicInfrastructure_C/leon_rt/BayerISPModel.c
HowTo/DynamicInfrastructure_C/leon_rt/BayerISPModel.h
HowTo/DynamicInfrastructure_C/leon_rt/BayerPipelineParams.c
HowTo/DynamicInfrastructure_C/leon_rt/BayerPipelineParams.h
HowTo/DynamicInfrastructure_C/leon_rt/rtmain.c
HowTo/DynamicInfrastructure_C/shaveDynApps/MesgOne/Entry.c
HowTo/DynamicInfrastructure_C/shaveDynApps/MesgThree/Entry.c
HowTo/DynamicInfrastructure_C/shaveDynApps/MesgTwo/Entry.c
HowTo/DynamicInfrastructure_CPP/leon/app_config.c
HowTo/DynamicInfrastructure_CPP/leon/app_config.h
HowTo/DynamicInfrastructure_CPP/leon/main.c
HowTo/DynamicInfrastructure_CPP/leon/rtems_config.h
HowTo/DynamicInfrastructure_CPP/leon_rt/BayerISPModel.c
HowTo/DynamicInfrastructure_CPP/leon_rt/BayerISPModel.h
HowTo/DynamicInfrastructure_CPP/leon_rt/BayerPipelineParams.c
HowTo/DynamicInfrastructure_CPP/leon_rt/BayerPipelineParams.h
HowTo/DynamicInfrastructure_CPP/leon_rt/rtmain.c
HowTo/DynamicInfrastructure_CPP/shaveDynApps/MesgOne/Entry.c
HowTo/DynamicInfrastructure_CPP/shaveDynApps/MesgThree/Entry.cpp
HowTo/DynamicInfrastructure_CPP/shaveDynApps/MesgTwo/Entry.c
HowTo/EFuse/EFuseProgrammer/leon/app_config.c
HowTo/EFuse/EFuseProgrammer/leon/app_config.h
HowTo/EFuse/EFuseProgrammer/leon/main.c
HowTo/EFuse/EFuseReader/leon/app_config.c
HowTo/EFuse/EFuseReader/leon/app_config.h
HowTo/EFuse/EFuseReader/leon/main.c
HowTo/ExplicitVectorisation/leon/app_config.c
HowTo/ExplicitVectorisation/leon/app_config.h
HowTo/ExplicitVectorisation/leon/main.c
HowTo/ExplicitVectorisation/leon/rtems_config.h
HowTo/ExplicitVectorisation/shave/init.c
HowTo/FramePump/leon/appConfigDefines.h
HowTo/FramePump/leon/brdRtems.c
HowTo/FramePump/leon/brdRtems.h
HowTo/FramePump/leon/commonTests.c
HowTo/FramePump/leon/commonTests.h
HowTo/FramePump/leon/main.c
HowTo/FramePump/leon/rtems_config.c
HowTo/FramePump/leon/threadFunc.c
HowTo/FunctionProfilerExample/leon/app_config.cpp
HowTo/FunctionProfilerExample/leon/app_config.h
HowTo/FunctionProfilerExample/leon/init.c
HowTo/FunctionProfilerExample/leon/main.cpp
HowTo/FunctionProfilerExample/leon/rtems_config.h
HowTo/FunctionProfilerExample/leon_rt/Shave.cpp
HowTo/FunctionProfilerExample/leon_rt/Shave.h
HowTo/FunctionProfilerExample/leon_rt/leonrt_main.cpp
HowTo/FunctionProfilerExample/shave/nopGenerator.cpp
HowTo/FunctionProfilerExample/shave/shave_main.c
HowTo/GtImageWarp/leon/app_config.c
HowTo/GtImageWarp/leon/app_config.h
HowTo/GtImageWarp/leon/main.c
HowTo/GtImageWarp/leon/mesh.h
HowTo/GtImageWarp/shared/Buffers.h
HowTo/GtImageWarp/shared/Defines.h
HowTo/JpegEncoderParallel/leon/app_config.c
HowTo/JpegEncoderParallel/leon/app_config.h
HowTo/JpegEncoderParallel/leon/main.c
HowTo/LamaBLISMatrixMatrixMultiply/PCmatrixGenerator/multiplyNxN.c
HowTo/LamaBLISMatrixMatrixMultiply/leon/Helpers.c
HowTo/LamaBLISMatrixMatrixMultiply/leon/Helpers.h
HowTo/LamaBLISMatrixMatrixMultiply/leon/app_config.c
HowTo/LamaBLISMatrixMatrixMultiply/leon/app_config.h
HowTo/LamaBLISMatrixMatrixMultiply/leon/main.c
HowTo/LamaBLISMatrixMatrixMultiply/shared/Defines.h
HowTo/LamaBLISMatrixMatrixMultiply/shave/Buffers.c
HowTo/LamaBLISMatrixMatrixMultiply/shave/Buffers.h
HowTo/LeonToLeonMessage/leon/app_config.c
HowTo/LeonToLeonMessage/leon/app_config.h
HowTo/LeonToLeonMessage/leon/main.c
HowTo/LeonToLeonMessage/leon/rtems_config.h
HowTo/LeonToLeonMessage/leon_rt/rt_main.c
HowTo/LowPower/leon/app_config.h
HowTo/LowPower/leon/main.c
HowTo/MV0198PowerMeasure/leon/app_config.c
HowTo/MV0198PowerMeasure/leon/app_config.h
HowTo/MV0198PowerMeasure/leon/main.c
HowTo/MV0198PowerMeasure/leon/measureTask.c
HowTo/MV0198PowerMeasure/leon/rtemsConfig.h
HowTo/MV0198PowerMeasure/leon_rt/app_config.c
HowTo/MV0198PowerMeasure/leon_rt/app_config.h
HowTo/MV0198PowerMeasure/leon_rt/main.c
HowTo/MV0198PowerMeasure/shave/shave.c
HowTo/MV0198PowerMeasure/shave/shave.h
HowTo/SampleProfilerExample/leon/app_config.h
HowTo/SampleProfilerExample/leon/init.c
HowTo/SampleProfilerExample/leon/system.h
HowTo/SampleProfilerExample/leon/tasks.c
HowTo/SampleProfilerExample/leon_rt/app_config.c
HowTo/SampleProfilerExample/leon_rt/app_config.h
HowTo/SampleProfilerExample/leon_rt/main.c
HowTo/SampleProfilerExample/shave/config.h
HowTo/SampleProfilerExample/shave/init.c
HowTo/SampleUnitTesting/sampleApp.c
HowTo/SampleUnitTesting/sampleApp.h
HowTo/SampleUnitTesting/unittest/dummy/leon/app_config.c
HowTo/SampleUnitTesting/unittest/dummy/leon/app_config.h
HowTo/SampleUnitTesting/unittest/dummy/leon/main.c
HowTo/SampleUnitTesting/unittest/dummy/shave/init.c
HowTo/SampleUnitTesting/unittest/sampleApp_asm_test.cpp
HowTo/SampleUnitTesting/unittest/sampleApp_asm_test.h
HowTo/SampleUnitTesting/unittest/sampleApp_unittest.cpp
HowTo/SharingExample/leon/app_config.c
HowTo/SharingExample/leon/app_config.h
HowTo/SharingExample/leon/main.c
HowTo/SharingExample/leon/rtems_config.h
HowTo/SharingExample/leon_rt/rt_main.c
HowTo/SharingExample/shave/diff_sharing/init0.c
HowTo/SharingExample/shave/global_sharing/init2.c
HowTo/SimpleCrossCompilableCVPipe/myriad/leon/app_config.c
HowTo/SimpleCrossCompilableCVPipe/myriad/leon/app_config.h
HowTo/SimpleCrossCompilableCVPipe/myriad/leon/main.c
HowTo/SimpleCrossCompilableCVPipe/myriad/shared/Buffers.h
HowTo/SimpleCrossCompilableCVPipe/myriad/shared/Defines.h
HowTo/SimpleCrossCompilableCVPipe/myriad/shave/SimpleCrossCompilableCVPipe.cpp
HowTo/SimpleCrossCompilableCVPipe/myriad/shave/SimpleCrossCompilableCVPipe.h
HowTo/SimpleCrossCompilableCVPipe/myriad/shave/kernels/absoluteDiff/absoluteDiff_intr.cpp
HowTo/SimpleCrossCompilableCVPipe/myriad/shave/kernels/absoluteDiff/absoluteDiff_intr.h
HowTo/SimpleCrossCompilableCVPipe/myriad/shave/kernels/convolution3x3/convolution3x3_intr.cpp
HowTo/SimpleCrossCompilableCVPipe/myriad/shave/kernels/convolution3x3/convolution3x3_intr.h
HowTo/SimpleCrossCompilableCVPipe/myriad/shave/kernels/convolution7x7/convolution7x7_intr.cpp
HowTo/SimpleCrossCompilableCVPipe/myriad/shave/kernels/convolution7x7/convolution7x7_intr.h
HowTo/SimpleCrossCompilableCVPipe/pc/Modules/Main/Main.cpp
HowTo/StackPainting/leon/app_config.c
HowTo/StackPainting/leon/app_config.h
HowTo/StackPainting/leon/main.c
HowTo/StackPainting/shaveApps/StackPainter/shaveMain.c
HowTo/TraceProfiler/leon/LocalLogEvents.h
HowTo/TraceProfiler/leon/app_config.c
HowTo/TraceProfiler/leon/app_config.h
HowTo/TraceProfiler/leon/main.c
HowTo/TraceProfiler/leon/rtems_config.h
HowTo/TraceProfiler/leon/system.h
HowTo/TraceProfiler/leon_rt/main.c
HowTo/TraceProfiler/shave/shave_start.c
HowTo/TraceProfiler/shave/shave_start.h
HowTo/TraceProfiler/testTracePC.cpp
HowTo/UsbHidMouse/leon/app_config.c
HowTo/UsbHidMouse/leon/app_config.h
HowTo/UsbHidMouse/leon/descriptors.c
HowTo/UsbHidMouse/leon/main.c
HowTo/UsbHidMouse/leon/mousedefs.h
HowTo/UsbHidMouse/leon/mousedemo.c
HowTo/UsbHidMouse/leon/mousedemo_main.c
HowTo/WarpJpegDyn/leon/app_config.c
HowTo/WarpJpegDyn/leon/app_config.h
HowTo/WarpJpegDyn/leon/main.c
HowTo/WarpJpegDyn/leon/rtems_config.h
HowTo/WarpJpegDyn/leon_rt/fisheye_mesh.h
HowTo/WarpJpegDyn/leon_rt/identity_mesh.h
HowTo/WarpJpegDyn/leon_rt/lrt_app_config.c
HowTo/WarpJpegDyn/leon_rt/lrt_app_config.h
HowTo/WarpJpegDyn/leon_rt/main_code.c
HowTo/WarpJpegDyn/leon_rt/mesh.h
HowTo/WarpJpegDyn/leon_rt/perspective_mesh.h
HowTo/WarpJpegDyn/leon_rt/wave_mesh.h
HowTo/WarpJpegDyn/shared/commonDefine.h
HowTo/XLink/BufferedMessages/myriad/leon/app_config.c
HowTo/XLink/BufferedMessages/myriad/leon/app_config.h
HowTo/XLink/BufferedMessages/myriad/leon/main.c
HowTo/XLink/BufferedMessages/myriad/leon/rtems_config.h
HowTo/XLink/BufferedMessages/pc/main.c
HowTo/XLink/BufferedMessages/shared/commonFuncs.c
HowTo/XLink/BufferedMessages/shared/commonFuncs.h
HowTo/XLink/BufferedSingleStream/myriad/leon/app_config.c
HowTo/XLink/BufferedSingleStream/myriad/leon/app_config.h
HowTo/XLink/BufferedSingleStream/myriad/leon/main.c
HowTo/XLink/BufferedSingleStream/myriad/leon/rtems_config.h
HowTo/XLink/BufferedSingleStream/pc/main.c
HowTo/XLink/BufferedSingleStream/shared/commonFuncs.c
HowTo/XLink/BufferedSingleStream/shared/commonFuncs.h
HowTo/XLink/MultiDevice/myriad/leon/app_config.c
HowTo/XLink/MultiDevice/myriad/leon/app_config.h
HowTo/XLink/MultiDevice/myriad/leon/main.c
HowTo/XLink/MultiDevice/myriad/leon/rtems_config.h
HowTo/XLink/MultiDevice/pc/main.c
HowTo/XLink/MultiDevice/shared/commonFuncs.c
HowTo/XLink/MultiDevice/shared/commonFuncs.h
HowTo/XLink/SingleStream/myriad/leon/app_config.c
HowTo/XLink/SingleStream/myriad/leon/app_config.h
HowTo/XLink/SingleStream/myriad/leon/main.c
HowTo/XLink/SingleStream/myriad/leon/rtems_config.h
HowTo/XLink/SingleStream/pc/main.c
HowTo/XLink/ThreaddedMultiStream/myriad/leon/app_config.c
HowTo/XLink/ThreaddedMultiStream/myriad/leon/app_config.h
HowTo/XLink/ThreaddedMultiStream/myriad/leon/main.c
HowTo/XLink/ThreaddedMultiStream/myriad/leon/rtems_config.h
HowTo/XLink/ThreaddedMultiStream/pc/main.c
HowTo/XLink/ThreaddedMultiStream/shared/commonFuncs.c
HowTo/XLink/ThreaddedMultiStream/shared/commonFuncs.h
HowTo/XLink/ThreaddedSingleStream/myriad/leon/app_config.c
HowTo/XLink/ThreaddedSingleStream/myriad/leon/app_config.h
HowTo/XLink/ThreaddedSingleStream/myriad/leon/main.c
HowTo/XLink/ThreaddedSingleStream/myriad/leon/rtems_config.h
HowTo/XLink/ThreaddedSingleStream/pc/main.c
HowTo/XLink/ThreaddedSingleStream/shared/commonFuncs.c
HowTo/XLink/ThreaddedSingleStream/shared/commonFuncs.h
HowTo/mtrr_rtems/leon/app_config.c
HowTo/mtrr_rtems/leon/app_config.h
HowTo/mtrr_rtems/leon/main.c
HowTo/mtrr_rtems/leon/rtems_config.h
HowTo/rtems_apps/simpleRTEMS_HTTPClient/leon/AppConfig.c
HowTo/rtems_apps/simpleRTEMS_HTTPClient/leon/AppConfig.h
HowTo/rtems_apps/simpleRTEMS_HTTPClient/leon/main.c
HowTo/rtems_apps/simpleRTEMS_HTTPClient/leon/rtems_config.h
HowTo/rtems_apps/simpleRTEMS_NTPClient/leon/AppConfig.c
HowTo/rtems_apps/simpleRTEMS_NTPClient/leon/AppConfig.h
HowTo/rtems_apps/simpleRTEMS_NTPClient/leon/main.c
HowTo/rtems_apps/simpleRTEMS_NTPClient/leon/rtems_config.h
HowTo/rtems_apps/simpleRTEMS_posix/leon/app_config.c
HowTo/rtems_apps/simpleRTEMS_posix/leon/app_config.h
HowTo/rtems_apps/simpleRTEMS_posix/leon/main.c
HowTo/rtems_apps/simpleRTEMS_posix/leon/rtems_config.h
HowTo/rtems_apps/simpleRTEMS_sdCard/leon/app_config.c
HowTo/rtems_apps/simpleRTEMS_sdCard/leon/app_config.h
HowTo/rtems_apps/simpleRTEMS_sdCard/leon/main.c
HowTo/rtems_apps/simpleRTEMS_sdCard/leon/rtems_config.h
HowTo/rtems_apps/simpleRTEMS_shave/leon/app_config.c
HowTo/rtems_apps/simpleRTEMS_shave/leon/app_config.h
HowTo/rtems_apps/simpleRTEMS_shave/leon/main.c
HowTo/rtems_apps/simpleRTEMS_shave/leon/rtems_config.h
HowTo/rtems_apps/simpleRTEMS_shave/shave/effect.c
HowTo/rtems_apps/simpleRTEMS_shave/shave/effect.h
HowTo/rtems_apps/simpleRTEMS_shave/shave/shaveStart.c
HowTo/rtems_apps/simpleRTEMS_shaveDynamic/leon/app_config.c
HowTo/rtems_apps/simpleRTEMS_shaveDynamic/leon/app_config.h
HowTo/rtems_apps/simpleRTEMS_shaveDynamic/leon/main.c
HowTo/rtems_apps/simpleRTEMS_shaveDynamic/leon/rtems_config.h
HowTo/rtems_apps/simpleRTEMS_shaveDynamic/shave_add/init.c
HowTo/rtems_apps/simpleRTEMS_shaveDynamic/shave_sub/init.c
HowTo/rtems_apps/simpleRTEMS_shaveDynamicDDR/leon/app_config.c
HowTo/rtems_apps/simpleRTEMS_shaveDynamicDDR/leon/app_config.h
HowTo/rtems_apps/simpleRTEMS_shaveDynamicDDR/leon/main.c
HowTo/rtems_apps/simpleRTEMS_shaveDynamicDDR/leon/rtems_config.h
HowTo/rtems_apps/simpleRTEMS_shaveDynamicDDR/shave_add/add.c
HowTo/rtems_apps/simpleRTEMS_shaveDynamicDDR/shave_sub/sub.c
HowTo/rtems_apps/simpleRTEMS_tempSensor/leon/app_config.c
HowTo/rtems_apps/simpleRTEMS_tempSensor/leon/app_config.h
HowTo/rtems_apps/simpleRTEMS_tempSensor/leon/main.c
HowTo/rtems_apps/simpleRTEMS_tempSensor/leon/rtems_config.c
HowTo/shaveFifoComm/001_MasterSlave/leon/app_config.c
HowTo/shaveFifoComm/001_MasterSlave/leon/app_config.h
HowTo/shaveFifoComm/001_MasterSlave/leon/main.c
HowTo/shaveFifoComm/001_MasterSlave/leon/rtems_config.h
HowTo/shaveFifoComm/001_MasterSlave/shared/common.h
HowTo/shaveFifoComm/001_MasterSlave/shave/shaveMain.c
HowTo/shaveFifoComm/002_MultipleTaskTypes/leon/app_config.c
HowTo/shaveFifoComm/002_MultipleTaskTypes/leon/app_config.h
HowTo/shaveFifoComm/002_MultipleTaskTypes/leon/main.c
HowTo/shaveFifoComm/002_MultipleTaskTypes/leon/rtems_config.h
HowTo/shaveFifoComm/002_MultipleTaskTypes/shared/common.h
HowTo/shaveFifoComm/002_MultipleTaskTypes/shave/shaveMain.c
Progressive/ma2x5x/000_HelloWorld_BareMetal/leon/app_config.c
Progressive/ma2x5x/000_HelloWorld_BareMetal/leon/app_config.h
Progressive/ma2x5x/000_HelloWorld_BareMetal/leon/main.c
Progressive/ma2x5x/001_HelloWorldShave/leon/app_config.c
Progressive/ma2x5x/001_HelloWorldShave/leon/app_config.h
Progressive/ma2x5x/001_HelloWorldShave/leon/main.c
Progressive/ma2x5x/001_HelloWorldShave/leon/rtems_config.h
Progressive/ma2x5x/001_HelloWorldShave/shave/shaveMain.c
Progressive/ma2x5x/001_HelloWorld_RTEMS/leon/app_config.c
Progressive/ma2x5x/001_HelloWorld_RTEMS/leon/app_config.h
Progressive/ma2x5x/001_HelloWorld_RTEMS/leon/main.c
Progressive/ma2x5x/001_HelloWorld_RTEMS/leon/rtems_config.h
Progressive/ma2x5x/002_HelloWorld_LOS-RTEMS_LRT/leon/app_config.c
Progressive/ma2x5x/002_HelloWorld_LOS-RTEMS_LRT/leon/app_config.h
Progressive/ma2x5x/002_HelloWorld_LOS-RTEMS_LRT/leon/main.c
Progressive/ma2x5x/002_HelloWorld_LOS-RTEMS_LRT/leon/rtems_config.h
Progressive/ma2x5x/002_HelloWorld_LOS-RTEMS_LRT/leon_rt/main.c
Progressive/ma2x5x/003_SimpleAddInput/leon/app_config.c
Progressive/ma2x5x/003_SimpleAddInput/leon/app_config.h
Progressive/ma2x5x/003_SimpleAddInput/leon/main.c
Progressive/ma2x5x/003_SimpleAddInput/leon/rtems_config.h
Progressive/ma2x5x/004_SimpleCopyPlanes/leon/app_config.c
Progressive/ma2x5x/004_SimpleCopyPlanes/leon/app_config.h
Progressive/ma2x5x/004_SimpleCopyPlanes/leon/main.c
Progressive/ma2x5x/004_SimpleCopyPlanes/leon/rtems_config.h
Progressive/ma2x5x/004_SimpleCopyPlanes/shave/effect.c
Progressive/ma2x5x/004_SimpleCopyPlanes/shave/effect.h
Progressive/ma2x5x/004_SimpleCopyPlanes/shave/shaveStart.c
Progressive/ma2x5x/005_SimpleBrightnessOnYPlane/leon/app_config.c
Progressive/ma2x5x/005_SimpleBrightnessOnYPlane/leon/app_config.h
Progressive/ma2x5x/005_SimpleBrightnessOnYPlane/leon/main.c
Progressive/ma2x5x/005_SimpleBrightnessOnYPlane/leon/rtems_config.h
Progressive/ma2x5x/005_SimpleBrightnessOnYPlane/shave/effect.c
Progressive/ma2x5x/005_SimpleBrightnessOnYPlane/shave/effect.h
Progressive/ma2x5x/005_SimpleBrightnessOnYPlane/shave/shaveStart.c
Progressive/ma2x5x/006_SimpleBrightnessOnYPlane_builtins/leon/app_config.c
Progressive/ma2x5x/006_SimpleBrightnessOnYPlane_builtins/leon/app_config.h
Progressive/ma2x5x/006_SimpleBrightnessOnYPlane_builtins/leon/main.c
Progressive/ma2x5x/006_SimpleBrightnessOnYPlane_builtins/leon/rtems_config.h
Progressive/ma2x5x/006_SimpleBrightnessOnYPlane_builtins/shave/effect.c
Progressive/ma2x5x/006_SimpleBrightnessOnYPlane_builtins/shave/effect.h
Progressive/ma2x5x/006_SimpleBrightnessOnYPlane_builtins/shave/shaveStart.c
Progressive/ma2x5x/007_ParallelizingOneAlgo/leon/app_config.c
Progressive/ma2x5x/007_ParallelizingOneAlgo/leon/app_config.h
Progressive/ma2x5x/007_ParallelizingOneAlgo/leon/main.c
Progressive/ma2x5x/007_ParallelizingOneAlgo/leon/rtems_config.h
Progressive/ma2x5x/007_ParallelizingOneAlgo/shave/effect.c
Progressive/ma2x5x/007_ParallelizingOneAlgo/shave/effect.h
Progressive/ma2x5x/007_ParallelizingOneAlgo/shave/shaveStart.c
Progressive/ma2x5x/008_ParallelizingManyAlgos/leon/app_config.c
Progressive/ma2x5x/008_ParallelizingManyAlgos/leon/app_config.h
Progressive/ma2x5x/008_ParallelizingManyAlgos/leon/main.c
Progressive/ma2x5x/008_ParallelizingManyAlgos/leon/rtems_config.h
Progressive/ma2x5x/008_ParallelizingManyAlgos/shave/shaveStartBrightness.c
Progressive/ma2x5x/008_ParallelizingManyAlgos/shave/shaveStartSobel.c
Progressive/ma2x5x/009_DmaProcessingOptimized/leon/app_config.c
Progressive/ma2x5x/009_DmaProcessingOptimized/leon/app_config.h
Progressive/ma2x5x/009_DmaProcessingOptimized/leon/main.c
Progressive/ma2x5x/009_DmaProcessingOptimized/leon/rtems_config.h
Progressive/ma2x5x/009_DmaProcessingOptimized/shave/effect.c
Progressive/ma2x5x/009_DmaProcessingOptimized/shave/effect.h
Progressive/ma2x5x/009_DmaProcessingOptimized/shave/shaveStart.c
Progressive/ma2x5x/010_Simple_SIPP_RTEMS/arch/ma2x5x/leon/app_config_def.h
Progressive/ma2x5x/010_Simple_SIPP_RTEMS/leon/app_config.c
Progressive/ma2x5x/010_Simple_SIPP_RTEMS/leon/app_config.h
Progressive/ma2x5x/010_Simple_SIPP_RTEMS/leon/main.c
Progressive/ma2x5x/010_Simple_SIPP_RTEMS/leon/rtems_config.h
Progressive/ma2x5x/010_Simple_SIPP_RTEMS/leon_rt/rt_main.c
Progressive/ma2x5x/011_AsmOptimisation_BareMetal/leon/app_config.c
Progressive/ma2x5x/011_AsmOptimisation_BareMetal/leon/app_config.h
Progressive/ma2x5x/011_AsmOptimisation_BareMetal/leon/main.c
Progressive/ma2x5x/011_AsmOptimisation_BareMetal/shared/Buffers.h
Progressive/ma2x5x/011_AsmOptimisation_BareMetal/shared/Defines.h
Progressive/ma2x5x/011_AsmOptimisation_BareMetal/shave/AsmOptimisation.cpp
Progressive/ma2x5x/011_AsmOptimisation_BareMetal/shave/AsmOptimisation.h
Progressive/ma2x5x/011_AsmOptimisation_BareMetal/shave/kernel/convolution1x7_step.h
Progressive/ma2x5x/011_AsmOptimisation_BareMetal/shave/kernel/convolution1x7_step0.cpp
Progressive/ma2x5x/012_SharingData/leon/SharingDataWithShave.c
Progressive/ma2x5x/012_SharingData/leon/SharingDataWithShave.h
Progressive/ma2x5x/012_SharingData/leon/app_config.c
Progressive/ma2x5x/012_SharingData/leon/app_config.h
Progressive/ma2x5x/012_SharingData/leon/main.c
Progressive/ma2x5x/012_SharingData/leon/rtems_config.h
Progressive/ma2x5x/012_SharingData/leon_rt/main.c
Progressive/ma2x5x/012_SharingData/shaveDynApps/BigData/ManageBigData.c
Progressive/ma2x5x/012_SharingData/shaveDynApps/SmallData/ManageSmallData.c
Sipp/Opipe/ConcurrentPipesPasstrough/leon/app_config.c
Sipp/Opipe/ConcurrentPipesPasstrough/leon/app_config.h
Sipp/Opipe/ConcurrentPipesPasstrough/leon/main.c
Sipp/Opipe/ConcurrentPipesPasstrough/leon_rt/app_config.h
Sipp/Opipe/ConcurrentPipesPasstrough/leon_rt/main.c
Sipp/Opipe/ConcurrentPipesPasstrough/leon_rt/opipe_app_cfg_1.c
Sipp/Opipe/ConcurrentPipesPasstrough/leon_rt/opipe_app_cfg_2.c
Sipp/Opipe/ConcurrentPipesPasstrough/leon_rt/opipe_app_cfg_3.c
Sipp/Opipe/ConcurrentPipesPasstrough/leon_rt/opipe_app_cfg_4.c
Sipp/Opipe/ConcurrentPipesPasstrough/leon_rt/opipe_app_cfg_5.c
Sipp/Opipe/FullIsp/leon/app_config.c
Sipp/Opipe/FullIsp/leon/app_config.h
Sipp/Opipe/FullIsp/leon/main.c
Sipp/Opipe/FullIsp/leon_rt/app_config.h
Sipp/Opipe/FullIsp/leon_rt/isp_gamma_lut_fp16.c
Sipp/Opipe/FullIsp/leon_rt/isp_params_pp.c
Sipp/Opipe/FullIsp/leon_rt/isp_params_pp.h
Sipp/Opipe/FullIsp/leon_rt/isp_params_still.c
Sipp/Opipe/FullIsp/leon_rt/isp_params_still.h
Sipp/Opipe/FullIsp/leon_rt/isp_params_wrap.h
Sipp/Opipe/FullIsp/leon_rt/main.c
Sipp/Opipe/FullIsp/leon_rt/opipe_app_cfg.c
Sipp/Opipe/MipiRxPassthrough/leon/app_config.c
Sipp/Opipe/MipiRxPassthrough/leon/app_config.h
Sipp/Opipe/MipiRxPassthrough/leon/main.c
Sipp/Opipe/MipiRxPassthrough/leon_rt/app_config.h
Sipp/Opipe/MipiRxPassthrough/leon_rt/main.c
Sipp/Opipe/MipiRxPassthrough/leon_rt/opipe_app_cfg.c
Sipp/Opipe/SimplePassthrough/leon/app_config.c
Sipp/Opipe/SimplePassthrough/leon/app_config.h
Sipp/Opipe/SimplePassthrough/leon/main.c
Sipp/Opipe/SimplePassthrough/leon_rt/app_config.h
Sipp/Opipe/SimplePassthrough/leon_rt/main.c
Sipp/Opipe/SimplePassthrough/leon_rt/opipe_app_cfg.c
Sipp/Opipe/UPFIRDN_Filter/leon/app_config.c
Sipp/Opipe/UPFIRDN_Filter/leon/app_config.h
Sipp/Opipe/UPFIRDN_Filter/leon/main.c
Sipp/Opipe/UPFIRDN_Filter/leon_rt/app_config.h
Sipp/Opipe/UPFIRDN_Filter/leon_rt/main.c
Sipp/Opipe/UPFIRDN_Filter/leon_rt/opipe_app_cfg.c
Sipp/SippFw/ConcurrencyTest/AsyncPipe_x2_concurrent/leon/ConcurrencyAppTypes.h
Sipp/SippFw/ConcurrencyTest/AsyncPipe_x2_concurrent/leon/appParams.h
Sipp/SippFw/ConcurrencyTest/AsyncPipe_x2_concurrent/leon/main.c
Sipp/SippFw/ConcurrencyTest/AsyncPipe_x2_concurrent/leon/pcDumpSchedule.hh
Sipp/SippFw/ConcurrencyTest/AsyncPipe_x2_concurrent/leon/pcDumpSchedule_1.hh
Sipp/SippFw/ConcurrencyTest/AsyncPipe_x2_concurrent/leon/utils.c
Sipp/SippFw/ConcurrencyTest/MixedIspCvPipe_concurrent/leon/ConcurrencyAppTypes.h
Sipp/SippFw/ConcurrencyTest/MixedIspCvPipe_concurrent/leon/appParams.h
Sipp/SippFw/ConcurrencyTest/MixedIspCvPipe_concurrent/leon/main.c
Sipp/SippFw/ConcurrencyTest/MixedIspCvPipe_concurrent/leon/utils.c
Sipp/SippFw/ConcurrencyTest/MixedSyncAsyncPipe_concurrent/leon/ConcurrencyAppTypes.h
Sipp/SippFw/ConcurrencyTest/MixedSyncAsyncPipe_concurrent/leon/appParams.h
Sipp/SippFw/ConcurrencyTest/MixedSyncAsyncPipe_concurrent/leon/main.c
Sipp/SippFw/ConcurrencyTest/MixedSyncAsyncPipe_concurrent/leon/pcDumpSchedule.hh
Sipp/SippFw/ConcurrencyTest/MixedSyncAsyncPipe_concurrent/leon/pcDumpSchedule_1.hh
Sipp/SippFw/ConcurrencyTest/MixedSyncAsyncPipe_concurrent/leon/utils.c
Sipp/SippFw/HwFilters/testHwChromaDns/leon/app_config.c
Sipp/SippFw/HwFilters/testHwChromaDns/leon/app_config.h
Sipp/SippFw/HwFilters/testHwChromaDns/leon/main.c
Sipp/SippFw/HwFilters/testHwChromaDns/leon/testHwChromaDns.c
Sipp/SippFw/HwFilters/testHwChromaDns/leon/testHwChromaDns.h
Sipp/SippFw/HwFilters/testHwChromaDns/leon/testHwChromaDnsSetup.h
Sipp/SippFw/HwFilters/testHwColorComb/leon/app_config.c
Sipp/SippFw/HwFilters/testHwColorComb/leon/app_config.h
Sipp/SippFw/HwFilters/testHwColorComb/leon/colorComb3dLut.h
Sipp/SippFw/HwFilters/testHwColorComb/leon/main.c
Sipp/SippFw/HwFilters/testHwColorComb/leon/testHwColorComb.c
Sipp/SippFw/HwFilters/testHwColorComb/leon/testHwColorComb.h
Sipp/SippFw/HwFilters/testHwColorComb/leon/testHwColorCombSetup.h
Sipp/SippFw/HwFilters/testHwConv/leon/app_config.c
Sipp/SippFw/HwFilters/testHwConv/leon/app_config.h
Sipp/SippFw/HwFilters/testHwConv/leon/main.c
Sipp/SippFw/HwFilters/testHwConv/leon/testHwConv.c
Sipp/SippFw/HwFilters/testHwConv/leon/testHwConv.h
Sipp/SippFw/HwFilters/testHwConv/leon/testHwConvSetup.h
Sipp/SippFw/HwFilters/testHwDbyr/leon/app_config.c
Sipp/SippFw/HwFilters/testHwDbyr/leon/app_config.h
Sipp/SippFw/HwFilters/testHwDbyr/leon/main.c
Sipp/SippFw/HwFilters/testHwDbyr/leon/testDataDbyr.h
Sipp/SippFw/HwFilters/testHwDbyr/leon/testHwDbyr.c
Sipp/SippFw/HwFilters/testHwDbyr/leon/testHwDbyr.h
Sipp/SippFw/HwFilters/testHwDoGLTM/leon/app_config.c
Sipp/SippFw/HwFilters/testHwDoGLTM/leon/app_config.h
Sipp/SippFw/HwFilters/testHwDoGLTM/leon/main.c
Sipp/SippFw/HwFilters/testHwDoGLTM/leon/testHwDoGLTM.c
Sipp/SippFw/HwFilters/testHwDoGLTM/leon/testHwDoGLTM.h
Sipp/SippFw/HwFilters/testHwDoGLTM/leon/testHwDogLtmSetup.h
Sipp/SippFw/HwFilters/testHwEdgeOperator/leon/app_config.c
Sipp/SippFw/HwFilters/testHwEdgeOperator/leon/app_config.h
Sipp/SippFw/HwFilters/testHwEdgeOperator/leon/main.c
Sipp/SippFw/HwFilters/testHwEdgeOperator/leon/testHwEdgeOperator.c
Sipp/SippFw/HwFilters/testHwEdgeOperator/leon/testHwEdgeOperator.h
Sipp/SippFw/HwFilters/testHwEdgeOperator/leon/testHwEdgeOperatorSetup.h
Sipp/SippFw/HwFilters/testHwGenChroma/leon/app_config.c
Sipp/SippFw/HwFilters/testHwGenChroma/leon/app_config.h
Sipp/SippFw/HwFilters/testHwGenChroma/leon/main.c
Sipp/SippFw/HwFilters/testHwGenChroma/leon/testHwGenChroma.c
Sipp/SippFw/HwFilters/testHwGenChroma/leon/testHwGenChroma.h
Sipp/SippFw/HwFilters/testHwGenChroma/leon/testHwGenChromaSetup.h
Sipp/SippFw/HwFilters/testHwHarrisCorners/leon/app_config.c
Sipp/SippFw/HwFilters/testHwHarrisCorners/leon/app_config.h
Sipp/SippFw/HwFilters/testHwHarrisCorners/leon/main.c
Sipp/SippFw/HwFilters/testHwHarrisCorners/leon/testHwHarrisCorners.c
Sipp/SippFw/HwFilters/testHwHarrisCorners/leon/testHwHarrisCorners.h
Sipp/SippFw/HwFilters/testHwHarrisCorners/leon/testHwHarrisCornersSetup.h
Sipp/SippFw/HwFilters/testHwLsc/leon/app_config.c
Sipp/SippFw/HwFilters/testHwLsc/leon/app_config.h
Sipp/SippFw/HwFilters/testHwLsc/leon/bayerGainMeshMap.h
Sipp/SippFw/HwFilters/testHwLsc/leon/main.c
Sipp/SippFw/HwFilters/testHwLsc/leon/testData.h
Sipp/SippFw/HwFilters/testHwLsc/leon/testHwLsc.c
Sipp/SippFw/HwFilters/testHwLsc/leon/testHwLsc.h
Sipp/SippFw/HwFilters/testHwLumaDns/leon/app_config.c
Sipp/SippFw/HwFilters/testHwLumaDns/leon/app_config.h
Sipp/SippFw/HwFilters/testHwLumaDns/leon/main.c
Sipp/SippFw/HwFilters/testHwLumaDns/leon/testHwLumaDns.c
Sipp/SippFw/HwFilters/testHwLumaDns/leon/testHwLumaDns.h
Sipp/SippFw/HwFilters/testHwLumaDns/leon/testHwLumaDnsSetup.h
Sipp/SippFw/HwFilters/testHwLut/leon/app_config.c
Sipp/SippFw/HwFilters/testHwLut/leon/app_config.h
Sipp/SippFw/HwFilters/testHwLut/leon/main.c
Sipp/SippFw/HwFilters/testHwLut/leon/testHwLut.c
Sipp/SippFw/HwFilters/testHwLut/leon/testHwLut.h
Sipp/SippFw/HwFilters/testHwLut/leon/testHwLutSetup.h
Sipp/SippFw/HwFilters/testHwLut/leon/testLut.h
Sipp/SippFw/HwFilters/testHwMedian/leon/app_config.c
Sipp/SippFw/HwFilters/testHwMedian/leon/app_config.h
Sipp/SippFw/HwFilters/testHwMedian/leon/main.c
Sipp/SippFw/HwFilters/testHwMedian/leon/pcDumpSchedule.hh
Sipp/SippFw/HwFilters/testHwMedian/leon/testData.h
Sipp/SippFw/HwFilters/testHwMedian/leon/testHwMedian.c
Sipp/SippFw/HwFilters/testHwMedian/leon/testHwMedian.h
Sipp/SippFw/HwFilters/testHwPolyPhaseFIR/leon/app_config.c
Sipp/SippFw/HwFilters/testHwPolyPhaseFIR/leon/app_config.h
Sipp/SippFw/HwFilters/testHwPolyPhaseFIR/leon/main.c
Sipp/SippFw/HwFilters/testHwPolyPhaseFIR/leon/testHwPolyPhaseFIR.c
Sipp/SippFw/HwFilters/testHwPolyPhaseFIR/leon/testHwPolyPhaseFIR.h
Sipp/SippFw/HwFilters/testHwPolyPhaseFIR/leon/testHwPolyPhaseFIRSetup.h
Sipp/SippFw/HwFilters/testHwRaw/leon/app_config.c
Sipp/SippFw/HwFilters/testHwRaw/leon/app_config.h
Sipp/SippFw/HwFilters/testHwRaw/leon/main.c
Sipp/SippFw/HwFilters/testHwRaw/leon/testHwRaw.c
Sipp/SippFw/HwFilters/testHwRaw/leon/testHwRaw.h
Sipp/SippFw/HwFilters/testHwRaw/leon/testHwRawSetup.h
Sipp/SippFw/HwFilters/testHwSharpen/leon/app_config.c
Sipp/SippFw/HwFilters/testHwSharpen/leon/app_config.h
Sipp/SippFw/HwFilters/testHwSharpen/leon/main.c
Sipp/SippFw/HwFilters/testHwSharpen/leon/testHwSharpen.c
Sipp/SippFw/HwFilters/testHwSharpen/leon/testHwSharpen.h
Sipp/SippFw/HwFilters/testHwSharpen/leon/testMacros.h
Sipp/SippFw/HwFilters/testHwSigmaDenoise/leon/app_config.c
Sipp/SippFw/HwFilters/testHwSigmaDenoise/leon/app_config.h
Sipp/SippFw/HwFilters/testHwSigmaDenoise/leon/main.c
Sipp/SippFw/HwFilters/testHwSigmaDenoise/leon/testData.h
Sipp/SippFw/HwFilters/testHwSigmaDenoise/leon/testHwSigmaDenoise.c
Sipp/SippFw/HwFilters/testHwSigmaDenoise/leon/testHwSigmaDenoise.h
Sipp/SippFw/ISPPipe/leon/ISPParamsPP.c
Sipp/SippFw/ISPPipe/leon/ISPParamsStill.c
Sipp/SippFw/ISPPipe/leon/ISPPipe.c
Sipp/SippFw/ISPPipe/leon/ISPPipe.h
Sipp/SippFw/ISPPipe/leon/ISPPipeSettings.h
Sipp/SippFw/ISPPipe/leon/app_config.c
Sipp/SippFw/ISPPipe/leon/app_config.h
Sipp/SippFw/ISPPipe/leon/main.c
Sipp/SippFw/Runtimes/HwConv/leon/HwConv.c
Sipp/SippFw/Runtimes/HwConv/leon/HwConv.h
Sipp/SippFw/Runtimes/HwConv/leon/HwConvSetup.h
Sipp/SippFw/Runtimes/HwConv/leon/app_config.c
Sipp/SippFw/Runtimes/HwConv/leon/app_config.h
Sipp/SippFw/Runtimes/HwConv/leon/main.c
Sipp/SippFw/Runtimes/ISPPipe/leon/ISPParamsPP.c
Sipp/SippFw/Runtimes/ISPPipe/leon/ISPParamsStill.c
Sipp/SippFw/Runtimes/ISPPipe/leon/ISPPipe.c
Sipp/SippFw/Runtimes/ISPPipe/leon/ISPPipe.h
Sipp/SippFw/Runtimes/ISPPipe/leon/ISPPipeSettings.h
Sipp/SippFw/Runtimes/ISPPipe/leon/app_config.c
Sipp/SippFw/Runtimes/ISPPipe/leon/app_config.h
Sipp/SippFw/Runtimes/ISPPipe/leon/main.c
Sipp/SippFw/Runtimes/MonoPipe/leon/app_config.c
Sipp/SippFw/Runtimes/MonoPipe/leon/app_config.h
Sipp/SippFw/Runtimes/MonoPipe/leon/isp_params.c
Sipp/SippFw/Runtimes/MonoPipe/leon/isp_params.h
Sipp/SippFw/Runtimes/MonoPipe/leon/main.c
Sipp/SippFw/Runtimes/MonoPipe/leon/monoPipe.c
Sipp/SippFw/Runtimes/MonoPipe/leon/monoPipe.h
Sipp/SippFw/Runtimes/MultiStream/leon/ISPParamsPP.c
Sipp/SippFw/Runtimes/MultiStream/leon/ISPParamsStill.c
Sipp/SippFw/Runtimes/MultiStream/leon/ISPPipeSettings.h
Sipp/SippFw/Runtimes/MultiStream/leon/app_config.c
Sipp/SippFw/Runtimes/MultiStream/leon/app_config.h
Sipp/SippFw/Runtimes/MultiStream/leon/main.c
Sipp/SippFw/Tutorials/SippTutA0/leon/app_config.c
Sipp/SippFw/Tutorials/SippTutA0/leon/app_config.h
Sipp/SippFw/Tutorials/SippTutA0/leon/main.c
Sipp/SippFw/Tutorials/SippTutA0/leon/sippTutA0Model.c
Sipp/SippFw/Tutorials/SippTutA0/leon/sippTutA0Model.h
Sipp/SippFw/Tutorials/SippTutA1/leon/app_config.c
Sipp/SippFw/Tutorials/SippTutA1/leon/app_config.h
Sipp/SippFw/Tutorials/SippTutA1/leon/main.c
Sipp/SippFw/Tutorials/SippTutA1/leon/sippTutA1Model.c
Sipp/SippFw/Tutorials/SippTutA1/leon/sippTutA1Model.h
Sipp/SippFw/Tutorials/SippTutA2/leon/app_config.c
Sipp/SippFw/Tutorials/SippTutA2/leon/app_config.h
Sipp/SippFw/Tutorials/SippTutA2/leon/main.c
Sipp/SippFw/Tutorials/SippTutA2/leon/sippTutA2Model.c
Sipp/SippFw/Tutorials/SippTutA2/leon/sippTutA2Model.h
Sipp/SippFw/Tutorials/SippTutA3/leon/app_config.c
Sipp/SippFw/Tutorials/SippTutA3/leon/app_config.h
Sipp/SippFw/Tutorials/SippTutA3/leon/main.c
Sipp/SippFw/Tutorials/SippTutA3/leon/sippTutA3Model.c
Sipp/SippFw/Tutorials/SippTutA3/leon/sippTutA3Model.h
Sipp/SippFw/Tutorials/SippTutA4/leon/app_config.c
Sipp/SippFw/Tutorials/SippTutA4/leon/app_config.h
Sipp/SippFw/Tutorials/SippTutA4/leon/main.c
Sipp/SippFw/Tutorials/SippTutA4/leon/sippTutA4Model.c
Sipp/SippFw/Tutorials/SippTutA4/leon/sippTutA4Model.h
Sipp/SippFw/Tutorials/SippTutB0/leon/app_config.c
Sipp/SippFw/Tutorials/SippTutB0/leon/app_config.h
Sipp/SippFw/Tutorials/SippTutB0/leon/main.c
Sipp/SippFw/Tutorials/SippTutB0/leon/sippTutB0Model.c
Sipp/SippFw/Tutorials/SippTutB0/leon/sippTutB0Model.h
Sipp/SippFw/Tutorials/SippTutB1/leon/app_config.c
Sipp/SippFw/Tutorials/SippTutB1/leon/app_config.h
Sipp/SippFw/Tutorials/SippTutB1/leon/main.c
Sipp/SippFw/Tutorials/SippTutB1/leon/sippTutB1Model.c
Sipp/SippFw/Tutorials/SippTutB1/leon/sippTutB1Model.h
Sipp/SippFw/Tutorials/SippTutC0/leon/app_config.c
Sipp/SippFw/Tutorials/SippTutC0/leon/app_config.h
Sipp/SippFw/Tutorials/SippTutC0/leon/main.c
Sipp/SippFw/Tutorials/SippTutC0/leon/sippMat.h
Sipp/SippFw/Tutorials/SippTutC0/leon/sippTutC0Model.c
Sipp/SippFw/Tutorials/SippTutC0/leon/sippTutC0Model.h
Sipp/SippFw/Tutorials/SippTutC1/leon/app_config.c
Sipp/SippFw/Tutorials/SippTutC1/leon/app_config.h
Sipp/SippFw/Tutorials/SippTutC1/leon/main.c
Sipp/SippFw/Tutorials/SippTutC1/leon/sippMat.h
Sipp/SippFw/Tutorials/SippTutC1/leon/sippTutC1Model.c
Sipp/SippFw/Tutorials/SippTutC1/leon/sippTutC1Model.h
Sipp/SippFw/Tutorials/SippTutC2/leon/app_config.c
Sipp/SippFw/Tutorials/SippTutC2/leon/app_config.h
Sipp/SippFw/Tutorials/SippTutC2/leon/main.c
Sipp/SippFw/Tutorials/SippTutC2/leon/sippMat.h
Sipp/SippFw/Tutorials/SippTutC2/leon/sippTutC2Model.c
Sipp/SippFw/Tutorials/SippTutC2/leon/sippTutC2Model.h
Sipp/SippFw/Tutorials/SippTutC3/leon/app_config.c
Sipp/SippFw/Tutorials/SippTutC3/leon/app_config.h
Sipp/SippFw/Tutorials/SippTutC3/leon/main.c
Sipp/SippFw/Tutorials/SippTutC3/leon/sippMat.h
Sipp/SippFw/Tutorials/SippTutC3/leon/sippTutC3Model.c
Sipp/SippFw/Tutorials/SippTutC3/leon/sippTutC3Model.h
Sipp/SippFw/Tutorials/SippTutD0/leon/app_config.c
Sipp/SippFw/Tutorials/SippTutD0/leon/app_config.h
Sipp/SippFw/Tutorials/SippTutD0/leon/main.c
Sipp/SippFw/Tutorials/SippTutD0/leon/sippTutD0Model.c
Sipp/SippFw/Tutorials/SippTutD0/leon/sippTutD0Model.h
Sipp/SippFw/Tutorials/SippTutD1/leon/app_config.c
Sipp/SippFw/Tutorials/SippTutD1/leon/app_config.h
Sipp/SippFw/Tutorials/SippTutD1/leon/main.c
Sipp/SippFw/Tutorials/SippTutD1/leon/sippTutD1Model.c
Sipp/SippFw/Tutorials/SippTutD1/leon/sippTutD1Model.h
Sipp/SippFw/Tutorials/SippTutD2/leon/app_config.c
Sipp/SippFw/Tutorials/SippTutD2/leon/app_config.h
Sipp/SippFw/Tutorials/SippTutD2/leon/main.c
Sipp/SippFw/Tutorials/SippTutD2/leon/sippTutD2Model.c
Sipp/SippFw/Tutorials/SippTutD2/leon/sippTutD2Model.h
Sipp/SippFw/Tutorials/SippTutE0/leon/app_config.c
Sipp/SippFw/Tutorials/SippTutE0/leon/app_config.h
Sipp/SippFw/Tutorials/SippTutE0/leon/main.c
Sipp/SippFw/Tutorials/SippTutE0/leon/myDefs.c
Sipp/SippFw/Tutorials/SippTutE0/leon/myDefs.h
Sipp/SippFw/Tutorials/SippTutE0/leon/sippTutE0Model.c
Sipp/SippFw/Tutorials/SippTutE0/leon/sippTutE0Model.h
Sipp/SippFw/common/leon/octaveBayerIspParams.h
Sipp/SippFw/memRegionApi/leon/MemRegionApi.c
Sipp/SippFw/memRegionApi/leon/MemRegionApi.h
Sipp/SippFw/memRegionApi/leon/MemRegionApiParams.h
Sipp/SippFw/memRegionApi/leon/main.c
Sipp/SippFw/memRegionApi/leon/pcDumpSchedule.hh
Sipp/SippFw/memRegionApi_01/leon/MemRegionApi.c
Sipp/SippFw/memRegionApi_01/leon/MemRegionApi.h
Sipp/SippFw/memRegionApi_01/leon/MemRegionApiParams.h
Sipp/SippFw/memRegionApi_01/leon/main.c
Sipp/SippFw/sippPerfTestBed/leon/appParams.h
Sipp/SippFw/sippPerfTestBed/leon/app_config.c
Sipp/SippFw/sippPerfTestBed/leon/app_config.h
Sipp/SippFw/sippPerfTestBed/leon/main.c
Sipp/SippFw/sippPerfTestBed/leon/perfTestbed.h
Sipp/SippFw/sippPerfTestBed/leon/perfTestbedCfg.h
Sipp/SippFw/sippPerfTestBed/leon/perfTestbedCfg_A.h
Sipp/SippFw/sippPerfTestBed/leon/perfTestbedCfg_B.h
Sipp/SippFw/sippPerfTestBed/leon/perfTestbedCfg_C.h
Sipp/SippFw/sippPerfTestBed/leon/perfTestbedCfg_D.h
Sipp/SippFw/sippPerfTestBed/leon/perfTestbedPipes.c
Sipp/SippFw/sippPerfTestBed/leon/perfTestbedTypes.h
Sipp/SippFw/sippPerfTestBed/leon/utils.c
Sipp/SippFw/testHwConvUpperSlices/leon/app_config.c
Sipp/SippFw/testHwConvUpperSlices/leon/app_config.h
Sipp/SippFw/testHwConvUpperSlices/leon/main.c
Sipp/SippFw/testHwConvUpperSlices/leon/sippHwConv.c
Sipp/SippFw/testHwConvUpperSlices/leon/sippHwConv.h
Sipp/SippFw/testHwConvUpperSlices/leon/sippHwConvDefs.h
cdk/apps/arch/ma2x5x/cdk_FLIC_1xIMX214/leon/AppSpecInterface.h
cdk/apps/arch/ma2x5x/cdk_FLIC_1xIMX214/leon/PipeIsp3Cams.cpp
cdk/apps/arch/ma2x5x/cdk_FLIC_1xIMX214/leon/PipeIsp3Cams.h
cdk/apps/arch/ma2x5x/cdk_FLIC_1xIMX214/leon/app_guzzi_command.h
cdk/apps/arch/ma2x5x/cdk_FLIC_1xIMX214/leon/app_guzzi_command_dbg.c
cdk/apps/arch/ma2x5x/cdk_FLIC_1xIMX214/leon/app_guzzi_command_dbg.h
cdk/apps/arch/ma2x5x/cdk_FLIC_1xIMX214/leon/app_guzzi_command_spi.c
cdk/apps/arch/ma2x5x/cdk_FLIC_1xIMX214/leon/app_guzzi_command_spi.h
cdk/apps/arch/ma2x5x/cdk_FLIC_1xIMX214/leon/app_guzzi_spi_commands.h
cdk/apps/arch/ma2x5x/cdk_FLIC_1xIMX214/leon/brdDefines.h
cdk/apps/arch/ma2x5x/cdk_FLIC_1xIMX214/leon/camera_control.c
cdk/apps/arch/ma2x5x/cdk_FLIC_1xIMX214/leon/camera_control.h
cdk/apps/arch/ma2x5x/cdk_FLIC_1xIMX214/leon/init.c
cdk/apps/arch/ma2x5x/cdk_FLIC_1xIMX214/leon/initSystem.c
cdk/apps/arch/ma2x5x/cdk_FLIC_1xIMX214/leon/initSystem.h
cdk/apps/arch/ma2x5x/cdk_FLIC_1xIMX214/leon/main.c
cdk/apps/arch/ma2x5x/cdk_FLIC_1xIMX214/leon/sendout_config.c
cdk/apps/arch/ma2x5x/cdk_FLIC_1xIMX214/leon/sendout_config.h
cdk/apps/arch/ma2x5x/cdk_FLIC_1xIMX214_2xIMX208/leon/AppSpecInterface.h
cdk/apps/arch/ma2x5x/cdk_FLIC_1xIMX214_2xIMX208/leon/PipeIsp3Cams.cpp
cdk/apps/arch/ma2x5x/cdk_FLIC_1xIMX214_2xIMX208/leon/PipeIsp3Cams.h
cdk/apps/arch/ma2x5x/cdk_FLIC_1xIMX214_2xIMX208/leon/app_guzzi_command.h
cdk/apps/arch/ma2x5x/cdk_FLIC_1xIMX214_2xIMX208/leon/app_guzzi_command_dbg.c
cdk/apps/arch/ma2x5x/cdk_FLIC_1xIMX214_2xIMX208/leon/app_guzzi_command_dbg.h
cdk/apps/arch/ma2x5x/cdk_FLIC_1xIMX214_2xIMX208/leon/app_guzzi_command_spi.c
cdk/apps/arch/ma2x5x/cdk_FLIC_1xIMX214_2xIMX208/leon/app_guzzi_command_spi.h
cdk/apps/arch/ma2x5x/cdk_FLIC_1xIMX214_2xIMX208/leon/app_guzzi_spi_commands.h
cdk/apps/arch/ma2x5x/cdk_FLIC_1xIMX214_2xIMX208/leon/brdDefines.h
cdk/apps/arch/ma2x5x/cdk_FLIC_1xIMX214_2xIMX208/leon/camera_control.c
cdk/apps/arch/ma2x5x/cdk_FLIC_1xIMX214_2xIMX208/leon/camera_control.h
cdk/apps/arch/ma2x5x/cdk_FLIC_1xIMX214_2xIMX208/leon/init.c
cdk/apps/arch/ma2x5x/cdk_FLIC_1xIMX214_2xIMX208/leon/initSystem.c
cdk/apps/arch/ma2x5x/cdk_FLIC_1xIMX214_2xIMX208/leon/initSystem.h
cdk/apps/arch/ma2x5x/cdk_FLIC_1xIMX214_2xIMX208/leon/main.c
cdk/apps/arch/ma2x5x/cdk_FLIC_1xIMX214_2xIMX208/leon/sendout_config.c
cdk/apps/arch/ma2x5x/cdk_FLIC_1xIMX214_2xIMX208/leon/sendout_config.h
cdk/apps/arch/ma2x5x/cdk_FLIC_3xIMX208/leon/AppSpecInterface.h
cdk/apps/arch/ma2x5x/cdk_FLIC_3xIMX208/leon/PipeIsp3Cams.cpp
cdk/apps/arch/ma2x5x/cdk_FLIC_3xIMX208/leon/PipeIsp3Cams.h
cdk/apps/arch/ma2x5x/cdk_FLIC_3xIMX208/leon/app_guzzi_command.h
cdk/apps/arch/ma2x5x/cdk_FLIC_3xIMX208/leon/app_guzzi_command_dbg.c
cdk/apps/arch/ma2x5x/cdk_FLIC_3xIMX208/leon/app_guzzi_command_dbg.h
cdk/apps/arch/ma2x5x/cdk_FLIC_3xIMX208/leon/app_guzzi_command_spi.c
cdk/apps/arch/ma2x5x/cdk_FLIC_3xIMX208/leon/app_guzzi_command_spi.h
cdk/apps/arch/ma2x5x/cdk_FLIC_3xIMX208/leon/app_guzzi_spi_commands.h
cdk/apps/arch/ma2x5x/cdk_FLIC_3xIMX208/leon/brdDefines.h
cdk/apps/arch/ma2x5x/cdk_FLIC_3xIMX208/leon/camera_control.c
cdk/apps/arch/ma2x5x/cdk_FLIC_3xIMX208/leon/camera_control.h
cdk/apps/arch/ma2x5x/cdk_FLIC_3xIMX208/leon/init.c
cdk/apps/arch/ma2x5x/cdk_FLIC_3xIMX208/leon/initSystem.c
cdk/apps/arch/ma2x5x/cdk_FLIC_3xIMX208/leon/initSystem.h
cdk/apps/arch/ma2x5x/cdk_FLIC_3xIMX208/leon/main.c
cdk/apps/arch/ma2x5x/cdk_FLIC_3xIMX208/leon/sendout_config.c
cdk/apps/arch/ma2x5x/cdk_FLIC_3xIMX208/leon/sendout_config.h
cdk/apps/arch/ma2x5x/cdk_SrcIsp_1xIMX214/leon/app_guzzi_command.h
cdk/apps/arch/ma2x5x/cdk_SrcIsp_1xIMX214/leon/app_guzzi_command_dbg.c
cdk/apps/arch/ma2x5x/cdk_SrcIsp_1xIMX214/leon/app_guzzi_command_dbg.h
cdk/apps/arch/ma2x5x/cdk_SrcIsp_1xIMX214/leon/app_guzzi_command_spi.c
cdk/apps/arch/ma2x5x/cdk_SrcIsp_1xIMX214/leon/app_guzzi_command_spi.h
cdk/apps/arch/ma2x5x/cdk_SrcIsp_1xIMX214/leon/brdDefines.h
cdk/apps/arch/ma2x5x/cdk_SrcIsp_1xIMX214/leon/camera_control.c
cdk/apps/arch/ma2x5x/cdk_SrcIsp_1xIMX214/leon/camera_control.h
cdk/apps/arch/ma2x5x/cdk_SrcIsp_1xIMX214/leon/ic_main.c
cdk/apps/arch/ma2x5x/cdk_SrcIsp_1xIMX214/leon/init.c
cdk/apps/arch/ma2x5x/cdk_SrcIsp_1xIMX214/leon/initSystem.c
cdk/apps/arch/ma2x5x/cdk_SrcIsp_1xIMX214/leon/initSystem.h
cdk/apps/arch/ma2x5x/cdk_SrcIsp_1xIMX214/leon/main.c
cdk/apps/arch/ma2x5x/cdk_SrcIsp_1xIMX214/leon/sendout_config.c
cdk/apps/arch/ma2x5x/cdk_SrcIsp_1xIMX214/leon/sendout_config.h
/usr/include/arpa/inet.h
/usr/include/assert.h
/usr/include/ctype.h
/usr/include/errno.h
/usr/include/fcntl.h
/usr/include/inttypes.h
/usr/include/malloc.h
/usr/include/math.h
/usr/include/net/if.h
/usr/include/netdb.h
/usr/include/netinet/in.h
/usr/include/pthread.h
/usr/include/sched.h
/usr/include/semaphore.h
/usr/include/signal.h
/usr/include/stdint.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/strings.h
/usr/include/termios.h
/usr/include/time.h
/usr/include/unistd.h
/usr/include/ustat.h
/usr/include/alloca.h
/usr/include/endian.h
/usr/include/features.h
/usr/include/getopt.h
/usr/include/libio.h
/usr/include/rpc/netdb.h
/usr/include/xlocale.h
/usr/include/_G_config.h
/usr/include/stdc-predef.h
/usr/include/gconv.h
/usr/include/wchar.h
/usr/include/wctype.h
