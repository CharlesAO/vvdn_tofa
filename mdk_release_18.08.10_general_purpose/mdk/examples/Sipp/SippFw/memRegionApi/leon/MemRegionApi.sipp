<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" version="2.1">
<key attr.name="includes" attr.type="string" for="graph" id="includes"/>
<key attr.name="binary" attr.type="string" for="graph" id="binary"/>
<key attr.name="shaveFirst" attr.type="int" for="graph" id="shaveFirst"/>
<key attr.name="shaveLast" attr.type="int" for="graph" id="shaveLast"/>
<key attr.name="mkPath" attr.type="string" for="graph" id="mkPath"/>
<key attr.name="myriadTarget" attr.type="int" for="graph" id="myriadTarget"/>
<key attr.name="id" attr.type="string" for="node" id="id"/>
<key attr.name="name" attr.type="string" for="node" id="name"/>
<key attr.name="description" attr.type="string" for="node" id="description"/>
<key attr.name="flags" attr.type="string" for="node" id="flags"/>
<key attr.name="dataType" attr.type="string" for="node" id="dataType"/>
<key attr.name="outW" attr.type="string" for="node" id="outW"/>
<key attr.name="outH" attr.type="string" for="node" id="outH"/>
<key attr.name="userDataType" attr.type="string" for="node" id="userDataType"/>
<key attr.name="numPl" attr.type="string" for="node" id="numPl"/>
<key attr.name="symbol" attr.type="string" for="node" id="symbol"/>
<key attr.name="x" attr.type="int" for="node" id="x"/>
<key attr.name="y" attr.type="int" for="node" id="y"/>
<key attr.name="w" attr.type="int" for="node" id="w"/>
<key attr.name="h" attr.type="int" for="node" id="h"/>
<key attr.name="internal0" attr.type="string" for="node" id="internal0"/>
<key attr.name="internal1" attr.type="string" for="node" id="internal1"/>
<key attr.name="cfg" attr.type="string" for="node" id="cfg"/>
<key attr.name="thresh" attr.type="string" for="node" id="thresh"/>
<key attr.name="dewormCfg" attr.type="string" for="node" id="dewormCfg"/>
<key attr.name="lumaWeight" attr.type="string" for="node" id="lumaWeight"/>
<key attr.name="gmBase" attr.type="string" for="node" id="gmBase"/>
<key attr.name="gmWidth" attr.type="string" for="node" id="gmWidth"/>
<key attr.name="gmHeight" attr.type="string" for="node" id="gmHeight"/>
<key attr.name="dataFormat" attr.type="string" for="node" id="dataFormat"/>
<key attr.name="dataWidth" attr.type="string" for="node" id="dataWidth"/>
<key attr.name="grgbPlat" attr.type="string" for="node" id="grgbPlat"/>
<key attr.name="grgbDecay" attr.type="string" for="node" id="grgbDecay"/>
<key attr.name="badPixCfg" attr.type="string" for="node" id="badPixCfg"/>
<key attr.name="gainSat" attr.type="string" for="node" id="gainSat"/>
<key attr.name="statsBase" attr.type="string" for="node" id="statsBase"/>
<key attr.name="statsPlanes" attr.type="string" for="node" id="statsPlanes"/>
<key attr.name="statsPatchCfg" attr.type="string" for="node" id="statsPatchCfg"/>
<key attr.name="statsPatchStart" attr.type="string" for="node" id="statsPatchStart"/>
<key attr.name="statsPatchSkip" attr.type="string" for="node" id="statsPatchSkip"/>
<key attr.name="statsThresh" attr.type="string" for="node" id="statsThresh"/>
<key attr.name="afF1coefs" attr.type="string" for="node" id="afF1coefs"/>
<key attr.name="afF2coefs" attr.type="string" for="node" id="afF2coefs"/>
<key attr.name="afMinThresh" attr.type="string" for="node" id="afMinThresh"/>
<key attr.name="afSubtract" attr.type="string" for="node" id="afSubtract"/>
<key attr.name="afPatchCfg" attr.type="string" for="node" id="afPatchCfg"/>
<key attr.name="afPatchStart" attr.type="string" for="node" id="afPatchStart"/>
<key attr.name="afStatsBase" attr.type="string" for="node" id="afStatsBase"/>
<key attr.name="histLumaBase" attr.type="string" for="node" id="histLumaBase"/>
<key attr.name="histRgbBase" attr.type="string" for="node" id="histRgbBase"/>
<key attr.name="index" attr.type="int" for="edge" id="index"/>
<key attr.name="inputIndex" attr.type="int" for="edge" id="inputIndex"/>
<key attr.name="outputIndex" attr.type="int" for="edge" id="outputIndex"/>
<key attr.name="kernel" attr.type="string" for="edge" id="kernel"/>
<graph edgedefault="directed" id="Pipeline">
<data key="includes">MemRegionApiParams.h</data>
<data key="binary">mbinImgSipp</data>
<data key="shaveFirst">0</data>
<data key="shaveLast">3</data>
<data key="mkPath">../build/sipp/</data>
<data key="myriadTarget">MA2x5x</data>
<node id="0">
<node id="outputbuffer0">
<data key="dataType">UInt16</data>
<data key="numPl">1</data>
</node>
<data key="name">dmaIn0</data>
<data key="id">dmaIn</data>
<data key="description">DMA in filter</data>
<data key="flags">0x00</data>
<data key="outW">MEM_API_TEST_BAYER_WIDTH</data>
<data key="outH">MEM_API_TEST_BAYER_HEIGHT</data>
<data key="symbol">SIPP_DMA_ID</data>
<data key="x">15</data>
<data key="y">62</data>
<data key="w">75</data>
<data key="h">75</data>
<data key="internal0">auto</data>
<data key="internal1">../../../../../../resources/test_522x128.raw</data>
</node>
<node id="1">
<node id="outputbuffer0">
<data key="dataType">UInt8</data>
<data key="numPl">3</data>
</node>
<data key="name">dmaOut0</data>
<data key="id">dmaOut</data>
<data key="description">DMA out filter</data>
<data key="flags">0x00</data>
<data key="outW">MEM_API_TEST_BAYER_WIDTH</data>
<data key="outH">MEM_API_TEST_BAYER_HEIGHT</data>
<data key="userDataType">true</data>
<data key="symbol">SIPP_DMA_ID</data>
<data key="x">311</data>
<data key="y">363</data>
<data key="w">75</data>
<data key="h">75</data>
<data key="internal0">auto</data>
<data key="internal1">output0.raw</data>
</node>
<node id="2">
<node id="outputbuffer0">
<data key="dataType">UInt8</data>
<data key="numPl">3</data>
</node>
<node id="outputbuffer1">
<data key="dataType">UInt8</data>
<data key="numPl">1</data>
</node>
<data key="name">debayerMa2x5x0</data>
<data key="id">debayerMa2x5x</data>
<data key="description">This filter converts raw Bayer data into 3-channels-per-pixel RGB data.</data>
<data key="flags">0x0</data>
<data key="outW">MEM_API_TEST_BAYER_WIDTH</data>
<data key="outH">MEM_API_TEST_BAYER_HEIGHT</data>
<data key="userDataType">true</data>
<data key="symbol">SIPP_DBYR_ID</data>
<data key="x">395</data>
<data key="y">216</data>
<data key="w">75</data>
<data key="h">75</data>
<data key="cfg">DEBAYER_CFG(BAYER_PATTERN,0,0,BAYER_BITS,8,P_RGB,3,0)</data>
<data key="thresh">DEBAYER_THRESH(0,0,1,1,0,0)</data>
<data key="dewormCfg">DEBAYER_DEWORM(0,0)</data>
<data key="lumaWeight">0</data>
</node>
<node id="3">
<node id="outputbuffer0">
<data key="dataType">UInt16</data>
<data key="numPl">1</data>
</node>
<data key="name">dmaOut1</data>
<data key="id">dmaOut</data>
<data key="description">DMA out filter</data>
<data key="flags">0x00</data>
<data key="outW">MEM_API_TEST_BAYER_WIDTH</data>
<data key="outH">MEM_API_TEST_BAYER_HEIGHT</data>
<data key="userDataType">true</data>
<data key="symbol">SIPP_DMA_ID</data>
<data key="x">473</data>
<data key="y">361</data>
<data key="w">75</data>
<data key="h">75</data>
<data key="internal0">auto</data>
<data key="internal1">output1.raw</data>
</node>
<node id="4">
<node id="outputbuffer0">
<data key="dataType">UInt16</data>
<data key="numPl">1</data>
</node>
<data key="name">lscMa2x5x0</data>
<data key="id">lscMa2x5x</data>
<data key="description">Lens shading correction (or anti-vignetting) compensates for the effect produced by camera optics whereby the  light  intensity  of  pixels  reduces  the  further  away  from  the  centre  of  the  image  they  are.</data>
<data key="flags">0x0</data>
<data key="outW">MEM_API_TEST_BAYER_WIDTH</data>
<data key="outH">MEM_API_TEST_BAYER_HEIGHT</data>
<data key="symbol">SIPP_LSC_ID</data>
<data key="x">185</data>
<data key="y">66</data>
<data key="w">75</data>
<data key="h">75</data>
<data key="gmBase">lscMesh</data>
<data key="gmWidth">LSC_GAIN_MAP_W</data>
<data key="gmHeight">LSC_GAIN_MAP_H</data>
<data key="dataFormat">SIPP_LSC_CFG_FORMAT(BAYER)</data>
<data key="dataWidth">BAYER_BITS</data>
</node>
<node id="5">
<node id="outputbuffer0">
<data key="dataType">UInt16</data>
<data key="numPl">1</data>
</node>
<data key="name">rawMa2x5x0</data>
<data key="id">rawMa2x5x</data>
<data key="description">The Raw filter performs a number of functions on raw CFA data, prior to demosaicing,  including  hot  and  cold  pixel  suppression,  Gr/Gb  imbalance  correction,  digital  gain, and statistics collection.</data>
<data key="flags">0x0</data>
<data key="outW">MEM_API_TEST_BAYER_WIDTH</data>
<data key="outH">MEM_API_TEST_BAYER_HEIGHT</data>
<data key="userDataType">true</data>
<data key="symbol">SIPP_RAW_ID</data>
<data key="x">190</data>
<data key="y">217</data>
<data key="w">75</data>
<data key="h">75</data>
<data key="grgbPlat">RAW_GRGB_PLATO(GRGB_IMBAL_PLAT_DARK,GRGB_IMBAL_PLAT_BRIGHT)</data>
<data key="grgbDecay">RAW_GRGB_DECAY(GRGB_IMBAL_DECAY_BRIGHT,GRGB_IMBAL_DECAY_DARK)</data>
<data key="badPixCfg">RAW_BAD_PIX_CFG(BAD_PIX_NOISE_LEVEL,BAD_PIX_ALPHA_G_HOT,BAD_PIX_ALPHA_G_COLD,BAD_PIX_ALPHA_RB_HOT,BAD_PIX_ALPHA_RB_COLD)</data>
<data key="cfg">RAW_CFG(BAYER,BAYER_PATTERN,1,0,0,0,(BAYER_BITS-1),GRGB_IMBAL_THRESHOLD,0,0,1,0,1)</data>
<data key="gainSat">((DIGI_SAT_GR &lt;&lt; 16) | DIGI_GAIN_GR),((DIGI_SAT_GB &lt;&lt; 16) | DIGI_GAIN_GB),((DIGI_SAT_R &lt;&lt; 16) | DIGI_GAIN_R),((DIGI_SAT_B &lt;&lt; 16) | DIGI_GAIN_B)</data>
<data key="statsBase">0</data>
<data key="statsPlanes">RAW_STATS_PLANES(0,0,0,0,0,0)</data>
<data key="statsPatchCfg">RAW_PATCH_CFG(0,0,0,0)</data>
<data key="statsPatchStart">RAW_PATCH_START(0,0)</data>
<data key="statsPatchSkip">RAW_PATCH_START(0,0)</data>
<data key="statsThresh">0</data>
<data key="afF1coefs">0,0,0,0,0,0,0,0,0,0,0</data>
<data key="afF2coefs">0,0,0,0,0,0,0,0,0,0,0</data>
<data key="afMinThresh">0</data>
<data key="afSubtract">0</data>
<data key="afPatchCfg">0</data>
<data key="afPatchStart">0</data>
<data key="afStatsBase">0</data>
<data key="histLumaBase">0</data>
<data key="histRgbBase">0</data>
</node>
<edge id="0" source="0" target="4">
<data key="index">0</data>
<data key="inputIndex">0</data>
<data key="outputIndex">0</data>
<data key="kernel">1x0</data>
</edge>
<edge id="1" source="2" target="1">
<data key="index">0</data>
<data key="inputIndex">0</data>
<data key="outputIndex">0</data>
<data key="kernel">1x1</data>
</edge>
<edge id="2" source="2" target="3">
<data key="index">0</data>
<data key="inputIndex">0</data>
<data key="outputIndex">1</data>
<data key="kernel">1x1</data>
</edge>
<edge id="3" source="4" target="5">
<data key="index">0</data>
<data key="inputIndex">0</data>
<data key="outputIndex">0</data>
<data key="kernel">5x5</data>
</edge>
<edge id="4" source="5" target="2">
<data key="index">0</data>
<data key="inputIndex">0</data>
<data key="outputIndex">0</data>
<data key="kernel">11x11</data>
</edge>
</graph>
</graphml>
