<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" version="2.1">
<key attr.name="includes" attr.type="string" for="graph" id="includes"/>
<key attr.name="binary" attr.type="string" for="graph" id="binary"/>
<key attr.name="shaveFirst" attr.type="int" for="graph" id="shaveFirst"/>
<key attr.name="shaveLast" attr.type="int" for="graph" id="shaveLast"/>
<key attr.name="mkPath" attr.type="string" for="graph" id="mkPath"/>
<key attr.name="myriadTarget" attr.type="int" for="graph" id="myriadTarget"/>
<key attr.name="id" attr.type="string" for="node" id="id"/>
<key attr.name="name" attr.type="string" for="node" id="name"/>
<key attr.name="description" attr.type="string" for="node" id="description"/>
<key attr.name="flags" attr.type="string" for="node" id="flags"/>
<key attr.name="dataType" attr.type="string" for="node" id="dataType"/>
<key attr.name="outW" attr.type="string" for="node" id="outW"/>
<key attr.name="outH" attr.type="string" for="node" id="outH"/>
<key attr.name="numPl" attr.type="string" for="node" id="numPl"/>
<key attr.name="symbol" attr.type="string" for="node" id="symbol"/>
<key attr.name="x" attr.type="int" for="node" id="x"/>
<key attr.name="y" attr.type="int" for="node" id="y"/>
<key attr.name="w" attr.type="int" for="node" id="w"/>
<key attr.name="h" attr.type="int" for="node" id="h"/>
<key attr.name="grgbPlat" attr.type="string" for="node" id="grgbPlat"/>
<key attr.name="grgbDecay" attr.type="string" for="node" id="grgbDecay"/>
<key attr.name="badPixCfg" attr.type="string" for="node" id="badPixCfg"/>
<key attr.name="cfg" attr.type="string" for="node" id="cfg"/>
<key attr.name="gainSat" attr.type="string" for="node" id="gainSat"/>
<key attr.name="statsBase" attr.type="string" for="node" id="statsBase"/>
<key attr.name="statsPlanes" attr.type="string" for="node" id="statsPlanes"/>
<key attr.name="statsPatchCfg" attr.type="string" for="node" id="statsPatchCfg"/>
<key attr.name="statsPatchStart" attr.type="string" for="node" id="statsPatchStart"/>
<key attr.name="statsPatchSkip" attr.type="string" for="node" id="statsPatchSkip"/>
<key attr.name="statsThresh" attr.type="string" for="node" id="statsThresh"/>
<key attr.name="afF1coefs" attr.type="string" for="node" id="afF1coefs"/>
<key attr.name="afF2coefs" attr.type="string" for="node" id="afF2coefs"/>
<key attr.name="afMinThresh" attr.type="string" for="node" id="afMinThresh"/>
<key attr.name="afSubtract" attr.type="string" for="node" id="afSubtract"/>
<key attr.name="afPatchCfg" attr.type="string" for="node" id="afPatchCfg"/>
<key attr.name="afPatchStart" attr.type="string" for="node" id="afPatchStart"/>
<key attr.name="afStatsBase" attr.type="string" for="node" id="afStatsBase"/>
<key attr.name="histLumaBase" attr.type="string" for="node" id="histLumaBase"/>
<key attr.name="histRgbBase" attr.type="string" for="node" id="histRgbBase"/>
<key attr.name="internal0" attr.type="string" for="node" id="internal0"/>
<key attr.name="internal1" attr.type="string" for="node" id="internal1"/>
<key attr.name="index" attr.type="int" for="edge" id="index"/>
<key attr.name="inputIndex" attr.type="int" for="edge" id="inputIndex"/>
<key attr.name="outputIndex" attr.type="int" for="edge" id="outputIndex"/>
<key attr.name="kernel" attr.type="string" for="edge" id="kernel"/>
<graph edgedefault="directed" id="Pipeline">
<data key="includes">testHwRawSetup.h</data>
<data key="binary">mbinImgSipp</data>
<data key="shaveFirst">0</data>
<data key="shaveLast">0</data>
<data key="mkPath">../build/sipp/</data>
<data key="myriadTarget">MA2x5x</data>
<node id="0">
<node id="outputbuffer0">
<data key="dataType">UInt8</data>
<data key="numPl">SIPP_HW_RAW_BUFFER_NUM_PLANES</data>
</node>
<data key="name">rawMa2x5x0</data>
<data key="id">rawMa2x5x</data>
<data key="description">The Raw filter performs a number of functions on raw CFA data, prior to demosaicing,  including  hot  and  cold  pixel  suppression,  Gr/Gb  imbalance  correction,  digital  gain, and statistics collection.</data>
<data key="flags">0x0</data>
<data key="outW">SIPP_HW_RAW_BUFFER_WIDTH</data>
<data key="outH">SIPP_HW_RAW_BUFFER_HEIGHT</data>
<data key="symbol">SIPP_RAW_ID</data>
<data key="x">416</data>
<data key="y">283</data>
<data key="w">75</data>
<data key="h">75</data>
<data key="grgbPlat">0</data>
<data key="grgbDecay">0</data>
<data key="badPixCfg">0</data>
<data key="cfg">RAW_CFG(BAYER, BAYER_PATTERN,0,0,AE_PATCH_STATS_EN,AE_RGB_HIST_STATS_EN,(INPUT_DATA_WIDTH-1),0,0,AF_PATCH_STATS_EN,0,AE_Y_HIST_STATS_EN,0)</data>
<data key="gainSat">((DIGI_SAT&lt;&lt;16) | DIGI_GAIN ), ((DIGI_SAT&lt;&lt;16) | DIGI_GAIN ), ((DIGI_SAT&lt;&lt;16) | DIGI_GAIN ), ((DIGI_SAT&lt;&lt;16) | DIGI_GAIN )</data>
<data key="statsBase">(UInt32*)aeStatsBuff</data>
<data key="statsPlanes">(PATCH_PLANE_0   &lt;&lt;  0) | ( PATCH_PLANE_1   &lt;&lt;  4) | (Y_HIST_PLANE    &lt;&lt; 16) | ((ACTIVE_PATCH_PLANES - 1)*(2&lt;&lt;19))</data>
<data key="statsPatchCfg">((AE_HPATCHES_NO - 1) | (AE_VPATCHES_NO - 1) &lt;&lt;  8 | (AE_PATCH_WIDTH - 1) &lt;&lt; 16 | (AE_PATCH_HEIGHT- 1) &lt;&lt; 24)</data>
<data key="statsPatchStart">(AE_Y_START     &lt;&lt; 16) |  AE_X_START</data>
<data key="statsPatchSkip">((AE_Y_SKIP - 1) &lt;&lt; 16) | (AE_X_SKIP - 1)</data>
<data key="statsThresh">(0&lt;&lt;16) | 255</data>
<data key="afF1coefs">44,  288, -200,   16,  28,  16,  368, -212, 536, -1076, 536</data>
<data key="afF2coefs">44, -288, -200,  104, 204, 104, -368, -212,  76,  -152,  76</data>
<data key="afMinThresh">0</data>
<data key="afSubtract">32</data>
<data key="afPatchCfg">((AF_HPATCHES_NO - 1) | ((AF_VPATCHES_NO - 1) &lt;&lt; 8 )| ((AF_PATCH_WIDTH - 1) &lt;&lt; 16)| ((AF_PATCH_HEIGHT- 1) &lt;&lt; 24))</data>
<data key="afPatchStart">((AF_X_START) |(AF_Y_START &lt;&lt; 16))</data>
<data key="afStatsBase">(UInt32*)afStatsBuff</data>
<data key="histLumaBase">histLuma</data>
<data key="histRgbBase">histRGB</data>
</node>
<node id="1">
<node id="outputbuffer0">
<data key="dataType">UInt8</data>
<data key="numPl">SIPP_HW_RAW_BUFFER_NUM_PLANES</data>
</node>
<data key="name">dmaIn0</data>
<data key="id">dmaIn</data>
<data key="description">DMA in filter</data>
<data key="flags">0x00</data>
<data key="outW">SIPP_HW_RAW_BUFFER_WIDTH</data>
<data key="outH">SIPP_HW_RAW_BUFFER_HEIGHT</data>
<data key="symbol">SIPP_DMA_ID</data>
<data key="x">417</data>
<data key="y">94</data>
<data key="w">75</data>
<data key="h">75</data>
<data key="internal0">&amp;SippHwRaw_dmaIn0_buffer</data>
<data key="internal1"/>
</node>
<node id="2">
<node id="outputbuffer0">
<data key="dataType">UInt8</data>
<data key="numPl">SIPP_HW_RAW_BUFFER_NUM_PLANES</data>
</node>
<data key="name">dmaOut0</data>
<data key="id">dmaOut</data>
<data key="description">DMA out filter</data>
<data key="flags">0x00</data>
<data key="outW">SIPP_HW_RAW_BUFFER_WIDTH</data>
<data key="outH">SIPP_HW_RAW_BUFFER_HEIGHT</data>
<data key="symbol">SIPP_DMA_ID</data>
<data key="x">416</data>
<data key="y">465</data>
<data key="w">75</data>
<data key="h">75</data>
<data key="internal0">auto</data>
<data key="internal1">output.raw</data>
</node>
<edge id="0" source="0" target="2">
<data key="index">0</data>
<data key="inputIndex">0</data>
<data key="outputIndex">0</data>
<data key="kernel">1x1</data>
</edge>
<edge id="1" source="1" target="0">
<data key="index">0</data>
<data key="inputIndex">0</data>
<data key="outputIndex">0</data>
<data key="kernel">5x5</data>
</edge>
</graph>
</graphml>
