#ifndef INPUT_GENERATOR_H_
#define INPUT_GENERATOR_H_

#include <map>
#include <string>
#include <vector>
#include <utility>

#include "DataGenerator.h"
#include "half.h"
#include <VectorTypes.h>
class InputGenerator
{
public:
	InputGenerator();
	~InputGenerator();

	void AddGenerator(std::string name, DataGenerator* dGen);
	void SelectGenerator(std::string generator);
	void RemoveGenerator(std::string generator);

	//returns one or more uninitialized lines
	unsigned char* GetEmptyLine(unsigned int lineSize);
    unsigned short* GetEmptyLineU16(unsigned int lineSize);
    half* GetEmptyLineFp16(unsigned int lineSize);
    float4 GetEmptyLineFloat4();
    int4 GetEmptyLineInt4();
    uint4 GetEmptyLineUInt4();
    short8 GetEmptyLineShort8();
    ushort8 GetEmptyLineUShort8();
    char16 GetEmptyLineChar16();
    uchar16 GetEmptyLineUChar16();
	half8 GetEmptyLineHalf8();
	unsigned char** GetEmptyLines(unsigned int lineSize, unsigned int lineNo);
    unsigned short** GetEmptyLinesU16(unsigned int lineSize, unsigned int lineNo);
	half** GetEmptyLinesFp16(unsigned int lineSize, unsigned int lineNo);

	//reuturns one line initialized with data from the
	//current selected data generator
	unsigned char* GetLine(unsigned int lineSize, unsigned char init);
    unsigned short* GetLineU16(unsigned int lineSize, unsigned short init);
    half* GetLineFloat16(unsigned int lineSize, half init);
    float* GetLineFloat(unsigned int lineSize, float init);
    
	unsigned char* GetLine(unsigned int lineSize, unsigned char low, unsigned char high, unsigned char step = 0);
    unsigned short* GetLineU16(unsigned int lineSize, unsigned short low, unsigned short high);
	half* GetLineFloat16(unsigned int lineSize, half low, half high);
	float* GetLineFloat(unsigned int lineSize, float low, float high);

	//reuturns one or more lines initialized with data from the
	//current selected data generator
	unsigned char** GetLines(unsigned int lineSize, unsigned int lineNo, unsigned char init);
	unsigned char** GetLines(unsigned int lineSize, unsigned int lineNo,
			unsigned char low, unsigned char high, unsigned char step = 0);
    unsigned short** GetLinesU16(unsigned int lineSize, unsigned int lineNo, unsigned short init);
    unsigned short** GetLinesU16(unsigned int lineSize, unsigned int lineNo, unsigned short low, unsigned short high);
	half** GetLinesFloat16(unsigned int lineSize, unsigned int lineNo, half init);
	half** GetLinesFloat16(unsigned int lineSize, unsigned int lineNo, half low, half high);            
	float** GetLinesFloat(unsigned int lineSize, unsigned int lineNo, float init);
	float** GetLinesFloat(unsigned int lineSize, unsigned int lineNo, float low, float high);

	//fills the input line with data generated by current selected generator
	void FillLine(unsigned char* line, unsigned int lineSize, unsigned char init);
	void FillLine(unsigned char* line, unsigned int lineSize, unsigned char low, unsigned char high, unsigned char step = 0);
	void FillLines(unsigned char** lines, unsigned int lineSize, unsigned int lineNo, unsigned int init);
	void FillLines(unsigned char** lines, unsigned int lineSize, unsigned int lineNo, unsigned char low, unsigned char high);

    void FillLine(unsigned short* line, unsigned int lineSize, unsigned short init);
    void FillLineRange(unsigned short* line, unsigned int lineSize, unsigned int startPos, unsigned int endPos, unsigned short init);
    void FillLine(unsigned short* line, unsigned int lineSize, unsigned short low, unsigned short high, unsigned short step);
    void FillLineRange(unsigned short* line, unsigned int lineSize, unsigned int startPos, unsigned int endPos, unsigned short low, unsigned short high, unsigned short step);
    void FillLines(unsigned short** lines, unsigned int lineSize, unsigned int lineNo, unsigned int init);
    void FillLines(unsigned short** lines, unsigned int lineSize, unsigned int lineNo, unsigned short low, unsigned short high);
    
	void FillLine(float* line, unsigned int lineSize, float init);
	void FillLine(float* line, unsigned int lineSize, float low, float high);
	void FillLines(float** lines, unsigned int lineSize, unsigned int lineNo, float init);
	void FillLines(float** lines, unsigned int lineSize, unsigned int lineNo, float low, float high);

	void FillLine(half* line, unsigned int lineSize, half init);
	void FillLine(half* line, unsigned int lineSize, half low, half high);
	void FillLines(half** lines, unsigned int lineSize, unsigned int lineNo, half init);
	void FillLines(half** lines, unsigned int lineSize, unsigned int lineNo, half low, half high);

	//fills the range [startPos, endPos) in the input line with data
	//generated by current selected generator
	void FillLineRange(unsigned char* line, unsigned int lineSize, unsigned int startPos, unsigned int endPos, unsigned char init);
	void FillLineRange(unsigned char* line, unsigned int lineSize, unsigned int	startPos, unsigned int endPos, unsigned char low, unsigned char high, unsigned char step = 0);
	void FillLineRange(float* line, unsigned int lineSize, unsigned int startPos, unsigned int endPos, float init);
	void FillLineRange(float* line, unsigned int lineSize, unsigned int startPos, unsigned int endPos, float low, float high);

	//given an array of pointers as input it returns another array
	//with each pointer starting at a given offset from the inital one
	unsigned char** GetOffsettedLines(unsigned char** lines, unsigned int lineNo, unsigned int offset);
    unsigned short** GetOffsettedLines(unsigned short** lines, unsigned int lineNo, unsigned int offset);    
	half** GetOffsettedLines(half** lines, unsigned int lineNo, unsigned int offset);
private:
	unsigned char** allocateLines(unsigned int lineSize, unsigned int lineNo);
	half** allocateLinesFp16(unsigned int lineSize, unsigned int lineNo);
    unsigned short** allocateLinesU16(unsigned int lineSize, unsigned int lineNo);
	float4* allocateLineFloat4();
	int4* allocateLineInt4();
	uint4* allocateLineUInt4();
	short8* allocateLineShort8();
	ushort8* allocateLineUShort8();
	char16* allocateLineChar16();
	uchar16* allocateLineUChar16();
	half8* allocateLineHalf8();
	void freeLines();

	DataGenerator* currentGenerator;
	DataGenerator* defaultGenerator;
	std::map<std::string, DataGenerator*> dataGenerators;

	std::vector <std::pair<unsigned int, unsigned char**> > data;
	std::string defaultName;
};

#endif /* INPUT_GENERATOR_H_ */
